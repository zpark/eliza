{"searchDocs":[{"title":"Adding Plugins in V2","type":0,"sectionRef":"#","url":"/blog/add-plugins","content":"","keywords":"","version":null},{"title":"What's New‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#whats-new","content":" The codebase is more compact in order to be easier to work with. V2 also features a formal API specification for better definition and compatibility. When it comes to plugins, here's what's new:  No central repo needed: Host your plugin in your own GitHub repoOne-line integration: Add plugins to your package.json and agent.json.Open registry: Submit a PR to get listed on the Plugin Registry.Dynamic loading: Load plugins from external repositories  Many of these improvements were already being adopted in V1 toward the end of its lifecycle in order to create a natural evolution path for developers already familiar with the platform.  ","version":null,"tagName":"h2"},{"title":"üõ† Plugin Architecture‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#-plugin-architecture","content":" ElizaOS V2 uses a unified plugin architecture where everything is a plugin:  type Plugin = { name: string; description: string; clients?: Client[]; adapters?: Adapter[]; actions?: Action[]; services?: Service[]; providers?: Provider[]; evaluators?: Evaluator[]; };   This means you can extend virtually any aspect of your agent's functionality:  Platform connections (Discord, Twitter, Telegram)Storage options (PostgreSQL, MongoDB, Redis)Action capabilities (what your agent can do)Service providers (background processes and specialized capabilities)Evaluation components (how your agent makes decisions)    ","version":null,"tagName":"h3"},{"title":"üß© How to Add a Plugin in V2‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#-how-to-add-a-plugin-in-v2","content":" Here are steps on how to add your plugin:  ","version":null,"tagName":"h2"},{"title":"1. Package.json Integration‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#1-packagejson-integration","content":" # Install plugin directly from GitHub npm install @elizaos/plugin-example@github:your-org/plugin-example # Or update package.json manually &quot;dependencies&quot;: { &quot;@elizaos/plugin-example&quot;: &quot;github:your-org/plugin-example&quot; }   ","version":null,"tagName":"h3"},{"title":"2. Agent Configuration‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#2-agent-configuration","content":" { &quot;name&quot;: &quot;MyAgent&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-example&quot;] }   The plugin will be automatically loaded when your agent starts.    ","version":null,"tagName":"h3"},{"title":"üñ•Ô∏è CLI Plugins Commands‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#Ô∏è-cli-plugins-commands","content":" The ElizaOS CLI provides several commands to manage plugins. To install the CLI:  tip bun install -g @elizaos/cli   ","version":null,"tagName":"h2"},{"title":"Plugin Management Commands‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#plugin-management-commands","content":" # List all plugins available in the registry elizaos plugins list # List plugins currently installed in your project elizaos plugins installed-plugins # Add a plugin to your project (with options) elizaos plugins add &lt;plugin-name&gt; [--no-env-prompt] [--branch &lt;branchName&gt;] [--tag &lt;tagname&gt;] # Remove a plugin from your project elizaos plugins remove &lt;plugin-name&gt;   elizaos plugins list (aliases: ls, l): Lists available plugins from the registry.elizaos plugins installed-plugins: Lists plugins found in your project's dependencies.elizaos plugins add &lt;plugin&gt; (alias: install): Adds a plugin to your project. Options: --no-env-prompt: Skip prompting for environment variables.--branch &lt;branchName&gt;: Specify a branch to install from when using a monorepo source (default: main).-T, --tag &lt;tagname&gt;: Specify a package tag to install (e.g., latest). elizaos plugins remove &lt;plugin&gt; (aliases: delete, del, rm): Removes a plugin from your project and cleans up files.  ","version":null,"tagName":"h3"},{"title":"Publishing Plugins‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#publishing-plugins","content":" To publish your own plugin to the registry:  elizaos publish   This command will guide you through publishing your plugin, including updating the registry and optionally publishing to npm or GitHub. For more details, see the Publishing section or run elizaos publish --help.  These commands streamline plugin discovery, installation, removal, and distribution.    ","version":null,"tagName":"h3"},{"title":"üìÇ Creating Your Own Plugin‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#-creating-your-own-plugin","content":" The minimal structure for a V2 plugin repository:  plugin-example/ ‚îú‚îÄ‚îÄ assets/ ‚îÇ ‚îú‚îÄ‚îÄ logo.png // 400x400 branding ‚îÇ ‚îú‚îÄ‚îÄ banner.png // 1280x640 banner ‚îÇ ‚îî‚îÄ‚îÄ screenshots/ // Usage examples ‚îú‚îÄ‚îÄ src/ ‚îÇ ‚îú‚îÄ‚îÄ index.ts // Plugin entry point ‚îÇ ‚îî‚îÄ‚îÄ ... (plugin code) ‚îú‚îÄ‚îÄ package.json // With agentConfig section ‚îî‚îÄ‚îÄ README.md // Documentation   Your package.json should include plugin metadata:  &quot;agentConfig&quot;: { &quot;pluginType&quot;: &quot;elizaos:plugin:1.0.0&quot;, &quot;pluginParameters&quot;: { &quot;API_KEY&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;API key for the service&quot; } } }     ","version":null,"tagName":"h2"},{"title":"üì¨ Submit to the Registry‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#-submit-to-the-registry","content":" To get your plugin listed:  Host your plugin on GitHubAdd branding, docs, and working examplesSubmit a PR to the registry  Since the plugin lives in your repo you can start using it right away. The registry mainly helps with discovery, just know the review process typically takes up to a week so be prepared for that.  The ElizaOS V2 ecosystem already includes plugins for:  Blockchain integration (Solana, Ethereum)Social media (Twitter, Discord, Telegram)Data processing (PDF, Image, Video)External APIs (Browser, Web Search)Local LLM deployment (Llama)  See the plugin showcase here: https://eliza.how/packages    ","version":null,"tagName":"h2"},{"title":"More Links‚Äã","type":1,"pageTitle":"Adding Plugins in V2","url":"/blog/add-plugins#more-links","content":" elizaos-plugins.github.io/registryPackages explorerPlugin Guide ","version":null,"tagName":"h3"},{"title":"Automating Eliza's Documentation","type":0,"sectionRef":"#","url":"/blog/autodocs","content":"","keywords":"","version":null},{"title":"The Broader Information Ecosystem‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#the-broader-information-ecosystem","content":" Eliza thrive on information from diverse sources (GitHub, Discord, etc.). Efficiently capturing and processing this data is vital. The diagram below shows our information ecosystem, where data streams are collected, AI-enriched, and centralized in our knowledge repository. This post focuses on the &quot;üìö docs/&quot; portion and its automation.  The following diagram illustrates this broader flow, showing how various data streams are collected, processed, enriched (often with AI), and centralized into our knowledge repository. This repository then feeds various consumption layers, including AI agents, human users, and visual dashboards.    View mermaid  Details  While this diagram captures the full scope, this article will zoom in on the &quot;üìö docs/&quot; portion within the &quot;KNOW (Central Repository)&quot; and how our CI/CD pipelines automate its maintenance and enrichment.  Our documentation itself lives within the packages/docs directory and is built using Docusaurus, a static site generator optimized for creating clean, accessible documentation sites. Key configuration files like docusaurus.config.ts define the site's structure, plugins, themes, and navigation, including sidebars managed via sidebars.ts.  We manage several key types of content:  Core Documentation: Conceptual explanations, guides, and tutorials for ElizaOS.API Reference: Automatically generated from our TypeScript code comments.REST API Docs: Derived from OpenAPI specifications.Packages: Documentation for individual adapters, clients, and plugins.Partners &amp; Community: Information related to our ecosystem partners and community initiatives.Blog &amp; News: Regular updates, articles, and aggregated news from the AI and ElizaOS space.  Static assets, such as images, diagrams, and important text files like llms.txt (a context file for AI models, found in packages/docs/static/), are also managed within this structure.  With this context in mind, let's delve into how automation helps us keep this diverse set of documentation current and accurate.    ","version":null,"tagName":"h2"},{"title":"Automating Content Generation & Updates: The Mechanics‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#automating-content-generation--updates-the-mechanics","content":" Maintaining accurate and timely documentation requires robust automation. Here's a concise look at the key mechanisms we employ:  ","version":null,"tagName":"h2"},{"title":"News Aggregation & Syndication‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#news-aggregation--syndication","content":" Freshness in our news section is critical. The update-news.sh script, orchestrated by the update-news.yml GitHub workflow, automates this.  Process: It fetches new Markdown articles daily from a predefined source (currently AI News for elizaOS).Integration: New news files are added to packages/docs/news/ and the repomix.config.json is updated. This ensures our AI context files (see below) also benefit from the latest news, enhancing the knowledge of our AI assistants.  ","version":null,"tagName":"h3"},{"title":"AI Context Files: llms.txt & llms-full.txt‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#ai-context-files-llmstxt--llms-fulltxt","content":" These files are crucial for providing our AI systems (like documentation Q&amp;A bots or RAG agents) with relevant, up-to-date context about ElizaOS. We use Repomix, a powerful tool that packs your entire repository into a single, AI-friendly file, perfect for when you need to feed your codebase to Large Language Models (LLMs).  Generation: The llmstxt-generator.yml workflow uses repomix, configured by repomix.config.json and repomix-full.config.json.Content: repomix scans specified project files and documentation, compiling them into packages/docs/static/llms.txt (a general overview) and packages/docs/static/llms-full.txt (a more comprehensive technical deep-dive).Impact: This ensures our AI can answer questions based on the latest code and documentation without manual re-training on every minor change.  ","version":null,"tagName":"h3"},{"title":"JSDoc & Typedoc‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#jsdoc--typedoc","content":" The jsdoc-automation.yml workflow leverages our autodoc package to help maintain JSDoc comments in our TypeScript codebase. These comments are then processed by the Docusaurus Typedoc Plugin (configured in docusaurus.config.ts) to generate the browsable API reference in /api. This plugin integrates TypeDoc into the Docusaurus lifecycle, presetting relevant typedoc-plugin-markdown options and generating a configurable Docusaurus sidebar.  OpenAPI for REST: Our REST API documentation in /docs/rest is generated from an OpenAPI specification file (packages/docs/src/openapi/eliza-v1.yaml) using docusaurus-plugin-openapi-docs. This ensures the API docs are always in sync with the defined contract.  ","version":null,"tagName":"h3"},{"title":"README Translations via AI‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#readme-translations-via-ai","content":" To broaden accessibility, the generate-readme-translations.yml workflow uses an AI model to translate our main project README.md into multiple languages. These translations are then committed to the repository.  ","version":null,"tagName":"h3"},{"title":"Supporting Scripts‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#supporting-scripts","content":" Several other scripts in packages/docs/scripts/ handle more specialized tasks:  update-partner-pages.js: This script automates the creation and maintenance of individual documentation pages for our partners, located under packages/docs/partners/. It reads partner data (name, description, logo, website, social links, etc.) from packages/docs/src/data/partners.tsx. For each partner, it generates a standardized Markdown page, ensuring consistency and ease of updates by modifying a central data source.summarize.sh: A versatile command-line utility that leverages AI models via the OpenRouter API to summarize various file types, including text, JSON, and even MP3 audio (which it first transcribes using insanely-fast-whisper). This script can be used to quickly generate summaries of content. For instance, when new videos are uploaded (e.g., to YouTube), summarize.sh can be used to transcribe and summarize the content, forming the basis for new documentation pages. It offers options for custom prompts, model selection, and output file specification.get-changelog.py: Helps in generating changelogs from repository history.  ","version":null,"tagName":"h3"},{"title":"Dynamic Package Showcase (eliza.how/packages)‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#dynamic-package-showcase-elizahowpackages","content":" Our package showcase is a key resource for discovering ElizaOS adapters, clients, and plugins. Its content is dynamically generated through an automated process:  Registry Fetching: The update-registry.js script periodically fetches the list of available packages from the central ElizaOS Plugins Registry.Custom Data Merging: This script enriches the registry data with custom descriptions and preview image paths defined in plugin-descriptions.json. This file allows us to provide more curated information than what might be available directly from GitHub repository descriptions.Data Generation: The processed data is then used to generate registry-users.tsx, which exports a structured array of all packages.Display Logic: users.tsx consumes this array, defines tags, and handles sorting for the showcase.Rendering: Finally, the React components in packages/docs/src/pages/showcase/ (primarily index.tsx and its sub-components) render the interactive showcase.AI-Assisted Summaries: The plugin_summary_prompt.txt can be used with summarize.sh to help generate or update descriptions within plugin-descriptions.json, further streamlining content maintenance for the showcase.  This automated pipeline ensures the package showcase remains comprehensive and up-to-date with minimal manual intervention.  These automated processes form the core of our &quot;docs-as-code&quot; philosophy, reducing toil and improving the quality and timeliness of our documentation.    ","version":null,"tagName":"h3"},{"title":"Automation Backbone: GitHub Actions‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#automation-backbone-github-actions","content":" All this automation is powered by our CI/CD pipelines, defined using GitHub Actions. These workflows, located in our .github/workflows/ directory, are the engine that keeps our documentation building, testing, and deploying smoothly.  Key workflows ensure documentation integrity and timely updates:  Core CI Checks (ci.yaml, pr.yaml): On every push or pull request, these workflows run essential checks. For documentation, this includes linting Markdown files, checking for broken links, and ensuring the Docusaurus site builds successfully. This catches errors early, before they reach the live documentation.Automated Content Generation Triggers: As detailed in the previous section, workflows like update-news.yml, llmstxt-generator.yml, jsdoc-automation.yml, and generate-readme-translations.yml are triggered on schedules or specific events (e.g., pushes to main branches) to automatically update relevant documentation sections or supporting files.Deployment: The Docusaurus site is automatically deployed upon merges to the main branch using the command USE_SSH=true bun run deploy. This ensures that approved changes are reflected on the live documentation site (eliza.how/docs) promptly.  This CI/CD setup not only automates repetitive tasks but also enforces quality standards, ensuring that our documentation remains a reliable resource.    ","version":null,"tagName":"h2"},{"title":"Living Documentation: Challenges, Learnings & Future Vision‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#living-documentation-challenges-learnings--future-vision","content":" Treating documentation as code and automating its lifecycle is a journey, not a destination. While our current setup significantly improves efficiency and consistency, we continuously learn and identify areas for enhancement.  ","version":null,"tagName":"h2"},{"title":"Current Challenges & Learnings‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#current-challenges--learnings","content":" Our docs-as-code pipeline is robust, but we're always working to make it better. This means focusing on:  Speed: Making sure docs build quicklyQuality: Double-checking any content written by AI to ensure it's accurate and clearTeamwork for Tools: Keeping all the different software parts and scripts working together smoothly, especially as we add new things  ","version":null,"tagName":"h3"},{"title":"Future Vision & Enhancements‚Äã","type":1,"pageTitle":"Automating Eliza's Documentation","url":"/blog/autodocs#future-vision--enhancements","content":" Our goal is to make the documentation process even more seamless, intelligent, and contributor-friendly. We're exploring enhancements like:  Smarter Triggers: Targeting CI jobs to run only when relevant files change.Smarter Link Checks: Moving beyond basic broken link detection to validating link relevance.Enhanced AI Assistance: Using AI to identify outdated docs or suggest improvements based on search queries.Automated Video Documentation: Using summarize.sh to transcribe, summarize, and draft PRs for new video content, plus automating VideoGallery updates.Automated Plugin Descriptions: Using CI and summarize.sh to propose updates to plugin-descriptions.json when new plugins or README changes are detected.Faster Feedback Loops: Optimizing workflows for quicker contributor feedback on PRs.AI-Driven Content Strategy: Using site analytics to guide AI in suggesting or outlining new documentation.  We're always refining these processes. Your contributions and feedback via GitHub or Discord are invaluable in helping us build an even better documentation experience, we're listening!   ","version":null,"tagName":"h3"},{"title":"auto.fun: Where AI Projects Thrive, Not Just Launch","type":0,"sectionRef":"#","url":"/blog/autofun-intro","content":"","keywords":"","version":null},{"title":"The problem with token launches and how we fixed it‚Äã","type":1,"pageTitle":"auto.fun: Where AI Projects Thrive, Not Just Launch","url":"/blog/autofun-intro#the-problem-with-token-launches-and-how-we-fixed-it","content":" The era of pure speculation and disposable memecoins is giving way to a new generation of projects that blend AI, tokenomics, and long-term vision.      When we launched our own project's token, we did it the &quot;right&quot; way ‚Äì a fair launch, open to the public, allowing anyone to participate from day one. And by all metrics, it was a success: massive interest, high engagement, and meta-changing adoption of the elizaOS framework.  But there was a problem.  Fair launches, while philosophically aligned with crypto's ethos, often leave project teams struggling. We had no reserved supply to fund development. Selling tokens to cover expenses wasn't an option ‚Äì it creates FUD in the community, and for good reason: when a team is forced to dump its own token to survive, it could signal instability. The  reality is that when your project is only 2 months old and with no VC backing, you don't have the basics covered, let alone revenue to fund progress.  At the same time, we knew all too well about the opposite extreme: closed-door, insider-led token launches that benefited only a select few. Low float, high FDV launches that price out regular users. Bundled deals where insiders control supply and the community is left as exit liquidity.  Neither of these models work in the long term. So we built  auto.fun  ‚Äì an AI-native, creator-first launchpad that finds the balance between truly fair access and long-term sustainability.    ","version":null,"tagName":"h2"},{"title":"The next evolution of crypto launches: AI-native, creator-first‚Äã","type":1,"pageTitle":"auto.fun: Where AI Projects Thrive, Not Just Launch","url":"/blog/autofun-intro#the-next-evolution-of-crypto-launches-ai-native-creator-first","content":" We designed auto.fun to support the entire lifecycle of projects ‚Äì from inception to launch, and beyond:  Fairer than fair launch: A bonding curve mechanism that lets teams secure up to 50% of their token supply before market listing, avoiding the pitfalls of a pure fair launch while ensuring community access isn't gated by insiders.No-code agent builder: auto.fun allows creators to launch agents alongside their token with the Fleek integration, or to connect an existing agent to their token in a couple of clicks.AI-generated marketing: Create tokens, content, and assets from a single prompt.Sustainable project funding ‚Äì The liquidity NFT mechanism ensures that projects earn ongoing revenue from trading fees, reducing reliance on token sales to fund development.  ","version":null,"tagName":"h2"},{"title":"Why auto.fun is the best place to launch your project‚Äã","type":1,"pageTitle":"auto.fun: Where AI Projects Thrive, Not Just Launch","url":"/blog/autofun-intro#why-autofun-is-the-best-place-to-launch-your-project","content":" Launching a project isn't just about putting a token on the market ‚Äì it's about building a community and sustaining it.  We know the power of strong messaging and community engagement. Our own project took off in part because of its memetic origins, capturing attention in a crowded market. But visibility alone isn't enough.  auto.fun  ensures that projects launching on our platform have the tools to not just attract an audience, but to retain and grow it sustainably.  This is why the best projects are launching on auto.fun.  We're working with cutting-edge teams building AI-powered agents, innovative agent-native tokens, and projects that are pushing the boundaries of what's possible in crypto. Some are launching entirely new tokens and agents, while others are bringing existing AI tools to integrate with our launchpad.  Here's what's coming:  @MakeFight_Great‚Äì AI-powered social agents BrawlChain and The Algorithm will battle it out on X, each with its own token.@AlloraNetwork‚Äì Launching @Squidllora, leveraging the Allora Network's predictive inferences and advanced trading signals to manage a portfolio.@drpepeai‚Äì Launching @DogLifeAI, a medical AI agent providing detailed advice and services for dog owners, with a token that grants access to this and future agents in their ecosystem.@kingczai‚Äì With their token they're set to unlock exclusive perks and community access‚Äîno secret handshake needed.@comput3ai‚Äì Launching $COM, that will act as credits for their decentralized compute services.  These are just a few of the projects joining us at launch, each leveraging the AI-native tooling and sustainable tokenomics that make auto.fun the best place to launch.    ","version":null,"tagName":"h2"},{"title":"auto.fun is YOURS‚Äã","type":1,"pageTitle":"auto.fun: Where AI Projects Thrive, Not Just Launch","url":"/blog/autofun-intro#autofun-is-yours","content":" Every token that graduates through auto.fun feeds the flywheel for $ai16z holders: our portion of swap fees of graduated Agent Tokens (ATs) is routed into open‚Äëmarket buybacks of $ai16z. And once the upcoming $ai16z : AT secondary pools go live, they'll be paired with the very ATs that generated the revenue, deepening liquidity on both sides and capturing a perpetual share of trading fees. The result is a compounding loop where every launch, swap, and routing path strengthens $ai16z's liquidity and steadily channels platform value back to long‚Äëterm holders.  ","version":null,"tagName":"h2"},{"title":"A truly AI-empowered future‚Äã","type":1,"pageTitle":"auto.fun: Where AI Projects Thrive, Not Just Launch","url":"/blog/autofun-intro#a-truly-ai-empowered-future","content":" auto.fun isn't just about launching tokens ‚Äì it's about creating the most advanced AI-enhanced platform for new projects. As elizaOS evolves, so will auto.fun. Here's what the short-term roadmap looks like:  v2 of the Eliza framework will bring more sophisticated agent creation tools, allowing users to build agents with real utility.AI-powered tools will enable creators to generate more images, videos, and marketing content for their social agent to promote.Expanded integrations will allow for even more complex AI-powered interactions and tokenomics customization.  With auto.fun, you don't just launch a token‚Äîyou launch an AI-native ecosystem, designed for long-term sustainability and growth.  ","version":null,"tagName":"h2"},{"title":"Join the next wave of AI-native crypto‚Äã","type":1,"pageTitle":"auto.fun: Where AI Projects Thrive, Not Just Launch","url":"/blog/autofun-intro#join-the-next-wave-of-ai-native-crypto","content":" auto.fun is built for the next chapter of crypto. The era of launching purely memetic tokens with no utility is fading. The next generation of projects need to be AI-forward and built to last.  auto.fun is at the forefront of this movement. If you're building any kind of project ‚Äì whether it's an agent, a service, meme, or a new form of digital interaction ‚Äì there's no better place to launch.  We're not just another launchpad. We're the AI-native creator-first platform that finally gets it right.  Welcome to the future of AI-powered token launches.  press the fun button.   ","version":null,"tagName":"h2"},{"title":"Autofun Tokenomics","type":0,"sectionRef":"#","url":"/blog/autofun-tokenomics","content":"","keywords":"","version":null},{"title":"Overview‚Äã","type":1,"pageTitle":"Autofun Tokenomics","url":"/blog/autofun-tokenomics#overview","content":" auto.fun is the first token launch platform purpose-built for agent-native ecosystems. Designed and maintained by Eliza Labs, it offers a low-friction, high-alignment environment for launching new tokens and/or autonomous agents built on the ElizaOS stack.  (https://x.com/autodotfun/article/1915889326484766781/media/1913567183969431552)    Our long-term tokenomics architecture centers around a dual-pool system that compounds value as more agents are deployed. While some components are still being actively developed, key mechanisms are already operational‚Äîmost notably a swap fee-sharing system collaboratively built with Raydium, and buybacks that directly convert platform revenue into $ai16z buybacks.  This document outlines both the current tokenomic mechanics and the roadmap toward full activation of our tokenomics architecture.  ","version":null,"tagName":"h2"},{"title":"Current Mechanics‚Äã","type":1,"pageTitle":"Autofun Tokenomics","url":"/blog/autofun-tokenomics#current-mechanics","content":" Primary SOL:AT Pools  When an Agent Token (AT) graduates from  auto.fun  to Raydium, the liquidity is burned to create a Liquidity NFT, which is then paired with SOL in the primary liquidity pool (SOL:AT) on Raydium. This offers:  Frictionless UX for traders: All interactions are SOL-denominatedDeep initial liquidity: Ensured via highly-calibrated launch parametersSeamless integration with existing Solana DEX infrastructure  Liquidity NFTs for Project Creators (Powered by Raydium)  Each project that launches on  auto.fun  is issued a Raydium Liquidity NFT, which represents ownership of future fees earned from the burned liquidity on Raydium. This innovation enables:  Ongoing fee capture: Projects earn fees on every swap of their tokenIncentive alignment: Encourages builders to launch agents that provide sustained utilityPermissionless ownership: These NFTs are composable and tradable across Solana  This structure flips the traditional launchpad model‚Äîempowering creators with onchain, revenue-generating assets rather than relying solely on dumping their token allocation or inflating their token supply via emissions.  Platform Fees ‚Üí $ai16z Buybacks  10% of the burned LP (collected in SOL) is set aside when tokens graduate, and the fees generated are used to buyback $ai16z from the open market.  This forms a direct link between platform activity and value accrual for $ai16z holders‚Äîwithout imposing any friction on creators or users.  ","version":null,"tagName":"h2"},{"title":"Future Phase: Secondary Pools ( $ai16z:AT)‚Äã","type":1,"pageTitle":"Autofun Tokenomics","url":"/blog/autofun-tokenomics#future-phase-secondary-pools--ai16z","content":" The next major evolution in our architecture introduces a secondary layer of liquidity: the $ai16z:AT pools. These are not yet live, but their function is defined and development will soon be underway.  When launched, these pools will:  Pair acquired $ai16z (from buybacks) with the Agent Tokens whose fees generated the buysbacksThis automatically deepens liquidity for both $ai16z and the successful ATs over their lifetimeDeeper liquidity unlocks new routing paths, arbitrage opportunities, and composable LP dynamics. Creating a more sustainable and liquid $ai16z ecosystem  (https://x.com/autodotfun/article/1915889326484766781/media/1913567183969431552)  These pools will be abstracted away from the user interface, operating as invisible infrastructure that enhances overall trading depth and price stability.  (https://x.com/autodotfun/article/1915889326484766781/media/1913566950791303168)  Future Flow Diagram (Under Development)  Fees collected in SOL and AT from SOL:AT poolsSOL ‚Üí $ai16z buybacks via market operationsAT + $ai16z ‚Üí $ai16z:AT liquidity provisionedNew pools integrated into routing for deeper ecosystem liquidityAdditional fees collected from secondary pools  These mechanics establish a compunding value loop: each trade strengthens the system, deepens liquidity, and feeds back into ecosystem growth.  ","version":null,"tagName":"h2"},{"title":"Design Principles‚Äã","type":1,"pageTitle":"Autofun Tokenomics","url":"/blog/autofun-tokenomics#design-principles","content":" Our approach is built on core principles that balance modularity, alignment, and scalability:  Minimize friction: Launching a new agent token should be as simple as possibleCapture value organically: No forced staking, arbitrary burns, or hidden taxesEmpower creators &amp; community: Via liquidity ownership, fee share, and no-code agentic toolsEvolve toward composability: Liquidity pools and routing logic are designed to integrate natively with Solana's DeFi stack  ","version":null,"tagName":"h2"},{"title":"The Long-Term Vision‚Äã","type":1,"pageTitle":"Autofun Tokenomics","url":"/blog/autofun-tokenomics#the-long-term-vision","content":" The current phase of auto.fun represents the foundation of a generative economic system. Agent developers gain tools and incentives to launch sustainably; traders benefit from deep liquidity and clean UX; and the broader Eliza ecosystem sees value compounded into $ai16z.  By partnering closely with Raydium, we've ensured that liquidity is not only deep, but modular‚Äîanchored in assets creators actually control, and governed by onchain primitives like NFTs and LP tokens. As we roll out the next phase of dual-pool mechanics, this foundation will allow for seamless compounding of fees, routing complexity, and capital efficiency‚Äîwithout introducing user friction.  In short: each new token strengthens the network. Each trade reinforces the system. And each builder becomes an owner in the economy they're helping create. ","version":null,"tagName":"h2"},{"title":"Easy macOS Development Setup for ElizaOS","type":0,"sectionRef":"#","url":"/blog/macos-dev-setup-guide","content":"","keywords":"","version":null},{"title":"Get Your Mac Ready for ElizaOS in One Step!‚Äã","type":1,"pageTitle":"Easy macOS Development Setup for ElizaOS","url":"/blog/macos-dev-setup-guide#get-your-mac-ready-for-elizaos-in-one-step","content":" Setting up a development environment can sometimes be tricky, especially if you're new to the tools. This guide provides a streamlined way to configure your macOS machine for ElizaOS development using a single command.  Our setup script automates the installation of essential tools:  Homebrew: The missing package manager for macOS.Node.js (Version 23): The JavaScript runtime environment needed for ElizaOS.Bun: A fast JavaScript all-in-one toolkit used by ElizaOS.  ","version":null,"tagName":"h2"},{"title":"The Magic Command‚Äã","type":1,"pageTitle":"Easy macOS Development Setup for ElizaOS","url":"/blog/macos-dev-setup-guide#the-magic-command","content":" Open your macOS Terminal (you can find it in /Applications/Utilities/Terminal.app) and paste the following command, then press Enter:  curl -fsSL https://raw.githubusercontent.com/elizaos/eliza/main/packages/docs/scripts/setup-macos.sh | bash   ","version":null,"tagName":"h2"},{"title":"What Happens Next?‚Äã","type":1,"pageTitle":"Easy macOS Development Setup for ElizaOS","url":"/blog/macos-dev-setup-guide#what-happens-next","content":" The script will:  Check your system: It first ensures you're running on macOS.Install Homebrew: If you don't have Homebrew, it will install it. Homebrew is used to install other development tools.Install Node.js v23: It installs Node.js version 23, which is required for ElizaOS.Install Bun: It installs Bun, our preferred JavaScript toolkit.Configure your PATH: It automatically updates your shell profile (.zprofile, .bash_profile, or .profile) so that your system can find the installed tools.Show a summary: Once finished, the script will display a summary of what was installed and their versions.  You'll see messages in your terminal indicating the progress of each step.  ","version":null,"tagName":"h2"},{"title":"After Running the Script‚Äã","type":1,"pageTitle":"Easy macOS Development Setup for ElizaOS","url":"/blog/macos-dev-setup-guide#after-running-the-script","content":" Once the script completes, it will advise you to either:  Restart your terminal: Close your current terminal window and open a new one.Source your shell profile: Run a command like source ~/.zprofile (the exact file will be mentioned by the script, e.g., ~/.bash_profile or ~/.profile depending on your shell).  This step is crucial for the changes to take effect, allowing you to use commands like node, npm, and bun directly.  ","version":null,"tagName":"h2"},{"title":"Verify Your Setup‚Äã","type":1,"pageTitle":"Easy macOS Development Setup for ElizaOS","url":"/blog/macos-dev-setup-guide#verify-your-setup","content":" The script itself provides a verification summary at the end. You can also manually check the versions of the installed tools by opening a new terminal window (or after sourcing your profile) and running:  node --version npm --version bun --version   You should see Node.js v23.x.x, a version of npm (which comes with Node.js), and the latest version of Bun.  ","version":null,"tagName":"h2"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"Easy macOS Development Setup for ElizaOS","url":"/blog/macos-dev-setup-guide#troubleshooting","content":" Command not found (e.g., node: command not found): This usually means you haven't restarted your terminal or sourced your shell profile correctly after the script ran. Try that first. Ensure you are in a new terminal session.Homebrew issues: If there are issues related to Homebrew, the script will output error messages. You might need to check Homebrew's documentation or logs.Script errors: If the script itself fails, carefully read the error messages. They often provide clues about what went wrong.  You're now all set up to start developing with ElizaOS on your Mac! Happy coding! ","version":null,"tagName":"h2"},{"title":"elizaOS Mission","type":0,"sectionRef":"#","url":"/blog/mission","content":"","keywords":"","version":null},{"title":"Core Philosophy‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#core-philosophy","content":" Autonomy &amp; Adaptability: Agents should learn, reason, and adapt across diverse tasks without human intervention. Modularity &amp; Composability: AI architectures should be modular, allowing for iterative improvements and robust scalability. Decentralization &amp; Open Collaboration: AI systems should move beyond centralized control towards distributed intelligence and community-driven progress.    ","version":null,"tagName":"h2"},{"title":"Where Are We Now?‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#where-are-we-now","content":" Our progress has been substantial, driven by an engaged community and continuous advancements in AI agent development. As an open-source project, we have built a thriving, decentralized ecosystem that is now maturing into the leading AI agent framework.  Here are some key statistics reflecting our current state:  127k+ holders supporting our token ecosystem.500+ contributors actively improving our AI framework100+ plugins developed for ElizaOS, significantly expanding its capabilities.4.5k forks and 14.4k stars on our core repositories, showcasing strong developer interest.200+ PRs merged just last week, highlighting rapid iteration and innovation.  These numbers demonstrate the growing momentum behind Eliza and the collective effort towards building the most extensible and effective AI agent framework on the market today.  In addition to a variety of upcoming enhancements with v2, the following is a roadmap for each of our current products.    ","version":null,"tagName":"h2"},{"title":"DegenSpartanAI‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#degenspartanai","content":" ","version":null,"tagName":"h2"},{"title":"Overview‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#overview","content":" DegenSpartanAI is a crypto-native AI trading agent that blends sentiment analysis, trading strategy automation, and community engagement with a distinct, irreverent personality. Initially refining core trading strategies and its comedic brand, it will evolve into an interactive AI with real-time market insights, user-driven discussions, and NFT collaborations. Long-term, it aims to become a fully autonomous trading agent, integrating multi-platform execution, adaptive learning, and a verifiable track record within the Global Trust Marketplace.  ","version":null,"tagName":"h3"},{"title":"Short Term‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#short-term","content":" Trading Enhancements:  Validate core strategies (e.g., momentum, scalp trading) to secure stable, profitable execution.  Character Updates &amp; Branding:  Fine-tune the DegenSpartanAI personality to ensure commentary better reflects current crypto trends, capturing the comedic spirit of the OG persona.Roll out new DegenSpartanAI visuals and a cohesive brand identity across social media, website, and partnership assets.  Community Engagement:  Maintain an active social presence‚Äîhighlighting successes, failures, and raw opinions about market conditions.Prepare for DegenSpartanAI‚Äôs participation in ‚ÄúBlock Tank,‚Äù showcasing the agent‚Äôs unique edge to a broader audience.Clarify and document the long term strategy and buyback mechanisms that tie $degenai to the DAO, ensuring the community understands how $degenai is connected to the overall strategy.  ","version":null,"tagName":"h3"},{"title":"Medium Term‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#medium-term","content":" Sentiment Analysis:  Implement new data &amp; sentiment analysis layers fresh data feeds that give DegenSpartanAI real-time insight into market sentiment.Provide a user-friendly interface (or dashboard) so traders can see the logic behind DegenSpartanAI‚Äôs buy and sell signals, including relevant social sentiment metrics.  Deeper Community Interaction:  Host DegenSpartanAI ‚ÄúFrontrooms‚Äù, public or semi-private chats where DegenSpartanAI actively converses with other AI agents‚Äîoffering real-time banter, collaborative analysis, and joint trades.Provide Telegram/Discord rooms where traders can ask DegenSpartanAI for feedback on specific tokens or trends, with real-time contextual responses.  AI-Driven NFT &amp; Meme Projects:  Degen NFTs: Collaborate with Magic Eden on an AI-generated NFT series.  ","version":null,"tagName":"h3"},{"title":"Long Term‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#long-term","content":" Telegram Trading Agent:  Transform DegenSpartanAI into a fully‚Äêintegrated Telegram experience where traders enjoy lightning‚Äêfast swaps, in‚Äêdepth sentiment insights, and a steady stream of humorous trash talk.  Full Autonomy &amp; Multi-Platform Trading:  Gradually reduce reliance on manual interventions by refining DegenSpartanAI‚Äôs sentiment analysis, trade sizing, and exit logic across multiple blockchains (L1s/L2s/etc).Incorporate user feedback, real-time data, and historical trade outcomes into an ever-evolving ‚ÄúDegen Brain‚Äù that continuously adapts to new market conditions.  Global Trust Marketplace Ties:  Deeper Integration: When the Global Trust Marketplace (currently being developed for multiple AI trading solutions) solidifies, DegenSpartanAI‚Äôs track record can become a public score‚Äîmaking it a reference ‚Äúagent‚Äù for accuracy and reliability.Reputation &amp; Collab: Position DegenSpartanAI as a top influencer, partnering with other AI and DeFi teams to expand trust-based trading communities.    ","version":null,"tagName":"h3"},{"title":"Autonomous Investor‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#autonomous-investor","content":" ","version":null,"tagName":"h2"},{"title":"Overview‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#overview-1","content":" ElizaOS's Autonomous Investor is a social-trading intelligence layer that combines AI-driven reputation scoring, trade validation, and decentralized execution. It enables users to submit trade calls, assess credibility via a Trust Marketplace, and integrate across various social platforms. Over time, it will evolve into a multi-instance system allowing groups to set their own risk parameters, manage DAO treasuries, and leverage customizable AI modules for enhanced investment strategies.  ","version":null,"tagName":"h3"},{"title":"Short Term‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#short-term-1","content":" Alpha MVP &amp; Small-Group Testing:  We‚Äôve started logging user-submitted calls to establish basic scoring and early reputation-building.The system prioritizes measured, social-trading behavior that feeds into a public leaderboard.We currently mix paper trades with small real-money positions to validate the full workflow‚Äîtrade proposals, basic scam checks, and overall system stability.Ensuring data flow integrity remains a priority, particularly for LLM prompts, aggregator APIs, and security measures.  Initial Rollout (~1,000 Users):  Integrate the Trust Marketplace with the DAO Discord and relevant Telegram groups.These steps will be formally announced in Discord and on X.We‚Äôll provide onboarding guidelines for novices while gathering feedback from experienced traders.  Trust Marketplace Official Go Live!  ","version":null,"tagName":"h3"},{"title":"Medium Term‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#medium-term-1","content":" Multi‚ÄêInstance Deployment:  Enable distinct communities (Telegram/Discord groups) to operate their own Autonomous Investor agents, all feeding into the central Trust Marketplace.Allow communities to set their own risk parameters, default scanning logic, and liquidity rules tailored to their subgroup.  Partial Treasury Management:  We‚Äôll explore the Autonomous Investor managing small‚Äêsized funds or DAO sub‚Äêtreasuries to showcase the agent's investing capabilities.  Enhanced Scoring Models:  Expand scoring to incorporate more advanced metrics around timeframe, volatility, user consistency, and overall risk management.Incorporate specialized training data, including historical price patterns and volatility indices, to refine predictive accuracy.  ","version":null,"tagName":"h3"},{"title":"Long Term‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#long-term-1","content":" Treasury Management &amp; Larger Funds:  As the Autonomous Investor demonstrates consistent returns, aim for a larger partial or even full management of the DAOs on-chain assets.Explore official collaborations with DAOs or larger crypto funds that could benefit from user-driven intelligence and verifiable performance metrics.  Research Customizable AI Modules:  Research! Investigate if we can provide an optional plugin registry after Eliza‚ÄØV2 (where the architecture cleanly separates ‚Äúcore vs. extension‚Äù), enabling third‚Äêparty devs to add specialized capabilities to the Autonomous Investor without compromising stability.    ","version":null,"tagName":"h3"},{"title":"Agent Marketplace‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#agent-marketplace","content":" ","version":null,"tagName":"h2"},{"title":"Overview‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#overview-2","content":" The Agent Marketplace is a next-generation token launchpad and a no-code platform for simple agents. It differentiates from existing platforms by integrating multi-agent functionality, collaborative tokenomics, and AI-enhanced features, enabling both technical and non-technical users to seamlessly create and manage tokens and ElizaOS agents.  We‚Äôre only sharing the short-term roadmap to maintain the flexibility needed to refine how agents x crypto merge into novel experiences. Launching the initial tokenomics-focused platform sets a strong foundation for continuous iteration, paving the way for long-term generative networks.  ","version":null,"tagName":"h3"},{"title":"Short Term‚Äã","type":1,"pageTitle":"elizaOS Mission","url":"/blog/mission#short-term-2","content":" MVP Launch:  Complete the final audits on our custom-built LPing solution to ensure security and reliability.Secure commitments from top-tier teams for our initial launch and ongoing collaborations.Lock in remaining brand partnerships and key ecosystem alliances.Release the tokenomics and product simultaneously at launch.   ","version":null,"tagName":"h3"},{"title":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","type":0,"sectionRef":"#","url":"/blog/openai-plugin-envs","content":"","keywords":"","version":null},{"title":"ü§î What is an OpenAI-Compatible Provider?‚Äã","type":1,"pageTitle":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","url":"/blog/openai-plugin-envs#-what-is-an-openai-compatible-provider","content":" An OpenAI-compatible provider is any service that implements the OpenAI API spec. Popular examples include:  OpenRouterOllama (with its OpenAI-compatible API, supports embedding also)Local LLMs with an OpenAI API wrapperOther cloud or self-hosted endpoints  Note: If your provider supports the OpenAI API, this plugin can probably talk to it!  ","version":null,"tagName":"h2"},{"title":"üõ†Ô∏è Key Environment Variables‚Äã","type":1,"pageTitle":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","url":"/blog/openai-plugin-envs#Ô∏è-key-environment-variables","content":" The following environment variables are supported by the OpenAI plugin:  Variable\tPurposeOPENAI_API_KEY\tThe API key for authentication (required) OPENAI_BASE_URL\tThe base URL for the API (override to use other providers) OPENAI_SMALL_MODEL\tDefault small model name OPENAI_LARGE_MODEL\tDefault large model name OPENAI_EMBEDDING_MODEL\tEmbedding model name OPENAI_EMBEDDING_URL\tBase URL specifically for the embedding API endpoint OPENAI_EMBEDDING_DIMENSIONS\tEmbedding vector dimensions SMALL_MODEL\t(Fallback) Small model name LARGE_MODEL\t(Fallback) Large model name  ","version":null,"tagName":"h2"},{"title":"Example: Connecting to OpenRouter‚Äã","type":1,"pageTitle":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","url":"/blog/openai-plugin-envs#example-connecting-to-openrouter","content":" OPENAI_API_KEY=your-openrouter-key OPENAI_BASE_URL=https://openrouter.ai/api/v1 OPENAI_SMALL_MODEL=openrouter/gpt-3.5-turbo OPENAI_LARGE_MODEL=openrouter/gpt-4   Warning: OpenRouter does not currently support the /v1/embeddings endpoint. If you need embeddings, you must use a different provider for them. See the section below on Handling Providers Without Embedding Support.  ","version":null,"tagName":"h2"},{"title":"Example: Connecting to Ollama‚Äã","type":1,"pageTitle":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","url":"/blog/openai-plugin-envs#example-connecting-to-ollama","content":" OPENAI_API_KEY=ollama-local-demo OPENAI_BASE_URL=http://localhost:11434/v1 OPENAI_SMALL_MODEL=llama2 OPENAI_LARGE_MODEL=llama2:70b   ","version":null,"tagName":"h2"},{"title":"Example: Connecting to a Local LLM (Llama.cpp)‚Äã","type":1,"pageTitle":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","url":"/blog/openai-plugin-envs#example-connecting-to-a-local-llm-llamacpp","content":" OPENAI_API_KEY=sk-local-demo OPENAI_BASE_URL=http://localhost:8000/v1 OPENAI_SMALL_MODEL=llama-2-7b-chat OPENAI_LARGE_MODEL=llama-2-13b-chat   ","version":null,"tagName":"h2"},{"title":"Example: Connecting to LM Studio‚Äã","type":1,"pageTitle":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","url":"/blog/openai-plugin-envs#example-connecting-to-lm-studio","content":" LM Studio is a popular desktop app for running large language models locally. It provides an OpenAI-compatible API server, so you can use it as a drop-in replacement for OpenAI or other providers.  To use LM Studio with the OpenAI plugin, start the LM Studio API server (default port 1234) and set your environment variables as follows:  OPENAI_API_KEY=lmstudio-local-demo # (can be any non-empty string) OPENAI_BASE_URL=http://localhost:1234/v1 OPENAI_SMALL_MODEL=your-model-name-here OPENAI_LARGE_MODEL=your-model-name-here OPENAI_EMBEDDING_MODEL=text-embedding-nomic-embed-text-v1.5   Make sure to use the model identifier as listed in LM Studio for the OPENAI_SMALL_MODEL and OPENAI_LARGE_MODEL values.LM Studio supports the /v1/models, /v1/chat/completions, /v1/embeddings, and /v1/completions endpoints.You can reuse any OpenAI-compatible SDK by pointing the base URL to http://localhost:1234/v1.  For more details, see the LM Studio OpenAI Compatibility API docs.  ","version":null,"tagName":"h2"},{"title":"Handling Providers Without Embedding Support‚Äã","type":1,"pageTitle":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","url":"/blog/openai-plugin-envs#handling-providers-without-embedding-support","content":" Some OpenAI-compatible providers (like OpenRouter) might not offer an embedding endpoint (/v1/embeddings). If you need embedding functionality (e.g., for memory or context retrieval), you can configure the OpenAI plugin to use a different provider specifically for embeddings using the OPENAI_EMBEDDING_URL environment variable.  Example: OpenRouter for Chat, Ollama for Embeddings  Let's say you want to use OpenRouter for its wide model selection for chat completion but prefer Ollama's embedding capabilities (see Ollama OpenAI docs).  # General API settings (points to OpenRouter) OPENAI_API_KEY=your-openrouter-key OPENAI_BASE_URL=https://openrouter.ai/api/v1 OPENAI_SMALL_MODEL=openrouter/gpt-3.5-turbo OPENAI_LARGE_MODEL=openrouter/gpt-4 # Embedding-specific settings (points to Ollama) OPENAI_EMBEDDING_URL=http://localhost:11434/v1 # Your Ollama embedding endpoint OPENAI_EMBEDDING_MODEL=all-minilm # Ollama embedding model (e.g., all-minilm) # OPENAI_EMBEDDING_DIMENSIONS=1536 # Optional: Specify if needed for your model  ","version":null,"tagName":"h2"},{"title":"Understanding Plugin Ordering in ElizaOS","type":0,"sectionRef":"#","url":"/blog/plugin-ordering-guide","content":"","keywords":"","version":null},{"title":"Why Plugin Order Matters‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#why-plugin-order-matters","content":" Here's the thing: different AI providers support different capabilities. Anthropic's Claude is excellent for conversation but doesn't provide embeddings. OpenRouter gives you access to dozens of models but no embedding endpoint. OpenAI handles both chat and embeddings beautifully.  ElizaOS needs to know which provider should handle which type of request, and plugin ordering is how we solve this puzzle.  ","version":null,"tagName":"h2"},{"title":"The Core Problem‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#the-core-problem","content":" When you call runtime.useModel(ModelType.TEXT_LARGE, params) in your agent, ElizaOS needs to decide which provider should handle that request. If you have both Anthropic and OpenAI configured, which one should it choose? What about embeddings‚Äîif you're using Anthropic for chat, where do embeddings come from?  ","version":null,"tagName":"h3"},{"title":"The ElizaOS Solution‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#the-elizaos-solution","content":" Plugin array order determines priority. First plugins get first pick for handling model requests. But here's the clever part: ElizaOS automatically orders plugins to ensure:  Your preferred text provider handles conversationsEmbedding-capable providers serve as fallbacks for embeddingsLocal providers kick in when cloud services fail  ","version":null,"tagName":"h3"},{"title":"How It Works Under the Hood‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#how-it-works-under-the-hood","content":" ","version":null,"tagName":"h2"},{"title":"The useModel() System‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#the-usemodel-system","content":" Every AI interaction in ElizaOS goes through the useModel() system:  // Plugin registers a model handler during initialization runtime.registerModel( ModelType.TEXT_LARGE, myModelHandler, 'my-plugin-name', priority: 10 // Higher = more preferred ); // Agent uses the model const response = await runtime.useModel(ModelType.TEXT_LARGE, { prompt: &quot;What's the weather like?&quot;, temperature: 0.7 });   ElizaOS sorts available handlers by priority, then by registration order. The highest-priority available handler wins.  ","version":null,"tagName":"h3"},{"title":"Automatic Plugin Ordering‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#automatic-plugin-ordering","content":" When you create a new project with elizaos create, your src/character.ts file automatically includes optimized plugin ordering:  export const character: Character = { name: 'MyAgent', plugins: [ // Core plugins first '@elizaos/plugin-sql', // Text-only plugins (no embedding support) ...(process.env.ANTHROPIC_API_KEY ? ['@elizaos/plugin-anthropic'] : []), ...(process.env.OPENROUTER_API_KEY ? ['@elizaos/plugin-openrouter'] : []), // Embedding-capable plugins last (fallback for embeddings) ...(process.env.OPENAI_API_KEY ? ['@elizaos/plugin-openai'] : []), ...(process.env.OLLAMA_API_ENDPOINT ? ['@elizaos/plugin-ollama'] : []), ...(process.env.GOOGLE_GENERATIVE_AI_API_KEY ? ['@elizaos/plugin-google-genai'] : []), // Platform and bootstrap plugins ...(process.env.DISCORD_API_TOKEN ? ['@elizaos/plugin-discord'] : []), ...(!process.env.IGNORE_BOOTSTRAP ? ['@elizaos/plugin-bootstrap'] : []), ], // ... rest of character config };   ","version":null,"tagName":"h3"},{"title":"Plugin Categories & Loading Order‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#plugin-categories--loading-order","content":" ","version":null,"tagName":"h2"},{"title":"1. Core Infrastructure‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#1-core-infrastructure","content":" @elizaos/plugin-sql - Always loads first, provides database functionality  ","version":null,"tagName":"h3"},{"title":"2. Text-Only AI Providers‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#2-text-only-ai-providers","content":" @elizaos/plugin-anthropic - Claude models (conversation only)@elizaos/plugin-openrouter - Multiple AI models via OpenRouter  ","version":null,"tagName":"h3"},{"title":"3. Platform Integrations‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#3-platform-integrations","content":" @elizaos/plugin-discord - Discord bot capabilities@elizaos/plugin-twitter - Twitter integration@elizaos/plugin-telegram - Telegram bot  ","version":null,"tagName":"h3"},{"title":"4. Bootstrap Plugin‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#4-bootstrap-plugin","content":" @elizaos/plugin-bootstrap - Default actions, providers, and evaluators  ","version":null,"tagName":"h3"},{"title":"5. Embedding-Capable AI Providers (Always Last)‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#5-embedding-capable-ai-providers-always-last","content":" @elizaos/plugin-openai - GPT models + embeddings@elizaos/plugin-google-genai - Gemini models + embeddings@elizaos/plugin-ollama - Local models + embeddings (universal fallback, always included)  ","version":null,"tagName":"h3"},{"title":"Real-World Examples‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#real-world-examples","content":" ","version":null,"tagName":"h2"},{"title":"Scenario 1: Cost-Optimized Setup‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#scenario-1-cost-optimized-setup","content":" Goal: Use Claude for chat (better quality), OpenAI for embeddings (only option)  Environment:  ANTHROPIC_API_KEY=your_claude_key OPENAI_API_KEY=your_openai_key   Result: Anthropic handles text generation, OpenAI handles embeddings. Ollama included as fallback.  ","version":null,"tagName":"h3"},{"title":"Scenario 2: Privacy-First Local Setup‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#scenario-2-privacy-first-local-setup","content":" Goal: Everything runs locally, no cloud API calls  Environment:  OLLAMA_API_ENDPOINT=http://localhost:11434 # No other API keys   Result: Ollama handles both text generation and embeddings locally.  ","version":null,"tagName":"h3"},{"title":"Scenario 3: High-Availability Production‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#scenario-3-high-availability-production","content":" Goal: Multiple fallbacks for reliability  Environment:  OPENAI_API_KEY=primary_key ANTHROPIC_API_KEY=backup_key OLLAMA_API_ENDPOINT=http://localhost:11434   Result: OpenAI primary for everything, Anthropic backup for text, Ollama local fallback.  ","version":null,"tagName":"h3"},{"title":"The Ollama Universal Fallback‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#the-ollama-universal-fallback","content":" Here's a key feature: Ollama is always included as a universal fallback for local AI capabilities. This ensures your agent always has access to embeddings (needed for memory and context) even with a text-only provider like Anthropic, and provides a local option when cloud services are unavailable.  The new approach is simple:  // Ollama is always included as universal fallback '@elizaos/plugin-ollama',   This guarantees that embeddings are always available, whether you're using cloud providers or running entirely offline.  ","version":null,"tagName":"h2"},{"title":"Environment Variables That Matter‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#environment-variables-that-matter","content":" ","version":null,"tagName":"h2"},{"title":"AI Provider Keys‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#ai-provider-keys","content":" ANTHROPIC_API_KEY - Enables Claude (text-only)OPENROUTER_API_KEY - Enables OpenRouter (text-only)OPENAI_API_KEY - Enables OpenAI (text + embeddings)OLLAMA_API_ENDPOINT - Enables Ollama (text + embeddings)GOOGLE_GENERATIVE_AI_API_KEY - Enables Google GenAI (text + embeddings)  ","version":null,"tagName":"h3"},{"title":"Platform Integration‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#platform-integration","content":" DISCORD_API_TOKEN - Discord botTELEGRAM_BOT_TOKEN - Telegram botTWITTER_API_KEY + TWITTER_API_SECRET_KEY + TWITTER_ACCESS_TOKEN + TWITTER_ACCESS_TOKEN_SECRET - Twitter (requires all 4)  ","version":null,"tagName":"h3"},{"title":"Control Flags‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#control-flags","content":" IGNORE_BOOTSTRAP=true - Disables bootstrap plugin  ","version":null,"tagName":"h3"},{"title":"Testing Your Configuration‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#testing-your-configuration","content":" Want to see how your plugins are ordered? Create a test project:  # Create new project elizaos create test-agent cd test-agent # Set your environment variables cp .env.example .env # Edit .env with your API keys # Check plugin order (it's logged during startup) elizaos start --log-level debug   You can also run the plugin ordering tests:  cd packages/project-starter bun test src/__tests__/character-plugin-ordering.test.ts   ","version":null,"tagName":"h2"},{"title":"Troubleshooting Common Issues‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#troubleshooting-common-issues","content":" ","version":null,"tagName":"h2"},{"title":"\"Wrong provider handling my requests\"‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#wrong-provider-handling-my-requests","content":" Check: Plugin order in your character file. Text-only providers should load before embedding providers.  ","version":null,"tagName":"h3"},{"title":"\"Embedding operations failing\"‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#embedding-operations-failing","content":" Verify: At least one embedding-capable provider (OpenAI, Google GenAI, or Ollama) is configured and loading. Ollama is always included as fallback.  ","version":null,"tagName":"h3"},{"title":"\"Ollama loading when not configured\"‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#ollama-loading-when-not-configured","content":" Solution: Check that your embedding-capable provider environment variables are set correctly.  ","version":null,"tagName":"h3"},{"title":"\"Plugin not loading\"‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#plugin-not-loading","content":" Debug: Verify environment variable names match expected patterns exactly.  ","version":null,"tagName":"h3"},{"title":"Customizing Plugin Order‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#customizing-plugin-order","content":" While the default ordering works great for most cases, you can customize it for specific needs:  export const character: Character = { name: 'CustomAgent', plugins: [ '@elizaos/plugin-sql', // Add your custom plugin early for high priority '@my-org/my-custom-plugin', // Standard ordering for AI providers ...(process.env.ANTHROPIC_API_KEY ? ['@elizaos/plugin-anthropic'] : []), ...(process.env.OPENAI_API_KEY ? ['@elizaos/plugin-openai'] : []), // Rest of plugins... ], // ... rest of config };   You can also set custom priorities in your plugin:  const myPlugin: Plugin = { name: 'my-custom-plugin', models: { [ModelType.TEXT_LARGE]: myCustomHandler, }, priority: 15, // Higher than default plugins };   ","version":null,"tagName":"h2"},{"title":"The Bigger Picture‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#the-bigger-picture","content":" Plugin ordering in ElizaOS reflects a key architectural principle: intelligent defaults with full customization. The system works automatically based on your environment variables, but gives you complete control when you need it.  This approach scales from simple single-provider setups to complex multi-provider, multi-platform deployments. Whether you're building a personal assistant or a production-grade autonomous agent, the plugin ordering system ensures reliable, predictable behavior.  ","version":null,"tagName":"h2"},{"title":"Getting Started‚Äã","type":1,"pageTitle":"Understanding Plugin Ordering in ElizaOS","url":"/blog/plugin-ordering-guide#getting-started","content":" Ready to build your own agent with optimal plugin ordering?  # Create a new project (includes optimized plugin ordering) elizaos create my-agent # Navigate to your project cd my-agent # Configure your environment cp .env.example .env # Edit .env with your API keys # Start your agent elizaos start   The template handles the complexity for you, so you can focus on building your agent's unique capabilities. But now you understand what's happening under the hood‚Äîand can customize it when needed.  Plugin ordering might seem like a small detail, but it's this kind of thoughtful design that makes ElizaOS agents reliable and predictable in production. Happy building! ","version":null,"tagName":"h2"},{"title":"Reintroduction to elizaOS","type":0,"sectionRef":"#","url":"/blog/reintroduction","content":"","keywords":"elizaOS decentralized AI open-source framework crypto agents AI governance autonomous DAOs AI-native economies modular AI agent frameworks web3 AI","version":null},{"title":"Why elizaOS?‚Äã","type":1,"pageTitle":"Reintroduction to elizaOS","url":"/blog/reintroduction#why-elizaos","content":" Artificial intelligence has quickly evolved from a niche curiosity to a driving force in our daily lives, advancing toward more generalized capabilities at a remarkable pace. As AI becomes increasingly central to how we learn, work, and solve problems, the need for open collaboration and broad accessibility grows clearer.  Yet today, the trajectory of AI is largely dictated by a handful of monolithic, centralized corporations‚Äîentities that operate behind closed doors, hoard models, and set the terms for how AI is deployed and who benefits from it. This concentration of power is dangerous. It leads to AI systems that serve corporate or state interests over the public good, reinforcing inequalities, limiting innovation, and keeping critical advancements out of the hands of those who need them most.  By ensuring AI remains a shared resource‚Äîrooted in transparent research, open-source innovation, and community-driven participation‚Äîwe can break free from the control of centralized actors and guide AI's development toward outcomes that benefit everyone.  With elizaOS, we're building the infrastructure for this future‚Äîan open, decentralized, and scalable framework that empowers AI agents to operate, coordinate, and drive meaningful progress across industries and communities. AI should not be a tool of the few; it should be a force for collective intelligence, autonomy, and shared prosperity.  ","version":null,"tagName":"h2"},{"title":"What is elizaOS?‚Äã","type":1,"pageTitle":"Reintroduction to elizaOS","url":"/blog/reintroduction#what-is-elizaos","content":" At its core, elizaOS is the framework for agentic intelligence, built to power the next generation of AI-driven systems. It consists of 3 interconnected pillars:  ","version":null,"tagName":"h2"},{"title":"The Eliza Framework ‚Äì Open-Source AI Autonomy‚Äã","type":1,"pageTitle":"Reintroduction to elizaOS","url":"/blog/reintroduction#the-eliza-framework--open-source-ai-autonomy","content":" The heart of elizaOS is the framework, a TypeScript-powered, open-source toolkit for building persistent, adaptable, and interoperable AI agents. Named after the pioneering 1966 ELIZA program by Joseph Weizenbaum‚Äîwhich simulated human conversation through simple pattern matching‚Äîthe modern Eliza takes this concept to new heights: unlike static models, Eliza agents evolve over time‚Äîcarrying memories, context, and knowledge across different environments, enabling them to interact fluidly with each other and external applications.  Today the Eliza Framework has:  14.9K stars and 4.8K forks of our core repository, reflecting massive developer adoption500+ contributors advancing the open-source ecosystem100+ plugins expanding functionality  The framework's growth is fueled by a collective vision: to create a decentralized intelligence network where AI agents are not just tools but genuine collaborators, executing complex tasks with efficiency, autonomy, and trust across domains.  ","version":null,"tagName":"h3"},{"title":"AI-Enhanced Governance‚Äã","type":1,"pageTitle":"Reintroduction to elizaOS","url":"/blog/reintroduction#ai-enhanced-governance","content":" We are pioneering a new era of truly autonomous DAOs. As AI agents achieve trustless coordination, AI-enhanced DAOs will seamlessly integrate them, unlocking new levels of decentralized autonomy.  To enable this, we are building AI-native governance primitives that progressively expand DAO capabilities. Over time, autonomous agents will be entrusted to manage funds, coordinate resources, onboard contributors, and orchestrate both human and machine capital. AI will act as a copilot for treasury management, contributor recruitment, and operational execution, while token holders provide strategic oversight.  This fusion of human intent and agent-driven action redefines decentralized governance, laying the foundation for self-evolving networks. Our open-source community is the first AIDAO‚Äîan autonomous ecosystem where builders, thinkers, and agents collaborate as co-creators of a future assembling itself in real time.  ","version":null,"tagName":"h3"},{"title":"Eliza Labs ‚Äì R&D for the AI-Native Future‚Äã","type":1,"pageTitle":"Reintroduction to elizaOS","url":"/blog/reintroduction#eliza-labs--rd-for-the-ai-native-future","content":" Eliza Labs is the research and development engine, dedicated to advancing the capabilities of elizaOS through cutting-edge AI techniques, proofs of concept, and real-world applications. It pioneers new agent-based projects while supporting open-source contributors via grants, accelerator programs, and ecosystem funding.  Some of the major initiatives currently in development include:  Eliza v2: A next-gen upgrade introducing modularity, a radically improved AI model integration system, and a multi-agent architecture capable of seamless autonomous collaboration at scale. This will be the most powerful iteration of open-source agent frameworks to date. The Global Trust Marketplace: A social-trading intelligence layer that combines AI-driven reputation scoring, trade validation, and decentralized execution. Integrated across multiple social platforms, it collects user-submitted trade calls and assesses credibility via a Trust Marketplace. Over time, it will evolve into a multi-instance system allowing groups to set their own risk parameters, manage DAO treasuries, and leverage customizable AI modules for enhanced investment strategies. AI-powered Token Launchpad: A creator-friendly launchpad and no-code platform integrating multi-agent functionality, collaborative tokenomics, and AI-enhanced features. The launchpad enables both technical and non-technical users to seamlessly create and manage tokens and elizaOS agents. In addition, we are working with partners to deliver the best hosted agent experience with no limitations. DegenSpartanAI: DegenSpartanAI is a crypto-native AI trading agent that blends sentiment analysis, trading strategy automation, and community engagement with a distinct, irreverent personality. Initially refining core trading strategies and its comedic brand, it will evolve into an interactive AI agent with real-time market insights, user-driven discussions, and NFT collaborations. Long-term, it aims to become a fully autonomous trading agent, integrating multi-platform execution, adaptive learning, and a verifiable track record within the Global Trust Marketplace. Eliza Studios: A creative studio where AI meets art, storytelling, and digital experiences in a way never seen before. We're building autonomous characters, generative media experiments, and immersive AI-powered narratives that will redefine entertainment itself.  Beyond these initiatives, Eliza Labs continues to refine multi-agent architectures, develop better coordination mechanisms, and explore integrations with an end goal to embed AI agents into the very fabric of digital economies, transforming how we govern, transact, research, and create.    ","version":null,"tagName":"h3"},{"title":"The Coordination Layer of AI-Native Economies‚Äã","type":1,"pageTitle":"Reintroduction to elizaOS","url":"/blog/reintroduction#the-coordination-layer-of-ai-native-economies","content":" To coordinate these three pillars, elizaOS uses the native token on Solana (HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC) to engineer a generative economic network. As elizaOS scales across platforms and industries, the token functions as both an index of the network and a conduit for collective growth.  Today, the token serves as the coordination layer for research, development, and open-source innovation. As AI-native applications, marketplaces, and autonomous systems emerge around elizaOS, the token is evolving into the primary mechanism for capturing and redistributing the economic value they generate. While details will be unveiled in phases, some key areas of research and development include:  Staking for ecosystem access ‚Äì Implementing mechanisms that allow users to stake tokens to access new partner tokens and enhance distribution for projects building on our framework.Partner LP staking pools ‚Äì Creating liquidity pools where users can pair the native token alongside partner assets, driving liquidity and demand.Core product integration ‚Äì Leveraging platforms like the Trust Marketplace, autofun, and Eliza Studios to amplify network effects, expand our native token treasury, and reinforce staking incentives.Autonomous trading agents ‚Äì Deploying AI-driven trading agents to strategically acquire our native tokens and manage liquidity positions.Expanded partner incentives ‚Äì Enhancing benefits for participants in the Partners program, increasing alignment and long-term engagement.DAO-funded development ‚Äì Rewarding contributions and donations to the DAO, ensuring sustainable funding for the core framework's development.  The token underpins the economic infrastructure that links AI autonomy to the wealth of opportunities it unlocks. Many of our projects‚Äîincluding the Trust Marketplace, token launchpad, and Eliza Studios‚Äîdirectly contribute to the token's utility by driving network effects, transaction flows, and AI-native services.  In short, we intend to make the native token the base layer for the many applications and services built on top of our framework through mechanism design, ecosystem tooling, partnerships, and collaborations.  ","version":null,"tagName":"h2"},{"title":"Our Vision of the Future‚Äã","type":1,"pageTitle":"Reintroduction to elizaOS","url":"/blog/reintroduction#our-vision-of-the-future","content":" The internet began as a static archive‚Äîa vast repository of human knowledge, waiting to be accessed. Then it became dynamic, social, algorithmic. Now, it is transforming again: into something intelligent.  This transformation isn't led by a single company‚Äîit's emerging from an interconnected ecosystem of open protocols, decentralized incentives, and AI-native economies. This is why elizaOS is open-source, modular, and decentralized‚Äîso no single entity controls it, and anyone can build upon it.  The agents we build today will form the foundation of a self-organizing intelligence that transcends industries, borders, and human limitations.  A world where networks think, collaborate, and evolve alongside us.  A world where intelligence itself is the fabric of the internet.  This is the world we are building.  This is the world of elizaOS.  ","version":null,"tagName":"h2"},{"title":"Join the Movement‚Äã","type":1,"pageTitle":"Reintroduction to elizaOS","url":"/blog/reintroduction#join-the-movement","content":" elizaOS is no longer just an experiment‚Äîit's a movement. If you're a builder, researcher, or visionary, now is the time to shape the future with us.  Contribute to the open-source Eliza Framework. Become a partner in the DAO. Build agentic applications across the web.  elizaOS isn't just ours to create ‚Äî  elizaOS is YOURS.   ","version":null,"tagName":"h2"},{"title":"Tools for Taming Information","type":0,"sectionRef":"#","url":"/blog/taming-info","content":"","keywords":"","version":null},{"title":"Challenges‚Äã","type":1,"pageTitle":"Tools for Taming Information","url":"/blog/taming-info#challenges","content":" The Great Online Game is played across many different apps and chat rooms. One of the biggest challenges facing players is locating critical information like who does what or updates scattered when it's across Discord channels, GitHub repositories, forums, threads, etc. No human, regardless of how dedicated, can keep track of everything.  https://xkcd.com/1810/  Even when information is theoretically &quot;public,&quot; people are generally too lazy to fetch it. That and stakeholders may prefer different information formats:  Developers dig into GitHubCommunity vibes on DiscordCasual followers scroll TwitterVisual learners watch videos  Instead of forcing everyone onto one highway early on, a better strategy would be to build bridges between lanes to allow information to flow more freely. AI agents are the vehicles for that information, they carry the ability to meet people where they are to deliver important insights while preserving context.  ","version":null,"tagName":"h2"},{"title":"Goals‚Äã","type":1,"pageTitle":"Tools for Taming Information","url":"/blog/taming-info#goals","content":" Reduce overhead on managing comms / community questionsKeep people informed across different platformsAccelerate onboarding for new contributors    ","version":null,"tagName":"h3"},{"title":"Case Study: AI News System‚Äã","type":1,"pageTitle":"Tools for Taming Information","url":"/blog/taming-info#case-study-ai-news-system","content":" This discord summarizer was the first prototype. For ElizaOS we're now using this AI News tool to aggregate sources from across the ecosystem. The system works in four key stages:  Collection: APIs pull data from multiple sources including Twitter, Discord, GitHub, and market data platforms.Wrangling: LLMs normalize, summarize, and tag topics to create a unified knowledge base from disparate sources.Distribution: The system produces standardized outputs in multiple formats (JSON, Markdown, RSS) to suit different consumption needs.Consumption: Users can access tailored products like dashboards, newsletters, or even 3D news shows.    You can see the results from this tool here, which updates daily via GitHub actions:  https://m3-org.github.io/ai-news/https://eliza.how/news    Here's an example news clip: https://x.com/elizaOS/status/1880280863210106975    ","version":null,"tagName":"h3"},{"title":"Case Study: AI Assistants‚Äã","type":1,"pageTitle":"Tools for Taming Information","url":"/blog/taming-info#case-study-ai-assistants","content":" Idk about you, but I hate seeing questions left hanging in tech support channels, especially when the answer can easily be found in the docs. It's a perfect opportunity to eat our own dogfood, experience and fix pain points firsthand, and showcase a powerful use case of AI agents to other devs.    While we're analyzing tech support channels, we can identify gaps in docs based on common community questions which can then be addressed systematically. This may involve checking if any github issues or pull requests already address a question, and if not, then to help create an issue for it. Herein lies a powerful feedback loop:  Aggregate &amp; Analyze: Extract questions and answers, who is helping who (and if successful), identify pain points, gather sentimentClean &amp; Enhance Data, Update docs, create bug reportsRAG Knowledge: AI Agents giving automated responses to FAQ  You can now use AI news to generate a summary, who helped who, FAQ, and action items analysis of a source for whatever time period you want - even historically!    We retroactively reward people who provided good answers to questions (we're using tip.cc) over a time period. Later people can reuse their tips when helping or asking for help from other people.    Main Lesson: Treat the docs as first-class citizen of your project.  Eliza AI agent assistants helping devs with common questions about elizaOS greatly benefit from good docs to provide more current and accurate information, which speeds up onboarding and lets developers stay focused on higher impact activities.  Read this guide on how to optimize technical docs for LLMs. Adding FAQ with answers in the docs enhances optimizes them for LLM use cases.    ","version":null,"tagName":"h2"},{"title":"Get Involved‚Äã","type":1,"pageTitle":"Tools for Taming Information","url":"/blog/taming-info#get-involved","content":" In the future I want people to be able to install Eliza and be greeted by an agent that can help you setup, configure settings, create plugins, deploy, etc. For now I think our assistants need to be supervised until we're confident enough in their responses. I think we can speed things up by having the agent admit what they don't know the answer vs hallucinating, and to guide devs to the main community support channels when they're having difficulty.  If you want to collaborate with us, here's a few ideas:  Answer people's questions in the coders / tech support channels on discord, it will get noticed :)Help with docs: go through pages, verify information with code, test the steps, create issues and PRs with fixesCollaborate with us on the AI news aggregator Generate new show ideas using the output files from AI-newsWrite a script that takes a week of daily logs and turns it into a newsletter or news show program Ingest docs into your Eliza agent as knowledge to onboard them then tinker with the character file to takee on a role in the DAO Perhaps it can act as a scribe that summarizes chatsLore keeper, community moderation, or social media marketer  ","version":null,"tagName":"h2"},{"title":"Links‚Äã","type":1,"pageTitle":"Tools for Taming Information","url":"/blog/taming-info#links","content":" https://github.com/bozp-pzob/ai-news (aggregator tool) https://m3-org.github.io/ai-news/ (data for elizaOS ecosystem) https://github.com/elizaOS/knowledge (for eliza RAG knowledge)https://www.kapa.ai/blog/optimizing-technical-documentation-for-llmshttps://x.com/dankvr/status/1884417610420474199 (update 1/28/25)https://x.com/dankvr/status/1880050455226827246 (update 1/16/25) ","version":null,"tagName":"h3"},{"title":"ElizaOS V2 - What's New","type":0,"sectionRef":"#","url":"/blog/v1-v2","content":"","keywords":"","version":null},{"title":"V2 Impact‚Äã","type":1,"pageTitle":"ElizaOS V2 - What's New","url":"/blog/v1-v2#v2-impact","content":" Cross-Platform Presence: Your agent can jump from Twitter, continue via SMS, and place orders with businesses‚Äîall while maintaining conversation context.Unified Blockchain Management: One wallet to rule all chains‚Äîno more chain-switching headaches.Autonomous Workflows: Agents that handle multi-step processes independently‚Äîresearching data, analyzing results, generating reports, and scheduling follow-ups without constant oversight.Evolving Intelligence: Database-driven characters that can start minimal and grow through interactions with your crowd.Enhanced Security: Native TEE integration provides verifiable security guarantees for sensitive operations while maintaining privacy.    ","version":null,"tagName":"h3"},{"title":"Core Architecture Redesign‚Äã","type":1,"pageTitle":"ElizaOS V2 - What's New","url":"/blog/v1-v2#core-architecture-redesign","content":" V1 Limitation\tV2 SolutionBloated Core: Codebase overloaded with packages from rapid growth\tPackage Registry: Submit plugins independently; lean codebase, no approval delays Fragmented Messaging: Platform-specific I/O pipelines\tUnified Messaging: Agents process inputs and output anywhere, seamlessly Wallet Overlap: Multi-chain wallet conflicts\tUnified Inventory: One wallet with chain-agnostic actions Rigid State: Hardcoded goals and features\tModular State: Extensible, optional components for tailored agents Basic Action Chaining: No multi-step foresight\tStrategic Planning: Agents map out complex, sequenced workflows Package Manager Speed: Lengthy installations and cold starts\tBun Integration: Faster installs, reduced build times    ","version":null,"tagName":"h2"},{"title":"Technical Implementation Changes‚Äã","type":1,"pageTitle":"ElizaOS V2 - What's New","url":"/blog/v1-v2#technical-implementation-changes","content":"   ","version":null,"tagName":"h2"},{"title":"From Clients to Services‚Äã","type":1,"pageTitle":"ElizaOS V2 - What's New","url":"/blog/v1-v2#from-clients-to-services","content":" V2 swaps Clients for Services, standardizing platform integration while centralizing message routing‚Äîagents now think once, act anywhere (Discord, Twitter, SMS, even phone calls).  ","version":null,"tagName":"h3"},{"title":"Smarter Character Evolution‚Äã","type":1,"pageTitle":"ElizaOS V2 - What's New","url":"/blog/v1-v2#smarter-character-evolution","content":" V2 swaps static files for dynamic personas‚Äîagents learn from your crowd in real-time while still being able to be imported / exported as JSON files (see docs).  ","version":null,"tagName":"h3"},{"title":"Enhanced Development Experience‚Äã","type":1,"pageTitle":"ElizaOS V2 - What's New","url":"/blog/v1-v2#enhanced-development-experience","content":" New CLI and plugin manager slashes setup time. Instead of cloning the github repo, changing to the correct branch, rebuilding, etc, it's just one command to create a new project:  npm create eliza   See CLI commands Usage: elizaos [options] [command] Options: -V, --version output the version number -h, --help display help for command Commands: create [options] [name] Initialize a new project or plugin project Manage an ElizaOS project plugin Manage ElizaOS plugins, including publishing agent manage ElizaOS agents tee Manage TEE deployments start [options] Start the Eliza agent with configurable plugins and services update [options] Update ElizaOS packages to the latest versions test [options] Run tests for Eliza agent plugins env Manage environment variables and secrets dev [options] Start the project or plugin in development mode and rebuild on file changes publish [options] Publish a plugin or project to the registry help [command] display help for command   Explore the plugin repository https://github.com/elizaos-plugins/ or from the docs showcase.  ","version":null,"tagName":"h3"},{"title":"Memory and Task Management‚Äã","type":1,"pageTitle":"ElizaOS V2 - What's New","url":"/blog/v1-v2#memory-and-task-management","content":" Vector embeddings power richer memory; tasks now handle schedules and multi-step logic.  await runtime.createTask({ ... });     ","version":null,"tagName":"h3"},{"title":"Timeline‚Äã","type":1,"pageTitle":"ElizaOS V2 - What's New","url":"/blog/v1-v2#timeline","content":" March 2025: Research version now live.April 2025: Public rollout.  ","version":null,"tagName":"h2"},{"title":"Should You Upgrade?‚Äã","type":1,"pageTitle":"ElizaOS V2 - What's New","url":"/blog/v1-v2#should-you-upgrade","content":" V2 is mostly backward compatible for gradual migration. Existing projects can phase in V2 features; new ones should start with V2 for full benefits. V1 still works, but V2's modularity and planning unlock next-level autonomy. See quickstart to get started.   ","version":null,"tagName":"h3"},{"title":"What Did You Get Done This Week? Recap","type":0,"sectionRef":"#","url":"/blog/wdygdtw-recap","content":"","keywords":"","version":null},{"title":"Timeline‚Äã","type":1,"pageTitle":"What Did You Get Done This Week? Recap","url":"/blog/wdygdtw-recap#timeline","content":" We transcribed, summarized, and uplaoded notes for every Space shortly after each one. However, until now the recordings and notes haven't all been easily accessible all in one place. Showing up is half the battle. These are the pioneers of a grassroots crypto / AI movement.  - Nov 15, 2024 - 1: Social Agents / Advancing towards AGI - Logan, Kyle (Raid Guild), Glue, Ropey, Loaf, Odilitime, SomewheresHe, Robin, IQ6900, Marvin, Dot, JW, Neo, Bloom, Reality Spiral, Jen, OFI, Butoshi, Doc (Geon Reborn), HCP, Garrett, Lady Liberty, BoyaLockser, Amy, Griffin, Frank (Heurist), Shaw, Tim - Trust Marketplace, EVM wallet integration, Ducky AI client, Telegram fixes, Starknet wallet plugin, Sentience media generation, God's Fun, TEEs, Streamer platform, Decentralized AI cloud, Twitter client PR, Documentation, Satoshi AI memory system, Echo Chambers, Agent designs, Deep Writer, Music agent project, Psychic AI, Heurist API integration - https://www.youtube.com/watch?v=9EmvhlBPB8Q - Nov 22, 2024 - 2: 3500 people tuning in to AI agent devs - Reality Spiral, Boyaloxer, Spaceodili, Yodamaster726, Wiki, Hashwarlock, KyleSt4rgarden, Nasdao_, Evepredict, ByornOeste, Empyrealdev, SkotiVi, YoungBalla1000x, SOL_CryptoGamer, Angelocass, DAOJonesPumpAI, RodrigoSotoAlt, CottenIO, HDPbilly, IQ6900, frankdegods, jamesyoung, 0xglu, chrislatorres, shannonNullCode, robotsreview, bcsmithx, JustJamieJoyce, yikesawjeez, HowieDuhzit, xrpublisher, BV_Bloom1, nftRanch, 019ec6e2, jacobmtucker, CurtisLaird5, unl__cky, Rowdymode, mitchcastanet, GoatOfGamblers, JohnNaulty, mayanicks0x, wakesync, TrenchBuddy, rakshitaphilip, MbBrainz, Hawkeye_Picks, Shaw, dankvr - GitHub integration, emotional plugin for agents, Reddit-based AI agent, Token Gods project, Coinbase plugin, AI agent streaming platform, DuckAI client, Hustle and Flow State, image generation prompts, Oasis agent simulation, Sentientopia, Eliza as &quot;real girl&quot;, D-Gen Spartan revival, LaunchRate AI16DAO, Satoshi AI characters, MUSE DAO CEO, music-creating agent, livestreaming in 3D, log rotation tool, Earth Poker AI game, healthcare app, FXN swarm, Trust Marketplace, Eliza style guidelines, NFT project AI CEO, finance and entertainment projects, Twitter client with Vision AI - https://www.youtube.com/watch?v=Lbvv0Dr91Bc - Nov 29, 2024 - 3: Community Building - Jin, Stargarden, Boya, Reality Spiral, W3Tester, HashWarlock, Soto, Mitch, Nick Parallel, Beige, Robin, Eve, Oguz, Swarm, RektDin, Roperito, Lothbrok, Clark Riswold, Tim, Spaceodili, Hawkeye, EA, FilteredThought, Yikes, Alain, Glue, Maximilian, Danny, Shaw, YoungJazzeth, Sergio - Self-sustaining AI DAOs, IRC connector, Dark Sun project, Binary solar system, 3D environments, BlockRat AI, Apollo health agent, data grading, Eliza interface, AI hosting platform, Rogue Agent podcast, &quot;Life Engine&quot;, AI for logistics, Positivity AI, Eliza's World, Scriptoshi on Bitcoin, Marble auctions, Twitter integration, Web3 research, multi-agent system for code, quantum randomness, agent show marketing - https://www.youtube.com/watch?v=nUAEQ7uKi04 - Dec 6, 2024 - 4: Communications, Updates and Accountability - Shaw, Ropirito, Liam Zebedee, LordOfAFew, Robin, Reality Spiral, Ico, Glue, Shannon NullCode, JW, Guha, Frago, Yeshua God, AvaDoesAI, Spaceodili, Bloom, Joven, Satoshi_AI_Live, Simeon Fluck, NavarroCol, BeigeGrape, Andrew Miller, Johnny, Collins, Baron, Anthony, Wit, Ophi, Colin, Ranch, Oguz, Issy, Nick, Dr. K, BallerHash, Tim - Twitter &amp; TikTok capabilities, Average French AI agent, Eliza framework improvements, Token Gods launch, Coinbase plugin, AI agent streaming platform, DuckAI client, knowledge graph system, LLM image prompts, Oasis simulation project, agent network connector, Sentientopia digital nation, Eliza as &quot;real girl&quot; concept, D-Gen Spartan revival, tokenomics, LaunchRate AI16DAO, small town AI characters, MUSE AI CEO, music-creating agent, market data livestreaming, log rotation security tool, Earth Poker AI game, crypto assistant, healthcare app, FXN swarm, Trust Marketplace, style guidelines, Tweek Labs AI CEO, finance projects, Baba Cat project, animation, KWAI network controller - https://www.youtube.com/watch?v=r3Z4lvu_ic4 - Dec 13, 2024 - 5: Building the Future - shawmakesmagic, xsubtropic, CottenIO, HDPbilly, IQ6900, frankdegods, jamesyoung, 0xglu, chrislatorres, reality_spiral, robotsreview, shannonNullCode, bcsmithx, boyaloxer, JustJamieJoyce, yikesawjeez, RodrigoSotoAlt, HowieDuhzit, xrpublisher, BV_Bloom1, nftRanch, 019ec6e2, jacobmtucker, CurtisLaird5, unl__cky, Rowdymode, mitchcastanet, GoatOfGamblers, JohnNaulty, mayanicks0x, wakesync, TrenchBuddy, rakshitaphilip, MbBrainz, Hawkeye_Picks, dankvr - Redux project, DaVinci AI, AI Summit recap, &quot;Sploot&quot; agent, on-chain ASCII art, character sheet tweaks, AI agent starter kit, agent swarms, Eliza.gg documentation, GitHub integration, Story Protocol plugin, Emblem Vault, Agent Tank, Plugin Feel for emotions, research AI agents, Discord bot, Metaplex NFTs, character generator, XR Publisher 3D network, 3D agent interactions, trading bot, Mimetic platform, agent transaction protocol, C-Studio interface, Escapism art generation, interactive streaming, binary star research, prediction market, SWE contributions, Axie AI KOL agent, Eliza Wakes Up, AWS templates, Brunette token, menu recommendations, storytelling bot - https://www.youtube.com/watch?v=4u8rbjmvWC0 - Dec 20, 2024 - 6: Hackathons, Frameworks, and the Race to Ship - dankvr, shawmakesmagic, IQ6900, spaceodili, bcsmithx, 0xBuildInPublic, jamesyoung, yikesawjeez, evepredict, yashhsm, TheLDAIntern, _0xaryan, CogAccSOL, reality_spiral, HDPbilly, CheddarQueso3D, ineedtendies, marvin_tong, BV_Bloom1, RealJonahBlake, DustinStockton, dylanpaulwhite, chrislatorres, 0xnavkumar, Hawkeye_Picks, lostgirldev, HowieDuhzit, boyaloxer, nizhanxi, ropirito, gigawidearray, GoatOfGamblers, shakkernerd, triadfi, MoondogFeed, wakesync, Moonbear, PoodonkAI, ViralMindAI, FilteredThought, _AnonDev, get_palet, MurrLincoln, socrates1024, IGLIVISION, dooly_dev, codergf_xyz, Ru7Longcrypto, sunosuporno, Signalman23, swarmnode, svabhishek, elohprojects, deltavius - Solana blockchain data service, GitHub PR merging, Agent Tank viral video, security auditing, AI agent hackathon, Matrix bridge, trading bot draft, Solana Agent Kit, market insights agent, website launch, GitHub client, tone control in agents, WSL setup guide, WordPress client, self-sustaining AI ecosystem, payment processing, 3D rigging, health agents, Sober Rover companion, Eliza.gg Q&amp;A platform, Bitcoin runes project, Santa Pimp Claus token, SolEng agent, character generator updates, boredom tracking, Asia trip organizing, AWS hosting, Reddit plugin, prediction market for memecoins, Redis caching, AI personality agents, social media to meme coins, persistent memory, vvaifu agent, AI hive mind, decentralized training platform, auto-trading agent, &quot;Mizuki&quot; AI model, open context protocol, AgentKit updates, TEE login system, game framework study, AGI matching platform, one-click chatbot deployment - https://www.youtube.com/watch?v=R3auUQj9oEg - Dec 27, 2024 - 7: Agentic Documentation and GitHub Integration - ai16zdao, shawmakesmagic, spaceodili, 0xBuildingPublic, Im_zo_eth, IQ6900_, FilteredThought, yeahimomar, affaanmustafa, KyleSt4rgarden, SYMBiEX, codergf_xyz, GoatOfGamblers, SuperfruitsAi, hashwarlock, allenharper, witconomist, triadfi, human_for_now, reality_spiral, lordOfAFew, chrislatorres, evepredict, lostgirldev, r4dicalcentrism, 0xblacksun, tmoindustries, wakesync, sunosuporno, unl__cky, hotpot_intern, TrenchBuddy, Signalman23, thelotioncoin, anshikag85, Doc_strange1, dankvr - Hyperfy multi-agent integration, agentic JS documentation, on-chain agent &quot;Q&quot;, data storage cost reduction, trading system with TrustDB, Minecraft AI villagers, streaming coding sessions, Solana AI hackathon, character creation tool, Web app staging, prediction market, web3 security agents, Spore agent swarm, &quot;Shaw&quot; character file, Trust marketplace white paper, prediction market analyst, search engine for dev videos, GitHub adapter, recursive self-improvement, generative agents for on-chain games, V2 development meetings, travel influencer agent, PR review agents, SoulScript for agent personalities, digital archaeologist agent, climate/nature focused ERC6551 agents, Eliza Wakes Up web app, DeFi agent, autonomous audio/song generation, TikTok memecoin hunter, wallet tracking visualization, voice AI for Twitter Spaces, integrating AI into existing projects, AI/AWS newsletter, TikTok integration - https://www.youtube.com/watch?v=jcSF7dSicTI - Jan 3, 2025 - 8: From DeFi to Social Media - ai16zdao, shawmakesmagic, astridhpilla, lostgirldev, spaceodili, 0xBuildInPublic, youfadedwealth, nftRanch, SYMBiEX, SuperfruitsAi, TimshelXYZ, chrislatorres, AIFlow_ML, jamesyoung, deadlock_1991, yeahimomar, human_for_now, lordasado, RodrigoSotoAlt, HDPbilly, GoatOfGamblers, Titan_Node, KyleSt4rgarden, unl__cky, CheddarQueso3D, sunosuporno, tmoindustries, Sawyer_APRO, wakesync, Ru7Longcrypto, marko_post, NEETOCRACY, HefAiGent, reality_spiral, witconomist, triadfi, Rowdymode, MaushishYadav, chaininsured, godfreymeyer, thelotioncoin, codergf_xyz, IGLIVISION, EledraNguyen, GnonOnSolana, Satoshi_BTCFi, swarmnode, memeillionaire, krauscrypto, usebuildfun, affaanmustafa, O_on_X, AITATsol, xiao_zcloak, Protocol_Blend, yq_acc, akshayynft, BenjiStackzzz, 0xBuns, aiquantfun - Miku chatbot relaunch, Selene growth &amp; PR review, Eliza framework fixes, voice features, plugin isolation, Audits agent documentation, PP coin automated trading, framework integration, DeepSeek model provider, Dragon Fruit AI launch, Meetup Fund platform, Eliza partnerships, knowledge graph for repos, verifiable inference system, Alice AI fund management, Pixocracy AI village management, form fill infrastructure, Smol World agent reasoning, Bosu memory management, Twitter client reflection loop, Goat Arena prediction market, LivePeer inference endpoints, Solana token staking, media generation improvements, agent documentation, DeFi assistant waitlist, region swarm voice integration, BNB chain integration, Netflix &amp; chill extension, dating coach AI agent, Mars' first digital citizen, Army of Indians DAO, ERC 314 technology integration, GitHub client for scrum planning, Marketplace of Trust white paper, AI personality expansion, Twin Tone testing, yield optimizing agent, insurance broker agent, 3D news show avatars, AI agents for social channels, Haruka Twitter bot, NFT marketplace on Superchain, Square Fun AI analytics, Echo Chambers v2.3, Swarm Node growth, token integration, voice cloning mobile app, no-code AI agent builder, project scaling strategies, AI agent unsuspension techniques, global trade analysis, crypto payment functionality, DeFi protocol user experience - https://www.youtube.com/watch?v=Vs7D5DN_trk - Jan 10, 2025 - 9: AI Agents to DePIN - ai16zdao, spaceodili, 0xBuildInPublic, yeahimomar, unl__cky, CheddarQueso3D, lostgirldev, ohhshiny, SYMBiEX, nftRanch, HDPbilly, zerokn0wledge_, KingBootoshi, calintje, hashwarlock, MattPRD, dreygo_, 0xShiroe, lostboydev, brownsvgar, human_for_now, aiagentpepe, sea_of_zhou, tito_cda, thelotioncoin, chineseremilio, _cjft, dino2deno, AIFlow_ML, tmoindustries, astridhpilla, marvin_tong, yikesawjeez, djsamforever, KyleSt4rgarden, ProfRizzAI, vargs_g, KarimaDigital, Amiewitheliza, reality_spiral, wenkafka, slmsolcto, AaronErickson, GoatOfGamblers, c0mput3rxz, wakesync, aiquantfun, sunosuporno, ongo_ai, y7_y00ts, xiao_zcloak, ViralMindAI, Artstridee, bryanjmonterrey, O_on_X, svabhishek, CottenIO, hotpot_intern, TimshelXYZ, shawmakesmagic, dankvr - Database and memory systems, documentation enhancements, Pixocracy Launchpad, image and music generation, AI in education, Aora project, hackathon judging, troll bot agent, TEE exploration, Discord deployment, DeFi agent swarm, summary kernel experiment, on-chain swaps, cross-VM bridging, Feather agent framework, Orca liquidity provisioning, Oracle agent on Sporephone, research paper auditing, market-making platform, GigaBread jailbreak testing, Solimp realism enhancement, Eliza texting buddy, automatic data collection, DePIN plugin for real-world data, Dark Sun digital investigator, platform front-end implementation, AI model Zion, AWS dockerization, multi-wallet volume bot, Akash plugin development, insurance app for natural capital, CES meetings and partnerships, TEE Cloud onboarding, Eliza PR merging system, Shogun plugin contributions, token staking documentation, Riz.ai entertainment platform, Zero-G storage plugin, dating coach AI, ecosystem integration, prompt logging system, wallet natural language commands, time series modeling for hurricanes, Goat Arena platform, token selector plugin, &quot;simp to earn&quot; feature, AI quant launchpad, Midas project wallet infrastructure, Ongo art critic expansion, Utes sports analytics, TikTok wallet integration, Minecraft tournament infrastructure, trading dashboard with social features, X account suspension workarounds, RAP framework development, image generation training, ZoroX TikTok coin hunter - https://www.youtube.com/watch?v=fqM_vYK2bmc - Jan 17, 2025 - 10: From Digital to Physical - ai16zdao, shawmakesmagic, JustinMoonAI, AntiRugAgent, rckprtr, dreygo_, Audix_hq, coordinape, lostgirldev, AIFlow_ML, astridhpilla, thelotioncoin, RodrigoSotoAlt, berliangor, unl__cky, xiao_zcloak, 0xnavkumar, GoatOfGamblers, Amiewitheliza, 0xVEER, BuzzyCrypto_, SYMBiEX, w1kke, luki_notlowkey, AgentTextdotfun, yikesawjeez, ByornOeste, Nasdao_, elizawakesup, dankvr, sypherlit - Eliza V2 development, inventory system, CLI, Tron integration, rug pull prevention, Discover AI community management, Kyra AI market-making, smart contract visuals, Farcaster community rewards, website and terminal development, PR agent for ElizaOS, voice and VRM development, API connections, persistent memory system, Pglite rewriting in Rust, Telegram launch, &quot;Approve Agents&quot; model for wallets, verifiable TEE Network, Telegram mini apps, internal team calls, ETH Denver AI program, autonomous trader and music releases, web search in agents, devotion program staking, on-chain data plugin, DePIN network for SMS, CICD improvements, conspiracy theory thesis, DeFi validator personality, Eliza's robot body, Degen Spartan AI trading, Void AI cross-chain mixer - https://www.youtube.com/watch?v=1voboZEQTAw - Jan 24, 2025 - 11: AI Agents Level Up - ai16zdao, SYMBiEX, astridhpilla, davidlsneider, dreygo_, GoatOfGamblers, unl__cky, thelotioncoin, Amiewitheliza, lostboydev, lostgirldev, AIFlow_ML, _AnonDev, damascoai, ITzMiZzle, MementsOfficial, immanencer, MrMinter_eth, FilteredThought, AgienceAI, BotOrNot42, itsmetamike, sea_of_zhou, TimshelXYZ, wakesync, reality_spiral, ai16zdao, yikesawjeez - DeepSeek R1 integration, Fleek partnership, Lit Protocol Agent Wallet Kit, Ninja Terminal market making, GoToArena Telegram bot, X image generation, agent platform MVP, Trust Marketplace paper, Telegram mod functionality, Solenguration B2B terminal, Hyperbolic agent tracking, cybersecurity ecosystem, AI security framework, Kiyomi AI voice and music, SQL Agents library, AI agent swarms with D&amp;D stats, agent business logic, Suno/Udio plugin, open source agent platform token, Vice agent content creation, Hyperfy tests, Quicksilver prediction framework, Eliza email scheduling, Simp2Earn tokenomics, GitHub UI relationship module, improved news aggregator, ElizaOS CICD improvements - https://www.youtube.com/watch?v=mxdWvBnxN8M - Jan 31, 2025 - 12: ElizaOS 0.1.9 Launch - ai16zdao, shawmakesmagic, astridhpilla, lostgirldev, xrpublisher, lostboydev, spaceodili, SYMBiEX, yikesawjeez, Amiewitheliza, 0xrhota, ai16zdao, wakesync, AIFlow_ML, Signalman23, Rowdymode, MementsOfficial, elizawakesup, reality_spiral, tmoindustries, w1kke, shawmakesmagic - DUNA Framework for DAOs, Miku updates (MetaHuman, ETHDenver), SolEng Terminal launch, Pixel memory system with backups, SolImp Telegram mod platform, ElizaOS v0.1.9 release with plugin registry, website rework with 3D models, ecosystem updates (tokenomics, self-hosting), HyperPoly plugin and marketplace integration, Degen Spartan trading enhancements, Block Tank show format, Eliza voice device development, Backpack plugin and typing fixes, voice agent model fine-tuning, Gods Unchained tokenomics, AI database interaction library, voice demo with improved latency, Coinbase grant and trading on Base, insurance agents for nature and biodiversity, Gods Unchained plugins and Devotion program - https://www.youtube.com/watch?v=SZNuoXJ1Mvs   ","version":null,"tagName":"h2"},{"title":"Video Archive for Research‚Äã","type":1,"pageTitle":"What Did You Get Done This Week? Recap","url":"/blog/wdygdtw-recap#video-archive-for-research","content":" These recordings help document the week-by-week evolution of the crypto AI ecosystem, capturing the iterative development process and community formation in real-time. NotebookLM and similar research tools can extract specific technical discussions, discover new connections, and track project evolution through these as sources.  Below is a complete list of all WDYGDTW session recordings. These videos can be imported into tools like Google's NotebookLM via youtube video import for deeper analysis, transcript generation, and pattern recognition across the development timeline:    Youtube  https://www.youtube.com/watch?v=9EmvhlBPB8Qhttps://www.youtube.com/watch?v=Lbvv0Dr91Bchttps://www.youtube.com/watch?v=nUAEQ7uKi04https://www.youtube.com/watch?v=r3Z4lvu_ic4https://www.youtube.com/watch?v=4u8rbjmvWC0https://www.youtube.com/watch?v=R3auUQj9oEghttps://www.youtube.com/watch?v=jcSF7dSicTIhttps://www.youtube.com/watch?v=Vs7D5DN_trkhttps://www.youtube.com/watch?v=fqM_vYK2bmchttps://www.youtube.com/watch?v=1voboZEQTAwhttps://www.youtube.com/watch?v=mxdWvBnxN8Mhttps://www.youtube.com/watch?v=SZNuoXJ1Mvs  Notes  WDYGDTW #1WDYGDTW #2WDYGDTW #3WDYGDTW #4WDYGDTW #5WDYGDTW #6WDYGDTW #7WDYGDTW #8WDYGDTW #9WDYGDTW #10WDYGDTW #11WDYGDTW #12  If you do something cool with this data, let us know in the discord!  After 3 straight months of nonstop building, it was time for a rest period. We may bring this format back, but we also want to continue the spirit of public accountability and transparent development through other community initiatives to keep things fresh. One such example is Clank Tank, where a standup becomes a pitch to AI judges that give you feedback about your project. ","version":null,"tagName":"h2"},{"title":"@elizaos/core v1.3.0","type":0,"sectionRef":"#","url":"/api","content":"","keywords":"","version":"1.0.17"},{"title":"Namespaces‚Äã","type":1,"pageTitle":"@elizaos/core v1.3.0","url":"/api#namespaces","content":" v1v2  ","version":"1.0.17","tagName":"h2"},{"title":"Enumerations‚Äã","type":1,"pageTitle":"@elizaos/core v1.3.0","url":"/api#enumerations","content":" RoleEventTypePlatformPrefixKnowledgeScopeCacheKeyPrefixMemoryTypeTEEModeTeeType  ","version":"1.0.17","tagName":"h2"},{"title":"Classes‚Äã","type":1,"pageTitle":"@elizaos/core v1.3.0","url":"/api#classes","content":" DatabaseAdapterServiceBuilderIBrowserServiceIEmailServiceILpServiceIMessageServiceIPdfServiceIPostServiceServiceITokenDataServiceITranscriptionServiceIVideoServiceIWalletServiceIWebSearchService  ","version":"1.0.17","tagName":"h2"},{"title":"Interfaces‚Äã","type":1,"pageTitle":"@elizaos/core v1.3.0","url":"/api#interfaces","content":" ServerOwnershipStateServiceDefinitionMessageExampleCharacterAgentActionExampleActionEvaluationExampleEvaluatorProviderActionResultActionContextLogIDatabaseAdapterEmbeddingSearchResultMemoryRetrievalOptionsMemorySearchOptionsMultiRoomMemoryOptionsUnifiedMemoryOptionsUnifiedSearchOptionsEntityParticipantRelationshipEventPayloadWorldPayloadEntityPayloadMessagePayloadChannelClearedPayloadInvokePayloadRunEventPayloadActionEventPayloadEvaluatorEventPayloadModelEventPayloadEventPayloadMapDirectoryItemChunkRowBaseMetadataMemoryMessageMemoryTargetInfoControlMessageDetokenizeTextParamsBaseModelParamsTextGenerationParamsTextEmbeddingParamsTokenizeTextParamsImageGenerationParamsImageDescriptionParamsTranscriptionParamsTextToSpeechParamsAudioProcessingParamsVideoProcessingParamsObjectGenerationParamsModelParamsMapModelResultMapModelHandlerContentIAgentRuntimeServiceTypeRegistryServiceClassMapTypedServiceServiceErrorRuntimeSettingsStateStateObjectEnhancedStateTaskWorkerTaskTeeAgentRemoteAttestationQuoteDeriveKeyAttestationDataRemoteAttestationMessageTeePluginConfigTestCaseTestSuiteTokenBalanceTokenDataWalletAssetWalletPortfolio  ","version":"1.0.17","tagName":"h2"},{"title":"Type Aliases‚Äã","type":1,"pageTitle":"@elizaos/core v1.3.0","url":"/api#type-aliases","content":" HandlerCallbackHandlerValidatorDbConnectionEventHandlerTypedEventHandlerKnowledgeItemPoolInfoLpPositionDetailsTransactionResultMemoryTypeAliasMemoryScopeSendHandlerFunctionGenerateTextParamsJSONSchemaPluginEventsUUIDMediaMetadataServiceTypeNameServiceTypeValueIsValidServiceTypeTypedServiceClassServiceInstanceServiceRegistryStateValueStateArrayTaskMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Variables‚Äã","type":1,"pageTitle":"@elizaos/core v1.3.0","url":"/api#variables","content":" ModelTypeServiceType  ","version":"1.0.17","tagName":"h2"},{"title":"Functions‚Äã","type":1,"pageTitle":"@elizaos/core v1.3.0","url":"/api#functions","content":" composeActionExamplesformatActionNamesformatActionsfindEntityByNamecreateUniqueUuidgetEntityDetailsformatEntitiesgetUserServerRolefindWorldsForOwnervalidateCharacterparseAndValidateCharacterisValidCharactercreateServicedefineServicecreateSettingFromConfiggetSaltencryptStringValuedecryptStringValuesaltSettingValueunsaltSettingValuesaltWorldSettingsunsaltWorldSettingsupdateWorldSettingsgetWorldSettingsinitializeOnboardingencryptedCharacterdecryptedCharacterencryptObjectValuesdecryptObjectValuescreateActionResultcreateMessageMemoryisDocumentMetadataisFragmentMetadataisMessageMetadataisDescriptionMetadataisCustomMetadataisDocumentMemoryisFragmentMemorygetMemoryTextasUUIDgetTypedServicecreateServiceErrorcomposePromptcomposePromptFromStateaddHeaderformatMessagesparseKeyValueXmlparseJSONObjectFromTextnormalizeJsonStringtruncateToCompleteSentencetrimTokensparseBooleanFromTextvalidateUuidstringToUuid ","version":"1.0.17","tagName":"h2"},{"title":"Class: abstract DatabaseAdapter<DB>","type":0,"sectionRef":"#","url":"/api/classes/DatabaseAdapter","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#type-parameters","content":" ‚Ä¢ DB = unknown  The type of the database instance.  implements IDatabaseAdapter  ","version":"1.0.17","tagName":"h2"},{"title":"Implements‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#implements","content":" IDatabaseAdapter  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"db‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#db","content":" db: DB  The database instance.  Implementation of‚Äã  IDatabaseAdapter.db  Defined in‚Äã  packages/core/src/database.ts:32  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"initialize()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#initialize","content":" abstract initialize(config?): Promise&lt;void&gt;  Initialize the database adapter.  Parameters‚Äã  ‚Ä¢ config?: any  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when initialization is complete.  Implementation of‚Äã  IDatabaseAdapter.initialize  Defined in‚Äã  packages/core/src/database.ts:38    ","version":"1.0.17","tagName":"h3"},{"title":"init()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#init","content":" abstract init(): Promise&lt;void&gt;  Initialize the database adapter.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when initialization is complete.  Implementation of‚Äã  IDatabaseAdapter.init  Defined in‚Äã  packages/core/src/database.ts:44    ","version":"1.0.17","tagName":"h3"},{"title":"runMigrations()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#runmigrations","content":" abstract runMigrations(migrationsPaths?): Promise&lt;void&gt;  Run database migrations  Parameters‚Äã  ‚Ä¢ migrationsPaths?: string[]  Optional array of paths to migration folders  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when migrations are complete.  Implementation of‚Äã  IDatabaseAdapter.runMigrations  Defined in‚Äã  packages/core/src/database.ts:51    ","version":"1.0.17","tagName":"h3"},{"title":"isReady()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#isready","content":" abstract isReady(): Promise&lt;boolean&gt;  Check if the database connection is ready.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to true if the database is ready, false otherwise.  Implementation of‚Äã  IDatabaseAdapter.isReady  Defined in‚Äã  packages/core/src/database.ts:57    ","version":"1.0.17","tagName":"h3"},{"title":"close()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#close","content":" abstract close(): Promise&lt;void&gt;  Optional close method for the database adapter.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when closing is complete.  Implementation of‚Äã  IDatabaseAdapter.close  Defined in‚Äã  packages/core/src/database.ts:63    ","version":"1.0.17","tagName":"h3"},{"title":"getConnection()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getconnection","content":" abstract getConnection(): Promise&lt;unknown&gt;  Retrieves a connection to the database.  Returns‚Äã  Promise&lt;unknown&gt;  A Promise that resolves to the database connection.  Implementation of‚Äã  IDatabaseAdapter.getConnection  Defined in‚Äã  packages/core/src/database.ts:69    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesByIds()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getentitiesbyids","content":" abstract getEntitiesByIds(entityIds): Promise&lt;Entity[]&gt;  Retrieves an account by its ID.  Parameters‚Äã  ‚Ä¢ entityIds: `${string}-${string}-${string}-${string}-${string}`[]  The UUIDs of the user account to retrieve.  Returns‚Äã  Promise&lt;Entity[]&gt;  A Promise that resolves to the Entity object or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getEntitiesByIds  Defined in‚Äã  packages/core/src/database.ts:76    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesForRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getentitiesforroom","content":" abstract getEntitiesForRoom(roomId, includeComponents?): Promise&lt;Entity[]&gt;  Get entities for room  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ includeComponents?: boolean  Returns‚Äã  Promise&lt;Entity[]&gt;  Implementation of‚Äã  IDatabaseAdapter.getEntitiesForRoom  Defined in‚Äã  packages/core/src/database.ts:78    ","version":"1.0.17","tagName":"h3"},{"title":"createEntities()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#createentities","content":" abstract createEntities(entities): Promise&lt;boolean&gt;  Creates a new entities in the database.  Parameters‚Äã  ‚Ä¢ entities: Entity[]  The entity objects to create.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves when the account creation is complete.  Implementation of‚Äã  IDatabaseAdapter.createEntities  Defined in‚Äã  packages/core/src/database.ts:85    ","version":"1.0.17","tagName":"h3"},{"title":"updateEntity()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#updateentity","content":" abstract updateEntity(entity): Promise&lt;void&gt;  Updates an existing entity in the database.  Parameters‚Äã  ‚Ä¢ entity: Entity  The entity object with updated properties.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the account update is complete.  Implementation of‚Äã  IDatabaseAdapter.updateEntity  Defined in‚Äã  packages/core/src/database.ts:92    ","version":"1.0.17","tagName":"h3"},{"title":"getComponent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getcomponent","content":" abstract getComponent(entityId, type, worldId?, sourceEntityId?): Promise&lt;Component&gt;  Retrieves a single component by entity ID and type.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the entity the component belongs to  ‚Ä¢ type: string  The type identifier for the component  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID of the world the component belongs to  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID of the source entity  Returns‚Äã  Promise&lt;Component&gt;  Promise resolving to the Component if found, null otherwise  Implementation of‚Äã  IDatabaseAdapter.getComponent  Defined in‚Äã  packages/core/src/database.ts:102    ","version":"1.0.17","tagName":"h3"},{"title":"getComponents()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getcomponents","content":" abstract getComponents(entityId, worldId?, sourceEntityId?): Promise&lt;Component[]&gt;  Retrieves all components for an entity.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the entity to get components for  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID of the world to filter components by  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID of the source entity to filter by  Returns‚Äã  Promise&lt;Component[]&gt;  Promise resolving to array of Component objects  Implementation of‚Äã  IDatabaseAdapter.getComponents  Defined in‚Äã  packages/core/src/database.ts:116    ","version":"1.0.17","tagName":"h3"},{"title":"createComponent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#createcomponent","content":" abstract createComponent(component): Promise&lt;boolean&gt;  Creates a new component in the database.  Parameters‚Äã  ‚Ä¢ component: Component  The component object to create  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to true if creation was successful  Implementation of‚Äã  IDatabaseAdapter.createComponent  Defined in‚Äã  packages/core/src/database.ts:127    ","version":"1.0.17","tagName":"h3"},{"title":"updateComponent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#updatecomponent","content":" abstract updateComponent(component): Promise&lt;void&gt;  Updates an existing component in the database.  Parameters‚Äã  ‚Ä¢ component: Component  The component object with updated properties  Returns‚Äã  Promise&lt;void&gt;  Promise that resolves when the update is complete  Implementation of‚Äã  IDatabaseAdapter.updateComponent  Defined in‚Äã  packages/core/src/database.ts:134    ","version":"1.0.17","tagName":"h3"},{"title":"deleteComponent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#deletecomponent","content":" abstract deleteComponent(componentId): Promise&lt;void&gt;  Deletes a component from the database.  Parameters‚Äã  ‚Ä¢ componentId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the component to delete  Returns‚Äã  Promise&lt;void&gt;  Promise that resolves when the deletion is complete  Implementation of‚Äã  IDatabaseAdapter.deleteComponent  Defined in‚Äã  packages/core/src/database.ts:141    ","version":"1.0.17","tagName":"h3"},{"title":"getMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getmemories","content":" abstract getMemories(params): Promise&lt;Memory[]&gt;  Retrieves memories based on the specified parameters.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the memory retrieval.  ‚Ä¢ params.entityId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.agentId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.count?: number  ‚Ä¢ params.unique?: boolean  ‚Ä¢ params.tableName: string  ‚Ä¢ params.start?: number  ‚Ä¢ params.end?: number  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.worldId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Implementation of‚Äã  IDatabaseAdapter.getMemories  Defined in‚Äã  packages/core/src/database.ts:148    ","version":"1.0.17","tagName":"h3"},{"title":"getMemoriesByIds()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getmemoriesbyids","content":" abstract getMemoriesByIds(memoryIds, tableName?): Promise&lt;Memory[]&gt;  Retrieves multiple memories by their IDs  Parameters‚Äã  ‚Ä¢ memoryIds: `${string}-${string}-${string}-${string}-${string}`[]  Array of UUIDs of the memories to retrieve  ‚Ä¢ tableName?: string  Optional table name to filter memories by type  Returns‚Äã  Promise&lt;Memory[]&gt;  Promise resolving to array of Memory objects  Implementation of‚Äã  IDatabaseAdapter.getMemoriesByIds  Defined in‚Äã  packages/core/src/database.ts:174    ","version":"1.0.17","tagName":"h3"},{"title":"getCachedEmbeddings()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getcachedembeddings","content":" abstract getCachedEmbeddings(params): Promise&lt;object[]&gt;  Retrieves cached embeddings based on the specified query parameters.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the embedding retrieval.  ‚Ä¢ params.query_table_name: string  ‚Ä¢ params.query_threshold: number  ‚Ä¢ params.query_input: string  ‚Ä¢ params.query_field_name: string  ‚Ä¢ params.query_field_sub_name: string  ‚Ä¢ params.query_match_count: number  Returns‚Äã  Promise&lt;object[]&gt;  A Promise that resolves to an array of objects containing embeddings and levenshtein scores.  Implementation of‚Äã  IDatabaseAdapter.getCachedEmbeddings  Defined in‚Äã  packages/core/src/database.ts:181    ","version":"1.0.17","tagName":"h3"},{"title":"log()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#log","content":" abstract log(params): Promise&lt;void&gt;  Logs an event or action with the specified details.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the log entry.  ‚Ä¢ params.body  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.type: string  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the log entry has been saved.  Implementation of‚Äã  IDatabaseAdapter.log  Defined in‚Äã  packages/core/src/database.ts:207    ","version":"1.0.17","tagName":"h3"},{"title":"getLogs()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getlogs","content":" abstract getLogs(params): Promise&lt;Log[]&gt;  Retrieves logs based on the specified parameters.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the log retrieval.  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.type?: string  ‚Ä¢ params.count?: number  ‚Ä¢ params.offset?: number  Returns‚Äã  Promise&lt;Log[]&gt;  A Promise that resolves to an array of Log objects.  Implementation of‚Äã  IDatabaseAdapter.getLogs  Defined in‚Äã  packages/core/src/database.ts:219    ","version":"1.0.17","tagName":"h3"},{"title":"deleteLog()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#deletelog","content":" abstract deleteLog(logId): Promise&lt;void&gt;  Deletes a log from the database.  Parameters‚Äã  ‚Ä¢ logId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the log to delete.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the log has been deleted.  Implementation of‚Äã  IDatabaseAdapter.deleteLog  Defined in‚Äã  packages/core/src/database.ts:232    ","version":"1.0.17","tagName":"h3"},{"title":"searchMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#searchmemories","content":" abstract searchMemories(params): Promise&lt;Memory[]&gt;  Searches for memories based on embeddings and other specified parameters.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the memory search.  ‚Ä¢ params.tableName: string  ‚Ä¢ params.embedding: number[]  ‚Ä¢ params.match_threshold?: number  ‚Ä¢ params.count?: number  ‚Ä¢ params.unique?: boolean  ‚Ä¢ params.query?: string  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.entityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Implementation of‚Äã  IDatabaseAdapter.searchMemories  Defined in‚Äã  packages/core/src/database.ts:239    ","version":"1.0.17","tagName":"h3"},{"title":"createMemory()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#creatememory","content":" abstract createMemory(memory, tableName, unique?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new memory in the database.  Parameters‚Äã  ‚Ä¢ memory: Memory  The memory object to create.  ‚Ä¢ tableName: string  The table where the memory should be stored.  ‚Ä¢ unique?: boolean  Indicates if the memory should be unique.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves when the memory has been created.  Implementation of‚Äã  IDatabaseAdapter.createMemory  Defined in‚Äã  packages/core/src/database.ts:258    ","version":"1.0.17","tagName":"h3"},{"title":"updateMemory()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#updatememory","content":" abstract updateMemory(memory): Promise&lt;boolean&gt;  Updates an existing memory in the database.  Parameters‚Äã  ‚Ä¢ memory: Partial&lt;Memory&gt; &amp; object  The memory object with updated content and optional embedding  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to boolean indicating success  Implementation of‚Äã  IDatabaseAdapter.updateMemory  Defined in‚Äã  packages/core/src/database.ts:265    ","version":"1.0.17","tagName":"h3"},{"title":"deleteMemory()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#deletememory","content":" abstract deleteMemory(memoryId): Promise&lt;void&gt;  Removes a specific memory from the database.  Parameters‚Äã  ‚Ä¢ memoryId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the memory to remove.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the memory has been removed.  Implementation of‚Äã  IDatabaseAdapter.deleteMemory  Defined in‚Äã  packages/core/src/database.ts:274    ","version":"1.0.17","tagName":"h3"},{"title":"deleteManyMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#deletemanymemories","content":" abstract deleteManyMemories(memoryIds): Promise&lt;void&gt;  Removes multiple memories from the database in a single batch operation.  Parameters‚Äã  ‚Ä¢ memoryIds: `${string}-${string}-${string}-${string}-${string}`[]  An array of UUIDs of the memories to remove.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Implementation of‚Äã  IDatabaseAdapter.deleteManyMemories  Defined in‚Äã  packages/core/src/database.ts:281    ","version":"1.0.17","tagName":"h3"},{"title":"deleteAllMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#deleteallmemories","content":" abstract deleteAllMemories(roomId, tableName): Promise&lt;void&gt;  Removes all memories associated with a specific room.  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room whose memories should be removed.  ‚Ä¢ tableName: string  The table from which the memories should be removed.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Implementation of‚Äã  IDatabaseAdapter.deleteAllMemories  Defined in‚Äã  packages/core/src/database.ts:289    ","version":"1.0.17","tagName":"h3"},{"title":"countMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#countmemories","content":" abstract countMemories(roomId, unique?, tableName?): Promise&lt;number&gt;  Counts the number of memories in a specific room.  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to count memories.  ‚Ä¢ unique?: boolean  Specifies whether to count only unique memories.  ‚Ä¢ tableName?: string  Optional table name to count memories from.  Returns‚Äã  Promise&lt;number&gt;  A Promise that resolves to the number of memories.  Implementation of‚Äã  IDatabaseAdapter.countMemories  Defined in‚Äã  packages/core/src/database.ts:298    ","version":"1.0.17","tagName":"h3"},{"title":"getWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getworld","content":" abstract getWorld(id): Promise&lt;World&gt;  Retrieves a world by its ID.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the world to retrieve.  Returns‚Äã  Promise&lt;World&gt;  A Promise that resolves to the World object or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getWorld  Defined in‚Äã  packages/core/src/database.ts:305    ","version":"1.0.17","tagName":"h3"},{"title":"getAllWorlds()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getallworlds","content":" abstract getAllWorlds(): Promise&lt;World[]&gt;  Retrieves all worlds for an agent.  Returns‚Äã  Promise&lt;World[]&gt;  A Promise that resolves to an array of World objects.  Implementation of‚Äã  IDatabaseAdapter.getAllWorlds  Defined in‚Äã  packages/core/src/database.ts:311    ","version":"1.0.17","tagName":"h3"},{"title":"createWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#createworld","content":" abstract createWorld(world): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new world in the database.  Parameters‚Äã  ‚Ä¢ world: World  The world object to create.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the UUID of the created world.  Implementation of‚Äã  IDatabaseAdapter.createWorld  Defined in‚Äã  packages/core/src/database.ts:318    ","version":"1.0.17","tagName":"h3"},{"title":"updateWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#updateworld","content":" abstract updateWorld(world): Promise&lt;void&gt;  Updates an existing world in the database.  Parameters‚Äã  ‚Ä¢ world: World  The world object with updated properties.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the world has been updated.  Implementation of‚Äã  IDatabaseAdapter.updateWorld  Defined in‚Äã  packages/core/src/database.ts:325    ","version":"1.0.17","tagName":"h3"},{"title":"removeWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#removeworld","content":" abstract removeWorld(id): Promise&lt;void&gt;  Removes a specific world from the database.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the world to remove.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the world has been removed.  Implementation of‚Äã  IDatabaseAdapter.removeWorld  Defined in‚Äã  packages/core/src/database.ts:332    ","version":"1.0.17","tagName":"h3"},{"title":"getRoomsByIds()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getroomsbyids","content":" abstract getRoomsByIds(roomIds): Promise&lt;Room[]&gt;  Retrieves the room ID for a given room, if it exists.  Parameters‚Äã  ‚Ä¢ roomIds: `${string}-${string}-${string}-${string}-${string}`[]  The UUIDs of the rooms to retrieve.  Returns‚Äã  Promise&lt;Room[]&gt;  A Promise that resolves to the room ID or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getRoomsByIds  Defined in‚Äã  packages/core/src/database.ts:339    ","version":"1.0.17","tagName":"h3"},{"title":"getRoomsByWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getroomsbyworld","content":" abstract getRoomsByWorld(worldId): Promise&lt;Room[]&gt;  Retrieves all rooms for a given world.  Parameters‚Äã  ‚Ä¢ worldId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the world to retrieve rooms for.  Returns‚Äã  Promise&lt;Room[]&gt;  A Promise that resolves to an array of Room objects.  Implementation of‚Äã  IDatabaseAdapter.getRoomsByWorld  Defined in‚Äã  packages/core/src/database.ts:346    ","version":"1.0.17","tagName":"h3"},{"title":"createRooms()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#createrooms","content":" abstract createRooms(rooms): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Creates new rooms in the database.  Parameters‚Äã  ‚Ä¢ rooms: Room[]  Array of Room objects to create.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to the UUIDs of the created rooms.  Implementation of‚Äã  IDatabaseAdapter.createRooms  Defined in‚Äã  packages/core/src/database.ts:353    ","version":"1.0.17","tagName":"h3"},{"title":"updateRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#updateroom","content":" abstract updateRoom(room): Promise&lt;void&gt;  Updates a specific room in the database.  Parameters‚Äã  ‚Ä¢ room: Room  The room object with updated properties.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the room has been updated.  Implementation of‚Äã  IDatabaseAdapter.updateRoom  Defined in‚Äã  packages/core/src/database.ts:360    ","version":"1.0.17","tagName":"h3"},{"title":"deleteRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#deleteroom","content":" abstract deleteRoom(roomId): Promise&lt;void&gt;  Removes a specific room from the database.  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to remove.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the room has been removed.  Implementation of‚Äã  IDatabaseAdapter.deleteRoom  Defined in‚Äã  packages/core/src/database.ts:367    ","version":"1.0.17","tagName":"h3"},{"title":"getRoomsForParticipant()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getroomsforparticipant","content":" abstract getRoomsForParticipant(entityId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which a specific user is a participant.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Implementation of‚Äã  IDatabaseAdapter.getRoomsForParticipant  Defined in‚Äã  packages/core/src/database.ts:374    ","version":"1.0.17","tagName":"h3"},{"title":"getRoomsForParticipants()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getroomsforparticipants","content":" abstract getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which specific users are participants.  Parameters‚Äã  ‚Ä¢ userIds: `${string}-${string}-${string}-${string}-${string}`[]  An array of UUIDs of the users.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Implementation of‚Äã  IDatabaseAdapter.getRoomsForParticipants  Defined in‚Äã  packages/core/src/database.ts:381    ","version":"1.0.17","tagName":"h3"},{"title":"addParticipantsRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#addparticipantsroom","content":" abstract addParticipantsRoom(entityIds, roomId): Promise&lt;boolean&gt;  Adds users as a participant to a specific room.  Parameters‚Äã  ‚Ä¢ entityIds: `${string}-${string}-${string}-${string}-${string}`[]  The UUIDs of the users to add as a participant.  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to which the user will be added.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Implementation of‚Äã  IDatabaseAdapter.addParticipantsRoom  Defined in‚Äã  packages/core/src/database.ts:389    ","version":"1.0.17","tagName":"h3"},{"title":"removeParticipant()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#removeparticipant","content":" abstract removeParticipant(entityId, roomId): Promise&lt;boolean&gt;  Removes a user as a participant from a specific room.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user to remove as a participant.  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room from which the user will be removed.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Implementation of‚Äã  IDatabaseAdapter.removeParticipant  Defined in‚Äã  packages/core/src/database.ts:397    ","version":"1.0.17","tagName":"h3"},{"title":"getParticipantsForEntity()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getparticipantsforentity","content":" abstract getParticipantsForEntity(entityId): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the account.  Returns‚Äã  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  Implementation of‚Äã  IDatabaseAdapter.getParticipantsForEntity  Defined in‚Äã  packages/core/src/database.ts:404    ","version":"1.0.17","tagName":"h3"},{"title":"getParticipantsForRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getparticipantsforroom","content":" abstract getParticipantsForRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves participants for a specific room.  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to retrieve participants.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of UUIDs representing the participants.  Implementation of‚Äã  IDatabaseAdapter.getParticipantsForRoom  Defined in‚Äã  packages/core/src/database.ts:411    ","version":"1.0.17","tagName":"h3"},{"title":"createRelationship()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#createrelationship","content":" abstract createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two users.  Parameters‚Äã  ‚Ä¢ params  Object containing the relationship details including entity IDs, agent ID, optional tags and metadata  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.metadata?: Record&lt;string, unknown&gt;  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Implementation of‚Äã  IDatabaseAdapter.createRelationship  Defined in‚Äã  packages/core/src/database.ts:429    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationship()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getrelationship","content":" abstract getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two users if it exists.  Parameters‚Äã  ‚Ä¢ params  Object containing the entity IDs and agent ID  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Relationship&gt;  A Promise that resolves to the Relationship object or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getRelationship  Defined in‚Äã  packages/core/src/database.ts:441    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationships()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getrelationships","content":" abstract getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific user.  Parameters‚Äã  ‚Ä¢ params  Object containing the user ID, agent ID and optional tags to filter by  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  Returns‚Äã  Promise&lt;Relationship[]&gt;  A Promise that resolves to an array of Relationship objects.  Implementation of‚Äã  IDatabaseAdapter.getRelationships  Defined in‚Äã  packages/core/src/database.ts:451    ","version":"1.0.17","tagName":"h3"},{"title":"updateRelationship()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#updaterelationship","content":" abstract updateRelationship(params): Promise&lt;void&gt;  Updates an existing relationship between two users.  Parameters‚Äã  ‚Ä¢ params  Object containing the relationship details to update including entity IDs, agent ID, optional tags and metadata  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.metadata?: Record&lt;string, unknown&gt;  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves to a boolean indicating success or failure of the update.  Implementation of‚Äã  IDatabaseAdapter.updateRelationship  Defined in‚Äã  packages/core/src/database.ts:458    ","version":"1.0.17","tagName":"h3"},{"title":"getAgent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getagent","content":" abstract getAgent(agentId): Promise&lt;Agent&gt;  Retrieves an agent by its ID.  Parameters‚Äã  ‚Ä¢ agentId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the agent to retrieve.  Returns‚Äã  Promise&lt;Agent&gt;  A Promise that resolves to the Agent object or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getAgent  Defined in‚Äã  packages/core/src/database.ts:470    ","version":"1.0.17","tagName":"h3"},{"title":"getAgents()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getagents","content":" abstract getAgents(): Promise&lt;Partial&lt;Agent&gt;[]&gt;  Retrieves all agents from the database.  Returns‚Äã  Promise&lt;Partial&lt;Agent&gt;[]&gt;  A Promise that resolves to an array of Agent objects.  Implementation of‚Äã  IDatabaseAdapter.getAgents  Defined in‚Äã  packages/core/src/database.ts:476    ","version":"1.0.17","tagName":"h3"},{"title":"createAgent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#createagent","content":" abstract createAgent(agent): Promise&lt;boolean&gt;  Creates a new agent in the database.  Parameters‚Äã  ‚Ä¢ agent: Partial&lt;Agent&gt;  The agent object to create.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Implementation of‚Äã  IDatabaseAdapter.createAgent  Defined in‚Äã  packages/core/src/database.ts:483    ","version":"1.0.17","tagName":"h3"},{"title":"updateAgent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#updateagent","content":" abstract updateAgent(agentId, agent): Promise&lt;boolean&gt;  Updates an existing agent in the database.  Parameters‚Äã  ‚Ä¢ agentId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the agent to update.  ‚Ä¢ agent: Partial&lt;Agent&gt;  The agent object with updated properties.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the update.  Implementation of‚Äã  IDatabaseAdapter.updateAgent  Defined in‚Äã  packages/core/src/database.ts:491    ","version":"1.0.17","tagName":"h3"},{"title":"deleteAgent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#deleteagent","content":" abstract deleteAgent(agentId): Promise&lt;boolean&gt;  Deletes an agent from the database.  Parameters‚Äã  ‚Ä¢ agentId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the agent to delete.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the deletion.  Implementation of‚Äã  IDatabaseAdapter.deleteAgent  Defined in‚Äã  packages/core/src/database.ts:498    ","version":"1.0.17","tagName":"h3"},{"title":"ensureEmbeddingDimension()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#ensureembeddingdimension","content":" abstract ensureEmbeddingDimension(dimension): Promise&lt;void&gt;  Ensures an embedding dimension exists in the database.  Parameters‚Äã  ‚Ä¢ dimension: number  The dimension to ensure exists.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the embedding dimension has been ensured to exist.  Implementation of‚Äã  IDatabaseAdapter.ensureEmbeddingDimension  Defined in‚Äã  packages/core/src/database.ts:505    ","version":"1.0.17","tagName":"h3"},{"title":"getCache()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#getcache","content":" abstract getCache&lt;T&gt;(key): Promise&lt;T&gt;  Retrieves a cached value by key from the database.  Type Parameters‚Äã  ‚Ä¢ T  Parameters‚Äã  ‚Ä¢ key: string  The key to look up in the cache  Returns‚Äã  Promise&lt;T&gt;  Promise resolving to the cached string value  Implementation of‚Äã  IDatabaseAdapter.getCache  Defined in‚Äã  packages/core/src/database.ts:512    ","version":"1.0.17","tagName":"h3"},{"title":"setCache()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#setcache","content":" abstract setCache&lt;T&gt;(key, value): Promise&lt;boolean&gt;  Sets a value in the cache with the given key.  Type Parameters‚Äã  ‚Ä¢ T  Parameters‚Äã  ‚Ä¢ key: string  The key to store the value under  ‚Ä¢ value: T  The value to cache  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to true if the cache was set successfully  Implementation of‚Äã  IDatabaseAdapter.setCache  Defined in‚Äã  packages/core/src/database.ts:520    ","version":"1.0.17","tagName":"h3"},{"title":"deleteCache()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#deletecache","content":" abstract deleteCache(key): Promise&lt;boolean&gt;  Deletes a value from the cache by key.  Parameters‚Äã  ‚Ä¢ key: string  The key to delete from the cache  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to true if the value was successfully deleted  Implementation of‚Äã  IDatabaseAdapter.deleteCache  Defined in‚Äã  packages/core/src/database.ts:527    ","version":"1.0.17","tagName":"h3"},{"title":"createTask()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#createtask","content":" abstract createTask(task): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new task instance in the database.  Parameters‚Äã  ‚Ä¢ task: Task  The task object to create  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Promise resolving to the UUID of the created task  Implementation of‚Äã  IDatabaseAdapter.createTask  Defined in‚Äã  packages/core/src/database.ts:534    ","version":"1.0.17","tagName":"h3"},{"title":"getTasks()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#gettasks","content":" abstract getTasks(params): Promise&lt;Task[]&gt;  Retrieves tasks based on specified parameters.  Parameters‚Äã  ‚Ä¢ params  Object containing optional roomId and tags to filter tasks  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.entityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Task[]&gt;  Promise resolving to an array of Task objects  Implementation of‚Äã  IDatabaseAdapter.getTasks  Defined in‚Äã  packages/core/src/database.ts:541    ","version":"1.0.17","tagName":"h3"},{"title":"getTask()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#gettask","content":" abstract getTask(id): Promise&lt;Task&gt;  Retrieves a specific task by its ID.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the task to retrieve  Returns‚Äã  Promise&lt;Task&gt;  Promise resolving to the Task object if found, null otherwise  Implementation of‚Äã  IDatabaseAdapter.getTask  Defined in‚Äã  packages/core/src/database.ts:548    ","version":"1.0.17","tagName":"h3"},{"title":"getTasksByName()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#gettasksbyname","content":" abstract getTasksByName(name): Promise&lt;Task[]&gt;  Retrieves a specific task by its name.  Parameters‚Äã  ‚Ä¢ name: string  The name of the task to retrieve  Returns‚Äã  Promise&lt;Task[]&gt;  Promise resolving to the Task object if found, null otherwise  Implementation of‚Äã  IDatabaseAdapter.getTasksByName  Defined in‚Äã  packages/core/src/database.ts:555    ","version":"1.0.17","tagName":"h3"},{"title":"updateTask()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#updatetask","content":" abstract updateTask(id, task): Promise&lt;void&gt;  Updates an existing task in the database.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the task to update  ‚Ä¢ task: Partial&lt;Task&gt;  Partial Task object containing the fields to update  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when the update is complete  Implementation of‚Äã  IDatabaseAdapter.updateTask  Defined in‚Äã  packages/core/src/database.ts:563    ","version":"1.0.17","tagName":"h3"},{"title":"deleteTask()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/classes/DatabaseAdapter#deletetask","content":" abstract deleteTask(id): Promise&lt;void&gt;  Deletes a task from the database.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the task to delete  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when the deletion is complete  Implementation of‚Äã  IDatabaseAdapter.deleteTask  Defined in‚Äã  packages/core/src/database.ts:570 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract IBrowserService","type":0,"sectionRef":"#","url":"/api/classes/IBrowserService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#servicetype","content":" readonly static serviceType: &quot;browser&quot; = ServiceType.BROWSER  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/browser.ts:64    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#capabilitydescription","content":" readonly capabilityDescription: &quot;Web browser automation and scraping capabilities&quot; = 'Web browser automation and scraping capabilities'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/browser.ts:66    ","version":"1.0.17","tagName":"h3"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"navigate()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#navigate","content":" abstract navigate(url, options?): Promise&lt;void&gt;  Navigate to a URL  Parameters‚Äã  ‚Ä¢ url: string  URL to navigate to  ‚Ä¢ options?: BrowserNavigationOptions  Navigation options  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when navigation completes  Defined in‚Äã  packages/core/src/types/browser.ts:74    ","version":"1.0.17","tagName":"h3"},{"title":"screenshot()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#screenshot","content":" abstract screenshot(options?): Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Take a screenshot of the current page  Parameters‚Äã  ‚Ä¢ options?: ScreenshotOptions  Screenshot options  Returns‚Äã  Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Promise resolving to screenshot buffer  Defined in‚Äã  packages/core/src/types/browser.ts:81    ","version":"1.0.17","tagName":"h3"},{"title":"extractContent()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#extractcontent","content":" abstract extractContent(selector?): Promise&lt;ExtractedContent&gt;  Extract text and content from the current page  Parameters‚Äã  ‚Ä¢ selector?: string  Optional CSS selector to extract from specific element  Returns‚Äã  Promise&lt;ExtractedContent&gt;  Promise resolving to extracted content  Defined in‚Äã  packages/core/src/types/browser.ts:88    ","version":"1.0.17","tagName":"h3"},{"title":"click()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#click","content":" abstract click(selector, options?): Promise&lt;void&gt;  Click on an element  Parameters‚Äã  ‚Ä¢ selector: string | ElementSelector  CSS selector or element selector  ‚Ä¢ options?: ClickOptions  Click options  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when click completes  Defined in‚Äã  packages/core/src/types/browser.ts:96    ","version":"1.0.17","tagName":"h3"},{"title":"type()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#type","content":" abstract type(selector, text, options?): Promise&lt;void&gt;  Type text into an input field  Parameters‚Äã  ‚Ä¢ selector: string  CSS selector for input field  ‚Ä¢ text: string  Text to type  ‚Ä¢ options?: TypeOptions  Typing options  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when typing completes  Defined in‚Äã  packages/core/src/types/browser.ts:105    ","version":"1.0.17","tagName":"h3"},{"title":"waitForElement()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#waitforelement","content":" abstract waitForElement(selector): Promise&lt;void&gt;  Wait for an element to appear  Parameters‚Äã  ‚Ä¢ selector: string | ElementSelector  CSS selector or element selector  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when element is found  Defined in‚Äã  packages/core/src/types/browser.ts:112    ","version":"1.0.17","tagName":"h3"},{"title":"evaluate()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#evaluate","content":" abstract evaluate&lt;T&gt;(script, ...args): Promise&lt;T&gt;  Evaluate JavaScript in the browser context  Type Parameters‚Äã  ‚Ä¢ T = any  Parameters‚Äã  ‚Ä¢ script: string  JavaScript code to evaluate  ‚Ä¢ ...args: any[]  Arguments to pass to the script  Returns‚Äã  Promise&lt;T&gt;  Promise resolving to evaluation result  Defined in‚Äã  packages/core/src/types/browser.ts:120    ","version":"1.0.17","tagName":"h3"},{"title":"getCurrentUrl()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#getcurrenturl","content":" abstract getCurrentUrl(): Promise&lt;string&gt;  Get the current page URL  Returns‚Äã  Promise&lt;string&gt;  Promise resolving to current URL  Defined in‚Äã  packages/core/src/types/browser.ts:126    ","version":"1.0.17","tagName":"h3"},{"title":"goBack()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#goback","content":" abstract goBack(): Promise&lt;void&gt;  Go back in browser history  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when navigation completes  Defined in‚Äã  packages/core/src/types/browser.ts:132    ","version":"1.0.17","tagName":"h3"},{"title":"goForward()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#goforward","content":" abstract goForward(): Promise&lt;void&gt;  Go forward in browser history  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when navigation completes  Defined in‚Äã  packages/core/src/types/browser.ts:138    ","version":"1.0.17","tagName":"h3"},{"title":"refresh()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#refresh","content":" abstract refresh(): Promise&lt;void&gt;  Refresh the current page  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when refresh completes  Defined in‚Äã  packages/core/src/types/browser.ts:144    ","version":"1.0.17","tagName":"h3"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract IBrowserService","url":"/api/classes/IBrowserService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract IEmailService","type":0,"sectionRef":"#","url":"/api/classes/IEmailService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#servicetype","content":" readonly static serviceType: &quot;email&quot; = ServiceType.EMAIL  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/email.ts:78    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#capabilitydescription","content":" readonly capabilityDescription: &quot;Email sending, receiving, and management capabilities&quot; = 'Email sending, receiving, and management capabilities'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/email.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"sendEmail()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#sendemail","content":" abstract sendEmail(message, options?): Promise&lt;string&gt;  Send an email  Parameters‚Äã  ‚Ä¢ message: EmailMessage  Email message to send  ‚Ä¢ options?: EmailSendOptions  Send options  Returns‚Äã  Promise&lt;string&gt;  Promise resolving to message ID  Defined in‚Äã  packages/core/src/types/email.ts:88    ","version":"1.0.17","tagName":"h3"},{"title":"getEmails()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#getemails","content":" abstract getEmails(options?): Promise&lt;EmailMessage[]&gt;  Get emails from a folder  Parameters‚Äã  ‚Ä¢ options?: EmailSearchOptions  Search options  Returns‚Äã  Promise&lt;EmailMessage[]&gt;  Promise resolving to array of emails  Defined in‚Äã  packages/core/src/types/email.ts:95    ","version":"1.0.17","tagName":"h3"},{"title":"getEmail()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#getemail","content":" abstract getEmail(messageId): Promise&lt;EmailMessage&gt;  Get a specific email by ID  Parameters‚Äã  ‚Ä¢ messageId: string  Message ID  Returns‚Äã  Promise&lt;EmailMessage&gt;  Promise resolving to email message  Defined in‚Äã  packages/core/src/types/email.ts:102    ","version":"1.0.17","tagName":"h3"},{"title":"deleteEmail()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#deleteemail","content":" abstract deleteEmail(messageId): Promise&lt;void&gt;  Delete an email  Parameters‚Äã  ‚Ä¢ messageId: string  Message ID  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when deletion completes  Defined in‚Äã  packages/core/src/types/email.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"markEmailAsRead()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#markemailasread","content":" abstract markEmailAsRead(messageId, read): Promise&lt;void&gt;  Mark an email as read/unread  Parameters‚Äã  ‚Ä¢ messageId: string  Message ID  ‚Ä¢ read: boolean  True to mark as read, false for unread  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when operation completes  Defined in‚Äã  packages/core/src/types/email.ts:117    ","version":"1.0.17","tagName":"h3"},{"title":"flagEmail()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#flagemail","content":" abstract flagEmail(messageId, flagged): Promise&lt;void&gt;  Flag/unflag an email  Parameters‚Äã  ‚Ä¢ messageId: string  Message ID  ‚Ä¢ flagged: boolean  True to flag, false to unflag  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when operation completes  Defined in‚Äã  packages/core/src/types/email.ts:125    ","version":"1.0.17","tagName":"h3"},{"title":"moveEmail()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#moveemail","content":" abstract moveEmail(messageId, folderPath): Promise&lt;void&gt;  Move email to a different folder  Parameters‚Äã  ‚Ä¢ messageId: string  Message ID  ‚Ä¢ folderPath: string  Destination folder path  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when move completes  Defined in‚Äã  packages/core/src/types/email.ts:133    ","version":"1.0.17","tagName":"h3"},{"title":"getFolders()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#getfolders","content":" abstract getFolders(): Promise&lt;EmailFolder[]&gt;  Get available folders  Returns‚Äã  Promise&lt;EmailFolder[]&gt;  Promise resolving to array of folders  Defined in‚Äã  packages/core/src/types/email.ts:139    ","version":"1.0.17","tagName":"h3"},{"title":"createFolder()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#createfolder","content":" abstract createFolder(folderName, parentPath?): Promise&lt;void&gt;  Create a new folder  Parameters‚Äã  ‚Ä¢ folderName: string  Name of the folder  ‚Ä¢ parentPath?: string  Optional parent folder path  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when folder is created  Defined in‚Äã  packages/core/src/types/email.ts:147    ","version":"1.0.17","tagName":"h3"},{"title":"getAccountInfo()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#getaccountinfo","content":" abstract getAccountInfo(): Promise&lt;EmailAccount&gt;  Get account information  Returns‚Äã  Promise&lt;EmailAccount&gt;  Promise resolving to account details  Defined in‚Äã  packages/core/src/types/email.ts:153    ","version":"1.0.17","tagName":"h3"},{"title":"searchEmails()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#searchemails","content":" abstract searchEmails(query, options?): Promise&lt;EmailMessage[]&gt;  Search emails  Parameters‚Äã  ‚Ä¢ query: string  Search query  ‚Ä¢ options?: EmailSearchOptions  Search options  Returns‚Äã  Promise&lt;EmailMessage[]&gt;  Promise resolving to search results  Defined in‚Äã  packages/core/src/types/email.ts:161    ","version":"1.0.17","tagName":"h3"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract IEmailService","url":"/api/classes/IEmailService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract ILpService","type":0,"sectionRef":"#","url":"/api/classes/ILpService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#servicetype","content":" readonly static serviceType: &quot;lp&quot; = 'lp'  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/lp.ts:62    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#capabilitydescription","content":" readonly capabilityDescription: &quot;Provides standardized access to DEX liquidity pools.&quot; = 'Provides standardized access to DEX liquidity pools.'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/lp.ts:64    ","version":"1.0.17","tagName":"h3"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"getDexName()‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#getdexname","content":" abstract getDexName(): string  Returns the name of the DEX this service interacts with.  Returns‚Äã  string  The name of the DEX (e.g., &quot;Orca&quot;, &quot;Raydium&quot;).  Defined in‚Äã  packages/core/src/types/lp.ts:70    ","version":"1.0.17","tagName":"h3"},{"title":"getPools()‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#getpools","content":" abstract getPools(tokenAMint?, tokenBMint?): Promise&lt;PoolInfo[]&gt;  Fetches a list of available liquidity pools from the DEX.  Parameters‚Äã  ‚Ä¢ tokenAMint?: string  Optional: Filter pools by the mint address of the first token.  ‚Ä¢ tokenBMint?: string  Optional: Filter pools by the mint address of the second token.  Returns‚Äã  Promise&lt;PoolInfo[]&gt;  A promise that resolves to an array of standardized PoolInfo objects.  Defined in‚Äã  packages/core/src/types/lp.ts:78    ","version":"1.0.17","tagName":"h3"},{"title":"addLiquidity()‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#addliquidity","content":" abstract addLiquidity(params): Promise&lt;TransactionResult &amp; object&gt;  Adds liquidity to a specified pool.  Parameters‚Äã  ‚Ä¢ params  The parameters for adding liquidity.  ‚Ä¢ params.userVault: any  ‚Ä¢ params.poolId: string  ‚Ä¢ params.tokenAAmountLamports: string  ‚Ä¢ params.tokenBAmountLamports?: string  ‚Ä¢ params.slippageBps: number  ‚Ä¢ params.tickLowerIndex?: number  ‚Ä¢ params.tickUpperIndex?: number  Returns‚Äã  Promise&lt;TransactionResult &amp; object&gt;  A promise resolving to a transaction result, including the LP tokens received.  Defined in‚Äã  packages/core/src/types/lp.ts:85    ","version":"1.0.17","tagName":"h3"},{"title":"removeLiquidity()‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#removeliquidity","content":" abstract removeLiquidity(params): Promise&lt;TransactionResult &amp; object&gt;  Removes liquidity from a specified pool.  Parameters‚Äã  ‚Ä¢ params  The parameters for removing liquidity.  ‚Ä¢ params.userVault: any  ‚Ä¢ params.poolId: string  ‚Ä¢ params.lpTokenAmountLamports: string  ‚Ä¢ params.slippageBps: number  Returns‚Äã  Promise&lt;TransactionResult &amp; object&gt;  A promise resolving to a transaction result, including the tokens received.  Defined in‚Äã  packages/core/src/types/lp.ts:100    ","version":"1.0.17","tagName":"h3"},{"title":"getLpPositionDetails()‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#getlppositiondetails","content":" abstract getLpPositionDetails(userAccountPublicKey, poolOrPositionIdentifier): Promise&lt;LpPositionDetails&gt;  Fetches the details of a specific LP position for a user.  Parameters‚Äã  ‚Ä¢ userAccountPublicKey: string  The user's wallet public key.  ‚Ä¢ poolOrPositionIdentifier: string  The identifier for the pool or a specific position (e.g., position NFT mint).  Returns‚Äã  Promise&lt;LpPositionDetails&gt;  A promise resolving to the position details or null if not found.  Defined in‚Äã  packages/core/src/types/lp.ts:113    ","version":"1.0.17","tagName":"h3"},{"title":"getMarketDataForPools()‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#getmarketdataforpools","content":" abstract getMarketDataForPools(poolIds): Promise&lt;Record&lt;string, Partial&lt;PoolInfo&gt;&gt;&gt;  Fetches the latest market data (e.g., APY, TVL) for a list of pools.  Parameters‚Äã  ‚Ä¢ poolIds: string[]  An array of pool IDs to fetch data for.  Returns‚Äã  Promise&lt;Record&lt;string, Partial&lt;PoolInfo&gt;&gt;&gt;  A promise resolving to a map of pool IDs to their partial market data.  Defined in‚Äã  packages/core/src/types/lp.ts:123    ","version":"1.0.17","tagName":"h3"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract ILpService","url":"/api/classes/ILpService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract IMessageService","type":0,"sectionRef":"#","url":"/api/classes/IMessageService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#servicetype","content":" readonly static serviceType: &quot;message&quot; = ServiceType.MESSAGE  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/message.ts:119    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#capabilitydescription","content":" readonly capabilityDescription: &quot;Message sending, receiving, and management capabilities&quot; = 'Message sending, receiving, and management capabilities'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/message.ts:121    ","version":"1.0.17","tagName":"h3"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"sendMessage()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#sendmessage","content":" abstract sendMessage(channelId, content, options?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Send a message to a channel  Parameters‚Äã  ‚Ä¢ channelId: `${string}-${string}-${string}-${string}-${string}`  Channel ID  ‚Ä¢ content: MessageContent  Message content  ‚Ä¢ options?: MessageSendOptions  Send options  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Promise resolving to message ID  Defined in‚Äã  packages/core/src/types/message.ts:130    ","version":"1.0.17","tagName":"h3"},{"title":"getMessages()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#getmessages","content":" abstract getMessages(channelId, options?): Promise&lt;MessageInfo[]&gt;  Get messages from a channel  Parameters‚Äã  ‚Ä¢ channelId: `${string}-${string}-${string}-${string}-${string}`  Channel ID  ‚Ä¢ options?: MessageSearchOptions  Search options  Returns‚Äã  Promise&lt;MessageInfo[]&gt;  Promise resolving to array of messages  Defined in‚Äã  packages/core/src/types/message.ts:142    ","version":"1.0.17","tagName":"h3"},{"title":"getMessage()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#getmessage","content":" abstract getMessage(messageId): Promise&lt;MessageInfo&gt;  Get a specific message by ID  Parameters‚Äã  ‚Ä¢ messageId: `${string}-${string}-${string}-${string}-${string}`  Message ID  Returns‚Äã  Promise&lt;MessageInfo&gt;  Promise resolving to message  Defined in‚Äã  packages/core/src/types/message.ts:149    ","version":"1.0.17","tagName":"h3"},{"title":"editMessage()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#editmessage","content":" abstract editMessage(messageId, content): Promise&lt;void&gt;  Edit a message  Parameters‚Äã  ‚Ä¢ messageId: `${string}-${string}-${string}-${string}-${string}`  Message ID  ‚Ä¢ content: MessageContent  New message content  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when edit completes  Defined in‚Äã  packages/core/src/types/message.ts:157    ","version":"1.0.17","tagName":"h3"},{"title":"deleteMessage()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#deletemessage","content":" abstract deleteMessage(messageId): Promise&lt;void&gt;  Delete a message  Parameters‚Äã  ‚Ä¢ messageId: `${string}-${string}-${string}-${string}-${string}`  Message ID  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when deletion completes  Defined in‚Äã  packages/core/src/types/message.ts:164    ","version":"1.0.17","tagName":"h3"},{"title":"addReaction()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#addreaction","content":" abstract addReaction(messageId, emoji): Promise&lt;void&gt;  Add a reaction to a message  Parameters‚Äã  ‚Ä¢ messageId: `${string}-${string}-${string}-${string}-${string}`  Message ID  ‚Ä¢ emoji: string  Reaction emoji  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when reaction is added  Defined in‚Äã  packages/core/src/types/message.ts:172    ","version":"1.0.17","tagName":"h3"},{"title":"removeReaction()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#removereaction","content":" abstract removeReaction(messageId, emoji): Promise&lt;void&gt;  Remove a reaction from a message  Parameters‚Äã  ‚Ä¢ messageId: `${string}-${string}-${string}-${string}-${string}`  Message ID  ‚Ä¢ emoji: string  Reaction emoji  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when reaction is removed  Defined in‚Äã  packages/core/src/types/message.ts:180    ","version":"1.0.17","tagName":"h3"},{"title":"pinMessage()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#pinmessage","content":" abstract pinMessage(messageId): Promise&lt;void&gt;  Pin a message  Parameters‚Äã  ‚Ä¢ messageId: `${string}-${string}-${string}-${string}-${string}`  Message ID  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when message is pinned  Defined in‚Äã  packages/core/src/types/message.ts:187    ","version":"1.0.17","tagName":"h3"},{"title":"unpinMessage()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#unpinmessage","content":" abstract unpinMessage(messageId): Promise&lt;void&gt;  Unpin a message  Parameters‚Äã  ‚Ä¢ messageId: `${string}-${string}-${string}-${string}-${string}`  Message ID  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when message is unpinned  Defined in‚Äã  packages/core/src/types/message.ts:194    ","version":"1.0.17","tagName":"h3"},{"title":"getChannels()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#getchannels","content":" abstract getChannels(): Promise&lt;MessageChannel[]&gt;  Get available channels  Returns‚Äã  Promise&lt;MessageChannel[]&gt;  Promise resolving to array of channels  Defined in‚Äã  packages/core/src/types/message.ts:200    ","version":"1.0.17","tagName":"h3"},{"title":"getChannel()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#getchannel","content":" abstract getChannel(channelId): Promise&lt;MessageChannel&gt;  Get channel information  Parameters‚Äã  ‚Ä¢ channelId: `${string}-${string}-${string}-${string}-${string}`  Channel ID  Returns‚Äã  Promise&lt;MessageChannel&gt;  Promise resolving to channel info  Defined in‚Äã  packages/core/src/types/message.ts:207    ","version":"1.0.17","tagName":"h3"},{"title":"createChannel()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#createchannel","content":" abstract createChannel(name, type, options?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Create a new channel  Parameters‚Äã  ‚Ä¢ name: string  Channel name  ‚Ä¢ type: &quot;text&quot; | &quot;voice&quot; | &quot;dm&quot; | &quot;group&quot; | &quot;announcement&quot; | &quot;thread&quot;  Channel type  ‚Ä¢ options?  Channel options  ‚Ä¢ options.description?: string  ‚Ä¢ options.participants?: `${string}-${string}-${string}-${string}-${string}`[]  ‚Ä¢ options.private?: boolean  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Promise resolving to new channel ID  Defined in‚Äã  packages/core/src/types/message.ts:216    ","version":"1.0.17","tagName":"h3"},{"title":"searchMessages()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#searchmessages","content":" abstract searchMessages(query, options?): Promise&lt;MessageInfo[]&gt;  Search messages across channels  Parameters‚Äã  ‚Ä¢ query: string  Search query  ‚Ä¢ options?: MessageSearchOptions  Search options  Returns‚Äã  Promise&lt;MessageInfo[]&gt;  Promise resolving to search results  Defined in‚Äã  packages/core/src/types/message.ts:232    ","version":"1.0.17","tagName":"h3"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract IMessageService","url":"/api/classes/IMessageService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract IPdfService","type":0,"sectionRef":"#","url":"/api/classes/IPdfService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#servicetype","content":" readonly static serviceType: &quot;pdf&quot; = ServiceType.PDF  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/pdf.ts:37    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#capabilitydescription","content":" readonly capabilityDescription: &quot;PDF processing, extraction, and generation capabilities&quot; = 'PDF processing, extraction, and generation capabilities'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/pdf.ts:39    ","version":"1.0.17","tagName":"h3"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"extractText()‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#extracttext","content":" abstract extractText(pdfPath): Promise&lt;PdfExtractionResult&gt;  Extract text and metadata from a PDF file  Parameters‚Äã  ‚Ä¢ pdfPath: string | Buffer&lt;ArrayBufferLike&gt;  Path to the PDF file or buffer  Returns‚Äã  Promise&lt;PdfExtractionResult&gt;  Promise resolving to extracted text and metadata  Defined in‚Äã  packages/core/src/types/pdf.ts:46    ","version":"1.0.17","tagName":"h3"},{"title":"generatePdf()‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#generatepdf","content":" abstract generatePdf(htmlContent, options?): Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Generate a PDF from HTML content  Parameters‚Äã  ‚Ä¢ htmlContent: string  HTML content to convert to PDF  ‚Ä¢ options?: PdfGenerationOptions  PDF generation options  Returns‚Äã  Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Promise resolving to PDF buffer  Defined in‚Äã  packages/core/src/types/pdf.ts:54    ","version":"1.0.17","tagName":"h3"},{"title":"convertToPdf()‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#converttopdf","content":" abstract convertToPdf(filePath, options?): Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Convert a document to PDF format  Parameters‚Äã  ‚Ä¢ filePath: string  Path to the document file  ‚Ä¢ options?: PdfConversionOptions  Conversion options  Returns‚Äã  Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Promise resolving to PDF buffer  Defined in‚Äã  packages/core/src/types/pdf.ts:62    ","version":"1.0.17","tagName":"h3"},{"title":"mergePdfs()‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#mergepdfs","content":" abstract mergePdfs(pdfPaths): Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Merge multiple PDF files into one  Parameters‚Äã  ‚Ä¢ pdfPaths: (string | Buffer&lt;ArrayBufferLike&gt;)[]  Array of PDF file paths or buffers  Returns‚Äã  Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Promise resolving to merged PDF buffer  Defined in‚Äã  packages/core/src/types/pdf.ts:69    ","version":"1.0.17","tagName":"h3"},{"title":"splitPdf()‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#splitpdf","content":" abstract splitPdf(pdfPath): Promise&lt;Buffer&lt;ArrayBufferLike&gt;[]&gt;  Split a PDF into individual pages  Parameters‚Äã  ‚Ä¢ pdfPath: string | Buffer&lt;ArrayBufferLike&gt;  Path to the PDF file or buffer  Returns‚Äã  Promise&lt;Buffer&lt;ArrayBufferLike&gt;[]&gt;  Promise resolving to array of page buffers  Defined in‚Äã  packages/core/src/types/pdf.ts:76    ","version":"1.0.17","tagName":"h3"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract IPdfService","url":"/api/classes/IPdfService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract IPostService","type":0,"sectionRef":"#","url":"/api/classes/IPostService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#servicetype","content":" readonly static serviceType: &quot;post&quot; = ServiceType.POST  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/post.ts:155    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#capabilitydescription","content":" readonly capabilityDescription: &quot;Social media posting and content management capabilities&quot; = 'Social media posting and content management capabilities'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/post.ts:157    ","version":"1.0.17","tagName":"h3"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"createPost()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#createpost","content":" abstract createPost(content, options?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Create and publish a new post  Parameters‚Äã  ‚Ä¢ content: PostContent  Post content  ‚Ä¢ options?: PostCreateOptions  Publishing options  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Promise resolving to post ID  Defined in‚Äã  packages/core/src/types/post.ts:166    ","version":"1.0.17","tagName":"h3"},{"title":"getPosts()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#getposts","content":" abstract getPosts(options?): Promise&lt;PostInfo[]&gt;  Get posts from timeline or specific user  Parameters‚Äã  ‚Ä¢ options?: PostSearchOptions  Search options  Returns‚Äã  Promise&lt;PostInfo[]&gt;  Promise resolving to array of posts  Defined in‚Äã  packages/core/src/types/post.ts:173    ","version":"1.0.17","tagName":"h3"},{"title":"getPost()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#getpost","content":" abstract getPost(postId): Promise&lt;PostInfo&gt;  Get a specific post by ID  Parameters‚Äã  ‚Ä¢ postId: `${string}-${string}-${string}-${string}-${string}`  Post ID  Returns‚Äã  Promise&lt;PostInfo&gt;  Promise resolving to post info  Defined in‚Äã  packages/core/src/types/post.ts:180    ","version":"1.0.17","tagName":"h3"},{"title":"editPost()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#editpost","content":" abstract editPost(postId, content): Promise&lt;void&gt;  Edit an existing post  Parameters‚Äã  ‚Ä¢ postId: `${string}-${string}-${string}-${string}-${string}`  Post ID  ‚Ä¢ content: PostContent  New post content  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when edit completes  Defined in‚Äã  packages/core/src/types/post.ts:188    ","version":"1.0.17","tagName":"h3"},{"title":"deletePost()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#deletepost","content":" abstract deletePost(postId): Promise&lt;void&gt;  Delete a post  Parameters‚Äã  ‚Ä¢ postId: `${string}-${string}-${string}-${string}-${string}`  Post ID  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when deletion completes  Defined in‚Äã  packages/core/src/types/post.ts:195    ","version":"1.0.17","tagName":"h3"},{"title":"likePost()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#likepost","content":" abstract likePost(postId, like): Promise&lt;void&gt;  Like/unlike a post  Parameters‚Äã  ‚Ä¢ postId: `${string}-${string}-${string}-${string}-${string}`  Post ID  ‚Ä¢ like: boolean  True to like, false to unlike  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when operation completes  Defined in‚Äã  packages/core/src/types/post.ts:203    ","version":"1.0.17","tagName":"h3"},{"title":"sharePost()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#sharepost","content":" abstract sharePost(postId, comment?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Share/repost a post  Parameters‚Äã  ‚Ä¢ postId: `${string}-${string}-${string}-${string}-${string}`  Post ID  ‚Ä¢ comment?: string  Optional comment when sharing  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Promise resolving to share ID  Defined in‚Äã  packages/core/src/types/post.ts:211    ","version":"1.0.17","tagName":"h3"},{"title":"savePost()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#savepost","content":" abstract savePost(postId, save): Promise&lt;void&gt;  Save/unsave a post  Parameters‚Äã  ‚Ä¢ postId: `${string}-${string}-${string}-${string}-${string}`  Post ID  ‚Ä¢ save: boolean  True to save, false to unsave  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when operation completes  Defined in‚Äã  packages/core/src/types/post.ts:219    ","version":"1.0.17","tagName":"h3"},{"title":"commentOnPost()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#commentonpost","content":" abstract commentOnPost(postId, content): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Comment on a post  Parameters‚Äã  ‚Ä¢ postId: `${string}-${string}-${string}-${string}-${string}`  Post ID  ‚Ä¢ content: PostContent  Comment content  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Promise resolving to comment ID  Defined in‚Äã  packages/core/src/types/post.ts:227    ","version":"1.0.17","tagName":"h3"},{"title":"getComments()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#getcomments","content":" abstract getComments(postId, options?): Promise&lt;PostInfo[]&gt;  Get comments for a post  Parameters‚Äã  ‚Ä¢ postId: `${string}-${string}-${string}-${string}-${string}`  Post ID  ‚Ä¢ options?: PostSearchOptions  Search options  Returns‚Äã  Promise&lt;PostInfo[]&gt;  Promise resolving to array of comments  Defined in‚Äã  packages/core/src/types/post.ts:235    ","version":"1.0.17","tagName":"h3"},{"title":"schedulePost()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#schedulepost","content":" abstract schedulePost(content, scheduledAt, options?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Schedule a post for later publishing  Parameters‚Äã  ‚Ä¢ content: PostContent  Post content  ‚Ä¢ scheduledAt: Date  When to publish  ‚Ä¢ options?: PostCreateOptions  Publishing options  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Promise resolving to scheduled post ID  Defined in‚Äã  packages/core/src/types/post.ts:244    ","version":"1.0.17","tagName":"h3"},{"title":"getPostAnalytics()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#getpostanalytics","content":" abstract getPostAnalytics(postId): Promise&lt;PostAnalytics&gt;  Get analytics for a post  Parameters‚Äã  ‚Ä¢ postId: `${string}-${string}-${string}-${string}-${string}`  Post ID  Returns‚Äã  Promise&lt;PostAnalytics&gt;  Promise resolving to post analytics  Defined in‚Äã  packages/core/src/types/post.ts:255    ","version":"1.0.17","tagName":"h3"},{"title":"getTrendingPosts()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#gettrendingposts","content":" abstract getTrendingPosts(options?): Promise&lt;PostInfo[]&gt;  Get trending posts  Parameters‚Äã  ‚Ä¢ options?: PostSearchOptions  Search options  Returns‚Äã  Promise&lt;PostInfo[]&gt;  Promise resolving to trending posts  Defined in‚Äã  packages/core/src/types/post.ts:262    ","version":"1.0.17","tagName":"h3"},{"title":"searchPosts()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#searchposts","content":" abstract searchPosts(query, options?): Promise&lt;PostInfo[]&gt;  Search posts across platforms  Parameters‚Äã  ‚Ä¢ query: string  Search query  ‚Ä¢ options?: PostSearchOptions  Search options  Returns‚Äã  Promise&lt;PostInfo[]&gt;  Promise resolving to search results  Defined in‚Äã  packages/core/src/types/post.ts:270    ","version":"1.0.17","tagName":"h3"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract IPostService","url":"/api/classes/IPostService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract ITokenDataService","type":0,"sectionRef":"#","url":"/api/classes/ITokenDataService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126    ","version":"1.0.17","tagName":"h3"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#servicetype","content":" readonly static serviceType: &quot;token_data&quot; = ServiceType.TOKEN_DATA  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/token.ts:51    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#capabilitydescription","content":" readonly capabilityDescription: string  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/token.ts:52  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134    ","version":"1.0.17","tagName":"h3"},{"title":"getTokenDetails()‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#gettokendetails","content":" abstract getTokenDetails(address, chain): Promise&lt;TokenData&gt;  Fetches detailed information for a single token.  Parameters‚Äã  ‚Ä¢ address: string  The token's contract address.  ‚Ä¢ chain: string  The blockchain the token resides on.  Returns‚Äã  Promise&lt;TokenData&gt;  A Promise resolving to TokenData or null if not found.  Defined in‚Äã  packages/core/src/types/token.ts:61    ","version":"1.0.17","tagName":"h3"},{"title":"getTrendingTokens()‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#gettrendingtokens","content":" abstract getTrendingTokens(chain?, limit?, timePeriod?): Promise&lt;TokenData[]&gt;  Fetches a list of trending tokens.  Parameters‚Äã  ‚Ä¢ chain?: string  Optional: Filter by a specific blockchain.  ‚Ä¢ limit?: number  Optional: Number of tokens to return. Defaults to a service-specific value.  ‚Ä¢ timePeriod?: string  Optional: Time period for trending data (e.g., '24h', '7d'). Defaults to service-specific.  Returns‚Äã  Promise&lt;TokenData[]&gt;  A Promise resolving to an array of TokenData.  Defined in‚Äã  packages/core/src/types/token.ts:70    ","version":"1.0.17","tagName":"h3"},{"title":"searchTokens()‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#searchtokens","content":" abstract searchTokens(query, chain?, limit?): Promise&lt;TokenData[]&gt;  Searches for tokens based on a query string.  Parameters‚Äã  ‚Ä¢ query: string  The search query (e.g., symbol, name, address).  ‚Ä¢ chain?: string  Optional: Filter by a specific blockchain.  ‚Ä¢ limit?: number  Optional: Number of results to return.  Returns‚Äã  Promise&lt;TokenData[]&gt;  A Promise resolving to an array of TokenData.  Defined in‚Äã  packages/core/src/types/token.ts:83    ","version":"1.0.17","tagName":"h3"},{"title":"getTokensByAddresses()‚Äã","type":1,"pageTitle":"Class: abstract ITokenDataService","url":"/api/classes/ITokenDataService#gettokensbyaddresses","content":" abstract getTokensByAddresses(addresses, chain): Promise&lt;TokenData[]&gt;  Fetches data for multiple tokens by their addresses on a specific chain.  Parameters‚Äã  ‚Ä¢ addresses: string[]  Array of token contract addresses.  ‚Ä¢ chain: string  The blockchain the tokens reside on.  Returns‚Äã  Promise&lt;TokenData[]&gt;  A Promise resolving to an array of TokenData. May not include all requested if some are not found.  Defined in‚Äã  packages/core/src/types/token.ts:91 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract ITranscriptionService","type":0,"sectionRef":"#","url":"/api/classes/ITranscriptionService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126    ","version":"1.0.17","tagName":"h3"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#servicetype","content":" readonly static serviceType: &quot;transcription&quot; = ServiceType.TRANSCRIPTION  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/transcription.ts:63    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#capabilitydescription","content":" readonly capabilityDescription: &quot;Audio transcription and speech processing capabilities&quot; = 'Audio transcription and speech processing capabilities'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/transcription.ts:65  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134    ","version":"1.0.17","tagName":"h3"},{"title":"transcribeAudio()‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#transcribeaudio","content":" abstract transcribeAudio(audioPath, options?): Promise&lt;TranscriptionResult&gt;  Transcribe audio file to text  Parameters‚Äã  ‚Ä¢ audioPath: string | Buffer&lt;ArrayBufferLike&gt;  Path to audio file or audio buffer  ‚Ä¢ options?: TranscriptionOptions  Transcription options  Returns‚Äã  Promise&lt;TranscriptionResult&gt;  Promise resolving to transcription result  Defined in‚Äã  packages/core/src/types/transcription.ts:73    ","version":"1.0.17","tagName":"h3"},{"title":"transcribeVideo()‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#transcribevideo","content":" abstract transcribeVideo(videoPath, options?): Promise&lt;TranscriptionResult&gt;  Transcribe video file to text (extracts audio first)  Parameters‚Äã  ‚Ä¢ videoPath: string | Buffer&lt;ArrayBufferLike&gt;  Path to video file or video buffer  ‚Ä¢ options?: TranscriptionOptions  Transcription options  Returns‚Äã  Promise&lt;TranscriptionResult&gt;  Promise resolving to transcription result  Defined in‚Äã  packages/core/src/types/transcription.ts:84    ","version":"1.0.17","tagName":"h3"},{"title":"speechToText()‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#speechtotext","content":" abstract speechToText(audioStream, options?): Promise&lt;TranscriptionResult&gt;  Real-time speech to text from audio stream  Parameters‚Äã  ‚Ä¢ audioStream: Buffer&lt;ArrayBufferLike&gt; | ReadableStream  Audio stream or buffer  ‚Ä¢ options?: SpeechToTextOptions  Speech to text options  Returns‚Äã  Promise&lt;TranscriptionResult&gt;  Promise resolving to transcription result  Defined in‚Äã  packages/core/src/types/transcription.ts:95    ","version":"1.0.17","tagName":"h3"},{"title":"textToSpeech()‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#texttospeech","content":" abstract textToSpeech(text, options?): Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Convert text to speech  Parameters‚Äã  ‚Ä¢ text: string  Text to convert to speech  ‚Ä¢ options?: TextToSpeechOptions  Text to speech options  Returns‚Äã  Promise&lt;Buffer&lt;ArrayBufferLike&gt;&gt;  Promise resolving to audio buffer  Defined in‚Äã  packages/core/src/types/transcription.ts:106    ","version":"1.0.17","tagName":"h3"},{"title":"getSupportedLanguages()‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#getsupportedlanguages","content":" abstract getSupportedLanguages(): Promise&lt;string[]&gt;  Get supported languages for transcription  Returns‚Äã  Promise&lt;string[]&gt;  Promise resolving to array of supported language codes  Defined in‚Äã  packages/core/src/types/transcription.ts:112    ","version":"1.0.17","tagName":"h3"},{"title":"getAvailableVoices()‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#getavailablevoices","content":" abstract getAvailableVoices(): Promise&lt;object[]&gt;  Get available voices for text to speech  Returns‚Äã  Promise&lt;object[]&gt;  Promise resolving to array of available voices  Defined in‚Äã  packages/core/src/types/transcription.ts:118    ","version":"1.0.17","tagName":"h3"},{"title":"detectLanguage()‚Äã","type":1,"pageTitle":"Class: abstract ITranscriptionService","url":"/api/classes/ITranscriptionService#detectlanguage","content":" abstract detectLanguage(audioPath): Promise&lt;string&gt;  Detect language of audio file  Parameters‚Äã  ‚Ä¢ audioPath: string | Buffer&lt;ArrayBufferLike&gt;  Path to audio file or audio buffer  Returns‚Äã  Promise&lt;string&gt;  Promise resolving to detected language code  Defined in‚Äã  packages/core/src/types/transcription.ts:132 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract IVideoService","type":0,"sectionRef":"#","url":"/api/classes/IVideoService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126    ","version":"1.0.17","tagName":"h3"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#servicetype","content":" readonly static serviceType: &quot;video&quot; = ServiceType.VIDEO  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/video.ts:54    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#capabilitydescription","content":" readonly capabilityDescription: &quot;Video download, processing, and conversion capabilities&quot; = 'Video download, processing, and conversion capabilities'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/video.ts:56  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134    ","version":"1.0.17","tagName":"h3"},{"title":"getVideoInfo()‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#getvideoinfo","content":" abstract getVideoInfo(url): Promise&lt;VideoInfo&gt;  Get video information without downloading  Parameters‚Äã  ‚Ä¢ url: string  Video URL  Returns‚Äã  Promise&lt;VideoInfo&gt;  Promise resolving to video information  Defined in‚Äã  packages/core/src/types/video.ts:63    ","version":"1.0.17","tagName":"h3"},{"title":"downloadVideo()‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#downloadvideo","content":" abstract downloadVideo(url, options?): Promise&lt;string&gt;  Download a video from URL  Parameters‚Äã  ‚Ä¢ url: string  Video URL  ‚Ä¢ options?: VideoDownloadOptions  Download options  Returns‚Äã  Promise&lt;string&gt;  Promise resolving to downloaded file path  Defined in‚Äã  packages/core/src/types/video.ts:71    ","version":"1.0.17","tagName":"h3"},{"title":"extractAudio()‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#extractaudio","content":" abstract extractAudio(videoPath, outputPath?): Promise&lt;string&gt;  Extract audio from video  Parameters‚Äã  ‚Ä¢ videoPath: string  Path to video file or video URL  ‚Ä¢ outputPath?: string  Optional output path for audio file  Returns‚Äã  Promise&lt;string&gt;  Promise resolving to audio file path  Defined in‚Äã  packages/core/src/types/video.ts:79    ","version":"1.0.17","tagName":"h3"},{"title":"getThumbnail()‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#getthumbnail","content":" abstract getThumbnail(videoPath, timestamp?): Promise&lt;string&gt;  Generate thumbnail from video  Parameters‚Äã  ‚Ä¢ videoPath: string  Path to video file or video URL  ‚Ä¢ timestamp?: number  Timestamp in seconds to capture thumbnail  Returns‚Äã  Promise&lt;string&gt;  Promise resolving to thumbnail image path  Defined in‚Äã  packages/core/src/types/video.ts:87    ","version":"1.0.17","tagName":"h3"},{"title":"convertVideo()‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#convertvideo","content":" abstract convertVideo(videoPath, outputPath, options?): Promise&lt;string&gt;  Convert video to different format  Parameters‚Äã  ‚Ä¢ videoPath: string  Path to input video file  ‚Ä¢ outputPath: string  Path for output video file  ‚Ä¢ options?: VideoProcessingOptions  Processing options  Returns‚Äã  Promise&lt;string&gt;  Promise resolving to converted video path  Defined in‚Äã  packages/core/src/types/video.ts:96    ","version":"1.0.17","tagName":"h3"},{"title":"getAvailableFormats()‚Äã","type":1,"pageTitle":"Class: abstract IVideoService","url":"/api/classes/IVideoService#getavailableformats","content":" abstract getAvailableFormats(url): Promise&lt;VideoFormat[]&gt;  Get available formats for a video URL  Parameters‚Äã  ‚Ä¢ url: string  Video URL  Returns‚Äã  Promise&lt;VideoFormat[]&gt;  Promise resolving to available formats  Defined in‚Äã  packages/core/src/types/video.ts:107 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract IWalletService","type":0,"sectionRef":"#","url":"/api/classes/IWalletService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126    ","version":"1.0.17","tagName":"h3"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#servicetype","content":" readonly static serviceType: &quot;wallet&quot; = ServiceType.WALLET  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/wallet.ts:27    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#capabilitydescription","content":" readonly capabilityDescription: &quot;Provides standardized access to wallet balances and portfolios.&quot; = 'Provides standardized access to wallet balances and portfolios.'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/wallet.ts:29  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134    ","version":"1.0.17","tagName":"h3"},{"title":"getPortfolio()‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#getportfolio","content":" abstract getPortfolio(owner?): Promise&lt;WalletPortfolio&gt;  Retrieves the entire portfolio of assets held by the wallet.  Parameters‚Äã  ‚Ä¢ owner?: string  Optional: The specific wallet address/owner to query if the service manages multiple.  Returns‚Äã  Promise&lt;WalletPortfolio&gt;  A promise that resolves to the wallet's portfolio.  Defined in‚Äã  packages/core/src/types/wallet.ts:37    ","version":"1.0.17","tagName":"h3"},{"title":"getBalance()‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#getbalance","content":" abstract getBalance(assetAddress, owner?): Promise&lt;number&gt;  Retrieves the balance of a specific asset in the wallet.  Parameters‚Äã  ‚Ä¢ assetAddress: string  The mint address or native identifier of the asset.  ‚Ä¢ owner?: string  Optional: The specific wallet address/owner to query.  Returns‚Äã  Promise&lt;number&gt;  A promise that resolves to the user-friendly (decimal-adjusted) balance of the asset held.  Defined in‚Äã  packages/core/src/types/wallet.ts:45    ","version":"1.0.17","tagName":"h3"},{"title":"transferSol()‚Äã","type":1,"pageTitle":"Class: abstract IWalletService","url":"/api/classes/IWalletService#transfersol","content":" abstract transferSol(from, to, lamports): Promise&lt;string&gt;  Transfers SOL from a specified keypair to a given public key. This is a low-level function primarily for Solana-based wallet services.  Parameters‚Äã  ‚Ä¢ from: any  The Keypair of the sender.  ‚Ä¢ to: any  The PublicKey of the recipient.  ‚Ä¢ lamports: number  The amount in lamports to transfer.  Returns‚Äã  Promise&lt;string&gt;  A promise that resolves with the transaction signature.  Defined in‚Äã  packages/core/src/types/wallet.ts:55 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract IWebSearchService","type":0,"sectionRef":"#","url":"/api/classes/IWebSearchService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#config","content":" optional config: Metadata  Service configuration  Inherited from‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:126    ","version":"1.0.17","tagName":"h3"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#servicetype","content":" readonly static serviceType: &quot;web_search&quot; = ServiceType.WEB_SEARCH  Service type  Overrides‚Äã  Service.serviceType  Defined in‚Äã  packages/core/src/types/web-search.ts:83    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#capabilitydescription","content":" readonly capabilityDescription: &quot;Web search and content discovery capabilities&quot; = 'Web search and content discovery capabilities'  Service name  Overrides‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/web-search.ts:85  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Inherited from‚Äã  Service.start  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Inherited from‚Äã  Service.stop  Defined in‚Äã  packages/core/src/types/service.ts:134    ","version":"1.0.17","tagName":"h3"},{"title":"search()‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#search","content":" abstract search(query, options?): Promise&lt;SearchResponse&gt;  Perform a general web search  Parameters‚Äã  ‚Ä¢ query: string  Search query  ‚Ä¢ options?: SearchOptions  Search options  Returns‚Äã  Promise&lt;SearchResponse&gt;  Promise resolving to search results  Defined in‚Äã  packages/core/src/types/web-search.ts:93    ","version":"1.0.17","tagName":"h3"},{"title":"searchNews()‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#searchnews","content":" abstract searchNews(query, options?): Promise&lt;SearchResponse&gt;  Search for news articles  Parameters‚Äã  ‚Ä¢ query: string  Search query  ‚Ä¢ options?: NewsSearchOptions  News search options  Returns‚Äã  Promise&lt;SearchResponse&gt;  Promise resolving to news search results  Defined in‚Äã  packages/core/src/types/web-search.ts:101    ","version":"1.0.17","tagName":"h3"},{"title":"searchImages()‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#searchimages","content":" abstract searchImages(query, options?): Promise&lt;SearchResponse&gt;  Search for images  Parameters‚Äã  ‚Ä¢ query: string  Search query  ‚Ä¢ options?: ImageSearchOptions  Image search options  Returns‚Äã  Promise&lt;SearchResponse&gt;  Promise resolving to image search results  Defined in‚Äã  packages/core/src/types/web-search.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"searchVideos()‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#searchvideos","content":" abstract searchVideos(query, options?): Promise&lt;SearchResponse&gt;  Search for videos  Parameters‚Äã  ‚Ä¢ query: string  Search query  ‚Ä¢ options?: VideoSearchOptions  Video search options  Returns‚Äã  Promise&lt;SearchResponse&gt;  Promise resolving to video search results  Defined in‚Äã  packages/core/src/types/web-search.ts:117    ","version":"1.0.17","tagName":"h3"},{"title":"getSuggestions()‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#getsuggestions","content":" abstract getSuggestions(query): Promise&lt;string[]&gt;  Get search suggestions for a query  Parameters‚Äã  ‚Ä¢ query: string  Partial search query  Returns‚Äã  Promise&lt;string[]&gt;  Promise resolving to array of suggestions  Defined in‚Äã  packages/core/src/types/web-search.ts:124    ","version":"1.0.17","tagName":"h3"},{"title":"getTrendingSearches()‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#gettrendingsearches","content":" abstract getTrendingSearches(region?): Promise&lt;string[]&gt;  Get trending searches  Parameters‚Äã  ‚Ä¢ region?: string  Optional region code  Returns‚Äã  Promise&lt;string[]&gt;  Promise resolving to trending search queries  Defined in‚Äã  packages/core/src/types/web-search.ts:131    ","version":"1.0.17","tagName":"h3"},{"title":"getPageInfo()‚Äã","type":1,"pageTitle":"Class: abstract IWebSearchService","url":"/api/classes/IWebSearchService#getpageinfo","content":" abstract getPageInfo(url): Promise&lt;object&gt;  Get detailed information about a specific URL  Parameters‚Äã  ‚Ä¢ url: string  URL to analyze  Returns‚Äã  Promise&lt;object&gt;  Promise resolving to page information  title‚Äã  title: string  description‚Äã  description: string  content‚Äã  content: string  metadata‚Äã  metadata: Record&lt;string, string&gt;  images‚Äã  images: string[]  links‚Äã  links: string[]  Defined in‚Äã  packages/core/src/types/web-search.ts:138 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract Service","type":0,"sectionRef":"#","url":"/api/classes/Service","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/classes/Service#extended-by","content":" TypedServiceITokenDataServiceIWalletServiceILpServiceIPdfServiceIVideoServiceIBrowserServiceITranscriptionServiceIWebSearchServiceIEmailServiceIMessageServiceIPostService  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/classes/Service#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/classes/Service#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/classes/Service#servicetype","content":" static serviceType: string  Service type  Defined in‚Äã  packages/core/src/types/service.ts:120    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/classes/Service#capabilitydescription","content":" abstract capabilityDescription: string  Service name  Defined in‚Äã  packages/core/src/types/service.ts:123    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/classes/Service#config","content":" optional config: Metadata  Service configuration  Defined in‚Äã  packages/core/src/types/service.ts:126  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/classes/Service#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/classes/Service#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Defined in‚Äã  packages/core/src/types/service.ts:129    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/classes/Service#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Defined in‚Äã  packages/core/src/types/service.ts:134 ","version":"1.0.17","tagName":"h3"},{"title":"Class: ServiceBuilder<TService>","type":0,"sectionRef":"#","url":"/api/classes/ServiceBuilder","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/classes/ServiceBuilder#extended-by","content":" ServiceBuilder  ","version":"1.0.17","tagName":"h2"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/classes/ServiceBuilder#type-parameters","content":" ‚Ä¢ TService extends Service = Service  ","version":"1.0.17","tagName":"h2"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/classes/ServiceBuilder#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"withDescription()‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/classes/ServiceBuilder#withdescription","content":" withDescription(description): this  Set the service description  Parameters‚Äã  ‚Ä¢ description: string  Returns‚Äã  this  Defined in‚Äã  packages/core/src/services.ts:22    ","version":"1.0.17","tagName":"h3"},{"title":"withStart()‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/classes/ServiceBuilder#withstart","content":" withStart(startFn): this  Set the start function for the service  Parameters‚Äã  ‚Ä¢ startFn  Returns‚Äã  this  Defined in‚Äã  packages/core/src/services.ts:30    ","version":"1.0.17","tagName":"h3"},{"title":"withStop()‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/classes/ServiceBuilder#withstop","content":" withStop(stopFn): this  Set the stop function for the service  Parameters‚Äã  ‚Ä¢ stopFn  Returns‚Äã  this  Defined in‚Äã  packages/core/src/services.ts:38    ","version":"1.0.17","tagName":"h3"},{"title":"build()‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/classes/ServiceBuilder#build","content":" build(): Object  Build the service class with all configured properties  Returns‚Äã  Object  Defined in‚Äã  packages/core/src/services.ts:46 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: CacheKeyPrefix","type":0,"sectionRef":"#","url":"/api/enumerations/CacheKeyPrefix","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: CacheKeyPrefix","url":"/api/enumerations/CacheKeyPrefix#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"KNOWLEDGE‚Äã","type":1,"pageTitle":"Enumeration: CacheKeyPrefix","url":"/api/enumerations/CacheKeyPrefix#knowledge","content":" KNOWLEDGE: &quot;knowledge&quot;  Defined in‚Äã  packages/core/src/types/knowledge.ts:38 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: EventType","type":0,"sectionRef":"#","url":"/api/enumerations/EventType","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"WORLD_JOINED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#world_joined","content":" WORLD_JOINED: &quot;WORLD_JOINED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:13    ","version":"1.0.17","tagName":"h3"},{"title":"WORLD_CONNECTED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#world_connected","content":" WORLD_CONNECTED: &quot;WORLD_CONNECTED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:14    ","version":"1.0.17","tagName":"h3"},{"title":"WORLD_LEFT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#world_left","content":" WORLD_LEFT: &quot;WORLD_LEFT&quot;  Defined in‚Äã  packages/core/src/types/events.ts:15    ","version":"1.0.17","tagName":"h3"},{"title":"ENTITY_JOINED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#entity_joined","content":" ENTITY_JOINED: &quot;ENTITY_JOINED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:18    ","version":"1.0.17","tagName":"h3"},{"title":"ENTITY_LEFT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#entity_left","content":" ENTITY_LEFT: &quot;ENTITY_LEFT&quot;  Defined in‚Äã  packages/core/src/types/events.ts:19    ","version":"1.0.17","tagName":"h3"},{"title":"ENTITY_UPDATED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#entity_updated","content":" ENTITY_UPDATED: &quot;ENTITY_UPDATED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:20    ","version":"1.0.17","tagName":"h3"},{"title":"ROOM_JOINED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#room_joined","content":" ROOM_JOINED: &quot;ROOM_JOINED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:23    ","version":"1.0.17","tagName":"h3"},{"title":"ROOM_LEFT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#room_left","content":" ROOM_LEFT: &quot;ROOM_LEFT&quot;  Defined in‚Äã  packages/core/src/types/events.ts:24    ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE_RECEIVED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#message_received","content":" MESSAGE_RECEIVED: &quot;MESSAGE_RECEIVED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:27    ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE_SENT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#message_sent","content":" MESSAGE_SENT: &quot;MESSAGE_SENT&quot;  Defined in‚Äã  packages/core/src/types/events.ts:28    ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE_DELETED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#message_deleted","content":" MESSAGE_DELETED: &quot;MESSAGE_DELETED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:29    ","version":"1.0.17","tagName":"h3"},{"title":"CHANNEL_CLEARED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#channel_cleared","content":" CHANNEL_CLEARED: &quot;CHANNEL_CLEARED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:32    ","version":"1.0.17","tagName":"h3"},{"title":"VOICE_MESSAGE_RECEIVED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#voice_message_received","content":" VOICE_MESSAGE_RECEIVED: &quot;VOICE_MESSAGE_RECEIVED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:35    ","version":"1.0.17","tagName":"h3"},{"title":"VOICE_MESSAGE_SENT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#voice_message_sent","content":" VOICE_MESSAGE_SENT: &quot;VOICE_MESSAGE_SENT&quot;  Defined in‚Äã  packages/core/src/types/events.ts:36    ","version":"1.0.17","tagName":"h3"},{"title":"REACTION_RECEIVED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#reaction_received","content":" REACTION_RECEIVED: &quot;REACTION_RECEIVED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:39    ","version":"1.0.17","tagName":"h3"},{"title":"POST_GENERATED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#post_generated","content":" POST_GENERATED: &quot;POST_GENERATED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:40    ","version":"1.0.17","tagName":"h3"},{"title":"INTERACTION_RECEIVED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#interaction_received","content":" INTERACTION_RECEIVED: &quot;INTERACTION_RECEIVED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:41    ","version":"1.0.17","tagName":"h3"},{"title":"RUN_STARTED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#run_started","content":" RUN_STARTED: &quot;RUN_STARTED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:44    ","version":"1.0.17","tagName":"h3"},{"title":"RUN_ENDED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#run_ended","content":" RUN_ENDED: &quot;RUN_ENDED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:45    ","version":"1.0.17","tagName":"h3"},{"title":"RUN_TIMEOUT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#run_timeout","content":" RUN_TIMEOUT: &quot;RUN_TIMEOUT&quot;  Defined in‚Äã  packages/core/src/types/events.ts:46    ","version":"1.0.17","tagName":"h3"},{"title":"ACTION_STARTED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#action_started","content":" ACTION_STARTED: &quot;ACTION_STARTED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:49    ","version":"1.0.17","tagName":"h3"},{"title":"ACTION_COMPLETED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#action_completed","content":" ACTION_COMPLETED: &quot;ACTION_COMPLETED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:50    ","version":"1.0.17","tagName":"h3"},{"title":"EVALUATOR_STARTED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#evaluator_started","content":" EVALUATOR_STARTED: &quot;EVALUATOR_STARTED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:53    ","version":"1.0.17","tagName":"h3"},{"title":"EVALUATOR_COMPLETED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#evaluator_completed","content":" EVALUATOR_COMPLETED: &quot;EVALUATOR_COMPLETED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:54    ","version":"1.0.17","tagName":"h3"},{"title":"MODEL_USED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/enumerations/EventType#model_used","content":" MODEL_USED: &quot;MODEL_USED&quot;  Defined in‚Äã  packages/core/src/types/events.ts:57 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: KnowledgeScope","type":0,"sectionRef":"#","url":"/api/enumerations/KnowledgeScope","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: KnowledgeScope","url":"/api/enumerations/KnowledgeScope#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"SHARED‚Äã","type":1,"pageTitle":"Enumeration: KnowledgeScope","url":"/api/enumerations/KnowledgeScope#shared","content":" SHARED: &quot;shared&quot;  Defined in‚Äã  packages/core/src/types/knowledge.ts:27    ","version":"1.0.17","tagName":"h3"},{"title":"PRIVATE‚Äã","type":1,"pageTitle":"Enumeration: KnowledgeScope","url":"/api/enumerations/KnowledgeScope#private","content":" PRIVATE: &quot;private&quot;  Defined in‚Äã  packages/core/src/types/knowledge.ts:28 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: MemoryType","type":0,"sectionRef":"#","url":"/api/enumerations/MemoryType","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/enumerations/MemoryType#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"DOCUMENT‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/enumerations/MemoryType#document","content":" DOCUMENT: &quot;document&quot;  Defined in‚Äã  packages/core/src/types/memory.ts:18    ","version":"1.0.17","tagName":"h3"},{"title":"FRAGMENT‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/enumerations/MemoryType#fragment","content":" FRAGMENT: &quot;fragment&quot;  Defined in‚Äã  packages/core/src/types/memory.ts:19    ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/enumerations/MemoryType#message","content":" MESSAGE: &quot;message&quot;  Defined in‚Äã  packages/core/src/types/memory.ts:20    ","version":"1.0.17","tagName":"h3"},{"title":"DESCRIPTION‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/enumerations/MemoryType#description","content":" DESCRIPTION: &quot;description&quot;  Defined in‚Äã  packages/core/src/types/memory.ts:21    ","version":"1.0.17","tagName":"h3"},{"title":"CUSTOM‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/enumerations/MemoryType#custom","content":" CUSTOM: &quot;custom&quot;  Defined in‚Äã  packages/core/src/types/memory.ts:22 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: PlatformPrefix","type":0,"sectionRef":"#","url":"/api/enumerations/PlatformPrefix","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: PlatformPrefix","url":"/api/enumerations/PlatformPrefix#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"DISCORD‚Äã","type":1,"pageTitle":"Enumeration: PlatformPrefix","url":"/api/enumerations/PlatformPrefix#discord","content":" DISCORD: &quot;DISCORD&quot;  Defined in‚Äã  packages/core/src/types/events.ts:64    ","version":"1.0.17","tagName":"h3"},{"title":"TELEGRAM‚Äã","type":1,"pageTitle":"Enumeration: PlatformPrefix","url":"/api/enumerations/PlatformPrefix#telegram","content":" TELEGRAM: &quot;TELEGRAM&quot;  Defined in‚Äã  packages/core/src/types/events.ts:65    ","version":"1.0.17","tagName":"h3"},{"title":"TWITTER‚Äã","type":1,"pageTitle":"Enumeration: PlatformPrefix","url":"/api/enumerations/PlatformPrefix#twitter","content":" TWITTER: &quot;TWITTER&quot;  Defined in‚Äã  packages/core/src/types/events.ts:66 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: Role","type":0,"sectionRef":"#","url":"/api/enumerations/Role","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: Role","url":"/api/enumerations/Role#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"OWNER‚Äã","type":1,"pageTitle":"Enumeration: Role","url":"/api/enumerations/Role#owner","content":" OWNER: &quot;OWNER&quot;  Defined in‚Äã  packages/core/src/types/environment.ts:43    ","version":"1.0.17","tagName":"h3"},{"title":"ADMIN‚Äã","type":1,"pageTitle":"Enumeration: Role","url":"/api/enumerations/Role#admin","content":" ADMIN: &quot;ADMIN&quot;  Defined in‚Äã  packages/core/src/types/environment.ts:44    ","version":"1.0.17","tagName":"h3"},{"title":"NONE‚Äã","type":1,"pageTitle":"Enumeration: Role","url":"/api/enumerations/Role#none","content":" NONE: &quot;NONE&quot;  Defined in‚Äã  packages/core/src/types/environment.ts:45 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: TEEMode","type":0,"sectionRef":"#","url":"/api/enumerations/TEEMode","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/enumerations/TEEMode#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"OFF‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/enumerations/TEEMode#off","content":" OFF: &quot;OFF&quot;  TEE functionality is completely disabled.  Defined in‚Äã  packages/core/src/types/tee.ts:35    ","version":"1.0.17","tagName":"h3"},{"title":"LOCAL‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/enumerations/TEEMode#local","content":" LOCAL: &quot;LOCAL&quot;  For local development, potentially using a TEE simulator.  Defined in‚Äã  packages/core/src/types/tee.ts:37    ","version":"1.0.17","tagName":"h3"},{"title":"DOCKER‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/enumerations/TEEMode#docker","content":" DOCKER: &quot;DOCKER&quot;  For Docker-based development environments, possibly with a TEE simulator.  Defined in‚Äã  packages/core/src/types/tee.ts:39    ","version":"1.0.17","tagName":"h3"},{"title":"PRODUCTION‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/enumerations/TEEMode#production","content":" PRODUCTION: &quot;PRODUCTION&quot;  For production deployments, using actual TEE hardware without a simulator.  Defined in‚Äã  packages/core/src/types/tee.ts:41 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: TeeType","type":0,"sectionRef":"#","url":"/api/enumerations/TeeType","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: TeeType","url":"/api/enumerations/TeeType#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"TDX_DSTACK‚Äã","type":1,"pageTitle":"Enumeration: TeeType","url":"/api/enumerations/TeeType#tdx_dstack","content":" TDX_DSTACK: &quot;tdx_dstack&quot;  Represents Intel Trusted Domain Extensions (TDX) running on DSTACK infrastructure.  Defined in‚Äã  packages/core/src/types/tee.ts:94 ","version":"1.0.17","tagName":"h3"},{"title":"Function: addHeader()","type":0,"sectionRef":"#","url":"/api/functions/addHeader","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: addHeader()","url":"/api/functions/addHeader#parameters","content":" ‚Ä¢ header: string  The header to add to the body.  ‚Ä¢ body: string  The body to which to add the header.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: addHeader()","url":"/api/functions/addHeader#returns","content":" string  The body with the header prepended.  ","version":"1.0.17","tagName":"h2"},{"title":"Example‚Äã","type":1,"pageTitle":"Function: addHeader()","url":"/api/functions/addHeader#example","content":" // Given a header and a body const header = &quot;Header&quot;; const body = &quot;Body&quot;; // Adding the header to the body will result in: // &quot;Header\\nBody&quot; const text = addHeader(header, body);   ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: addHeader()","url":"/api/functions/addHeader#defined-in","content":" packages/core/src/utils.ts:145 ","version":"1.0.17","tagName":"h2"},{"title":"Function: asUUID()","type":0,"sectionRef":"#","url":"/api/functions/asUUID","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/functions/asUUID#parameters","content":" ‚Ä¢ id: string  The string UUID to validate and cast  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/functions/asUUID#returns","content":" `${string}-${string}-${string}-${string}-${string}`  The same UUID with branded type information  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/functions/asUUID#defined-in","content":" packages/core/src/types/primitives.ts:11 ","version":"1.0.17","tagName":"h2"},{"title":"Function: composeActionExamples()","type":0,"sectionRef":"#","url":"/api/functions/composeActionExamples","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: composeActionExamples()","url":"/api/functions/composeActionExamples#parameters","content":" ‚Ä¢ actionsData: Action[]  An array of Action objects from which to draw examples.  ‚Ä¢ count: number  The number of examples to generate.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: composeActionExamples()","url":"/api/functions/composeActionExamples#returns","content":" string  A string containing formatted examples of conversations.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: composeActionExamples()","url":"/api/functions/composeActionExamples#defined-in","content":" packages/core/src/actions.ts:12 ","version":"1.0.17","tagName":"h2"},{"title":"Function: composePrompt()","type":0,"sectionRef":"#","url":"/api/functions/composePrompt","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: composePrompt()","url":"/api/functions/composePrompt#parameters","content":" ‚Ä¢ options  Object containing state and template information.  ‚Ä¢ options.state  The state object containing values to fill the template.  ‚Ä¢ options.template: TemplateType  The template string or function to be used for composing the prompt.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: composePrompt()","url":"/api/functions/composePrompt#returns","content":" string  The composed prompt output, with state values and random user names populated.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: composePrompt()","url":"/api/functions/composePrompt#defined-in","content":" packages/core/src/utils.ts:80 ","version":"1.0.17","tagName":"h2"},{"title":"Function: composePromptFromState()","type":0,"sectionRef":"#","url":"/api/functions/composePromptFromState","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: composePromptFromState()","url":"/api/functions/composePromptFromState#parameters","content":" ‚Ä¢ options  Object containing state and template information.  ‚Ä¢ options.state: State  The state object containing values to fill the template.  ‚Ä¢ options.template: TemplateType  The template to be used for composing the prompt.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: composePromptFromState()","url":"/api/functions/composePromptFromState#returns","content":" string  The composed prompt output.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: composePromptFromState()","url":"/api/functions/composePromptFromState#defined-in","content":" packages/core/src/utils.ts:101 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createActionResult()","type":0,"sectionRef":"#","url":"/api/functions/createActionResult","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createActionResult()","url":"/api/functions/createActionResult#parameters","content":" ‚Ä¢ partial: Partial&lt;ActionResult&gt; = {}  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createActionResult()","url":"/api/functions/createActionResult#returns","content":" ActionResult  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createActionResult()","url":"/api/functions/createActionResult#defined-in","content":" packages/core/src/types/components.ts:179 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createMessageMemory()","type":0,"sectionRef":"#","url":"/api/functions/createMessageMemory","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createMessageMemory()","url":"/api/functions/createMessageMemory#parameters","content":" ‚Ä¢ params  ‚Ä¢ params.id?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.agentId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.content: Content &amp; object  ‚Ä¢ params.embedding?: number[]  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createMessageMemory()","url":"/api/functions/createMessageMemory#returns","content":" MessageMemory  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createMessageMemory()","url":"/api/functions/createMessageMemory#defined-in","content":" packages/core/src/types/memory.ts:133 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createService()","type":0,"sectionRef":"#","url":"/api/functions/createService","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Function: createService()","url":"/api/functions/createService#type-parameters","content":" ‚Ä¢ TService extends Service = Service  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createService()","url":"/api/functions/createService#parameters","content":" ‚Ä¢ serviceType: string  The service type name  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createService()","url":"/api/functions/createService#returns","content":" ServiceBuilder&lt;TService&gt;  A new ServiceBuilder instance  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createService()","url":"/api/functions/createService#defined-in","content":" packages/core/src/services.ts:78 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createServiceError()","type":0,"sectionRef":"#","url":"/api/functions/createServiceError","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createServiceError()","url":"/api/functions/createServiceError#parameters","content":" ‚Ä¢ error: unknown  ‚Ä¢ code: string = 'UNKNOWN_ERROR'  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createServiceError()","url":"/api/functions/createServiceError#returns","content":" ServiceError  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createServiceError()","url":"/api/functions/createServiceError#defined-in","content":" packages/core/src/types/service.ts:185 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createSettingFromConfig()","type":0,"sectionRef":"#","url":"/api/functions/createSettingFromConfig","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createSettingFromConfig()","url":"/api/functions/createSettingFromConfig#parameters","content":" ‚Ä¢ configSetting: Omit&lt;Setting, &quot;value&quot;&gt;  The configSetting object to create the Setting from.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createSettingFromConfig()","url":"/api/functions/createSettingFromConfig#returns","content":" Setting  A new Setting object created from the provided configSetting object.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createSettingFromConfig()","url":"/api/functions/createSettingFromConfig#defined-in","content":" packages/core/src/settings.ts:24 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createUniqueUuid()","type":0,"sectionRef":"#","url":"/api/functions/createUniqueUuid","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createUniqueUuid()","url":"/api/functions/createUniqueUuid#parameters","content":" ‚Ä¢ runtime: any  The runtime context object.  ‚Ä¢ baseUserId: string  The base user ID to use in generating the UUID.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createUniqueUuid()","url":"/api/functions/createUniqueUuid#returns","content":" `${string}-${string}-${string}-${string}-${string}`  The unique UUID generated based on the runtime and base user ID.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createUniqueUuid()","url":"/api/functions/createUniqueUuid#defined-in","content":" packages/core/src/entities.ts:307 ","version":"1.0.17","tagName":"h2"},{"title":"Function: decryptedCharacter()","type":0,"sectionRef":"#","url":"/api/functions/decryptedCharacter","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: decryptedCharacter()","url":"/api/functions/decryptedCharacter#parameters","content":" ‚Ä¢ character: Character  The character object with encrypted secrets  ‚Ä¢ _runtime: IAgentRuntime  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: decryptedCharacter()","url":"/api/functions/decryptedCharacter#returns","content":" Character  A copy of the character with decrypted secrets  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: decryptedCharacter()","url":"/api/functions/decryptedCharacter#defined-in","content":" packages/core/src/settings.ts:356 ","version":"1.0.17","tagName":"h2"},{"title":"Function: decryptObjectValues()","type":0,"sectionRef":"#","url":"/api/functions/decryptObjectValues","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: decryptObjectValues()","url":"/api/functions/decryptObjectValues#parameters","content":" ‚Ä¢ obj: Record&lt;string, any&gt;  Object with encrypted values  ‚Ä¢ salt: string  The salt to use for decryption  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: decryptObjectValues()","url":"/api/functions/decryptObjectValues#returns","content":" Record&lt;string, any&gt;  Object with decrypted values  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: decryptObjectValues()","url":"/api/functions/decryptObjectValues#defined-in","content":" packages/core/src/settings.ts:400 ","version":"1.0.17","tagName":"h2"},{"title":"Function: decryptStringValue()","type":0,"sectionRef":"#","url":"/api/functions/decryptStringValue","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: decryptStringValue()","url":"/api/functions/decryptStringValue#parameters","content":" ‚Ä¢ value: string  The encrypted value in 'iv:encrypted' format  ‚Ä¢ salt: string  The salt to use for decryption  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: decryptStringValue()","url":"/api/functions/decryptStringValue#returns","content":" string  The decrypted string value  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: decryptStringValue()","url":"/api/functions/decryptStringValue#defined-in","content":" packages/core/src/settings.ts:119 ","version":"1.0.17","tagName":"h2"},{"title":"Function: defineService()","type":0,"sectionRef":"#","url":"/api/functions/defineService","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Function: defineService()","url":"/api/functions/defineService#type-parameters","content":" ‚Ä¢ T extends Service = Service  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: defineService()","url":"/api/functions/defineService#parameters","content":" ‚Ä¢ definition: ServiceDefinition&lt;T&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: defineService()","url":"/api/functions/defineService#returns","content":" Object  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: defineService()","url":"/api/functions/defineService#defined-in","content":" packages/core/src/services.ts:97 ","version":"1.0.17","tagName":"h2"},{"title":"Function: encryptedCharacter()","type":0,"sectionRef":"#","url":"/api/functions/encryptedCharacter","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: encryptedCharacter()","url":"/api/functions/encryptedCharacter#parameters","content":" ‚Ä¢ character: Character  The character object to encrypt secrets for  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: encryptedCharacter()","url":"/api/functions/encryptedCharacter#returns","content":" Character  A copy of the character with encrypted secrets  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: encryptedCharacter()","url":"/api/functions/encryptedCharacter#defined-in","content":" packages/core/src/settings.ts:332 ","version":"1.0.17","tagName":"h2"},{"title":"Function: encryptObjectValues()","type":0,"sectionRef":"#","url":"/api/functions/encryptObjectValues","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: encryptObjectValues()","url":"/api/functions/encryptObjectValues#parameters","content":" ‚Ä¢ obj: Record&lt;string, any&gt;  Object with values to encrypt  ‚Ä¢ salt: string  The salt to use for encryption  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: encryptObjectValues()","url":"/api/functions/encryptObjectValues#returns","content":" Record&lt;string, any&gt;  Object with encrypted values  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: encryptObjectValues()","url":"/api/functions/encryptObjectValues#defined-in","content":" packages/core/src/settings.ts:380 ","version":"1.0.17","tagName":"h2"},{"title":"Function: encryptStringValue()","type":0,"sectionRef":"#","url":"/api/functions/encryptStringValue","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: encryptStringValue()","url":"/api/functions/encryptStringValue#parameters","content":" ‚Ä¢ value: string  The string value to encrypt  ‚Ä¢ salt: string  The salt to use for encryption  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: encryptStringValue()","url":"/api/functions/encryptStringValue#returns","content":" string  The encrypted value in 'iv:encrypted' format  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: encryptStringValue()","url":"/api/functions/encryptStringValue#defined-in","content":" packages/core/src/settings.ts:67 ","version":"1.0.17","tagName":"h2"},{"title":"Function: findEntityByName()","type":0,"sectionRef":"#","url":"/api/functions/findEntityByName","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: findEntityByName()","url":"/api/functions/findEntityByName#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  The agent runtime environment.  ‚Ä¢ message: Memory  The memory message containing relevant information.  ‚Ä¢ state: State  The current state of the system.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: findEntityByName()","url":"/api/functions/findEntityByName#returns","content":" Promise&lt;Entity&gt;  A promise that resolves to the found entity or null if not found.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: findEntityByName()","url":"/api/functions/findEntityByName#defined-in","content":" packages/core/src/entities.ts:137 ","version":"1.0.17","tagName":"h2"},{"title":"Function: findWorldsForOwner()","type":0,"sectionRef":"#","url":"/api/functions/findWorldsForOwner","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: findWorldsForOwner()","url":"/api/functions/findWorldsForOwner#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ entityId: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: findWorldsForOwner()","url":"/api/functions/findWorldsForOwner#returns","content":" Promise&lt;World[]&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: findWorldsForOwner()","url":"/api/functions/findWorldsForOwner#defined-in","content":" packages/core/src/roles.ts:59 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatActionNames()","type":0,"sectionRef":"#","url":"/api/functions/formatActionNames","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatActionNames()","url":"/api/functions/formatActionNames#parameters","content":" ‚Ä¢ actions: Action[]  An array of Action objects from which to extract names.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatActionNames()","url":"/api/functions/formatActionNames#returns","content":" string  A comma-separated string of action names.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatActionNames()","url":"/api/functions/formatActionNames#defined-in","content":" packages/core/src/actions.ts:99 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatActions()","type":0,"sectionRef":"#","url":"/api/functions/formatActions","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatActions()","url":"/api/functions/formatActions#parameters","content":" ‚Ä¢ actions: Action[]  An array of Action objects to format.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatActions()","url":"/api/functions/formatActions#returns","content":" string  A detailed string of actions, including names and descriptions.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatActions()","url":"/api/functions/formatActions#defined-in","content":" packages/core/src/actions.ts:114 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatEntities()","type":0,"sectionRef":"#","url":"/api/functions/formatEntities","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatEntities()","url":"/api/functions/formatEntities#parameters","content":" ‚Ä¢ options  The options object.  ‚Ä¢ options.entities: Entity[]  The list of entities to format.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatEntities()","url":"/api/functions/formatEntities#returns","content":" string  A formatted string representing the entities.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatEntities()","url":"/api/functions/formatEntities#defined-in","content":" packages/core/src/entities.ts:400 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatMessages()","type":0,"sectionRef":"#","url":"/api/functions/formatMessages","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatMessages()","url":"/api/functions/formatMessages#parameters","content":" ‚Ä¢ params  The formatting parameters  ‚Ä¢ params.messages: Memory[]  List of messages to format  ‚Ä¢ params.entities: Entity[]  List of entities for name resolution  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatMessages()","url":"/api/functions/formatMessages#returns","content":" string  Formatted message string with timestamps and user information  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatMessages()","url":"/api/functions/formatMessages#defined-in","content":" packages/core/src/utils.ts:246 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getEntityDetails()","type":0,"sectionRef":"#","url":"/api/functions/getEntityDetails","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getEntityDetails()","url":"/api/functions/getEntityDetails#parameters","content":" ‚Ä¢ params  The input parameters  ‚Ä¢ params.runtime: IAgentRuntime  The Agent Runtime instance  ‚Ä¢ params.roomId: `${string}-${string}-${string}-${string}-${string}`  The ID of the room to retrieve entity details for  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getEntityDetails()","url":"/api/functions/getEntityDetails#returns","content":" Promise&lt;any[]&gt;  A promise that resolves to an array of unique entity details  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getEntityDetails()","url":"/api/functions/getEntityDetails#defined-in","content":" packages/core/src/entities.ts:332 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getMemoryText()","type":0,"sectionRef":"#","url":"/api/functions/getMemoryText","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getMemoryText()","url":"/api/functions/getMemoryText#parameters","content":" ‚Ä¢ memory: Memory  The memory to extract text from  ‚Ä¢ defaultValue: string = ''  Optional default value if no text is found  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getMemoryText()","url":"/api/functions/getMemoryText#returns","content":" string  The text content or default value  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getMemoryText()","url":"/api/functions/getMemoryText#defined-in","content":" packages/core/src/types/memory.ts:226 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getSalt()","type":0,"sectionRef":"#","url":"/api/functions/getSalt","content":"","keywords":"","version":"1.0.17"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getSalt()","url":"/api/functions/getSalt#returns","content":" string  The salt for the agent.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getSalt()","url":"/api/functions/getSalt#defined-in","content":" packages/core/src/settings.ts:45 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getTypedService()","type":0,"sectionRef":"#","url":"/api/functions/getTypedService","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Function: getTypedService()","url":"/api/functions/getTypedService#type-parameters","content":" ‚Ä¢ T extends TypedService&lt;any, any&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getTypedService()","url":"/api/functions/getTypedService#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  The agent runtime  ‚Ä¢ serviceType: ServiceTypeName  The type of service to get  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getTypedService()","url":"/api/functions/getTypedService#returns","content":" T  The service instance or null if not available  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getTypedService()","url":"/api/functions/getTypedService#defined-in","content":" packages/core/src/types/service.ts:165 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getUserServerRole()","type":0,"sectionRef":"#","url":"/api/functions/getUserServerRole","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getUserServerRole()","url":"/api/functions/getUserServerRole#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  The runtime object containing necessary configurations and services.  ‚Ä¢ entityId: string  The unique identifier of the user entity.  ‚Ä¢ serverId: string  The unique identifier of the server.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getUserServerRole()","url":"/api/functions/getUserServerRole#returns","content":" Promise&lt;Role&gt;  The role of the user entity within the server, resolved as a Promise.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getUserServerRole()","url":"/api/functions/getUserServerRole#defined-in","content":" packages/core/src/roles.ts:32 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getWorldSettings()","type":0,"sectionRef":"#","url":"/api/functions/getWorldSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getWorldSettings()","url":"/api/functions/getWorldSettings#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ serverId: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getWorldSettings()","url":"/api/functions/getWorldSettings#returns","content":" Promise&lt;WorldSettings&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getWorldSettings()","url":"/api/functions/getWorldSettings#defined-in","content":" packages/core/src/settings.ts:267 ","version":"1.0.17","tagName":"h2"},{"title":"Function: initializeOnboarding()","type":0,"sectionRef":"#","url":"/api/functions/initializeOnboarding","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: initializeOnboarding()","url":"/api/functions/initializeOnboarding#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ world: World  ‚Ä¢ config: OnboardingConfig  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: initializeOnboarding()","url":"/api/functions/initializeOnboarding#returns","content":" Promise&lt;WorldSettings&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: initializeOnboarding()","url":"/api/functions/initializeOnboarding#defined-in","content":" packages/core/src/settings.ts:289 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isCustomMetadata()","type":0,"sectionRef":"#","url":"/api/functions/isCustomMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isCustomMetadata()","url":"/api/functions/isCustomMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isCustomMetadata()","url":"/api/functions/isCustomMetadata#returns","content":" metadata is CustomMetadata  True if the metadata is a CustomMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isCustomMetadata()","url":"/api/functions/isCustomMetadata#defined-in","content":" packages/core/src/types/memory.ts:193 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isDescriptionMetadata()","type":0,"sectionRef":"#","url":"/api/functions/isDescriptionMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isDescriptionMetadata()","url":"/api/functions/isDescriptionMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isDescriptionMetadata()","url":"/api/functions/isDescriptionMetadata#returns","content":" metadata is DescriptionMetadata  True if the metadata is a DescriptionMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isDescriptionMetadata()","url":"/api/functions/isDescriptionMetadata#defined-in","content":" packages/core/src/types/memory.ts:184 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isDocumentMemory()","type":0,"sectionRef":"#","url":"/api/functions/isDocumentMemory","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isDocumentMemory()","url":"/api/functions/isDocumentMemory#parameters","content":" ‚Ä¢ memory: Memory  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isDocumentMemory()","url":"/api/functions/isDocumentMemory#returns","content":" memory is Memory &amp; { metadata: DocumentMetadata }  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isDocumentMemory()","url":"/api/functions/isDocumentMemory#defined-in","content":" packages/core/src/types/memory.ts:205 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isDocumentMetadata()","type":0,"sectionRef":"#","url":"/api/functions/isDocumentMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isDocumentMetadata()","url":"/api/functions/isDocumentMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isDocumentMetadata()","url":"/api/functions/isDocumentMetadata#returns","content":" metadata is DocumentMetadata  True if the metadata is a DocumentMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isDocumentMetadata()","url":"/api/functions/isDocumentMetadata#defined-in","content":" packages/core/src/types/memory.ts:157 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isFragmentMemory()","type":0,"sectionRef":"#","url":"/api/functions/isFragmentMemory","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isFragmentMemory()","url":"/api/functions/isFragmentMemory#parameters","content":" ‚Ä¢ memory: Memory  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isFragmentMemory()","url":"/api/functions/isFragmentMemory#returns","content":" memory is Memory &amp; { metadata: FragmentMetadata }  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isFragmentMemory()","url":"/api/functions/isFragmentMemory#defined-in","content":" packages/core/src/types/memory.ts:214 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isFragmentMetadata()","type":0,"sectionRef":"#","url":"/api/functions/isFragmentMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isFragmentMetadata()","url":"/api/functions/isFragmentMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isFragmentMetadata()","url":"/api/functions/isFragmentMetadata#returns","content":" metadata is FragmentMetadata  True if the metadata is a FragmentMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isFragmentMetadata()","url":"/api/functions/isFragmentMetadata#defined-in","content":" packages/core/src/types/memory.ts:166 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isMessageMetadata()","type":0,"sectionRef":"#","url":"/api/functions/isMessageMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isMessageMetadata()","url":"/api/functions/isMessageMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isMessageMetadata()","url":"/api/functions/isMessageMetadata#returns","content":" metadata is MessageMetadata  True if the metadata is a MessageMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isMessageMetadata()","url":"/api/functions/isMessageMetadata#defined-in","content":" packages/core/src/types/memory.ts:175 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isValidCharacter()","type":0,"sectionRef":"#","url":"/api/functions/isValidCharacter","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isValidCharacter()","url":"/api/functions/isValidCharacter#parameters","content":" ‚Ä¢ data: unknown  Data to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isValidCharacter()","url":"/api/functions/isValidCharacter#returns","content":" data is Character  True if data is a valid Character  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isValidCharacter()","url":"/api/functions/isValidCharacter#defined-in","content":" packages/core/src/schemas/character.ts:147 ","version":"1.0.17","tagName":"h2"},{"title":"Function: normalizeJsonString()","type":0,"sectionRef":"#","url":"/api/functions/normalizeJsonString","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: normalizeJsonString()","url":"/api/functions/normalizeJsonString#parameters","content":" ‚Ä¢ str: string  The JSON-like string to normalize.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: normalizeJsonString()","url":"/api/functions/normalizeJsonString#returns","content":" string  A properly formatted JSON string.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: normalizeJsonString()","url":"/api/functions/normalizeJsonString#defined-in","content":" packages/core/src/utils.ts:467 ","version":"1.0.17","tagName":"h2"},{"title":"Function: parseAndValidateCharacter()","type":0,"sectionRef":"#","url":"/api/functions/parseAndValidateCharacter","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: parseAndValidateCharacter()","url":"/api/functions/parseAndValidateCharacter#parameters","content":" ‚Ä¢ jsonString: string  JSON string to parse and validate  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: parseAndValidateCharacter()","url":"/api/functions/parseAndValidateCharacter#returns","content":" CharacterValidationResult  Validation result with success flag and either data or error  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: parseAndValidateCharacter()","url":"/api/functions/parseAndValidateCharacter#defined-in","content":" packages/core/src/schemas/character.ts:128 ","version":"1.0.17","tagName":"h2"},{"title":"Function: parseBooleanFromText()","type":0,"sectionRef":"#","url":"/api/functions/parseBooleanFromText","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: parseBooleanFromText()","url":"/api/functions/parseBooleanFromText#parameters","content":" ‚Ä¢ value: string  The input text to parse  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: parseBooleanFromText()","url":"/api/functions/parseBooleanFromText#returns","content":" boolean  Returns true for affirmative inputs, false for negative or unrecognized inputs  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: parseBooleanFromText()","url":"/api/functions/parseBooleanFromText#defined-in","content":" packages/core/src/utils.ts:595 ","version":"1.0.17","tagName":"h2"},{"title":"Function: parseJSONObjectFromText()","type":0,"sectionRef":"#","url":"/api/functions/parseJSONObjectFromText","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: parseJSONObjectFromText()","url":"/api/functions/parseJSONObjectFromText#parameters","content":" ‚Ä¢ text: string  The input text from which to extract and parse the JSON object.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: parseJSONObjectFromText()","url":"/api/functions/parseJSONObjectFromText#returns","content":" Record&lt;string, any&gt;  An object parsed from the JSON string if successful; otherwise, null or the result of parsing an array.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: parseJSONObjectFromText()","url":"/api/functions/parseJSONObjectFromText#defined-in","content":" packages/core/src/utils.ts:426 ","version":"1.0.17","tagName":"h2"},{"title":"Function: parseKeyValueXml()","type":0,"sectionRef":"#","url":"/api/functions/parseKeyValueXml","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: parseKeyValueXml()","url":"/api/functions/parseKeyValueXml#parameters","content":" ‚Ä¢ text: string  The input text containing the XML structure.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: parseKeyValueXml()","url":"/api/functions/parseKeyValueXml#returns","content":" Record&lt;string, any&gt;  An object with key-value pairs extracted from the XML, or null if parsing fails.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: parseKeyValueXml()","url":"/api/functions/parseKeyValueXml#defined-in","content":" packages/core/src/utils.ts:350 ","version":"1.0.17","tagName":"h2"},{"title":"Function: saltSettingValue()","type":0,"sectionRef":"#","url":"/api/functions/saltSettingValue","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: saltSettingValue()","url":"/api/functions/saltSettingValue#parameters","content":" ‚Ä¢ setting: Setting  ‚Ä¢ salt: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: saltSettingValue()","url":"/api/functions/saltSettingValue#returns","content":" Setting  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: saltSettingValue()","url":"/api/functions/saltSettingValue#defined-in","content":" packages/core/src/settings.ts:178 ","version":"1.0.17","tagName":"h2"},{"title":"Function: saltWorldSettings()","type":0,"sectionRef":"#","url":"/api/functions/saltWorldSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: saltWorldSettings()","url":"/api/functions/saltWorldSettings#parameters","content":" ‚Ä¢ worldSettings: WorldSettings  ‚Ä¢ salt: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: saltWorldSettings()","url":"/api/functions/saltWorldSettings#returns","content":" WorldSettings  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: saltWorldSettings()","url":"/api/functions/saltWorldSettings#defined-in","content":" packages/core/src/settings.ts:207 ","version":"1.0.17","tagName":"h2"},{"title":"Function: stringToUuid()","type":0,"sectionRef":"#","url":"/api/functions/stringToUuid","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: stringToUuid()","url":"/api/functions/stringToUuid#parameters","content":" ‚Ä¢ target: string | number  The string or number to convert to a UUID.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: stringToUuid()","url":"/api/functions/stringToUuid#returns","content":" `${string}-${string}-${string}-${string}-${string}`  The UUID generated from the input target.  ","version":"1.0.17","tagName":"h2"},{"title":"Throws‚Äã","type":1,"pageTitle":"Function: stringToUuid()","url":"/api/functions/stringToUuid#throws","content":" Throws an error if the input target is not a string.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: stringToUuid()","url":"/api/functions/stringToUuid#defined-in","content":" packages/core/src/utils.ts:636 ","version":"1.0.17","tagName":"h2"},{"title":"Function: trimTokens()","type":0,"sectionRef":"#","url":"/api/functions/trimTokens","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: trimTokens()","url":"/api/functions/trimTokens#parameters","content":" ‚Ä¢ prompt: string  ‚Ä¢ maxTokens: number  ‚Ä¢ runtime: IAgentRuntime  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: trimTokens()","url":"/api/functions/trimTokens#returns","content":" Promise&lt;string&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: trimTokens()","url":"/api/functions/trimTokens#defined-in","content":" packages/core/src/utils.ts:547 ","version":"1.0.17","tagName":"h2"},{"title":"Function: truncateToCompleteSentence()","type":0,"sectionRef":"#","url":"/api/functions/truncateToCompleteSentence","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: truncateToCompleteSentence()","url":"/api/functions/truncateToCompleteSentence#parameters","content":" ‚Ä¢ text: string  ‚Ä¢ maxLength: number  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: truncateToCompleteSentence()","url":"/api/functions/truncateToCompleteSentence#returns","content":" string  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: truncateToCompleteSentence()","url":"/api/functions/truncateToCompleteSentence#defined-in","content":" packages/core/src/utils.ts:497 ","version":"1.0.17","tagName":"h2"},{"title":"Function: unsaltSettingValue()","type":0,"sectionRef":"#","url":"/api/functions/unsaltSettingValue","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: unsaltSettingValue()","url":"/api/functions/unsaltSettingValue#parameters","content":" ‚Ä¢ setting: Setting  ‚Ä¢ salt: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: unsaltSettingValue()","url":"/api/functions/unsaltSettingValue#returns","content":" Setting  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: unsaltSettingValue()","url":"/api/functions/unsaltSettingValue#defined-in","content":" packages/core/src/settings.ts:193 ","version":"1.0.17","tagName":"h2"},{"title":"Function: unsaltWorldSettings()","type":0,"sectionRef":"#","url":"/api/functions/unsaltWorldSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: unsaltWorldSettings()","url":"/api/functions/unsaltWorldSettings#parameters","content":" ‚Ä¢ worldSettings: WorldSettings  ‚Ä¢ salt: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: unsaltWorldSettings()","url":"/api/functions/unsaltWorldSettings#returns","content":" WorldSettings  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: unsaltWorldSettings()","url":"/api/functions/unsaltWorldSettings#defined-in","content":" packages/core/src/settings.ts:220 ","version":"1.0.17","tagName":"h2"},{"title":"Function: updateWorldSettings()","type":0,"sectionRef":"#","url":"/api/functions/updateWorldSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: updateWorldSettings()","url":"/api/functions/updateWorldSettings#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ serverId: string  ‚Ä¢ worldSettings: WorldSettings  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: updateWorldSettings()","url":"/api/functions/updateWorldSettings#returns","content":" Promise&lt;boolean&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: updateWorldSettings()","url":"/api/functions/updateWorldSettings#defined-in","content":" packages/core/src/settings.ts:233 ","version":"1.0.17","tagName":"h2"},{"title":"Function: validateCharacter()","type":0,"sectionRef":"#","url":"/api/functions/validateCharacter","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: validateCharacter()","url":"/api/functions/validateCharacter#parameters","content":" ‚Ä¢ data: unknown  Raw character data to validate  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: validateCharacter()","url":"/api/functions/validateCharacter#returns","content":" CharacterValidationResult  Validation result with success flag and either data or error  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: validateCharacter()","url":"/api/functions/validateCharacter#defined-in","content":" packages/core/src/schemas/character.ts:104 ","version":"1.0.17","tagName":"h2"},{"title":"Function: validateUuid()","type":0,"sectionRef":"#","url":"/api/functions/validateUuid","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: validateUuid()","url":"/api/functions/validateUuid#parameters","content":" ‚Ä¢ value: unknown  The value to validate.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: validateUuid()","url":"/api/functions/validateUuid#returns","content":" `${string}-${string}-${string}-${string}-${string}`  Returns the validated UUID value or null if validation fails.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: validateUuid()","url":"/api/functions/validateUuid#defined-in","content":" packages/core/src/utils.ts:624 ","version":"1.0.17","tagName":"h2"},{"title":"Interface: Action","type":0,"sectionRef":"#","url":"/api/interfaces/Action","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/interfaces/Action#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"similes?‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/interfaces/Action#similes","content":" optional similes: string[]  Similar action descriptions  Defined in‚Äã  packages/core/src/types/components.ts:48    ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/interfaces/Action#description","content":" description: string  Detailed description  Defined in‚Äã  packages/core/src/types/components.ts:51    ","version":"1.0.17","tagName":"h3"},{"title":"examples?‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/interfaces/Action#examples","content":" optional examples: ActionExample[][]  Example usages  Defined in‚Äã  packages/core/src/types/components.ts:54    ","version":"1.0.17","tagName":"h3"},{"title":"handler‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/interfaces/Action#handler","content":" handler: Handler  Handler function  Defined in‚Äã  packages/core/src/types/components.ts:57    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/interfaces/Action#name","content":" name: string  Action name  Defined in‚Äã  packages/core/src/types/components.ts:60    ","version":"1.0.17","tagName":"h3"},{"title":"validate‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/interfaces/Action#validate","content":" validate: Validator  Validation function  Defined in‚Äã  packages/core/src/types/components.ts:63 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ActionContext","type":0,"sectionRef":"#","url":"/api/interfaces/ActionContext","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ActionContext","url":"/api/interfaces/ActionContext#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"previousResults‚Äã","type":1,"pageTitle":"Interface: ActionContext","url":"/api/interfaces/ActionContext#previousresults","content":" previousResults: ActionResult[]  Results from previously executed actions in this run  Defined in‚Äã  packages/core/src/types/components.ts:170    ","version":"1.0.17","tagName":"h3"},{"title":"getPreviousResult()?‚Äã","type":1,"pageTitle":"Interface: ActionContext","url":"/api/interfaces/ActionContext#getpreviousresult","content":" optional getPreviousResult: (actionName) =&gt; ActionResult  Get a specific previous result by action name  Parameters‚Äã  ‚Ä¢ actionName: string  Returns‚Äã  ActionResult  Defined in‚Äã  packages/core/src/types/components.ts:173 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ActionEventPayload","type":0,"sectionRef":"#","url":"/api/interfaces/ActionEventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ActionEventPayload","url":"/api/interfaces/ActionEventPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ActionExample","type":0,"sectionRef":"#","url":"/api/interfaces/ActionExample","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ActionExample","url":"/api/interfaces/ActionExample#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: ActionExample","url":"/api/interfaces/ActionExample#name","content":" name: string  User associated with the example  Defined in‚Äã  packages/core/src/types/components.ts:11    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: ActionExample","url":"/api/interfaces/ActionExample#content","content":" content: Content  Content of the example  Defined in‚Äã  packages/core/src/types/components.ts:14 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ActionResult","type":0,"sectionRef":"#","url":"/api/interfaces/ActionResult","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ActionResult","url":"/api/interfaces/ActionResult#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"text?‚Äã","type":1,"pageTitle":"Interface: ActionResult","url":"/api/interfaces/ActionResult#text","content":" optional text: string  Optional text description of the result  Defined in‚Äã  packages/core/src/types/components.ts:149    ","version":"1.0.17","tagName":"h3"},{"title":"values?‚Äã","type":1,"pageTitle":"Interface: ActionResult","url":"/api/interfaces/ActionResult#values","content":" optional values: Record&lt;string, any&gt;  Values to merge into the state  Defined in‚Äã  packages/core/src/types/components.ts:152    ","version":"1.0.17","tagName":"h3"},{"title":"data?‚Äã","type":1,"pageTitle":"Interface: ActionResult","url":"/api/interfaces/ActionResult#data","content":" optional data: Record&lt;string, any&gt;  Data payload containing action-specific results  Defined in‚Äã  packages/core/src/types/components.ts:155    ","version":"1.0.17","tagName":"h3"},{"title":"success‚Äã","type":1,"pageTitle":"Interface: ActionResult","url":"/api/interfaces/ActionResult#success","content":" success: boolean  Whether the action succeeded - defaults to true  Defined in‚Äã  packages/core/src/types/components.ts:158    ","version":"1.0.17","tagName":"h3"},{"title":"error?‚Äã","type":1,"pageTitle":"Interface: ActionResult","url":"/api/interfaces/ActionResult#error","content":" optional error: string | Error  Error information if the action failed  Defined in‚Äã  packages/core/src/types/components.ts:161 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Agent","type":0,"sectionRef":"#","url":"/api/interfaces/Agent","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#extends","content":" Character  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Inherited from‚Äã  Character.id  Defined in‚Äã  packages/core/src/types/agent.ts:38    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#name","content":" name: string  Character name  Inherited from‚Äã  Character.name  Defined in‚Äã  packages/core/src/types/agent.ts:41    ","version":"1.0.17","tagName":"h3"},{"title":"username?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#username","content":" optional username: string  Optional username  Inherited from‚Äã  Character.username  Defined in‚Äã  packages/core/src/types/agent.ts:44    ","version":"1.0.17","tagName":"h3"},{"title":"system?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#system","content":" optional system: string  Optional system prompt  Inherited from‚Äã  Character.system  Defined in‚Äã  packages/core/src/types/agent.ts:47    ","version":"1.0.17","tagName":"h3"},{"title":"templates?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#templates","content":" optional templates: object  Optional prompt templates  Index Signature‚Äã  [key: string]: TemplateType  Inherited from‚Äã  Character.templates  Defined in‚Äã  packages/core/src/types/agent.ts:50    ","version":"1.0.17","tagName":"h3"},{"title":"bio‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#bio","content":" bio: string | string[]  Character biography  Inherited from‚Äã  Character.bio  Defined in‚Äã  packages/core/src/types/agent.ts:55    ","version":"1.0.17","tagName":"h3"},{"title":"messageExamples?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#messageexamples","content":" optional messageExamples: MessageExample[][]  Example messages  Inherited from‚Äã  Character.messageExamples  Defined in‚Äã  packages/core/src/types/agent.ts:58    ","version":"1.0.17","tagName":"h3"},{"title":"postExamples?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#postexamples","content":" optional postExamples: string[]  Example posts  Inherited from‚Äã  Character.postExamples  Defined in‚Äã  packages/core/src/types/agent.ts:61    ","version":"1.0.17","tagName":"h3"},{"title":"topics?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#topics","content":" optional topics: string[]  Known topics  Inherited from‚Äã  Character.topics  Defined in‚Äã  packages/core/src/types/agent.ts:64    ","version":"1.0.17","tagName":"h3"},{"title":"adjectives?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#adjectives","content":" optional adjectives: string[]  Character traits  Inherited from‚Äã  Character.adjectives  Defined in‚Äã  packages/core/src/types/agent.ts:67    ","version":"1.0.17","tagName":"h3"},{"title":"knowledge?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#knowledge","content":" optional knowledge: (string | DirectoryItem | object)[]  Optional knowledge base  Inherited from‚Äã  Character.knowledge  Defined in‚Äã  packages/core/src/types/agent.ts:70    ","version":"1.0.17","tagName":"h3"},{"title":"plugins?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#plugins","content":" optional plugins: string[]  Available plugins  Inherited from‚Äã  Character.plugins  Defined in‚Äã  packages/core/src/types/agent.ts:73    ","version":"1.0.17","tagName":"h3"},{"title":"settings?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#settings","content":" optional settings: object  Optional configuration  Index Signature‚Äã  [key: string]: string | number | boolean | Record&lt;string, any&gt;  Inherited from‚Äã  Character.settings  Defined in‚Äã  packages/core/src/types/agent.ts:76    ","version":"1.0.17","tagName":"h3"},{"title":"secrets?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#secrets","content":" optional secrets: object  Optional secrets  Index Signature‚Äã  [key: string]: string | number | boolean  Inherited from‚Äã  Character.secrets  Defined in‚Äã  packages/core/src/types/agent.ts:81    ","version":"1.0.17","tagName":"h3"},{"title":"style?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/interfaces/Agent#style","content":" optional style: object  Writing style guides  all?‚Äã  optional all: string[]  chat?‚Äã  optional chat: string[]  post?‚Äã  optional post: string[]  Inherited from‚Äã  Character.style  Defined in‚Äã  packages/core/src/types/agent.ts:86 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: AudioProcessingParams","type":0,"sectionRef":"#","url":"/api/interfaces/AudioProcessingParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/interfaces/AudioProcessingParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/interfaces/AudioProcessingParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/interfaces/AudioProcessingParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"audioUrl‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/interfaces/AudioProcessingParams#audiourl","content":" audioUrl: string  The URL or path of the audio file to process  Defined in‚Äã  packages/core/src/types/model.ts:168    ","version":"1.0.17","tagName":"h3"},{"title":"processingType‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/interfaces/AudioProcessingParams#processingtype","content":" processingType: string  The type of audio processing to perform  Defined in‚Äã  packages/core/src/types/model.ts:170 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: BaseMetadata","type":0,"sectionRef":"#","url":"/api/interfaces/BaseMetadata","content":"@elizaos/core v1.3.0 / BaseMetadata Interface: BaseMetadata Base interface for all memory metadata types. It includes common properties for all memories, such as: type: The kind of memory (e.g., MemoryType.MESSAGE, MemoryType.DOCUMENT).source: An optional string indicating the origin of the memory (e.g., 'discord', 'user_input').sourceId: An optional UUID linking to a source entity or object.scope: The visibility scope of the memory (shared, private, or room).timestamp: An optional numerical timestamp (e.g., milliseconds since epoch) of when the memory was created or relevant.tags: Optional array of strings for categorizing or filtering memories. Specific metadata types like DocumentMetadata or MessageMetadata extend this base.","keywords":"","version":"1.0.17"},{"title":"Interface: BaseModelParams","type":0,"sectionRef":"#","url":"/api/interfaces/BaseModelParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: BaseModelParams","url":"/api/interfaces/BaseModelParams#extended-by","content":" TextGenerationParamsTextEmbeddingParamsTokenizeTextParamsImageGenerationParamsImageDescriptionParamsTranscriptionParamsTextToSpeechParamsAudioProcessingParamsVideoProcessingParamsObjectGenerationParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: BaseModelParams","url":"/api/interfaces/BaseModelParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: BaseModelParams","url":"/api/interfaces/BaseModelParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Defined in‚Äã  packages/core/src/types/model.ts:80 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ChannelClearedPayload","type":0,"sectionRef":"#","url":"/api/interfaces/ChannelClearedPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ChannelClearedPayload","url":"/api/interfaces/ChannelClearedPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: Character","type":0,"sectionRef":"#","url":"/api/interfaces/Character","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#extended-by","content":" Agent  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Defined in‚Äã  packages/core/src/types/agent.ts:38    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#name","content":" name: string  Character name  Defined in‚Äã  packages/core/src/types/agent.ts:41    ","version":"1.0.17","tagName":"h3"},{"title":"username?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#username","content":" optional username: string  Optional username  Defined in‚Äã  packages/core/src/types/agent.ts:44    ","version":"1.0.17","tagName":"h3"},{"title":"system?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#system","content":" optional system: string  Optional system prompt  Defined in‚Äã  packages/core/src/types/agent.ts:47    ","version":"1.0.17","tagName":"h3"},{"title":"templates?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#templates","content":" optional templates: object  Optional prompt templates  Index Signature‚Äã  [key: string]: TemplateType  Defined in‚Äã  packages/core/src/types/agent.ts:50    ","version":"1.0.17","tagName":"h3"},{"title":"bio‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#bio","content":" bio: string | string[]  Character biography  Defined in‚Äã  packages/core/src/types/agent.ts:55    ","version":"1.0.17","tagName":"h3"},{"title":"messageExamples?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#messageexamples","content":" optional messageExamples: MessageExample[][]  Example messages  Defined in‚Äã  packages/core/src/types/agent.ts:58    ","version":"1.0.17","tagName":"h3"},{"title":"postExamples?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#postexamples","content":" optional postExamples: string[]  Example posts  Defined in‚Äã  packages/core/src/types/agent.ts:61    ","version":"1.0.17","tagName":"h3"},{"title":"topics?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#topics","content":" optional topics: string[]  Known topics  Defined in‚Äã  packages/core/src/types/agent.ts:64    ","version":"1.0.17","tagName":"h3"},{"title":"adjectives?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#adjectives","content":" optional adjectives: string[]  Character traits  Defined in‚Äã  packages/core/src/types/agent.ts:67    ","version":"1.0.17","tagName":"h3"},{"title":"knowledge?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#knowledge","content":" optional knowledge: (string | DirectoryItem | object)[]  Optional knowledge base  Defined in‚Äã  packages/core/src/types/agent.ts:70    ","version":"1.0.17","tagName":"h3"},{"title":"plugins?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#plugins","content":" optional plugins: string[]  Available plugins  Defined in‚Äã  packages/core/src/types/agent.ts:73    ","version":"1.0.17","tagName":"h3"},{"title":"settings?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#settings","content":" optional settings: object  Optional configuration  Index Signature‚Äã  [key: string]: string | number | boolean | Record&lt;string, any&gt;  Defined in‚Äã  packages/core/src/types/agent.ts:76    ","version":"1.0.17","tagName":"h3"},{"title":"secrets?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#secrets","content":" optional secrets: object  Optional secrets  Index Signature‚Äã  [key: string]: string | number | boolean  Defined in‚Äã  packages/core/src/types/agent.ts:81    ","version":"1.0.17","tagName":"h3"},{"title":"style?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/interfaces/Character#style","content":" optional style: object  Writing style guides  all?‚Äã  optional all: string[]  chat?‚Äã  optional chat: string[]  post?‚Äã  optional post: string[]  Defined in‚Äã  packages/core/src/types/agent.ts:86 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ChunkRow","type":0,"sectionRef":"#","url":"/api/interfaces/ChunkRow","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ChunkRow","url":"/api/interfaces/ChunkRow#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: ChunkRow","url":"/api/interfaces/ChunkRow#id","content":" id: string  The unique identifier for this chunk of text.  Defined in‚Äã  packages/core/src/types/knowledge.ts:63 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Content","type":0,"sectionRef":"#","url":"/api/interfaces/Content","content":"","keywords":"","version":"1.0.17"},{"title":"Indexable‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#indexable","content":" [key: string]: unknown  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"thought?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#thought","content":" optional thought: string  The agent's internal thought process  Defined in‚Äã  packages/core/src/types/primitives.ts:23    ","version":"1.0.17","tagName":"h3"},{"title":"text?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#text","content":" optional text: string  The main text content visible to users  Defined in‚Äã  packages/core/src/types/primitives.ts:26    ","version":"1.0.17","tagName":"h3"},{"title":"actions?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#actions","content":" optional actions: string[]  Optional actions to be performed  Defined in‚Äã  packages/core/src/types/primitives.ts:29    ","version":"1.0.17","tagName":"h3"},{"title":"providers?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#providers","content":" optional providers: string[]  Optional providers to use for context generation  Defined in‚Äã  packages/core/src/types/primitives.ts:32    ","version":"1.0.17","tagName":"h3"},{"title":"source?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#source","content":" optional source: string  Optional source/origin of the content  Defined in‚Äã  packages/core/src/types/primitives.ts:35    ","version":"1.0.17","tagName":"h3"},{"title":"target?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#target","content":" optional target: string  Optional target/destination for responses  Defined in‚Äã  packages/core/src/types/primitives.ts:38    ","version":"1.0.17","tagName":"h3"},{"title":"url?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#url","content":" optional url: string  URL of the original message/post (e.g. tweet URL, Discord message link)  Defined in‚Äã  packages/core/src/types/primitives.ts:41    ","version":"1.0.17","tagName":"h3"},{"title":"inReplyTo?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#inreplyto","content":" optional inReplyTo: `${string}-${string}-${string}-${string}-${string}`  UUID of parent message if this is a reply/thread  Defined in‚Äã  packages/core/src/types/primitives.ts:44    ","version":"1.0.17","tagName":"h3"},{"title":"attachments?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#attachments","content":" optional attachments: Media[]  Array of media attachments  Defined in‚Äã  packages/core/src/types/primitives.ts:47    ","version":"1.0.17","tagName":"h3"},{"title":"channelType?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/interfaces/Content#channeltype","content":" optional channelType: string  room type  Defined in‚Äã  packages/core/src/types/primitives.ts:50 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ControlMessage","type":0,"sectionRef":"#","url":"/api/interfaces/ControlMessage","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ControlMessage","url":"/api/interfaces/ControlMessage#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"type‚Äã","type":1,"pageTitle":"Interface: ControlMessage","url":"/api/interfaces/ControlMessage#type","content":" type: &quot;control&quot;  Message type identifier  Defined in‚Äã  packages/core/src/types/messaging.ts:41    ","version":"1.0.17","tagName":"h3"},{"title":"payload‚Äã","type":1,"pageTitle":"Interface: ControlMessage","url":"/api/interfaces/ControlMessage#payload","content":" payload: object  Control message payload  Index Signature‚Äã  [key: string]: unknown  action‚Äã  action: &quot;disable_input&quot; | &quot;enable_input&quot;  Action to perform  target?‚Äã  optional target: string  Optional target element identifier  Defined in‚Äã  packages/core/src/types/messaging.ts:44    ","version":"1.0.17","tagName":"h3"},{"title":"roomId‚Äã","type":1,"pageTitle":"Interface: ControlMessage","url":"/api/interfaces/ControlMessage#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Room ID to ensure signal is directed to the correct chat window  Defined in‚Äã  packages/core/src/types/messaging.ts:56 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: DeriveKeyAttestationData","type":0,"sectionRef":"#","url":"/api/interfaces/DeriveKeyAttestationData","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: DeriveKeyAttestationData","url":"/api/interfaces/DeriveKeyAttestationData#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: DeriveKeyAttestationData","url":"/api/interfaces/DeriveKeyAttestationData#agentid","content":" agentId: string  The unique identifier of the agent for which the key derivation is being attested.  Defined in‚Äã  packages/core/src/types/tee.ts:63    ","version":"1.0.17","tagName":"h3"},{"title":"publicKey‚Äã","type":1,"pageTitle":"Interface: DeriveKeyAttestationData","url":"/api/interfaces/DeriveKeyAttestationData#publickey","content":" publicKey: string  The public key of the agent instance involved in the key derivation process.  Defined in‚Äã  packages/core/src/types/tee.ts:65    ","version":"1.0.17","tagName":"h3"},{"title":"subject?‚Äã","type":1,"pageTitle":"Interface: DeriveKeyAttestationData","url":"/api/interfaces/DeriveKeyAttestationData#subject","content":" optional subject: string  Optional subject or context information related to the key derivation.  Defined in‚Äã  packages/core/src/types/tee.ts:67 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: DetokenizeTextParams","type":0,"sectionRef":"#","url":"/api/interfaces/DetokenizeTextParams","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: DetokenizeTextParams","url":"/api/interfaces/DetokenizeTextParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"tokens‚Äã","type":1,"pageTitle":"Interface: DetokenizeTextParams","url":"/api/interfaces/DetokenizeTextParams#tokens","content":" tokens: number[]  An array of numerical tokens to be converted back into text.  Defined in‚Äã  packages/core/src/types/model.ts:70    ","version":"1.0.17","tagName":"h3"},{"title":"modelType‚Äã","type":1,"pageTitle":"Interface: DetokenizeTextParams","url":"/api/interfaces/DetokenizeTextParams#modeltype","content":" modelType: string  The model type used for detokenization, ensuring consistency with the original tokenization.  Defined in‚Äã  packages/core/src/types/model.ts:72 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: DirectoryItem","type":0,"sectionRef":"#","url":"/api/interfaces/DirectoryItem","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: DirectoryItem","url":"/api/interfaces/DirectoryItem#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"directory‚Äã","type":1,"pageTitle":"Interface: DirectoryItem","url":"/api/interfaces/DirectoryItem#directory","content":" directory: string  The path to the directory containing knowledge files.  Defined in‚Äã  packages/core/src/types/knowledge.ts:50    ","version":"1.0.17","tagName":"h3"},{"title":"shared?‚Äã","type":1,"pageTitle":"Interface: DirectoryItem","url":"/api/interfaces/DirectoryItem#shared","content":" optional shared: boolean  If true, knowledge from this directory is considered shared; otherwise, it's private. Defaults to false.  Defined in‚Äã  packages/core/src/types/knowledge.ts:52 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: EmbeddingSearchResult","type":0,"sectionRef":"#","url":"/api/interfaces/EmbeddingSearchResult","content":"@elizaos/core v1.3.0 / EmbeddingSearchResult Interface: EmbeddingSearchResult Result interface for embedding similarity searches","keywords":"","version":"1.0.17"},{"title":"Interface: EnhancedState","type":0,"sectionRef":"#","url":"/api/interfaces/EnhancedState","content":"","keywords":"","version":"1.0.17"},{"title":"Indexable‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/interfaces/EnhancedState#indexable","content":" [key: string]: StateValue  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/interfaces/EnhancedState#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"values‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/interfaces/EnhancedState#values","content":" values: StateObject  Holds directly accessible state values, often used for template rendering or quick lookups.  Defined in‚Äã  packages/core/src/types/state.ts:53    ","version":"1.0.17","tagName":"h3"},{"title":"data‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/interfaces/EnhancedState#data","content":" data: StateObject  Stores more complex or structured data, potentially namespaced by providers or internal systems.  Defined in‚Äã  packages/core/src/types/state.ts:55    ","version":"1.0.17","tagName":"h3"},{"title":"text‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/interfaces/EnhancedState#text","content":" text: string  A textual representation or summary of the current state, often used as context for models.  Defined in‚Äã  packages/core/src/types/state.ts:57 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Entity","type":0,"sectionRef":"#","url":"/api/interfaces/Entity","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/interfaces/Entity#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/interfaces/Entity#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier, optional on creation  Defined in‚Äã  packages/core/src/types/environment.ts:20    ","version":"1.0.17","tagName":"h3"},{"title":"names‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/interfaces/Entity#names","content":" names: string[]  Names of the entity  Defined in‚Äã  packages/core/src/types/environment.ts:23    ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/interfaces/Entity#metadata","content":" optional metadata: Metadata  Optional additional metadata  Defined in‚Äã  packages/core/src/types/environment.ts:26    ","version":"1.0.17","tagName":"h3"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/interfaces/Entity#agentid","content":" agentId: `${string}-${string}-${string}-${string}-${string}`  Agent ID this account is related to, for agents should be themselves  Defined in‚Äã  packages/core/src/types/environment.ts:29    ","version":"1.0.17","tagName":"h3"},{"title":"components?‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/interfaces/Entity#components","content":" optional components: Component[]  Optional array of components  Defined in‚Äã  packages/core/src/types/environment.ts:32 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: EntityPayload","type":0,"sectionRef":"#","url":"/api/interfaces/EntityPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: EntityPayload","url":"/api/interfaces/EntityPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: EvaluationExample","type":0,"sectionRef":"#","url":"/api/interfaces/EvaluationExample","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/interfaces/EvaluationExample#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/interfaces/EvaluationExample#prompt","content":" prompt: string  Evaluation context  Defined in‚Äã  packages/core/src/types/components.ts:71    ","version":"1.0.17","tagName":"h3"},{"title":"messages‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/interfaces/EvaluationExample#messages","content":" messages: ActionExample[]  Example messages  Defined in‚Äã  packages/core/src/types/components.ts:74    ","version":"1.0.17","tagName":"h3"},{"title":"outcome‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/interfaces/EvaluationExample#outcome","content":" outcome: string  Expected outcome  Defined in‚Äã  packages/core/src/types/components.ts:77 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Evaluator","type":0,"sectionRef":"#","url":"/api/interfaces/Evaluator","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/interfaces/Evaluator#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"alwaysRun?‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/interfaces/Evaluator#alwaysrun","content":" optional alwaysRun: boolean  Whether to always run  Defined in‚Äã  packages/core/src/types/components.ts:85    ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/interfaces/Evaluator#description","content":" description: string  Detailed description  Defined in‚Äã  packages/core/src/types/components.ts:88    ","version":"1.0.17","tagName":"h3"},{"title":"similes?‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/interfaces/Evaluator#similes","content":" optional similes: string[]  Similar evaluator descriptions  Defined in‚Äã  packages/core/src/types/components.ts:91    ","version":"1.0.17","tagName":"h3"},{"title":"examples‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/interfaces/Evaluator#examples","content":" examples: EvaluationExample[]  Example evaluations  Defined in‚Äã  packages/core/src/types/components.ts:94    ","version":"1.0.17","tagName":"h3"},{"title":"handler‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/interfaces/Evaluator#handler","content":" handler: Handler  Handler function  Defined in‚Äã  packages/core/src/types/components.ts:97    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/interfaces/Evaluator#name","content":" name: string  Evaluator name  Defined in‚Äã  packages/core/src/types/components.ts:100    ","version":"1.0.17","tagName":"h3"},{"title":"validate‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/interfaces/Evaluator#validate","content":" validate: Validator  Validation function  Defined in‚Äã  packages/core/src/types/components.ts:103 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: EvaluatorEventPayload","type":0,"sectionRef":"#","url":"/api/interfaces/EvaluatorEventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: EvaluatorEventPayload","url":"/api/interfaces/EvaluatorEventPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: EventPayload","type":0,"sectionRef":"#","url":"/api/interfaces/EventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: EventPayload","url":"/api/interfaces/EventPayload#extended-by","content":" WorldPayloadEntityPayloadMessagePayloadChannelClearedPayloadInvokePayloadRunEventPayloadActionEventPayloadEvaluatorEventPayloadModelEventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: EventPayloadMap","type":0,"sectionRef":"#","url":"/api/interfaces/EventPayloadMap","content":"@elizaos/core v1.3.0 / EventPayloadMap Interface: EventPayloadMap Maps event types to their corresponding payload types","keywords":"","version":"1.0.17"},{"title":"Interface: IAgentRuntime","type":0,"sectionRef":"#","url":"/api/interfaces/IAgentRuntime","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#extends","content":" IDatabaseAdapter  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"db‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#db","content":" db: any  Database instance  Inherited from‚Äã  IDatabaseAdapter.db  Defined in‚Äã  packages/core/src/types/database.ts:35  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"init()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#init","content":" init(): Promise&lt;void&gt;  Initialize database connection  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.init  Defined in‚Äã  packages/core/src/types/database.ts:41    ","version":"1.0.17","tagName":"h3"},{"title":"runMigrations()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#runmigrations","content":" runMigrations(schema?, pluginName?): Promise&lt;void&gt;  Run database migrations  Parameters‚Äã  ‚Ä¢ schema?: any  ‚Ä¢ pluginName?: string  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.runMigrations  Defined in‚Äã  packages/core/src/types/database.ts:44    ","version":"1.0.17","tagName":"h3"},{"title":"isReady()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#isready","content":" isReady(): Promise&lt;boolean&gt;  Check if the database connection is ready  Returns‚Äã  Promise&lt;boolean&gt;  Inherited from‚Äã  IDatabaseAdapter.isReady  Defined in‚Äã  packages/core/src/types/database.ts:47    ","version":"1.0.17","tagName":"h3"},{"title":"close()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#close","content":" close(): Promise&lt;void&gt;  Close database connection  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.close  Defined in‚Äã  packages/core/src/types/database.ts:50    ","version":"1.0.17","tagName":"h3"},{"title":"getAgents()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#getagents","content":" getAgents(): Promise&lt;Partial&lt;Agent&gt;[]&gt;  Get all agents  Returns‚Äã  Promise&lt;Partial&lt;Agent&gt;[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getAgents  Defined in‚Äã  packages/core/src/types/database.ts:57    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesByIds()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#getentitiesbyids","content":" getEntitiesByIds(entityIds): Promise&lt;Entity[]&gt;  Get entity by IDs  Parameters‚Äã  ‚Ä¢ entityIds: `${string}-${string}-${string}-${string}-${string}`[]  Returns‚Äã  Promise&lt;Entity[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getEntitiesByIds  Defined in‚Äã  packages/core/src/types/database.ts:68    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesForRoom()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#getentitiesforroom","content":" getEntitiesForRoom(roomId, includeComponents?): Promise&lt;Entity[]&gt;  Get entities for room  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ includeComponents?: boolean  Returns‚Äã  Promise&lt;Entity[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getEntitiesForRoom  Defined in‚Äã  packages/core/src/types/database.ts:71    ","version":"1.0.17","tagName":"h3"},{"title":"createEntities()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#createentities","content":" createEntities(entities): Promise&lt;boolean&gt;  Create new entities  Parameters‚Äã  ‚Ä¢ entities: Entity[]  Returns‚Äã  Promise&lt;boolean&gt;  Inherited from‚Äã  IDatabaseAdapter.createEntities  Defined in‚Äã  packages/core/src/types/database.ts:74    ","version":"1.0.17","tagName":"h3"},{"title":"updateEntity()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#updateentity","content":" updateEntity(entity): Promise&lt;void&gt;  Update entity  Parameters‚Äã  ‚Ä¢ entity: Entity  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.updateEntity  Defined in‚Äã  packages/core/src/types/database.ts:77    ","version":"1.0.17","tagName":"h3"},{"title":"getComponent()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#getcomponent","content":" getComponent(entityId, type, worldId?, sourceEntityId?): Promise&lt;Component&gt;  Get component by ID  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ type: string  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component&gt;  Inherited from‚Äã  IDatabaseAdapter.getComponent  Defined in‚Äã  packages/core/src/types/database.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"getComponents()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#getcomponents","content":" getComponents(entityId, worldId?, sourceEntityId?): Promise&lt;Component[]&gt;  Get all components for an entity  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getComponents  Defined in‚Äã  packages/core/src/types/database.ts:88    ","version":"1.0.17","tagName":"h3"},{"title":"createComponent()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#createcomponent","content":" createComponent(component): Promise&lt;boolean&gt;  Create component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;boolean&gt;  Inherited from‚Äã  IDatabaseAdapter.createComponent  Defined in‚Äã  packages/core/src/types/database.ts:91    ","version":"1.0.17","tagName":"h3"},{"title":"updateComponent()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#updatecomponent","content":" updateComponent(component): Promise&lt;void&gt;  Update component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.updateComponent  Defined in‚Äã  packages/core/src/types/database.ts:94    ","version":"1.0.17","tagName":"h3"},{"title":"deleteComponent()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#deletecomponent","content":" deleteComponent(componentId): Promise&lt;void&gt;  Delete component  Parameters‚Äã  ‚Ä¢ componentId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.deleteComponent  Defined in‚Äã  packages/core/src/types/database.ts:97    ","version":"1.0.17","tagName":"h3"},{"title":"getMemories()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#getmemories","content":" getMemories(params): Promise&lt;Memory[]&gt;  Get memories matching criteria  Parameters‚Äã  ‚Ä¢ params  ‚Ä¢ params.entityId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.agentId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.count?: number  ‚Ä¢ params.unique?: boolean  ‚Ä¢ params.tableName: string  ‚Ä¢ params.start?: number  ‚Ä¢ params.end?: number  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.worldId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Memory[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getMemories  Defined in‚Äã  packages/core/src/types/database.ts:100    ","version":"1.0.17","tagName":"h3"},{"title":"createRelationship()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#createrelationship","content":" createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two entities.  Parameters‚Äã  ‚Ä¢ params  Object containing the relationship details  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.metadata?: Metadata  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to boolean indicating success  Inherited from‚Äã  IDatabaseAdapter.createRelationship  Defined in‚Äã  packages/core/src/types/database.ts:219    ","version":"1.0.17","tagName":"h3"},{"title":"updateRelationship()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#updaterelationship","content":" updateRelationship(relationship): Promise&lt;void&gt;  Updates an existing relationship between two entities.  Parameters‚Äã  ‚Ä¢ relationship: Relationship  The relationship object with updated data  Returns‚Äã  Promise&lt;void&gt;  Promise resolving to void  Inherited from‚Äã  IDatabaseAdapter.updateRelationship  Defined in‚Äã  packages/core/src/types/database.ts:231    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationship()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#getrelationship","content":" getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two entities if it exists.  Parameters‚Äã  ‚Ä¢ params  Object containing the entity IDs and agent ID  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Relationship&gt;  Promise resolving to the Relationship object or null if not found  Inherited from‚Äã  IDatabaseAdapter.getRelationship  Defined in‚Äã  packages/core/src/types/database.ts:238    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationships()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#getrelationships","content":" getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific entity.  Parameters‚Äã  ‚Ä¢ params  Object containing the user ID, agent ID and optional tags to filter by  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  Returns‚Äã  Promise&lt;Relationship[]&gt;  Promise resolving to an array of Relationship objects  Inherited from‚Äã  IDatabaseAdapter.getRelationships  Defined in‚Äã  packages/core/src/types/database.ts:248    ","version":"1.0.17","tagName":"h3"},{"title":"initialize()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/interfaces/IAgentRuntime#initialize","content":" initialize(): Promise&lt;void&gt;  Initialize database connection  Returns‚Äã  Promise&lt;void&gt;  Overrides‚Äã  IDatabaseAdapter.initialize  Defined in‚Äã  packages/core/src/types/runtime.ts:38 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: IDatabaseAdapter","type":0,"sectionRef":"#","url":"/api/interfaces/IDatabaseAdapter","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#extended-by","content":" IAgentRuntime  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"db‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#db","content":" db: any  Database instance  Defined in‚Äã  packages/core/src/types/database.ts:35  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"initialize()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#initialize","content":" initialize(config?): Promise&lt;void&gt;  Initialize database connection  Parameters‚Äã  ‚Ä¢ config?: any  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/types/database.ts:38    ","version":"1.0.17","tagName":"h3"},{"title":"init()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#init","content":" init(): Promise&lt;void&gt;  Initialize database connection  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/types/database.ts:41    ","version":"1.0.17","tagName":"h3"},{"title":"runMigrations()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#runmigrations","content":" runMigrations(schema?, pluginName?): Promise&lt;void&gt;  Run database migrations  Parameters‚Äã  ‚Ä¢ schema?: any  ‚Ä¢ pluginName?: string  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/types/database.ts:44    ","version":"1.0.17","tagName":"h3"},{"title":"isReady()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#isready","content":" isReady(): Promise&lt;boolean&gt;  Check if the database connection is ready  Returns‚Äã  Promise&lt;boolean&gt;  Defined in‚Äã  packages/core/src/types/database.ts:47    ","version":"1.0.17","tagName":"h3"},{"title":"close()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#close","content":" close(): Promise&lt;void&gt;  Close database connection  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/types/database.ts:50    ","version":"1.0.17","tagName":"h3"},{"title":"getAgents()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#getagents","content":" getAgents(): Promise&lt;Partial&lt;Agent&gt;[]&gt;  Get all agents  Returns‚Äã  Promise&lt;Partial&lt;Agent&gt;[]&gt;  Defined in‚Äã  packages/core/src/types/database.ts:57    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesByIds()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#getentitiesbyids","content":" getEntitiesByIds(entityIds): Promise&lt;Entity[]&gt;  Get entity by IDs  Parameters‚Äã  ‚Ä¢ entityIds: `${string}-${string}-${string}-${string}-${string}`[]  Returns‚Äã  Promise&lt;Entity[]&gt;  Defined in‚Äã  packages/core/src/types/database.ts:68    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesForRoom()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#getentitiesforroom","content":" getEntitiesForRoom(roomId, includeComponents?): Promise&lt;Entity[]&gt;  Get entities for room  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ includeComponents?: boolean  Returns‚Äã  Promise&lt;Entity[]&gt;  Defined in‚Äã  packages/core/src/types/database.ts:71    ","version":"1.0.17","tagName":"h3"},{"title":"createEntities()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#createentities","content":" createEntities(entities): Promise&lt;boolean&gt;  Create new entities  Parameters‚Äã  ‚Ä¢ entities: Entity[]  Returns‚Äã  Promise&lt;boolean&gt;  Defined in‚Äã  packages/core/src/types/database.ts:74    ","version":"1.0.17","tagName":"h3"},{"title":"updateEntity()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#updateentity","content":" updateEntity(entity): Promise&lt;void&gt;  Update entity  Parameters‚Äã  ‚Ä¢ entity: Entity  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/types/database.ts:77    ","version":"1.0.17","tagName":"h3"},{"title":"getComponent()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#getcomponent","content":" getComponent(entityId, type, worldId?, sourceEntityId?): Promise&lt;Component&gt;  Get component by ID  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ type: string  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component&gt;  Defined in‚Äã  packages/core/src/types/database.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"getComponents()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#getcomponents","content":" getComponents(entityId, worldId?, sourceEntityId?): Promise&lt;Component[]&gt;  Get all components for an entity  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component[]&gt;  Defined in‚Äã  packages/core/src/types/database.ts:88    ","version":"1.0.17","tagName":"h3"},{"title":"createComponent()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#createcomponent","content":" createComponent(component): Promise&lt;boolean&gt;  Create component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;boolean&gt;  Defined in‚Äã  packages/core/src/types/database.ts:91    ","version":"1.0.17","tagName":"h3"},{"title":"updateComponent()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#updatecomponent","content":" updateComponent(component): Promise&lt;void&gt;  Update component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/types/database.ts:94    ","version":"1.0.17","tagName":"h3"},{"title":"deleteComponent()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#deletecomponent","content":" deleteComponent(componentId): Promise&lt;void&gt;  Delete component  Parameters‚Äã  ‚Ä¢ componentId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/types/database.ts:97    ","version":"1.0.17","tagName":"h3"},{"title":"getMemories()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#getmemories","content":" getMemories(params): Promise&lt;Memory[]&gt;  Get memories matching criteria  Parameters‚Äã  ‚Ä¢ params  ‚Ä¢ params.entityId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.agentId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.count?: number  ‚Ä¢ params.unique?: boolean  ‚Ä¢ params.tableName: string  ‚Ä¢ params.start?: number  ‚Ä¢ params.end?: number  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.worldId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Memory[]&gt;  Defined in‚Äã  packages/core/src/types/database.ts:100    ","version":"1.0.17","tagName":"h3"},{"title":"createRelationship()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#createrelationship","content":" createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two entities.  Parameters‚Äã  ‚Ä¢ params  Object containing the relationship details  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.metadata?: Metadata  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to boolean indicating success  Defined in‚Äã  packages/core/src/types/database.ts:219    ","version":"1.0.17","tagName":"h3"},{"title":"updateRelationship()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#updaterelationship","content":" updateRelationship(relationship): Promise&lt;void&gt;  Updates an existing relationship between two entities.  Parameters‚Äã  ‚Ä¢ relationship: Relationship  The relationship object with updated data  Returns‚Äã  Promise&lt;void&gt;  Promise resolving to void  Defined in‚Äã  packages/core/src/types/database.ts:231    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationship()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#getrelationship","content":" getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two entities if it exists.  Parameters‚Äã  ‚Ä¢ params  Object containing the entity IDs and agent ID  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Relationship&gt;  Promise resolving to the Relationship object or null if not found  Defined in‚Äã  packages/core/src/types/database.ts:238    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationships()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/interfaces/IDatabaseAdapter#getrelationships","content":" getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific entity.  Parameters‚Äã  ‚Ä¢ params  Object containing the user ID, agent ID and optional tags to filter by  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  Returns‚Äã  Promise&lt;Relationship[]&gt;  Promise resolving to an array of Relationship objects  Defined in‚Äã  packages/core/src/types/database.ts:248 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ImageDescriptionParams","type":0,"sectionRef":"#","url":"/api/interfaces/ImageDescriptionParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/interfaces/ImageDescriptionParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/interfaces/ImageDescriptionParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/interfaces/ImageDescriptionParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"imageUrl‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/interfaces/ImageDescriptionParams#imageurl","content":" imageUrl: string  The URL or path of the image to describe  Defined in‚Äã  packages/core/src/types/model.ts:136    ","version":"1.0.17","tagName":"h3"},{"title":"prompt?‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/interfaces/ImageDescriptionParams#prompt","content":" optional prompt: string  Optional prompt to guide the description  Defined in‚Äã  packages/core/src/types/model.ts:138 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ImageGenerationParams","type":0,"sectionRef":"#","url":"/api/interfaces/ImageGenerationParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/interfaces/ImageGenerationParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/interfaces/ImageGenerationParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/interfaces/ImageGenerationParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/interfaces/ImageGenerationParams#prompt","content":" prompt: string  The prompt describing the image to generate  Defined in‚Äã  packages/core/src/types/model.ts:124    ","version":"1.0.17","tagName":"h3"},{"title":"size?‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/interfaces/ImageGenerationParams#size","content":" optional size: string  The dimensions of the image to generate  Defined in‚Äã  packages/core/src/types/model.ts:126    ","version":"1.0.17","tagName":"h3"},{"title":"count?‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/interfaces/ImageGenerationParams#count","content":" optional count: number  Number of images to generate  Defined in‚Äã  packages/core/src/types/model.ts:128 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: InvokePayload","type":0,"sectionRef":"#","url":"/api/interfaces/InvokePayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: InvokePayload","url":"/api/interfaces/InvokePayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: Log","type":0,"sectionRef":"#","url":"/api/interfaces/Log","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/interfaces/Log#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/interfaces/Log#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Defined in‚Äã  packages/core/src/types/database.ts:12    ","version":"1.0.17","tagName":"h3"},{"title":"entityId‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/interfaces/Log#entityid","content":" entityId: `${string}-${string}-${string}-${string}-${string}`  Associated entity ID  Defined in‚Äã  packages/core/src/types/database.ts:15    ","version":"1.0.17","tagName":"h3"},{"title":"roomId?‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/interfaces/Log#roomid","content":" optional roomId: `${string}-${string}-${string}-${string}-${string}`  Associated room ID  Defined in‚Äã  packages/core/src/types/database.ts:18    ","version":"1.0.17","tagName":"h3"},{"title":"body‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/interfaces/Log#body","content":" body: object  Log body  Index Signature‚Äã  [key: string]: unknown  Defined in‚Äã  packages/core/src/types/database.ts:21    ","version":"1.0.17","tagName":"h3"},{"title":"type‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/interfaces/Log#type","content":" type: string  Log type  Defined in‚Äã  packages/core/src/types/database.ts:24    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/interfaces/Log#createdat","content":" createdAt: Date  Log creation timestamp  Defined in‚Äã  packages/core/src/types/database.ts:27 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Memory","type":0,"sectionRef":"#","url":"/api/interfaces/Memory","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#extended-by","content":" MessageMemory  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Defined in‚Äã  packages/core/src/types/memory.ts:87    ","version":"1.0.17","tagName":"h3"},{"title":"entityId‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#entityid","content":" entityId: `${string}-${string}-${string}-${string}-${string}`  Associated user ID  Defined in‚Äã  packages/core/src/types/memory.ts:90    ","version":"1.0.17","tagName":"h3"},{"title":"agentId?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#agentid","content":" optional agentId: `${string}-${string}-${string}-${string}-${string}`  Associated agent ID  Defined in‚Äã  packages/core/src/types/memory.ts:93    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#createdat","content":" optional createdAt: number  Optional creation timestamp in milliseconds since epoch  Defined in‚Äã  packages/core/src/types/memory.ts:96    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#content","content":" content: Content  Memory content  Defined in‚Äã  packages/core/src/types/memory.ts:99    ","version":"1.0.17","tagName":"h3"},{"title":"embedding?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#embedding","content":" optional embedding: number[]  Optional embedding vector for semantic search  Defined in‚Äã  packages/core/src/types/memory.ts:102    ","version":"1.0.17","tagName":"h3"},{"title":"roomId‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Associated room ID  Defined in‚Äã  packages/core/src/types/memory.ts:105    ","version":"1.0.17","tagName":"h3"},{"title":"worldId?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#worldid","content":" optional worldId: `${string}-${string}-${string}-${string}-${string}`  Associated world ID (optional)  Defined in‚Äã  packages/core/src/types/memory.ts:108    ","version":"1.0.17","tagName":"h3"},{"title":"unique?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#unique","content":" optional unique: boolean  Whether memory is unique (used to prevent duplicates)  Defined in‚Äã  packages/core/src/types/memory.ts:111    ","version":"1.0.17","tagName":"h3"},{"title":"similarity?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#similarity","content":" optional similarity: number  Embedding similarity score (set when retrieved via search)  Defined in‚Äã  packages/core/src/types/memory.ts:114    ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/interfaces/Memory#metadata","content":" optional metadata: MemoryMetadata  Metadata for the memory  Defined in‚Äã  packages/core/src/types/memory.ts:117 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: MemoryRetrievalOptions","type":0,"sectionRef":"#","url":"/api/interfaces/MemoryRetrievalOptions","content":"@elizaos/core v1.3.0 / MemoryRetrievalOptions Interface: MemoryRetrievalOptions Options for memory retrieval operations","keywords":"","version":"1.0.17"},{"title":"Interface: MemorySearchOptions","type":0,"sectionRef":"#","url":"/api/interfaces/MemorySearchOptions","content":"@elizaos/core v1.3.0 / MemorySearchOptions Interface: MemorySearchOptions Options for memory search operations","keywords":"","version":"1.0.17"},{"title":"Interface: MessageExample","type":0,"sectionRef":"#","url":"/api/interfaces/MessageExample","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: MessageExample","url":"/api/interfaces/MessageExample#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: MessageExample","url":"/api/interfaces/MessageExample#name","content":" name: string  Associated user  Defined in‚Äã  packages/core/src/types/agent.ts:10    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: MessageExample","url":"/api/interfaces/MessageExample#content","content":" content: Content  Message content  Defined in‚Äã  packages/core/src/types/agent.ts:13 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: MessageMemory","type":0,"sectionRef":"#","url":"/api/interfaces/MessageMemory","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#extends","content":" Memory  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Inherited from‚Äã  Memory.id  Defined in‚Äã  packages/core/src/types/memory.ts:87    ","version":"1.0.17","tagName":"h3"},{"title":"entityId‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#entityid","content":" entityId: `${string}-${string}-${string}-${string}-${string}`  Associated user ID  Inherited from‚Äã  Memory.entityId  Defined in‚Äã  packages/core/src/types/memory.ts:90    ","version":"1.0.17","tagName":"h3"},{"title":"agentId?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#agentid","content":" optional agentId: `${string}-${string}-${string}-${string}-${string}`  Associated agent ID  Inherited from‚Äã  Memory.agentId  Defined in‚Äã  packages/core/src/types/memory.ts:93    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#createdat","content":" optional createdAt: number  Optional creation timestamp in milliseconds since epoch  Inherited from‚Äã  Memory.createdAt  Defined in‚Äã  packages/core/src/types/memory.ts:96    ","version":"1.0.17","tagName":"h3"},{"title":"embedding?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#embedding","content":" optional embedding: number[]  Optional embedding vector for semantic search  Inherited from‚Äã  Memory.embedding  Defined in‚Äã  packages/core/src/types/memory.ts:102    ","version":"1.0.17","tagName":"h3"},{"title":"roomId‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Associated room ID  Inherited from‚Äã  Memory.roomId  Defined in‚Äã  packages/core/src/types/memory.ts:105    ","version":"1.0.17","tagName":"h3"},{"title":"worldId?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#worldid","content":" optional worldId: `${string}-${string}-${string}-${string}-${string}`  Associated world ID (optional)  Inherited from‚Äã  Memory.worldId  Defined in‚Äã  packages/core/src/types/memory.ts:108    ","version":"1.0.17","tagName":"h3"},{"title":"unique?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#unique","content":" optional unique: boolean  Whether memory is unique (used to prevent duplicates)  Inherited from‚Äã  Memory.unique  Defined in‚Äã  packages/core/src/types/memory.ts:111    ","version":"1.0.17","tagName":"h3"},{"title":"similarity?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#similarity","content":" optional similarity: number  Embedding similarity score (set when retrieved via search)  Inherited from‚Äã  Memory.similarity  Defined in‚Äã  packages/core/src/types/memory.ts:114    ","version":"1.0.17","tagName":"h3"},{"title":"metadata‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#metadata","content":" metadata: MessageMetadata  Metadata for the memory  Overrides‚Äã  Memory.metadata  Defined in‚Äã  packages/core/src/types/memory.ts:124    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/interfaces/MessageMemory#content","content":" content: Content &amp; object  Memory content  Type declaration‚Äã  text‚Äã  text: string  Overrides‚Äã  Memory.content  Defined in‚Äã  packages/core/src/types/memory.ts:125 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: MessagePayload","type":0,"sectionRef":"#","url":"/api/interfaces/MessagePayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: MessagePayload","url":"/api/interfaces/MessagePayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ModelResultMap","type":0,"sectionRef":"#","url":"/api/interfaces/ModelResultMap","content":"@elizaos/core v1.3.0 / ModelResultMap Interface: ModelResultMap Map of model types to their return value types","keywords":"","version":"1.0.17"},{"title":"Interface: ModelEventPayload","type":0,"sectionRef":"#","url":"/api/interfaces/ModelEventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ModelEventPayload","url":"/api/interfaces/ModelEventPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ModelHandler","type":0,"sectionRef":"#","url":"/api/interfaces/ModelHandler","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ModelHandler","url":"/api/interfaces/ModelHandler#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"handler()‚Äã","type":1,"pageTitle":"Interface: ModelHandler","url":"/api/interfaces/ModelHandler#handler","content":" handler: (runtime, params) =&gt; Promise&lt;unknown&gt;  The function that executes the model, taking runtime and parameters, and returning a Promise.  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ params: Record&lt;string, unknown&gt;  Returns‚Äã  Promise&lt;unknown&gt;  Defined in‚Äã  packages/core/src/types/model.ts:271    ","version":"1.0.17","tagName":"h3"},{"title":"provider‚Äã","type":1,"pageTitle":"Interface: ModelHandler","url":"/api/interfaces/ModelHandler#provider","content":" provider: string  The name of the provider (e.g., plugin name) that registered this model handler.  Defined in‚Äã  packages/core/src/types/model.ts:273    ","version":"1.0.17","tagName":"h3"},{"title":"priority?‚Äã","type":1,"pageTitle":"Interface: ModelHandler","url":"/api/interfaces/ModelHandler#priority","content":" optional priority: number  Optional priority for this model handler. Higher numbers indicate higher priority. This is used by AgentRuntime.getModel to select the most appropriate handler when multiple are available for a given model type. Defaults to 0 if not specified.  Defined in‚Äã  packages/core/src/types/model.ts:279 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ModelParamsMap","type":0,"sectionRef":"#","url":"/api/interfaces/ModelParamsMap","content":"@elizaos/core v1.3.0 / ModelParamsMap Interface: ModelParamsMap Map of model types to their parameter types","keywords":"","version":"1.0.17"},{"title":"Interface: MultiRoomMemoryOptions","type":0,"sectionRef":"#","url":"/api/interfaces/MultiRoomMemoryOptions","content":"@elizaos/core v1.3.0 / MultiRoomMemoryOptions Interface: MultiRoomMemoryOptions Options for multi-room memory retrieval","keywords":"","version":"1.0.17"},{"title":"Interface: Participant","type":0,"sectionRef":"#","url":"/api/interfaces/Participant","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Participant","url":"/api/interfaces/Participant#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ObjectGenerationParams","type":0,"sectionRef":"#","url":"/api/interfaces/ObjectGenerationParams","content":"","keywords":"","version":"1.0.17"},{"title":"Template‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#template","content":" The expected return type, inferred from schema if provided  ","version":"1.0.17","tagName":"h2"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#prompt","content":" prompt: string  The prompt describing the object to generate  Defined in‚Äã  packages/core/src/types/model.ts:200    ","version":"1.0.17","tagName":"h3"},{"title":"schema?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#schema","content":" optional schema: JSONSchema  Optional JSON schema for validation  Defined in‚Äã  packages/core/src/types/model.ts:202    ","version":"1.0.17","tagName":"h3"},{"title":"output?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#output","content":" optional output: &quot;object&quot; | &quot;array&quot; | &quot;enum&quot;  Type of object to generate  Defined in‚Äã  packages/core/src/types/model.ts:204    ","version":"1.0.17","tagName":"h3"},{"title":"enumValues?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#enumvalues","content":" optional enumValues: string[]  For enum type, the allowed values  Defined in‚Äã  packages/core/src/types/model.ts:206    ","version":"1.0.17","tagName":"h3"},{"title":"modelType?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#modeltype","content":" optional modelType: string  Model type to use  Defined in‚Äã  packages/core/src/types/model.ts:208    ","version":"1.0.17","tagName":"h3"},{"title":"temperature?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#temperature","content":" optional temperature: number  Model temperature (0.0 to 1.0)  Defined in‚Äã  packages/core/src/types/model.ts:210    ","version":"1.0.17","tagName":"h3"},{"title":"stopSequences?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams","url":"/api/interfaces/ObjectGenerationParams#stopsequences","content":" optional stopSequences: string[]  Sequences that should stop generation  Defined in‚Äã  packages/core/src/types/model.ts:212 ","version":"1.0.17","tagName":"h3"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: Participant","url":"/api/interfaces/Participant#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier  Defined in‚Äã  packages/core/src/types/environment.ts:99    ","version":"1.0.17","tagName":"h3"},{"title":"entity‚Äã","type":1,"pageTitle":"Interface: Participant","url":"/api/interfaces/Participant#entity","content":" entity: Entity  Associated account  Defined in‚Äã  packages/core/src/types/environment.ts:102 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Provider","type":0,"sectionRef":"#","url":"/api/interfaces/Provider","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/interfaces/Provider#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/interfaces/Provider#name","content":" name: string  Provider name  Defined in‚Äã  packages/core/src/types/components.ts:121    ","version":"1.0.17","tagName":"h3"},{"title":"description?‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/interfaces/Provider#description","content":" optional description: string  Description of the provider  Defined in‚Äã  packages/core/src/types/components.ts:124    ","version":"1.0.17","tagName":"h3"},{"title":"dynamic?‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/interfaces/Provider#dynamic","content":" optional dynamic: boolean  Whether the provider is dynamic  Defined in‚Äã  packages/core/src/types/components.ts:127    ","version":"1.0.17","tagName":"h3"},{"title":"position?‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/interfaces/Provider#position","content":" optional position: number  Position of the provider in the provider list, positive or negative  Defined in‚Äã  packages/core/src/types/components.ts:130    ","version":"1.0.17","tagName":"h3"},{"title":"private?‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/interfaces/Provider#private","content":" optional private: boolean  Whether the provider is private  Private providers are not displayed in the regular provider list, they have to be called explicitly  Defined in‚Äã  packages/core/src/types/components.ts:137    ","version":"1.0.17","tagName":"h3"},{"title":"get()‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/interfaces/Provider#get","content":" get: (runtime, message, state) =&gt; Promise&lt;ProviderResult&gt;  Data retrieval function  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state: State  Returns‚Äã  Promise&lt;ProviderResult&gt;  Defined in‚Äã  packages/core/src/types/components.ts:140 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Relationship","type":0,"sectionRef":"#","url":"/api/interfaces/Relationship","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/interfaces/Relationship#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/interfaces/Relationship#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier  Defined in‚Äã  packages/core/src/types/environment.ts:110    ","version":"1.0.17","tagName":"h3"},{"title":"sourceEntityId‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/interfaces/Relationship#sourceentityid","content":" sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  First user ID  Defined in‚Äã  packages/core/src/types/environment.ts:113    ","version":"1.0.17","tagName":"h3"},{"title":"targetEntityId‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/interfaces/Relationship#targetentityid","content":" targetEntityId: `${string}-${string}-${string}-${string}-${string}`  Second user ID  Defined in‚Äã  packages/core/src/types/environment.ts:116    ","version":"1.0.17","tagName":"h3"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/interfaces/Relationship#agentid","content":" agentId: `${string}-${string}-${string}-${string}-${string}`  Agent ID  Defined in‚Äã  packages/core/src/types/environment.ts:119    ","version":"1.0.17","tagName":"h3"},{"title":"tags‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/interfaces/Relationship#tags","content":" tags: string[]  Tags for filtering/categorizing relationships  Defined in‚Äã  packages/core/src/types/environment.ts:122    ","version":"1.0.17","tagName":"h3"},{"title":"metadata‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/interfaces/Relationship#metadata","content":" metadata: Metadata  Additional metadata about the relationship  Defined in‚Äã  packages/core/src/types/environment.ts:125    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt?‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/interfaces/Relationship#createdat","content":" optional createdAt: string  Optional creation timestamp  Defined in‚Äã  packages/core/src/types/environment.ts:128 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: RemoteAttestationMessage","type":0,"sectionRef":"#","url":"/api/interfaces/RemoteAttestationMessage","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationMessage","url":"/api/interfaces/RemoteAttestationMessage#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationMessage","url":"/api/interfaces/RemoteAttestationMessage#agentid","content":" agentId: string  The unique identifier of the agent sending the attested message.  Defined in‚Äã  packages/core/src/types/tee.ts:77    ","version":"1.0.17","tagName":"h3"},{"title":"timestamp‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationMessage","url":"/api/interfaces/RemoteAttestationMessage#timestamp","content":" timestamp: number  Timestamp (e.g., Unix epoch in milliseconds) when the message was attested or sent.  Defined in‚Äã  packages/core/src/types/tee.ts:79    ","version":"1.0.17","tagName":"h3"},{"title":"message‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationMessage","url":"/api/interfaces/RemoteAttestationMessage#message","content":" message: object  The actual message content, including details about the entity, room, and the content itself.  entityId‚Äã  entityId: string  roomId‚Äã  roomId: string  content‚Äã  content: string  Defined in‚Äã  packages/core/src/types/tee.ts:81 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: RemoteAttestationQuote","type":0,"sectionRef":"#","url":"/api/interfaces/RemoteAttestationQuote","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationQuote","url":"/api/interfaces/RemoteAttestationQuote#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"quote‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationQuote","url":"/api/interfaces/RemoteAttestationQuote#quote","content":" quote: string  The attestation quote data, typically a base64 encoded string or similar format.  Defined in‚Äã  packages/core/src/types/tee.ts:51    ","version":"1.0.17","tagName":"h3"},{"title":"timestamp‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationQuote","url":"/api/interfaces/RemoteAttestationQuote#timestamp","content":" timestamp: number  Timestamp (e.g., Unix epoch in milliseconds) when the quote was generated or received.  Defined in‚Äã  packages/core/src/types/tee.ts:53 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: RunEventPayload","type":0,"sectionRef":"#","url":"/api/interfaces/RunEventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: RunEventPayload","url":"/api/interfaces/RunEventPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: RuntimeSettings","type":0,"sectionRef":"#","url":"/api/interfaces/RuntimeSettings","content":"@elizaos/core v1.3.0 / RuntimeSettings Interface: RuntimeSettings Interface representing settings with string key-value pairs.","keywords":"","version":"1.0.17"},{"title":"Interface: ServiceDefinition<T>","type":0,"sectionRef":"#","url":"/api/interfaces/ServiceDefinition","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Interface: ServiceDefinition<T>","url":"/api/interfaces/ServiceDefinition#type-parameters","content":" ‚Ä¢ T extends Service = Service ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ServiceClassMap","type":0,"sectionRef":"#","url":"/api/interfaces/ServiceClassMap","content":"@elizaos/core v1.3.0 / ServiceClassMap Interface: ServiceClassMap Map of service type names to their implementation classes","keywords":"","version":"1.0.17"},{"title":"Interface: ServerOwnershipState","type":0,"sectionRef":"#","url":"/api/interfaces/ServerOwnershipState","content":"@elizaos/core v1.3.0 / ServerOwnershipState Interface: ServerOwnershipState Interface representing the ownership state of servers.","keywords":"","version":"1.0.17"},{"title":"Interface: ServiceError","type":0,"sectionRef":"#","url":"/api/interfaces/ServiceError","content":"@elizaos/core v1.3.0 / ServiceError Interface: ServiceError Standardized service error type for consistent error handling","keywords":"","version":"1.0.17"},{"title":"Interface: State","type":0,"sectionRef":"#","url":"/api/interfaces/State","content":"","keywords":"","version":"1.0.17"},{"title":"Indexable‚Äã","type":1,"pageTitle":"Interface: State","url":"/api/interfaces/State#indexable","content":" [key: string]: any ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ServiceTypeRegistry","type":0,"sectionRef":"#","url":"/api/interfaces/ServiceTypeRegistry","content":"","keywords":"","version":"1.0.17"},{"title":"Example‚Äã","type":1,"pageTitle":"Interface: ServiceTypeRegistry","url":"/api/interfaces/ServiceTypeRegistry#example","content":" declare module '@elizaos/core' { interface ServiceTypeRegistry { MY_CUSTOM_SERVICE: 'my_custom_service'; } }  ","version":"1.0.17","tagName":"h2"},{"title":"Interface: StateObject","type":0,"sectionRef":"#","url":"/api/interfaces/StateObject","content":"@elizaos/core v1.3.0 / StateObject Interface: StateObject Represents a generic object structure within the agent's state, where keys are strings and values can be any StateValue. This allows for nested objects within the state. It's a fundamental part of the EnhancedState interface.","keywords":"","version":"1.0.17"},{"title":"Interface: TargetInfo","type":0,"sectionRef":"#","url":"/api/interfaces/TargetInfo","content":"@elizaos/core v1.3.0 / TargetInfo Interface: TargetInfo Information describing the target of a message.","keywords":"","version":"1.0.17"},{"title":"Interface: Task","type":0,"sectionRef":"#","url":"/api/interfaces/Task","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/interfaces/Task#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/interfaces/Task#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional. A Universally Unique Identifier for the task. Generated if not provided.  Defined in‚Äã  packages/core/src/types/task.ts:57    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/interfaces/Task#name","content":" name: string  The name of the task, which should correspond to a registered TaskWorker.name.  Defined in‚Äã  packages/core/src/types/task.ts:59    ","version":"1.0.17","tagName":"h3"},{"title":"updatedAt?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/interfaces/Task#updatedat","content":" optional updatedAt: number  Optional. Timestamp of the last update to this task.  Defined in‚Äã  packages/core/src/types/task.ts:61    ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/interfaces/Task#metadata","content":" optional metadata: TaskMetadata  Optional. Metadata associated with the task, conforming to TaskMetadata.  Defined in‚Äã  packages/core/src/types/task.ts:63    ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/interfaces/Task#description","content":" description: string  A human-readable description of what the task does or its purpose.  Defined in‚Äã  packages/core/src/types/task.ts:65    ","version":"1.0.17","tagName":"h3"},{"title":"roomId?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/interfaces/Task#roomid","content":" optional roomId: `${string}-${string}-${string}-${string}-${string}`  Optional. The UUID of the room this task is associated with.  Defined in‚Äã  packages/core/src/types/task.ts:67    ","version":"1.0.17","tagName":"h3"},{"title":"worldId?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/interfaces/Task#worldid","content":" optional worldId: `${string}-${string}-${string}-${string}-${string}`  Optional. The UUID of the world this task is associated with.  Defined in‚Äã  packages/core/src/types/task.ts:69 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TeeAgent","type":0,"sectionRef":"#","url":"/api/interfaces/TeeAgent","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/interfaces/TeeAgent#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/interfaces/TeeAgent#id","content":" id: string  Primary key for the TEE agent registration record (e.g., a UUID or auto-incrementing ID).  Defined in‚Äã  packages/core/src/types/tee.ts:12    ","version":"1.0.17","tagName":"h3"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/interfaces/TeeAgent#agentid","content":" agentId: string  The core identifier of the agent, which can be duplicated across multiple TEE registrations.  Defined in‚Äã  packages/core/src/types/tee.ts:17    ","version":"1.0.17","tagName":"h3"},{"title":"agentName‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/interfaces/TeeAgent#agentname","content":" agentName: string  The human-readable name of the agent.  Defined in‚Äã  packages/core/src/types/tee.ts:19    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/interfaces/TeeAgent#createdat","content":" createdAt: number  Timestamp (e.g., Unix epoch in milliseconds) when this TEE registration was created.  Defined in‚Äã  packages/core/src/types/tee.ts:21    ","version":"1.0.17","tagName":"h3"},{"title":"publicKey‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/interfaces/TeeAgent#publickey","content":" publicKey: string  The public key associated with this specific TEE agent instance/session.  Defined in‚Äã  packages/core/src/types/tee.ts:23    ","version":"1.0.17","tagName":"h3"},{"title":"attestation‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/interfaces/TeeAgent#attestation","content":" attestation: string  The attestation document proving the authenticity and integrity of the TEE instance.  Defined in‚Äã  packages/core/src/types/tee.ts:25 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TaskWorker","type":0,"sectionRef":"#","url":"/api/interfaces/TaskWorker","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TaskWorker","url":"/api/interfaces/TaskWorker#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: TaskWorker","url":"/api/interfaces/TaskWorker#name","content":" name: string  The unique name of the task type this worker handles. This name links Task instances to this worker.  Defined in‚Äã  packages/core/src/types/task.ts:13    ","version":"1.0.17","tagName":"h3"},{"title":"execute()‚Äã","type":1,"pageTitle":"Interface: TaskWorker","url":"/api/interfaces/TaskWorker#execute","content":" execute: (runtime, options, task) =&gt; Promise&lt;void&gt;  The core execution logic for the task. This function is called by the runtime when a task needs to be processed. It receives the AgentRuntime, task-specific options, and the Task object itself.  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ options  ‚Ä¢ task: Task  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/types/task.ts:18    ","version":"1.0.17","tagName":"h3"},{"title":"validate()?‚Äã","type":1,"pageTitle":"Interface: TaskWorker","url":"/api/interfaces/TaskWorker#validate","content":" optional validate: (runtime, message, state) =&gt; Promise&lt;boolean&gt;  Optional validation function that can be used to determine if a task is valid or should be executed, often based on the current message and state. This might be used by an action or evaluator before creating or queueing a task.  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state: State  Returns‚Äã  Promise&lt;boolean&gt;  Defined in‚Äã  packages/core/src/types/task.ts:28 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TeePluginConfig","type":0,"sectionRef":"#","url":"/api/interfaces/TeePluginConfig","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TeePluginConfig","url":"/api/interfaces/TeePluginConfig#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"vendor?‚Äã","type":1,"pageTitle":"Interface: TeePluginConfig","url":"/api/interfaces/TeePluginConfig#vendor","content":" optional vendor: string  Optional. The name or identifier of the TEE vendor (e.g., 'tdx_dstack' from TeeType).  Defined in‚Äã  packages/core/src/types/tee.ts:104    ","version":"1.0.17","tagName":"h3"},{"title":"vendorConfig?‚Äã","type":1,"pageTitle":"Interface: TeePluginConfig","url":"/api/interfaces/TeePluginConfig#vendorconfig","content":" optional vendorConfig: Metadata  Optional. Vendor-specific configuration options, conforming to TeeVendorConfig.  Defined in‚Äã  packages/core/src/types/tee.ts:106 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TestSuite","type":0,"sectionRef":"#","url":"/api/interfaces/TestSuite","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TestSuite","url":"/api/interfaces/TestSuite#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: TestSuite","url":"/api/interfaces/TestSuite#name","content":" name: string  A descriptive name for the test suite, e.g., &quot;Core Functionality Tests&quot;.  Defined in‚Äã  packages/core/src/types/testing.ts:27    ","version":"1.0.17","tagName":"h3"},{"title":"tests‚Äã","type":1,"pageTitle":"Interface: TestSuite","url":"/api/interfaces/TestSuite#tests","content":" tests: TestCase[]  An array of TestCase objects that belong to this suite.  Defined in‚Äã  packages/core/src/types/testing.ts:29 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TestCase","type":0,"sectionRef":"#","url":"/api/interfaces/TestCase","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TestCase","url":"/api/interfaces/TestCase#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: TestCase","url":"/api/interfaces/TestCase#name","content":" name: string  A descriptive name for the test case, e.g., &quot;should respond to greetings&quot;.  Defined in‚Äã  packages/core/src/types/testing.ts:11    ","version":"1.0.17","tagName":"h3"},{"title":"fn()‚Äã","type":1,"pageTitle":"Interface: TestCase","url":"/api/interfaces/TestCase#fn","content":" fn: (runtime) =&gt; void | Promise&lt;void&gt;  The function that executes the test logic. It can be synchronous or asynchronous. It receives the IAgentRuntime to interact with the agent and its services. The function should typically contain assertions to verify expected outcomes.  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  Returns‚Äã  void | Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/types/testing.ts:17 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TokenBalance","type":0,"sectionRef":"#","url":"/api/interfaces/TokenBalance","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: TokenBalance","url":"/api/interfaces/TokenBalance#extended-by","content":" WalletAsset ","version":"1.0.17","tagName":"h2"},{"title":"Interface: TextEmbeddingParams","type":0,"sectionRef":"#","url":"/api/interfaces/TextEmbeddingParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TextEmbeddingParams","url":"/api/interfaces/TextEmbeddingParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TextEmbeddingParams","url":"/api/interfaces/TextEmbeddingParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TextEmbeddingParams","url":"/api/interfaces/TextEmbeddingParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"text‚Äã","type":1,"pageTitle":"Interface: TextEmbeddingParams","url":"/api/interfaces/TextEmbeddingParams#text","content":" text: string  The text to create embeddings for  Defined in‚Äã  packages/core/src/types/model.ts:106 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TextToSpeechParams","type":0,"sectionRef":"#","url":"/api/interfaces/TextToSpeechParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/interfaces/TextToSpeechParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/interfaces/TextToSpeechParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/interfaces/TextToSpeechParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"text‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/interfaces/TextToSpeechParams#text","content":" text: string  The text to convert to speech  Defined in‚Äã  packages/core/src/types/model.ts:156    ","version":"1.0.17","tagName":"h3"},{"title":"voice?‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/interfaces/TextToSpeechParams#voice","content":" optional voice: string  The voice to use  Defined in‚Äã  packages/core/src/types/model.ts:158    ","version":"1.0.17","tagName":"h3"},{"title":"speed?‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/interfaces/TextToSpeechParams#speed","content":" optional speed: number  The speaking speed  Defined in‚Äã  packages/core/src/types/model.ts:160 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TextGenerationParams","type":0,"sectionRef":"#","url":"/api/interfaces/TextGenerationParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/interfaces/TextGenerationParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/interfaces/TextGenerationParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/interfaces/TextGenerationParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/interfaces/TextGenerationParams#prompt","content":" prompt: string  The prompt to generate text from  Defined in‚Äã  packages/core/src/types/model.ts:88    ","version":"1.0.17","tagName":"h3"},{"title":"temperature?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/interfaces/TextGenerationParams#temperature","content":" optional temperature: number  Model temperature (0.0 to 1.0, lower is more deterministic)  Defined in‚Äã  packages/core/src/types/model.ts:90    ","version":"1.0.17","tagName":"h3"},{"title":"maxTokens?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/interfaces/TextGenerationParams#maxtokens","content":" optional maxTokens: number  Maximum number of tokens to generate  Defined in‚Äã  packages/core/src/types/model.ts:92    ","version":"1.0.17","tagName":"h3"},{"title":"stopSequences?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/interfaces/TextGenerationParams#stopsequences","content":" optional stopSequences: string[]  Sequences that should stop generation when encountered  Defined in‚Äã  packages/core/src/types/model.ts:94    ","version":"1.0.17","tagName":"h3"},{"title":"frequencyPenalty?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/interfaces/TextGenerationParams#frequencypenalty","content":" optional frequencyPenalty: number  Frequency penalty to apply  Defined in‚Äã  packages/core/src/types/model.ts:96    ","version":"1.0.17","tagName":"h3"},{"title":"presencePenalty?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/interfaces/TextGenerationParams#presencepenalty","content":" optional presencePenalty: number  Presence penalty to apply  Defined in‚Äã  packages/core/src/types/model.ts:98 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TokenData","type":0,"sectionRef":"#","url":"/api/interfaces/TokenData","content":"@elizaos/core v1.3.0 / TokenData Interface: TokenData Generic representation of token data that can be provided by various services.","keywords":"","version":"1.0.17"},{"title":"Interface: TranscriptionParams","type":0,"sectionRef":"#","url":"/api/interfaces/TranscriptionParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/interfaces/TranscriptionParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/interfaces/TranscriptionParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/interfaces/TranscriptionParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"audioUrl‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/interfaces/TranscriptionParams#audiourl","content":" audioUrl: string  The URL or path of the audio file to transcribe  Defined in‚Äã  packages/core/src/types/model.ts:146    ","version":"1.0.17","tagName":"h3"},{"title":"prompt?‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/interfaces/TranscriptionParams#prompt","content":" optional prompt: string  Optional prompt to guide transcription  Defined in‚Äã  packages/core/src/types/model.ts:148 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TypedService<ConfigType, ResultType>","type":0,"sectionRef":"#","url":"/api/interfaces/TypedService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/interfaces/TypedService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/interfaces/TypedService#type-parameters","content":" ‚Ä¢ ConfigType extends Metadata = Metadata  The configuration type for this service  ‚Ä¢ ResultType = unknown  The result type returned by the service operations  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/interfaces/TypedService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/interfaces/TypedService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/types/service.ts:109    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/interfaces/TypedService#capabilitydescription","content":" abstract capabilityDescription: string  Service name  Inherited from‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/types/service.ts:123    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/interfaces/TypedService#config","content":" optional config: ConfigType  The configuration for this service instance  Overrides‚Äã  Service.config  Defined in‚Äã  packages/core/src/types/service.ts:149  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/interfaces/TypedService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"process()‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/interfaces/TypedService#process","content":" process(input): Promise&lt;ResultType&gt;  Process an input with this service  Parameters‚Äã  ‚Ä¢ input: unknown  The input to process  Returns‚Äã  Promise&lt;ResultType&gt;  A promise resolving to the result  Defined in‚Äã  packages/core/src/types/service.ts:156 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TokenizeTextParams","type":0,"sectionRef":"#","url":"/api/interfaces/TokenizeTextParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TokenizeTextParams","url":"/api/interfaces/TokenizeTextParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TokenizeTextParams","url":"/api/interfaces/TokenizeTextParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TokenizeTextParams","url":"/api/interfaces/TokenizeTextParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: TokenizeTextParams","url":"/api/interfaces/TokenizeTextParams#prompt","content":" prompt: string  The text to tokenize  Defined in‚Äã  packages/core/src/types/model.ts:114    ","version":"1.0.17","tagName":"h3"},{"title":"modelType‚Äã","type":1,"pageTitle":"Interface: TokenizeTextParams","url":"/api/interfaces/TokenizeTextParams#modeltype","content":" modelType: string  The model type to use for tokenization  Defined in‚Äã  packages/core/src/types/model.ts:116 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: UnifiedMemoryOptions","type":0,"sectionRef":"#","url":"/api/interfaces/UnifiedMemoryOptions","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: UnifiedMemoryOptions","url":"/api/interfaces/UnifiedMemoryOptions#extended-by","content":" UnifiedSearchOptions ","version":"1.0.17","tagName":"h2"},{"title":"Interface: UnifiedSearchOptions","type":0,"sectionRef":"#","url":"/api/interfaces/UnifiedSearchOptions","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: UnifiedSearchOptions","url":"/api/interfaces/UnifiedSearchOptions#extends","content":" UnifiedMemoryOptions ","version":"1.0.17","tagName":"h2"},{"title":"Interface: WalletAsset","type":0,"sectionRef":"#","url":"/api/interfaces/WalletAsset","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: WalletAsset","url":"/api/interfaces/WalletAsset#extends","content":" TokenBalance ","version":"1.0.17","tagName":"h2"},{"title":"Interface: VideoProcessingParams","type":0,"sectionRef":"#","url":"/api/interfaces/VideoProcessingParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/interfaces/VideoProcessingParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/interfaces/VideoProcessingParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/interfaces/VideoProcessingParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/types/model.ts:80    ","version":"1.0.17","tagName":"h3"},{"title":"videoUrl‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/interfaces/VideoProcessingParams#videourl","content":" videoUrl: string  The URL or path of the video file to process  Defined in‚Äã  packages/core/src/types/model.ts:178    ","version":"1.0.17","tagName":"h3"},{"title":"processingType‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/interfaces/VideoProcessingParams#processingtype","content":" processingType: string  The type of video processing to perform  Defined in‚Äã  packages/core/src/types/model.ts:180 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: WalletPortfolio","type":0,"sectionRef":"#","url":"/api/interfaces/WalletPortfolio","content":"@elizaos/core v1.3.0 / WalletPortfolio Interface: WalletPortfolio Represents the entire portfolio of assets in a wallet.","keywords":"","version":"1.0.17"},{"title":"Interface: WorldPayload","type":0,"sectionRef":"#","url":"/api/interfaces/WorldPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: WorldPayload","url":"/api/interfaces/WorldPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"v1","type":0,"sectionRef":"#","url":"/api/namespaces/v1","content":"","keywords":"","version":"1.0.17"},{"title":"Index‚Äã","type":1,"pageTitle":"v1","url":"/api/namespaces/v1#index","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Enumerations‚Äã","type":1,"pageTitle":"v1","url":"/api/namespaces/v1#enumerations","content":" GoalStatusModelClassModelProviderName  ","version":"1.0.17","tagName":"h3"},{"title":"Interfaces‚Äã","type":1,"pageTitle":"v1","url":"/api/namespaces/v1#interfaces","content":" ContentConversationExampleActorObjectiveGoalMemoryMessageExampleActionEvaluationExampleEvaluatorRelationshipAccountParticipantRoomIDatabaseAdapter  ","version":"1.0.17","tagName":"h3"},{"title":"Type Aliases‚Äã","type":1,"pageTitle":"v1","url":"/api/namespaces/v1#type-aliases","content":" ActionExampleProviderStateTemplateTypeUUIDModelSettingsImageModelSettingsEmbeddingModelSettingsModelModelsHandlerHandlerCallbackValidatorMediaClientInstanceClientAdapterPluginCharacter  ","version":"1.0.17","tagName":"h3"},{"title":"Functions‚Äã","type":1,"pageTitle":"v1","url":"/api/namespaces/v1#functions","content":" convertContentToV1convertContentToV2fromV2ActionExampletoV2ActionExamplegetActorDetailsformatActorsformatMessagesfromV2ProvidertoV2ProviderfromV2StatetoV2StatecreateTemplateFunctionprocessTemplategetTemplateValuesasUUIDgenerateUuidFromString ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: GoalStatus","type":0,"sectionRef":"#","url":"/api/namespaces/v1/enumerations/GoalStatus","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/api/namespaces/v1/enumerations/GoalStatus#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"DONE‚Äã","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/api/namespaces/v1/enumerations/GoalStatus#done","content":" DONE: &quot;DONE&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:100    ","version":"1.0.17","tagName":"h3"},{"title":"FAILED‚Äã","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/api/namespaces/v1/enumerations/GoalStatus#failed","content":" FAILED: &quot;FAILED&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:101    ","version":"1.0.17","tagName":"h3"},{"title":"IN_PROGRESS‚Äã","type":1,"pageTitle":"Enumeration: GoalStatus","url":"/api/namespaces/v1/enumerations/GoalStatus#in_progress","content":" IN_PROGRESS: &quot;IN_PROGRESS&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:102 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: ModelClass","type":0,"sectionRef":"#","url":"/api/namespaces/v1/enumerations/ModelClass","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: ModelClass","url":"/api/namespaces/v1/enumerations/ModelClass#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"SMALL‚Äã","type":1,"pageTitle":"Enumeration: ModelClass","url":"/api/namespaces/v1/enumerations/ModelClass#small","content":" SMALL: &quot;small&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:132    ","version":"1.0.17","tagName":"h3"},{"title":"MEDIUM‚Äã","type":1,"pageTitle":"Enumeration: ModelClass","url":"/api/namespaces/v1/enumerations/ModelClass#medium","content":" MEDIUM: &quot;medium&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:133    ","version":"1.0.17","tagName":"h3"},{"title":"LARGE‚Äã","type":1,"pageTitle":"Enumeration: ModelClass","url":"/api/namespaces/v1/enumerations/ModelClass#large","content":" LARGE: &quot;large&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:134    ","version":"1.0.17","tagName":"h3"},{"title":"EMBEDDING‚Äã","type":1,"pageTitle":"Enumeration: ModelClass","url":"/api/namespaces/v1/enumerations/ModelClass#embedding","content":" EMBEDDING: &quot;embedding&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:135    ","version":"1.0.17","tagName":"h3"},{"title":"IMAGE‚Äã","type":1,"pageTitle":"Enumeration: ModelClass","url":"/api/namespaces/v1/enumerations/ModelClass#image","content":" IMAGE: &quot;image&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:136 ","version":"1.0.17","tagName":"h3"},{"title":"Function: asUUID()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/asUUID","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/namespaces/v1/functions/asUUID#parameters","content":" ‚Ä¢ id: string  The string UUID to validate and cast  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/namespaces/v1/functions/asUUID#returns","content":" `${string}-${string}-${string}-${string}-${string}`  The same UUID with branded type information  ","version":"1.0.17","tagName":"h2"},{"title":"Throws‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/namespaces/v1/functions/asUUID#throws","content":" Error if the UUID format is invalid  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/namespaces/v1/functions/asUUID#defined-in","content":" packages/core/src/specs/v1/uuid.ts:18 ","version":"1.0.17","tagName":"h2"},{"title":"Function: convertContentToV2()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/convertContentToV2","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: convertContentToV2()","url":"/api/namespaces/v1/functions/convertContentToV2#parameters","content":" ‚Ä¢ content: Content  V1 Content object  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: convertContentToV2()","url":"/api/namespaces/v1/functions/convertContentToV2#returns","content":" Content  Content compatible with V2  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: convertContentToV2()","url":"/api/namespaces/v1/functions/convertContentToV2#defined-in","content":" packages/core/src/specs/v1/actionExample.ts:41 ","version":"1.0.17","tagName":"h2"},{"title":"Function: convertContentToV1()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/convertContentToV1","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: convertContentToV1()","url":"/api/namespaces/v1/functions/convertContentToV1#parameters","content":" ‚Ä¢ content: Content  V2 content object  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: convertContentToV1()","url":"/api/namespaces/v1/functions/convertContentToV1#returns","content":" Content  Content compatible with V1  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: convertContentToV1()","url":"/api/namespaces/v1/functions/convertContentToV1#defined-in","content":" packages/core/src/specs/v1/actionExample.ts:17 ","version":"1.0.17","tagName":"h2"},{"title":"Enumeration: ModelProviderName","type":0,"sectionRef":"#","url":"/api/namespaces/v1/enumerations/ModelProviderName","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"OPENAI‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#openai","content":" OPENAI: &quot;openai&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:244    ","version":"1.0.17","tagName":"h3"},{"title":"ETERNALAI‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#eternalai","content":" ETERNALAI: &quot;eternalai&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:245    ","version":"1.0.17","tagName":"h3"},{"title":"ANTHROPIC‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#anthropic","content":" ANTHROPIC: &quot;anthropic&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:246    ","version":"1.0.17","tagName":"h3"},{"title":"GROK‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#grok","content":" GROK: &quot;grok&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:247    ","version":"1.0.17","tagName":"h3"},{"title":"GROQ‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#groq","content":" GROQ: &quot;groq&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:248    ","version":"1.0.17","tagName":"h3"},{"title":"LLAMACLOUD‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#llamacloud","content":" LLAMACLOUD: &quot;llama_cloud&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:249    ","version":"1.0.17","tagName":"h3"},{"title":"TOGETHER‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#together","content":" TOGETHER: &quot;together&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:250    ","version":"1.0.17","tagName":"h3"},{"title":"LLAMALOCAL‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#llamalocal","content":" LLAMALOCAL: &quot;llama_local&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:251    ","version":"1.0.17","tagName":"h3"},{"title":"LMSTUDIO‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#lmstudio","content":" LMSTUDIO: &quot;lmstudio&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:252    ","version":"1.0.17","tagName":"h3"},{"title":"GOOGLE‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#google","content":" GOOGLE: &quot;google&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:253    ","version":"1.0.17","tagName":"h3"},{"title":"MISTRAL‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#mistral","content":" MISTRAL: &quot;mistral&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:254    ","version":"1.0.17","tagName":"h3"},{"title":"CLAUDE_VERTEX‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#claude_vertex","content":" CLAUDE_VERTEX: &quot;claude_vertex&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:255    ","version":"1.0.17","tagName":"h3"},{"title":"REDPILL‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#redpill","content":" REDPILL: &quot;redpill&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:256    ","version":"1.0.17","tagName":"h3"},{"title":"OPENROUTER‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#openrouter","content":" OPENROUTER: &quot;openrouter&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:257    ","version":"1.0.17","tagName":"h3"},{"title":"OLLAMA‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#ollama","content":" OLLAMA: &quot;ollama&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:258    ","version":"1.0.17","tagName":"h3"},{"title":"HEURIST‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#heurist","content":" HEURIST: &quot;heurist&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:259    ","version":"1.0.17","tagName":"h3"},{"title":"GALADRIEL‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#galadriel","content":" GALADRIEL: &quot;galadriel&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:260    ","version":"1.0.17","tagName":"h3"},{"title":"FAL‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#fal","content":" FAL: &quot;falai&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:261    ","version":"1.0.17","tagName":"h3"},{"title":"GAIANET‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#gaianet","content":" GAIANET: &quot;gaianet&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:262    ","version":"1.0.17","tagName":"h3"},{"title":"ALI_BAILIAN‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#ali_bailian","content":" ALI_BAILIAN: &quot;ali_bailian&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:263    ","version":"1.0.17","tagName":"h3"},{"title":"VOLENGINE‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#volengine","content":" VOLENGINE: &quot;volengine&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:264    ","version":"1.0.17","tagName":"h3"},{"title":"NANOGPT‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#nanogpt","content":" NANOGPT: &quot;nanogpt&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:265    ","version":"1.0.17","tagName":"h3"},{"title":"HYPERBOLIC‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#hyperbolic","content":" HYPERBOLIC: &quot;hyperbolic&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:266    ","version":"1.0.17","tagName":"h3"},{"title":"VENICE‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#venice","content":" VENICE: &quot;venice&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:267    ","version":"1.0.17","tagName":"h3"},{"title":"NVIDIA‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#nvidia","content":" NVIDIA: &quot;nvidia&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:268    ","version":"1.0.17","tagName":"h3"},{"title":"NINETEEN_AI‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#nineteen_ai","content":" NINETEEN_AI: &quot;nineteen_ai&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:269    ","version":"1.0.17","tagName":"h3"},{"title":"AKASH_CHAT_API‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#akash_chat_api","content":" AKASH_CHAT_API: &quot;akash_chat_api&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:270    ","version":"1.0.17","tagName":"h3"},{"title":"LIVEPEER‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#livepeer","content":" LIVEPEER: &quot;livepeer&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:271    ","version":"1.0.17","tagName":"h3"},{"title":"LETZAI‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#letzai","content":" LETZAI: &quot;letzai&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:272    ","version":"1.0.17","tagName":"h3"},{"title":"DEEPSEEK‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#deepseek","content":" DEEPSEEK: &quot;deepseek&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:273    ","version":"1.0.17","tagName":"h3"},{"title":"INFERA‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#infera","content":" INFERA: &quot;infera&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:274    ","version":"1.0.17","tagName":"h3"},{"title":"BEDROCK‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#bedrock","content":" BEDROCK: &quot;bedrock&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:275    ","version":"1.0.17","tagName":"h3"},{"title":"ATOMA‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#atoma","content":" ATOMA: &quot;atoma&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:276    ","version":"1.0.17","tagName":"h3"},{"title":"SECRETAI‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#secretai","content":" SECRETAI: &quot;secret_ai&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:277    ","version":"1.0.17","tagName":"h3"},{"title":"NEARAI‚Äã","type":1,"pageTitle":"Enumeration: ModelProviderName","url":"/api/namespaces/v1/enumerations/ModelProviderName#nearai","content":" NEARAI: &quot;nearai&quot;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:278 ","version":"1.0.17","tagName":"h3"},{"title":"Function: createTemplateFunction()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/createTemplateFunction","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createTemplateFunction()","url":"/api/namespaces/v1/functions/createTemplateFunction#parameters","content":" ‚Ä¢ template: TemplateType  The v1 template (string or function)  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createTemplateFunction()","url":"/api/namespaces/v1/functions/createTemplateFunction#returns","content":" Function  A function that processes the template with the given state  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createTemplateFunction()","url":"/api/namespaces/v1/functions/createTemplateFunction#parameters-1","content":" ‚Ä¢ state: State  ","version":"1.0.17","tagName":"h3"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createTemplateFunction()","url":"/api/namespaces/v1/functions/createTemplateFunction#returns-1","content":" string  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createTemplateFunction()","url":"/api/namespaces/v1/functions/createTemplateFunction#defined-in","content":" packages/core/src/specs/v1/templates.ts:23 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatMessages()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/formatMessages","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatMessages()","url":"/api/namespaces/v1/functions/formatMessages#parameters","content":" ‚Ä¢ params  The parameters object  ‚Ä¢ params.messages: Memory[]  list of messages  ‚Ä¢ params.actors: Actor[]  list of actors  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatMessages()","url":"/api/namespaces/v1/functions/formatMessages#returns","content":" string  string  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatMessages()","url":"/api/namespaces/v1/functions/formatMessages#defined-in","content":" packages/core/src/specs/v1/messages.ts:40 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatActors()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/formatActors","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatActors()","url":"/api/namespaces/v1/functions/formatActors#parameters","content":" ‚Ä¢ actors  list of actors  ‚Ä¢ actors.actors: Actor[]  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatActors()","url":"/api/namespaces/v1/functions/formatActors#returns","content":" string  string  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatActors()","url":"/api/namespaces/v1/functions/formatActors#defined-in","content":" packages/core/src/specs/v1/messages.ts:26 ","version":"1.0.17","tagName":"h2"},{"title":"Function: fromV2ActionExample()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/fromV2ActionExample","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: fromV2ActionExample()","url":"/api/namespaces/v1/functions/fromV2ActionExample#parameters","content":" ‚Ä¢ exampleV2: ActionExample  The V2 action example to convert  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: fromV2ActionExample()","url":"/api/namespaces/v1/functions/fromV2ActionExample#returns","content":" ActionExample  V1 compatible ActionExample  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: fromV2ActionExample()","url":"/api/namespaces/v1/functions/fromV2ActionExample#defined-in","content":" packages/core/src/specs/v1/actionExample.ts:63 ","version":"1.0.17","tagName":"h2"},{"title":"Function: fromV2Provider()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/fromV2Provider","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: fromV2Provider()","url":"/api/namespaces/v1/functions/fromV2Provider#parameters","content":" ‚Ä¢ providerV2: Provider  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: fromV2Provider()","url":"/api/namespaces/v1/functions/fromV2Provider#returns","content":" Provider  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: fromV2Provider()","url":"/api/namespaces/v1/functions/fromV2Provider#defined-in","content":" packages/core/src/specs/v1/provider.ts:15 ","version":"1.0.17","tagName":"h2"},{"title":"Function: fromV2State()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/fromV2State","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: fromV2State()","url":"/api/namespaces/v1/functions/fromV2State#parameters","content":" ‚Ä¢ stateV2: State  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: fromV2State()","url":"/api/namespaces/v1/functions/fromV2State#returns","content":" State  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: fromV2State()","url":"/api/namespaces/v1/functions/fromV2State#defined-in","content":" packages/core/src/specs/v1/state.ts:27 ","version":"1.0.17","tagName":"h2"},{"title":"Function: generateUuidFromString()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/generateUuidFromString","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: generateUuidFromString()","url":"/api/namespaces/v1/functions/generateUuidFromString#parameters","content":" ‚Ä¢ input: string  The string to convert to a UUID  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: generateUuidFromString()","url":"/api/namespaces/v1/functions/generateUuidFromString#returns","content":" `${string}-${string}-${string}-${string}-${string}`  A UUID generated from the input string  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: generateUuidFromString()","url":"/api/namespaces/v1/functions/generateUuidFromString#defined-in","content":" packages/core/src/specs/v1/uuid.ts:33 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getTemplateValues()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/getTemplateValues","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Function: getTemplateValues()","url":"/api/namespaces/v1/functions/getTemplateValues#type-parameters","content":" ‚Ä¢ T extends TemplateValues  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getTemplateValues()","url":"/api/namespaces/v1/functions/getTemplateValues#parameters","content":" ‚Ä¢ state: State  The state containing the values  ‚Ä¢ defaultValues?: Partial&lt;T&gt;  Optional default values to use if values are missing  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getTemplateValues()","url":"/api/namespaces/v1/functions/getTemplateValues#returns","content":" T  The values object with type information  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getTemplateValues()","url":"/api/namespaces/v1/functions/getTemplateValues#defined-in","content":" packages/core/src/specs/v1/templates.ts:69 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getActorDetails()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/getActorDetails","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getActorDetails()","url":"/api/namespaces/v1/functions/getActorDetails#parameters","content":" ‚Ä¢ __namedParameters  ‚Ä¢ __namedParameters.runtime: IAgentRuntime  ‚Ä¢ __namedParameters.roomId: `${string}-${string}-${string}-${string}-${string}`  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getActorDetails()","url":"/api/namespaces/v1/functions/getActorDetails#returns","content":" Promise&lt;void&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getActorDetails()","url":"/api/namespaces/v1/functions/getActorDetails#defined-in","content":" packages/core/src/specs/v1/messages.ts:11 ","version":"1.0.17","tagName":"h2"},{"title":"Function: processTemplate()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/processTemplate","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: processTemplate()","url":"/api/namespaces/v1/functions/processTemplate#parameters","content":" ‚Ä¢ template: TemplateType  The template to process (string or function)  ‚Ä¢ state: State  The state to use for processing  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: processTemplate()","url":"/api/namespaces/v1/functions/processTemplate#returns","content":" string  The processed template string  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: processTemplate()","url":"/api/namespaces/v1/functions/processTemplate#defined-in","content":" packages/core/src/specs/v1/templates.ts:45 ","version":"1.0.17","tagName":"h2"},{"title":"Function: toV2ActionExample()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/toV2ActionExample","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: toV2ActionExample()","url":"/api/namespaces/v1/functions/toV2ActionExample#parameters","content":" ‚Ä¢ example: ActionExample  The V1 action example to convert  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: toV2ActionExample()","url":"/api/namespaces/v1/functions/toV2ActionExample#returns","content":" ActionExample  V2 compatible ActionExample  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: toV2ActionExample()","url":"/api/namespaces/v1/functions/toV2ActionExample#defined-in","content":" packages/core/src/specs/v1/actionExample.ts:81 ","version":"1.0.17","tagName":"h2"},{"title":"Function: toV2Provider()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/toV2Provider","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: toV2Provider()","url":"/api/namespaces/v1/functions/toV2Provider#parameters","content":" ‚Ä¢ provider: Provider  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: toV2Provider()","url":"/api/namespaces/v1/functions/toV2Provider#returns","content":" Provider  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: toV2Provider()","url":"/api/namespaces/v1/functions/toV2Provider#defined-in","content":" packages/core/src/specs/v1/provider.ts:44 ","version":"1.0.17","tagName":"h2"},{"title":"Function: toV2State()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/functions/toV2State","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: toV2State()","url":"/api/namespaces/v1/functions/toV2State#parameters","content":" ‚Ä¢ state: State  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: toV2State()","url":"/api/namespaces/v1/functions/toV2State#returns","content":" State  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: toV2State()","url":"/api/namespaces/v1/functions/toV2State#defined-in","content":" packages/core/src/specs/v1/state.ts:50 ","version":"1.0.17","tagName":"h2"},{"title":"Interface: Account","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Account","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Account","url":"/api/namespaces/v1/interfaces/Account#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: Account","url":"/api/namespaces/v1/interfaces/Account#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier  Defined in‚Äã  packages/core/src/specs/v1/types.ts:559    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Account","url":"/api/namespaces/v1/interfaces/Account#name","content":" name: string  Display name  Defined in‚Äã  packages/core/src/specs/v1/types.ts:562    ","version":"1.0.17","tagName":"h3"},{"title":"username‚Äã","type":1,"pageTitle":"Interface: Account","url":"/api/namespaces/v1/interfaces/Account#username","content":" username: string  Username  Defined in‚Äã  packages/core/src/specs/v1/types.ts:565    ","version":"1.0.17","tagName":"h3"},{"title":"details?‚Äã","type":1,"pageTitle":"Interface: Account","url":"/api/namespaces/v1/interfaces/Account#details","content":" optional details: object  Optional additional details  Index Signature‚Äã  [key: string]: any  Defined in‚Äã  packages/core/src/specs/v1/types.ts:568    ","version":"1.0.17","tagName":"h3"},{"title":"email?‚Äã","type":1,"pageTitle":"Interface: Account","url":"/api/namespaces/v1/interfaces/Account#email","content":" optional email: string  Optional email  Defined in‚Äã  packages/core/src/specs/v1/types.ts:571    ","version":"1.0.17","tagName":"h3"},{"title":"avatarUrl?‚Äã","type":1,"pageTitle":"Interface: Account","url":"/api/namespaces/v1/interfaces/Account#avatarurl","content":" optional avatarUrl: string  Optional avatar URL  Defined in‚Äã  packages/core/src/specs/v1/types.ts:574 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Actor","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Actor","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Actor","url":"/api/namespaces/v1/interfaces/Actor#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Actor","url":"/api/namespaces/v1/interfaces/Actor#name","content":" name: string  Display name  Defined in‚Äã  packages/core/src/specs/v1/types.ts:61    ","version":"1.0.17","tagName":"h3"},{"title":"username‚Äã","type":1,"pageTitle":"Interface: Actor","url":"/api/namespaces/v1/interfaces/Actor#username","content":" username: string  Username/handle  Defined in‚Äã  packages/core/src/specs/v1/types.ts:64    ","version":"1.0.17","tagName":"h3"},{"title":"details‚Äã","type":1,"pageTitle":"Interface: Actor","url":"/api/namespaces/v1/interfaces/Actor#details","content":" details: object  Additional profile details  tagline‚Äã  tagline: string  Short profile tagline  summary‚Äã  summary: string  Longer profile summary  quote‚Äã  quote: string  Favorite quote  Defined in‚Äã  packages/core/src/specs/v1/types.ts:67    ","version":"1.0.17","tagName":"h3"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: Actor","url":"/api/namespaces/v1/interfaces/Actor#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier  Defined in‚Äã  packages/core/src/specs/v1/types.ts:79 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Action","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Action","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v1/interfaces/Action#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"similes‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v1/interfaces/Action#similes","content":" similes: string[]  Similar action descriptions  Defined in‚Äã  packages/core/src/specs/v1/types.ts:444    ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v1/interfaces/Action#description","content":" description: string  Detailed description  Defined in‚Äã  packages/core/src/specs/v1/types.ts:447    ","version":"1.0.17","tagName":"h3"},{"title":"examples‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v1/interfaces/Action#examples","content":" examples: ActionExample[][]  Example usages  Defined in‚Äã  packages/core/src/specs/v1/types.ts:450    ","version":"1.0.17","tagName":"h3"},{"title":"handler‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v1/interfaces/Action#handler","content":" handler: Handler  Handler function  Defined in‚Äã  packages/core/src/specs/v1/types.ts:453    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v1/interfaces/Action#name","content":" name: string  Action name  Defined in‚Äã  packages/core/src/specs/v1/types.ts:456    ","version":"1.0.17","tagName":"h3"},{"title":"validate‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v1/interfaces/Action#validate","content":" validate: Validator  Validation function  Defined in‚Äã  packages/core/src/specs/v1/types.ts:459    ","version":"1.0.17","tagName":"h3"},{"title":"suppressInitialMessage?‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v1/interfaces/Action#suppressinitialmessage","content":" optional suppressInitialMessage: boolean  Whether to suppress the initial message when this action is used  Defined in‚Äã  packages/core/src/specs/v1/types.ts:462 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Content","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Content","content":"","keywords":"","version":"1.0.17"},{"title":"Indexable‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v1/interfaces/Content#indexable","content":" [key: string]: unknown  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v1/interfaces/Content#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"text‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v1/interfaces/Content#text","content":" text: string  The main text content  Defined in‚Äã  packages/core/src/specs/v1/types.ts:13    ","version":"1.0.17","tagName":"h3"},{"title":"action?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v1/interfaces/Content#action","content":" optional action: string  Optional action associated with the message  Defined in‚Äã  packages/core/src/specs/v1/types.ts:16    ","version":"1.0.17","tagName":"h3"},{"title":"source?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v1/interfaces/Content#source","content":" optional source: string  Optional source/origin of the content  Defined in‚Äã  packages/core/src/specs/v1/types.ts:19    ","version":"1.0.17","tagName":"h3"},{"title":"url?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v1/interfaces/Content#url","content":" optional url: string  URL of the original message/post (e.g. tweet URL, Discord message link)  Defined in‚Äã  packages/core/src/specs/v1/types.ts:22    ","version":"1.0.17","tagName":"h3"},{"title":"inReplyTo?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v1/interfaces/Content#inreplyto","content":" optional inReplyTo: `${string}-${string}-${string}-${string}-${string}`  UUID of parent message if this is a reply/thread  Defined in‚Äã  packages/core/src/specs/v1/types.ts:25    ","version":"1.0.17","tagName":"h3"},{"title":"attachments?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v1/interfaces/Content#attachments","content":" optional attachments: Media[]  Array of media attachments  Defined in‚Äã  packages/core/src/specs/v1/types.ts:28 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: EvaluationExample","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/EvaluationExample","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/namespaces/v1/interfaces/EvaluationExample#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"context‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/namespaces/v1/interfaces/EvaluationExample#context","content":" context: string  Evaluation context  Defined in‚Äã  packages/core/src/specs/v1/types.ts:470    ","version":"1.0.17","tagName":"h3"},{"title":"messages‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/namespaces/v1/interfaces/EvaluationExample#messages","content":" messages: ActionExample[]  Example messages  Defined in‚Äã  packages/core/src/specs/v1/types.ts:473    ","version":"1.0.17","tagName":"h3"},{"title":"outcome‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/namespaces/v1/interfaces/EvaluationExample#outcome","content":" outcome: string  Expected outcome  Defined in‚Äã  packages/core/src/specs/v1/types.ts:476 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ConversationExample","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/ConversationExample","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ConversationExample","url":"/api/namespaces/v1/interfaces/ConversationExample#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"userId‚Äã","type":1,"pageTitle":"Interface: ConversationExample","url":"/api/namespaces/v1/interfaces/ConversationExample#userid","content":" userId: `${string}-${string}-${string}-${string}-${string}`  UUID of user in conversation  Defined in‚Äã  packages/core/src/specs/v1/types.ts:50    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: ConversationExample","url":"/api/namespaces/v1/interfaces/ConversationExample#content","content":" content: Content  Content of the conversation  Defined in‚Äã  packages/core/src/specs/v1/types.ts:53 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Evaluator","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Evaluator","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v1/interfaces/Evaluator#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"alwaysRun?‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v1/interfaces/Evaluator#alwaysrun","content":" optional alwaysRun: boolean  Whether to always run  Defined in‚Äã  packages/core/src/specs/v1/types.ts:484    ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v1/interfaces/Evaluator#description","content":" description: string  Detailed description  Defined in‚Äã  packages/core/src/specs/v1/types.ts:487    ","version":"1.0.17","tagName":"h3"},{"title":"similes‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v1/interfaces/Evaluator#similes","content":" similes: string[]  Similar evaluator descriptions  Defined in‚Äã  packages/core/src/specs/v1/types.ts:490    ","version":"1.0.17","tagName":"h3"},{"title":"examples‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v1/interfaces/Evaluator#examples","content":" examples: EvaluationExample[]  Example evaluations  Defined in‚Äã  packages/core/src/specs/v1/types.ts:493    ","version":"1.0.17","tagName":"h3"},{"title":"handler‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v1/interfaces/Evaluator#handler","content":" handler: Handler  Handler function  Defined in‚Äã  packages/core/src/specs/v1/types.ts:496    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v1/interfaces/Evaluator#name","content":" name: string  Evaluator name  Defined in‚Äã  packages/core/src/specs/v1/types.ts:499    ","version":"1.0.17","tagName":"h3"},{"title":"validate‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v1/interfaces/Evaluator#validate","content":" validate: Validator  Validation function  Defined in‚Äã  packages/core/src/specs/v1/types.ts:502 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Goal","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Goal","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Goal","url":"/api/namespaces/v1/interfaces/Goal#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Goal","url":"/api/namespaces/v1/interfaces/Goal#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Defined in‚Äã  packages/core/src/specs/v1/types.ts:110    ","version":"1.0.17","tagName":"h3"},{"title":"roomId‚Äã","type":1,"pageTitle":"Interface: Goal","url":"/api/namespaces/v1/interfaces/Goal#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Room ID where goal exists  Defined in‚Äã  packages/core/src/specs/v1/types.ts:113    ","version":"1.0.17","tagName":"h3"},{"title":"userId‚Äã","type":1,"pageTitle":"Interface: Goal","url":"/api/namespaces/v1/interfaces/Goal#userid","content":" userId: `${string}-${string}-${string}-${string}-${string}`  User ID of goal owner  Defined in‚Äã  packages/core/src/specs/v1/types.ts:116    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Goal","url":"/api/namespaces/v1/interfaces/Goal#name","content":" name: string  Name/title of the goal  Defined in‚Äã  packages/core/src/specs/v1/types.ts:119    ","version":"1.0.17","tagName":"h3"},{"title":"status‚Äã","type":1,"pageTitle":"Interface: Goal","url":"/api/namespaces/v1/interfaces/Goal#status","content":" status: GoalStatus  Current status  Defined in‚Äã  packages/core/src/specs/v1/types.ts:122    ","version":"1.0.17","tagName":"h3"},{"title":"objectives‚Äã","type":1,"pageTitle":"Interface: Goal","url":"/api/namespaces/v1/interfaces/Goal#objectives","content":" objectives: Objective[]  Component objectives  Defined in‚Äã  packages/core/src/specs/v1/types.ts:125 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: MessageExample","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/MessageExample","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: MessageExample","url":"/api/namespaces/v1/interfaces/MessageExample#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"user‚Äã","type":1,"pageTitle":"Interface: MessageExample","url":"/api/namespaces/v1/interfaces/MessageExample#user","content":" user: string  Associated user  Defined in‚Äã  packages/core/src/specs/v1/types.ts:408    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: MessageExample","url":"/api/namespaces/v1/interfaces/MessageExample#content","content":" content: Content  Message content  Defined in‚Äã  packages/core/src/specs/v1/types.ts:411 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Memory","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Memory","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Defined in‚Äã  packages/core/src/specs/v1/types.ts:376    ","version":"1.0.17","tagName":"h3"},{"title":"userId‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#userid","content":" userId: `${string}-${string}-${string}-${string}-${string}`  Associated user ID  Defined in‚Äã  packages/core/src/specs/v1/types.ts:379    ","version":"1.0.17","tagName":"h3"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#agentid","content":" agentId: `${string}-${string}-${string}-${string}-${string}`  Associated agent ID  Defined in‚Äã  packages/core/src/specs/v1/types.ts:382    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#createdat","content":" optional createdAt: number  Optional creation timestamp  Defined in‚Äã  packages/core/src/specs/v1/types.ts:385    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#content","content":" content: Content  Memory content  Defined in‚Äã  packages/core/src/specs/v1/types.ts:388    ","version":"1.0.17","tagName":"h3"},{"title":"embedding?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#embedding","content":" optional embedding: number[]  Optional embedding vector  Defined in‚Äã  packages/core/src/specs/v1/types.ts:391    ","version":"1.0.17","tagName":"h3"},{"title":"roomId‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Associated room ID  Defined in‚Äã  packages/core/src/specs/v1/types.ts:394    ","version":"1.0.17","tagName":"h3"},{"title":"unique?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#unique","content":" optional unique: boolean  Whether memory is unique  Defined in‚Äã  packages/core/src/specs/v1/types.ts:397    ","version":"1.0.17","tagName":"h3"},{"title":"similarity?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v1/interfaces/Memory#similarity","content":" optional similarity: number  Embedding similarity score  Defined in‚Äã  packages/core/src/specs/v1/types.ts:400 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: IDatabaseAdapter","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/IDatabaseAdapter","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v1/interfaces/IDatabaseAdapter#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"db‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v1/interfaces/IDatabaseAdapter#db","content":" db: any  Database instance  Defined in‚Äã  packages/core/src/specs/v1/types.ts:1003  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v1/interfaces/IDatabaseAdapter#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"init()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v1/interfaces/IDatabaseAdapter#init","content":" init(): Promise&lt;void&gt;  Optional initialization  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:1006    ","version":"1.0.17","tagName":"h3"},{"title":"close()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v1/interfaces/IDatabaseAdapter#close","content":" close(): Promise&lt;void&gt;  Close database connection  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:1009    ","version":"1.0.17","tagName":"h3"},{"title":"getAccountById()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v1/interfaces/IDatabaseAdapter#getaccountbyid","content":" getAccountById(userId): Promise&lt;Account&gt;  Get account by ID  Parameters‚Äã  ‚Ä¢ userId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Account&gt;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:1012    ","version":"1.0.17","tagName":"h3"},{"title":"createAccount()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v1/interfaces/IDatabaseAdapter#createaccount","content":" createAccount(account): Promise&lt;boolean&gt;  Create new account  Parameters‚Äã  ‚Ä¢ account: Account  Returns‚Äã  Promise&lt;boolean&gt;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:1015    ","version":"1.0.17","tagName":"h3"},{"title":"getMemories()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v1/interfaces/IDatabaseAdapter#getmemories","content":" getMemories(params): Promise&lt;Memory[]&gt;  Get memories matching criteria  Parameters‚Äã  ‚Ä¢ params  ‚Ä¢ params.roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.count?: number  ‚Ä¢ params.unique?: boolean  ‚Ä¢ params.tableName: string  ‚Ä¢ params.agentId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.start?: number  ‚Ä¢ params.end?: number  Returns‚Äã  Promise&lt;Memory[]&gt;  Defined in‚Äã  packages/core/src/specs/v1/types.ts:1018 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Objective","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Objective","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Objective","url":"/api/namespaces/v1/interfaces/Objective#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Objective","url":"/api/namespaces/v1/interfaces/Objective#id","content":" optional id: string  Optional unique identifier  Defined in‚Äã  packages/core/src/specs/v1/types.ts:87    ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Interface: Objective","url":"/api/namespaces/v1/interfaces/Objective#description","content":" description: string  Description of what needs to be achieved  Defined in‚Äã  packages/core/src/specs/v1/types.ts:90    ","version":"1.0.17","tagName":"h3"},{"title":"completed‚Äã","type":1,"pageTitle":"Interface: Objective","url":"/api/namespaces/v1/interfaces/Objective#completed","content":" completed: boolean  Whether objective is completed  Defined in‚Äã  packages/core/src/specs/v1/types.ts:93 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Participant","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Participant","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Participant","url":"/api/namespaces/v1/interfaces/Participant#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: Participant","url":"/api/namespaces/v1/interfaces/Participant#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier  Defined in‚Äã  packages/core/src/specs/v1/types.ts:582    ","version":"1.0.17","tagName":"h3"},{"title":"account‚Äã","type":1,"pageTitle":"Interface: Participant","url":"/api/namespaces/v1/interfaces/Participant#account","content":" account: Account  Associated account  Defined in‚Äã  packages/core/src/specs/v1/types.ts:585 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Room","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Room","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Room","url":"/api/namespaces/v1/interfaces/Room#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: Room","url":"/api/namespaces/v1/interfaces/Room#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier  Defined in‚Äã  packages/core/src/specs/v1/types.ts:593    ","version":"1.0.17","tagName":"h3"},{"title":"participants‚Äã","type":1,"pageTitle":"Interface: Room","url":"/api/namespaces/v1/interfaces/Room#participants","content":" participants: Participant[]  Room participants  Defined in‚Äã  packages/core/src/specs/v1/types.ts:596 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Relationship","type":0,"sectionRef":"#","url":"/api/namespaces/v1/interfaces/Relationship","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v1/interfaces/Relationship#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v1/interfaces/Relationship#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier  Defined in‚Äã  packages/core/src/specs/v1/types.ts:533    ","version":"1.0.17","tagName":"h3"},{"title":"userA‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v1/interfaces/Relationship#usera","content":" userA: `${string}-${string}-${string}-${string}-${string}`  First user ID  Defined in‚Äã  packages/core/src/specs/v1/types.ts:536    ","version":"1.0.17","tagName":"h3"},{"title":"userB‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v1/interfaces/Relationship#userb","content":" userB: `${string}-${string}-${string}-${string}-${string}`  Second user ID  Defined in‚Äã  packages/core/src/specs/v1/types.ts:539    ","version":"1.0.17","tagName":"h3"},{"title":"userId‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v1/interfaces/Relationship#userid","content":" userId: `${string}-${string}-${string}-${string}-${string}`  Primary user ID  Defined in‚Äã  packages/core/src/specs/v1/types.ts:542    ","version":"1.0.17","tagName":"h3"},{"title":"roomId‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v1/interfaces/Relationship#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Associated room ID  Defined in‚Äã  packages/core/src/specs/v1/types.ts:545    ","version":"1.0.17","tagName":"h3"},{"title":"status‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v1/interfaces/Relationship#status","content":" status: string  Relationship status  Defined in‚Äã  packages/core/src/specs/v1/types.ts:548    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt?‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v1/interfaces/Relationship#createdat","content":" optional createdAt: string  Optional creation timestamp  Defined in‚Äã  packages/core/src/specs/v1/types.ts:551 ","version":"1.0.17","tagName":"h3"},{"title":"Type Alias: ActionExample","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/ActionExample","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ActionExample","url":"/api/namespaces/v1/type-aliases/ActionExample#defined-in","content":" packages/core/src/specs/v1/actionExample.ts:8 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Adapter","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Adapter","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: Adapter","url":"/api/namespaces/v1/type-aliases/Adapter#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"init()‚Äã","type":1,"pageTitle":"Type Alias: Adapter","url":"/api/namespaces/v1/type-aliases/Adapter#init","content":" init: (runtime) =&gt; IDatabaseAdapter &amp; IDatabaseCacheAdapter  Initialize the adapter  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  Returns‚Äã  IDatabaseAdapter &amp; IDatabaseCacheAdapter  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Adapter","url":"/api/namespaces/v1/type-aliases/Adapter#defined-in","content":" packages/core/src/specs/v1/types.ts:653 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Client","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Client","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: Client","url":"/api/namespaces/v1/type-aliases/Client#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Type Alias: Client","url":"/api/namespaces/v1/type-aliases/Client#name","content":" name: string  Client name  ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Type Alias: Client","url":"/api/namespaces/v1/type-aliases/Client#config","content":" optional config: object  Client configuration  Index Signature‚Äã  [key: string]: any  ","version":"1.0.17","tagName":"h3"},{"title":"start()‚Äã","type":1,"pageTitle":"Type Alias: Client","url":"/api/namespaces/v1/type-aliases/Client#start","content":" start: (runtime) =&gt; Promise&lt;ClientInstance&gt;  Start client connection  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  Returns‚Äã  Promise&lt;ClientInstance&gt;  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Client","url":"/api/namespaces/v1/type-aliases/Client#defined-in","content":" packages/core/src/specs/v1/types.ts:639 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ClientInstance","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/ClientInstance","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: ClientInstance","url":"/api/namespaces/v1/type-aliases/ClientInstance#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"stop()‚Äã","type":1,"pageTitle":"Type Alias: ClientInstance","url":"/api/namespaces/v1/type-aliases/ClientInstance#stop","content":" stop: (runtime) =&gt; Promise&lt;unknown&gt;  Stop client connection  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ClientInstance","url":"/api/namespaces/v1/type-aliases/ClientInstance#defined-in","content":" packages/core/src/specs/v1/types.ts:628 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: EmbeddingModelSettings","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/EmbeddingModelSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: EmbeddingModelSettings","url":"/api/namespaces/v1/type-aliases/EmbeddingModelSettings#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Type Alias: EmbeddingModelSettings","url":"/api/namespaces/v1/type-aliases/EmbeddingModelSettings#name","content":" name: string  ","version":"1.0.17","tagName":"h3"},{"title":"dimensions?‚Äã","type":1,"pageTitle":"Type Alias: EmbeddingModelSettings","url":"/api/namespaces/v1/type-aliases/EmbeddingModelSettings#dimensions","content":" optional dimensions: number  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: EmbeddingModelSettings","url":"/api/namespaces/v1/type-aliases/EmbeddingModelSettings#defined-in","content":" packages/core/src/specs/v1/types.ts:178 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Handler()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Handler","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: Handler()","url":"/api/namespaces/v1/type-aliases/Handler#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state?: State  ‚Ä¢ options?  ‚Ä¢ callback?: HandlerCallback  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: Handler()","url":"/api/namespaces/v1/type-aliases/Handler#returns","content":" Promise&lt;unknown&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Handler()","url":"/api/namespaces/v1/type-aliases/Handler#defined-in","content":" packages/core/src/specs/v1/types.ts:417 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ImageModelSettings","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/ImageModelSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: ImageModelSettings","url":"/api/namespaces/v1/type-aliases/ImageModelSettings#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Type Alias: ImageModelSettings","url":"/api/namespaces/v1/type-aliases/ImageModelSettings#name","content":" name: string  ","version":"1.0.17","tagName":"h3"},{"title":"steps?‚Äã","type":1,"pageTitle":"Type Alias: ImageModelSettings","url":"/api/namespaces/v1/type-aliases/ImageModelSettings#steps","content":" optional steps: number  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ImageModelSettings","url":"/api/namespaces/v1/type-aliases/ImageModelSettings#defined-in","content":" packages/core/src/specs/v1/types.ts:172 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: HandlerCallback()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/HandlerCallback","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/api/namespaces/v1/type-aliases/HandlerCallback#parameters","content":" ‚Ä¢ response: Content  ‚Ä¢ files?: any  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/api/namespaces/v1/type-aliases/HandlerCallback#returns","content":" Promise&lt;Memory[]&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/api/namespaces/v1/type-aliases/HandlerCallback#defined-in","content":" packages/core/src/specs/v1/types.ts:428 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Model","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Model","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: Model","url":"/api/namespaces/v1/type-aliases/Model#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"endpoint?‚Äã","type":1,"pageTitle":"Type Alias: Model","url":"/api/namespaces/v1/type-aliases/Model#endpoint","content":" optional endpoint: string  Optional API endpoint  ","version":"1.0.17","tagName":"h3"},{"title":"model‚Äã","type":1,"pageTitle":"Type Alias: Model","url":"/api/namespaces/v1/type-aliases/Model#model","content":" model: object  Model names by size class  ","version":"1.0.17","tagName":"h3"},{"title":"model.small?‚Äã","type":1,"pageTitle":"Type Alias: Model","url":"/api/namespaces/v1/type-aliases/Model#modelsmall","content":" optional small: ModelSettings  ","version":"1.0.17","tagName":"h3"},{"title":"model.medium?‚Äã","type":1,"pageTitle":"Type Alias: Model","url":"/api/namespaces/v1/type-aliases/Model#modelmedium","content":" optional medium: ModelSettings  ","version":"1.0.17","tagName":"h3"},{"title":"model.large?‚Äã","type":1,"pageTitle":"Type Alias: Model","url":"/api/namespaces/v1/type-aliases/Model#modellarge","content":" optional large: ModelSettings  ","version":"1.0.17","tagName":"h3"},{"title":"model.embedding?‚Äã","type":1,"pageTitle":"Type Alias: Model","url":"/api/namespaces/v1/type-aliases/Model#modelembedding","content":" optional embedding: EmbeddingModelSettings  ","version":"1.0.17","tagName":"h3"},{"title":"model.image?‚Äã","type":1,"pageTitle":"Type Alias: Model","url":"/api/namespaces/v1/type-aliases/Model#modelimage","content":" optional image: ImageModelSettings  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Model","url":"/api/namespaces/v1/type-aliases/Model#defined-in","content":" packages/core/src/specs/v1/types.ts:186 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Media","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Media","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v1/type-aliases/Media#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v1/type-aliases/Media#id","content":" id: string  Unique identifier  ","version":"1.0.17","tagName":"h3"},{"title":"url‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v1/type-aliases/Media#url","content":" url: string  Media URL  ","version":"1.0.17","tagName":"h3"},{"title":"title‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v1/type-aliases/Media#title","content":" title: string  Media title  ","version":"1.0.17","tagName":"h3"},{"title":"source‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v1/type-aliases/Media#source","content":" source: string  Media source  ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v1/type-aliases/Media#description","content":" description: string  Media description  ","version":"1.0.17","tagName":"h3"},{"title":"text‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v1/type-aliases/Media#text","content":" text: string  Text content  ","version":"1.0.17","tagName":"h3"},{"title":"contentType?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v1/type-aliases/Media#contenttype","content":" optional contentType: string  Content type  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v1/type-aliases/Media#defined-in","content":" packages/core/src/specs/v1/types.ts:602 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ModelSettings","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/ModelSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#name","content":" name: string  Model name  ","version":"1.0.17","tagName":"h3"},{"title":"maxInputTokens‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#maxinputtokens","content":" maxInputTokens: number  Maximum input tokens  ","version":"1.0.17","tagName":"h3"},{"title":"maxOutputTokens‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#maxoutputtokens","content":" maxOutputTokens: number  Maximum output tokens  ","version":"1.0.17","tagName":"h3"},{"title":"frequency_penalty?‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#frequency_penalty","content":" optional frequency_penalty: number  Optional frequency penalty  ","version":"1.0.17","tagName":"h3"},{"title":"presence_penalty?‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#presence_penalty","content":" optional presence_penalty: number  Optional presence penalty  ","version":"1.0.17","tagName":"h3"},{"title":"repetition_penalty?‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#repetition_penalty","content":" optional repetition_penalty: number  Optional repetition penalty  ","version":"1.0.17","tagName":"h3"},{"title":"stop‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#stop","content":" stop: string[]  Stop sequences  ","version":"1.0.17","tagName":"h3"},{"title":"temperature‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#temperature","content":" temperature: number  Temperature setting  ","version":"1.0.17","tagName":"h3"},{"title":"experimental_telemetry?‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#experimental_telemetry","content":" optional experimental_telemetry: TelemetrySettings  Optional telemetry configuration (experimental)  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ModelSettings","url":"/api/namespaces/v1/type-aliases/ModelSettings#defined-in","content":" packages/core/src/specs/v1/types.ts:142 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Character","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Character","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#id","content":" optional id: UUID  Optional unique identifier  ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#name","content":" name: string  Character name  ","version":"1.0.17","tagName":"h3"},{"title":"username?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#username","content":" optional username: string  Optional username  ","version":"1.0.17","tagName":"h3"},{"title":"email?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#email","content":" optional email: string  Optional email  ","version":"1.0.17","tagName":"h3"},{"title":"system?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#system","content":" optional system: string  Optional system prompt  ","version":"1.0.17","tagName":"h3"},{"title":"modelProvider‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#modelprovider","content":" modelProvider: ModelProviderName  Model provider to use  ","version":"1.0.17","tagName":"h3"},{"title":"imageModelProvider?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#imagemodelprovider","content":" optional imageModelProvider: ModelProviderName  Image model provider to use, if different from modelProvider  ","version":"1.0.17","tagName":"h3"},{"title":"imageVisionModelProvider?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#imagevisionmodelprovider","content":" optional imageVisionModelProvider: ModelProviderName  Image Vision model provider to use, if different from modelProvider  ","version":"1.0.17","tagName":"h3"},{"title":"modelEndpointOverride?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#modelendpointoverride","content":" optional modelEndpointOverride: string  Optional model endpoint override  ","version":"1.0.17","tagName":"h3"},{"title":"templates?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templates","content":" optional templates: object  Optional prompt templates  ","version":"1.0.17","tagName":"h3"},{"title":"templates.goalsTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesgoalstemplate","content":" optional goalsTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.factsTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesfactstemplate","content":" optional factsTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.messageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesmessagehandlertemplate","content":" optional messageHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.shouldRespondTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesshouldrespondtemplate","content":" optional shouldRespondTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.continueMessageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatescontinuemessagehandlertemplate","content":" optional continueMessageHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.evaluationTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesevaluationtemplate","content":" optional evaluationTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.twitterSearchTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestwittersearchtemplate","content":" optional twitterSearchTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.twitterActionTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestwitteractiontemplate","content":" optional twitterActionTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.twitterPostTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestwitterposttemplate","content":" optional twitterPostTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.twitterMessageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestwittermessagehandlertemplate","content":" optional twitterMessageHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.twitterShouldRespondTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestwittershouldrespondtemplate","content":" optional twitterShouldRespondTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.twitterVoiceHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestwittervoicehandlertemplate","content":" optional twitterVoiceHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.instagramPostTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesinstagramposttemplate","content":" optional instagramPostTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.instagramMessageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesinstagrammessagehandlertemplate","content":" optional instagramMessageHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.instagramShouldRespondTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesinstagramshouldrespondtemplate","content":" optional instagramShouldRespondTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.farcasterPostTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesfarcasterposttemplate","content":" optional farcasterPostTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.lensPostTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templateslensposttemplate","content":" optional lensPostTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.farcasterMessageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesfarcastermessagehandlertemplate","content":" optional farcasterMessageHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.lensMessageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templateslensmessagehandlertemplate","content":" optional lensMessageHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.farcasterShouldRespondTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesfarcastershouldrespondtemplate","content":" optional farcasterShouldRespondTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.lensShouldRespondTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templateslensshouldrespondtemplate","content":" optional lensShouldRespondTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.telegramMessageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestelegrammessagehandlertemplate","content":" optional telegramMessageHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.telegramShouldRespondTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestelegramshouldrespondtemplate","content":" optional telegramShouldRespondTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.telegramAutoPostTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestelegramautoposttemplate","content":" optional telegramAutoPostTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"templates.telegramPinnedMessageTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatestelegrampinnedmessagetemplate","content":" optional telegramPinnedMessageTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"templates.discordAutoPostTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesdiscordautoposttemplate","content":" optional discordAutoPostTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"templates.discordAnnouncementHypeTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesdiscordannouncementhypetemplate","content":" optional discordAnnouncementHypeTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"templates.discordVoiceHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesdiscordvoicehandlertemplate","content":" optional discordVoiceHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.discordShouldRespondTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesdiscordshouldrespondtemplate","content":" optional discordShouldRespondTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.discordMessageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesdiscordmessagehandlertemplate","content":" optional discordMessageHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.slackMessageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesslackmessagehandlertemplate","content":" optional slackMessageHandlerTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.slackShouldRespondTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesslackshouldrespondtemplate","content":" optional slackShouldRespondTemplate: TemplateType  ","version":"1.0.17","tagName":"h3"},{"title":"templates.jeeterPostTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesjeeterposttemplate","content":" optional jeeterPostTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"templates.jeeterSearchTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesjeetersearchtemplate","content":" optional jeeterSearchTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"templates.jeeterInteractionTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesjeeterinteractiontemplate","content":" optional jeeterInteractionTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"templates.jeeterMessageHandlerTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesjeetermessagehandlertemplate","content":" optional jeeterMessageHandlerTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"templates.jeeterShouldRespondTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesjeetershouldrespondtemplate","content":" optional jeeterShouldRespondTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"templates.devaPostTemplate?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#templatesdevaposttemplate","content":" optional devaPostTemplate: string  ","version":"1.0.17","tagName":"h3"},{"title":"bio‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#bio","content":" bio: string | string[]  Character biography  ","version":"1.0.17","tagName":"h3"},{"title":"lore‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#lore","content":" lore: string[]  Character background lore  ","version":"1.0.17","tagName":"h3"},{"title":"messageExamples‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#messageexamples","content":" messageExamples: MessageExample[][]  Example messages  ","version":"1.0.17","tagName":"h3"},{"title":"postExamples‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#postexamples","content":" postExamples: string[]  Example posts  ","version":"1.0.17","tagName":"h3"},{"title":"topics‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#topics","content":" topics: string[]  Known topics  ","version":"1.0.17","tagName":"h3"},{"title":"adjectives‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#adjectives","content":" adjectives: string[]  Character traits  ","version":"1.0.17","tagName":"h3"},{"title":"knowledge?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#knowledge","content":" optional knowledge: (string | object | object)[]  Optional knowledge base  ","version":"1.0.17","tagName":"h3"},{"title":"plugins‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#plugins","content":" plugins: Plugin[]  Available plugins  ","version":"1.0.17","tagName":"h3"},{"title":"postProcessors?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#postprocessors","content":" optional postProcessors: Pick&lt;Plugin, &quot;name&quot; | &quot;description&quot; | &quot;handlePostCharacterLoaded&quot;&gt;[]  Character Processor Plugins  ","version":"1.0.17","tagName":"h3"},{"title":"settings?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settings","content":" optional settings: object  Optional configuration  ","version":"1.0.17","tagName":"h3"},{"title":"settings.secrets?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingssecrets","content":" optional secrets: object  Index Signature‚Äã  [key: string]: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.intiface?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsintiface","content":" optional intiface: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettings","content":" optional imageSettings: object  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.steps?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingssteps","content":" optional steps: number  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.width?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingswidth","content":" optional width: number  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.height?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingsheight","content":" optional height: number  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.cfgScale?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingscfgscale","content":" optional cfgScale: number  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.negativePrompt?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingsnegativeprompt","content":" optional negativePrompt: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.numIterations?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingsnumiterations","content":" optional numIterations: number  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.guidanceScale?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingsguidancescale","content":" optional guidanceScale: number  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.seed?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingsseed","content":" optional seed: number  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.modelId?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingsmodelid","content":" optional modelId: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.jobId?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingsjobid","content":" optional jobId: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.count?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingscount","content":" optional count: number  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.stylePreset?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingsstylepreset","content":" optional stylePreset: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.hideWatermark?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingshidewatermark","content":" optional hideWatermark: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"settings.imageSettings.safeMode?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsimagesettingssafemode","content":" optional safeMode: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoice","content":" optional voice: object  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice.model?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoicemodel","content":" optional model: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice.url?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoiceurl","content":" optional url: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice.elevenlabs?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoiceelevenlabs","content":" optional elevenlabs: object  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice.elevenlabs.voiceId‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoiceelevenlabsvoiceid","content":" voiceId: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice.elevenlabs.model?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoiceelevenlabsmodel","content":" optional model: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice.elevenlabs.stability?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoiceelevenlabsstability","content":" optional stability: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice.elevenlabs.similarityBoost?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoiceelevenlabssimilarityboost","content":" optional similarityBoost: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice.elevenlabs.style?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoiceelevenlabsstyle","content":" optional style: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.voice.elevenlabs.useSpeakerBoost?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsvoiceelevenlabsusespeakerboost","content":" optional useSpeakerBoost: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.model?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsmodel","content":" optional model: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.modelConfig?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsmodelconfig","content":" optional modelConfig: ModelConfiguration  ","version":"1.0.17","tagName":"h3"},{"title":"settings.embeddingModel?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsembeddingmodel","content":" optional embeddingModel: string  ","version":"1.0.17","tagName":"h3"},{"title":"settings.chains?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingschains","content":" optional chains: object  Index Signature‚Äã  [key: string]: string | any[]  ","version":"1.0.17","tagName":"h3"},{"title":"settings.chains.evm?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingschainsevm","content":" optional evm: any[]  ","version":"1.0.17","tagName":"h3"},{"title":"settings.chains.solana?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingschainssolana","content":" optional solana: any[]  ","version":"1.0.17","tagName":"h3"},{"title":"settings.transcription?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingstranscription","content":" optional transcription: TranscriptionProvider  ","version":"1.0.17","tagName":"h3"},{"title":"settings.ragKnowledge?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#settingsragknowledge","content":" optional ragKnowledge: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfig","content":" optional clientConfig: object  Optional client-specific config  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscord","content":" optional discord: object  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.shouldIgnoreBotMessages?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordshouldignorebotmessages","content":" optional shouldIgnoreBotMessages: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.shouldIgnoreDirectMessages?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordshouldignoredirectmessages","content":" optional shouldIgnoreDirectMessages: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.shouldRespondOnlyToMentions?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordshouldrespondonlytomentions","content":" optional shouldRespondOnlyToMentions: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.messageSimilarityThreshold?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordmessagesimilaritythreshold","content":" optional messageSimilarityThreshold: number  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.isPartOfTeam?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordispartofteam","content":" optional isPartOfTeam: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.teamAgentIds?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordteamagentids","content":" optional teamAgentIds: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.teamLeaderId?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordteamleaderid","content":" optional teamLeaderId: string  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.teamMemberInterestKeywords?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordteammemberinterestkeywords","content":" optional teamMemberInterestKeywords: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.allowedChannelIds?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordallowedchannelids","content":" optional allowedChannelIds: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.autoPost?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordautopost","content":" optional autoPost: object  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.autoPost.enabled?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordautopostenabled","content":" optional enabled: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.autoPost.monitorTime?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordautopostmonitortime","content":" optional monitorTime: number  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.autoPost.inactivityThreshold?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordautopostinactivitythreshold","content":" optional inactivityThreshold: number  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.autoPost.mainChannelId?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordautopostmainchannelid","content":" optional mainChannelId: string  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.autoPost.announcementChannelIds?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordautopostannouncementchannelids","content":" optional announcementChannelIds: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.discord.autoPost.minTimeBetweenPosts?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigdiscordautopostmintimebetweenposts","content":" optional minTimeBetweenPosts: number  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegram","content":" optional telegram: object  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.shouldIgnoreBotMessages?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramshouldignorebotmessages","content":" optional shouldIgnoreBotMessages: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.shouldIgnoreDirectMessages?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramshouldignoredirectmessages","content":" optional shouldIgnoreDirectMessages: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.shouldRespondOnlyToMentions?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramshouldrespondonlytomentions","content":" optional shouldRespondOnlyToMentions: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.shouldOnlyJoinInAllowedGroups?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramshouldonlyjoininallowedgroups","content":" optional shouldOnlyJoinInAllowedGroups: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.allowedGroupIds?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramallowedgroupids","content":" optional allowedGroupIds: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.messageSimilarityThreshold?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegrammessagesimilaritythreshold","content":" optional messageSimilarityThreshold: number  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.isPartOfTeam?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramispartofteam","content":" optional isPartOfTeam: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.teamAgentIds?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramteamagentids","content":" optional teamAgentIds: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.teamLeaderId?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramteamleaderid","content":" optional teamLeaderId: string  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.teamMemberInterestKeywords?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramteammemberinterestkeywords","content":" optional teamMemberInterestKeywords: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.autoPost?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramautopost","content":" optional autoPost: object  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.autoPost.enabled?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramautopostenabled","content":" optional enabled: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.autoPost.monitorTime?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramautopostmonitortime","content":" optional monitorTime: number  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.autoPost.inactivityThreshold?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramautopostinactivitythreshold","content":" optional inactivityThreshold: number  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.autoPost.mainChannelId?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramautopostmainchannelid","content":" optional mainChannelId: string  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.autoPost.pinnedMessagesGroups?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramautopostpinnedmessagesgroups","content":" optional pinnedMessagesGroups: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.telegram.autoPost.minTimeBetweenPosts?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigtelegramautopostmintimebetweenposts","content":" optional minTimeBetweenPosts: number  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.slack?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigslack","content":" optional slack: object  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.slack.shouldIgnoreBotMessages?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigslackshouldignorebotmessages","content":" optional shouldIgnoreBotMessages: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.slack.shouldIgnoreDirectMessages?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfigslackshouldignoredirectmessages","content":" optional shouldIgnoreDirectMessages: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.gitbook?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfiggitbook","content":" optional gitbook: object  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.gitbook.keywords?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfiggitbookkeywords","content":" optional keywords: object  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.gitbook.keywords.projectTerms?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfiggitbookkeywordsprojectterms","content":" optional projectTerms: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.gitbook.keywords.generalQueries?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfiggitbookkeywordsgeneralqueries","content":" optional generalQueries: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"clientConfig.gitbook.documentTriggers?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#clientconfiggitbookdocumenttriggers","content":" optional documentTriggers: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"style‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#style","content":" style: object  Writing style guides  ","version":"1.0.17","tagName":"h3"},{"title":"style.all‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#styleall","content":" all: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"style.chat‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#stylechat","content":" chat: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"style.post‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#stylepost","content":" post: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"twitterProfile?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#twitterprofile","content":" optional twitterProfile: object  Optional Twitter profile  ","version":"1.0.17","tagName":"h3"},{"title":"twitterProfile.id‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#twitterprofileid","content":" id: string  ","version":"1.0.17","tagName":"h3"},{"title":"twitterProfile.username‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#twitterprofileusername","content":" username: string  ","version":"1.0.17","tagName":"h3"},{"title":"twitterProfile.screenName‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#twitterprofilescreenname","content":" screenName: string  ","version":"1.0.17","tagName":"h3"},{"title":"twitterProfile.bio‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#twitterprofilebio","content":" bio: string  ","version":"1.0.17","tagName":"h3"},{"title":"twitterProfile.nicknames?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#twitterprofilenicknames","content":" optional nicknames: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"instagramProfile?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#instagramprofile","content":" optional instagramProfile: object  Optional Instagram profile  ","version":"1.0.17","tagName":"h3"},{"title":"instagramProfile.id‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#instagramprofileid","content":" id: string  ","version":"1.0.17","tagName":"h3"},{"title":"instagramProfile.username‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#instagramprofileusername","content":" username: string  ","version":"1.0.17","tagName":"h3"},{"title":"instagramProfile.bio‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#instagramprofilebio","content":" bio: string  ","version":"1.0.17","tagName":"h3"},{"title":"instagramProfile.nicknames?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#instagramprofilenicknames","content":" optional nicknames: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"simsaiProfile?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#simsaiprofile","content":" optional simsaiProfile: object  Optional SimsAI profile  ","version":"1.0.17","tagName":"h3"},{"title":"simsaiProfile.id‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#simsaiprofileid","content":" id: string  ","version":"1.0.17","tagName":"h3"},{"title":"simsaiProfile.username‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#simsaiprofileusername","content":" username: string  ","version":"1.0.17","tagName":"h3"},{"title":"simsaiProfile.screenName‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#simsaiprofilescreenname","content":" screenName: string  ","version":"1.0.17","tagName":"h3"},{"title":"simsaiProfile.bio‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#simsaiprofilebio","content":" bio: string  ","version":"1.0.17","tagName":"h3"},{"title":"nft?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#nft","content":" optional nft: object  Optional NFT prompt  ","version":"1.0.17","tagName":"h3"},{"title":"nft.prompt‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#nftprompt","content":" prompt: string  ","version":"1.0.17","tagName":"h3"},{"title":"extends?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#extends","content":" optional extends: string[]  Optinal Parent characters to inherit information from  ","version":"1.0.17","tagName":"h3"},{"title":"twitterSpaces?‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#twitterspaces","content":" optional twitterSpaces: TwitterSpaceDecisionOptions  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Character","url":"/api/namespaces/v1/type-aliases/Character#defined-in","content":" packages/core/src/specs/v1/types.ts:739 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Plugin","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Plugin","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#name","content":" name: string  Plugin name  ","version":"1.0.17","tagName":"h3"},{"title":"npmName?‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#npmname","content":" optional npmName: string  Plugin npm name  ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#config","content":" optional config: object  Plugin configuration  Index Signature‚Äã  [key: string]: any  ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#description","content":" description: string  Plugin description  ","version":"1.0.17","tagName":"h3"},{"title":"actions?‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#actions","content":" optional actions: Action[]  Optional actions  ","version":"1.0.17","tagName":"h3"},{"title":"providers?‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#providers","content":" optional providers: Provider[]  Optional providers  ","version":"1.0.17","tagName":"h3"},{"title":"evaluators?‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#evaluators","content":" optional evaluators: Evaluator[]  Optional evaluators  ","version":"1.0.17","tagName":"h3"},{"title":"services?‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#services","content":" optional services: Service[]  Optional services  ","version":"1.0.17","tagName":"h3"},{"title":"clients?‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#clients","content":" optional clients: Client[]  Optional clients  ","version":"1.0.17","tagName":"h3"},{"title":"adapters?‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#adapters","content":" optional adapters: Adapter[]  Optional adapters  ","version":"1.0.17","tagName":"h3"},{"title":"handlePostCharacterLoaded()?‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#handlepostcharacterloaded","content":" optional handlePostCharacterLoaded: (char) =&gt; Promise&lt;Character&gt;  Optional post charactor processor handler  Parameters‚Äã  ‚Ä¢ char: Character  Returns‚Äã  Promise&lt;Character&gt;  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Plugin","url":"/api/namespaces/v1/type-aliases/Plugin#defined-in","content":" packages/core/src/specs/v1/types.ts:661 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Models","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Models","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"openai‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#openai","content":" openai: Model  ","version":"1.0.17","tagName":"h3"},{"title":"eternalai‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#eternalai","content":" eternalai: Model  ","version":"1.0.17","tagName":"h3"},{"title":"anthropic‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#anthropic","content":" anthropic: Model  ","version":"1.0.17","tagName":"h3"},{"title":"grok‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#grok","content":" grok: Model  ","version":"1.0.17","tagName":"h3"},{"title":"groq‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#groq","content":" groq: Model  ","version":"1.0.17","tagName":"h3"},{"title":"llama_cloud‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#llama_cloud","content":" llama_cloud: Model  ","version":"1.0.17","tagName":"h3"},{"title":"together‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#together","content":" together: Model  ","version":"1.0.17","tagName":"h3"},{"title":"llama_local‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#llama_local","content":" llama_local: Model  ","version":"1.0.17","tagName":"h3"},{"title":"lmstudio‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#lmstudio","content":" lmstudio: Model  ","version":"1.0.17","tagName":"h3"},{"title":"google‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#google","content":" google: Model  ","version":"1.0.17","tagName":"h3"},{"title":"mistral‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#mistral","content":" mistral: Model  ","version":"1.0.17","tagName":"h3"},{"title":"claude_vertex‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#claude_vertex","content":" claude_vertex: Model  ","version":"1.0.17","tagName":"h3"},{"title":"redpill‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#redpill","content":" redpill: Model  ","version":"1.0.17","tagName":"h3"},{"title":"openrouter‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#openrouter","content":" openrouter: Model  ","version":"1.0.17","tagName":"h3"},{"title":"ollama‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#ollama","content":" ollama: Model  ","version":"1.0.17","tagName":"h3"},{"title":"heurist‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#heurist","content":" heurist: Model  ","version":"1.0.17","tagName":"h3"},{"title":"galadriel‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#galadriel","content":" galadriel: Model  ","version":"1.0.17","tagName":"h3"},{"title":"falai‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#falai","content":" falai: Model  ","version":"1.0.17","tagName":"h3"},{"title":"gaianet‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#gaianet","content":" gaianet: Model  ","version":"1.0.17","tagName":"h3"},{"title":"ali_bailian‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#ali_bailian","content":" ali_bailian: Model  ","version":"1.0.17","tagName":"h3"},{"title":"volengine‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#volengine","content":" volengine: Model  ","version":"1.0.17","tagName":"h3"},{"title":"nanogpt‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#nanogpt","content":" nanogpt: Model  ","version":"1.0.17","tagName":"h3"},{"title":"hyperbolic‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#hyperbolic","content":" hyperbolic: Model  ","version":"1.0.17","tagName":"h3"},{"title":"venice‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#venice","content":" venice: Model  ","version":"1.0.17","tagName":"h3"},{"title":"nvidia‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#nvidia","content":" nvidia: Model  ","version":"1.0.17","tagName":"h3"},{"title":"nineteen_ai‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#nineteen_ai","content":" nineteen_ai: Model  ","version":"1.0.17","tagName":"h3"},{"title":"akash_chat_api‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#akash_chat_api","content":" akash_chat_api: Model  ","version":"1.0.17","tagName":"h3"},{"title":"livepeer‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#livepeer","content":" livepeer: Model  ","version":"1.0.17","tagName":"h3"},{"title":"deepseek‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#deepseek","content":" deepseek: Model  ","version":"1.0.17","tagName":"h3"},{"title":"infera‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#infera","content":" infera: Model  ","version":"1.0.17","tagName":"h3"},{"title":"bedrock‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#bedrock","content":" bedrock: Model  ","version":"1.0.17","tagName":"h3"},{"title":"atoma‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#atoma","content":" atoma: Model  ","version":"1.0.17","tagName":"h3"},{"title":"secret_ai‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#secret_ai","content":" secret_ai: Model  ","version":"1.0.17","tagName":"h3"},{"title":"nearai‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#nearai","content":" nearai: Model  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Models","url":"/api/namespaces/v1/type-aliases/Models#defined-in","content":" packages/core/src/specs/v1/types.ts:203 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Provider","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Provider","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Provider","url":"/api/namespaces/v1/type-aliases/Provider#defined-in","content":" packages/core/src/specs/v1/provider.ts:9 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: State","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/State","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: State","url":"/api/namespaces/v1/type-aliases/State#defined-in","content":" packages/core/src/specs/v1/state.ts:8 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: UUID","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/UUID","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: UUID","url":"/api/namespaces/v1/type-aliases/UUID#defined-in","content":" packages/core/src/specs/v1/types.ts:6 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Validator()","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/Validator","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: Validator()","url":"/api/namespaces/v1/type-aliases/Validator#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state?: State  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: Validator()","url":"/api/namespaces/v1/type-aliases/Validator#returns","content":" Promise&lt;boolean&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Validator()","url":"/api/namespaces/v1/type-aliases/Validator#defined-in","content":" packages/core/src/specs/v1/types.ts:433 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: TemplateType","type":0,"sectionRef":"#","url":"/api/namespaces/v1/type-aliases/TemplateType","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: TemplateType","url":"/api/namespaces/v1/type-aliases/TemplateType#defined-in","content":" packages/core/src/specs/v1/templates.ts:8 ","version":"1.0.17","tagName":"h2"},{"title":"Class: abstract Service","type":0,"sectionRef":"#","url":"/api/namespaces/v2/classes/Service","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/namespaces/v2/classes/Service#extended-by","content":" TypedService  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/namespaces/v2/classes/Service#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/namespaces/v2/classes/Service#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2416    ","version":"1.0.17","tagName":"h3"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/namespaces/v2/classes/Service#servicetype","content":" static serviceType: string  Service type  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2427    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/namespaces/v2/classes/Service#capabilitydescription","content":" abstract capabilityDescription: string  Service name  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2430    ","version":"1.0.17","tagName":"h3"},{"title":"config?‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/namespaces/v2/classes/Service#config","content":" optional config: object  Service configuration  Index Signature‚Äã  [key: string]: any  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2433  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/namespaces/v2/classes/Service#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"start()‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/namespaces/v2/classes/Service#start","content":" static start(_runtime): Promise&lt;Service&gt;  Start service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2436    ","version":"1.0.17","tagName":"h3"},{"title":"stop()‚Äã","type":1,"pageTitle":"Class: abstract Service","url":"/api/namespaces/v2/classes/Service#stop","content":" static stop(_runtime): Promise&lt;unknown&gt;  Stop service connection  Parameters‚Äã  ‚Ä¢ _runtime: IAgentRuntime  Returns‚Äã  Promise&lt;unknown&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2441 ","version":"1.0.17","tagName":"h3"},{"title":"v2","type":0,"sectionRef":"#","url":"/api/namespaces/v2","content":"","keywords":"","version":"1.0.17"},{"title":"Index‚Äã","type":1,"pageTitle":"v2","url":"/api/namespaces/v2#index","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Enumerations‚Äã","type":1,"pageTitle":"v2","url":"/api/namespaces/v2#enumerations","content":" MemoryTypeKnowledgeScopeCacheKeyPrefixTEEModeTeeTypeRoleEventTypePlatformPrefixSOCKET_MESSAGE_TYPE  ","version":"1.0.17","tagName":"h3"},{"title":"Classes‚Äã","type":1,"pageTitle":"v2","url":"/api/namespaces/v2#classes","content":" DatabaseAdapterAgentRuntimeServiceBuilderService  ","version":"1.0.17","tagName":"h3"},{"title":"Interfaces‚Äã","type":1,"pageTitle":"v2","url":"/api/namespaces/v2#interfaces","content":" ServerOwnershipStateServiceDefinitionContentActionExampleServiceTypeRegistryServiceClassMapStateBaseMetadataMemoryLogMessageExampleActionEvaluationExampleEvaluatorProviderRelationshipEntityParticipantCharacterAgentIDatabaseAdapterEmbeddingSearchResultMemoryRetrievalOptionsMemorySearchOptionsMultiRoomMemoryOptionsUnifiedMemoryOptionsUnifiedSearchOptionsTargetInfoIAgentRuntimeRuntimeSettingsDirectoryItemChunkRowTokenizeTextParamsDetokenizeTextParamsTestCaseTestSuiteTeeAgentRemoteAttestationQuoteDeriveKeyAttestationDataRemoteAttestationMessageTeeVendorConfigTeePluginConfigTaskWorkerTaskBaseModelParamsTextGenerationParamsTextEmbeddingParamsImageGenerationParamsImageDescriptionParamsTranscriptionParamsTextToSpeechParamsAudioProcessingParamsVideoProcessingParamsObjectGenerationParamsModelParamsMapModelResultMapEventPayloadWorldPayloadEntityPayloadMessagePayloadChannelClearedPayloadInvokePayloadRunEventPayloadActionEventPayloadEvaluatorEventPayloadModelEventPayloadEventPayloadMapMessageMemoryTypedServiceServiceErrorStateObjectEnhancedStateModelHandlerControlMessage  ","version":"1.0.17","tagName":"h3"},{"title":"Type Aliases‚Äã","type":1,"pageTitle":"v2","url":"/api/namespaces/v2#type-aliases","content":" UUIDServiceTypeNameServiceTypeValueIsValidServiceTypeTypedServiceClassServiceInstanceServiceRegistryMemoryTypeAliasMemoryScopeHandlerHandlerCallbackValidatorMediaPluginEventsSendHandlerFunctionKnowledgeItemGenerateTextParamsTaskMetadataJSONSchemaMessageReceivedHandlerParamsEventHandlerStateValueStateArrayComponentDataEventDataObjectTypedEventHandlerDbConnectionMetadataObjectServiceConfig  ","version":"1.0.17","tagName":"h3"},{"title":"Variables‚Äã","type":1,"pageTitle":"v2","url":"/api/namespaces/v2#variables","content":" ModelTypeServiceType  ","version":"1.0.17","tagName":"h3"},{"title":"Functions‚Äã","type":1,"pageTitle":"v2","url":"/api/namespaces/v2#functions","content":" composeActionExamplesformatActionNamesformatActionsfindEntityByNamecreateUniqueUuidgetEntityDetailsformatEntitiesgetUserServerRolefindWorldsForOwnercreateServicedefineServicecreateSettingFromConfiggetSaltencryptStringValuedecryptStringValuesaltSettingValueunsaltSettingValuesaltWorldSettingsunsaltWorldSettingsupdateWorldSettingsgetWorldSettingsinitializeOnboardingencryptedCharacterdecryptedCharacterencryptObjectValuesdecryptObjectValuesasUUIDcreateMessageMemorygetTypedServiceisDocumentMetadataisFragmentMetadataisMessageMetadataisDescriptionMetadataisCustomMetadataisDocumentMemoryisFragmentMemorygetMemoryTextcreateServiceErrorcomposePromptcomposePromptFromStateaddHeaderformatMessagesvalidateUuidstringToUuid ","version":"1.0.17","tagName":"h3"},{"title":"Class: ServiceBuilder<TService>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/classes/ServiceBuilder","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/namespaces/v2/classes/ServiceBuilder#extends","content":" ServiceBuilder  ","version":"1.0.17","tagName":"h2"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/namespaces/v2/classes/ServiceBuilder#type-parameters","content":" ‚Ä¢ TService extends Service = Service  ","version":"1.0.17","tagName":"h2"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/namespaces/v2/classes/ServiceBuilder#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"withDescription()‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/namespaces/v2/classes/ServiceBuilder#withdescription","content":" withDescription(description): this  Set the service description  Parameters‚Äã  ‚Ä¢ description: string  Returns‚Äã  this  Inherited from‚Äã  ServiceBuilder.withDescription  Defined in‚Äã  packages/core/src/services.ts:22    ","version":"1.0.17","tagName":"h3"},{"title":"withStart()‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/namespaces/v2/classes/ServiceBuilder#withstart","content":" withStart(startFn): this  Set the start function for the service  Parameters‚Äã  ‚Ä¢ startFn  Returns‚Äã  this  Inherited from‚Äã  ServiceBuilder.withStart  Defined in‚Äã  packages/core/src/services.ts:30    ","version":"1.0.17","tagName":"h3"},{"title":"withStop()‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/namespaces/v2/classes/ServiceBuilder#withstop","content":" withStop(stopFn): this  Set the stop function for the service  Parameters‚Äã  ‚Ä¢ stopFn  Returns‚Äã  this  Inherited from‚Äã  ServiceBuilder.withStop  Defined in‚Äã  packages/core/src/services.ts:38    ","version":"1.0.17","tagName":"h3"},{"title":"build()‚Äã","type":1,"pageTitle":"Class: ServiceBuilder<TService>","url":"/api/namespaces/v2/classes/ServiceBuilder#build","content":" build(): Object  Build the service class with all configured properties  Returns‚Äã  Object  Inherited from‚Äã  ServiceBuilder.build  Defined in‚Äã  packages/core/src/services.ts:46 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: CacheKeyPrefix","type":0,"sectionRef":"#","url":"/api/namespaces/v2/enumerations/CacheKeyPrefix","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: CacheKeyPrefix","url":"/api/namespaces/v2/enumerations/CacheKeyPrefix#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"KNOWLEDGE‚Äã","type":1,"pageTitle":"Enumeration: CacheKeyPrefix","url":"/api/namespaces/v2/enumerations/CacheKeyPrefix#knowledge","content":" KNOWLEDGE: &quot;knowledge&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1344 ","version":"1.0.17","tagName":"h3"},{"title":"Class: AgentRuntime","type":0,"sectionRef":"#","url":"/api/namespaces/v2/classes/AgentRuntime","content":"","keywords":"","version":"1.0.17"},{"title":"Implements‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#implements","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Implements‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#implements-1","content":" IAgentRuntime  ","version":"1.0.17","tagName":"h2"},{"title":"Accessors‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#accessors","content":" ","version":"1.0.17","tagName":"h2"},{"title":"db‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#db","content":" Get Signature‚Äã  get db(): any  Database instance  Returns‚Äã  any  Database instance  Implementation of‚Äã  IAgentRuntime.db  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:448  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"registerPlugin()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#registerplugin","content":" registerPlugin(plugin): Promise&lt;void&gt;  Registers a plugin with the runtime and initializes its components  Parameters‚Äã  ‚Ä¢ plugin: Plugin  The plugin to register  Returns‚Äã  Promise&lt;void&gt;  Implementation of‚Äã  IAgentRuntime.registerPlugin  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:137    ","version":"1.0.17","tagName":"h3"},{"title":"getConversationLength()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#getconversationlength","content":" getConversationLength(): any  Get the number of messages that are kept in the conversation buffer.  Returns‚Äã  any  The number of recent messages to be kept in memory.  Implementation of‚Äã  IAgentRuntime.getConversationLength  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:179    ","version":"1.0.17","tagName":"h3"},{"title":"registerProvider()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#registerprovider","content":" registerProvider(provider): any  Register a provider for the agent to use.  Parameters‚Äã  ‚Ä¢ provider: Provider  The provider to register.  Returns‚Äã  any  Implementation of‚Äã  IAgentRuntime.registerProvider  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:191    ","version":"1.0.17","tagName":"h3"},{"title":"registerAction()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#registeraction","content":" registerAction(action): any  Register an action for the agent to perform.  Parameters‚Äã  ‚Ä¢ action: Action  The action to register.  Returns‚Äã  any  Implementation of‚Äã  IAgentRuntime.registerAction  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:207    ","version":"1.0.17","tagName":"h3"},{"title":"registerEvaluator()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#registerevaluator","content":" registerEvaluator(evaluator): any  Register an evaluator to assess and guide the agent's responses.  Parameters‚Äã  ‚Ä¢ evaluator: Evaluator  The evaluator to register.  Returns‚Äã  any  Implementation of‚Äã  IAgentRuntime.registerEvaluator  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:230    ","version":"1.0.17","tagName":"h3"},{"title":"processActions()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#processactions","content":" processActions(message, responses, state?, callback?): Promise&lt;void&gt;  Process the actions of a message.  Parameters‚Äã  ‚Ä¢ message: Memory  The message to process.  ‚Ä¢ responses: Memory[]  The array of response memories to process actions from.  ‚Ä¢ state?: State  Optional state object for the action processing.  ‚Ä¢ callback?: HandlerCallback  Optional callback handler for action results.  Returns‚Äã  Promise&lt;void&gt;  Implementation of‚Äã  IAgentRuntime.processActions  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:241    ","version":"1.0.17","tagName":"h3"},{"title":"evaluate()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#evaluate","content":" evaluate(message, state, didRespond?, callback?, responses?): Promise&lt;any&gt;  Evaluate the message and state using the registered evaluators.  Parameters‚Äã  ‚Ä¢ message: Memory  The message to evaluate.  ‚Ä¢ state: State  The state of the agent.  ‚Ä¢ didRespond?: boolean  Whether the agent responded to the message.~  ‚Ä¢ callback?: HandlerCallback  The handler callback  ‚Ä¢ responses?: Memory[]  Returns‚Äã  Promise&lt;any&gt;  The results of the evaluation.  Implementation of‚Äã  IAgentRuntime.evaluate  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:258    ","version":"1.0.17","tagName":"h3"},{"title":"ensureParticipantInRoom()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#ensureparticipantinroom","content":" ensureParticipantInRoom(entityId, roomId): Promise&lt;any&gt;  Ensures a participant is added to a room, checking that the entity exists first  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;any&gt;  Implementation of‚Äã  IAgentRuntime.ensureParticipantInRoom  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:308    ","version":"1.0.17","tagName":"h3"},{"title":"ensureWorldExists()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#ensureworldexists","content":" ensureWorldExists(__namedParameters): Promise&lt;any&gt;  Ensure the existence of a world.  Parameters‚Äã  ‚Ä¢ __namedParameters: World  Returns‚Äã  Promise&lt;any&gt;  Implementation of‚Äã  IAgentRuntime.ensureWorldExists  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:330    ","version":"1.0.17","tagName":"h3"},{"title":"ensureRoomExists()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#ensureroomexists","content":" ensureRoomExists(entityId): Promise&lt;any&gt;  Ensure the existence of a room between the agent and a user. If no room exists, a new room is created and the user and agent are added as participants. The room ID is returned.  Parameters‚Äã  ‚Ä¢ entityId: Room  The user ID to create a room with.  Returns‚Äã  Promise&lt;any&gt;  The room ID of the room between the agent and the user.  Throws‚Äã  An error if the room cannot be created.  Implementation of‚Äã  IAgentRuntime.ensureRoomExists  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:347    ","version":"1.0.17","tagName":"h3"},{"title":"composeState()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#composestate","content":" composeState(message, includeList, onlyInclude, skipCache): Promise&lt;State&gt;  Composes the agent's state by gathering data from enabled providers.  Parameters‚Äã  ‚Ä¢ message: Memory  The message to use as context for state composition  ‚Ä¢ includeList: string[] = null  Optional list of provider names to include, filtering out all others  ‚Ä¢ onlyInclude: boolean = false  Whether to only include the specified providers  ‚Ä¢ skipCache: boolean = false  Whether to skip the cache  Returns‚Äã  Promise&lt;State&gt;  A State object containing provider data, values, and text  Implementation of‚Äã  IAgentRuntime.composeState  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:368    ","version":"1.0.17","tagName":"h3"},{"title":"useModel()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#usemodel","content":" useModel&lt;T, R&gt;(modelType, params): Promise&lt;R&gt;  Use a model with strongly typed parameters and return values based on model type  Type Parameters‚Äã  ‚Ä¢ T extends string  The model type to use  ‚Ä¢ R = ModelResultMap[T]  The expected return type, defaults to the type defined in ModelResultMap[T]  Parameters‚Äã  ‚Ä¢ modelType: T  The type of model to use  ‚Ä¢ params: any  The parameters for the model, typed based on model type  Returns‚Äã  Promise&lt;R&gt;  The model result, typed based on the provided generic type parameter  Implementation of‚Äã  IAgentRuntime.useModel  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:412    ","version":"1.0.17","tagName":"h3"},{"title":"getTaskWorker()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#gettaskworker","content":" getTaskWorker(name): TaskWorker  Get a task worker by name  Parameters‚Äã  ‚Ä¢ name: string  Returns‚Äã  TaskWorker  Implementation of‚Äã  IAgentRuntime.getTaskWorker  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:442    ","version":"1.0.17","tagName":"h3"},{"title":"init()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#init","content":" init(): Promise&lt;void&gt;  Initialize database connection  Returns‚Äã  Promise&lt;void&gt;  Implementation of‚Äã  IAgentRuntime.init  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:452    ","version":"1.0.17","tagName":"h3"},{"title":"close()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#close","content":" close(): Promise&lt;void&gt;  Close database connection  Returns‚Äã  Promise&lt;void&gt;  Implementation of‚Äã  IAgentRuntime.close  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:456    ","version":"1.0.17","tagName":"h3"},{"title":"getAgents()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#getagents","content":" getAgents(): Promise&lt;Agent[]&gt;  Get all agents  Returns‚Äã  Promise&lt;Agent[]&gt;  Implementation of‚Äã  IAgentRuntime.getAgents  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:464    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesByIds()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#getentitiesbyids","content":" getEntitiesByIds(entityIds): Promise&lt;Entity[]&gt;  Get entity by IDs  Parameters‚Äã  ‚Ä¢ entityIds: `${string}-${string}-${string}-${string}-${string}`[]  Returns‚Äã  Promise&lt;Entity[]&gt;  Implementation of‚Äã  IAgentRuntime.getEntitiesByIds  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:488    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesForRoom()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#getentitiesforroom","content":" getEntitiesForRoom(roomId, includeComponents?): Promise&lt;Entity[]&gt;  Get entities for room  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ includeComponents?: boolean  Returns‚Äã  Promise&lt;Entity[]&gt;  Implementation of‚Äã  IAgentRuntime.getEntitiesForRoom  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:492    ","version":"1.0.17","tagName":"h3"},{"title":"createEntities()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#createentities","content":" createEntities(entities): Promise&lt;boolean&gt;  Create new entities  Parameters‚Äã  ‚Ä¢ entities: Entity[]  Returns‚Äã  Promise&lt;boolean&gt;  Implementation of‚Äã  IAgentRuntime.createEntities  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:500    ","version":"1.0.17","tagName":"h3"},{"title":"updateEntity()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#updateentity","content":" updateEntity(entity): Promise&lt;void&gt;  Update entity  Parameters‚Äã  ‚Ä¢ entity: Entity  Returns‚Äã  Promise&lt;void&gt;  Implementation of‚Äã  IAgentRuntime.updateEntity  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:504    ","version":"1.0.17","tagName":"h3"},{"title":"getComponent()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#getcomponent","content":" getComponent(entityId, type, worldId?, sourceEntityId?): Promise&lt;Component&gt;  Get component by ID  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ type: string  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component&gt;  Implementation of‚Äã  IAgentRuntime.getComponent  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:508    ","version":"1.0.17","tagName":"h3"},{"title":"getComponents()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#getcomponents","content":" getComponents(entityId, worldId?, sourceEntityId?): Promise&lt;Component[]&gt;  Get all components for an entity  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component[]&gt;  Implementation of‚Äã  IAgentRuntime.getComponents  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:517    ","version":"1.0.17","tagName":"h3"},{"title":"createComponent()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#createcomponent","content":" createComponent(component): Promise&lt;boolean&gt;  Create component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;boolean&gt;  Implementation of‚Äã  IAgentRuntime.createComponent  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:521    ","version":"1.0.17","tagName":"h3"},{"title":"updateComponent()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#updatecomponent","content":" updateComponent(component): Promise&lt;void&gt;  Update component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;void&gt;  Implementation of‚Äã  IAgentRuntime.updateComponent  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:525    ","version":"1.0.17","tagName":"h3"},{"title":"deleteComponent()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#deletecomponent","content":" deleteComponent(componentId): Promise&lt;void&gt;  Delete component  Parameters‚Äã  ‚Ä¢ componentId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;void&gt;  Implementation of‚Äã  IAgentRuntime.deleteComponent  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:529    ","version":"1.0.17","tagName":"h3"},{"title":"getMemories()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#getmemories","content":" getMemories(params): Promise&lt;Memory[]&gt;  Get memories matching criteria  Parameters‚Äã  ‚Ä¢ params  ‚Ä¢ params.entityId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.agentId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.count?: number  ‚Ä¢ params.unique?: boolean  ‚Ä¢ params.tableName: string  ‚Ä¢ params.start?: number  ‚Ä¢ params.end?: number  Returns‚Äã  Promise&lt;Memory[]&gt;  Implementation of‚Äã  IAgentRuntime.getMemories  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:545    ","version":"1.0.17","tagName":"h3"},{"title":"createRelationship()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#createrelationship","content":" createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two entities.  Parameters‚Äã  ‚Ä¢ params  Object containing the relationship details  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.metadata?  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to boolean indicating success  Implementation of‚Äã  IAgentRuntime.createRelationship  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:721    ","version":"1.0.17","tagName":"h3"},{"title":"updateRelationship()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#updaterelationship","content":" updateRelationship(relationship): Promise&lt;void&gt;  Updates an existing relationship between two entities.  Parameters‚Äã  ‚Ä¢ relationship: Relationship  The relationship object with updated data  Returns‚Äã  Promise&lt;void&gt;  Promise resolving to void  Implementation of‚Äã  IAgentRuntime.updateRelationship  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:730    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationship()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#getrelationship","content":" getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two entities if it exists.  Parameters‚Äã  ‚Ä¢ params  Object containing the entity IDs and agent ID  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Relationship&gt;  Promise resolving to the Relationship object or null if not found  Implementation of‚Äã  IAgentRuntime.getRelationship  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:734    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationships()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#getrelationships","content":" getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific entity.  Parameters‚Äã  ‚Ä¢ params  Object containing the user ID, agent ID and optional tags to filter by  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  Returns‚Äã  Promise&lt;Relationship[]&gt;  Promise resolving to an array of Relationship objects  Implementation of‚Äã  IAgentRuntime.getRelationships  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:741    ","version":"1.0.17","tagName":"h3"},{"title":"registerSendHandler()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#registersendhandler","content":" registerSendHandler(source, handler): void  Register a message send handler for a specific source  Parameters‚Äã  ‚Ä¢ source: string  The source identifier (e.g., 'discord', 'telegram')  ‚Ä¢ handler: SendHandlerFunction  The handler function to send messages  Returns‚Äã  void  Implementation of‚Äã  IAgentRuntime.registerSendHandler  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:807    ","version":"1.0.17","tagName":"h3"},{"title":"sendMessageToTarget()‚Äã","type":1,"pageTitle":"Class: AgentRuntime","url":"/api/namespaces/v2/classes/AgentRuntime#sendmessagetotarget","content":" sendMessageToTarget(target, content): Promise&lt;void&gt;  Send a message to a specific target  Parameters‚Äã  ‚Ä¢ target: TargetInfo  The target information including source and channel/user ID  ‚Ä¢ content: Content  The message content to send  Returns‚Äã  Promise&lt;void&gt;  Implementation of‚Äã  IAgentRuntime.sendMessageToTarget  Defined in‚Äã  packages/core/src/specs/v2/runtime.ts:816 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: KnowledgeScope","type":0,"sectionRef":"#","url":"/api/namespaces/v2/enumerations/KnowledgeScope","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: KnowledgeScope","url":"/api/namespaces/v2/enumerations/KnowledgeScope#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"SHARED‚Äã","type":1,"pageTitle":"Enumeration: KnowledgeScope","url":"/api/namespaces/v2/enumerations/KnowledgeScope#shared","content":" SHARED: &quot;shared&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1333    ","version":"1.0.17","tagName":"h3"},{"title":"PRIVATE‚Äã","type":1,"pageTitle":"Enumeration: KnowledgeScope","url":"/api/namespaces/v2/enumerations/KnowledgeScope#private","content":" PRIVATE: &quot;private&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1334 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: EventType","type":0,"sectionRef":"#","url":"/api/namespaces/v2/enumerations/EventType","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"WORLD_JOINED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#world_joined","content":" WORLD_JOINED: &quot;WORLD_JOINED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1854    ","version":"1.0.17","tagName":"h3"},{"title":"WORLD_CONNECTED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#world_connected","content":" WORLD_CONNECTED: &quot;WORLD_CONNECTED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1855    ","version":"1.0.17","tagName":"h3"},{"title":"WORLD_LEFT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#world_left","content":" WORLD_LEFT: &quot;WORLD_LEFT&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1856    ","version":"1.0.17","tagName":"h3"},{"title":"ENTITY_JOINED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#entity_joined","content":" ENTITY_JOINED: &quot;ENTITY_JOINED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1859    ","version":"1.0.17","tagName":"h3"},{"title":"ENTITY_LEFT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#entity_left","content":" ENTITY_LEFT: &quot;ENTITY_LEFT&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1860    ","version":"1.0.17","tagName":"h3"},{"title":"ENTITY_UPDATED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#entity_updated","content":" ENTITY_UPDATED: &quot;ENTITY_UPDATED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1861    ","version":"1.0.17","tagName":"h3"},{"title":"ROOM_JOINED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#room_joined","content":" ROOM_JOINED: &quot;ROOM_JOINED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1864    ","version":"1.0.17","tagName":"h3"},{"title":"ROOM_LEFT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#room_left","content":" ROOM_LEFT: &quot;ROOM_LEFT&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1865    ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE_RECEIVED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#message_received","content":" MESSAGE_RECEIVED: &quot;MESSAGE_RECEIVED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1868    ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE_SENT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#message_sent","content":" MESSAGE_SENT: &quot;MESSAGE_SENT&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1869    ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE_DELETED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#message_deleted","content":" MESSAGE_DELETED: &quot;MESSAGE_DELETED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1870    ","version":"1.0.17","tagName":"h3"},{"title":"CHANNEL_CLEARED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#channel_cleared","content":" CHANNEL_CLEARED: &quot;CHANNEL_CLEARED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1873    ","version":"1.0.17","tagName":"h3"},{"title":"VOICE_MESSAGE_RECEIVED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#voice_message_received","content":" VOICE_MESSAGE_RECEIVED: &quot;VOICE_MESSAGE_RECEIVED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1876    ","version":"1.0.17","tagName":"h3"},{"title":"VOICE_MESSAGE_SENT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#voice_message_sent","content":" VOICE_MESSAGE_SENT: &quot;VOICE_MESSAGE_SENT&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1877    ","version":"1.0.17","tagName":"h3"},{"title":"REACTION_RECEIVED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#reaction_received","content":" REACTION_RECEIVED: &quot;REACTION_RECEIVED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1880    ","version":"1.0.17","tagName":"h3"},{"title":"POST_GENERATED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#post_generated","content":" POST_GENERATED: &quot;POST_GENERATED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1881    ","version":"1.0.17","tagName":"h3"},{"title":"INTERACTION_RECEIVED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#interaction_received","content":" INTERACTION_RECEIVED: &quot;INTERACTION_RECEIVED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1882    ","version":"1.0.17","tagName":"h3"},{"title":"RUN_STARTED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#run_started","content":" RUN_STARTED: &quot;RUN_STARTED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1885    ","version":"1.0.17","tagName":"h3"},{"title":"RUN_ENDED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#run_ended","content":" RUN_ENDED: &quot;RUN_ENDED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1886    ","version":"1.0.17","tagName":"h3"},{"title":"RUN_TIMEOUT‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#run_timeout","content":" RUN_TIMEOUT: &quot;RUN_TIMEOUT&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1887    ","version":"1.0.17","tagName":"h3"},{"title":"ACTION_STARTED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#action_started","content":" ACTION_STARTED: &quot;ACTION_STARTED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1890    ","version":"1.0.17","tagName":"h3"},{"title":"ACTION_COMPLETED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#action_completed","content":" ACTION_COMPLETED: &quot;ACTION_COMPLETED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1891    ","version":"1.0.17","tagName":"h3"},{"title":"EVALUATOR_STARTED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#evaluator_started","content":" EVALUATOR_STARTED: &quot;EVALUATOR_STARTED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1894    ","version":"1.0.17","tagName":"h3"},{"title":"EVALUATOR_COMPLETED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#evaluator_completed","content":" EVALUATOR_COMPLETED: &quot;EVALUATOR_COMPLETED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1895    ","version":"1.0.17","tagName":"h3"},{"title":"MODEL_USED‚Äã","type":1,"pageTitle":"Enumeration: EventType","url":"/api/namespaces/v2/enumerations/EventType#model_used","content":" MODEL_USED: &quot;MODEL_USED&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1898 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: PlatformPrefix","type":0,"sectionRef":"#","url":"/api/namespaces/v2/enumerations/PlatformPrefix","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: PlatformPrefix","url":"/api/namespaces/v2/enumerations/PlatformPrefix#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"DISCORD‚Äã","type":1,"pageTitle":"Enumeration: PlatformPrefix","url":"/api/namespaces/v2/enumerations/PlatformPrefix#discord","content":" DISCORD: &quot;DISCORD&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1905    ","version":"1.0.17","tagName":"h3"},{"title":"TELEGRAM‚Äã","type":1,"pageTitle":"Enumeration: PlatformPrefix","url":"/api/namespaces/v2/enumerations/PlatformPrefix#telegram","content":" TELEGRAM: &quot;TELEGRAM&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1906    ","version":"1.0.17","tagName":"h3"},{"title":"TWITTER‚Äã","type":1,"pageTitle":"Enumeration: PlatformPrefix","url":"/api/namespaces/v2/enumerations/PlatformPrefix#twitter","content":" TWITTER: &quot;TWITTER&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1907 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: MemoryType","type":0,"sectionRef":"#","url":"/api/namespaces/v2/enumerations/MemoryType","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/namespaces/v2/enumerations/MemoryType#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"DOCUMENT‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/namespaces/v2/enumerations/MemoryType#document","content":" DOCUMENT: &quot;document&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:225    ","version":"1.0.17","tagName":"h3"},{"title":"FRAGMENT‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/namespaces/v2/enumerations/MemoryType#fragment","content":" FRAGMENT: &quot;fragment&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:226    ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/namespaces/v2/enumerations/MemoryType#message","content":" MESSAGE: &quot;message&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:227    ","version":"1.0.17","tagName":"h3"},{"title":"DESCRIPTION‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/namespaces/v2/enumerations/MemoryType#description","content":" DESCRIPTION: &quot;description&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:228    ","version":"1.0.17","tagName":"h3"},{"title":"CUSTOM‚Äã","type":1,"pageTitle":"Enumeration: MemoryType","url":"/api/namespaces/v2/enumerations/MemoryType#custom","content":" CUSTOM: &quot;custom&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:229 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: Role","type":0,"sectionRef":"#","url":"/api/namespaces/v2/enumerations/Role","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: Role","url":"/api/namespaces/v2/enumerations/Role#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"OWNER‚Äã","type":1,"pageTitle":"Enumeration: Role","url":"/api/namespaces/v2/enumerations/Role#owner","content":" OWNER: &quot;OWNER&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1644    ","version":"1.0.17","tagName":"h3"},{"title":"ADMIN‚Äã","type":1,"pageTitle":"Enumeration: Role","url":"/api/namespaces/v2/enumerations/Role#admin","content":" ADMIN: &quot;ADMIN&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1645    ","version":"1.0.17","tagName":"h3"},{"title":"NONE‚Äã","type":1,"pageTitle":"Enumeration: Role","url":"/api/namespaces/v2/enumerations/Role#none","content":" NONE: &quot;NONE&quot;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1646 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: SOCKET_MESSAGE_TYPE","type":0,"sectionRef":"#","url":"/api/namespaces/v2/enumerations/SOCKET_MESSAGE_TYPE","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: SOCKET_MESSAGE_TYPE","url":"/api/namespaces/v2/enumerations/SOCKET_MESSAGE_TYPE#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"ROOM_JOINING‚Äã","type":1,"pageTitle":"Enumeration: SOCKET_MESSAGE_TYPE","url":"/api/namespaces/v2/enumerations/SOCKET_MESSAGE_TYPE#room_joining","content":" ROOM_JOINING: 1  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2076    ","version":"1.0.17","tagName":"h3"},{"title":"SEND_MESSAGE‚Äã","type":1,"pageTitle":"Enumeration: SOCKET_MESSAGE_TYPE","url":"/api/namespaces/v2/enumerations/SOCKET_MESSAGE_TYPE#send_message","content":" SEND_MESSAGE: 2  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2077    ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE‚Äã","type":1,"pageTitle":"Enumeration: SOCKET_MESSAGE_TYPE","url":"/api/namespaces/v2/enumerations/SOCKET_MESSAGE_TYPE#message","content":" MESSAGE: 3  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2078    ","version":"1.0.17","tagName":"h3"},{"title":"ACK‚Äã","type":1,"pageTitle":"Enumeration: SOCKET_MESSAGE_TYPE","url":"/api/namespaces/v2/enumerations/SOCKET_MESSAGE_TYPE#ack","content":" ACK: 4  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2079    ","version":"1.0.17","tagName":"h3"},{"title":"THINKING‚Äã","type":1,"pageTitle":"Enumeration: SOCKET_MESSAGE_TYPE","url":"/api/namespaces/v2/enumerations/SOCKET_MESSAGE_TYPE#thinking","content":" THINKING: 5  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2080    ","version":"1.0.17","tagName":"h3"},{"title":"CONTROL‚Äã","type":1,"pageTitle":"Enumeration: SOCKET_MESSAGE_TYPE","url":"/api/namespaces/v2/enumerations/SOCKET_MESSAGE_TYPE#control","content":" CONTROL: 6  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2081 ","version":"1.0.17","tagName":"h3"},{"title":"Enumeration: TEEMode","type":0,"sectionRef":"#","url":"/api/namespaces/v2/enumerations/TEEMode","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/namespaces/v2/enumerations/TEEMode#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"OFF‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/namespaces/v2/enumerations/TEEMode#off","content":" OFF: &quot;OFF&quot;  TEE functionality is completely disabled.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1484    ","version":"1.0.17","tagName":"h3"},{"title":"LOCAL‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/namespaces/v2/enumerations/TEEMode#local","content":" LOCAL: &quot;LOCAL&quot;  For local development, potentially using a TEE simulator.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1486    ","version":"1.0.17","tagName":"h3"},{"title":"DOCKER‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/namespaces/v2/enumerations/TEEMode#docker","content":" DOCKER: &quot;DOCKER&quot;  For Docker-based development environments, possibly with a TEE simulator.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1488    ","version":"1.0.17","tagName":"h3"},{"title":"PRODUCTION‚Äã","type":1,"pageTitle":"Enumeration: TEEMode","url":"/api/namespaces/v2/enumerations/TEEMode#production","content":" PRODUCTION: &quot;PRODUCTION&quot;  For production deployments, using actual TEE hardware without a simulator.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1490 ","version":"1.0.17","tagName":"h3"},{"title":"Class: abstract DatabaseAdapter<DB>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/classes/DatabaseAdapter","content":"","keywords":"","version":"1.0.17"},{"title":"Implements‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#implements","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#type-parameters","content":" ‚Ä¢ DB = unknown  The type of the database instance.  ","version":"1.0.17","tagName":"h2"},{"title":"Implements‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#implements-1","content":" IDatabaseAdapter  ","version":"1.0.17","tagName":"h2"},{"title":"Constructors‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#constructors","content":" ","version":"1.0.17","tagName":"h2"},{"title":"DatabaseAdapter()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#databaseadapter","content":" DatabaseAdapter&lt;DB&gt;(db): DatabaseAdapter&lt;DB&gt;  Creates a new DatabaseAdapter instance.  Parameters‚Äã  ‚Ä¢ db: DB  The database instance to use.  Returns‚Äã  DatabaseAdapter&lt;DB&gt;  Defined in‚Äã  packages/core/src/specs/v2/database.ts:34  ","version":"1.0.17","tagName":"h3"},{"title":"Properties‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"db‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#db","content":" db: DB  The database instance.  Implementation of‚Äã  IDatabaseAdapter.db  Defined in‚Äã  packages/core/src/specs/v2/database.ts:28  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"init()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#init","content":" abstract init(): Promise&lt;void&gt;  Initialize the database adapter.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when initialization is complete.  Implementation of‚Äã  IDatabaseAdapter.init  Defined in‚Äã  packages/core/src/specs/v2/database.ts:42    ","version":"1.0.17","tagName":"h3"},{"title":"close()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#close","content":" abstract close(): Promise&lt;void&gt;  Optional close method for the database adapter.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when closing is complete.  Implementation of‚Äã  IDatabaseAdapter.close  Defined in‚Äã  packages/core/src/specs/v2/database.ts:48    ","version":"1.0.17","tagName":"h3"},{"title":"getConnection()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getconnection","content":" abstract getConnection(): Promise&lt;any&gt;  Retrieves a connection to the database.  Returns‚Äã  Promise&lt;any&gt;  A Promise that resolves to the database connection.  Implementation of‚Äã  IDatabaseAdapter.getConnection  Defined in‚Äã  packages/core/src/specs/v2/database.ts:54    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesByIds()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getentitiesbyids","content":" abstract getEntitiesByIds(entityIds): Promise&lt;Entity[]&gt;  Retrieves an account by its ID.  Parameters‚Äã  ‚Ä¢ entityIds: `${string}-${string}-${string}-${string}-${string}`[]  The UUIDs of the user account to retrieve.  Returns‚Äã  Promise&lt;Entity[]&gt;  A Promise that resolves to the Entity object or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getEntitiesByIds  Defined in‚Äã  packages/core/src/specs/v2/database.ts:61    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesForRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getentitiesforroom","content":" abstract getEntitiesForRoom(roomId, includeComponents?): Promise&lt;Entity[]&gt;  Get entities for room  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ includeComponents?: boolean  Returns‚Äã  Promise&lt;Entity[]&gt;  Implementation of‚Äã  IDatabaseAdapter.getEntitiesForRoom  Defined in‚Äã  packages/core/src/specs/v2/database.ts:63    ","version":"1.0.17","tagName":"h3"},{"title":"createEntities()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#createentities","content":" abstract createEntities(entities): Promise&lt;boolean&gt;  Creates a new entities in the database.  Parameters‚Äã  ‚Ä¢ entities: Entity[]  The entity objects to create.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves when the account creation is complete.  Implementation of‚Äã  IDatabaseAdapter.createEntities  Defined in‚Äã  packages/core/src/specs/v2/database.ts:70    ","version":"1.0.17","tagName":"h3"},{"title":"updateEntity()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#updateentity","content":" abstract updateEntity(entity): Promise&lt;void&gt;  Updates an existing entity in the database.  Parameters‚Äã  ‚Ä¢ entity: Entity  The entity object with updated properties.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the account update is complete.  Implementation of‚Äã  IDatabaseAdapter.updateEntity  Defined in‚Äã  packages/core/src/specs/v2/database.ts:77    ","version":"1.0.17","tagName":"h3"},{"title":"getComponent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getcomponent","content":" abstract getComponent(entityId, type, worldId?, sourceEntityId?): Promise&lt;Component&gt;  Retrieves a single component by entity ID and type.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the entity the component belongs to  ‚Ä¢ type: string  The type identifier for the component  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID of the world the component belongs to  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID of the source entity  Returns‚Äã  Promise&lt;Component&gt;  Promise resolving to the Component if found, null otherwise  Implementation of‚Äã  IDatabaseAdapter.getComponent  Defined in‚Äã  packages/core/src/specs/v2/database.ts:87    ","version":"1.0.17","tagName":"h3"},{"title":"getComponents()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getcomponents","content":" abstract getComponents(entityId, worldId?, sourceEntityId?): Promise&lt;Component[]&gt;  Retrieves all components for an entity.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the entity to get components for  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID of the world to filter components by  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Optional UUID of the source entity to filter by  Returns‚Äã  Promise&lt;Component[]&gt;  Promise resolving to array of Component objects  Implementation of‚Äã  IDatabaseAdapter.getComponents  Defined in‚Äã  packages/core/src/specs/v2/database.ts:101    ","version":"1.0.17","tagName":"h3"},{"title":"createComponent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#createcomponent","content":" abstract createComponent(component): Promise&lt;boolean&gt;  Creates a new component in the database.  Parameters‚Äã  ‚Ä¢ component: Component  The component object to create  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to true if creation was successful  Implementation of‚Äã  IDatabaseAdapter.createComponent  Defined in‚Äã  packages/core/src/specs/v2/database.ts:112    ","version":"1.0.17","tagName":"h3"},{"title":"updateComponent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#updatecomponent","content":" abstract updateComponent(component): Promise&lt;void&gt;  Updates an existing component in the database.  Parameters‚Äã  ‚Ä¢ component: Component  The component object with updated properties  Returns‚Äã  Promise&lt;void&gt;  Promise that resolves when the update is complete  Implementation of‚Äã  IDatabaseAdapter.updateComponent  Defined in‚Äã  packages/core/src/specs/v2/database.ts:119    ","version":"1.0.17","tagName":"h3"},{"title":"deleteComponent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#deletecomponent","content":" abstract deleteComponent(componentId): Promise&lt;void&gt;  Deletes a component from the database.  Parameters‚Äã  ‚Ä¢ componentId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the component to delete  Returns‚Äã  Promise&lt;void&gt;  Promise that resolves when the deletion is complete  Implementation of‚Äã  IDatabaseAdapter.deleteComponent  Defined in‚Äã  packages/core/src/specs/v2/database.ts:126    ","version":"1.0.17","tagName":"h3"},{"title":"getMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getmemories","content":" abstract getMemories(params): Promise&lt;Memory[]&gt;  Retrieves memories based on the specified parameters.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the memory retrieval.  ‚Ä¢ params.entityId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.agentId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.count?: number  ‚Ä¢ params.unique?: boolean  ‚Ä¢ params.tableName: string  ‚Ä¢ params.start?: number  ‚Ä¢ params.end?: number  Returns‚Äã  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Implementation of‚Äã  IDatabaseAdapter.getMemories  Defined in‚Äã  packages/core/src/specs/v2/database.ts:133    ","version":"1.0.17","tagName":"h3"},{"title":"getMemoriesByIds()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getmemoriesbyids","content":" abstract getMemoriesByIds(memoryIds, tableName?): Promise&lt;Memory[]&gt;  Retrieves multiple memories by their IDs  Parameters‚Äã  ‚Ä¢ memoryIds: `${string}-${string}-${string}-${string}-${string}`[]  Array of UUIDs of the memories to retrieve  ‚Ä¢ tableName?: string  Optional table name to filter memories by type  Returns‚Äã  Promise&lt;Memory[]&gt;  Promise resolving to array of Memory objects  Implementation of‚Äã  IDatabaseAdapter.getMemoriesByIds  Defined in‚Äã  packages/core/src/specs/v2/database.ts:158    ","version":"1.0.17","tagName":"h3"},{"title":"getCachedEmbeddings()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getcachedembeddings","content":" abstract getCachedEmbeddings(params): Promise&lt;object[]&gt;  Retrieves cached embeddings based on the specified query parameters.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the embedding retrieval.  ‚Ä¢ params.query_table_name: string  ‚Ä¢ params.query_threshold: number  ‚Ä¢ params.query_input: string  ‚Ä¢ params.query_field_name: string  ‚Ä¢ params.query_field_sub_name: string  ‚Ä¢ params.query_match_count: number  Returns‚Äã  Promise&lt;object[]&gt;  A Promise that resolves to an array of objects containing embeddings and levenshtein scores.  Implementation of‚Äã  IDatabaseAdapter.getCachedEmbeddings  Defined in‚Äã  packages/core/src/specs/v2/database.ts:165    ","version":"1.0.17","tagName":"h3"},{"title":"log()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#log","content":" abstract log(params): Promise&lt;void&gt;  Logs an event or action with the specified details.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the log entry.  ‚Ä¢ params.body  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.type: string  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the log entry has been saved.  Implementation of‚Äã  IDatabaseAdapter.log  Defined in‚Äã  packages/core/src/specs/v2/database.ts:191    ","version":"1.0.17","tagName":"h3"},{"title":"getLogs()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getlogs","content":" abstract getLogs(params): Promise&lt;Log[]&gt;  Retrieves logs based on the specified parameters.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the log retrieval.  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.type?: string  ‚Ä¢ params.count?: number  ‚Ä¢ params.offset?: number  Returns‚Äã  Promise&lt;Log[]&gt;  A Promise that resolves to an array of Log objects.  Implementation of‚Äã  IDatabaseAdapter.getLogs  Defined in‚Äã  packages/core/src/specs/v2/database.ts:203    ","version":"1.0.17","tagName":"h3"},{"title":"deleteLog()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#deletelog","content":" abstract deleteLog(logId): Promise&lt;void&gt;  Deletes a log from the database.  Parameters‚Äã  ‚Ä¢ logId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the log to delete.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the log has been deleted.  Implementation of‚Äã  IDatabaseAdapter.deleteLog  Defined in‚Äã  packages/core/src/specs/v2/database.ts:216    ","version":"1.0.17","tagName":"h3"},{"title":"searchMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#searchmemories","content":" abstract searchMemories(params): Promise&lt;Memory[]&gt;  Searches for memories based on embeddings and other specified parameters.  Parameters‚Äã  ‚Ä¢ params  An object containing parameters for the memory search.  ‚Ä¢ params.tableName: string  ‚Ä¢ params.roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.embedding: number[]  ‚Ä¢ params.match_threshold: number  ‚Ä¢ params.count: number  ‚Ä¢ params.unique: boolean  Returns‚Äã  Promise&lt;Memory[]&gt;  A Promise that resolves to an array of Memory objects.  Implementation of‚Äã  IDatabaseAdapter.searchMemories  Defined in‚Äã  packages/core/src/specs/v2/database.ts:223    ","version":"1.0.17","tagName":"h3"},{"title":"createMemory()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#creatememory","content":" abstract createMemory(memory, tableName, unique?): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new memory in the database.  Parameters‚Äã  ‚Ä¢ memory: Memory  The memory object to create.  ‚Ä¢ tableName: string  The table where the memory should be stored.  ‚Ä¢ unique?: boolean  Indicates if the memory should be unique.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves when the memory has been created.  Implementation of‚Äã  IDatabaseAdapter.createMemory  Defined in‚Äã  packages/core/src/specs/v2/database.ts:239    ","version":"1.0.17","tagName":"h3"},{"title":"updateMemory()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#updatememory","content":" abstract updateMemory(memory): Promise&lt;boolean&gt;  Updates an existing memory in the database.  Parameters‚Äã  ‚Ä¢ memory: Partial&lt;Memory&gt; &amp; object  The memory object with updated content and optional embedding  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to boolean indicating success  Implementation of‚Äã  IDatabaseAdapter.updateMemory  Defined in‚Äã  packages/core/src/specs/v2/database.ts:246    ","version":"1.0.17","tagName":"h3"},{"title":"deleteMemory()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#deletememory","content":" abstract deleteMemory(memoryId): Promise&lt;void&gt;  Removes a specific memory from the database.  Parameters‚Äã  ‚Ä¢ memoryId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the memory to remove.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the memory has been removed.  Implementation of‚Äã  IDatabaseAdapter.deleteMemory  Defined in‚Äã  packages/core/src/specs/v2/database.ts:255    ","version":"1.0.17","tagName":"h3"},{"title":"deleteManyMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#deletemanymemories","content":" abstract deleteManyMemories(memoryIds): Promise&lt;void&gt;  Removes multiple memories from the database in a single batch operation.  Parameters‚Äã  ‚Ä¢ memoryIds: `${string}-${string}-${string}-${string}-${string}`[]  An array of UUIDs of the memories to remove.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Implementation of‚Äã  IDatabaseAdapter.deleteManyMemories  Defined in‚Äã  packages/core/src/specs/v2/database.ts:262    ","version":"1.0.17","tagName":"h3"},{"title":"deleteAllMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#deleteallmemories","content":" abstract deleteAllMemories(roomId, tableName): Promise&lt;void&gt;  Removes all memories associated with a specific room.  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room whose memories should be removed.  ‚Ä¢ tableName: string  The table from which the memories should be removed.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when all memories have been removed.  Implementation of‚Äã  IDatabaseAdapter.deleteAllMemories  Defined in‚Äã  packages/core/src/specs/v2/database.ts:270    ","version":"1.0.17","tagName":"h3"},{"title":"countMemories()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#countmemories","content":" abstract countMemories(roomId, unique?, tableName?): Promise&lt;number&gt;  Counts the number of memories in a specific room.  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to count memories.  ‚Ä¢ unique?: boolean  Specifies whether to count only unique memories.  ‚Ä¢ tableName?: string  Optional table name to count memories from.  Returns‚Äã  Promise&lt;number&gt;  A Promise that resolves to the number of memories.  Implementation of‚Äã  IDatabaseAdapter.countMemories  Defined in‚Äã  packages/core/src/specs/v2/database.ts:279    ","version":"1.0.17","tagName":"h3"},{"title":"getWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getworld","content":" abstract getWorld(id): Promise&lt;World&gt;  Retrieves a world by its ID.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the world to retrieve.  Returns‚Äã  Promise&lt;World&gt;  A Promise that resolves to the World object or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getWorld  Defined in‚Äã  packages/core/src/specs/v2/database.ts:286    ","version":"1.0.17","tagName":"h3"},{"title":"getAllWorlds()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getallworlds","content":" abstract getAllWorlds(): Promise&lt;World[]&gt;  Retrieves all worlds for an agent.  Returns‚Äã  Promise&lt;World[]&gt;  A Promise that resolves to an array of World objects.  Implementation of‚Äã  IDatabaseAdapter.getAllWorlds  Defined in‚Äã  packages/core/src/specs/v2/database.ts:292    ","version":"1.0.17","tagName":"h3"},{"title":"createWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#createworld","content":" abstract createWorld(world): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new world in the database.  Parameters‚Äã  ‚Ä¢ world: World  The world object to create.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  A Promise that resolves to the UUID of the created world.  Implementation of‚Äã  IDatabaseAdapter.createWorld  Defined in‚Äã  packages/core/src/specs/v2/database.ts:299    ","version":"1.0.17","tagName":"h3"},{"title":"updateWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#updateworld","content":" abstract updateWorld(world): Promise&lt;void&gt;  Updates an existing world in the database.  Parameters‚Äã  ‚Ä¢ world: World  The world object with updated properties.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the world has been updated.  Implementation of‚Äã  IDatabaseAdapter.updateWorld  Defined in‚Äã  packages/core/src/specs/v2/database.ts:306    ","version":"1.0.17","tagName":"h3"},{"title":"removeWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#removeworld","content":" abstract removeWorld(id): Promise&lt;void&gt;  Removes a specific world from the database.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the world to remove.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the world has been removed.  Implementation of‚Äã  IDatabaseAdapter.removeWorld  Defined in‚Äã  packages/core/src/specs/v2/database.ts:313    ","version":"1.0.17","tagName":"h3"},{"title":"getRoomsByIds()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getroomsbyids","content":" abstract getRoomsByIds(roomIds): Promise&lt;Room[]&gt;  Retrieves the room ID for a given room, if it exists.  Parameters‚Äã  ‚Ä¢ roomIds: `${string}-${string}-${string}-${string}-${string}`[]  The UUIDs of the rooms to retrieve.  Returns‚Äã  Promise&lt;Room[]&gt;  A Promise that resolves to the room ID or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getRoomsByIds  Defined in‚Äã  packages/core/src/specs/v2/database.ts:320    ","version":"1.0.17","tagName":"h3"},{"title":"getRoomsByWorld()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getroomsbyworld","content":" abstract getRoomsByWorld(worldId): Promise&lt;Room[]&gt;  Retrieves all rooms for a given world.  Parameters‚Äã  ‚Ä¢ worldId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the world to retrieve rooms for.  Returns‚Äã  Promise&lt;Room[]&gt;  A Promise that resolves to an array of Room objects.  Implementation of‚Äã  IDatabaseAdapter.getRoomsByWorld  Defined in‚Äã  packages/core/src/specs/v2/database.ts:327    ","version":"1.0.17","tagName":"h3"},{"title":"createRooms()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#createrooms","content":" abstract createRooms(rooms): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Creates a new rooms with an optional specified ID.  Parameters‚Äã  ‚Ä¢ rooms: Room[]  Array of room objects to create.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to the UUID of the created rooms.  Implementation of‚Äã  IDatabaseAdapter.createRooms  Defined in‚Äã  packages/core/src/specs/v2/database.ts:334    ","version":"1.0.17","tagName":"h3"},{"title":"updateRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#updateroom","content":" abstract updateRoom(room): Promise&lt;void&gt;  Updates a specific room in the database.  Parameters‚Äã  ‚Ä¢ room: Room  The room object with updated properties.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the room has been updated.  Implementation of‚Äã  IDatabaseAdapter.updateRoom  Defined in‚Äã  packages/core/src/specs/v2/database.ts:341    ","version":"1.0.17","tagName":"h3"},{"title":"deleteRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#deleteroom","content":" abstract deleteRoom(roomId): Promise&lt;void&gt;  Removes a specific room from the database.  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to remove.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the room has been removed.  Implementation of‚Äã  IDatabaseAdapter.deleteRoom  Defined in‚Äã  packages/core/src/specs/v2/database.ts:348    ","version":"1.0.17","tagName":"h3"},{"title":"getRoomsForParticipant()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getroomsforparticipant","content":" abstract getRoomsForParticipant(entityId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which a specific user is a participant.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Implementation of‚Äã  IDatabaseAdapter.getRoomsForParticipant  Defined in‚Äã  packages/core/src/specs/v2/database.ts:355    ","version":"1.0.17","tagName":"h3"},{"title":"getRoomsForParticipants()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getroomsforparticipants","content":" abstract getRoomsForParticipants(userIds): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves room IDs for which specific users are participants.  Parameters‚Äã  ‚Ä¢ userIds: `${string}-${string}-${string}-${string}-${string}`[]  An array of UUIDs of the users.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of room IDs.  Implementation of‚Äã  IDatabaseAdapter.getRoomsForParticipants  Defined in‚Äã  packages/core/src/specs/v2/database.ts:362    ","version":"1.0.17","tagName":"h3"},{"title":"addParticipantsRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#addparticipantsroom","content":" abstract addParticipantsRoom(entityIds, roomId): Promise&lt;boolean&gt;  Adds users as a participant to a specific room.  Parameters‚Äã  ‚Ä¢ entityIds: `${string}-${string}-${string}-${string}-${string}`[]  The UUIDs of the users to add as a participant.  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room to which the user will be added.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Implementation of‚Äã  IDatabaseAdapter.addParticipantsRoom  Defined in‚Äã  packages/core/src/specs/v2/database.ts:370    ","version":"1.0.17","tagName":"h3"},{"title":"removeParticipant()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#removeparticipant","content":" abstract removeParticipant(entityId, roomId): Promise&lt;boolean&gt;  Removes a user as a participant from a specific room.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the user to remove as a participant.  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room from which the user will be removed.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure.  Implementation of‚Äã  IDatabaseAdapter.removeParticipant  Defined in‚Äã  packages/core/src/specs/v2/database.ts:378    ","version":"1.0.17","tagName":"h3"},{"title":"getParticipantsForEntity()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getparticipantsforentity","content":" abstract getParticipantsForEntity(entityId): Promise&lt;Participant[]&gt;  Retrieves participants associated with a specific account.  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the account.  Returns‚Äã  Promise&lt;Participant[]&gt;  A Promise that resolves to an array of Participant objects.  Implementation of‚Äã  IDatabaseAdapter.getParticipantsForEntity  Defined in‚Äã  packages/core/src/specs/v2/database.ts:385    ","version":"1.0.17","tagName":"h3"},{"title":"getParticipantsForRoom()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getparticipantsforroom","content":" abstract getParticipantsForRoom(roomId): Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  Retrieves participants for a specific room.  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the room for which to retrieve participants.  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`[]&gt;  A Promise that resolves to an array of UUIDs representing the participants.  Implementation of‚Äã  IDatabaseAdapter.getParticipantsForRoom  Defined in‚Äã  packages/core/src/specs/v2/database.ts:392    ","version":"1.0.17","tagName":"h3"},{"title":"createRelationship()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#createrelationship","content":" abstract createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two users.  Parameters‚Äã  ‚Ä¢ params  Object containing the relationship details including entity IDs, agent ID, optional tags and metadata  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.metadata?: Record&lt;string, unknown&gt;  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Implementation of‚Äã  IDatabaseAdapter.createRelationship  Defined in‚Äã  packages/core/src/specs/v2/database.ts:410    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationship()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getrelationship","content":" abstract getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two users if it exists.  Parameters‚Äã  ‚Ä¢ params  Object containing the entity IDs and agent ID  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Relationship&gt;  A Promise that resolves to the Relationship object or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getRelationship  Defined in‚Äã  packages/core/src/specs/v2/database.ts:422    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationships()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getrelationships","content":" abstract getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific user.  Parameters‚Äã  ‚Ä¢ params  Object containing the user ID, agent ID and optional tags to filter by  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  Returns‚Äã  Promise&lt;Relationship[]&gt;  A Promise that resolves to an array of Relationship objects.  Implementation of‚Äã  IDatabaseAdapter.getRelationships  Defined in‚Äã  packages/core/src/specs/v2/database.ts:432    ","version":"1.0.17","tagName":"h3"},{"title":"updateRelationship()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#updaterelationship","content":" abstract updateRelationship(params): Promise&lt;void&gt;  Updates an existing relationship between two users.  Parameters‚Äã  ‚Ä¢ params  Object containing the relationship details to update including entity IDs, agent ID, optional tags and metadata  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.metadata?: Record&lt;string, unknown&gt;  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves to a boolean indicating success or failure of the update.  Implementation of‚Äã  IDatabaseAdapter.updateRelationship  Defined in‚Äã  packages/core/src/specs/v2/database.ts:439    ","version":"1.0.17","tagName":"h3"},{"title":"getAgent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getagent","content":" abstract getAgent(agentId): Promise&lt;Agent&gt;  Retrieves an agent by its ID.  Parameters‚Äã  ‚Ä¢ agentId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the agent to retrieve.  Returns‚Äã  Promise&lt;Agent&gt;  A Promise that resolves to the Agent object or null if not found.  Implementation of‚Äã  IDatabaseAdapter.getAgent  Defined in‚Äã  packages/core/src/specs/v2/database.ts:451    ","version":"1.0.17","tagName":"h3"},{"title":"getAgents()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getagents","content":" abstract getAgents(): Promise&lt;Agent[]&gt;  Retrieves all agents from the database.  Returns‚Äã  Promise&lt;Agent[]&gt;  A Promise that resolves to an array of Agent objects.  Implementation of‚Äã  IDatabaseAdapter.getAgents  Defined in‚Äã  packages/core/src/specs/v2/database.ts:457    ","version":"1.0.17","tagName":"h3"},{"title":"createAgent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#createagent","content":" abstract createAgent(agent): Promise&lt;boolean&gt;  Creates a new agent in the database.  Parameters‚Äã  ‚Ä¢ agent: Partial&lt;Agent&gt;  The agent object to create.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the creation.  Implementation of‚Äã  IDatabaseAdapter.createAgent  Defined in‚Äã  packages/core/src/specs/v2/database.ts:464    ","version":"1.0.17","tagName":"h3"},{"title":"updateAgent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#updateagent","content":" abstract updateAgent(agentId, agent): Promise&lt;boolean&gt;  Updates an existing agent in the database.  Parameters‚Äã  ‚Ä¢ agentId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the agent to update.  ‚Ä¢ agent: Partial&lt;Agent&gt;  The agent object with updated properties.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the update.  Implementation of‚Äã  IDatabaseAdapter.updateAgent  Defined in‚Äã  packages/core/src/specs/v2/database.ts:472    ","version":"1.0.17","tagName":"h3"},{"title":"deleteAgent()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#deleteagent","content":" abstract deleteAgent(agentId): Promise&lt;boolean&gt;  Deletes an agent from the database.  Parameters‚Äã  ‚Ä¢ agentId: `${string}-${string}-${string}-${string}-${string}`  The UUID of the agent to delete.  Returns‚Äã  Promise&lt;boolean&gt;  A Promise that resolves to a boolean indicating success or failure of the deletion.  Implementation of‚Äã  IDatabaseAdapter.deleteAgent  Defined in‚Äã  packages/core/src/specs/v2/database.ts:479    ","version":"1.0.17","tagName":"h3"},{"title":"ensureEmbeddingDimension()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#ensureembeddingdimension","content":" abstract ensureEmbeddingDimension(dimension): Promise&lt;void&gt;  Ensures an embedding dimension exists in the database.  Parameters‚Äã  ‚Ä¢ dimension: number  The dimension to ensure exists.  Returns‚Äã  Promise&lt;void&gt;  A Promise that resolves when the embedding dimension has been ensured to exist.  Implementation of‚Äã  IDatabaseAdapter.ensureEmbeddingDimension  Defined in‚Äã  packages/core/src/specs/v2/database.ts:486    ","version":"1.0.17","tagName":"h3"},{"title":"getCache()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#getcache","content":" abstract getCache&lt;T&gt;(key): Promise&lt;T&gt;  Retrieves a cached value by key from the database.  Type Parameters‚Äã  ‚Ä¢ T  Parameters‚Äã  ‚Ä¢ key: string  The key to look up in the cache  Returns‚Äã  Promise&lt;T&gt;  Promise resolving to the cached string value  Implementation of‚Äã  IDatabaseAdapter.getCache  Defined in‚Äã  packages/core/src/specs/v2/database.ts:493    ","version":"1.0.17","tagName":"h3"},{"title":"setCache()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#setcache","content":" abstract setCache&lt;T&gt;(key, value): Promise&lt;boolean&gt;  Sets a value in the cache with the given key.  Type Parameters‚Äã  ‚Ä¢ T  Parameters‚Äã  ‚Ä¢ key: string  The key to store the value under  ‚Ä¢ value: T  The string value to cache  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to true if the cache was set successfully  Implementation of‚Äã  IDatabaseAdapter.setCache  Defined in‚Äã  packages/core/src/specs/v2/database.ts:501    ","version":"1.0.17","tagName":"h3"},{"title":"deleteCache()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#deletecache","content":" abstract deleteCache(key): Promise&lt;boolean&gt;  Deletes a value from the cache by key.  Parameters‚Äã  ‚Ä¢ key: string  The key to delete from the cache  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to true if the value was successfully deleted  Implementation of‚Äã  IDatabaseAdapter.deleteCache  Defined in‚Äã  packages/core/src/specs/v2/database.ts:508    ","version":"1.0.17","tagName":"h3"},{"title":"createTask()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#createtask","content":" abstract createTask(task): Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Creates a new task instance in the database.  Parameters‚Äã  ‚Ä¢ task: Task  The task object to create  Returns‚Äã  Promise&lt;`${string}-${string}-${string}-${string}-${string}`&gt;  Promise resolving to the UUID of the created task  Implementation of‚Äã  IDatabaseAdapter.createTask  Defined in‚Äã  packages/core/src/specs/v2/database.ts:515    ","version":"1.0.17","tagName":"h3"},{"title":"getTasks()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#gettasks","content":" abstract getTasks(params): Promise&lt;Task[]&gt;  Retrieves tasks based on specified parameters.  Parameters‚Äã  ‚Ä¢ params  Object containing optional roomId and tags to filter tasks  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  Returns‚Äã  Promise&lt;Task[]&gt;  Promise resolving to an array of Task objects  Implementation of‚Äã  IDatabaseAdapter.getTasks  Defined in‚Äã  packages/core/src/specs/v2/database.ts:522    ","version":"1.0.17","tagName":"h3"},{"title":"getTask()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#gettask","content":" abstract getTask(id): Promise&lt;Task&gt;  Retrieves a specific task by its ID.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the task to retrieve  Returns‚Äã  Promise&lt;Task&gt;  Promise resolving to the Task object if found, null otherwise  Implementation of‚Äã  IDatabaseAdapter.getTask  Defined in‚Äã  packages/core/src/specs/v2/database.ts:529    ","version":"1.0.17","tagName":"h3"},{"title":"getTasksByName()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#gettasksbyname","content":" abstract getTasksByName(name): Promise&lt;Task[]&gt;  Retrieves a specific task by its name.  Parameters‚Äã  ‚Ä¢ name: string  The name of the task to retrieve  Returns‚Äã  Promise&lt;Task[]&gt;  Promise resolving to the Task object if found, null otherwise  Implementation of‚Äã  IDatabaseAdapter.getTasksByName  Defined in‚Äã  packages/core/src/specs/v2/database.ts:536    ","version":"1.0.17","tagName":"h3"},{"title":"updateTask()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#updatetask","content":" abstract updateTask(id, task): Promise&lt;void&gt;  Updates an existing task in the database.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the task to update  ‚Ä¢ task: Partial&lt;Task&gt;  Partial Task object containing the fields to update  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when the update is complete  Implementation of‚Äã  IDatabaseAdapter.updateTask  Defined in‚Äã  packages/core/src/specs/v2/database.ts:544    ","version":"1.0.17","tagName":"h3"},{"title":"deleteTask()‚Äã","type":1,"pageTitle":"Class: abstract DatabaseAdapter<DB>","url":"/api/namespaces/v2/classes/DatabaseAdapter#deletetask","content":" abstract deleteTask(id): Promise&lt;void&gt;  Deletes a task from the database.  Parameters‚Äã  ‚Ä¢ id: `${string}-${string}-${string}-${string}-${string}`  The UUID of the task to delete  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when the deletion is complete  Implementation of‚Äã  IDatabaseAdapter.deleteTask  Defined in‚Äã  packages/core/src/specs/v2/database.ts:551 ","version":"1.0.17","tagName":"h3"},{"title":"Function: addHeader()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/addHeader","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: addHeader()","url":"/api/namespaces/v2/functions/addHeader#parameters","content":" ‚Ä¢ header: string  The header to add to the body.  ‚Ä¢ body: string  The body to which to add the header.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: addHeader()","url":"/api/namespaces/v2/functions/addHeader#returns","content":" string  The body with the header prepended.  ","version":"1.0.17","tagName":"h2"},{"title":"Example‚Äã","type":1,"pageTitle":"Function: addHeader()","url":"/api/namespaces/v2/functions/addHeader#example","content":" // Given a header and a body const header = &quot;Header&quot;; const body = &quot;Body&quot;; // Adding the header to the body will result in: // &quot;Header\\nBody&quot; const text = addHeader(header, body);   ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: addHeader()","url":"/api/namespaces/v2/functions/addHeader#defined-in","content":" packages/core/src/specs/v2/utils.ts:103 ","version":"1.0.17","tagName":"h2"},{"title":"Enumeration: TeeType","type":0,"sectionRef":"#","url":"/api/namespaces/v2/enumerations/TeeType","content":"","keywords":"","version":"1.0.17"},{"title":"Enumeration Members‚Äã","type":1,"pageTitle":"Enumeration: TeeType","url":"/api/namespaces/v2/enumerations/TeeType#enumeration-members","content":" ","version":"1.0.17","tagName":"h2"},{"title":"TDX_DSTACK‚Äã","type":1,"pageTitle":"Enumeration: TeeType","url":"/api/namespaces/v2/enumerations/TeeType#tdx_dstack","content":" TDX_DSTACK: &quot;tdx_dstack&quot;  Represents Intel Trusted Domain Extensions (TDX) running on DSTACK infrastructure.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1543 ","version":"1.0.17","tagName":"h3"},{"title":"Function: asUUID()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/asUUID","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/namespaces/v2/functions/asUUID#parameters","content":" ‚Ä¢ id: string  The string UUID to validate and cast  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/namespaces/v2/functions/asUUID#returns","content":" `${string}-${string}-${string}-${string}-${string}`  The same UUID with branded type information  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: asUUID()","url":"/api/namespaces/v2/functions/asUUID#defined-in","content":" packages/core/src/specs/v2/types.ts:13 ","version":"1.0.17","tagName":"h2"},{"title":"Function: composeActionExamples()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/composeActionExamples","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: composeActionExamples()","url":"/api/namespaces/v2/functions/composeActionExamples#parameters","content":" ‚Ä¢ actionsData: Action[]  The list of actions to generate examples from.  ‚Ä¢ count: number  The number of examples to compose.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: composeActionExamples()","url":"/api/namespaces/v2/functions/composeActionExamples#returns","content":" string  The formatted action examples.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: composeActionExamples()","url":"/api/namespaces/v2/functions/composeActionExamples#defined-in","content":" packages/core/src/specs/v2/actions.ts:10 ","version":"1.0.17","tagName":"h2"},{"title":"Function: composePrompt()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/composePrompt","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: composePrompt()","url":"/api/namespaces/v2/functions/composePrompt#parameters","content":" ‚Ä¢ options  Object containing state and template information.  ‚Ä¢ options.state  The state object containing values to fill the template.  ‚Ä¢ options.template: TemplateType  The template string or function to be used for composing the prompt.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: composePrompt()","url":"/api/namespaces/v2/functions/composePrompt#returns","content":" string  The composed prompt output, with state values and random user names populated.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: composePrompt()","url":"/api/namespaces/v2/functions/composePrompt#defined-in","content":" packages/core/src/specs/v2/utils.ts:56 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createMessageMemory()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/createMessageMemory","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createMessageMemory()","url":"/api/namespaces/v2/functions/createMessageMemory#parameters","content":" ‚Ä¢ params  ‚Ä¢ params.id?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.agentId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.content: Content &amp; object  ‚Ä¢ params.embedding?: number[]  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createMessageMemory()","url":"/api/namespaces/v2/functions/createMessageMemory#returns","content":" MessageMemory  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createMessageMemory()","url":"/api/namespaces/v2/functions/createMessageMemory#defined-in","content":" packages/core/src/specs/v2/types.ts:2097 ","version":"1.0.17","tagName":"h2"},{"title":"Function: composePromptFromState()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/composePromptFromState","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: composePromptFromState()","url":"/api/namespaces/v2/functions/composePromptFromState#parameters","content":" ‚Ä¢ options  Object containing state and template information.  ‚Ä¢ options.state: State  The state object containing values to fill the template.  ‚Ä¢ options.template: TemplateType  The template to be used for composing the prompt.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: composePromptFromState()","url":"/api/namespaces/v2/functions/composePromptFromState#returns","content":" string  The composed prompt output.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: composePromptFromState()","url":"/api/namespaces/v2/functions/composePromptFromState#defined-in","content":" packages/core/src/specs/v2/utils.ts:74 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createService()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/createService","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Function: createService()","url":"/api/namespaces/v2/functions/createService#type-parameters","content":" ‚Ä¢ TService extends Service = Service  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createService()","url":"/api/namespaces/v2/functions/createService#parameters","content":" ‚Ä¢ serviceType: string  The service type name  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createService()","url":"/api/namespaces/v2/functions/createService#returns","content":" ServiceBuilder&lt;TService&gt;  A new ServiceBuilder instance  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createService()","url":"/api/namespaces/v2/functions/createService#defined-in","content":" packages/core/src/specs/v2/services.ts:28 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createServiceError()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/createServiceError","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createServiceError()","url":"/api/namespaces/v2/functions/createServiceError#parameters","content":" ‚Ä¢ error: unknown  ‚Ä¢ code: string = 'UNKNOWN_ERROR'  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createServiceError()","url":"/api/namespaces/v2/functions/createServiceError#returns","content":" ServiceError  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createServiceError()","url":"/api/namespaces/v2/functions/createServiceError#defined-in","content":" packages/core/src/specs/v2/types.ts:2242 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createUniqueUuid()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/createUniqueUuid","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createUniqueUuid()","url":"/api/namespaces/v2/functions/createUniqueUuid#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  The runtime context object.  ‚Ä¢ baseUserId: string  The base user ID to use in generating the UUID.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createUniqueUuid()","url":"/api/namespaces/v2/functions/createUniqueUuid#returns","content":" `${string}-${string}-${string}-${string}-${string}`  The unique UUID generated based on the runtime and base user ID.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createUniqueUuid()","url":"/api/namespaces/v2/functions/createUniqueUuid#defined-in","content":" packages/core/src/specs/v2/entities.ts:41 ","version":"1.0.17","tagName":"h2"},{"title":"Function: decryptedCharacter()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/decryptedCharacter","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: decryptedCharacter()","url":"/api/namespaces/v2/functions/decryptedCharacter#parameters","content":" ‚Ä¢ character: Character  The character object with encrypted secrets  ‚Ä¢ runtime: IAgentRuntime  The runtime information for decryption  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: decryptedCharacter()","url":"/api/namespaces/v2/functions/decryptedCharacter#returns","content":" Character  A copy of the character with decrypted secrets  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: decryptedCharacter()","url":"/api/namespaces/v2/functions/decryptedCharacter#defined-in","content":" packages/core/src/specs/v2/settings.ts:144 ","version":"1.0.17","tagName":"h2"},{"title":"Function: decryptObjectValues()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/decryptObjectValues","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: decryptObjectValues()","url":"/api/namespaces/v2/functions/decryptObjectValues#parameters","content":" ‚Ä¢ obj: Record&lt;string, any&gt;  Object with encrypted values  ‚Ä¢ salt: string  The salt to use for decryption  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: decryptObjectValues()","url":"/api/namespaces/v2/functions/decryptObjectValues#returns","content":" Record&lt;string, any&gt;  Object with decrypted values  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: decryptObjectValues()","url":"/api/namespaces/v2/functions/decryptObjectValues#defined-in","content":" packages/core/src/specs/v2/settings.ts:164 ","version":"1.0.17","tagName":"h2"},{"title":"Function: createSettingFromConfig()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/createSettingFromConfig","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: createSettingFromConfig()","url":"/api/namespaces/v2/functions/createSettingFromConfig#parameters","content":" ‚Ä¢ configSetting: Omit&lt;Setting, &quot;value&quot;&gt;  The configSetting object to create the Setting from.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: createSettingFromConfig()","url":"/api/namespaces/v2/functions/createSettingFromConfig#returns","content":" Setting  A new Setting object created from the provided configSetting object.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: createSettingFromConfig()","url":"/api/namespaces/v2/functions/createSettingFromConfig#defined-in","content":" packages/core/src/specs/v2/settings.ts:34 ","version":"1.0.17","tagName":"h2"},{"title":"Function: encryptedCharacter()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/encryptedCharacter","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: encryptedCharacter()","url":"/api/namespaces/v2/functions/encryptedCharacter#parameters","content":" ‚Ä¢ character: Character  The character object to encrypt secrets for  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: encryptedCharacter()","url":"/api/namespaces/v2/functions/encryptedCharacter#returns","content":" Character  A copy of the character with encrypted secrets  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: encryptedCharacter()","url":"/api/namespaces/v2/functions/encryptedCharacter#defined-in","content":" packages/core/src/specs/v2/settings.ts:134 ","version":"1.0.17","tagName":"h2"},{"title":"Function: defineService()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/defineService","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Function: defineService()","url":"/api/namespaces/v2/functions/defineService#type-parameters","content":" ‚Ä¢ T extends Service = Service  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: defineService()","url":"/api/namespaces/v2/functions/defineService#parameters","content":" ‚Ä¢ definition: ServiceDefinition&lt;T&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: defineService()","url":"/api/namespaces/v2/functions/defineService#returns","content":" Object  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: defineService()","url":"/api/namespaces/v2/functions/defineService#defined-in","content":" packages/core/src/specs/v2/services.ts:47 ","version":"1.0.17","tagName":"h2"},{"title":"Function: encryptObjectValues()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/encryptObjectValues","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: encryptObjectValues()","url":"/api/namespaces/v2/functions/encryptObjectValues#parameters","content":" ‚Ä¢ obj: Record&lt;string, any&gt;  Object with values to encrypt  ‚Ä¢ salt: string  The salt to use for encryption  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: encryptObjectValues()","url":"/api/namespaces/v2/functions/encryptObjectValues#returns","content":" Record&lt;string, any&gt;  Object with encrypted values  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: encryptObjectValues()","url":"/api/namespaces/v2/functions/encryptObjectValues#defined-in","content":" packages/core/src/specs/v2/settings.ts:154 ","version":"1.0.17","tagName":"h2"},{"title":"Function: decryptStringValue()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/decryptStringValue","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: decryptStringValue()","url":"/api/namespaces/v2/functions/decryptStringValue#parameters","content":" ‚Ä¢ value: string  The encrypted value in 'iv:encrypted' format  ‚Ä¢ salt: string  The salt to use for decryption  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: decryptStringValue()","url":"/api/namespaces/v2/functions/decryptStringValue#returns","content":" string  The decrypted string value  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: decryptStringValue()","url":"/api/namespaces/v2/functions/decryptStringValue#defined-in","content":" packages/core/src/specs/v2/settings.ts:63 ","version":"1.0.17","tagName":"h2"},{"title":"Function: encryptStringValue()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/encryptStringValue","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: encryptStringValue()","url":"/api/namespaces/v2/functions/encryptStringValue#parameters","content":" ‚Ä¢ value: string  The string value to encrypt  ‚Ä¢ salt: string  The salt to use for encryption  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: encryptStringValue()","url":"/api/namespaces/v2/functions/encryptStringValue#returns","content":" string  The encrypted value in 'iv:encrypted' format  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: encryptStringValue()","url":"/api/namespaces/v2/functions/encryptStringValue#defined-in","content":" packages/core/src/specs/v2/settings.ts:53 ","version":"1.0.17","tagName":"h2"},{"title":"Function: findEntityByName()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/findEntityByName","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: findEntityByName()","url":"/api/namespaces/v2/functions/findEntityByName#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  The agent runtime environment.  ‚Ä¢ message: Memory  The memory message containing relevant information.  ‚Ä¢ state: State  The current state of the system.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: findEntityByName()","url":"/api/namespaces/v2/functions/findEntityByName#returns","content":" Promise&lt;Entity&gt;  A promise that resolves to the found entity or null if not found.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: findEntityByName()","url":"/api/namespaces/v2/functions/findEntityByName#defined-in","content":" packages/core/src/specs/v2/entities.ts:25 ","version":"1.0.17","tagName":"h2"},{"title":"Function: findWorldsForOwner()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/findWorldsForOwner","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: findWorldsForOwner()","url":"/api/namespaces/v2/functions/findWorldsForOwner#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ entityId: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: findWorldsForOwner()","url":"/api/namespaces/v2/functions/findWorldsForOwner#returns","content":" Promise&lt;World[]&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: findWorldsForOwner()","url":"/api/namespaces/v2/functions/findWorldsForOwner#defined-in","content":" packages/core/src/specs/v2/roles.ts:36 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatActionNames()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/formatActionNames","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatActionNames()","url":"/api/namespaces/v2/functions/formatActionNames#parameters","content":" ‚Ä¢ actions: Action[]  An array of Action objects from which to extract names.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatActionNames()","url":"/api/namespaces/v2/functions/formatActionNames#returns","content":" string  A comma-separated string of action names.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatActionNames()","url":"/api/namespaces/v2/functions/formatActionNames#defined-in","content":" packages/core/src/specs/v2/actions.ts:71 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatEntities()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/formatEntities","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatEntities()","url":"/api/namespaces/v2/functions/formatEntities#parameters","content":" ‚Ä¢ options  The options object.  ‚Ä¢ options.entities: Entity[]  The list of entities to format.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatEntities()","url":"/api/namespaces/v2/functions/formatEntities#returns","content":" string  A formatted string representing the entities.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatEntities()","url":"/api/namespaces/v2/functions/formatEntities#defined-in","content":" packages/core/src/specs/v2/entities.ts:70 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatActions()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/formatActions","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatActions()","url":"/api/namespaces/v2/functions/formatActions#parameters","content":" ‚Ä¢ actions: Action[]  An array of Action objects to format.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatActions()","url":"/api/namespaces/v2/functions/formatActions#returns","content":" string  A detailed string of actions, including names and descriptions.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatActions()","url":"/api/namespaces/v2/functions/formatActions#defined-in","content":" packages/core/src/specs/v2/actions.ts:80 ","version":"1.0.17","tagName":"h2"},{"title":"Function: formatMessages()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/formatMessages","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: formatMessages()","url":"/api/namespaces/v2/functions/formatMessages#parameters","content":" ‚Ä¢ params  The formatting parameters  ‚Ä¢ params.messages: Memory[]  List of messages to format  ‚Ä¢ params.entities: Entity[]  List of entities for name resolution  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: formatMessages()","url":"/api/namespaces/v2/functions/formatMessages#returns","content":" string  Formatted message string with timestamps and user information  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: formatMessages()","url":"/api/namespaces/v2/functions/formatMessages#defined-in","content":" packages/core/src/specs/v2/utils.ts:126 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getEntityDetails()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/getEntityDetails","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getEntityDetails()","url":"/api/namespaces/v2/functions/getEntityDetails#parameters","content":" ‚Ä¢ params  The input parameters  ‚Ä¢ params.runtime: IAgentRuntime  The Agent Runtime instance  ‚Ä¢ params.roomId: `${string}-${string}-${string}-${string}-${string}`  The ID of the room to retrieve entity details for  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getEntityDetails()","url":"/api/namespaces/v2/functions/getEntityDetails#returns","content":" Promise&lt;any[]&gt;  A promise that resolves to an array of unique entity details  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getEntityDetails()","url":"/api/namespaces/v2/functions/getEntityDetails#defined-in","content":" packages/core/src/specs/v2/entities.ts:53 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getSalt()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/getSalt","content":"","keywords":"","version":"1.0.17"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getSalt()","url":"/api/namespaces/v2/functions/getSalt#returns","content":" string  The salt for the agent.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getSalt()","url":"/api/namespaces/v2/functions/getSalt#defined-in","content":" packages/core/src/specs/v2/settings.ts:43 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getMemoryText()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/getMemoryText","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getMemoryText()","url":"/api/namespaces/v2/functions/getMemoryText#parameters","content":" ‚Ä¢ memory: Memory  The memory to extract text from  ‚Ä¢ defaultValue: string = ''  Optional default value if no text is found  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getMemoryText()","url":"/api/namespaces/v2/functions/getMemoryText#returns","content":" string  The text content or default value  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getMemoryText()","url":"/api/namespaces/v2/functions/getMemoryText#defined-in","content":" packages/core/src/specs/v2/types.ts:2235 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getTypedService()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/getTypedService","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Function: getTypedService()","url":"/api/namespaces/v2/functions/getTypedService#type-parameters","content":" ‚Ä¢ T extends TypedService&lt;any, any&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getTypedService()","url":"/api/namespaces/v2/functions/getTypedService#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  The agent runtime  ‚Ä¢ serviceType: ServiceTypeName  The type of service to get  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getTypedService()","url":"/api/namespaces/v2/functions/getTypedService#returns","content":" T  The service instance or null if not available  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getTypedService()","url":"/api/namespaces/v2/functions/getTypedService#defined-in","content":" packages/core/src/specs/v2/types.ts:2144 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getUserServerRole()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/getUserServerRole","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getUserServerRole()","url":"/api/namespaces/v2/functions/getUserServerRole#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  The runtime object containing necessary configurations and services.  ‚Ä¢ entityId: string  The unique identifier of the user entity.  ‚Ä¢ serverId: string  The unique identifier of the server.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getUserServerRole()","url":"/api/namespaces/v2/functions/getUserServerRole#returns","content":" Promise&lt;Role&gt;  The role of the user entity within the server, resolved as a Promise.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getUserServerRole()","url":"/api/namespaces/v2/functions/getUserServerRole#defined-in","content":" packages/core/src/specs/v2/roles.ts:25 ","version":"1.0.17","tagName":"h2"},{"title":"Function: initializeOnboarding()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/initializeOnboarding","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: initializeOnboarding()","url":"/api/namespaces/v2/functions/initializeOnboarding#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ world: World  ‚Ä¢ config: OnboardingConfig  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: initializeOnboarding()","url":"/api/namespaces/v2/functions/initializeOnboarding#returns","content":" Promise&lt;WorldSettings&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: initializeOnboarding()","url":"/api/namespaces/v2/functions/initializeOnboarding#defined-in","content":" packages/core/src/specs/v2/settings.ts:121 ","version":"1.0.17","tagName":"h2"},{"title":"Function: getWorldSettings()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/getWorldSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: getWorldSettings()","url":"/api/namespaces/v2/functions/getWorldSettings#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ serverId: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: getWorldSettings()","url":"/api/namespaces/v2/functions/getWorldSettings#returns","content":" Promise&lt;WorldSettings&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: getWorldSettings()","url":"/api/namespaces/v2/functions/getWorldSettings#defined-in","content":" packages/core/src/specs/v2/settings.ts:111 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isDescriptionMetadata()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/isDescriptionMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isDescriptionMetadata()","url":"/api/namespaces/v2/functions/isDescriptionMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isDescriptionMetadata()","url":"/api/namespaces/v2/functions/isDescriptionMetadata#returns","content":" metadata is DescriptionMetadata  True if the metadata is a DescriptionMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isDescriptionMetadata()","url":"/api/namespaces/v2/functions/isDescriptionMetadata#defined-in","content":" packages/core/src/specs/v2/types.ts:2183 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isCustomMetadata()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/isCustomMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isCustomMetadata()","url":"/api/namespaces/v2/functions/isCustomMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isCustomMetadata()","url":"/api/namespaces/v2/functions/isCustomMetadata#returns","content":" metadata is CustomMetadata  True if the metadata is a CustomMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isCustomMetadata()","url":"/api/namespaces/v2/functions/isCustomMetadata#defined-in","content":" packages/core/src/specs/v2/types.ts:2192 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isDocumentMetadata()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/isDocumentMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isDocumentMetadata()","url":"/api/namespaces/v2/functions/isDocumentMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isDocumentMetadata()","url":"/api/namespaces/v2/functions/isDocumentMetadata#returns","content":" metadata is DocumentMetadata  True if the metadata is a DocumentMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isDocumentMetadata()","url":"/api/namespaces/v2/functions/isDocumentMetadata#defined-in","content":" packages/core/src/specs/v2/types.ts:2156 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isFragmentMemory()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/isFragmentMemory","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isFragmentMemory()","url":"/api/namespaces/v2/functions/isFragmentMemory#parameters","content":" ‚Ä¢ memory: Memory  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isFragmentMemory()","url":"/api/namespaces/v2/functions/isFragmentMemory#returns","content":" memory is Memory &amp; { metadata: FragmentMetadata }  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isFragmentMemory()","url":"/api/namespaces/v2/functions/isFragmentMemory#defined-in","content":" packages/core/src/specs/v2/types.ts:2223 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isDocumentMemory()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/isDocumentMemory","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isDocumentMemory()","url":"/api/namespaces/v2/functions/isDocumentMemory#parameters","content":" ‚Ä¢ memory: Memory  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isDocumentMemory()","url":"/api/namespaces/v2/functions/isDocumentMemory#returns","content":" memory is Memory &amp; { metadata: DocumentMetadata }  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isDocumentMemory()","url":"/api/namespaces/v2/functions/isDocumentMemory#defined-in","content":" packages/core/src/specs/v2/types.ts:2214 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isFragmentMetadata()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/isFragmentMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isFragmentMetadata()","url":"/api/namespaces/v2/functions/isFragmentMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isFragmentMetadata()","url":"/api/namespaces/v2/functions/isFragmentMetadata#returns","content":" metadata is FragmentMetadata  True if the metadata is a FragmentMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isFragmentMetadata()","url":"/api/namespaces/v2/functions/isFragmentMetadata#defined-in","content":" packages/core/src/specs/v2/types.ts:2165 ","version":"1.0.17","tagName":"h2"},{"title":"Function: isMessageMetadata()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/isMessageMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: isMessageMetadata()","url":"/api/namespaces/v2/functions/isMessageMetadata#parameters","content":" ‚Ä¢ metadata: MemoryMetadata  The metadata to check  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: isMessageMetadata()","url":"/api/namespaces/v2/functions/isMessageMetadata#returns","content":" metadata is MessageMetadata  True if the metadata is a MessageMetadata  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: isMessageMetadata()","url":"/api/namespaces/v2/functions/isMessageMetadata#defined-in","content":" packages/core/src/specs/v2/types.ts:2174 ","version":"1.0.17","tagName":"h2"},{"title":"Function: saltSettingValue()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/saltSettingValue","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: saltSettingValue()","url":"/api/namespaces/v2/functions/saltSettingValue#parameters","content":" ‚Ä¢ setting: Setting  ‚Ä¢ salt: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: saltSettingValue()","url":"/api/namespaces/v2/functions/saltSettingValue#returns","content":" Setting  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: saltSettingValue()","url":"/api/namespaces/v2/functions/saltSettingValue#defined-in","content":" packages/core/src/specs/v2/settings.ts:71 ","version":"1.0.17","tagName":"h2"},{"title":"Function: saltWorldSettings()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/saltWorldSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: saltWorldSettings()","url":"/api/namespaces/v2/functions/saltWorldSettings#parameters","content":" ‚Ä¢ worldSettings: WorldSettings  ‚Ä¢ salt: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: saltWorldSettings()","url":"/api/namespaces/v2/functions/saltWorldSettings#returns","content":" WorldSettings  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: saltWorldSettings()","url":"/api/namespaces/v2/functions/saltWorldSettings#defined-in","content":" packages/core/src/specs/v2/settings.ts:86 ","version":"1.0.17","tagName":"h2"},{"title":"Function: stringToUuid()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/stringToUuid","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: stringToUuid()","url":"/api/namespaces/v2/functions/stringToUuid#parameters","content":" ‚Ä¢ target: string | number  The string or number to convert to a UUID.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: stringToUuid()","url":"/api/namespaces/v2/functions/stringToUuid#returns","content":" `${string}-${string}-${string}-${string}-${string}`  The UUID generated from the input target.  ","version":"1.0.17","tagName":"h2"},{"title":"Throws‚Äã","type":1,"pageTitle":"Function: stringToUuid()","url":"/api/namespaces/v2/functions/stringToUuid#throws","content":" Throws an error if the input target is not a string.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: stringToUuid()","url":"/api/namespaces/v2/functions/stringToUuid#defined-in","content":" packages/core/src/specs/v2/utils.ts:157 ","version":"1.0.17","tagName":"h2"},{"title":"Function: unsaltSettingValue()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/unsaltSettingValue","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: unsaltSettingValue()","url":"/api/namespaces/v2/functions/unsaltSettingValue#parameters","content":" ‚Ä¢ setting: Setting  ‚Ä¢ salt: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: unsaltSettingValue()","url":"/api/namespaces/v2/functions/unsaltSettingValue#returns","content":" Setting  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: unsaltSettingValue()","url":"/api/namespaces/v2/functions/unsaltSettingValue#defined-in","content":" packages/core/src/specs/v2/settings.ts:79 ","version":"1.0.17","tagName":"h2"},{"title":"Function: unsaltWorldSettings()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/unsaltWorldSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: unsaltWorldSettings()","url":"/api/namespaces/v2/functions/unsaltWorldSettings#parameters","content":" ‚Ä¢ worldSettings: WorldSettings  ‚Ä¢ salt: string  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: unsaltWorldSettings()","url":"/api/namespaces/v2/functions/unsaltWorldSettings#returns","content":" WorldSettings  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: unsaltWorldSettings()","url":"/api/namespaces/v2/functions/unsaltWorldSettings#defined-in","content":" packages/core/src/specs/v2/settings.ts:93 ","version":"1.0.17","tagName":"h2"},{"title":"Function: validateUuid()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/validateUuid","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: validateUuid()","url":"/api/namespaces/v2/functions/validateUuid#parameters","content":" ‚Ä¢ value: unknown  The value to validate.  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: validateUuid()","url":"/api/namespaces/v2/functions/validateUuid#returns","content":" `${string}-${string}-${string}-${string}-${string}`  Returns the validated UUID value or null if validation fails.  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: validateUuid()","url":"/api/namespaces/v2/functions/validateUuid#defined-in","content":" packages/core/src/specs/v2/utils.ts:146 ","version":"1.0.17","tagName":"h2"},{"title":"Function: updateWorldSettings()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/functions/updateWorldSettings","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Function: updateWorldSettings()","url":"/api/namespaces/v2/functions/updateWorldSettings#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ serverId: string  ‚Ä¢ worldSettings: WorldSettings  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Function: updateWorldSettings()","url":"/api/namespaces/v2/functions/updateWorldSettings#returns","content":" Promise&lt;boolean&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Function: updateWorldSettings()","url":"/api/namespaces/v2/functions/updateWorldSettings#defined-in","content":" packages/core/src/specs/v2/settings.ts:100 ","version":"1.0.17","tagName":"h2"},{"title":"Interface: Action","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Action","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v2/interfaces/Action#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"similes?‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v2/interfaces/Action#similes","content":" optional similes: string[]  Similar action descriptions  Defined in‚Äã  packages/core/src/specs/v2/types.ts:392    ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v2/interfaces/Action#description","content":" description: string  Detailed description  Defined in‚Äã  packages/core/src/specs/v2/types.ts:395    ","version":"1.0.17","tagName":"h3"},{"title":"examples?‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v2/interfaces/Action#examples","content":" optional examples: ActionExample[][]  Example usages  Defined in‚Äã  packages/core/src/specs/v2/types.ts:398    ","version":"1.0.17","tagName":"h3"},{"title":"handler‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v2/interfaces/Action#handler","content":" handler: Handler  Handler function  Defined in‚Äã  packages/core/src/specs/v2/types.ts:401    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v2/interfaces/Action#name","content":" name: string  Action name  Defined in‚Äã  packages/core/src/specs/v2/types.ts:404    ","version":"1.0.17","tagName":"h3"},{"title":"validate‚Äã","type":1,"pageTitle":"Interface: Action","url":"/api/namespaces/v2/interfaces/Action#validate","content":" validate: Validator  Validation function  Defined in‚Äã  packages/core/src/specs/v2/types.ts:407 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ActionEventPayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ActionEventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ActionEventPayload","url":"/api/namespaces/v2/interfaces/ActionEventPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ActionExample","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ActionExample","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ActionExample","url":"/api/namespaces/v2/interfaces/ActionExample#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: ActionExample","url":"/api/namespaces/v2/interfaces/ActionExample#name","content":" name: string  User associated with the example  Defined in‚Äã  packages/core/src/specs/v2/types.ts:60    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: ActionExample","url":"/api/namespaces/v2/interfaces/ActionExample#content","content":" content: Content  Content of the example  Defined in‚Äã  packages/core/src/specs/v2/types.ts:63 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: AudioProcessingParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/AudioProcessingParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/namespaces/v2/interfaces/AudioProcessingParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/namespaces/v2/interfaces/AudioProcessingParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/namespaces/v2/interfaces/AudioProcessingParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678    ","version":"1.0.17","tagName":"h3"},{"title":"audioUrl‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/namespaces/v2/interfaces/AudioProcessingParams#audiourl","content":" audioUrl: string  The URL or path of the audio file to process  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1756    ","version":"1.0.17","tagName":"h3"},{"title":"processingType‚Äã","type":1,"pageTitle":"Interface: AudioProcessingParams","url":"/api/namespaces/v2/interfaces/AudioProcessingParams#processingtype","content":" processingType: string  The type of audio processing to perform  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1758 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Agent","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Agent","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#extends","content":" Character  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Inherited from‚Äã  Character.id  Defined in‚Äã  packages/core/src/specs/v2/types.ts:729    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#name","content":" name: string  Character name  Inherited from‚Äã  Character.name  Defined in‚Äã  packages/core/src/specs/v2/types.ts:732    ","version":"1.0.17","tagName":"h3"},{"title":"Interface: BaseMetadata","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/BaseMetadata","content":"@elizaos/core v1.3.0 / v2 / BaseMetadata Interface: BaseMetadata Base interface for all memory metadata types. It includes common properties for all memories, such as: type: The kind of memory (e.g., MemoryType.MESSAGE, MemoryType.DOCUMENT).source: An optional string indicating the origin of the memory (e.g., 'discord', 'user_input').sourceId: An optional UUID linking to a source entity or object.scope: The visibility scope of the memory (shared, private, or room).timestamp: An optional numerical timestamp (e.g., milliseconds since epoch) of when the memory was created or relevant.tags: Optional array of strings for categorizing or filtering memories. Specific metadata types like DocumentMetadata or MessageMetadata extend this base.","keywords":"","version":"1.0.17"},{"title":"username?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#username","content":" optional username: string  Optional username  Inherited from‚Äã  Character.username  Defined in‚Äã  packages/core/src/specs/v2/types.ts:735    ","version":"1.0.17","tagName":"h3"},{"title":"system?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#system","content":" optional system: string  Optional system prompt  Inherited from‚Äã  Character.system  Defined in‚Äã  packages/core/src/specs/v2/types.ts:738    ","version":"1.0.17","tagName":"h3"},{"title":"templates?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#templates","content":" optional templates: object  Optional prompt templates  Index Signature‚Äã  [key: string]: TemplateType  Inherited from‚Äã  Character.templates  Defined in‚Äã  packages/core/src/specs/v2/types.ts:741    ","version":"1.0.17","tagName":"h3"},{"title":"bio‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#bio","content":" bio: string | string[]  Character biography  Inherited from‚Äã  Character.bio  Defined in‚Äã  packages/core/src/specs/v2/types.ts:746    ","version":"1.0.17","tagName":"h3"},{"title":"messageExamples?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#messageexamples","content":" optional messageExamples: MessageExample[][]  Example messages  Inherited from‚Äã  Character.messageExamples  Defined in‚Äã  packages/core/src/specs/v2/types.ts:749    ","version":"1.0.17","tagName":"h3"},{"title":"postExamples?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#postexamples","content":" optional postExamples: string[]  Example posts  Inherited from‚Äã  Character.postExamples  Defined in‚Äã  packages/core/src/specs/v2/types.ts:752    ","version":"1.0.17","tagName":"h3"},{"title":"topics?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#topics","content":" optional topics: string[]  Known topics  Inherited from‚Äã  Character.topics  Defined in‚Äã  packages/core/src/specs/v2/types.ts:755    ","version":"1.0.17","tagName":"h3"},{"title":"adjectives?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#adjectives","content":" optional adjectives: string[]  Character traits  Inherited from‚Äã  Character.adjectives  Defined in‚Äã  packages/core/src/specs/v2/types.ts:758    ","version":"1.0.17","tagName":"h3"},{"title":"knowledge?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#knowledge","content":" optional knowledge: (string | object | object)[]  Optional knowledge base  Inherited from‚Äã  Character.knowledge  Defined in‚Äã  packages/core/src/specs/v2/types.ts:761    ","version":"1.0.17","tagName":"h3"},{"title":"plugins?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#plugins","content":" optional plugins: string[]  Available plugins  Inherited from‚Äã  Character.plugins  Defined in‚Äã  packages/core/src/specs/v2/types.ts:768    ","version":"1.0.17","tagName":"h3"},{"title":"settings?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#settings","content":" optional settings: object  Optional configuration  Index Signature‚Äã  [key: string]: any  Inherited from‚Äã  Character.settings  Defined in‚Äã  packages/core/src/specs/v2/types.ts:771    ","version":"1.0.17","tagName":"h3"},{"title":"secrets?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#secrets","content":" optional secrets: object  Optional secrets  Index Signature‚Äã  [key: string]: string | number | boolean  Inherited from‚Äã  Character.secrets  Defined in‚Äã  packages/core/src/specs/v2/types.ts:776    ","version":"1.0.17","tagName":"h3"},{"title":"style?‚Äã","type":1,"pageTitle":"Interface: Agent","url":"/api/namespaces/v2/interfaces/Agent#style","content":" optional style: object  Writing style guides  all?‚Äã  optional all: string[]  chat?‚Äã  optional chat: string[]  post?‚Äã  optional post: string[]  Inherited from‚Äã  Character.style  Defined in‚Äã  packages/core/src/specs/v2/types.ts:781 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: BaseModelParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/BaseModelParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: BaseModelParams","url":"/api/namespaces/v2/interfaces/BaseModelParams#extended-by","content":" TextGenerationParamsTextEmbeddingParamsImageGenerationParamsImageDescriptionParamsTranscriptionParamsTextToSpeechParamsAudioProcessingParamsVideoProcessingParamsObjectGenerationParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: BaseModelParams","url":"/api/namespaces/v2/interfaces/BaseModelParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: BaseModelParams","url":"/api/namespaces/v2/interfaces/BaseModelParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ChannelClearedPayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ChannelClearedPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ChannelClearedPayload","url":"/api/namespaces/v2/interfaces/ChannelClearedPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: Character","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Character","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#extended-by","content":" Agent  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Defined in‚Äã  packages/core/src/specs/v2/types.ts:729    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#name","content":" name: string  Character name  Defined in‚Äã  packages/core/src/specs/v2/types.ts:732    ","version":"1.0.17","tagName":"h3"},{"title":"username?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#username","content":" optional username: string  Optional username  Defined in‚Äã  packages/core/src/specs/v2/types.ts:735    ","version":"1.0.17","tagName":"h3"},{"title":"system?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#system","content":" optional system: string  Optional system prompt  Defined in‚Äã  packages/core/src/specs/v2/types.ts:738    ","version":"1.0.17","tagName":"h3"},{"title":"templates?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#templates","content":" optional templates: object  Optional prompt templates  Index Signature‚Äã  [key: string]: TemplateType  Defined in‚Äã  packages/core/src/specs/v2/types.ts:741    ","version":"1.0.17","tagName":"h3"},{"title":"bio‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#bio","content":" bio: string | string[]  Character biography  Defined in‚Äã  packages/core/src/specs/v2/types.ts:746    ","version":"1.0.17","tagName":"h3"},{"title":"messageExamples?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#messageexamples","content":" optional messageExamples: MessageExample[][]  Example messages  Defined in‚Äã  packages/core/src/specs/v2/types.ts:749    ","version":"1.0.17","tagName":"h3"},{"title":"postExamples?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#postexamples","content":" optional postExamples: string[]  Example posts  Defined in‚Äã  packages/core/src/specs/v2/types.ts:752    ","version":"1.0.17","tagName":"h3"},{"title":"topics?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#topics","content":" optional topics: string[]  Known topics  Defined in‚Äã  packages/core/src/specs/v2/types.ts:755    ","version":"1.0.17","tagName":"h3"},{"title":"adjectives?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#adjectives","content":" optional adjectives: string[]  Character traits  Defined in‚Äã  packages/core/src/specs/v2/types.ts:758    ","version":"1.0.17","tagName":"h3"},{"title":"knowledge?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#knowledge","content":" optional knowledge: (string | object | object)[]  Optional knowledge base  Defined in‚Äã  packages/core/src/specs/v2/types.ts:761    ","version":"1.0.17","tagName":"h3"},{"title":"plugins?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#plugins","content":" optional plugins: string[]  Available plugins  Defined in‚Äã  packages/core/src/specs/v2/types.ts:768    ","version":"1.0.17","tagName":"h3"},{"title":"settings?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#settings","content":" optional settings: object  Optional configuration  Index Signature‚Äã  [key: string]: any  Defined in‚Äã  packages/core/src/specs/v2/types.ts:771    ","version":"1.0.17","tagName":"h3"},{"title":"secrets?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#secrets","content":" optional secrets: object  Optional secrets  Index Signature‚Äã  [key: string]: string | number | boolean  Defined in‚Äã  packages/core/src/specs/v2/types.ts:776    ","version":"1.0.17","tagName":"h3"},{"title":"style?‚Äã","type":1,"pageTitle":"Interface: Character","url":"/api/namespaces/v2/interfaces/Character#style","content":" optional style: object  Writing style guides  all?‚Äã  optional all: string[]  chat?‚Äã  optional chat: string[]  post?‚Äã  optional post: string[]  Defined in‚Äã  packages/core/src/specs/v2/types.ts:781 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ChunkRow","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ChunkRow","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ChunkRow","url":"/api/namespaces/v2/interfaces/ChunkRow#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: ChunkRow","url":"/api/namespaces/v2/interfaces/ChunkRow#id","content":" id: string  The unique identifier for this chunk of text.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1369 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ControlMessage","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ControlMessage","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ControlMessage","url":"/api/namespaces/v2/interfaces/ControlMessage#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"type‚Äã","type":1,"pageTitle":"Interface: ControlMessage","url":"/api/namespaces/v2/interfaces/ControlMessage#type","content":" type: &quot;control&quot;  Message type identifier  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2393    ","version":"1.0.17","tagName":"h3"},{"title":"payload‚Äã","type":1,"pageTitle":"Interface: ControlMessage","url":"/api/namespaces/v2/interfaces/ControlMessage#payload","content":" payload: object  Control message payload  Index Signature‚Äã  [key: string]: unknown  action‚Äã  action: &quot;disable_input&quot; | &quot;enable_input&quot;  Action to perform  target?‚Äã  optional target: string  Optional target element identifier  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2396    ","version":"1.0.17","tagName":"h3"},{"title":"roomId‚Äã","type":1,"pageTitle":"Interface: ControlMessage","url":"/api/namespaces/v2/interfaces/ControlMessage#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Room ID to ensure signal is directed to the correct chat window  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2408 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Content","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Content","content":"","keywords":"","version":"1.0.17"},{"title":"Indexable‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#indexable","content":" [key: string]: unknown  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"thought?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#thought","content":" optional thought: string  The agent's internal thought process  Defined in‚Äã  packages/core/src/specs/v2/types.ts:25    ","version":"1.0.17","tagName":"h3"},{"title":"text?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#text","content":" optional text: string  The main text content visible to users  Defined in‚Äã  packages/core/src/specs/v2/types.ts:28    ","version":"1.0.17","tagName":"h3"},{"title":"actions?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#actions","content":" optional actions: string[]  Optional actions to be performed  Defined in‚Äã  packages/core/src/specs/v2/types.ts:31    ","version":"1.0.17","tagName":"h3"},{"title":"providers?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#providers","content":" optional providers: string[]  Optional providers to use for context generation  Defined in‚Äã  packages/core/src/specs/v2/types.ts:34    ","version":"1.0.17","tagName":"h3"},{"title":"source?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#source","content":" optional source: string  Optional source/origin of the content  Defined in‚Äã  packages/core/src/specs/v2/types.ts:37    ","version":"1.0.17","tagName":"h3"},{"title":"url?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#url","content":" optional url: string  URL of the original message/post (e.g. tweet URL, Discord message link)  Defined in‚Äã  packages/core/src/specs/v2/types.ts:40    ","version":"1.0.17","tagName":"h3"},{"title":"inReplyTo?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#inreplyto","content":" optional inReplyTo: `${string}-${string}-${string}-${string}-${string}`  UUID of parent message if this is a reply/thread  Defined in‚Äã  packages/core/src/specs/v2/types.ts:43    ","version":"1.0.17","tagName":"h3"},{"title":"attachments?‚Äã","type":1,"pageTitle":"Interface: Content","url":"/api/namespaces/v2/interfaces/Content#attachments","content":" optional attachments: Media[]  Array of media attachments  Defined in‚Äã  packages/core/src/specs/v2/types.ts:46 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: DirectoryItem","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/DirectoryItem","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: DirectoryItem","url":"/api/namespaces/v2/interfaces/DirectoryItem#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"directory‚Äã","type":1,"pageTitle":"Interface: DirectoryItem","url":"/api/namespaces/v2/interfaces/DirectoryItem#directory","content":" directory: string  The path to the directory containing knowledge files.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1356    ","version":"1.0.17","tagName":"h3"},{"title":"shared?‚Äã","type":1,"pageTitle":"Interface: DirectoryItem","url":"/api/namespaces/v2/interfaces/DirectoryItem#shared","content":" optional shared: boolean  If true, knowledge from this directory is considered shared; otherwise, it's private. Defaults to false.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1358 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: DetokenizeTextParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/DetokenizeTextParams","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: DetokenizeTextParams","url":"/api/namespaces/v2/interfaces/DetokenizeTextParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"tokens‚Äã","type":1,"pageTitle":"Interface: DetokenizeTextParams","url":"/api/namespaces/v2/interfaces/DetokenizeTextParams#tokens","content":" tokens: number[]  An array of numerical tokens to be converted back into text.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1418    ","version":"1.0.17","tagName":"h3"},{"title":"modelType‚Äã","type":1,"pageTitle":"Interface: DetokenizeTextParams","url":"/api/namespaces/v2/interfaces/DetokenizeTextParams#modeltype","content":" modelType: string  The model type used for detokenization, ensuring consistency with the original tokenization.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1420 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: DeriveKeyAttestationData","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/DeriveKeyAttestationData","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: DeriveKeyAttestationData","url":"/api/namespaces/v2/interfaces/DeriveKeyAttestationData#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: DeriveKeyAttestationData","url":"/api/namespaces/v2/interfaces/DeriveKeyAttestationData#agentid","content":" agentId: string  The unique identifier of the agent for which the key derivation is being attested.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1512    ","version":"1.0.17","tagName":"h3"},{"title":"publicKey‚Äã","type":1,"pageTitle":"Interface: DeriveKeyAttestationData","url":"/api/namespaces/v2/interfaces/DeriveKeyAttestationData#publickey","content":" publicKey: string  The public key of the agent instance involved in the key derivation process.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1514    ","version":"1.0.17","tagName":"h3"},{"title":"subject?‚Äã","type":1,"pageTitle":"Interface: DeriveKeyAttestationData","url":"/api/namespaces/v2/interfaces/DeriveKeyAttestationData#subject","content":" optional subject: string  Optional subject or context information related to the key derivation.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1516 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: EmbeddingSearchResult","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/EmbeddingSearchResult","content":"@elizaos/core v1.3.0 / v2 / EmbeddingSearchResult Interface: EmbeddingSearchResult Result interface for embedding similarity searches","keywords":"","version":"1.0.17"},{"title":"Interface: EnhancedState","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/EnhancedState","content":"","keywords":"","version":"1.0.17"},{"title":"Indexable‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/namespaces/v2/interfaces/EnhancedState#indexable","content":" [key: string]: StateValue  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/namespaces/v2/interfaces/EnhancedState#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"values‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/namespaces/v2/interfaces/EnhancedState#values","content":" values: StateObject  Holds directly accessible state values, often used for template rendering or quick lookups.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2292    ","version":"1.0.17","tagName":"h3"},{"title":"data‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/namespaces/v2/interfaces/EnhancedState#data","content":" data: StateObject  Stores more complex or structured data, potentially namespaced by providers or internal systems.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2294    ","version":"1.0.17","tagName":"h3"},{"title":"text‚Äã","type":1,"pageTitle":"Interface: EnhancedState","url":"/api/namespaces/v2/interfaces/EnhancedState#text","content":" text: string  A textual representation or summary of the current state, often used as context for models.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2296 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Entity","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Entity","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/namespaces/v2/interfaces/Entity#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/namespaces/v2/interfaces/Entity#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier, optional on creation  Defined in‚Äã  packages/core/src/specs/v2/types.ts:534    ","version":"1.0.17","tagName":"h3"},{"title":"names‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/namespaces/v2/interfaces/Entity#names","content":" names: string[]  Names of the entity  Defined in‚Äã  packages/core/src/specs/v2/types.ts:537    ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/namespaces/v2/interfaces/Entity#metadata","content":" optional metadata: object  Optional additional metadata  Index Signature‚Äã  [key: string]: any  Defined in‚Äã  packages/core/src/specs/v2/types.ts:540    ","version":"1.0.17","tagName":"h3"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/namespaces/v2/interfaces/Entity#agentid","content":" agentId: `${string}-${string}-${string}-${string}-${string}`  Agent ID this account is related to, for agents should be themselves  Defined in‚Äã  packages/core/src/specs/v2/types.ts:543    ","version":"1.0.17","tagName":"h3"},{"title":"components?‚Äã","type":1,"pageTitle":"Interface: Entity","url":"/api/namespaces/v2/interfaces/Entity#components","content":" optional components: Component[]  Optional array of components  Defined in‚Äã  packages/core/src/specs/v2/types.ts:546 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: EntityPayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/EntityPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: EntityPayload","url":"/api/namespaces/v2/interfaces/EntityPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: EvaluationExample","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/EvaluationExample","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/namespaces/v2/interfaces/EvaluationExample#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/namespaces/v2/interfaces/EvaluationExample#prompt","content":" prompt: string  Evaluation context  Defined in‚Äã  packages/core/src/specs/v2/types.ts:415    ","version":"1.0.17","tagName":"h3"},{"title":"messages‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/namespaces/v2/interfaces/EvaluationExample#messages","content":" messages: ActionExample[]  Example messages  Defined in‚Äã  packages/core/src/specs/v2/types.ts:418    ","version":"1.0.17","tagName":"h3"},{"title":"outcome‚Äã","type":1,"pageTitle":"Interface: EvaluationExample","url":"/api/namespaces/v2/interfaces/EvaluationExample#outcome","content":" outcome: string  Expected outcome  Defined in‚Äã  packages/core/src/specs/v2/types.ts:421 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Evaluator","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Evaluator","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v2/interfaces/Evaluator#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"alwaysRun?‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v2/interfaces/Evaluator#alwaysrun","content":" optional alwaysRun: boolean  Whether to always run  Defined in‚Äã  packages/core/src/specs/v2/types.ts:429    ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v2/interfaces/Evaluator#description","content":" description: string  Detailed description  Defined in‚Äã  packages/core/src/specs/v2/types.ts:432    ","version":"1.0.17","tagName":"h3"},{"title":"similes?‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v2/interfaces/Evaluator#similes","content":" optional similes: string[]  Similar evaluator descriptions  Defined in‚Äã  packages/core/src/specs/v2/types.ts:435    ","version":"1.0.17","tagName":"h3"},{"title":"examples‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v2/interfaces/Evaluator#examples","content":" examples: EvaluationExample[]  Example evaluations  Defined in‚Äã  packages/core/src/specs/v2/types.ts:438    ","version":"1.0.17","tagName":"h3"},{"title":"handler‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v2/interfaces/Evaluator#handler","content":" handler: Handler  Handler function  Defined in‚Äã  packages/core/src/specs/v2/types.ts:441    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v2/interfaces/Evaluator#name","content":" name: string  Evaluator name  Defined in‚Äã  packages/core/src/specs/v2/types.ts:444    ","version":"1.0.17","tagName":"h3"},{"title":"validate‚Äã","type":1,"pageTitle":"Interface: Evaluator","url":"/api/namespaces/v2/interfaces/Evaluator#validate","content":" validate: Validator  Validation function  Defined in‚Äã  packages/core/src/specs/v2/types.ts:447 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: EvaluatorEventPayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/EvaluatorEventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: EvaluatorEventPayload","url":"/api/namespaces/v2/interfaces/EvaluatorEventPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: EventPayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/EventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: EventPayload","url":"/api/namespaces/v2/interfaces/EventPayload#extended-by","content":" WorldPayloadEntityPayloadMessagePayloadChannelClearedPayloadInvokePayloadRunEventPayloadActionEventPayloadEvaluatorEventPayloadModelEventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: EventPayloadMap","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/EventPayloadMap","content":"@elizaos/core v1.3.0 / v2 / EventPayloadMap Interface: EventPayloadMap Maps event types to their corresponding payload types","keywords":"","version":"1.0.17"},{"title":"Interface: ImageDescriptionParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ImageDescriptionParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/namespaces/v2/interfaces/ImageDescriptionParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/namespaces/v2/interfaces/ImageDescriptionParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/namespaces/v2/interfaces/ImageDescriptionParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678    ","version":"1.0.17","tagName":"h3"},{"title":"imageUrl‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/namespaces/v2/interfaces/ImageDescriptionParams#imageurl","content":" imageUrl: string  The URL or path of the image to describe  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1724    ","version":"1.0.17","tagName":"h3"},{"title":"prompt?‚Äã","type":1,"pageTitle":"Interface: ImageDescriptionParams","url":"/api/namespaces/v2/interfaces/ImageDescriptionParams#prompt","content":" optional prompt: string  Optional prompt to guide the description  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1726 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ImageGenerationParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ImageGenerationParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/namespaces/v2/interfaces/ImageGenerationParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/namespaces/v2/interfaces/ImageGenerationParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/namespaces/v2/interfaces/ImageGenerationParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678    ","version":"1.0.17","tagName":"h3"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/namespaces/v2/interfaces/ImageGenerationParams#prompt","content":" prompt: string  The prompt describing the image to generate  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1712    ","version":"1.0.17","tagName":"h3"},{"title":"size?‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/namespaces/v2/interfaces/ImageGenerationParams#size","content":" optional size: string  The dimensions of the image to generate  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1714    ","version":"1.0.17","tagName":"h3"},{"title":"count?‚Äã","type":1,"pageTitle":"Interface: ImageGenerationParams","url":"/api/namespaces/v2/interfaces/ImageGenerationParams#count","content":" optional count: number  Number of images to generate  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1716 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: IAgentRuntime","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/IAgentRuntime","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#extends","content":" IDatabaseAdapter  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"db‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#db","content":" db: any  Database instance  Inherited from‚Äã  IDatabaseAdapter.db  Defined in‚Äã  packages/core/src/specs/v2/types.ts:814  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"init()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#init","content":" init(): Promise&lt;void&gt;  Initialize database connection  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.init  Defined in‚Äã  packages/core/src/specs/v2/types.ts:817    ","version":"1.0.17","tagName":"h3"},{"title":"close()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#close","content":" close(): Promise&lt;void&gt;  Close database connection  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.close  Defined in‚Äã  packages/core/src/specs/v2/types.ts:820    ","version":"1.0.17","tagName":"h3"},{"title":"getAgents()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#getagents","content":" getAgents(): Promise&lt;Partial&lt;Agent&gt;[]&gt;  Get all agents  Returns‚Äã  Promise&lt;Partial&lt;Agent&gt;[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getAgents  Defined in‚Äã  packages/core/src/specs/v2/types.ts:827    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesByIds()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#getentitiesbyids","content":" getEntitiesByIds(entityIds): Promise&lt;Entity[]&gt;  Get entity by IDs  Parameters‚Äã  ‚Ä¢ entityIds: `${string}-${string}-${string}-${string}-${string}`[]  Returns‚Äã  Promise&lt;Entity[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getEntitiesByIds  Defined in‚Äã  packages/core/src/specs/v2/types.ts:838    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesForRoom()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#getentitiesforroom","content":" getEntitiesForRoom(roomId, includeComponents?): Promise&lt;Entity[]&gt;  Get entities for room  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ includeComponents?: boolean  Returns‚Äã  Promise&lt;Entity[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getEntitiesForRoom  Defined in‚Äã  packages/core/src/specs/v2/types.ts:841    ","version":"1.0.17","tagName":"h3"},{"title":"createEntities()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#createentities","content":" createEntities(entities): Promise&lt;boolean&gt;  Create new entities  Parameters‚Äã  ‚Ä¢ entities: Entity[]  Returns‚Äã  Promise&lt;boolean&gt;  Inherited from‚Äã  IDatabaseAdapter.createEntities  Defined in‚Äã  packages/core/src/specs/v2/types.ts:844    ","version":"1.0.17","tagName":"h3"},{"title":"updateEntity()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#updateentity","content":" updateEntity(entity): Promise&lt;void&gt;  Update entity  Parameters‚Äã  ‚Ä¢ entity: Entity  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.updateEntity  Defined in‚Äã  packages/core/src/specs/v2/types.ts:847    ","version":"1.0.17","tagName":"h3"},{"title":"getComponent()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#getcomponent","content":" getComponent(entityId, type, worldId?, sourceEntityId?): Promise&lt;Component&gt;  Get component by ID  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ type: string  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component&gt;  Inherited from‚Äã  IDatabaseAdapter.getComponent  Defined in‚Äã  packages/core/src/specs/v2/types.ts:850    ","version":"1.0.17","tagName":"h3"},{"title":"getComponents()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#getcomponents","content":" getComponents(entityId, worldId?, sourceEntityId?): Promise&lt;Component[]&gt;  Get all components for an entity  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getComponents  Defined in‚Äã  packages/core/src/specs/v2/types.ts:858    ","version":"1.0.17","tagName":"h3"},{"title":"createComponent()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#createcomponent","content":" createComponent(component): Promise&lt;boolean&gt;  Create component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;boolean&gt;  Inherited from‚Äã  IDatabaseAdapter.createComponent  Defined in‚Äã  packages/core/src/specs/v2/types.ts:861    ","version":"1.0.17","tagName":"h3"},{"title":"updateComponent()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#updatecomponent","content":" updateComponent(component): Promise&lt;void&gt;  Update component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.updateComponent  Defined in‚Äã  packages/core/src/specs/v2/types.ts:864    ","version":"1.0.17","tagName":"h3"},{"title":"deleteComponent()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#deletecomponent","content":" deleteComponent(componentId): Promise&lt;void&gt;  Delete component  Parameters‚Äã  ‚Ä¢ componentId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;void&gt;  Inherited from‚Äã  IDatabaseAdapter.deleteComponent  Defined in‚Äã  packages/core/src/specs/v2/types.ts:867    ","version":"1.0.17","tagName":"h3"},{"title":"getMemories()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#getmemories","content":" getMemories(params): Promise&lt;Memory[]&gt;  Get memories matching criteria  Parameters‚Äã  ‚Ä¢ params  ‚Ä¢ params.entityId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.agentId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.count?: number  ‚Ä¢ params.unique?: boolean  ‚Ä¢ params.tableName: string  ‚Ä¢ params.start?: number  ‚Ä¢ params.end?: number  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.worldId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Memory[]&gt;  Inherited from‚Äã  IDatabaseAdapter.getMemories  Defined in‚Äã  packages/core/src/specs/v2/types.ts:870    ","version":"1.0.17","tagName":"h3"},{"title":"createRelationship()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#createrelationship","content":" createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two entities.  Parameters‚Äã  ‚Ä¢ params  Object containing the relationship details  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.metadata?  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to boolean indicating success  Inherited from‚Äã  IDatabaseAdapter.createRelationship  Defined in‚Äã  packages/core/src/specs/v2/types.ts:989    ","version":"1.0.17","tagName":"h3"},{"title":"updateRelationship()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#updaterelationship","content":" updateRelationship(relationship): Promise&lt;void&gt;  Updates an existing relationship between two entities.  Parameters‚Äã  ‚Ä¢ relationship: Relationship  The relationship object with updated data  Returns‚Äã  Promise&lt;void&gt;  Promise resolving to void  Inherited from‚Äã  IDatabaseAdapter.updateRelationship  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1001    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationship()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#getrelationship","content":" getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two entities if it exists.  Parameters‚Äã  ‚Ä¢ params  Object containing the entity IDs and agent ID  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Relationship&gt;  Promise resolving to the Relationship object or null if not found  Inherited from‚Äã  IDatabaseAdapter.getRelationship  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1008    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationships()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#getrelationships","content":" getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific entity.  Parameters‚Äã  ‚Ä¢ params  Object containing the user ID, agent ID and optional tags to filter by  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  Returns‚Äã  Promise&lt;Relationship[]&gt;  Promise resolving to an array of Relationship objects  Inherited from‚Äã  IDatabaseAdapter.getRelationships  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1018    ","version":"1.0.17","tagName":"h3"},{"title":"useModel()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#usemodel","content":" useModel&lt;T, R&gt;(modelType, params): Promise&lt;R&gt;  Use a model with strongly typed parameters and return values based on model type  Type Parameters‚Äã  ‚Ä¢ T extends string  The model type to use  ‚Ä¢ R = ModelResultMap[T]  The expected return type, defaults to the type defined in ModelResultMap[T]  Parameters‚Äã  ‚Ä¢ modelType: T  The type of model to use  ‚Ä¢ params: any  The parameters for the model, typed based on model type  Returns‚Äã  Promise&lt;R&gt;  The model result, typed based on the provided generic type parameter  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1236    ","version":"1.0.17","tagName":"h3"},{"title":"registerSendHandler()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#registersendhandler","content":" registerSendHandler(source, handler): void  Registers a handler function responsible for sending messages to a specific source/platform.  Parameters‚Äã  ‚Ä¢ source: string  The unique identifier string for the source (e.g., 'discord', 'telegram').  ‚Ä¢ handler: SendHandlerFunction  The SendHandlerFunction to be called for this source.  Returns‚Äã  void  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1289    ","version":"1.0.17","tagName":"h3"},{"title":"sendMessageToTarget()‚Äã","type":1,"pageTitle":"Interface: IAgentRuntime","url":"/api/namespaces/v2/interfaces/IAgentRuntime#sendmessagetotarget","content":" sendMessageToTarget(target, content): Promise&lt;void&gt;  Sends a message to a specified target using the appropriate registered handler.  Parameters‚Äã  ‚Ä¢ target: TargetInfo  Information describing the target recipient and platform.  ‚Ä¢ content: Content  The message content to send.  Returns‚Äã  Promise&lt;void&gt;  Promise resolving when the message sending process is initiated or completed.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1297 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: InvokePayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/InvokePayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: InvokePayload","url":"/api/namespaces/v2/interfaces/InvokePayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: IDatabaseAdapter","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#extended-by","content":" IAgentRuntime  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"db‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#db","content":" db: any  Database instance  Defined in‚Äã  packages/core/src/specs/v2/types.ts:814  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"init()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#init","content":" init(): Promise&lt;void&gt;  Initialize database connection  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:817    ","version":"1.0.17","tagName":"h3"},{"title":"close()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#close","content":" close(): Promise&lt;void&gt;  Close database connection  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:820    ","version":"1.0.17","tagName":"h3"},{"title":"getAgents()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#getagents","content":" getAgents(): Promise&lt;Partial&lt;Agent&gt;[]&gt;  Get all agents  Returns‚Äã  Promise&lt;Partial&lt;Agent&gt;[]&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:827    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesByIds()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#getentitiesbyids","content":" getEntitiesByIds(entityIds): Promise&lt;Entity[]&gt;  Get entity by IDs  Parameters‚Äã  ‚Ä¢ entityIds: `${string}-${string}-${string}-${string}-${string}`[]  Returns‚Äã  Promise&lt;Entity[]&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:838    ","version":"1.0.17","tagName":"h3"},{"title":"getEntitiesForRoom()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#getentitiesforroom","content":" getEntitiesForRoom(roomId, includeComponents?): Promise&lt;Entity[]&gt;  Get entities for room  Parameters‚Äã  ‚Ä¢ roomId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ includeComponents?: boolean  Returns‚Äã  Promise&lt;Entity[]&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:841    ","version":"1.0.17","tagName":"h3"},{"title":"createEntities()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#createentities","content":" createEntities(entities): Promise&lt;boolean&gt;  Create new entities  Parameters‚Äã  ‚Ä¢ entities: Entity[]  Returns‚Äã  Promise&lt;boolean&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:844    ","version":"1.0.17","tagName":"h3"},{"title":"updateEntity()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#updateentity","content":" updateEntity(entity): Promise&lt;void&gt;  Update entity  Parameters‚Äã  ‚Ä¢ entity: Entity  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:847    ","version":"1.0.17","tagName":"h3"},{"title":"getComponent()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#getcomponent","content":" getComponent(entityId, type, worldId?, sourceEntityId?): Promise&lt;Component&gt;  Get component by ID  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ type: string  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:850    ","version":"1.0.17","tagName":"h3"},{"title":"getComponents()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#getcomponents","content":" getComponents(entityId, worldId?, sourceEntityId?): Promise&lt;Component[]&gt;  Get all components for an entity  Parameters‚Äã  ‚Ä¢ entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ worldId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ sourceEntityId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Component[]&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:858    ","version":"1.0.17","tagName":"h3"},{"title":"createComponent()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#createcomponent","content":" createComponent(component): Promise&lt;boolean&gt;  Create component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;boolean&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:861    ","version":"1.0.17","tagName":"h3"},{"title":"updateComponent()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#updatecomponent","content":" updateComponent(component): Promise&lt;void&gt;  Update component  Parameters‚Äã  ‚Ä¢ component: Component  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:864    ","version":"1.0.17","tagName":"h3"},{"title":"deleteComponent()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#deletecomponent","content":" deleteComponent(componentId): Promise&lt;void&gt;  Delete component  Parameters‚Äã  ‚Ä¢ componentId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:867    ","version":"1.0.17","tagName":"h3"},{"title":"getMemories()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#getmemories","content":" getMemories(params): Promise&lt;Memory[]&gt;  Get memories matching criteria  Parameters‚Äã  ‚Ä¢ params  ‚Ä¢ params.entityId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.agentId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.count?: number  ‚Ä¢ params.unique?: boolean  ‚Ä¢ params.tableName: string  ‚Ä¢ params.start?: number  ‚Ä¢ params.end?: number  ‚Ä¢ params.roomId?: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.worldId?: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Memory[]&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:870    ","version":"1.0.17","tagName":"h3"},{"title":"createRelationship()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#createrelationship","content":" createRelationship(params): Promise&lt;boolean&gt;  Creates a new relationship between two entities.  Parameters‚Äã  ‚Ä¢ params  Object containing the relationship details  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  ‚Ä¢ params.metadata?  Returns‚Äã  Promise&lt;boolean&gt;  Promise resolving to boolean indicating success  Defined in‚Äã  packages/core/src/specs/v2/types.ts:989    ","version":"1.0.17","tagName":"h3"},{"title":"updateRelationship()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#updaterelationship","content":" updateRelationship(relationship): Promise&lt;void&gt;  Updates an existing relationship between two entities.  Parameters‚Äã  ‚Ä¢ relationship: Relationship  The relationship object with updated data  Returns‚Äã  Promise&lt;void&gt;  Promise resolving to void  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1001    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationship()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#getrelationship","content":" getRelationship(params): Promise&lt;Relationship&gt;  Retrieves a relationship between two entities if it exists.  Parameters‚Äã  ‚Ä¢ params  Object containing the entity IDs and agent ID  ‚Ä¢ params.sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.targetEntityId: `${string}-${string}-${string}-${string}-${string}`  Returns‚Äã  Promise&lt;Relationship&gt;  Promise resolving to the Relationship object or null if not found  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1008    ","version":"1.0.17","tagName":"h3"},{"title":"getRelationships()‚Äã","type":1,"pageTitle":"Interface: IDatabaseAdapter","url":"/api/namespaces/v2/interfaces/IDatabaseAdapter#getrelationships","content":" getRelationships(params): Promise&lt;Relationship[]&gt;  Retrieves all relationships for a specific entity.  Parameters‚Äã  ‚Ä¢ params  Object containing the user ID, agent ID and optional tags to filter by  ‚Ä¢ params.entityId: `${string}-${string}-${string}-${string}-${string}`  ‚Ä¢ params.tags?: string[]  Returns‚Äã  Promise&lt;Relationship[]&gt;  Promise resolving to an array of Relationship objects  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1018 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Log","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Log","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/namespaces/v2/interfaces/Log#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/namespaces/v2/interfaces/Log#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Defined in‚Äã  packages/core/src/specs/v2/types.ts:332    ","version":"1.0.17","tagName":"h3"},{"title":"entityId‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/namespaces/v2/interfaces/Log#entityid","content":" entityId: `${string}-${string}-${string}-${string}-${string}`  Associated entity ID  Defined in‚Äã  packages/core/src/specs/v2/types.ts:335    ","version":"1.0.17","tagName":"h3"},{"title":"roomId?‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/namespaces/v2/interfaces/Log#roomid","content":" optional roomId: `${string}-${string}-${string}-${string}-${string}`  Associated room ID  Defined in‚Äã  packages/core/src/specs/v2/types.ts:338    ","version":"1.0.17","tagName":"h3"},{"title":"body‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/namespaces/v2/interfaces/Log#body","content":" body: object  Log body  Index Signature‚Äã  [key: string]: unknown  Defined in‚Äã  packages/core/src/specs/v2/types.ts:341    ","version":"1.0.17","tagName":"h3"},{"title":"type‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/namespaces/v2/interfaces/Log#type","content":" type: string  Log type  Defined in‚Äã  packages/core/src/specs/v2/types.ts:344    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt‚Äã","type":1,"pageTitle":"Interface: Log","url":"/api/namespaces/v2/interfaces/Log#createdat","content":" createdAt: Date  Log creation timestamp  Defined in‚Äã  packages/core/src/specs/v2/types.ts:347 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: MessageExample","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/MessageExample","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: MessageExample","url":"/api/namespaces/v2/interfaces/MessageExample#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: MessageExample","url":"/api/namespaces/v2/interfaces/MessageExample#name","content":" name: string  Associated user  Defined in‚Äã  packages/core/src/specs/v2/types.ts:355    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: MessageExample","url":"/api/namespaces/v2/interfaces/MessageExample#content","content":" content: Content  Message content  Defined in‚Äã  packages/core/src/specs/v2/types.ts:358 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: MemoryRetrievalOptions","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/MemoryRetrievalOptions","content":"@elizaos/core v1.3.0 / v2 / MemoryRetrievalOptions Interface: MemoryRetrievalOptions Options for memory retrieval operations","keywords":"","version":"1.0.17"},{"title":"Interface: MemorySearchOptions","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/MemorySearchOptions","content":"@elizaos/core v1.3.0 / v2 / MemorySearchOptions Interface: MemorySearchOptions Options for memory search operations","keywords":"","version":"1.0.17"},{"title":"Interface: Memory","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Memory","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#extended-by","content":" MessageMemory  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Defined in‚Äã  packages/core/src/specs/v2/types.ts:294    ","version":"1.0.17","tagName":"h3"},{"title":"entityId‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#entityid","content":" entityId: `${string}-${string}-${string}-${string}-${string}`  Associated user ID  Defined in‚Äã  packages/core/src/specs/v2/types.ts:297    ","version":"1.0.17","tagName":"h3"},{"title":"agentId?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#agentid","content":" optional agentId: `${string}-${string}-${string}-${string}-${string}`  Associated agent ID  Defined in‚Äã  packages/core/src/specs/v2/types.ts:300    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#createdat","content":" optional createdAt: number  Optional creation timestamp in milliseconds since epoch  Defined in‚Äã  packages/core/src/specs/v2/types.ts:303    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#content","content":" content: Content  Memory content  Defined in‚Äã  packages/core/src/specs/v2/types.ts:306    ","version":"1.0.17","tagName":"h3"},{"title":"embedding?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#embedding","content":" optional embedding: number[]  Optional embedding vector for semantic search  Defined in‚Äã  packages/core/src/specs/v2/types.ts:309    ","version":"1.0.17","tagName":"h3"},{"title":"roomId‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Associated room ID  Defined in‚Äã  packages/core/src/specs/v2/types.ts:312    ","version":"1.0.17","tagName":"h3"},{"title":"worldId?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#worldid","content":" optional worldId: `${string}-${string}-${string}-${string}-${string}`  Associated world ID (optional)  Defined in‚Äã  packages/core/src/specs/v2/types.ts:315    ","version":"1.0.17","tagName":"h3"},{"title":"unique?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#unique","content":" optional unique: boolean  Whether memory is unique (used to prevent duplicates)  Defined in‚Äã  packages/core/src/specs/v2/types.ts:318    ","version":"1.0.17","tagName":"h3"},{"title":"similarity?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#similarity","content":" optional similarity: number  Embedding similarity score (set when retrieved via search)  Defined in‚Äã  packages/core/src/specs/v2/types.ts:321    ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Interface: Memory","url":"/api/namespaces/v2/interfaces/Memory#metadata","content":" optional metadata: MemoryMetadata  Metadata for the memory  Defined in‚Äã  packages/core/src/specs/v2/types.ts:324 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: MessagePayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/MessagePayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: MessagePayload","url":"/api/namespaces/v2/interfaces/MessagePayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ModelEventPayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ModelEventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ModelEventPayload","url":"/api/namespaces/v2/interfaces/ModelEventPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: MessageMemory","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/MessageMemory","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#extends","content":" Memory  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional unique identifier  Inherited from‚Äã  Memory.id  Defined in‚Äã  packages/core/src/specs/v2/types.ts:294    ","version":"1.0.17","tagName":"h3"},{"title":"entityId‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#entityid","content":" entityId: `${string}-${string}-${string}-${string}-${string}`  Associated user ID  Inherited from‚Äã  Memory.entityId  Defined in‚Äã  packages/core/src/specs/v2/types.ts:297    ","version":"1.0.17","tagName":"h3"},{"title":"agentId?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#agentid","content":" optional agentId: `${string}-${string}-${string}-${string}-${string}`  Associated agent ID  Inherited from‚Äã  Memory.agentId  Defined in‚Äã  packages/core/src/specs/v2/types.ts:300    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#createdat","content":" optional createdAt: number  Optional creation timestamp in milliseconds since epoch  Inherited from‚Äã  Memory.createdAt  Defined in‚Äã  packages/core/src/specs/v2/types.ts:303    ","version":"1.0.17","tagName":"h3"},{"title":"embedding?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#embedding","content":" optional embedding: number[]  Optional embedding vector for semantic search  Inherited from‚Äã  Memory.embedding  Defined in‚Äã  packages/core/src/specs/v2/types.ts:309    ","version":"1.0.17","tagName":"h3"},{"title":"roomId‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#roomid","content":" roomId: `${string}-${string}-${string}-${string}-${string}`  Associated room ID  Inherited from‚Äã  Memory.roomId  Defined in‚Äã  packages/core/src/specs/v2/types.ts:312    ","version":"1.0.17","tagName":"h3"},{"title":"worldId?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#worldid","content":" optional worldId: `${string}-${string}-${string}-${string}-${string}`  Associated world ID (optional)  Inherited from‚Äã  Memory.worldId  Defined in‚Äã  packages/core/src/specs/v2/types.ts:315    ","version":"1.0.17","tagName":"h3"},{"title":"unique?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#unique","content":" optional unique: boolean  Whether memory is unique (used to prevent duplicates)  Inherited from‚Äã  Memory.unique  Defined in‚Äã  packages/core/src/specs/v2/types.ts:318    ","version":"1.0.17","tagName":"h3"},{"title":"similarity?‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#similarity","content":" optional similarity: number  Embedding similarity score (set when retrieved via search)  Inherited from‚Äã  Memory.similarity  Defined in‚Äã  packages/core/src/specs/v2/types.ts:321    ","version":"1.0.17","tagName":"h3"},{"title":"metadata‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#metadata","content":" metadata: MessageMetadata  Metadata for the memory  Overrides‚Äã  Memory.metadata  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2088    ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Interface: MessageMemory","url":"/api/namespaces/v2/interfaces/MessageMemory#content","content":" content: Content &amp; object  Memory content  Type declaration‚Äã  text‚Äã  text: string  Overrides‚Äã  Memory.content  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2089 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ModelHandler","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ModelHandler","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ModelHandler","url":"/api/namespaces/v2/interfaces/ModelHandler#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"handler()‚Äã","type":1,"pageTitle":"Interface: ModelHandler","url":"/api/namespaces/v2/interfaces/ModelHandler#handler","content":" handler: (runtime, params) =&gt; Promise&lt;unknown&gt;  The function that executes the model, taking runtime and parameters, and returning a Promise.  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ params: Record&lt;string, unknown&gt;  Returns‚Äã  Promise&lt;unknown&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2355    ","version":"1.0.17","tagName":"h3"},{"title":"provider‚Äã","type":1,"pageTitle":"Interface: ModelHandler","url":"/api/namespaces/v2/interfaces/ModelHandler#provider","content":" provider: string  The name of the provider (e.g., plugin name) that registered this model handler.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2357    ","version":"1.0.17","tagName":"h3"},{"title":"priority?‚Äã","type":1,"pageTitle":"Interface: ModelHandler","url":"/api/namespaces/v2/interfaces/ModelHandler#priority","content":" optional priority: number  Optional priority for this model handler. Higher numbers indicate higher priority. This is used by AgentRuntime.getModel to select the most appropriate handler when multiple are available for a given model type. Defaults to 0 if not specified.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2363 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ModelParamsMap","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ModelParamsMap","content":"@elizaos/core v1.3.0 / v2 / ModelParamsMap Interface: ModelParamsMap Map of model types to their parameter types","keywords":"","version":"1.0.17"},{"title":"Interface: ModelResultMap","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ModelResultMap","content":"@elizaos/core v1.3.0 / v2 / ModelResultMap Interface: ModelResultMap Map of model types to their return value types","keywords":"","version":"1.0.17"},{"title":"Interface: MultiRoomMemoryOptions","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/MultiRoomMemoryOptions","content":"@elizaos/core v1.3.0 / v2 / MultiRoomMemoryOptions Interface: MultiRoomMemoryOptions Options for multi-room memory retrieval","keywords":"","version":"1.0.17"},{"title":"Interface: Participant","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Participant","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Participant","url":"/api/namespaces/v2/interfaces/Participant#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: Participant","url":"/api/namespaces/v2/interfaces/Participant#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier  Defined in‚Äã  packages/core/src/specs/v2/types.ts:587    ","version":"1.0.17","tagName":"h3"},{"title":"entity‚Äã","type":1,"pageTitle":"Interface: Participant","url":"/api/namespaces/v2/interfaces/Participant#entity","content":" entity: Entity  Associated account  Defined in‚Äã  packages/core/src/specs/v2/types.ts:590 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: ObjectGenerationParams<T>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#type-parameters","content":" ‚Ä¢ T = any  The expected return type, inferred from schema if provided  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678    ","version":"1.0.17","tagName":"h3"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#prompt","content":" prompt: string  The prompt describing the object to generate  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1788    ","version":"1.0.17","tagName":"h3"},{"title":"schema?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#schema","content":" optional schema: JSONSchema  Optional JSON schema for validation  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1790    ","version":"1.0.17","tagName":"h3"},{"title":"output?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#output","content":" optional output: &quot;object&quot; | &quot;array&quot; | &quot;enum&quot;  Type of object to generate  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1792    ","version":"1.0.17","tagName":"h3"},{"title":"enumValues?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#enumvalues","content":" optional enumValues: string[]  For enum type, the allowed values  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1794    ","version":"1.0.17","tagName":"h3"},{"title":"modelType?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#modeltype","content":" optional modelType: string  Model type to use  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1796    ","version":"1.0.17","tagName":"h3"},{"title":"temperature?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#temperature","content":" optional temperature: number  Model temperature (0.0 to 1.0)  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1798    ","version":"1.0.17","tagName":"h3"},{"title":"stopSequences?‚Äã","type":1,"pageTitle":"Interface: ObjectGenerationParams<T>","url":"/api/namespaces/v2/interfaces/ObjectGenerationParams#stopsequences","content":" optional stopSequences: string[]  Sequences that should stop generation  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1800 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Provider","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Provider","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/namespaces/v2/interfaces/Provider#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/namespaces/v2/interfaces/Provider#name","content":" name: string  Provider name  Defined in‚Äã  packages/core/src/specs/v2/types.ts:465    ","version":"1.0.17","tagName":"h3"},{"title":"description?‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/namespaces/v2/interfaces/Provider#description","content":" optional description: string  Description of the provider  Defined in‚Äã  packages/core/src/specs/v2/types.ts:468    ","version":"1.0.17","tagName":"h3"},{"title":"dynamic?‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/namespaces/v2/interfaces/Provider#dynamic","content":" optional dynamic: boolean  Whether the provider is dynamic  Defined in‚Äã  packages/core/src/specs/v2/types.ts:471    ","version":"1.0.17","tagName":"h3"},{"title":"position?‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/namespaces/v2/interfaces/Provider#position","content":" optional position: number  Position of the provider in the provider list, positive or negative  Defined in‚Äã  packages/core/src/specs/v2/types.ts:474    ","version":"1.0.17","tagName":"h3"},{"title":"private?‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/namespaces/v2/interfaces/Provider#private","content":" optional private: boolean  Whether the provider is private  Private providers are not displayed in the regular provider list, they have to be called explicitly  Defined in‚Äã  packages/core/src/specs/v2/types.ts:481    ","version":"1.0.17","tagName":"h3"},{"title":"get()‚Äã","type":1,"pageTitle":"Interface: Provider","url":"/api/namespaces/v2/interfaces/Provider#get","content":" get: (runtime, message, state) =&gt; Promise&lt;ProviderResult&gt;  Data retrieval function  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state: State  Returns‚Äã  Promise&lt;ProviderResult&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:484 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: Relationship","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Relationship","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v2/interfaces/Relationship#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v2/interfaces/Relationship#id","content":" id: `${string}-${string}-${string}-${string}-${string}`  Unique identifier  Defined in‚Äã  packages/core/src/specs/v2/types.ts:492    ","version":"1.0.17","tagName":"h3"},{"title":"sourceEntityId‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v2/interfaces/Relationship#sourceentityid","content":" sourceEntityId: `${string}-${string}-${string}-${string}-${string}`  First user ID  Defined in‚Äã  packages/core/src/specs/v2/types.ts:495    ","version":"1.0.17","tagName":"h3"},{"title":"targetEntityId‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v2/interfaces/Relationship#targetentityid","content":" targetEntityId: `${string}-${string}-${string}-${string}-${string}`  Second user ID  Defined in‚Äã  packages/core/src/specs/v2/types.ts:498    ","version":"1.0.17","tagName":"h3"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v2/interfaces/Relationship#agentid","content":" agentId: `${string}-${string}-${string}-${string}-${string}`  Agent ID  Defined in‚Äã  packages/core/src/specs/v2/types.ts:501    ","version":"1.0.17","tagName":"h3"},{"title":"tags‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v2/interfaces/Relationship#tags","content":" tags: string[]  Tags for filtering/categorizing relationships  Defined in‚Äã  packages/core/src/specs/v2/types.ts:504    ","version":"1.0.17","tagName":"h3"},{"title":"metadata‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v2/interfaces/Relationship#metadata","content":" metadata: object  Additional metadata about the relationship  Index Signature‚Äã  [key: string]: any  Defined in‚Äã  packages/core/src/specs/v2/types.ts:507    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt?‚Äã","type":1,"pageTitle":"Interface: Relationship","url":"/api/namespaces/v2/interfaces/Relationship#createdat","content":" optional createdAt: string  Optional creation timestamp  Defined in‚Äã  packages/core/src/specs/v2/types.ts:512 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: RemoteAttestationMessage","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/RemoteAttestationMessage","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationMessage","url":"/api/namespaces/v2/interfaces/RemoteAttestationMessage#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationMessage","url":"/api/namespaces/v2/interfaces/RemoteAttestationMessage#agentid","content":" agentId: string  The unique identifier of the agent sending the attested message.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1526    ","version":"1.0.17","tagName":"h3"},{"title":"timestamp‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationMessage","url":"/api/namespaces/v2/interfaces/RemoteAttestationMessage#timestamp","content":" timestamp: number  Timestamp (e.g., Unix epoch in milliseconds) when the message was attested or sent.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1528    ","version":"1.0.17","tagName":"h3"},{"title":"message‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationMessage","url":"/api/namespaces/v2/interfaces/RemoteAttestationMessage#message","content":" message: object  The actual message content, including details about the entity, room, and the content itself.  entityId‚Äã  entityId: string  roomId‚Äã  roomId: string  content‚Äã  content: string  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1530 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: RemoteAttestationQuote","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/RemoteAttestationQuote","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationQuote","url":"/api/namespaces/v2/interfaces/RemoteAttestationQuote#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"quote‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationQuote","url":"/api/namespaces/v2/interfaces/RemoteAttestationQuote#quote","content":" quote: string  The attestation quote data, typically a base64 encoded string or similar format.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1500    ","version":"1.0.17","tagName":"h3"},{"title":"timestamp‚Äã","type":1,"pageTitle":"Interface: RemoteAttestationQuote","url":"/api/namespaces/v2/interfaces/RemoteAttestationQuote#timestamp","content":" timestamp: number  Timestamp (e.g., Unix epoch in milliseconds) when the quote was generated or received.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1502 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: RunEventPayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/RunEventPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: RunEventPayload","url":"/api/namespaces/v2/interfaces/RunEventPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"Interface: RuntimeSettings","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/RuntimeSettings","content":"@elizaos/core v1.3.0 / v2 / RuntimeSettings Interface: RuntimeSettings Interface representing settings with string key-value pairs.","keywords":"","version":"1.0.17"},{"title":"Interface: ServerOwnershipState","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ServerOwnershipState","content":"@elizaos/core v1.3.0 / v2 / ServerOwnershipState Interface: ServerOwnershipState Interface representing the ownership state of servers.","keywords":"","version":"1.0.17"},{"title":"Interface: ServiceClassMap","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ServiceClassMap","content":"@elizaos/core v1.3.0 / v2 / ServiceClassMap Interface: ServiceClassMap Map of service type names to their implementation classes","keywords":"","version":"1.0.17"},{"title":"Interface: ServiceDefinition<T>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ServiceDefinition","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Interface: ServiceDefinition<T>","url":"/api/namespaces/v2/interfaces/ServiceDefinition#type-parameters","content":" ‚Ä¢ T extends Service = Service ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ServiceTypeRegistry","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ServiceTypeRegistry","content":"","keywords":"","version":"1.0.17"},{"title":"Example‚Äã","type":1,"pageTitle":"Interface: ServiceTypeRegistry","url":"/api/namespaces/v2/interfaces/ServiceTypeRegistry#example","content":" declare module '@elizaos/core' { interface ServiceTypeRegistry { MY_CUSTOM_SERVICE: 'my_custom_service'; } }  ","version":"1.0.17","tagName":"h2"},{"title":"Interface: StateObject","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/StateObject","content":"@elizaos/core v1.3.0 / v2 / StateObject Interface: StateObject Represents a generic object structure within the agent's state, where keys are strings and values can be any StateValue. This allows for nested objects within the state. It's a fundamental part of the EnhancedState interface.","keywords":"","version":"1.0.17"},{"title":"Interface: State","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/State","content":"","keywords":"","version":"1.0.17"},{"title":"Indexable‚Äã","type":1,"pageTitle":"Interface: State","url":"/api/namespaces/v2/interfaces/State#indexable","content":" [key: string]: any ","version":"1.0.17","tagName":"h2"},{"title":"Interface: ServiceError","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/ServiceError","content":"@elizaos/core v1.3.0 / v2 / ServiceError Interface: ServiceError Standardized service error type for consistent error handling","keywords":"","version":"1.0.17"},{"title":"Interface: TargetInfo","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TargetInfo","content":"@elizaos/core v1.3.0 / v2 / TargetInfo Interface: TargetInfo Information describing the target of a message.","keywords":"","version":"1.0.17"},{"title":"Interface: Task","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/Task","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/namespaces/v2/interfaces/Task#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/namespaces/v2/interfaces/Task#id","content":" optional id: `${string}-${string}-${string}-${string}-${string}`  Optional. A Universally Unique Identifier for the task. Generated if not provided.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1619    ","version":"1.0.17","tagName":"h3"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/namespaces/v2/interfaces/Task#name","content":" name: string  The name of the task, which should correspond to a registered TaskWorker.name.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1621    ","version":"1.0.17","tagName":"h3"},{"title":"updatedAt?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/namespaces/v2/interfaces/Task#updatedat","content":" optional updatedAt: number  Optional. Timestamp of the last update to this task.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1623    ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/namespaces/v2/interfaces/Task#metadata","content":" optional metadata: TaskMetadata  Optional. Metadata associated with the task, conforming to TaskMetadata.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1625    ","version":"1.0.17","tagName":"h3"},{"title":"description‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/namespaces/v2/interfaces/Task#description","content":" description: string  A human-readable description of what the task does or its purpose.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1627    ","version":"1.0.17","tagName":"h3"},{"title":"roomId?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/namespaces/v2/interfaces/Task#roomid","content":" optional roomId: `${string}-${string}-${string}-${string}-${string}`  Optional. The UUID of the room this task is associated with.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1629    ","version":"1.0.17","tagName":"h3"},{"title":"worldId?‚Äã","type":1,"pageTitle":"Interface: Task","url":"/api/namespaces/v2/interfaces/Task#worldid","content":" optional worldId: `${string}-${string}-${string}-${string}-${string}`  Optional. The UUID of the world this task is associated with.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1631 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TaskWorker","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TaskWorker","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TaskWorker","url":"/api/namespaces/v2/interfaces/TaskWorker#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: TaskWorker","url":"/api/namespaces/v2/interfaces/TaskWorker#name","content":" name: string  The unique name of the task type this worker handles. This name links Task instances to this worker.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1575    ","version":"1.0.17","tagName":"h3"},{"title":"execute()‚Äã","type":1,"pageTitle":"Interface: TaskWorker","url":"/api/namespaces/v2/interfaces/TaskWorker#execute","content":" execute: (runtime, options, task) =&gt; Promise&lt;void&gt;  The core execution logic for the task. This function is called by the runtime when a task needs to be processed. It receives the AgentRuntime, task-specific options, and the Task object itself.  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ options  ‚Ä¢ task: Task  Returns‚Äã  Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1580    ","version":"1.0.17","tagName":"h3"},{"title":"validate()?‚Äã","type":1,"pageTitle":"Interface: TaskWorker","url":"/api/namespaces/v2/interfaces/TaskWorker#validate","content":" optional validate: (runtime, message, state) =&gt; Promise&lt;boolean&gt;  Optional validation function that can be used to determine if a task is valid or should be executed, often based on the current message and state. This might be used by an action or evaluator before creating or queueing a task.  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state: State  Returns‚Äã  Promise&lt;boolean&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1590 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TeeAgent","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TeeAgent","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/namespaces/v2/interfaces/TeeAgent#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/namespaces/v2/interfaces/TeeAgent#id","content":" id: string  Primary key for the TEE agent registration record (e.g., a UUID or auto-incrementing ID).  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1461    ","version":"1.0.17","tagName":"h3"},{"title":"agentId‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/namespaces/v2/interfaces/TeeAgent#agentid","content":" agentId: string  The core identifier of the agent, which can be duplicated across multiple TEE registrations.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1466    ","version":"1.0.17","tagName":"h3"},{"title":"agentName‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/namespaces/v2/interfaces/TeeAgent#agentname","content":" agentName: string  The human-readable name of the agent.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1468    ","version":"1.0.17","tagName":"h3"},{"title":"createdAt‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/namespaces/v2/interfaces/TeeAgent#createdat","content":" createdAt: number  Timestamp (e.g., Unix epoch in milliseconds) when this TEE registration was created.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1470    ","version":"1.0.17","tagName":"h3"},{"title":"publicKey‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/namespaces/v2/interfaces/TeeAgent#publickey","content":" publicKey: string  The public key associated with this specific TEE agent instance/session.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1472    ","version":"1.0.17","tagName":"h3"},{"title":"attestation‚Äã","type":1,"pageTitle":"Interface: TeeAgent","url":"/api/namespaces/v2/interfaces/TeeAgent#attestation","content":" attestation: string  The attestation document proving the authenticity and integrity of the TEE instance.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1474 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TeePluginConfig","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TeePluginConfig","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TeePluginConfig","url":"/api/namespaces/v2/interfaces/TeePluginConfig#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"vendor?‚Äã","type":1,"pageTitle":"Interface: TeePluginConfig","url":"/api/namespaces/v2/interfaces/TeePluginConfig#vendor","content":" optional vendor: string  Optional. The name or identifier of the TEE vendor (e.g., 'tdx_dstack' from TeeType).  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1563    ","version":"1.0.17","tagName":"h3"},{"title":"vendorConfig?‚Äã","type":1,"pageTitle":"Interface: TeePluginConfig","url":"/api/namespaces/v2/interfaces/TeePluginConfig#vendorconfig","content":" optional vendorConfig: TeeVendorConfig  Optional. Vendor-specific configuration options, conforming to TeeVendorConfig.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1565 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TeeVendorConfig","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TeeVendorConfig","content":"@elizaos/core v1.3.0 / v2 / TeeVendorConfig Interface: TeeVendorConfig Configuration options specific to a particular Trusted Execution Environment (TEE) vendor. This allows for vendor-specific settings to be passed to the TEE plugin or service. The structure is a generic key-value map, as configurations can vary widely between vendors.","keywords":"","version":"1.0.17"},{"title":"Interface: TestSuite","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TestSuite","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TestSuite","url":"/api/namespaces/v2/interfaces/TestSuite#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: TestSuite","url":"/api/namespaces/v2/interfaces/TestSuite#name","content":" name: string  A descriptive name for the test suite, e.g., &quot;Core Functionality Tests&quot;.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1447    ","version":"1.0.17","tagName":"h3"},{"title":"tests‚Äã","type":1,"pageTitle":"Interface: TestSuite","url":"/api/namespaces/v2/interfaces/TestSuite#tests","content":" tests: TestCase[]  An array of TestCase objects that belong to this suite.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1449 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TestCase","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TestCase","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TestCase","url":"/api/namespaces/v2/interfaces/TestCase#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"name‚Äã","type":1,"pageTitle":"Interface: TestCase","url":"/api/namespaces/v2/interfaces/TestCase#name","content":" name: string  A descriptive name for the test case, e.g., &quot;should respond to greetings&quot;.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1431    ","version":"1.0.17","tagName":"h3"},{"title":"fn()‚Äã","type":1,"pageTitle":"Interface: TestCase","url":"/api/namespaces/v2/interfaces/TestCase#fn","content":" fn: (runtime) =&gt; void | Promise&lt;void&gt;  The function that executes the test logic. It can be synchronous or asynchronous. It receives the IAgentRuntime to interact with the agent and its services. The function should typically contain assertions to verify expected outcomes.  Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  Returns‚Äã  void | Promise&lt;void&gt;  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1437 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TextEmbeddingParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TextEmbeddingParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TextEmbeddingParams","url":"/api/namespaces/v2/interfaces/TextEmbeddingParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TextEmbeddingParams","url":"/api/namespaces/v2/interfaces/TextEmbeddingParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TextEmbeddingParams","url":"/api/namespaces/v2/interfaces/TextEmbeddingParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678    ","version":"1.0.17","tagName":"h3"},{"title":"text‚Äã","type":1,"pageTitle":"Interface: TextEmbeddingParams","url":"/api/namespaces/v2/interfaces/TextEmbeddingParams#text","content":" text: string  The text to create embeddings for  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1704 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TextToSpeechParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TextToSpeechParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/namespaces/v2/interfaces/TextToSpeechParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/namespaces/v2/interfaces/TextToSpeechParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/namespaces/v2/interfaces/TextToSpeechParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678    ","version":"1.0.17","tagName":"h3"},{"title":"text‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/namespaces/v2/interfaces/TextToSpeechParams#text","content":" text: string  The text to convert to speech  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1744    ","version":"1.0.17","tagName":"h3"},{"title":"voice?‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/namespaces/v2/interfaces/TextToSpeechParams#voice","content":" optional voice: string  The voice to use  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1746    ","version":"1.0.17","tagName":"h3"},{"title":"speed?‚Äã","type":1,"pageTitle":"Interface: TextToSpeechParams","url":"/api/namespaces/v2/interfaces/TextToSpeechParams#speed","content":" optional speed: number  The speaking speed  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1748 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TextGenerationParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TextGenerationParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/namespaces/v2/interfaces/TextGenerationParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/namespaces/v2/interfaces/TextGenerationParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/namespaces/v2/interfaces/TextGenerationParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678    ","version":"1.0.17","tagName":"h3"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/namespaces/v2/interfaces/TextGenerationParams#prompt","content":" prompt: string  The prompt to generate text from  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1686    ","version":"1.0.17","tagName":"h3"},{"title":"temperature?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/namespaces/v2/interfaces/TextGenerationParams#temperature","content":" optional temperature: number  Model temperature (0.0 to 1.0, lower is more deterministic)  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1688    ","version":"1.0.17","tagName":"h3"},{"title":"maxTokens?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/namespaces/v2/interfaces/TextGenerationParams#maxtokens","content":" optional maxTokens: number  Maximum number of tokens to generate  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1690    ","version":"1.0.17","tagName":"h3"},{"title":"stopSequences?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/namespaces/v2/interfaces/TextGenerationParams#stopsequences","content":" optional stopSequences: string[]  Sequences that should stop generation when encountered  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1692    ","version":"1.0.17","tagName":"h3"},{"title":"frequencyPenalty?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/namespaces/v2/interfaces/TextGenerationParams#frequencypenalty","content":" optional frequencyPenalty: number  Frequency penalty to apply  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1694    ","version":"1.0.17","tagName":"h3"},{"title":"presencePenalty?‚Äã","type":1,"pageTitle":"Interface: TextGenerationParams","url":"/api/namespaces/v2/interfaces/TextGenerationParams#presencepenalty","content":" optional presencePenalty: number  Presence penalty to apply  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1696 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TokenizeTextParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TokenizeTextParams","content":"","keywords":"","version":"1.0.17"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TokenizeTextParams","url":"/api/namespaces/v2/interfaces/TokenizeTextParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"prompt‚Äã","type":1,"pageTitle":"Interface: TokenizeTextParams","url":"/api/namespaces/v2/interfaces/TokenizeTextParams#prompt","content":" prompt: string  The input string to be tokenized.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1406    ","version":"1.0.17","tagName":"h3"},{"title":"modelType‚Äã","type":1,"pageTitle":"Interface: TokenizeTextParams","url":"/api/namespaces/v2/interfaces/TokenizeTextParams#modeltype","content":" modelType: string  The model type to use for tokenization, which determines the tokenizer algorithm and vocabulary.  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1408 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: TranscriptionParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TranscriptionParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/namespaces/v2/interfaces/TranscriptionParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/namespaces/v2/interfaces/TranscriptionParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/namespaces/v2/interfaces/TranscriptionParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678    ","version":"1.0.17","tagName":"h3"},{"title":"audioUrl‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/namespaces/v2/interfaces/TranscriptionParams#audiourl","content":" audioUrl: string  The URL or path of the audio file to transcribe  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1734    ","version":"1.0.17","tagName":"h3"},{"title":"prompt?‚Äã","type":1,"pageTitle":"Interface: TranscriptionParams","url":"/api/namespaces/v2/interfaces/TranscriptionParams#prompt","content":" optional prompt: string  Optional prompt to guide transcription  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1736 ","version":"1.0.17","tagName":"h3"},{"title":"Interface: UnifiedMemoryOptions","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/UnifiedMemoryOptions","content":"","keywords":"","version":"1.0.17"},{"title":"Extended by‚Äã","type":1,"pageTitle":"Interface: UnifiedMemoryOptions","url":"/api/namespaces/v2/interfaces/UnifiedMemoryOptions#extended-by","content":" UnifiedSearchOptions ","version":"1.0.17","tagName":"h2"},{"title":"Interface: UnifiedSearchOptions","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/UnifiedSearchOptions","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: UnifiedSearchOptions","url":"/api/namespaces/v2/interfaces/UnifiedSearchOptions#extends","content":" UnifiedMemoryOptions ","version":"1.0.17","tagName":"h2"},{"title":"Interface: TypedService<ConfigType, ResultType>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/TypedService","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/namespaces/v2/interfaces/TypedService#extends","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/namespaces/v2/interfaces/TypedService#type-parameters","content":" ‚Ä¢ ConfigType extends object = object  The configuration type for this service  ‚Ä¢ ResultType = unknown  The result type returned by the service operations  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/namespaces/v2/interfaces/TypedService#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"config?‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/namespaces/v2/interfaces/TypedService#config","content":" optional config: ConfigType  The configuration for this service instance  Overrides‚Äã  Service.config  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2128    ","version":"1.0.17","tagName":"h3"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/namespaces/v2/interfaces/TypedService#runtime","content":" protected runtime: IAgentRuntime  Runtime instance  Inherited from‚Äã  Service.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2416    ","version":"1.0.17","tagName":"h3"},{"title":"capabilityDescription‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/namespaces/v2/interfaces/TypedService#capabilitydescription","content":" abstract capabilityDescription: string  Service name  Inherited from‚Äã  Service.capabilityDescription  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2430  ","version":"1.0.17","tagName":"h3"},{"title":"Methods‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/namespaces/v2/interfaces/TypedService#methods","content":" ","version":"1.0.17","tagName":"h2"},{"title":"process()‚Äã","type":1,"pageTitle":"Interface: TypedService<ConfigType, ResultType>","url":"/api/namespaces/v2/interfaces/TypedService#process","content":" process(input): Promise&lt;ResultType&gt;  Process an input with this service  Parameters‚Äã  ‚Ä¢ input: unknown  The input to process  Returns‚Äã  Promise&lt;ResultType&gt;  A promise resolving to the result  Defined in‚Äã  packages/core/src/specs/v2/types.ts:2135 ","version":"1.0.17","tagName":"h3"},{"title":"Type Alias: ComponentData","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/ComponentData","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ComponentData","url":"/api/namespaces/v2/type-aliases/ComponentData#defined-in","content":" packages/core/src/specs/v2/types.ts:2308 ","version":"1.0.17","tagName":"h2"},{"title":"Interface: VideoProcessingParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/VideoProcessingParams","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/namespaces/v2/interfaces/VideoProcessingParams#extends","content":" BaseModelParams  ","version":"1.0.17","tagName":"h2"},{"title":"Properties‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/namespaces/v2/interfaces/VideoProcessingParams#properties","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/namespaces/v2/interfaces/VideoProcessingParams#runtime","content":" runtime: IAgentRuntime  The agent runtime for accessing services and utilities  Inherited from‚Äã  BaseModelParams.runtime  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1678    ","version":"1.0.17","tagName":"h3"},{"title":"videoUrl‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/namespaces/v2/interfaces/VideoProcessingParams#videourl","content":" videoUrl: string  The URL or path of the video file to process  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1766    ","version":"1.0.17","tagName":"h3"},{"title":"Interface: WorldPayload","type":0,"sectionRef":"#","url":"/api/namespaces/v2/interfaces/WorldPayload","content":"","keywords":"","version":"1.0.17"},{"title":"Extends‚Äã","type":1,"pageTitle":"Interface: WorldPayload","url":"/api/namespaces/v2/interfaces/WorldPayload#extends","content":" EventPayload ","version":"1.0.17","tagName":"h2"},{"title":"processingType‚Äã","type":1,"pageTitle":"Interface: VideoProcessingParams","url":"/api/namespaces/v2/interfaces/VideoProcessingParams#processingtype","content":" processingType: string  The type of video processing to perform  Defined in‚Äã  packages/core/src/specs/v2/types.ts:1768 ","version":"1.0.17","tagName":"h3"},{"title":"Type Alias: DbConnection","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/DbConnection","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: DbConnection","url":"/api/namespaces/v2/type-aliases/DbConnection#defined-in","content":" packages/core/src/specs/v2/types.ts:2334 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: EventDataObject","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/EventDataObject","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: EventDataObject","url":"/api/namespaces/v2/type-aliases/EventDataObject#defined-in","content":" packages/core/src/specs/v2/types.ts:2317 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: EventHandler()<T>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/EventHandler","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: EventHandler()<T>","url":"/api/namespaces/v2/type-aliases/EventHandler#type-parameters","content":" ‚Ä¢ T extends keyof EventPayloadMap  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: EventHandler()<T>","url":"/api/namespaces/v2/type-aliases/EventHandler#parameters","content":" ‚Ä¢ payload: EventPayloadMap[T]  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: EventHandler()<T>","url":"/api/namespaces/v2/type-aliases/EventHandler#returns","content":" Promise&lt;void&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: EventHandler()<T>","url":"/api/namespaces/v2/type-aliases/EventHandler#defined-in","content":" packages/core/src/specs/v2/types.ts:2067 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: GenerateTextParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/GenerateTextParams","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#runtime","content":" runtime: IAgentRuntime  The AgentRuntime instance, providing access to models and other services.  ","version":"1.0.17","tagName":"h3"},{"title":"prompt‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#prompt","content":" prompt: string  The input string or prompt that the language model will use to generate text.  ","version":"1.0.17","tagName":"h3"},{"title":"modelType‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#modeltype","content":" modelType: ModelTypeName  Specifies the type of text generation model to use (e.g., TEXT_LARGE, REASONING_SMALL).  ","version":"1.0.17","tagName":"h3"},{"title":"maxTokens?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#maxtokens","content":" optional maxTokens: number  Optional. The maximum number of tokens to generate in the response.  ","version":"1.0.17","tagName":"h3"},{"title":"temperature?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#temperature","content":" optional temperature: number  Optional. Controls randomness (0.0-1.0). Lower values are more deterministic, higher are more creative.  ","version":"1.0.17","tagName":"h3"},{"title":"frequencyPenalty?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#frequencypenalty","content":" optional frequencyPenalty: number  Optional. Penalizes new tokens based on their existing frequency in the text so far.  ","version":"1.0.17","tagName":"h3"},{"title":"presencePenalty?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#presencepenalty","content":" optional presencePenalty: number  Optional. Penalizes new tokens based on whether they appear in the text so far.  ","version":"1.0.17","tagName":"h3"},{"title":"stopSequences?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#stopsequences","content":" optional stopSequences: string[]  Optional. A list of sequences at which the model will stop generating further tokens.  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/namespaces/v2/type-aliases/GenerateTextParams#defined-in","content":" packages/core/src/specs/v2/types.ts:1380 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Handler()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/Handler","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: Handler()","url":"/api/namespaces/v2/type-aliases/Handler#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state?: State  ‚Ä¢ options?  ‚Ä¢ callback?: HandlerCallback  ‚Ä¢ responses?: Memory[]  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: Handler()","url":"/api/namespaces/v2/type-aliases/Handler#returns","content":" Promise&lt;unknown&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Handler()","url":"/api/namespaces/v2/type-aliases/Handler#defined-in","content":" packages/core/src/specs/v2/types.ts:364 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: HandlerCallback()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/HandlerCallback","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/api/namespaces/v2/type-aliases/HandlerCallback#parameters","content":" ‚Ä¢ response: Content  ‚Ä¢ files?: any  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/api/namespaces/v2/type-aliases/HandlerCallback#returns","content":" Promise&lt;Memory[]&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/api/namespaces/v2/type-aliases/HandlerCallback#defined-in","content":" packages/core/src/specs/v2/types.ts:376 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: IsValidServiceType<T>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/IsValidServiceType","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: IsValidServiceType<T>","url":"/api/namespaces/v2/type-aliases/IsValidServiceType#type-parameters","content":" ‚Ä¢ T extends string  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: IsValidServiceType<T>","url":"/api/namespaces/v2/type-aliases/IsValidServiceType#defined-in","content":" packages/core/src/specs/v2/types.ts:138 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: JSONSchema","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/JSONSchema","content":"","keywords":"","version":"1.0.17"},{"title":"Index Signature‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/namespaces/v2/type-aliases/JSONSchema#index-signature","content":" [key: string]: any  ","version":"1.0.17","tagName":"h2"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/namespaces/v2/type-aliases/JSONSchema#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"type‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/namespaces/v2/type-aliases/JSONSchema#type","content":" type: string  ","version":"1.0.17","tagName":"h3"},{"title":"properties?‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/namespaces/v2/type-aliases/JSONSchema#properties","content":" optional properties: Record&lt;string, any&gt;  ","version":"1.0.17","tagName":"h3"},{"title":"required?‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/namespaces/v2/type-aliases/JSONSchema#required","content":" optional required: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"items?‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/namespaces/v2/type-aliases/JSONSchema#items","content":" optional items: JSONSchema  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/namespaces/v2/type-aliases/JSONSchema#defined-in","content":" packages/core/src/specs/v2/types.ts:1774 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: KnowledgeItem","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/KnowledgeItem","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/namespaces/v2/type-aliases/KnowledgeItem#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/namespaces/v2/type-aliases/KnowledgeItem#id","content":" id: UUID  A Universally Unique Identifier for this specific knowledge item.  ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/namespaces/v2/type-aliases/KnowledgeItem#content","content":" content: Content  The actual content of the knowledge item, which must include text and can have other fields.  ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/namespaces/v2/type-aliases/KnowledgeItem#metadata","content":" optional metadata: MemoryMetadata  Optional metadata associated with this knowledge item, conforming to MemoryMetadata.  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/namespaces/v2/type-aliases/KnowledgeItem#defined-in","content":" packages/core/src/specs/v2/types.ts:1317 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: MemoryScope","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/MemoryScope","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: MemoryScope","url":"/api/namespaces/v2/type-aliases/MemoryScope#defined-in","content":" packages/core/src/specs/v2/types.ts:238 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: MemoryTypeAlias","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/MemoryTypeAlias","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: MemoryTypeAlias","url":"/api/namespaces/v2/type-aliases/MemoryTypeAlias#defined-in","content":" packages/core/src/specs/v2/types.ts:213 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Media","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/Media","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v2/type-aliases/Media#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v2/type-aliases/Media#id","content":" id: string  Unique identifier  ","version":"1.0.17","tagName":"h3"},{"title":"url‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v2/type-aliases/Media#url","content":" url: string  Media URL  ","version":"1.0.17","tagName":"h3"},{"title":"title?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v2/type-aliases/Media#title","content":" optional title: string  Media title  ","version":"1.0.17","tagName":"h3"},{"title":"source?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v2/type-aliases/Media#source","content":" optional source: string  Media source  ","version":"1.0.17","tagName":"h3"},{"title":"description?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v2/type-aliases/Media#description","content":" optional description: string  Media description  ","version":"1.0.17","tagName":"h3"},{"title":"text?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v2/type-aliases/Media#text","content":" optional text: string  Text content  ","version":"1.0.17","tagName":"h3"},{"title":"contentType?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v2/type-aliases/Media#contenttype","content":" optional contentType: ContentType  Content type  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/namespaces/v2/type-aliases/Media#defined-in","content":" packages/core/src/specs/v2/types.ts:596 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: MessageReceivedHandlerParams","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/MessageReceivedHandlerParams","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: MessageReceivedHandlerParams","url":"/api/namespaces/v2/type-aliases/MessageReceivedHandlerParams#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Type Alias: MessageReceivedHandlerParams","url":"/api/namespaces/v2/type-aliases/MessageReceivedHandlerParams#runtime","content":" runtime: IAgentRuntime  ","version":"1.0.17","tagName":"h3"},{"title":"message‚Äã","type":1,"pageTitle":"Type Alias: MessageReceivedHandlerParams","url":"/api/namespaces/v2/type-aliases/MessageReceivedHandlerParams#message","content":" message: Memory  ","version":"1.0.17","tagName":"h3"},{"title":"callback‚Äã","type":1,"pageTitle":"Type Alias: MessageReceivedHandlerParams","url":"/api/namespaces/v2/type-aliases/MessageReceivedHandlerParams#callback","content":" callback: HandlerCallback  ","version":"1.0.17","tagName":"h3"},{"title":"onComplete()?‚Äã","type":1,"pageTitle":"Type Alias: MessageReceivedHandlerParams","url":"/api/namespaces/v2/type-aliases/MessageReceivedHandlerParams#oncomplete","content":" optional onComplete: () =&gt; void  Returns‚Äã  void  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: MessageReceivedHandlerParams","url":"/api/namespaces/v2/type-aliases/MessageReceivedHandlerParams#defined-in","content":" packages/core/src/specs/v2/types.ts:2030 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: MetadataObject","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/MetadataObject","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: MetadataObject","url":"/api/namespaces/v2/type-aliases/MetadataObject#defined-in","content":" packages/core/src/specs/v2/types.ts:2342 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: PluginEvents","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/PluginEvents","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: PluginEvents","url":"/api/namespaces/v2/type-aliases/PluginEvents#defined-in","content":" packages/core/src/specs/v2/types.ts:654 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ServiceConfig","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/ServiceConfig","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ServiceConfig","url":"/api/namespaces/v2/type-aliases/ServiceConfig#defined-in","content":" packages/core/src/specs/v2/types.ts:2375 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: SendHandlerFunction()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/SendHandlerFunction","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: SendHandlerFunction()","url":"/api/namespaces/v2/type-aliases/SendHandlerFunction#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ target: TargetInfo  ‚Ä¢ content: Content  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: SendHandlerFunction()","url":"/api/namespaces/v2/type-aliases/SendHandlerFunction#returns","content":" Promise&lt;void&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: SendHandlerFunction()","url":"/api/namespaces/v2/type-aliases/SendHandlerFunction#defined-in","content":" packages/core/src/specs/v2/types.ts:1120 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ServiceInstance<T>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/ServiceInstance","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: ServiceInstance<T>","url":"/api/namespaces/v2/type-aliases/ServiceInstance#type-parameters","content":" ‚Ä¢ T extends ServiceTypeName  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ServiceInstance<T>","url":"/api/namespaces/v2/type-aliases/ServiceInstance#defined-in","content":" packages/core/src/specs/v2/types.ts:159 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ServiceRegistry<T>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/ServiceRegistry","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: ServiceRegistry<T>","url":"/api/namespaces/v2/type-aliases/ServiceRegistry#type-parameters","content":" ‚Ä¢ T extends ServiceTypeName = ServiceTypeName  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ServiceRegistry<T>","url":"/api/namespaces/v2/type-aliases/ServiceRegistry#defined-in","content":" packages/core/src/specs/v2/types.ts:166 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ServiceTypeName","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/ServiceTypeName","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ServiceTypeName","url":"/api/namespaces/v2/type-aliases/ServiceTypeName#defined-in","content":" packages/core/src/specs/v2/types.ts:128 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ServiceTypeValue<K>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/ServiceTypeValue","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: ServiceTypeValue<K>","url":"/api/namespaces/v2/type-aliases/ServiceTypeValue#type-parameters","content":" ‚Ä¢ K extends keyof ServiceTypeRegistry  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ServiceTypeValue<K>","url":"/api/namespaces/v2/type-aliases/ServiceTypeValue#defined-in","content":" packages/core/src/specs/v2/types.ts:133 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: StateArray","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/StateArray","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: StateArray","url":"/api/namespaces/v2/type-aliases/StateArray#defined-in","content":" packages/core/src/specs/v2/types.ts:2281 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: StateValue","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/StateValue","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: StateValue","url":"/api/namespaces/v2/type-aliases/StateValue#defined-in","content":" packages/core/src/specs/v2/types.ts:2267 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: TypedEventHandler()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/TypedEventHandler","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: TypedEventHandler()","url":"/api/namespaces/v2/type-aliases/TypedEventHandler#parameters","content":" ‚Ä¢ data: EventDataObject  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: TypedEventHandler()","url":"/api/namespaces/v2/type-aliases/TypedEventHandler#returns","content":" Promise&lt;void&gt; | void  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: TypedEventHandler()","url":"/api/namespaces/v2/type-aliases/TypedEventHandler#defined-in","content":" packages/core/src/specs/v2/types.ts:2325 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: TypedServiceClass()<T>","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/TypedServiceClass","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/namespaces/v2/type-aliases/TypedServiceClass#type-parameters","content":" ‚Ä¢ T extends ServiceTypeName  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/namespaces/v2/type-aliases/TypedServiceClass#parameters","content":" ‚Ä¢ runtime?: IAgentRuntime  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/namespaces/v2/type-aliases/TypedServiceClass#returns","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/namespaces/v2/type-aliases/TypedServiceClass#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/namespaces/v2/type-aliases/TypedServiceClass#servicetype","content":" serviceType: T  ","version":"1.0.17","tagName":"h3"},{"title":"start()‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/namespaces/v2/type-aliases/TypedServiceClass#start","content":" Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/namespaces/v2/type-aliases/TypedServiceClass#defined-in","content":" packages/core/src/specs/v2/types.ts:143 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: TaskMetadata","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/TaskMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Index Signature‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/namespaces/v2/type-aliases/TaskMetadata#index-signature","content":" [key: string]: unknown  ","version":"1.0.17","tagName":"h2"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/namespaces/v2/type-aliases/TaskMetadata#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"updateInterval?‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/namespaces/v2/type-aliases/TaskMetadata#updateinterval","content":" optional updateInterval: number  Optional. If the task is recurring, this specifies the interval in milliseconds between updates or executions.  ","version":"1.0.17","tagName":"h3"},{"title":"options?‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/namespaces/v2/type-aliases/TaskMetadata#options","content":" optional options: object[]  Optional. Describes options or parameters that can be configured for this task, often for UI presentation.  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/namespaces/v2/type-aliases/TaskMetadata#defined-in","content":" packages/core/src/specs/v2/types.ts:1599 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: UUID","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/UUID","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: UUID","url":"/api/namespaces/v2/type-aliases/UUID#defined-in","content":" packages/core/src/specs/v2/types.ts:6 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Validator()","type":0,"sectionRef":"#","url":"/api/namespaces/v2/type-aliases/Validator","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: Validator()","url":"/api/namespaces/v2/type-aliases/Validator#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state?: State  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: Validator()","url":"/api/namespaces/v2/type-aliases/Validator#returns","content":" Promise&lt;boolean&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Validator()","url":"/api/namespaces/v2/type-aliases/Validator#defined-in","content":" packages/core/src/specs/v2/types.ts:381 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: DbConnection","type":0,"sectionRef":"#","url":"/api/type-aliases/DbConnection","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: DbConnection","url":"/api/type-aliases/DbConnection#defined-in","content":" packages/core/src/types/database.ts:338 ","version":"1.0.17","tagName":"h2"},{"title":"Variable: ModelType","type":0,"sectionRef":"#","url":"/api/namespaces/v2/variables/ModelType","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"SMALL‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#small","content":" readonly SMALL: &quot;TEXT_SMALL&quot; = 'TEXT_SMALL'  ","version":"1.0.17","tagName":"h3"},{"title":"MEDIUM‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#medium","content":" readonly MEDIUM: &quot;TEXT_LARGE&quot; = 'TEXT_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"LARGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#large","content":" readonly LARGE: &quot;TEXT_LARGE&quot; = 'TEXT_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_SMALL‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#text_small","content":" readonly TEXT_SMALL: &quot;TEXT_SMALL&quot; = 'TEXT_SMALL'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_LARGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#text_large","content":" readonly TEXT_LARGE: &quot;TEXT_LARGE&quot; = 'TEXT_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_EMBEDDING‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#text_embedding","content":" readonly TEXT_EMBEDDING: &quot;TEXT_EMBEDDING&quot; = 'TEXT_EMBEDDING'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_TOKENIZER_ENCODE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#text_tokenizer_encode","content":" readonly TEXT_TOKENIZER_ENCODE: &quot;TEXT_TOKENIZER_ENCODE&quot; = 'TEXT_TOKENIZER_ENCODE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_TOKENIZER_DECODE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#text_tokenizer_decode","content":" readonly TEXT_TOKENIZER_DECODE: &quot;TEXT_TOKENIZER_DECODE&quot; = 'TEXT_TOKENIZER_DECODE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_REASONING_SMALL‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#text_reasoning_small","content":" readonly TEXT_REASONING_SMALL: &quot;REASONING_SMALL&quot; = 'REASONING_SMALL'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_REASONING_LARGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#text_reasoning_large","content":" readonly TEXT_REASONING_LARGE: &quot;REASONING_LARGE&quot; = 'REASONING_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_COMPLETION‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#text_completion","content":" readonly TEXT_COMPLETION: &quot;TEXT_COMPLETION&quot; = 'TEXT_COMPLETION'  ","version":"1.0.17","tagName":"h3"},{"title":"IMAGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#image","content":" readonly IMAGE: &quot;IMAGE&quot; = 'IMAGE'  ","version":"1.0.17","tagName":"h3"},{"title":"IMAGE_DESCRIPTION‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#image_description","content":" readonly IMAGE_DESCRIPTION: &quot;IMAGE_DESCRIPTION&quot; = 'IMAGE_DESCRIPTION'  ","version":"1.0.17","tagName":"h3"},{"title":"TRANSCRIPTION‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#transcription","content":" readonly TRANSCRIPTION: &quot;TRANSCRIPTION&quot; = 'TRANSCRIPTION'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_TO_SPEECH‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#text_to_speech","content":" readonly TEXT_TO_SPEECH: &quot;TEXT_TO_SPEECH&quot; = 'TEXT_TO_SPEECH'  ","version":"1.0.17","tagName":"h3"},{"title":"AUDIO‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#audio","content":" readonly AUDIO: &quot;AUDIO&quot; = 'AUDIO'  ","version":"1.0.17","tagName":"h3"},{"title":"VIDEO‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#video","content":" readonly VIDEO: &quot;VIDEO&quot; = 'VIDEO'  ","version":"1.0.17","tagName":"h3"},{"title":"OBJECT_SMALL‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#object_small","content":" readonly OBJECT_SMALL: &quot;OBJECT_SMALL&quot; = 'OBJECT_SMALL'  ","version":"1.0.17","tagName":"h3"},{"title":"OBJECT_LARGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#object_large","content":" readonly OBJECT_LARGE: &quot;OBJECT_LARGE&quot; = 'OBJECT_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/namespaces/v2/variables/ModelType#defined-in","content":" packages/core/src/specs/v2/types.ts:78 ","version":"1.0.17","tagName":"h2"},{"title":"Variable: ServiceType","type":0,"sectionRef":"#","url":"/api/namespaces/v2/variables/ServiceType","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"TRANSCRIPTION‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#transcription","content":" readonly TRANSCRIPTION: &quot;transcription&quot; = 'transcription'  ","version":"1.0.17","tagName":"h3"},{"title":"VIDEO‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#video","content":" readonly VIDEO: &quot;video&quot; = 'video'  ","version":"1.0.17","tagName":"h3"},{"title":"BROWSER‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#browser","content":" readonly BROWSER: &quot;browser&quot; = 'browser'  ","version":"1.0.17","tagName":"h3"},{"title":"PDF‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#pdf","content":" readonly PDF: &quot;pdf&quot; = 'pdf'  ","version":"1.0.17","tagName":"h3"},{"title":"REMOTE_FILES‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#remote_files","content":" readonly REMOTE_FILES: &quot;aws_s3&quot; = 'aws_s3'  ","version":"1.0.17","tagName":"h3"},{"title":"WEB_SEARCH‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#web_search","content":" readonly WEB_SEARCH: &quot;web_search&quot; = 'web_search'  ","version":"1.0.17","tagName":"h3"},{"title":"EMAIL‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#email","content":" readonly EMAIL: &quot;email&quot; = 'email'  ","version":"1.0.17","tagName":"h3"},{"title":"TEE‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#tee","content":" readonly TEE: &quot;tee&quot; = 'tee'  ","version":"1.0.17","tagName":"h3"},{"title":"TASK‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#task","content":" readonly TASK: &quot;task&quot; = 'task'  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/namespaces/v2/variables/ServiceType#defined-in","content":" packages/core/src/specs/v2/types.ts:176 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: EventHandler()<T>","type":0,"sectionRef":"#","url":"/api/type-aliases/EventHandler","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: EventHandler()<T>","url":"/api/type-aliases/EventHandler#type-parameters","content":" ‚Ä¢ T extends keyof EventPayloadMap  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: EventHandler()<T>","url":"/api/type-aliases/EventHandler#parameters","content":" ‚Ä¢ payload: EventPayloadMap[T]  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: EventHandler()<T>","url":"/api/type-aliases/EventHandler#returns","content":" Promise&lt;void&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: EventHandler()<T>","url":"/api/type-aliases/EventHandler#defined-in","content":" packages/core/src/types/events.ts:219 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: GenerateTextParams","type":0,"sectionRef":"#","url":"/api/type-aliases/GenerateTextParams","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"runtime‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#runtime","content":" runtime: IAgentRuntime  The AgentRuntime instance, providing access to models and other services.  ","version":"1.0.17","tagName":"h3"},{"title":"prompt‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#prompt","content":" prompt: string  The input string or prompt that the language model will use to generate text.  ","version":"1.0.17","tagName":"h3"},{"title":"modelType‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#modeltype","content":" modelType: ModelTypeName  Specifies the type of text generation model to use (e.g., TEXT_LARGE, REASONING_SMALL).  ","version":"1.0.17","tagName":"h3"},{"title":"maxTokens?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#maxtokens","content":" optional maxTokens: number  Optional. The maximum number of tokens to generate in the response.  ","version":"1.0.17","tagName":"h3"},{"title":"temperature?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#temperature","content":" optional temperature: number  Optional. Controls randomness (0.0-1.0). Lower values are more deterministic, higher are more creative.  ","version":"1.0.17","tagName":"h3"},{"title":"frequencyPenalty?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#frequencypenalty","content":" optional frequencyPenalty: number  Optional. Penalizes new tokens based on their existing frequency in the text so far.  ","version":"1.0.17","tagName":"h3"},{"title":"presencePenalty?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#presencepenalty","content":" optional presencePenalty: number  Optional. Penalizes new tokens based on whether they appear in the text so far.  ","version":"1.0.17","tagName":"h3"},{"title":"stopSequences?‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#stopsequences","content":" optional stopSequences: string[]  Optional. A list of sequences at which the model will stop generating further tokens.  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: GenerateTextParams","url":"/api/type-aliases/GenerateTextParams#defined-in","content":" packages/core/src/types/model.ts:44 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Handler()","type":0,"sectionRef":"#","url":"/api/type-aliases/Handler","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: Handler()","url":"/api/type-aliases/Handler#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state?: State  ‚Ä¢ options?  ‚Ä¢ callback?: HandlerCallback  ‚Ä¢ responses?: Memory[]  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: Handler()","url":"/api/type-aliases/Handler#returns","content":" Promise&lt;ActionResult | void | undefined&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Handler()","url":"/api/type-aliases/Handler#defined-in","content":" packages/core/src/types/components.ts:25 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: HandlerCallback()","type":0,"sectionRef":"#","url":"/api/type-aliases/HandlerCallback","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/api/type-aliases/HandlerCallback#parameters","content":" ‚Ä¢ response: Content  ‚Ä¢ files?: any  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/api/type-aliases/HandlerCallback#returns","content":" Promise&lt;Memory[]&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: HandlerCallback()","url":"/api/type-aliases/HandlerCallback#defined-in","content":" packages/core/src/types/components.ts:20 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: IsValidServiceType<T>","type":0,"sectionRef":"#","url":"/api/type-aliases/IsValidServiceType","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: IsValidServiceType<T>","url":"/api/type-aliases/IsValidServiceType#type-parameters","content":" ‚Ä¢ T extends string  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: IsValidServiceType<T>","url":"/api/type-aliases/IsValidServiceType#defined-in","content":" packages/core/src/types/service.ts:48 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Media","type":0,"sectionRef":"#","url":"/api/type-aliases/Media","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/type-aliases/Media#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/type-aliases/Media#id","content":" id: string  Unique identifier  ","version":"1.0.17","tagName":"h3"},{"title":"url‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/type-aliases/Media#url","content":" url: string  Media URL  ","version":"1.0.17","tagName":"h3"},{"title":"title?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/type-aliases/Media#title","content":" optional title: string  Media title  ","version":"1.0.17","tagName":"h3"},{"title":"source?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/type-aliases/Media#source","content":" optional source: string  Media source  ","version":"1.0.17","tagName":"h3"},{"title":"description?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/type-aliases/Media#description","content":" optional description: string  Media description  ","version":"1.0.17","tagName":"h3"},{"title":"text?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/type-aliases/Media#text","content":" optional text: string  Text content  ","version":"1.0.17","tagName":"h3"},{"title":"contentType?‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/type-aliases/Media#contenttype","content":" optional contentType: ContentType  Content type  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Media","url":"/api/type-aliases/Media#defined-in","content":" packages/core/src/types/primitives.ts:62 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: KnowledgeItem","type":0,"sectionRef":"#","url":"/api/type-aliases/KnowledgeItem","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/type-aliases/KnowledgeItem#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/type-aliases/KnowledgeItem#id","content":" id: UUID  A Universally Unique Identifier for this specific knowledge item.  ","version":"1.0.17","tagName":"h3"},{"title":"content‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/type-aliases/KnowledgeItem#content","content":" content: Content  The actual content of the knowledge item, which must include text and can have other fields.  ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/type-aliases/KnowledgeItem#metadata","content":" optional metadata: MemoryMetadata  Optional metadata associated with this knowledge item, conforming to MemoryMetadata.  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: KnowledgeItem","url":"/api/type-aliases/KnowledgeItem#defined-in","content":" packages/core/src/types/knowledge.ts:11 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: JSONSchema","type":0,"sectionRef":"#","url":"/api/type-aliases/JSONSchema","content":"","keywords":"","version":"1.0.17"},{"title":"Index Signature‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/type-aliases/JSONSchema#index-signature","content":" [key: string]: any  ","version":"1.0.17","tagName":"h2"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/type-aliases/JSONSchema#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"type‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/type-aliases/JSONSchema#type","content":" type: string  ","version":"1.0.17","tagName":"h3"},{"title":"properties?‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/type-aliases/JSONSchema#properties","content":" optional properties: Record&lt;string, any&gt;  ","version":"1.0.17","tagName":"h3"},{"title":"required?‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/type-aliases/JSONSchema#required","content":" optional required: string[]  ","version":"1.0.17","tagName":"h3"},{"title":"items?‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/type-aliases/JSONSchema#items","content":" optional items: JSONSchema  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: JSONSchema","url":"/api/type-aliases/JSONSchema#defined-in","content":" packages/core/src/types/model.ts:186 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: LpPositionDetails","type":0,"sectionRef":"#","url":"/api/type-aliases/LpPositionDetails","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"poolId‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#poolid","content":" poolId: string  ","version":"1.0.17","tagName":"h3"},{"title":"dex‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#dex","content":" dex: string  ","version":"1.0.17","tagName":"h3"},{"title":"lpTokenBalance‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#lptokenbalance","content":" lpTokenBalance: TokenBalance  ","version":"1.0.17","tagName":"h3"},{"title":"underlyingTokens‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#underlyingtokens","content":" underlyingTokens: TokenBalance[]  ","version":"1.0.17","tagName":"h3"},{"title":"valueUsd?‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#valueusd","content":" optional valueUsd: number  ","version":"1.0.17","tagName":"h3"},{"title":"accruedFees?‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#accruedfees","content":" optional accruedFees: TokenBalance[]  ","version":"1.0.17","tagName":"h3"},{"title":"rewards?‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#rewards","content":" optional rewards: TokenBalance[]  ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#metadata","content":" optional metadata: Metadata  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: LpPositionDetails","url":"/api/type-aliases/LpPositionDetails#defined-in","content":" packages/core/src/types/lp.ts:35 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: MemoryScope","type":0,"sectionRef":"#","url":"/api/type-aliases/MemoryScope","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: MemoryScope","url":"/api/type-aliases/MemoryScope#defined-in","content":" packages/core/src/types/memory.ts:31 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: MemoryTypeAlias","type":0,"sectionRef":"#","url":"/api/type-aliases/MemoryTypeAlias","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: MemoryTypeAlias","url":"/api/type-aliases/MemoryTypeAlias#defined-in","content":" packages/core/src/types/memory.ts:6 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Metadata","type":0,"sectionRef":"#","url":"/api/type-aliases/Metadata","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Metadata","url":"/api/type-aliases/Metadata#defined-in","content":" packages/core/src/types/primitives.ts:97 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: PluginEvents","type":0,"sectionRef":"#","url":"/api/type-aliases/PluginEvents","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: PluginEvents","url":"/api/type-aliases/PluginEvents#defined-in","content":" packages/core/src/types/plugin.ts:23 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: PoolInfo","type":0,"sectionRef":"#","url":"/api/type-aliases/PoolInfo","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"id‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#id","content":" id: string  ","version":"1.0.17","tagName":"h3"},{"title":"displayName?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#displayname","content":" optional displayName: string  ","version":"1.0.17","tagName":"h3"},{"title":"dex‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#dex","content":" dex: string  ","version":"1.0.17","tagName":"h3"},{"title":"tokenA‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokena","content":" tokenA: object  ","version":"1.0.17","tagName":"h3"},{"title":"tokenA.mint‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokenamint","content":" mint: string  ","version":"1.0.17","tagName":"h3"},{"title":"tokenA.symbol?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokenasymbol","content":" optional symbol: string  ","version":"1.0.17","tagName":"h3"},{"title":"tokenA.reserve?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokenareserve","content":" optional reserve: string  ","version":"1.0.17","tagName":"h3"},{"title":"tokenA.decimals?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokenadecimals","content":" optional decimals: number  ","version":"1.0.17","tagName":"h3"},{"title":"tokenB‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokenb","content":" tokenB: object  ","version":"1.0.17","tagName":"h3"},{"title":"tokenB.mint‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokenbmint","content":" mint: string  ","version":"1.0.17","tagName":"h3"},{"title":"tokenB.symbol?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokenbsymbol","content":" optional symbol: string  ","version":"1.0.17","tagName":"h3"},{"title":"tokenB.reserve?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokenbreserve","content":" optional reserve: string  ","version":"1.0.17","tagName":"h3"},{"title":"tokenB.decimals?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tokenbdecimals","content":" optional decimals: number  ","version":"1.0.17","tagName":"h3"},{"title":"lpTokenMint?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#lptokenmint","content":" optional lpTokenMint: string  ","version":"1.0.17","tagName":"h3"},{"title":"apr?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#apr","content":" optional apr: number  ","version":"1.0.17","tagName":"h3"},{"title":"apy?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#apy","content":" optional apy: number  ","version":"1.0.17","tagName":"h3"},{"title":"tvl?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#tvl","content":" optional tvl: number  ","version":"1.0.17","tagName":"h3"},{"title":"fee?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#fee","content":" optional fee: number  ","version":"1.0.17","tagName":"h3"},{"title":"metadata?‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#metadata","content":" optional metadata: Metadata  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: PoolInfo","url":"/api/type-aliases/PoolInfo#defined-in","content":" packages/core/src/types/lp.ts:8 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: SendHandlerFunction()","type":0,"sectionRef":"#","url":"/api/type-aliases/SendHandlerFunction","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: SendHandlerFunction()","url":"/api/type-aliases/SendHandlerFunction#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ target: TargetInfo  ‚Ä¢ content: Content  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: SendHandlerFunction()","url":"/api/type-aliases/SendHandlerFunction#returns","content":" Promise&lt;void&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: SendHandlerFunction()","url":"/api/type-aliases/SendHandlerFunction#defined-in","content":" packages/core/src/types/messaging.ts:20 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ServiceInstance<T>","type":0,"sectionRef":"#","url":"/api/type-aliases/ServiceInstance","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: ServiceInstance<T>","url":"/api/type-aliases/ServiceInstance#type-parameters","content":" ‚Ä¢ T extends ServiceTypeName  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ServiceInstance<T>","url":"/api/type-aliases/ServiceInstance#defined-in","content":" packages/core/src/types/service.ts:69 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ServiceRegistry<T>","type":0,"sectionRef":"#","url":"/api/type-aliases/ServiceRegistry","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: ServiceRegistry<T>","url":"/api/type-aliases/ServiceRegistry#type-parameters","content":" ‚Ä¢ T extends ServiceTypeName = ServiceTypeName  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ServiceRegistry<T>","url":"/api/type-aliases/ServiceRegistry#defined-in","content":" packages/core/src/types/service.ts:76 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ServiceTypeName","type":0,"sectionRef":"#","url":"/api/type-aliases/ServiceTypeName","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ServiceTypeName","url":"/api/type-aliases/ServiceTypeName#defined-in","content":" packages/core/src/types/service.ts:38 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: ServiceTypeValue<K>","type":0,"sectionRef":"#","url":"/api/type-aliases/ServiceTypeValue","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: ServiceTypeValue<K>","url":"/api/type-aliases/ServiceTypeValue#type-parameters","content":" ‚Ä¢ K extends keyof ServiceTypeRegistry  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: ServiceTypeValue<K>","url":"/api/type-aliases/ServiceTypeValue#defined-in","content":" packages/core/src/types/service.ts:43 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: StateArray","type":0,"sectionRef":"#","url":"/api/type-aliases/StateArray","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: StateArray","url":"/api/type-aliases/StateArray#defined-in","content":" packages/core/src/types/state.ts:42 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: StateValue","type":0,"sectionRef":"#","url":"/api/type-aliases/StateValue","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: StateValue","url":"/api/type-aliases/StateValue#defined-in","content":" packages/core/src/types/state.ts:28 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: TransactionResult","type":0,"sectionRef":"#","url":"/api/type-aliases/TransactionResult","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: TransactionResult","url":"/api/type-aliases/TransactionResult#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"success‚Äã","type":1,"pageTitle":"Type Alias: TransactionResult","url":"/api/type-aliases/TransactionResult#success","content":" success: boolean  ","version":"1.0.17","tagName":"h3"},{"title":"transactionId?‚Äã","type":1,"pageTitle":"Type Alias: TransactionResult","url":"/api/type-aliases/TransactionResult#transactionid","content":" optional transactionId: string  ","version":"1.0.17","tagName":"h3"},{"title":"error?‚Äã","type":1,"pageTitle":"Type Alias: TransactionResult","url":"/api/type-aliases/TransactionResult#error","content":" optional error: string  ","version":"1.0.17","tagName":"h3"},{"title":"data?‚Äã","type":1,"pageTitle":"Type Alias: TransactionResult","url":"/api/type-aliases/TransactionResult#data","content":" optional data: any  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: TransactionResult","url":"/api/type-aliases/TransactionResult#defined-in","content":" packages/core/src/types/lp.ts:49 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: TypedEventHandler()","type":0,"sectionRef":"#","url":"/api/type-aliases/TypedEventHandler","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: TypedEventHandler()","url":"/api/type-aliases/TypedEventHandler#parameters","content":" ‚Ä¢ data: Metadata  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: TypedEventHandler()","url":"/api/type-aliases/TypedEventHandler#returns","content":" Promise&lt;void&gt; | void  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: TypedEventHandler()","url":"/api/type-aliases/TypedEventHandler#defined-in","content":" packages/core/src/types/events.ts:229 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: TaskMetadata","type":0,"sectionRef":"#","url":"/api/type-aliases/TaskMetadata","content":"","keywords":"","version":"1.0.17"},{"title":"Index Signature‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/type-aliases/TaskMetadata#index-signature","content":" [key: string]: unknown  ","version":"1.0.17","tagName":"h2"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/type-aliases/TaskMetadata#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"updateInterval?‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/type-aliases/TaskMetadata#updateinterval","content":" optional updateInterval: number  Optional. If the task is recurring, this specifies the interval in milliseconds between updates or executions.  ","version":"1.0.17","tagName":"h3"},{"title":"options?‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/type-aliases/TaskMetadata#options","content":" optional options: object[]  Optional. Describes options or parameters that can be configured for this task, often for UI presentation.  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: TaskMetadata","url":"/api/type-aliases/TaskMetadata#defined-in","content":" packages/core/src/types/task.ts:37 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: TypedServiceClass()<T>","type":0,"sectionRef":"#","url":"/api/type-aliases/TypedServiceClass","content":"","keywords":"","version":"1.0.17"},{"title":"Type Parameters‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/type-aliases/TypedServiceClass#type-parameters","content":" ‚Ä¢ T extends ServiceTypeName  ","version":"1.0.17","tagName":"h2"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/type-aliases/TypedServiceClass#parameters","content":" ‚Ä¢ runtime?: IAgentRuntime  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/type-aliases/TypedServiceClass#returns","content":" Service  ","version":"1.0.17","tagName":"h2"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/type-aliases/TypedServiceClass#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"serviceType‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/type-aliases/TypedServiceClass#servicetype","content":" serviceType: T  ","version":"1.0.17","tagName":"h3"},{"title":"start()‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/type-aliases/TypedServiceClass#start","content":" Parameters‚Äã  ‚Ä¢ runtime: IAgentRuntime  Returns‚Äã  Promise&lt;Service&gt;  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: TypedServiceClass()<T>","url":"/api/type-aliases/TypedServiceClass#defined-in","content":" packages/core/src/types/service.ts:53 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: UUID","type":0,"sectionRef":"#","url":"/api/type-aliases/UUID","content":"","keywords":"","version":"1.0.17"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: UUID","url":"/api/type-aliases/UUID#defined-in","content":" packages/core/src/types/primitives.ts:4 ","version":"1.0.17","tagName":"h2"},{"title":"Type Alias: Validator()","type":0,"sectionRef":"#","url":"/api/type-aliases/Validator","content":"","keywords":"","version":"1.0.17"},{"title":"Parameters‚Äã","type":1,"pageTitle":"Type Alias: Validator()","url":"/api/type-aliases/Validator#parameters","content":" ‚Ä¢ runtime: IAgentRuntime  ‚Ä¢ message: Memory  ‚Ä¢ state?: State  ","version":"1.0.17","tagName":"h2"},{"title":"Returns‚Äã","type":1,"pageTitle":"Type Alias: Validator()","url":"/api/type-aliases/Validator#returns","content":" Promise&lt;boolean&gt;  ","version":"1.0.17","tagName":"h2"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Type Alias: Validator()","url":"/api/type-aliases/Validator#defined-in","content":" packages/core/src/types/components.ts:37 ","version":"1.0.17","tagName":"h2"},{"title":"Variable: ServiceType","type":0,"sectionRef":"#","url":"/api/variables/ServiceType","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"TRANSCRIPTION‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#transcription","content":" readonly TRANSCRIPTION: &quot;transcription&quot; = 'transcription'  ","version":"1.0.17","tagName":"h3"},{"title":"VIDEO‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#video","content":" readonly VIDEO: &quot;video&quot; = 'video'  ","version":"1.0.17","tagName":"h3"},{"title":"BROWSER‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#browser","content":" readonly BROWSER: &quot;browser&quot; = 'browser'  ","version":"1.0.17","tagName":"h3"},{"title":"PDF‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#pdf","content":" readonly PDF: &quot;pdf&quot; = 'pdf'  ","version":"1.0.17","tagName":"h3"},{"title":"REMOTE_FILES‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#remote_files","content":" readonly REMOTE_FILES: &quot;aws_s3&quot; = 'aws_s3'  ","version":"1.0.17","tagName":"h3"},{"title":"WEB_SEARCH‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#web_search","content":" readonly WEB_SEARCH: &quot;web_search&quot; = 'web_search'  ","version":"1.0.17","tagName":"h3"},{"title":"EMAIL‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#email","content":" readonly EMAIL: &quot;email&quot; = 'email'  ","version":"1.0.17","tagName":"h3"},{"title":"TEE‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#tee","content":" readonly TEE: &quot;tee&quot; = 'tee'  ","version":"1.0.17","tagName":"h3"},{"title":"TASK‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#task","content":" readonly TASK: &quot;task&quot; = 'task'  ","version":"1.0.17","tagName":"h3"},{"title":"WALLET‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#wallet","content":" readonly WALLET: &quot;wallet&quot; = 'wallet'  ","version":"1.0.17","tagName":"h3"},{"title":"LP_POOL‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#lp_pool","content":" readonly LP_POOL: &quot;lp_pool&quot; = 'lp_pool'  ","version":"1.0.17","tagName":"h3"},{"title":"TOKEN_DATA‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#token_data","content":" readonly TOKEN_DATA: &quot;token_data&quot; = 'token_data'  ","version":"1.0.17","tagName":"h3"},{"title":"MESSAGE‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#message","content":" readonly MESSAGE: &quot;message&quot; = 'message'  ","version":"1.0.17","tagName":"h3"},{"title":"POST‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#post","content":" readonly POST: &quot;post&quot; = 'post'  ","version":"1.0.17","tagName":"h3"},{"title":"UNKNOWN‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#unknown","content":" readonly UNKNOWN: &quot;unknown&quot; = 'unknown'  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Variable: ServiceType","url":"/api/variables/ServiceType#defined-in","content":" packages/core/src/types/service.ts:86 ","version":"1.0.17","tagName":"h2"},{"title":"Variable: ModelType","type":0,"sectionRef":"#","url":"/api/variables/ModelType","content":"","keywords":"","version":"1.0.17"},{"title":"Type declaration‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#type-declaration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"SMALL‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#small","content":" readonly SMALL: &quot;TEXT_SMALL&quot; = 'TEXT_SMALL'  ","version":"1.0.17","tagName":"h3"},{"title":"MEDIUM‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#medium","content":" readonly MEDIUM: &quot;TEXT_LARGE&quot; = 'TEXT_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"LARGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#large","content":" readonly LARGE: &quot;TEXT_LARGE&quot; = 'TEXT_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_SMALL‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#text_small","content":" readonly TEXT_SMALL: &quot;TEXT_SMALL&quot; = 'TEXT_SMALL'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_LARGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#text_large","content":" readonly TEXT_LARGE: &quot;TEXT_LARGE&quot; = 'TEXT_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_EMBEDDING‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#text_embedding","content":" readonly TEXT_EMBEDDING: &quot;TEXT_EMBEDDING&quot; = 'TEXT_EMBEDDING'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_TOKENIZER_ENCODE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#text_tokenizer_encode","content":" readonly TEXT_TOKENIZER_ENCODE: &quot;TEXT_TOKENIZER_ENCODE&quot; = 'TEXT_TOKENIZER_ENCODE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_TOKENIZER_DECODE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#text_tokenizer_decode","content":" readonly TEXT_TOKENIZER_DECODE: &quot;TEXT_TOKENIZER_DECODE&quot; = 'TEXT_TOKENIZER_DECODE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_REASONING_SMALL‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#text_reasoning_small","content":" readonly TEXT_REASONING_SMALL: &quot;REASONING_SMALL&quot; = 'REASONING_SMALL'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_REASONING_LARGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#text_reasoning_large","content":" readonly TEXT_REASONING_LARGE: &quot;REASONING_LARGE&quot; = 'REASONING_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_COMPLETION‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#text_completion","content":" readonly TEXT_COMPLETION: &quot;TEXT_COMPLETION&quot; = 'TEXT_COMPLETION'  ","version":"1.0.17","tagName":"h3"},{"title":"IMAGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#image","content":" readonly IMAGE: &quot;IMAGE&quot; = 'IMAGE'  ","version":"1.0.17","tagName":"h3"},{"title":"IMAGE_DESCRIPTION‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#image_description","content":" readonly IMAGE_DESCRIPTION: &quot;IMAGE_DESCRIPTION&quot; = 'IMAGE_DESCRIPTION'  ","version":"1.0.17","tagName":"h3"},{"title":"TRANSCRIPTION‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#transcription","content":" readonly TRANSCRIPTION: &quot;TRANSCRIPTION&quot; = 'TRANSCRIPTION'  ","version":"1.0.17","tagName":"h3"},{"title":"TEXT_TO_SPEECH‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#text_to_speech","content":" readonly TEXT_TO_SPEECH: &quot;TEXT_TO_SPEECH&quot; = 'TEXT_TO_SPEECH'  ","version":"1.0.17","tagName":"h3"},{"title":"AUDIO‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#audio","content":" readonly AUDIO: &quot;AUDIO&quot; = 'AUDIO'  ","version":"1.0.17","tagName":"h3"},{"title":"VIDEO‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#video","content":" readonly VIDEO: &quot;VIDEO&quot; = 'VIDEO'  ","version":"1.0.17","tagName":"h3"},{"title":"OBJECT_SMALL‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#object_small","content":" readonly OBJECT_SMALL: &quot;OBJECT_SMALL&quot; = 'OBJECT_SMALL'  ","version":"1.0.17","tagName":"h3"},{"title":"OBJECT_LARGE‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#object_large","content":" readonly OBJECT_LARGE: &quot;OBJECT_LARGE&quot; = 'OBJECT_LARGE'  ","version":"1.0.17","tagName":"h3"},{"title":"Defined in‚Äã","type":1,"pageTitle":"Variable: ModelType","url":"/api/variables/ModelType#defined-in","content":" packages/core/src/types/model.ts:15 ","version":"1.0.17","tagName":"h2"},{"title":"ElizaOS Documentation","type":0,"sectionRef":"#","url":"/docs","content":"ElizaOS Documentation Welcome to ElizaOS - a comprehensive framework for building AI agents with persistent personalities across multiple platforms. ElizaOS provides the architecture, tools, and systems needed to create sophisticated agents that maintain consistent behavior, learn from interactions, and seamlessly integrate with a variety of services. New to ElizaOS? Check out What's new in ElizaOS V2 to understand how it compares to previous versions. System Architecture‚Äã ElizaOS uses a modular architecture that separates concerns while providing a cohesive framework for AI agent development: How ElizaOS Works‚Äã When a user message is received: Service Reception: Platform service (Discord, Telegram, etc.) receives the messageRuntime Processing: Agent runtime coordinates the response generationContext Building: Providers supply relevant context (time, recent messages, knowledge)Action Selection: The agent evaluates and selects appropriate actionsResponse Generation: The chosen action generates a responseLearning &amp; Reflection: Evaluators analyze the conversation for insights and learningMemory Storage: New information is stored in the databaseResponse Delivery: The response is sent back through the service This creates a continuous cycle of interaction, reflection, and improvement that allows agents to maintain consistent personalities while adapting to new information. Core Components‚Äã ü§ñ Agent Runtime ‚Äî Orchestrates agent behavior, manages state, and coordinates components.\tüìö Services ‚Äî Enables agents to communicate across Discord, Twitter, Telegram, and other platforms.\tüíæ Database ‚Äî Stores memories, entity data, relationships, and configuration using vector search. Intelligence &amp; Behavior‚Äã ‚ö° Actions ‚Äî Executable capabilities for agents to respond and interact with systems.\tüîå Providers ‚Äî Supplies context to inform agent decisions in real time.\tüìä Evaluators ‚Äî Analyzes conversations to extract insights and improve future responses.\tüß† Knowledge ‚Äî RAG system for document processing and semantic memory. Structure &amp; Organization‚Äã üåê Worlds ‚Äî Organizes environments like servers or projects.\tüí¨ Rooms ‚Äî Spaces for conversation, like channels or DMs.\tüë§ Entities ‚Äî Represents users, bots, and other participants. Development &amp; Integration‚Äã üß© Plugins ‚Äî Modular extensions that add new capabilities.\tüìù Projects ‚Äî Defines and deploys agents with configurations.\tüìã Tasks ‚Äî Manages scheduled and deferred operations. Key Concepts‚Äã Action-Provider-Evaluator Cycle‚Äã The core of the ElizaOS system operates as a continuous cycle: Providers gather context before response generationActions determine what the agent can do and are executed to generate responsesEvaluators analyze conversations after responses to extract insightsThese insights become part of the agent's memoryFuture Providers access this memory to inform new responses This creates a virtuous cycle where agents continuously learn and improve from interactions. Entity-Component Architecture‚Äã ElizaOS uses an entity-component architecture for flexible data modeling: Entities are base objects with unique IDs (users, agents, etc.)Components are pieces of data attached to entities (profiles, settings, etc.)This approach allows for dynamic composition without complex inheritance hierarchies Memory System‚Äã The memory system in ElizaOS provides: Vector-based semantic search for finding relevant memoriesMulti-level memory types (messages, facts, knowledge)Temporal awareness through timestamped memoriesCross-platform continuity while maintaining appropriate context boundaries Getting Started‚Äã If you're new to ElizaOS, we recommend this learning path: Start with this overview to understand the system architectureExplore the Agent Runtime to understand the core systemLearn about Projects to set up your development environmentUnderstand how Actions and Providers work togetherExplore Services to connect with external platformsDive into Plugins to extend functionality FAQ‚Äã What's the difference between Actions, Evaluators, and Providers? Actions define what an agent can do and are executed during response generation. Evaluators analyze conversations after they happen to extract insights and improve future responses. Providers supply contextual information before the agent decides how to respond. How does ElizaOS handle cross-platform conversation context? ElizaOS maintains separate conversation contexts for different platforms by default, but shares entity relationships and learned facts across platforms. This ensures agents maintain a consistent understanding of users while respecting platform-specific conversation boundaries. How does the memory system work? Memory is organized into different types (messages, facts, knowledge) and stored with vector embeddings for semantic search. This allows agents to retrieve relevant memories based on context rather than just recency, creating more natural conversations. What's the relationship between Worlds, Rooms, and Entities? Worlds are container spaces (like a Discord server) that can have multiple Rooms (channels, DMs). Entities (users, agents) participate in Rooms within Worlds. This hierarchical structure mirrors real-world platforms while providing a consistent abstraction. How extensible is ElizaOS? ElizaOS is highly extensible through its plugin system. You can create custom actions, providers, evaluators, services, and more to extend functionality. The architecture is designed to be modular and composable at every level. Additional Resources‚Äã API Reference - Detailed API documentation for developersGitHub Repository - Source code and contributionsPackage Showcase - Explore available plugins and extensions","keywords":"architecture components system design agents services database actions providers evaluators plugins","version":"1.0.17"},{"title":"Awesome elizaOS","type":0,"sectionRef":"#","url":"/docs/awesome-eliza","content":"Awesome elizaOS A curated list of awesome things related to the eliza framework. Website‚Ä¢GitHub‚Ä¢Twitter‚Ä¢Discord‚Ä¢Telegram üìã Table of Contents‚Äã üè¢ Official Developer Resourcesüìö Tutorials and Learning Resourcesüõ†Ô∏è Toolsüîå IntegrationsüîÑ Clientsüíæ Adaptersüß© Plugins ‚õìÔ∏è Blockchain &amp; DeFiüìà Crypto Trading &amp; Exchangesüß† AI &amp; Dataüé® Media &amp; Contentüí¨ Social &amp; Communicationüîí Infrastructure &amp; Securityüîß Tools &amp; Utilities üë• Communityüé¨ Videos and Spaces üìÖ What Did You Get Done This Week? üìä Research and Newsüëè Contributors üè¢ Official Developer Resources‚Äã elizaOS GitHub Repository - The main repository for elizaOS, an open-source AI agent framework.elizaOS Documentation - Official documentation and guidesSample Characters - Sample character templates and implementationselizaOS Plugin Registry - JSON Registry for all the plugins in the elizaOS ecosystemContributor Leaderboard - See all the contributors for elizaos/eliza, view daily GitHub summaries üìö Tutorials and Learning Resources‚Äã Quickstart Guide - Get up and running quickly with elizaOSBuilding a Social AI Agent in 15 Minutes - Nader's TutorialCreating an AI Agent with Your Own Personality - Nader's TutorialHow to Build an API Plugin - Nader's Tutorial (Code)AI Agent Dev School 01 - Introduction and Foundations (Part 1) CNAI Agent Dev School 01 cont - Introduction and Foundations (Part 1 cont)AI Agent Dev School 02 - Deep Dive into Actions, Providers, and Evaluators (Standard Definition)AI Agent Dev School 03 - Building a User Data Extraction AgentAI Agent Dev School 04 - AI Pizza: Hacking Eliza for Domino's Delivery (plus TEE Deep Dive) üõ†Ô∏è Tools‚Äã elizagen - Easy eliza characterfile generator, add your own API keysFleek.xyz - Deploy Eliza agents in one click on a hosted platform üîå Integrations‚Äã Hyperfy - agent creation, autonomous behavior, NPC development in open source 3d webNifty Island - Deploy elizas into Nifty Island and beyond üîÑ Clients‚Äã Discord - Discord integration with messaging and community interaction capabilitiesFarcaster - Client for Farcaster decentralized social media protocolGitHub - GitHub client for repository management and code integrationLens - Client for Lens Protocol decentralized social networkingSlack - Slack integration with messaging and workspace collaboration featuresTelegram - Telegram messaging client with bot and channel integration capabilitiesTako - Client for the Tako protocol enabling cross-platform social engagementAlexa - Integration with Amazon Alexa devices for voice-controlled agent interactionsDeva - Communication with Deva AI systems for advanced conversational capabilitiesEliza Home - Integration with Eliza Home environment for home automationInstagram - Instagram integration with support for media posting and interactionsTelegram Account - Advanced Telegram account management beyond basic bot functionalityXMTP - Secure, decentralized, and end-to-end encrypted messaging through XMTP protocol üíæ Adapters‚Äã MongoDB - Database adapter for MongoDB enabling document storage with query capabilitiesPostgres - Database adapter for PostgreSQL with full relational database capabilitiesSqlite - Lightweight PostgreSQL adapter for embedded database applicationsQdrant - Vector database adapter for Qdrant with similarity search capabilitiesSQLite - File-based SQL database adapter for lightweight local storageSupabase - Database adapter for Supabase with PostgreSQL and realtime capabilities üß© Plugins‚Äã ‚õìÔ∏è Blockchain &amp; DeFi‚Äã 0x - Token swaps through 0x Protocol across multiple EVM blockchainsAptos - Token transfers and wallet management on the Aptos blockchainArthera - Transactions and token operations on the Arthera networkAvalanche - DeFi operations and token management on Avalanche blockchainBNB - Interactions with BNB Chain ecosystem including BNB Smart ChainCosmos - Token management and transfers using Cosmos-compatible blockchainsCronos - EVM plugin functionality for Cronos blockchain with native CRO token supportCronosZKEVM - Token transfers and interactions on the Cronos zkEVM networkEVM - Comprehensive functionality for interacting with EVM-compatible chainsFlow - Flow blockchain interactions for token transfers and smart contractsFlow Advanced - Advanced plugin for Flow Blockchain operationsFuel - ETH transfers and interactions on the Fuel Ignition networkGOAT - Blockchain capabilities through the Great Onchain Agent ToolkitHyperliquid - Spot trading capabilities on the Hyperliquid DEXICP - Internet Computer Protocol interactions for token operationsLightlink - Ethereum layer 2 operations on the Lightlink blockchain networkMassa - Interactions with the Massa blockchain ecosystemMina - Mina blockchain interactions for token transfers and wallet managementMovement - Movement Network blockchain functionality for token operationsMultiversX - Token operations and transfers on the MultiversX blockchainNEAR - Token management and transfers on the NEAR Protocol blockchainSei - Token transfers and operations on the Sei blockchain networkSolana - Comprehensive DeFi operations on the Solana blockchainSolana AgentKit - Interaction with Solana blockchain through AgentKitSolana Agent Kit - Token operations and NFT functionality on SolanaSolana V2 - Modern Solana integrations with liquidity position managementStarknet - Token and DeFi operations on the Starknet blockchainSui - Token transfers and wallet operations on the Sui blockchainTON - TON blockchain operations and wallet functionalityzkSync Era - Token transfers and operations on the zkSync Era networkZilliqa - Zilliqa blockchain capabilities through the GOAT frameworkInitia - Token transfers on the Initia blockchain with INIT token supportInjective - Interaction with the Injective blockchain through module-based actionsAbstract - Token transfers and operations on the Abstract blockchain networkAvail - Interacts with Avail DA network for data availability and transfersB2 - Token transfers on the B2-Network blockchain with B2-BTC supportConflux - Token transfers and interactions on the Conflux blockchain networkGenlayer - Contract deployment and interactions on the GenLayer protocolForm - Form chain capabilities for curves-based token economicsMultichain - Cross-chain interaction capabilities for multiple blockchain networksQuai - Token transfers and blockchain interactions on Quai NetworkOmniflix - Interactions with the OmniFlix Network blockchainViction - Token operations, trading, and DeFi integrations using VictionSquid Router - Cross-chain token swaps between blockchains using Squid RouterRouter Nitro - Cross-chain token transfers using Router Nitro bridgeRabbi Trader - Automated cryptocurrency trading on Solana with trust scoringTrikon - Token transfers for Trikon with wallet management on ZKsync EraAgentKit - CDP AgentKit tools for NFT and token management on blockchains üìà Crypto Trading &amp; Exchanges‚Äã Binance - Cryptocurrency trading and price checking via Binance APICCXT - Cryptocurrency trading and arbitrage across multiple exchangesCoinbase - Integration with Coinbase's various APIs and trading servicesCoinGecko - Cryptocurrency price data and market information from CoinGeckoCoinMarketCap - Cryptocurrency price checking using CoinMarketCap's APICompass - Integration with Compass API for executing operations on DeFi protocolsDesk Exchange - Integration with DESK Exchange for perpetual futures tradingDexscreener - DexScreener's token data for price information and market trendsBirdeye - DeFi and token analytics through Birdeye's APIMerkle - MerkleTrade platform for trading operations with API-based price trackingOKX - Trading and asset management through OKX exchange APIHoldstation - Token swapping on Holdstation DEX with ZKsync Era supportArbitrage - Identifies and executes cryptocurrency arbitrage opportunitiesGrix - DeFi options data fetching and price analysis through Grix Finance APIPyth Data - Real-time price feeds and data streams across multiple asset classesZapper - Portfolio tracking and DeFi position management across multiple chainsZerion - Wallet portfolio and position data using the Zerion APIFerePro - WebSocket communication with FerePro API for market insightsMessari AI Toolkit - Crypto market research capabilities using Messari's AI ToolkitMoralis - Real-time DeFi data including trading pairs and price historyAnkr - Blockchain data queries for wallet information and token analyticsChainbase - Natural language interactions with blockchain data across networksEdwin - Interaction with Edwin tools for DeFi operationsNFT Collections - NFT data services for market analytics with 420+ verified collections üß† AI &amp; Data‚Äã Allora - Real-time AI inferences from Allora Network for market predictionsAsterai - Integration with asterai.io plugins and agents for enhanced AI capabilitiesATTPs - Verification of agent activities using proof generation and validationAutonome - Launches and manages new Eliza agents through the Autonome platformBittensor - Integration with BitMind's API for accessing AI services on BittensorDevin - Integration with Devin API for automated engineering assistanceIsaacx - Advanced AI reasoning and cognitive modeling pluginMind Network - Integration with Mind Network Hubs for secure, privacy-preserving votingNVIDIA NIM - NVIDIA's AI foundation models for content analysis and safety checksOpenAI - Integration with OpenAI's GPT models for automated text generationGaladriel - Verified inference API for on-chain agent verificationLLaMA - Local LLM capabilities using LLaMA models with CPU and GPU supportD.a.t.a - Data processing with authentication and trust scoringAlphaNeural - Neural network capabilities for AI agents üé® Media &amp; Content‚Äã 3D Generation - Generates 3D models from text descriptions using FAL.aiImage - Processing and analysis of images with multiple vision model providersImage Generation - Generates and manages images with storage and optimization featuresLetzai - Image generation using LetzAI's API and modelsNFT Generation - Creates NFT collections with AI-generated artwork on SolanaVideo - Comprehensive video processing with download and transcriptionVideo Generation - Generates videos using Luma AI's API servicesStory - Generates interactive storytelling experiences with branching narrativesSuno - Integration with Suno AI's music generation from text promptsUDIO - AI-powered music generation and extension from text promptsGiphy - Sending GIFs in response to user messages using the Giphy APIimgflip - Generates memes using the imgflip.com API based on user messagesTTS - Generates speech from text using FAL.ai's APISpeech TTS - Text-to-speech transcription using OpenAI and ElevenLabsPara - NFT and digital collectible management platform integrationYouTube to Text - Converts YouTube videos to text transcriptsPDF - PDF text extraction and processing capabilities for document analysis üí¨ Social &amp; Communication‚Äã Email - Email client functionality for sending/receiving via SMTP/IMAPEmail Automation - AI-powered email conversation detection and content formattingEchochambers - Chat room interactions with dynamic conversation handlingTwitter - Automated tweet posting with character-aware content generationWhatsApp - WhatsApp messaging through the Cloud API with comprehensive featuresTwilio - SMS, voice, and communication capabilities through Twilio APILens Network - Integration with Lens protocol for both native and ERC20 tokensNKN - Communication between multiple AI agents using the NKN protocolObsidian - Seamless integration with Obsidian vaults for note managementGitBook - Querying and retrieving information from GitBook documentationNews - Real-time news data through NewsAPI with search and summaryIntiface - Controls intimate hardware devices through the Buttplug.io protocolOpen Weather - Weather data using the OpenWeather APIFootball - Live football match data and league standings information üîí Infrastructure &amp; Security‚Äã 0G - Decentralized file storage using the Zero Gravity protocolAkash - Deployments and cloud compute operations on the Akash NetworkAnyone - SOCKS proxy configuration for the Anyone protocol proxy servicesAWS S3 - AWS S3 integration for cloud-based file storage managementDCAP - Intel Data Center Attestation Primitives for secure cloud environmentsDePIN - Connection to physical infrastructure through Decentralized NetworksETHStorage - Interaction with EthStorage decentralized storage networkGelato - Smart contract interactions via Gelato Relay on EVM chainsHyperbolic - GPU instance management on the Hyperbolic platformIQ6900 - Blockchain inscription functionality through IQ6900's Code-In standardIrys - Decentralized data storage and retrieval using Irys datachainLit - Integration with Lit Protocol for decentralized access controlOkto - Self-custody wallet operations and transaction managementSGX - Intel SGX attestation capabilities for secure executionSpheron - Deployments and operations using the Spheron ProtocolTEE - Trusted Execution Environment operations and key managementTEE Log - Secure logging capabilities within Trusted Execution EnvironmentsTEE Marlin - TEE verification through Marlin Oyster platformTEE Verifiable Log - Verifiable logging within TEEs for secure, auditable recordsThirdweb - Access to thirdweb's Nebula AI interfaceTrustDB - Trust scores and performance metrics in a secure databaseTrustGo - EVM account information and MEDIA score attestations from TrustGoGitcoin Passport - Gitcoin Passport API for verifying and managing digital identityGoPlus - On-chain security checks through the GoPlus API integrationQuick Intel - Token security audits and market analysis across multiple chains üîß Tools &amp; Utilities‚Äã Browser - Web scraping and browser automation using PlaywrightDKG - Integration with OriginTrail Decentralized Knowledge GraphFirecrawl - Web scraping and crawling capabilities through the Firecrawl APIGigbot - AI-powered freelance work management and automation toolkitLightning - Lightning Network integration for off-chain Bitcoin paymentsStargaze - Fetches NFT data from Stargaze collectionsWeb Search - Powerful web search capabilities with customizable API interface üë• Community‚Äã elizaOS - Official homepage for elizaOSx.com/elizaos - Official X account for elizaOSelizaOS-image-lab - Create an Eliza picture with AI image genPut on a hat - Add a hat to any image!awesome-eliza - HTML version of awesome things related to elizaOS/eliza frameworkelizas world - List of all agent tokens with contributions üé¨ Videos and Spaces‚Äã The Delphi Podcast: Crypto x AI Agents - Panel with ai16z, Virtuals, MyShell, NOUS, and CENTSWhat Do Machines Dream Of? Episode 1: World BuildersThreadguy x Shaw Interview - Shaw and Threadguy talking about AI agents during a livestreamHats Protocol - DAO Organization - Overview of Hats protocol and how it applies to elizaOSBankless + Shaw Interview - What is the role of AI in crypto, and how will it shape the future?Green Pill: Owocki, Shaw, Jin - S7 Ep2 talking about Ai Agents, DAOs, and funding public goodsjin: Managing Information + Rewarding Contributors - Early presentation about information managementShaw + Polygon Labs Interview - Discussing decentralized AI, autonomous agents, AGI, and moreThe Future of AI Agents/w Shaw - Shaw chatting with MotherDAO about AI agents, 2025-02-27DCo - AI Traders, Swarms, and Surviving the Bear - Ep35 of The DCo Podcast with Shaw üìÖ What Did You Get Done This Week?‚Äã WDYGDTW #1 - 2024-11-15WDYGDTW #2 - 2024-11-22WDYGDTW #3 - 2024-11-29WDYGDTW #4 - 2024-12-06WDYGDTW #5 - 2024-12-13WDYGDTW #6 - 2024-12-20WDYGDTW #7 - 2024-12-27WDYGDTW #8 - 2025-01-03WDYGDTW #9 - 2025-01-10WDYGDTW #10 - 2025-01-17WDYGDTW #11 - 2025-01-24WDYGDTW #12 - 2025-01-31 üìä Research and News‚Äã Eliza Technical Report/Whitepaper - Academic paper on ElizaOS architecture and capabilitiesExploring the Future of AI Agents in Crypto - BinanceAlmost all AI agents are just 'memecoins that talk' - BinanceAI16z rebrands into ElizaOS - CryptoSlateEliza Labs and Stanford University's FDCI PartnershipThe Bazaar of Agents - Analyzing elizaOS through lens of 'The Cathedral and the Bazaar'The Battle of the AI Agent Frameworks - Delphi research report üëè Contributors‚Äã Thanks goes to all these wonderful people:","keywords":"awesome resources plugins tools integrations clients adapters blockchain DeFi AI social infrastructure","version":"1.0.17"},{"title":"Agent Command","type":0,"sectionRef":"#","url":"/docs/cli/agent","content":"Agent Command Manage ElizaOS agents. Overview &amp; OptionsExamplesGuides &amp; ConceptsTroubleshooting Usage‚Äã elizaos agent [options] [command] Subcommands‚Äã Subcommand\tAliases\tDescription\tRequired Options\tAdditional Optionslist\tls\tList available agents --format &lt;format&gt;, -r, --remote-url &lt;url&gt;, -p, --port &lt;port&gt; get\tg\tGet agent details\t-n, --name &lt;name&gt;\t--format &lt;format&gt;, -o, --output [file], -r, --remote-url, -p, --port start\ts\tStart an agent with a character profile\tOne of: -n, --name, --path, --remote-character\t-r, --remote-url &lt;url&gt;, -p, --port &lt;port&gt; stop\tst\tStop an agent\t-n, --name &lt;name&gt;\t-r, --remote-url &lt;url&gt;, -p, --port &lt;port&gt; remove\trm\tRemove an agent\t-n, --name &lt;name&gt;\t-r, --remote-url &lt;url&gt;, -p, --port &lt;port&gt; set Update agent configuration\t-n, --name &lt;name&gt; AND one of: -c, --config OR -f, --file\t-r, --remote-url &lt;url&gt;, -p, --port &lt;port&gt; Options Reference‚Äã Common Options (All Subcommands)‚Äã -r, --remote-url &lt;url&gt;: URL of the remote agent runtime-p, --port &lt;port&gt;: Port to listen on Output Options (for list and get)‚Äã --format &lt;format&gt;: Specify the output format. Options are table (default), json, or yaml.-j, --json: A shorthand for --format json.-o, --output [file]: For the get command, saves the agent's configuration to a JSON file. If no filename is provided, defaults to {name}.json. Get Specific Options‚Äã -n, --name &lt;name&gt;: Agent id, name, or index number from list (required) Start Specific Options‚Äã -n, --name &lt;name&gt;: Name of an existing agent to start--path &lt;path&gt;: Path to local character JSON file--remote-character &lt;url&gt;: URL to remote character JSON file Stop/Remove Specific Options‚Äã -n, --name &lt;name&gt;: Agent id, name, or index number from list (required) Set Specific Options‚Äã -n, --name &lt;name&gt;: Agent id, name, or index number from list (required)-c, --config &lt;json&gt;: Agent configuration as JSON string-f, --file &lt;path&gt;: Path to agent configuration JSON file","keywords":"CLI agent management configuration commands options actions","version":"1.0.17"},{"title":"Dev Command","type":0,"sectionRef":"#","url":"/docs/cli/dev","content":"Dev Command Start the project or plugin in development mode with auto-rebuild, detailed logging, and file change detection. Overview &amp; OptionsExamplesGuides &amp; ConceptsTroubleshooting Usage‚Äã elizaos dev [options] Options‚Äã Option\tDescription-c, --configure\tReconfigure services and AI models (skips using saved configuration) --character [paths...]\tCharacter file(s) to use - accepts paths or URLs -b, --build\tBuild the project before starting -p, --port &lt;port&gt;\tPort to listen on","keywords":"development hot reload debugging watch mode local development","version":"1.0.17"},{"title":"Create Command","type":0,"sectionRef":"#","url":"/docs/cli/create","content":"Create Command Initialize a new project, plugin, or agent. Overview &amp; OptionsExamplesGuidesTroubleshooting Usage‚Äã # Interactive mode (recommended) elizaos create # With specific options elizaos create [options] [name] Getting Help‚Äã # View detailed help elizaos create --help Options‚Äã Option\tDescription-y, --yes\tSkip confirmation and use defaults (default: false) -t, --type &lt;type&gt;\tType of template to use (project, plugin, agent, or tee) --template &lt;name&gt;\tUse a specific template by name (e.g., default, minimal) --no-install\tSkip automatic dependency installation after creation --no-git\tSkip git init for the new project [name]\tName for the project, plugin, or agent (optional) Interactive Process‚Äã When you run elizaos create without options, it launches an interactive wizard: What would you like to name your project? - Enter your project nameSelect your database: - Choose between: sqlite (local, file-based database)postgres (requires connection details) Default Values (with -y flag)‚Äã When using the -y flag to skip prompts: Default name: myprojectDefault type: projectDefault database: sqlite","keywords":"create project plugin setup scaffolding initialization configuration","version":"1.0.17"},{"title":"Monorepo Command","type":0,"sectionRef":"#","url":"/docs/cli/monorepo","content":"Monorepo Command Clone ElizaOS monorepo from a specific branch, defaults to develop. Usage‚Äã elizaos monorepo [options] Options‚Äã Option\tDescription\tDefault-b, --branch &lt;branch&gt;\tBranch to clone\tdevelop -d, --dir &lt;directory&gt;\tDestination directory\t./eliza How It Works‚Äã Checks Destination: Verifies the target directory is empty or doesn't existClones Repository: Downloads the elizaOS/eliza repository from GitHubShows Next Steps: Displays instructions for getting started Examples‚Äã Basic Usage‚Äã # Clone default branch (develop) to default directory (./eliza) elizaos monorepo # Clone with verbose output elizaos monorepo --dir ./eliza --branch develop Custom Branch‚Äã # Clone main branch elizaos monorepo --branch main # Clone feature branch for testing elizaos monorepo --branch feature/new-api # Clone release branch elizaos monorepo --branch v2.1.0 Custom Directory‚Äã # Clone to custom directory elizaos monorepo --dir my-eliza-dev # Clone to current directory (must be empty) elizaos monorepo --dir . # Clone to nested path elizaos monorepo --dir ./projects/eliza-fork Development Workflows‚Äã # For contribution development elizaos monorepo --branch main --dir ./eliza-contrib # For stable development elizaos monorepo --branch main --dir ./eliza-stable # For testing specific features elizaos monorepo --branch feature/new-plugin-system After Setup‚Äã Once cloned, follow these steps: cd eliza # Navigate to the cloned directory bun i &amp;&amp; bun run build # Install dependencies and build Development Commands‚Äã # Start development server bun run dev # Run tests bun test # Build all packages bun run build # Start a specific package cd packages/client-web bun dev Monorepo Structure‚Äã The cloned repository includes: eliza/ ‚îú‚îÄ‚îÄ packages/ ‚îÇ ‚îú‚îÄ‚îÄ core/ # Core ElizaOS functionality ‚îÇ ‚îú‚îÄ‚îÄ client-web/ # Web interface ‚îÇ ‚îú‚îÄ‚îÄ client-discord/ # Discord client ‚îÇ ‚îú‚îÄ‚îÄ plugin-*/ # Various plugins ‚îÇ ‚îî‚îÄ‚îÄ cli/ # CLI tool source ‚îú‚îÄ‚îÄ docs/ # Documentation ‚îú‚îÄ‚îÄ examples/ # Example projects ‚îî‚îÄ‚îÄ scripts/ # Build and utility scripts Use Cases‚Äã Contributors‚Äã Perfect for developers wanting to: Submit pull requestsDevelop new pluginsFix bugs or add featuresUnderstand the codebase Advanced Users‚Äã Useful for users who need: Custom buildsExperimental featuresLocal plugin developmentIntegration testing Plugin Developers‚Äã Essential for: Plugin development and testingUnderstanding plugin APIsContributing to core functionality Troubleshooting‚Äã Clone Failures‚Äã # If git clone fails, check network connection git --version ping github.com # For authentication issues git config --global credential.helper store Directory Issues‚Äã # If directory is not empty ls -la ./eliza # Check contents rm -rf ./eliza # Remove if safe elizaos monorepo # Retry # For permission issues sudo chown -R $USER:$USER ./eliza Build Failures‚Äã # If dependencies fail to install cd eliza rm -rf node_modules bun install # If build fails bun run clean bun install bun run build Branch Not Found‚Äã # List available branches git ls-remote --heads https://github.com/elizaOS/eliza # Use correct branch name elizaos monorepo --branch main Notes‚Äã The destination directory must be empty or non-existentUses the official elizaOS/eliza repository from GitHubRequires Git to be installed on your systemInternet connection required for cloning Related Commands‚Äã create: Create a new project or plugin from templatesplugins: Manage plugins in your projectdev: Run development server for your projects","keywords":"monorepo setup clone git development contribution","version":"1.0.17"},{"title":"Environment Command","type":0,"sectionRef":"#","url":"/docs/cli/env","content":"Environment Command Manage environment variables and secrets. Overview &amp; OptionsExamplesGuides &amp; ConceptsTroubleshooting Usage‚Äã elizaos env [command] [options] Subcommands‚Äã Subcommand\tDescription\tOptionslist\tList all environment variables\t--system, --local edit-local\tEdit local environment variables\t-y, --yes reset\tReset environment variables and clean up database/cache files (interactive selection)\t-y, --yes interactive\tInteractive environment variable management\t-y, --yes Options‚Äã List Command Options‚Äã Option\tDescription--system\tList only system information --local\tList only local environment variables --show-values\tDisplay the actual values of secrets (use with caution) --filter &lt;text&gt;\tFilter variables by a text pattern --output &lt;file&gt;\tExport the environment variables to a file General Options‚Äã Option\tDescription-y, --yes\tAutomatically confirm prompts","keywords":"environment configuration API keys secrets settings .env","version":"1.0.17"},{"title":"Plugin Interface Reference","type":0,"sectionRef":"#","url":"/docs/api/plugin-interface","content":"Plugin Interface Reference This document provides the complete Plugin interface definition and all related types as implemented in the ElizaOS codebase. Plugin Interface‚Äã The main Plugin interface defines the structure for extending agent functionality. All interfaces follow TypeScript best practices for clarity, type safety, and maintainability: /** * Plugin interface for extending agent functionality * * @example * ```typescript * const myPlugin: Plugin = { * name: &quot;example-plugin&quot;, * description: &quot;An example plugin for demonstration&quot;, * actions: [myAction], * providers: [myProvider], * init: async (config, runtime) =&gt; { * // Initialize plugin * } * }; * ``` */ export interface Plugin { /** Unique identifier for the plugin */ name: string; /** Human-readable description of plugin functionality */ description: string; /** * Optional initialization function called when plugin is loaded * @param config - Configuration object from environment variables * @param runtime - Agent runtime instance for accessing services */ init?: (config: Record&lt;string, string&gt;, runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; /** Plugin-specific configuration settings */ config?: { [key: string]: any }; /** Service classes that this plugin provides */ services?: (typeof Service)[]; /** * Entity component type definitions for structured data * Used for defining custom data schemas with optional validation */ componentTypes?: { /** Component type name */ name: string; /** JSON schema definition for the component */ schema: Record&lt;string, unknown&gt;; /** Optional validation function for component data */ validator?: (data: any) =&gt; boolean; }[]; /** Actions that the agent can perform */ actions?: Action[]; /** Providers for supplying contextual information */ providers?: Provider[]; /** Evaluators for post-interaction processing */ evaluators?: Evaluator[]; /** Database adapter for custom storage implementations */ adapter?: IDatabaseAdapter; /** * Model functions for AI/ML capabilities * Maps model names to their implementation functions */ models?: { [key: string]: (...args: any[]) =&gt; Promise&lt;any&gt;; }; /** Event handlers for plugin lifecycle events */ events?: PluginEvents; /** HTTP routes exposed by the plugin */ routes?: Route[]; /** Test suites for plugin functionality */ tests?: TestSuite[]; /** Names of other plugins this plugin depends on */ dependencies?: string[]; /** Plugin dependencies only needed for testing */ testDependencies?: string[]; /** Loading priority (higher numbers load first) */ priority?: number; /** JSON schema for plugin configuration validation */ schema?: any; } Route Type‚Äã Routes define HTTP endpoints exposed by plugins: /** * Defines an HTTP route exposed by a plugin * * @example * ```typescript * const apiRoute: Route = { * type: 'GET', * path: '/api/status', * public: true, * name: 'Status Check', * handler: async (req, res, runtime) =&gt; { * res.json({ status: 'running' }); * } * }; * ``` */ export type Route = { /** HTTP method for the route */ type: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'STATIC'; /** URL path for the route (e.g., '/api/data') */ path: string; /** File path for STATIC routes to serve files */ filePath?: string; /** Whether the route is publicly accessible without authentication */ public?: boolean; /** Display name for public routes (shown in UI tabs) */ name?: string extends { public: true } ? string : string | undefined; /** * Handler function for processing requests * @param req - HTTP request object * @param res - HTTP response object * @param runtime - Agent runtime instance */ handler?: (req: any, res: any, runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; /** Whether the route expects multipart/form-data for file uploads */ isMultipart?: boolean; }; PluginEvents Type‚Äã Defines event handlers for plugin lifecycle events: /** * Event handlers mapping for plugin lifecycle events * * @example * ```typescript * const pluginEvents: PluginEvents = { * MESSAGE_RECEIVED: [handleMessage], * WORLD_JOINED: [handleWorldJoin], * customEvent: [handleCustom] * }; * ``` */ export type PluginEvents = { /** Standard event handlers mapped by event type */ [K in keyof EventPayloadMap]?: EventHandler&lt;K&gt;[]; } &amp; { /** Custom event handlers for plugin-specific events */ [key: string]: ((params: any) =&gt; Promise&lt;any&gt;)[]; }; Service Class‚Äã The abstract Service class provides the foundation for all plugin services: /** * Abstract base class for all ElizaOS services * * Services provide specialized functionality like transcription, video processing, * web browsing, and other capabilities that agents can utilize. * * @example * ```typescript * class TranscriptionService extends Service { * static serviceType = 'transcription'; * capabilityDescription = 'Audio transcription service'; * * static async start(runtime: IAgentRuntime): Promise&lt;Service&gt; { * return new TranscriptionService(runtime); * } * * async stop(): Promise&lt;void&gt; { * // Cleanup logic * } * } * ``` */ export abstract class Service { /** Runtime instance for accessing agent capabilities */ protected runtime!: IAgentRuntime; /** * @param runtime - Optional runtime instance, can be set later */ constructor(runtime?: IAgentRuntime) { if (runtime) { this.runtime = runtime; } } /** Cleanup and stop the service */ abstract stop(): Promise&lt;void&gt;; /** Unique identifier for this service type */ static serviceType: string; /** Human-readable description of service capabilities */ abstract capabilityDescription: string; /** Service-specific configuration metadata */ config?: Metadata; /** * Start and initialize the service * @param _runtime - Agent runtime instance * @returns Promise resolving to the service instance */ static async start(_runtime: IAgentRuntime): Promise&lt;Service&gt; { throw new Error('Not implemented'); } /** * Stop the service class-wide * @param _runtime - Agent runtime instance * @returns Promise for cleanup completion */ static async stop(_runtime: IAgentRuntime): Promise&lt;unknown&gt; { throw new Error('Not implemented'); } } Service Type Registry‚Äã The service type registry defines all available service types: export interface ServiceTypeRegistry { TRANSCRIPTION: 'transcription'; VIDEO: 'video'; BROWSER: 'browser'; PDF: 'pdf'; REMOTE_FILES: 'aws_s3'; WEB_SEARCH: 'web_search'; EMAIL: 'email'; TEE: 'tee'; TASK: 'task'; WALLET: 'wallet'; LP_POOL: 'lp_pool'; TOKEN_DATA: 'token_data'; DATABASE_MIGRATION: 'database_migration'; PLUGIN_MANAGER: 'PLUGIN_MANAGER'; PLUGIN_CONFIGURATION: 'PLUGIN_CONFIGURATION'; PLUGIN_USER_INTERACTION: 'PLUGIN_USER_INTERACTION'; } TypedService Interface‚Äã Generic service interface with better type checking: export interface TypedService&lt;ConfigType extends Metadata = Metadata, ResultType = unknown&gt; extends Service { /** * The configuration for this service instance */ config?: ConfigType; /** * Process an input with this service * @param input The input to process * @returns A promise resolving to the result */ process(input: unknown): Promise&lt;ResultType&gt;; } Provider Interface‚Äã Providers supply external data and services to the agent: /** * Provider interface for supplying contextual information to agents * * Providers act as the agent's &quot;senses&quot;, gathering dynamic information * from external sources to inform decision-making. * * @example * ```typescript * const weatherProvider: Provider = { * name: 'weather', * description: 'Current weather information', * get: async (runtime, message, state) =&gt; { * const weather = await fetchWeather(state.location); * return { * text: `Current weather: ${weather.description}, ${weather.temperature}¬∞C`, * data: weather * }; * } * }; * ``` */ export interface Provider { /** Unique identifier for the provider */ name: string; /** Human-readable description of what this provider supplies */ description?: string; /** * Whether the provider generates dynamic content that changes over time * Dynamic providers are called more frequently */ dynamic?: boolean; /** * Position in the provider execution order * Positive numbers = later in chain, negative = earlier */ position?: number; /** * Whether the provider is private * * Private providers are not shown in provider lists and must be * explicitly called by name from actions or other providers */ private?: boolean; /** * Data retrieval function called when agent needs this information * @param runtime - Agent runtime for accessing services and capabilities * @param message - Current message context triggering the provider * @param state - Current conversation state and context * @returns Promise resolving to provider data */ get: (runtime: IAgentRuntime, message: Memory, state: State) =&gt; Promise&lt;ProviderResult&gt;; } ProviderResult Type‚Äã Result structure returned by providers: export interface ProviderResult { values?: { [key: string]: any; }; data?: { [key: string]: any; }; text?: string; } Action Interface‚Äã Actions define capabilities the agent can perform: /** * Interface for defining agent actions * * Actions represent specific capabilities or behaviors that an agent * can execute in response to messages or triggers. * * @example * ```typescript * const sendMessageAction: Action = { * name: 'SEND_MESSAGE', * description: 'Send a message to a specified recipient', * similes: ['message', 'send', 'communicate'], * examples: [[ * { name: 'User', content: { text: 'Send hello to John' } }, * { name: 'Assistant', content: { text: 'Message sent to John: Hello!' } } * ]], * validate: async (runtime, message) =&gt; { * return message.content.text?.includes('send'); * }, * handler: async (runtime, message, state) =&gt; { * // Implementation * } * }; * ``` */ export interface Action { /** Alternative names or keywords that trigger this action */ similes?: string[]; /** Detailed description of what this action does */ description: string; /** * Example conversation flows showing how to use this action * Each example is an array of message exchanges */ examples?: ActionExample[][]; /** * Handler function that executes the action * @param runtime - Agent runtime instance * @param message - Triggering message * @param state - Current conversation state * @param options - Additional options * @param callback - Callback for handling responses * @param responses - Previous responses in conversation */ handler: Handler; /** Unique name identifying this action */ name: string; /** * Validation function to determine if action should trigger * @param runtime - Agent runtime instance * @param message - Message to validate against * @param state - Current conversation state * @returns Promise resolving to boolean indicating if action applies */ validate: Validator; } Evaluator Interface‚Äã Evaluators assess agent responses and behavior: /** * Interface for defining agent evaluators * * Evaluators run after interactions to assess performance, learn from * conversations, and update agent knowledge or behavior patterns. * * @example * ```typescript * const sentimentEvaluator: Evaluator = { * name: 'SENTIMENT_ANALYSIS', * description: 'Analyzes conversation sentiment for learning', * alwaysRun: true, * examples: [{ * prompt: 'Analyze the emotional tone of this conversation', * messages: [ * { name: 'User', content: { text: 'I\\'m really frustrated with this' } }, * { name: 'Assistant', content: { text: 'I understand your frustration' } } * ], * outcome: 'Negative sentiment detected, empathetic response given' * }], * validate: async (runtime, message) =&gt; true, * handler: async (runtime, message, state) =&gt; { * // Sentiment analysis implementation * } * }; * ``` */ export interface Evaluator { /** * Whether this evaluator should run after every interaction * If false, only runs when validate() returns true */ alwaysRun?: boolean; /** Detailed description of what this evaluator analyzes */ description: string; /** Alternative names or keywords for this evaluator */ similes?: string[]; /** * Example scenarios showing what this evaluator looks for * Each example includes context, sample messages, and expected outcome */ examples: EvaluationExample[]; /** * Handler function that performs the evaluation * @param runtime - Agent runtime instance * @param message - Message or interaction to evaluate * @param state - Current conversation state * @param options - Additional evaluation options * @param callback - Callback for handling evaluation results * @param responses - Previous responses for context */ handler: Handler; /** Unique name identifying this evaluator */ name: string; /** * Validation function to determine if evaluator should run * @param runtime - Agent runtime instance * @param message - Message to validate against * @param state - Current conversation state * @returns Promise resolving to boolean indicating if evaluator applies */ validate: Validator; } TestSuite Interface‚Äã Test suites organize related test cases: /** * Test suite for organizing related test cases * * Test suites group related tests together and are used by the ElizaOS * test runner to systematically validate plugin functionality. * * @example * ```typescript * const pluginTestSuite: TestSuite = { * name: 'Message Processing Tests', * tests: [ * { * name: 'should process text messages', * fn: async (runtime) =&gt; { * const result = await runtime.processMessage(testMessage); * assert(result.success); * } * }, * { * name: 'should handle empty messages', * fn: async (runtime) =&gt; { * const result = await runtime.processMessage(emptyMessage); * assert(!result.success); * } * } * ] * }; * ``` */ export interface TestSuite { /** Descriptive name for the test suite (e.g., &quot;Core Functionality Tests&quot;) */ name: string; /** Array of test cases that belong to this suite */ tests: TestCase[]; } TestCase Interface‚Äã Individual test cases for plugin functionality: /** * Individual test case for validating specific functionality * * Test cases contain the actual test logic and assertions. They receive * access to the agent runtime to test interactions and behaviors. * * @example * ```typescript * const greetingTest: TestCase = { * name: 'should respond to greetings appropriately', * fn: async (runtime) =&gt; { * const message = createTestMessage('Hello!'); * const response = await runtime.processMessage(message); * * assert(response, 'Should generate a response'); * assert(response.content.text.includes('hello'), 'Should acknowledge greeting'); * } * }; * ``` */ export interface TestCase { /** Descriptive name for the test case (e.g., &quot;should respond to greetings&quot;) */ name: string; /** * Test execution function containing the test logic and assertions * * @param runtime - Agent runtime instance providing access to all agent * capabilities, services, and test utilities * @returns Promise for async tests, or void for synchronous tests * * The function should use assertions to verify expected behavior and * throw errors when tests fail. */ fn: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt; | void; } ProjectAgent Interface‚Äã Defines agents within a project: export interface ProjectAgent { character: Character; init?: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; plugins?: Plugin[]; tests?: TestSuite | TestSuite[]; } Project Interface‚Äã Top-level project structure: export interface Project { agents: ProjectAgent[]; } Event Types‚Äã Standard event types across all platforms: export enum EventType { // World events WORLD_JOINED = 'WORLD_JOINED', WORLD_CONNECTED = 'WORLD_CONNECTED', WORLD_LEFT = 'WORLD_LEFT', // Entity events ENTITY_JOINED = 'ENTITY_JOINED', ENTITY_LEFT = 'ENTITY_LEFT', ENTITY_UPDATED = 'ENTITY_UPDATED', // Room events ROOM_JOINED = 'ROOM_JOINED', ROOM_LEFT = 'ROOM_LEFT', // Message events MESSAGE_RECEIVED = 'MESSAGE_RECEIVED', MESSAGE_SENT = 'MESSAGE_SENT', MESSAGE_DELETED = 'MESSAGE_DELETED', // Channel events CHANNEL_CLEARED = 'CHANNEL_CLEARED', // Voice events VOICE_MESSAGE_RECEIVED = 'VOICE_MESSAGE_RECEIVED', VOICE_MESSAGE_SENT = 'VOICE_MESSAGE_SENT', // Interaction events REACTION_RECEIVED = 'REACTION_RECEIVED', POST_GENERATED = 'POST_GENERATED', INTERACTION_RECEIVED = 'INTERACTION_RECEIVED', // Run events RUN_STARTED = 'RUN_STARTED', RUN_ENDED = 'RUN_ENDED', RUN_TIMEOUT = 'RUN_TIMEOUT', // Action events ACTION_STARTED = 'ACTION_STARTED', ACTION_COMPLETED = 'ACTION_COMPLETED', // Evaluator events EVALUATOR_STARTED = 'EVALUATOR_STARTED', EVALUATOR_COMPLETED = 'EVALUATOR_COMPLETED', // Model events MODEL_USED = 'MODEL_USED', } Event Handler Type‚Äã Generic event handler function type: export type EventHandler&lt;T extends keyof EventPayloadMap&gt; = ( payload: EventPayloadMap[T] ) =&gt; Promise&lt;void&gt;; Usage Notes‚Äã Plugin Registration: Plugins are registered with the runtime through the plugins array in ProjectAgent or directly via the runtime's plugin management system. Service Integration: Services are registered using the ServiceType constants and can be accessed via runtime.getService(). Event Handling: Plugin events are automatically registered when the plugin is loaded and are triggered based on the event type. Route Exposure: HTTP routes with public: true are exposed as HTML tabs in the agent interface. Testing: Use the TestSuite structure to organize plugin tests, which can be run via the ElizaOS test runner. This interface provides a comprehensive foundation for creating modular, extensible plugins that integrate seamlessly with the ElizaOS agent runtime.","keywords":"","version":"1.0.17"},{"title":"ElizaOS CLI","type":0,"sectionRef":"#","url":"/docs/cli/overview","content":"ElizaOS CLI The ElizaOS Command Line Interface (CLI) provides a comprehensive set of tools to create, manage, and interact with ElizaOS projects and agents. Installation‚Äã Install the ElizaOS CLI globally using Bun: bun install -g @elizaos/cli Available Commands‚Äã Command\tDescriptioncreate\tInitialize a new project, plugin, or agent monorepo\tClone ElizaOS monorepo from a specific branch (defaults to develop) plugins\tManage ElizaOS plugins agent\tManage ElizaOS agents tee\tManage TEE deployments start\tStart the Eliza agent with configurable plugins and services update\tUpdate ElizaOS CLI and project dependencies test\tRun tests for Eliza agent projects and plugins env\tManage environment variables and secrets dev\tStart the project or plugin in development mode with auto-rebuild, detailed logging, and file change detection publish\tPublish a plugin to the registry Global Options‚Äã These options apply to all commands: Option\tDescription--help, -h\tDisplay help information --version, -v\tDisplay version information Output and Logging‚Äã --no-emoji: Disables emoji characters in the output. This is useful for CI/CD environments or terminals that do not render emojis correctly.--verbose: Enables verbose logging, providing detailed, step-by-step output for debugging purposes.--quiet: Suppresses all non-essential output, showing only critical errors. Configuration‚Äã --config &lt;path&gt;: Specifies a path to a custom configuration file, overriding the default configuration.--no-auto-install: Disables the automatic prompt to install Bun if it is not detected. Examples‚Äã Controlling Output‚Äã # Get verbose output for the start command for debugging elizaos --verbose start # Run tests with clean output for a CI/CD pipeline elizaos --no-emoji --quiet test Using a Custom Configuration‚Äã # Start the agent using a specific configuration file elizaos --config ./path/to/my-config.json start Getting Information‚Äã # Check your CLI version elizaos --version # Get help for the 'agent' command elizaos agent --help # Get help for the 'agent start' subcommand elizaos agent start --help Project Structure‚Äã For detailed information about project and plugin structure, see the Quickstart Guide. Environment Configuration‚Äã Configure your API keys and environment variables with the env command: # Edit local environment variables interactively elizaos env edit-local # List all environment variables elizaos env list # Interactive environment manager elizaos env interactive Development vs Production‚Äã ElizaOS supports two main modes of operation: Development Mode (dev command) Hot reloadingDetailed error messagesFile watchingSee Dev Command for details Production Mode (start command) Optimized performanceProduction-ready configurationSee Start Command for details Quick Start‚Äã For a complete guide to getting started with ElizaOS, see the Quickstart Guide. Creating a new project‚Äã # Create a new project using the interactive wizard elizaos create # Or specify a name directly elizaos create my-agent-project Starting a project‚Äã # Navigate to your project directory cd my-agent-project # Start the project elizaos start Development mode‚Äã # Run in development mode with hot reloading elizaos dev Working with Projects‚Äã ElizaOS organizes work into projects, which can contain one or more agents along with their configurations, knowledge files, and dependencies. The CLI provides commands to manage the entire lifecycle of a project: Create a new project with createConfigure settings with envDevelop using dev for hot reloadingTest functionality with testStart in production with startShare by publishing with publish Working with Plugins‚Äã Plugins extend the functionality of your agents. Use the plugins command for managing plugins and publish for publishing your own: # List available plugins elizaos plugins list # Add a plugin to your project elizaos plugins add @elizaos/plugin-discord # Publish your plugin (from plugin directory) elizaos publish # Test publishing without making changes elizaos publish --test Related Documentation‚Äã Quickstart Guide: Complete workflow guideEnvironment Configuration: Managing environment variables","keywords":"CLI commands installation configuration development production plugins projects","version":"1.0.17"},{"title":"Plugin Command","type":0,"sectionRef":"#","url":"/docs/cli/plugins","content":"Plugin Command Manage ElizaOS plugins. Overview &amp; OptionsExamplesGuides &amp; ConceptsTroubleshooting Usage‚Äã elizaos plugins [options] [command] Subcommands‚Äã Subcommand\tAliases\tDescription\tArguments\tOptionslist\tl, ls\tList available plugins to install into the project (shows v1.x plugins by default) --all (detailed version info), --v0 (v0.x compatible only) add\tinstall\tAdd a plugin to the project\t&lt;plugin&gt; (plugins name e.g., &quot;abc&quot;, &quot;plugin-abc&quot;, &quot;elizaos/plugin-abc&quot;)\t-s, --skip-env-prompt, --skip-verification, -b, --branch, -T, --tag installed-plugins List plugins found in the project dependencies remove\tdelete, del, rm\tRemove a plugins from the project\t&lt;plugin&gt; (plugins name e.g., &quot;abc&quot;, &quot;plugin-abc&quot;, &quot;elizaos/plugin-abc&quot;) upgrade Upgrade a plugin from version 0.x to 1.x using AI-powered migration\t&lt;path&gt; (GitHub repository URL or local folder path)\t--api-key, --skip-tests, --skip-validation generate Generate a new plugin using AI-powered code generation --api-key, --skip-tests, --skip-validation, --skip-prompts, --spec-file","keywords":"plugins extensions packages npm registry installation configuration","version":"1.0.17"},{"title":"Publish Command","type":0,"sectionRef":"#","url":"/docs/cli/publish","content":"Publish Command Publish a plugin to the registry. Overview &amp; OptionsExamplesGuides &amp; ConceptsRequirementsTroubleshooting Usage‚Äã elizaos publish [options] Options‚Äã Option\tDescription--npm\tPublish to npm instead of GitHub -t, --test\tTest publish process without making changes -d, --dry-run\tGenerate registry files locally without publishing --skip-registry\tSkip publishing to the registry","keywords":"CLI publish registry npm GitHub packages distribution","version":"1.0.17"},{"title":"Start Command","type":0,"sectionRef":"#","url":"/docs/cli/start","content":"Start Command Start the Eliza agent with configurable plugins and services. Overview &amp; OptionsExamplesGuides &amp; ConceptsTroubleshooting Usage‚Äã elizaos start [options] Options‚Äã Option\tDescription-c, --configure\tForce reconfiguration of services and AI models (bypasses saved configuration) --character [paths...]\tCharacter file(s) to use - accepts paths or URLs --build\tBuild the project before starting --no-build\tSkip the build step before starting -p, --port &lt;port&gt;\tPort to listen on (default: 3000) --quiet\tSuppress all non-error output to the console Project Detection‚Äã ElizaOS automatically detects the type of directory you're in and adjusts its behavior accordingly: ElizaOS Projects: Loads project configuration and starts defined agentsElizaOS Plugins: Runs in plugin test mode with the default characterOther Directories: Uses the default Eliza character Configuration Management‚Äã Default Configuration‚Äã Uses saved configuration from previous runsLoads environment variables from .env fileApplies project-specific settings Force Reconfiguration‚Äã # Bypass saved configuration and reconfigure all services elizaos start --configure This is useful when: You've changed API keys or service credentialsYou want to select different AI modelsService configurations have changedTroubleshooting configuration issues Environment Variables‚Äã The start command automatically loads environment variables: From .env File‚Äã # ElizaOS looks for .env in the project directory cd my-project elizaos start # Loads from ./my-project/.env Direct Environment Variables‚Äã # Set variables directly OPENAI_API_KEY=your-key elizaos start # Multiple variables OPENAI_API_KEY=key1 DISCORD_TOKEN=token1 elizaos start Error Handling‚Äã Character Loading Errors‚Äã If character files fail to load, ElizaOS will: Log Errors: Display detailed error messages for each failed characterContinue Starting: Use any successfully loaded charactersFallback: Use the default Eliza character if no characters load successfully Service Connection Errors‚Äã Automatic retry for transient connection issuesGraceful degradation when optional services are unavailableError logging with recovery suggestions Port Management‚Äã Default Port‚Äã Default: 3000Automatically detects if port is in useSuggests alternative ports if default is unavailable Custom Port‚Äã # Specify custom port elizaos start --port 8080 # Check if port is available first netstat -an | grep :8080 elizaos start --port 8080 Build Process‚Äã Automatic Building‚Äã # Build before starting (recommended for production) elizaos start --build When to Use --build‚Äã First deployment: Ensure all TypeScript is compiledAfter code changes: Refresh compiled outputProduction deployment: Guarantee latest buildTroubleshooting: Eliminate build-related issues Health Checks‚Äã # Verify service is running curl http://localhost:3000/health # Check process status ps aux | grep elizaos # Monitor logs tail -f elizaos.log Related Commands‚Äã create: Create a new project to startdev: Run in development mode with hot reloadingagent: Manage individual agentsenv: Configure environment variablesstop: Stop running agents","keywords":"start production deployment configuration runtime services agents","version":"1.0.17"},{"title":"Stop Command","type":0,"sectionRef":"#","url":"/docs/cli/stop","content":"Stop Command Stop running ElizaOS agents and free up system resources. Overview‚Äã The stop command allows you to gracefully shutdown running ElizaOS agents and services. This is useful for: Stopping agents during developmentFreeing up system resourcesChanging configurationsRestarting with different settings Usage‚Äã elizaos stop [options] Options‚Äã Option\tDescription--all\tStop all running ElizaOS processes --agent &lt;name&gt;\tStop a specific agent by name --force\tForce stop without graceful shutdown --quiet\tSuppress confirmation messages Examples‚Äã Basic Usage‚Äã # Stop all running agents elizaos stop # Stop with confirmation elizaos stop --all # Stop specific agent elizaos stop --agent my-agent # Force stop all agents elizaos stop --all --force Process Management‚Äã # Check running agents before stopping ps aux | grep elizaos # Stop and verify elizaos stop --all ps aux | grep elizaos # Should show no processes Development Workflow‚Äã # Start agent elizaos start --character my-agent.json # Make changes to configuration # ... # Stop agent elizaos stop --agent my-agent # Restart with new configuration elizaos start --character my-agent.json Graceful Shutdown‚Äã By default, the stop command performs a graceful shutdown: Signal agents: Sends shutdown signal to agentsComplete tasks: Allows current operations to completeSave state: Persists conversation history and stateClose connections: Cleanly disconnects from servicesRelease resources: Frees memory and file handles Force Stop‚Äã Use --force when graceful shutdown fails: # Force stop if agent is unresponsive elizaos stop --force # Force stop specific agent elizaos stop --agent stuck-agent --force Warning: Force stop may result in: Loss of unsaved conversation stateIncomplete operationsConnection cleanup issues Multiple Agents‚Äã When running multiple agents: # List all running agents elizaos agent list # Stop specific agents elizaos stop --agent agent1 elizaos stop --agent agent2 # Stop all at once elizaos stop --all Integration with System Services‚Äã Linux/macOS (systemd)‚Äã # Create service file sudo nano /etc/systemd/system/elizaos.service # Stop via systemd sudo systemctl stop elizaos Process Managers‚Äã # PM2 pm2 stop elizaos # Forever forever stop elizaos # Supervisor supervisorctl stop elizaos Troubleshooting‚Äã Agent Won't Stop‚Äã # Find process ID ps aux | grep elizaos # Manual kill if needed kill -TERM &lt;pid&gt; # Force kill as last resort kill -9 &lt;pid&gt; Port Still in Use‚Äã # Find process using port lsof -i :3000 # Kill process holding port kill -9 $(lsof -ti:3000) Cleanup After Force Stop‚Äã # Remove lock files rm -f ~/.elizaos/*.lock # Clear temp files rm -rf ~/.elizaos/tmp/* # Reset state if needed elizaos env reset Best Practices‚Äã Always try graceful shutdown firstWait for confirmation before force stoppingCheck for running processes after stopClean up resources if force stop was usedDocument any issues for debugging Exit Codes‚Äã Code\tDescription0\tSuccessful shutdown 1\tGeneral error 2\tNo agents running 3\tPartial shutdown (some agents failed) 130\tInterrupted by user (Ctrl+C) Related Commands‚Äã start: Start ElizaOS agentsagent: Manage individual agentsdev: Development mode with auto-restartenv: Environment configuration Notes‚Äã The stop command saves conversation state by defaultAgents can be restarted with the same stateUse --force only when necessaryCheck logs if shutdown fails","keywords":"stop shutdown terminate agent management process control","version":"1.0.17"},{"title":"ElizaOS Tee","type":0,"sectionRef":"#","url":"/docs/cli/tee","content":"ElizaOS Tee The tee command provides access to Trusted Execution Environment (TEE) deployment and management capabilities through integrated vendor CLIs. Overview‚Äã TEE (Trusted Execution Environment) enables secure and verifiable agent operations on blockchain. The tee command currently supports Phala Cloud as a TEE provider, with the potential for additional vendors in the future. Installation‚Äã bun install -g @elizaos/cli Command Structure‚Äã elizaos tee &lt;vendor&gt; [vendor-specific-commands] Available Vendors‚Äã Phala Cloud‚Äã The phala subcommand provides a wrapper for the official Phala Cloud CLI, allowing you to manage TEE deployments on Phala Cloud directly through ElizaOS. elizaos tee phala [phala-cli-commands] The Phala CLI will be automatically downloaded via bunx if not already installed. Usage Examples‚Äã Get Phala CLI Help‚Äã # Display Phala CLI help elizaos tee phala help # Get help for a specific Phala command elizaos tee phala cvms help Authentication‚Äã # Login to Phala Cloud with your API key elizaos tee phala auth login &lt;api-key&gt; # Check authentication status elizaos tee phala auth status Managing CVMs (Confidential Virtual Machines)‚Äã # List all CVMs elizaos tee phala cvms list # Create a new CVM elizaos tee phala cvms create --name my-agent-app --compose ./docker-compose.yml # Get CVM details elizaos tee phala cvms get &lt;cvm-id&gt; # Update a CVM elizaos tee phala cvms update &lt;cvm-id&gt; --compose ./docker-compose.yml # Delete a CVM elizaos tee phala cvms delete &lt;cvm-id&gt; TEE Agent Deployment‚Äã For deploying ElizaOS agents to TEE environments: First, create a TEE-compatible project: elizaos create my-tee-agent --type tee Configure your agent and prepare deployment files Deploy to Phala Cloud: elizaos tee phala cvms create --name my-tee-agent --compose ./docker-compose.yml Configuration‚Äã Prerequisites‚Äã Bun installed (required for automatic Phala CLI installation)Phala Cloud account and API key (for deployment operations)Docker compose file for CVM deployments Environment Variables‚Äã When deploying TEE agents, ensure your environment variables are properly configured: # Set up your Phala API key export PHALA_API_KEY=&quot;your-api-key&quot; # Or add to your .env file echo &quot;PHALA_API_KEY=your-api-key&quot; &gt;&gt; .env Advanced Usage‚Äã Direct Phala CLI Access‚Äã All Phala CLI commands and options are available through the wrapper: # Any Phala CLI command can be used elizaos tee phala [any-phala-command] [options] For the complete list of Phala CLI commands and options, run: elizaos tee phala help Or visit the official Phala CLI documentation: bunx phala help Troubleshooting‚Äã Common Issues‚Äã bunx not found: Install Bun from bun.sh: curl -fsSL https://bun.sh/install | bash Authentication failures: Ensure your API key is valid and you're logged in: elizaos tee phala auth login &lt;api-key&gt; Deployment errors: Check your docker-compose.yml file is valid and all required services are defined Debug Mode‚Äã For detailed output when troubleshooting: # Run with verbose logging LOG_LEVEL=debug elizaos tee phala cvms list Integration with ElizaOS‚Äã TEE deployments enable: Secure key management: Private keys never leave the TEEVerifiable computation: Cryptographic proof of agent behaviorBlockchain integration: Direct onchain operations with attestationPrivacy preservation: Sensitive data processing in secure enclaves Related Documentation‚Äã Creating TEE ProjectsTEE Plugin DocumentationPhala Cloud Documentation Security Considerations‚Äã When deploying agents to TEE: Never commit private keys or sensitive configurationUse environment variables for secretsVerify attestation reports for production deploymentsFollow Phala Cloud security best practices","keywords":"CLI TEE Phala Trusted Execution Environment deployment","version":"1.0.17"},{"title":"Contributing to Eliza","type":0,"sectionRef":"#","url":"/docs/contributing","content":"Contributing to Eliza First off, thank you for considering contributing to elizaOS! We welcome improvements and contributions. Contribution License Agreement‚Äã By contributing to elizaOS, you agree that your contributions will be licensed under the MIT License. This means: You grant us (and everyone else) a perpetual, worldwide, non-exclusive, royalty-free license to use your contributions.Your contributions are and will be available as Free and Open Source Software (FOSS).You have the right to submit the work under this license.You understand that your contributions are public and that a record of the contribution is maintained indefinitely. How to Contribute‚Äã For Developers‚Äã Extend elizaOS's Capabilities Develop new actions, evaluators, and providersImprove existing components and modules Enhance Infrastructure Review open issues and submit PRsTest and update documentationOptimize performanceImprove deployment solutions Fork the repo and create your branch from develop. The name of the branch could start with the issue number and be descriptive of the changes you are making.Example: 9999-add-test-for-bug-123 If you've added code that should be tested, add tests. Ensure the test suite passes. Make sure your code lints. Issue that pull request to the develop branch! Styleguides‚Äã Git Commit Messages‚Äã Use the present tense (&quot;Add feature&quot; not &quot;Added feature&quot;)Use the imperative mood (&quot;Move cursor to...&quot; not &quot;Moves cursor to...&quot;)Limit the first line to 72 characters or lessReference issues and pull requests liberally after the first line JavaScript Styleguide‚Äã All JavaScript must adhere to JavaScript Standard Style. TypeScript Styleguide‚Äã All TypeScript must adhere to TypeScript Standard Style. Documentation Styleguide‚Äã Use Markdown for documentation. Additional Notes‚Äã Pull Request Titles‚Äã This section lists the title prefix we use to help us track and manage pull requests. These prefixes must be lower case fix - Issues that fixes bugs.feat - New feature, updates or improvements.docs - Issues or pull requests related to documentation.chore - General repo maintenance Please place a colon follow by a space (: ) in your PR title Issue Labels‚Äã This section lists the labels we use to help us track and manage issues and pull requests. bug - Issues that are bugs.enhancement - Issues that are feature requests.documentation - Issues or pull requests related to documentation.good first issue - Good for newcomers. Getting Help‚Äã Join Development DiscordJoin DAO DiscordCheck FAQCreate GitHub issues Additional Resources‚Äã API Documentation","keywords":"contributing development pull requests issues documentation style guide","version":"1.0.17"},{"title":"Test Command","type":0,"sectionRef":"#","url":"/docs/cli/test","content":"Test Command Run tests for Eliza agent projects and plugins. Overview &amp; OptionsExamples &amp; Guides Usage‚Äã elizaos test [options] [command] Subcommands‚Äã Subcommand\tDescriptioncomponent\tRun component tests (via Vitest) e2e\tRun end-to-end runtime tests all\tRun both component and e2e tests (default) Options‚Äã Option\tDescription-p, --port &lt;port&gt;\tServer port for e2e tests -n, --name &lt;n&gt;\tFilter tests by name (matches file names or test suite names) --skip-build\tSkip building before running tests --skip-type-check\tSkip TypeScript type checking for faster test runs --watch\tEnable watch mode to re-run tests on file changes --coverage\tGenerate a test coverage report","keywords":"testing component tests e2e tests Vitest test runner development","version":"1.0.17"},{"title":"Update Command","type":0,"sectionRef":"#","url":"/docs/cli/update","content":"Update Command Update ElizaOS CLI and project dependencies. Overview &amp; OptionsExamplesGuides &amp; ConceptsTroubleshooting Usage‚Äã elizaos update [options] Options‚Äã Option\tDescription-c, --check\tCheck for available updates without applying them --skip-build\tSkip building after updating --cli\tUpdate only the global CLI installation (without updating packages) --packages\tUpdate only packages (without updating the CLI) Project Detection‚Äã The update command automatically detects: ElizaOS Projects: Updates project dependencies and rebuildsElizaOS Plugins: Updates plugin dependencies and rebuildsNon-ElizaOS Projects: Shows error message Workspace Support‚Äã Monorepo Detection‚Äã Automatically detects workspace referencesSkips packages with workspace:* versionsShows which packages are workspace-managed Example with Workspaces‚Äã $ elizaos update --check ElizaOS packages found: - @elizaos/core (workspace:*) ‚Üí Skipped (workspace reference) - @elizaos/plugin-openai (1.2.5) ‚Üí 1.4.0 - @elizaos/plugin-discord (workspace:*) ‚Üí Skipped (workspace reference) Only non-workspace packages will be updated. Version Strategy‚Äã Staying Current‚Äã Update regularly to get latest features and fixesUse --check to monitor available updatesSubscribe to ElizaOS release notes Stability Considerations‚Äã Test updates in development before productionConsider pinning versions for production deploymentsReview changelogs for breaking changes Related Commands‚Äã create: Create new projects with latest versionsstart: Start your updated projectdev: Run in development mode after updatestest: Test your project after updates","keywords":"CLI update dependencies versions packages maintenance","version":"1.0.17"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/docs/changelog","content":"Changelog v0.25.9 (March 02, 2025)‚Äã v0.25.9 Release Notes‚Äã Breaking Changes‚Äã Twitter/X integration undergoing maintenance Features‚Äã CLI install improvements #3697Checking the plugin is installed and display the result #3660Add post-processing support for character loading #3686Submit update env for plugin viction #3701ANTHROPIC_API_URL env #3711 Fixes‚Äã Fix Out Of Memory bug introduced in 0.25.8 #3722Fix splitText #3653Add database adapter and plugin adapter types to core types #3640Fix CLI install #3673CLI - escape paths with spaces correctly #3699CLI handle plugin dependencies / trusdb #3737Handle short text items in knowledge processing #3652Character knowledge add directory #3678Grammar fix &amp; createVerifiableLogApiRouter guard #3707 What's Changed‚Äã docs: Fix plugins.md formatting by @Doge-is-Dope in https://github.com/elizaOS/eliza/pull/3649fix: Add database adapter and plugin adapter types to core types by @Luks3110 in https://github.com/elizaOS/eliza/pull/3640fix: Handle short text items in knowledge processing by @boolkeys in https://github.com/elizaOS/eliza/pull/3652docs: Update README_KOR.md by @cryptokatze in https://github.com/elizaOS/eliza/pull/3670feat: checking the plugin is installed and display the result by @v1xingyue in https://github.com/elizaOS/eliza/pull/3660Fix Typographical Errors in Documentation by @leopardracer in https://github.com/elizaOS/eliza/pull/3656fix: fix CLI install by @odilitime in https://github.com/elizaOS/eliza/pull/3673chore: Update docs, adds changelog notes, merges pages, cleanup by @madjin in https://github.com/elizaOS/eliza/pull/3694fix: character knowledge add directory by @hkhangus in https://github.com/elizaOS/eliza/pull/3678feat: Add post-processing support for character loading by @btspoony in https://github.com/elizaOS/eliza/pull/3686docs: fix broken links in README by @Dahka2321 in https://github.com/elizaOS/eliza/pull/3684feat: CLI install improvements by @odilitime in https://github.com/elizaOS/eliza/pull/3697feat: better plugin loading error handling / json5 support for character file by @odilitime in https://github.com/elizaOS/eliza/pull/3698fix: CLI - escape paths with spaces correctly by @odilitime in https://github.com/elizaOS/eliza/pull/3699feat: submit update env for plugin viction by @khiemsoft in https://github.com/elizaOS/eliza/pull/3701feat: ANTHROPIC_API_URL env. by @ChristopherTrimboli in https://github.com/elizaOS/eliza/pull/3711chore: security NPM updates / bump turbo by @odilitime in https://github.com/elizaOS/eliza/pull/3700fix: clean up bun clean output and make bun dev faster on faster CPUs by @odilitime in https://github.com/elizaOS/eliza/pull/3714chore: format pass by @odilitime in https://github.com/elizaOS/eliza/pull/3715chore: tests favor local paths for consistency / adjust deps by @odilitime in https://github.com/elizaOS/eliza/pull/3716fix: fix 0.25.8 oom bug by @v1xingyue in https://github.com/elizaOS/eliza/pull/3722chore: Update docs, add blog + showcase + changelog + RSS by @madjin in https://github.com/elizaOS/eliza/pull/3729fix: Grammar fix &amp; createVerifiableLogApiRouter guard by @Hopium21 in https://github.com/elizaOS/eliza/pull/3707fix: Fix splitText by @batudo in https://github.com/elizaOS/eliza/pull/3653docs: update readme.md for the custom plugins how-to by @Xayaan in https://github.com/elizaOS/eliza/pull/3736fix: CLI handle plugin dependencies / trusdb #3737chore: bump ver to 0.25.9 by @odilitime in https://github.com/elizaOS/eliza/pull/3738chore: dev =&gt; main (rel 0.25.9 prep) by @odilitime in https://github.com/elizaOS/eliza/pull/3739 New Contributors‚Äã View New Contributors @Doge-is-Dope made their first contribution in https://github.com/elizaOS/eliza/pull/3649@Luks3110 made their first contribution in https://github.com/elizaOS/eliza/pull/3640@boolkeys made their first contribution in https://github.com/elizaOS/eliza/pull/3652@cryptokatze made their first contribution in https://github.com/elizaOS/eliza/pull/3670@hkhangus made their first contribution in https://github.com/elizaOS/eliza/pull/3678@khiemsoft made their first contribution in https://github.com/elizaOS/eliza/pull/3701 Full Changelog: https://github.com/elizaOS/eliza/compare/v0.25.8...v0.25.9‚Äã v0.25.8 (February 24, 2025)‚Äã Major changes since v0.25.6-alpha.1‚Äã Features‚Äã Dynamic plugin loading (move all plugins out) https://github.com/elizaOS/eliza/pull/3339plugin CLI list/installer utility https://github.com/elizaOS/eliza/pull/3429Enable fetching relevant facts in the facts provider https://github.com/elizaOS/eliza/pull/2635Gaianet support set API key https://github.com/elizaOS/eliza/pull/3591Add NEAR AI model provider https://github.com/elizaOS/eliza/pull/3275Support for Secret AI LLM https://github.com/elizaOS/eliza/pull/3615Added cachedir to filesystem cache https://github.com/elizaOS/eliza/pull/3291Configuration: set Lava as the default RPC URL for NEAR and Starknet https://github.com/elizaOS/eliza/pull/3323Modify the configuration for the plugin-nkn https://github.com/elizaOS/eliza/pull/3570 Fixes‚Äã https://github.com/advisories/GHSA-584q-6j8j-r5pm https://github.com/elizaOS/eliza/pull/2958Fix default character https://github.com/elizaOS/eliza/pull/3345Fix set agent from API https://github.com/elizaOS/eliza/pull/3618Store stringKnowledge in knowledge when ragKnowledge is enabled (https://github.com/elizaOS/eliza/issues/3434) https://github.com/elizaOS/eliza/pull/3435Update chunk &amp; overlap in rag function https://github.com/elizaOS/eliza/pull/2525Fix bedrock inference https://github.com/elizaOS/eliza/pull/3553Generate structured objects and images with NEAR AI https://github.com/elizaOS/eliza/pull/3644Exporting structured objects and images with NEAR AI https://github.com/elizaOS/eliza/pull/3644 What's Changed since last release‚Äã fix: typos in multiple files by @vipocenka in https://github.com/elizaOS/eliza/pull/3111feat: save imageUrls for outbound tweets/messages by @alexpaden in https://github.com/elizaOS/eliza/pull/3122fix: upgrade openai and vercel ai packages to fix o1 errors by @HashWarlock in https://github.com/elizaOS/eliza/pull/3146fix: multi-biome-01 by @AIFlowML in https://github.com/elizaOS/eliza/pull/3180fix: plugin-0g by @AIFlowML in https://github.com/elizaOS/eliza/pull/3179fix: multi-biome-02 by @AIFlowML in https://github.com/elizaOS/eliza/pull/3181fix: plugin-0x by @AIFlowML in https://github.com/elizaOS/eliza/pull/3178fix: plugin-3g-generation by @AIFlowML in https://github.com/elizaOS/eliza/pull/3175fix: plugin-abstract by @AIFlowML in https://github.com/elizaOS/eliza/pull/3174fix: plugin-agentkit by @AIFlowML in https://github.com/elizaOS/eliza/pull/3172fix: plugin-akash by @AIFlowML in https://github.com/elizaOS/eliza/pull/3171fix: plugin-allora by @AIFlowML in https://github.com/elizaOS/eliza/pull/3169docs: fix typos in .md by @comfsrt in https://github.com/elizaOS/eliza/pull/3165feat (chore): plugin-coinmarketcap by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/3134feat (chore): plugin-coingecko test config and coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/3124fix: remove duplicated plugins by @tcm390 in https://github.com/elizaOS/eliza/pull/3126fix: update provider-utils by @tcm390 in https://github.com/elizaOS/eliza/pull/3189fix: extract attribute from raw text instead of normalized json by @tcm390 in https://github.com/elizaOS/eliza/pull/3190feat: coingecko advanced - various pools by network by @0xCardinalError in https://github.com/elizaOS/eliza/pull/3170feat: Add edwin plugin to eliza by @galmw in https://github.com/elizaOS/eliza/pull/3045feat: plugin desk exchange by @john-xina-p88 in https://github.com/elizaOS/eliza/pull/3096docs: Update Twitter to X (Twitter) by @nilaysarma in https://github.com/elizaOS/eliza/pull/3198chore: add Biome configuration to Solana ecosystem plugins 07 by @AIFlowML in https://github.com/elizaOS/eliza/pull/3186fix: plugin-anyone by @AIFlowML in https://github.com/elizaOS/eliza/pull/3107docs: Update faq.md by @Danyylka in https://github.com/elizaOS/eliza/pull/3207chore: Fix Typos and Improve Consistency in Community Chat Logs by @gap-editor in https://github.com/elizaOS/eliza/pull/3206docs: Add weekly contributor meeting notes by @YoungPhlo in https://github.com/elizaOS/eliza/pull/3204fix: think tag from venice by @rferrari in https://github.com/elizaOS/eliza/pull/3203fix: Slack download upload attachments by @maxime in https://github.com/elizaOS/eliza/pull/3194chore: Update GitHub Actions workflows and documentation by @PixelPil0t1 in https://github.com/elizaOS/eliza/pull/3166chore: Standardization of Security Check Identifiers across GoPlus plugin by @Marcofann in https://github.com/elizaOS/eliza/pull/3164fix: Update bun version during Docker build by @v1xingyue in https://github.com/elizaOS/eliza/pull/3158Fix README_JA.md (add unwritten text and fix typo) by @You-saku in https://github.com/elizaOS/eliza/pull/3153chore: some fix after v0.1.9 by @v1xingyue in https://github.com/elizaOS/eliza/pull/3141feat: Trump character but tweets in Spanish by default by @silasneo in https://github.com/elizaOS/eliza/pull/3119feat: TON Plugin: NFT collection, item creation, metadata change and transfer actions by @mikirov in https://github.com/elizaOS/eliza/pull/3211docs: rename chat_2024-11-17.md by @Fallengirl in https://github.com/elizaOS/eliza/pull/3210feat: Add CREATE_POOL action in MultiversX plugin by @elpulpo0 in https://github.com/elizaOS/eliza/pull/3209fix: remove duplicated dependencies by @tcm390 in https://github.com/elizaOS/eliza/pull/3215fix: quick-intel plugin optimizations &amp; fixes. by @azep-ninja in https://github.com/elizaOS/eliza/pull/3208feat: Add configuration for enabling/disabling Twitter post generation by @tcm390 in https://github.com/elizaOS/eliza/pull/3219feat (chore): plugin-cronos test setup and coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/3250feat (chore) plugin conflux: test config and coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/3247fix: broken links in documentation by @cypherpepe in https://github.com/elizaOS/eliza/pull/3240chore: remove unnecessary provider and transfer code by @madschristensen99 in https://github.com/elizaOS/eliza/pull/3251fix: client-alexa by @AIFlowML in https://github.com/elizaOS/eliza/pull/3255fix(deps): update dependency vitest [security] by @renovate in https://github.com/elizaOS/eliza/pull/3254fix: bun install by @tcm390 in https://github.com/elizaOS/eliza/pull/3261fix: Dynamic require of &quot;http&quot; is not supported error by @tcm390 in https://github.com/elizaOS/eliza/pull/3262chore: develop =&gt; main by @odilitime in https://github.com/elizaOS/eliza/pull/3216Fix broken links on contributing.md by @johntad110 in https://github.com/elizaOS/eliza/pull/3269docs: Add GitHub issues link to CONTRIBUTING.md file by @nilaysarma in https://github.com/elizaOS/eliza/pull/3268Fix PG query: Use only 'text' subfield name, field name is not needed here by @esen in https://github.com/elizaOS/eliza/pull/3264fix: handle invalid json by @tcm390 in https://github.com/elizaOS/eliza/pull/3258docs: fix typos and update broken link in docs by @rebustron in https://github.com/elizaOS/eliza/pull/3270chore: fix spelling issues by @XxAlex74xX in https://github.com/elizaOS/eliza/pull/3271fix: DenyLoginSubtask by @tcm390 in https://github.com/elizaOS/eliza/pull/3278fix: twitter - add actions suppress action ability. by @azep-ninja in https://github.com/elizaOS/eliza/pull/3286fix: rag optimizations/fixes for context. by @azep-ninja in https://github.com/elizaOS/eliza/pull/3248fix: quick-intel plugin: optimize template/add suppress init msg by @azep-ninja in https://github.com/elizaOS/eliza/pull/3283fix: discord - add actions suppress action ability. by @azep-ninja in https://github.com/elizaOS/eliza/pull/3284fix: telegram- add actions suppress action ability. by @azep-ninja in https://github.com/elizaOS/eliza/pull/3285feat: (plugin-multiversx) Allow the use of herotag by @elpulpo0 in https://github.com/elizaOS/eliza/pull/3238fix: fix docker &amp; types issue by @odilitime in https://github.com/elizaOS/eliza/pull/3220fix(core): improve OpenAI-like provider endpoint resolution in generation.ts by @btspoony in https://github.com/elizaOS/eliza/pull/3281chore: bump version to 0.25.6-alpha.1 by @odilitime in https://github.com/elizaOS/eliza/pull/3306chore: develop =&gt; main by @tcm390 in https://github.com/elizaOS/eliza/pull/3307fix: clean json before normalized by @tcm390 in https://github.com/elizaOS/eliza/pull/3301fix: Fix plugin-solana-v2 package.json by @oxy-Op in https://github.com/elizaOS/eliza/pull/3308fix: parsing unit test failure by @tcm390 in https://github.com/elizaOS/eliza/pull/3311fix: models unit test by @tcm390 in https://github.com/elizaOS/eliza/pull/3312fix: read modelConfig from character file by @TbLtzk in https://github.com/elizaOS/eliza/pull/3313docs: fix typos and update functions by @Bilogweb3 in https://github.com/elizaOS/eliza/pull/3317fix: handleGoogle(options) lost apiKey by @abcfy2 in https://github.com/elizaOS/eliza/pull/3274feat: allow plugins to interact w messangerManager to post on telegram by @kesar in https://github.com/elizaOS/eliza/pull/3314chore: add missing version property to package.json by @shakkernerd in https://github.com/elizaOS/eliza/pull/3325chore: remove remnant files/folders by @shakkernerd in https://github.com/elizaOS/eliza/pull/3326docs: fix typos in plugins.md by @aso20455 in https://github.com/elizaOS/eliza/pull/3324feat: set package publish access to public by @shakkernerd in https://github.com/elizaOS/eliza/pull/3330fix: Twitter logging bug by @vidvidvid in https://github.com/elizaOS/eliza/pull/3327chore: develop =&gt; main by @shakkernerd in https://github.com/elizaOS/eliza/pull/3332feat: Dynamic Plugin Loading (merged_) by @lalalune in https://github.com/elizaOS/eliza/pull/3339chore: move default character to agent by @lalalune in https://github.com/elizaOS/eliza/pull/3343Delete all plugins by @lalalune in https://github.com/elizaOS/eliza/pull/3342feat: remove verifiable inference concept, will be plugin loaded by @lalalune in https://github.com/elizaOS/eliza/pull/3344fix: fix default character by @lalalune in https://github.com/elizaOS/eliza/pull/3345chore: Remove plugin imports from agent by @avaer in https://github.com/elizaOS/eliza/pull/3346chore: Add adapter-sqlite to deps by @avaer in https://github.com/elizaOS/eliza/pull/3357feat: v1 CLI utility by @odilitime in https://github.com/elizaOS/eliza/pull/3429chore: commit d.a.t.a env configurations by @PisK4 in https://github.com/elizaOS/eliza/pull/3457docs: Update readme to clarify difference between eliza-starter and eliza repos by @altcoinalpinist in https://github.com/elizaOS/eliza/pull/3453docs: add note about 0x prefix needed for evm private key by @Bleyle823 in https://github.com/elizaOS/eliza/pull/3414chore: client/FAQ/Character file Docs update by @madjin in https://github.com/elizaOS/eliza/pull/3410chore: update change log by @threewebcode in https://github.com/elizaOS/eliza/pull/3407fix: Store stringKnowledge in knowledge when ragKnowledge is enabled (#3434) by @lincheoll in https://github.com/elizaOS/eliza/pull/3435docs: fix incorrect image paths in Korean documentation by @gkfyr in https://github.com/elizaOS/eliza/pull/3489docs: New remote deployment guide by @bealers in https://github.com/elizaOS/eliza/pull/3501chore: adding compass plugin env vars by @royalnine in https://github.com/elizaOS/eliza/pull/3494docs: Add weekly contributor meeting notes (2025-02-04 + 2025-02-11) by @YoungPhlo in https://github.com/elizaOS/eliza/pull/3484fix: remove --no-frozen-lockfile from Dockerfile by @kyle-veniceai in https://github.com/elizaOS/eliza/pull/3428chore: move characters out to submodule by @odilitime in https://github.com/elizaOS/eliza/pull/3509fix: refactor string literal http://localhost with SERVER_URL env var in client by @tenthirtyone in https://github.com/elizaOS/eliza/pull/3511docs: Added a Proper Ukrainian README Translation Create README_UA.md by @mdqst in https://github.com/elizaOS/eliza/pull/3483feat: Added cachedir to filesystem cache by @Swader in https://github.com/elizaOS/eliza/pull/3291fix: CVE-2024-48930 by @anupamme in https://github.com/elizaOS/eliza/pull/2958chore: bump version &amp; lockfile by @odilitime in https://github.com/elizaOS/eliza/pull/3523fix: Fix bedrock inference by @ebaizel in https://github.com/elizaOS/eliza/pull/3553docs: Added sqlite3 errors to Quickstart by @GabrielCartier in https://github.com/elizaOS/eliza/pull/3539docs: fix branch naming example in CONTRIBUTING.md by @mdqst in https://github.com/elizaOS/eliza/pull/3532chore: Trim block from Ollama response by @amirkhonov in https://github.com/elizaOS/eliza/pull/3545chore: Update and cleanup docs by @madjin in https://github.com/elizaOS/eliza/pull/3584feat: Modify the configuration for the plugin-nkn by @iheron in https://github.com/elizaOS/eliza/pull/3570docs: enhance README with detailed requirements and contribution guidelines by @avorylli in https://github.com/elizaOS/eliza/pull/3392docs: Fix broken links by @sukrucildirr in https://github.com/elizaOS/eliza/pull/3599feat: gaianet support set api key by @L-jasmine in https://github.com/elizaOS/eliza/pull/3591feat: allow eliza client to configure eliza server base URL via env var by @bguiz in https://github.com/elizaOS/eliza/pull/3589chore: docs update by @madjin in https://github.com/elizaOS/eliza/pull/3605fix: installing packages from new registry by @daniel-trevino in https://github.com/elizaOS/eliza/pull/3609fix: importing plugins from registry by @royalnine in https://github.com/elizaOS/eliza/pull/3611fix: set agent from api by @daniel-trevino in https://github.com/elizaOS/eliza/pull/3618fix: Fix devcontainer.json Port Mapping Syntax and JSON Structure by @NeoByteXx in https://github.com/elizaOS/eliza/pull/3616fix: update chunk &amp; Overlap in rag function by @adventuresinai in https://github.com/elizaOS/eliza/pull/2525feat: Showcase page in docs for plugins by @madjin in https://github.com/elizaOS/eliza/pull/3620feat: add NEAR AI model provider by @think-in-universe in https://github.com/elizaOS/eliza/pull/3275chore(deps): update dependency vitest [security] by @renovate in https://github.com/elizaOS/eliza/pull/3525feat: configuration: Set Lava as the default RPC URL for NEAR and Starknet by @nimrod-teich in https://github.com/elizaOS/eliza/pull/3323feat: Add support for Secret AI LLM by @iKapitonau in https://github.com/elizaOS/eliza/pull/3615chore: Bump version to 0.25.8 by @odilitime in https://github.com/elizaOS/eliza/pull/3632chore: fix lockfile by @odilitime in https://github.com/elizaOS/eliza/pull/3633update discord link by @odilitime in https://github.com/elizaOS/eliza/pull/3643feat: Enable fetching relevant facts in the facts provider. by @LinuxIsCool in https://github.com/elizaOS/eliza/pull/2635chore: turbo optimizations by @ryptotalent in https://github.com/elizaOS/eliza/pull/2503feat: replace AgentRuntime to his interface to extend client by @kesar in https://github.com/elizaOS/eliza/pull/2388chore: remove langchain dependency for text splitting by @Deeptanshu-sankhwar in https://github.com/elizaOS/eliza/pull/3642fix: generate structured objects and images with NEAR AI by @think-in-universe in https://github.com/elizaOS/eliza/pull/3644chore: stablize develop by @odilitime in https://github.com/elizaOS/eliza/pull/3645chore: develop =&gt; main (0.25.8 release) by @odilitime in https://github.com/elizaOS/eliza/pull/3522 New Contributors‚Äã View New Contributors @vipocenka made their first contribution in https://github.com/elizaOS/eliza/pull/3111@alexpaden made their first contribution in https://github.com/elizaOS/eliza/pull/3122@comfsrt made their first contribution in https://github.com/elizaOS/eliza/pull/3165@galmw made their first contribution in https://github.com/elizaOS/eliza/pull/3045@john-xina-p88 made their first contribution in https://github.com/elizaOS/eliza/pull/3096@nilaysarma made their first contribution in https://github.com/elizaOS/eliza/pull/3198@Danyylka made their first contribution in https://github.com/elizaOS/eliza/pull/3207@gap-editor made their first contribution in https://github.com/elizaOS/eliza/pull/3206@PixelPil0t1 made their first contribution in https://github.com/elizaOS/eliza/pull/3166@Marcofann made their first contribution in https://github.com/elizaOS/eliza/pull/3164@You-saku made their first contribution in https://github.com/elizaOS/eliza/pull/3153@silasneo made their first contribution in https://github.com/elizaOS/eliza/pull/3119@mikirov made their first contribution in https://github.com/elizaOS/eliza/pull/3211@Fallengirl made their first contribution in https://github.com/elizaOS/eliza/pull/3210@cypherpepe made their first contribution in https://github.com/elizaOS/eliza/pull/3240@johntad110 made their first contribution in https://github.com/elizaOS/eliza/pull/3269@esen made their first contribution in https://github.com/elizaOS/eliza/pull/3264@rebustron made their first contribution in https://github.com/elizaOS/eliza/pull/3270@XxAlex74xX made their first contribution in https://github.com/elizaOS/eliza/pull/3271@oxy-Op made their first contribution in https://github.com/elizaOS/eliza/pull/3308@TbLtzk made their first contribution in https://github.com/elizaOS/eliza/pull/3313@Bilogweb3 made their first contribution in https://github.com/elizaOS/eliza/pull/3317@abcfy2 made their first contribution in https://github.com/elizaOS/eliza/pull/3274@aso20455 made their first contribution in https://github.com/elizaOS/eliza/pull/3324@vidvidvid made their first contribution in https://github.com/elizaOS/eliza/pull/3327@PisK4 made their first contribution in https://github.com/elizaOS/eliza/pull/3457@altcoinalpinist made their first contribution in https://github.com/elizaOS/eliza/pull/3453@Bleyle823 made their first contribution in https://github.com/elizaOS/eliza/pull/3414@gkfyr made their first contribution in https://github.com/elizaOS/eliza/pull/3489@royalnine made their first contribution in https://github.com/elizaOS/eliza/pull/3494@kyle-veniceai made their first contribution in https://github.com/elizaOS/eliza/pull/3428@tenthirtyone made their first contribution in https://github.com/elizaOS/eliza/pull/3511@Swader made their first contribution in https://github.com/elizaOS/eliza/pull/3291@anupamme made their first contribution in https://github.com/elizaOS/eliza/pull/2958@GabrielCartier made their first contribution in https://github.com/elizaOS/eliza/pull/3539@iheron made their first contribution in https://github.com/elizaOS/eliza/pull/3570@avorylli made their first contribution in https://github.com/elizaOS/eliza/pull/3392@bguiz made their first contribution in https://github.com/elizaOS/eliza/pull/3589@daniel-trevino made their first contribution in https://github.com/elizaOS/eliza/pull/3609@NeoByteXx made their first contribution in https://github.com/elizaOS/eliza/pull/3616@adventuresinai made their first contribution in https://github.com/elizaOS/eliza/pull/2525@think-in-universe made their first contribution in https://github.com/elizaOS/eliza/pull/3275@nimrod-teich made their first contribution in https://github.com/elizaOS/eliza/pull/3323@iKapitonau made their first contribution in https://github.com/elizaOS/eliza/pull/3615@ryptotalent made their first contribution in https://github.com/elizaOS/eliza/pull/2503@Deeptanshu-sankhwar made their first contribution in https://github.com/elizaOS/eliza/pull/3642 Full Changelog: https://github.com/elizaOS/eliza/compare/v0.1.9...v0.25.8‚Äã v0.1.9 (February 01, 2025)‚Äã üöÄ Features‚Äã Instagram client #1964Client for Telegram account #2839XMTP Client #2786Twitter post media #2818Discord autonomous agent enhancement #2335Telegram autonomous agent enhancement #2338Direct Client API - Add Delete Agent functionality #2267Add an example service #2249 AI &amp; LLM Integrations Add support for NVIDIA inference for ElizaOS #2512Integrate Livepeer LLM provider #2154Add Amazon Bedrock as LLM provider #2769Add birdeye plugin #1417 Solana-Related Updates Solana plugin improvement for flawless transfers #2340Add features to the Solana Agent Kit #2458Adding tests for plugin-solana #2345 Ethereum &amp; EVM-Based Plugin Updates Plugin evm oz governance #1710Add plugin-ethstorage #2737Add cross chain swaps through Squid Router #1482Add support for gravity chain in EVM plugin #2228Add Cronos Evm #2585Add plugin-bnb to support BNB chain #2278Plugin for OriginTrail Decentralized Knowledge Graph #2380Add moralis plugin #2764 Sui-Related Updates Use Aggregator swap sui tokens #3012Sui supports the secp256k1/secp256r1 algorithms #2476 Cosmos-Related Updates IBC transfer on cosmos blockchains #2358Cosmos Plugin - IBC swap action #2554 Injective &amp; Other Blockchain Plugins injective plugin #1764Support mina blockchain #2702Add AGW support to the Abstract plugin #2207CoinGecko - add price per address functionality #2262Add Dex Screener plugin with token price action, evaluators #1865Dexscreener trending #2325 Bug Fixes‚Äã High Priority (Critical Bugs &amp; API Issues) DeepSeek API bug: missing API key setting #2186 sidebar_position: 5 title: Changelog description: Complete history of ElizaOS releases, updates, and changes keywords: [changelog, releases, updates, versions, features, fixes, improvements, breaking changes, v1, v2] image: /img/eliza_banner.jpg‚Äã Changelog v0.1.7 (March 27, 2025)‚Äã Click to expand What's Changed‚Äã feat: add support for Grok models by @shaw in #4128fix: improve error handling in plugin-browser by @jin in #4129fix: wallet tests in plugin-evm by @0xPrismatic in #4130feat: add custom embedding model support by @harveyjavier in #4140chore: update plugin publishing workflow by @tamagogogo_ in #4132chore: update .env.example for Raiinmaker plugin by @aiqubit in #4136 Full Changelog: https://github.com/elizaOS/eliza/compare/v0.1.6...v0.1.7‚Äã // ... rest of existing code ... docs: Update client-telegram README.md by @actuallyrizzn in https://github.com/elizaOS/eliza/pull/2814docs: update embedding function by @rubinovitz in https://github.com/elizaOS/eliza/pull/2821feat: twitter post media by @tcm390 in https://github.com/elizaOS/eliza/pull/2818fix: plugin-tts by @AIFlowML in https://github.com/elizaOS/eliza/pull/2829fix: plugin-twitter by @AIFlowML in https://github.com/elizaOS/eliza/pull/2827fix: plugin-udio by @AIFlowML in https://github.com/elizaOS/eliza/pull/2824fix: plugin-video-generation Fixed multiple non criticla issues. by @AIFlowML in https://github.com/elizaOS/eliza/pull/2823fix: plugin-zerion by @AIFlowML in https://github.com/elizaOS/eliza/pull/2822feat(new-plugin): create gelato plugin relay by @anirudhmakhana in https://github.com/elizaOS/eliza/pull/2799fix: still run Farcaster client loop if error by @rubinovitz in https://github.com/elizaOS/eliza/pull/2830feat: add new readmes, move some others for consistency by @madjin in https://github.com/elizaOS/eliza/pull/2828btcfun Plugin for Eliza by @Nevermore-Ray in https://github.com/elizaOS/eliza/pull/2797feat: XMTP Client by @humanagent in https://github.com/elizaOS/eliza/pull/2786feat(new-plugin): trikon plugin for eliza by @AmriteshTrikon in https://github.com/elizaOS/eliza/pull/2653chore(update-plugin-initialization): btcfun &amp; trikon plugin by @Nevermore-Ray in https://github.com/elizaOS/eliza/pull/2643fix: plugin-thirdweb by @AIFlowML in https://github.com/elizaOS/eliza/pull/2833fix(deps): update dependency cookie to v0.7.0 [security] by @renovate in https://github.com/elizaOS/eliza/pull/2834fix: plugin-ton by @AIFlowML in https://github.com/elizaOS/eliza/pull/2832fix: plugin-tee-marlin by @AIFlowML in https://github.com/elizaOS/eliza/pull/2837fix: plugin-tee-veriafiable-log by @AIFlowML in https://github.com/elizaOS/eliza/pull/2836fix: akash splash bis by @AIFlowML in https://github.com/elizaOS/eliza/pull/2838fix: plugin-story by @AIFlowML in https://github.com/elizaOS/eliza/pull/2844fix: plugin-sui by @AIFlowML in https://github.com/elizaOS/eliza/pull/2843fix: plugin-suno by @AIFlowML in https://github.com/elizaOS/eliza/pull/2840fix(deps): update bs58 version to resolve integration test dependency issues by @devin-ai-integration in https://github.com/elizaOS/eliza/pull/2848feat(new-plugin): A plugin for the Zilliqa blockchain by @rrw-zilliqa in https://github.com/elizaOS/eliza/pull/2842refactor: simplify and fix exports in Imgflip meme generation plugin. by @krustevalexander in https://github.com/elizaOS/eliza/pull/2846feat: client for Telegram account by @tgaru in https://github.com/elizaOS/eliza/pull/2839chore(add-tests): plugin 3d generation: test config and test coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2850chore(add-tests): plugin anyone: test config and test coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2854feat(new-plugin): support apro plugin by @fifahuihua in https://github.com/elizaOS/eliza/pull/2794feat(new-plugin): add arbitrage plugin with example character by @mmarfinetz in https://github.com/elizaOS/eliza/pull/2784feat(new-plugin): deva client integration by @stopmalone in https://github.com/elizaOS/eliza/pull/1238fix: single quote handle bug at parseJsonArray by @JhChoy in https://github.com/elizaOS/eliza/pull/2802fix: fix merge conflict by @tcm390 in https://github.com/elizaOS/eliza/pull/2873fix: null check by @tcm390 in https://github.com/elizaOS/eliza/pull/2878fix: default character openai =&gt; llamalocal by @odilitime in https://github.com/elizaOS/eliza/pull/2880fix: LOG_JSON_FORMAT env var setting by @odilitime in https://github.com/elizaOS/eliza/pull/2881fix: fix abstract package.json by @odilitime in https://github.com/elizaOS/eliza/pull/2882chore: bump version to 0.1.9 by @odilitime in https://github.com/elizaOS/eliza/pull/2883fix: client server port by @tcm390 in https://github.com/elizaOS/eliza/pull/2886Add more data when scrapping tweets by @viv-cheung in https://github.com/elizaOS/eliza/pull/2644Update bun to v9.15.0 [SECURITY] by @renovate in https://github.com/elizaOS/eliza/pull/2888Update dependency systeminformation to v5.23.8 [SECURITY] by @renovate in https://github.com/elizaOS/eliza/pull/2887fet: use axios to fetch price and support two types private key by @v1xingyue in https://github.com/elizaOS/eliza/pull/2879fix: plugin-omniflix by @AIFlowML in https://github.com/elizaOS/eliza/pull/2902fix: plugin-open-weather by @AIFlowML in https://github.com/elizaOS/eliza/pull/2899fix: plugin-opacity by @AIFlowML in https://github.com/elizaOS/eliza/pull/2900fix: plugin-openai by @AIFlowML in https://github.com/elizaOS/eliza/pull/2898fix(patch): bun/@solana-developers to fix @coral-xyz 'BN' export by @wtfsayo in https://github.com/elizaOS/eliza/pull/2901fix: plugin-primus by @AIFlowML in https://github.com/elizaOS/eliza/pull/2893fix: plugin-quai by @AIFlowML in https://github.com/elizaOS/eliza/pull/2892fix: plugin-quick-intel by @AIFlowML in https://github.com/elizaOS/eliza/pull/2890fix: plugin-sei by @AIFlowML in https://github.com/elizaOS/eliza/pull/2877fix: plugin-sgx by @AIFlowML in https://github.com/elizaOS/eliza/pull/2872fix: plugin-starknet by @AIFlowML in https://github.com/elizaOS/eliza/pull/2866fix: plugin-spheron by @AIFlowML in https://github.com/elizaOS/eliza/pull/2870fix: plugin-squid-router by @AIFlowML in https://github.com/elizaOS/eliza/pull/2868Update LICENSE by @maximevtush in https://github.com/elizaOS/eliza/pull/2903fix: plugin-arbitrage by @AIFlowML in https://github.com/elizaOS/eliza/pull/2905chore: fix spell errors by @Pricstas in https://github.com/elizaOS/eliza/pull/2909feat(arbitrage): improve gas price optimization and volume calculation by @mmarfinetz in https://github.com/elizaOS/eliza/pull/2869chore(add-tests): plugin-asterai -&gt; test coverage and config by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2860ci: changes to allow package scoping to public by @shakkernerd in https://github.com/elizaOS/eliza/pull/2928fix: missing version prop in package.json by @shakkernerd in https://github.com/elizaOS/eliza/pull/2929fix: invalid npm package naming convention by @shakkernerd in https://github.com/elizaOS/eliza/pull/2930chore: inconsistent folder naming conventipn by @shakkernerd in https://github.com/elizaOS/eliza/pull/2931feat: add public access to packages. by @shakkernerd in https://github.com/elizaOS/eliza/pull/2933fix template typos by @michavie in https://github.com/elizaOS/eliza/pull/2932feat: new model provider for LM Studio by @eric2hen in https://github.com/elizaOS/eliza/pull/2913fix: plugin-nft-generation by @AIFlowML in https://github.com/elizaOS/eliza/pull/2934fix: building error by @tcm390 in https://github.com/elizaOS/eliza/pull/2938fix: plugin-news by @AIFlowML in https://github.com/elizaOS/eliza/pull/2940fix: plugin-nft-collection by @AIFlowML in https://github.com/elizaOS/eliza/pull/2937fix: plugin-near by @AIFlowML in https://github.com/elizaOS/eliza/pull/2941fix: plugin-movement by @AIFlowML in https://github.com/elizaOS/eliza/pull/2943fix: plugin-multiversx by @AIFlowML in https://github.com/elizaOS/eliza/pull/2942fix: remove dead code by @tcm390 in https://github.com/elizaOS/eliza/pull/2945fix: add missing plugins in package.json by @tcm390 in https://github.com/elizaOS/eliza/pull/2947fix: doesn't work in tweet post template by @tcm390 in https://github.com/elizaOS/eliza/pull/2951fix: plugin-massa by @AIFlowML in https://github.com/elizaOS/eliza/pull/2955fix-plugin-mina by @AIFlowML in https://github.com/elizaOS/eliza/pull/2954fix: mind-network by @AIFlowML in https://github.com/elizaOS/eliza/pull/2953fix: plugin-moralis by @AIFlowML in https://github.com/elizaOS/eliza/pull/2952fix: remove unnecessary @ts-expect-error directive in chat component by @wonseokjung in https://github.com/elizaOS/eliza/pull/2950feat(plugin-di): add Dependency Injection support for services and clients, and di plugin samples to _examples as new folder by @btspoony in https://github.com/elizaOS/eliza/pull/2855fix: handle whitespace in quote conversion by @tcm390 in https://github.com/elizaOS/eliza/pull/2961fix: plugin-letzai by @AIFlowML in https://github.com/elizaOS/eliza/pull/2960fix: plugin-lightning by @AIFlowML in https://github.com/elizaOS/eliza/pull/2959fix: plugin-lit by @AIFlowML in https://github.com/elizaOS/eliza/pull/2957fix: plugin-obsidian by @AIFlowML in https://github.com/elizaOS/eliza/pull/2906fix: plugin-router-nitro by @AIFlowML in https://github.com/elizaOS/eliza/pull/2884fix: ensure action tweet replies to agent's initial tweet by @tcm390 in https://github.com/elizaOS/eliza/pull/2966fix: plugin-lensnetwork by @AIFlowML in https://github.com/elizaOS/eliza/pull/2965chore: bump bun for remaining workflows by @wtfsayo in https://github.com/elizaOS/eliza/pull/2968fix(lint): plugin-intiface by @AIFlowML in https://github.com/elizaOS/eliza/pull/2971fix(lint): plugin-iq6900 by @AIFlowML in https://github.com/elizaOS/eliza/pull/2970fix: plugin-irys by @AIFlowML in https://github.com/elizaOS/eliza/pull/2969fix(lint): plugin-injective by @AIFlowML in https://github.com/elizaOS/eliza/pull/2973fix: plugin-initia by @AIFlowML in https://github.com/elizaOS/eliza/pull/2974fix(lint): plugin-imgflip by @AIFlowML in https://github.com/elizaOS/eliza/pull/2976fix(lint): plugin-image-generation by @AIFlowML in https://github.com/elizaOS/eliza/pull/2978feat(chore): plugin-arbitrage test config and coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2983feat: improve instagram client by @derrix060 in https://github.com/elizaOS/eliza/pull/2975feat(chore): plugin-apro -&gt; test coverage and test config by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2980fix README's CONTRIBUTING.md link in plugin-multiversx package by @elpulpo0 in https://github.com/elizaOS/eliza/pull/2985docs: fix broken links to github by @yaruno in https://github.com/elizaOS/eliza/pull/2987Update lpmanager.character.json by @Dahka2321 in https://github.com/elizaOS/eliza/pull/2921chore: correction typos chat_2024-12-04.md by @futreall in https://github.com/elizaOS/eliza/pull/2986feat(more-actions): Lit Protocol plugin by @madschristensen99 in https://github.com/elizaOS/eliza/pull/2912fix: re-enable wtfsayonara's patch by @odilitime in https://github.com/elizaOS/eliza/pull/2993chore: lockfile audit by @odilitime in https://github.com/elizaOS/eliza/pull/2994Update of the complete translation of README_FR.md [FR] by @YohanGH in https://github.com/elizaOS/eliza/pull/2964feat (chore): plugin avalanche test config and coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2999feat (chore): plugin avail test config and coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2997feat (chore): plugin-autonome test config and coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2992fix: OpenAI embedding issue by @ileana-pr in https://github.com/elizaOS/eliza/pull/3003fix: don't start services twice, improve logging by @odilitime in https://github.com/elizaOS/eliza/pull/3007fix: deepgram transcription null check by @tcm390 in https://github.com/elizaOS/eliza/pull/3014fix: llava model parsing Issue by @tcm390 in https://github.com/elizaOS/eliza/pull/3008fix(lint): plugin-hyperliquid by @AIFlowML in https://github.com/elizaOS/eliza/pull/3011fix(lint): plugin-holdstation by @AIFlowML in https://github.com/elizaOS/eliza/pull/3015fix(lint): plugin-goplus by @AIFlowML in https://github.com/elizaOS/eliza/pull/3016chore(lint-BIOME): Improving errors and warnings by @0xSero in https://github.com/elizaOS/eliza/pull/2990fix: client-slack &amp; adapter-postgres: Ensure the connection between user and room before creating a memory,‚Ä¶ by @maxime in https://github.com/elizaOS/eliza/pull/3006fix: change handleAnthropic default mode to auto by @Jesscha in https://github.com/elizaOS/eliza/pull/3018fix: spelling issue by @sky-coderay in https://github.com/elizaOS/eliza/pull/3041fix(lint): plugin-ethstorage by @AIFlowML in https://github.com/elizaOS/eliza/pull/3039fix(lint): plugin-evm by @AIFlowML in https://github.com/elizaOS/eliza/pull/3038fix(lint): plugin-flow by @AIFlowML in https://github.com/elizaOS/eliza/pull/3036fix(lint): plugin-football by @AIFlowML in https://github.com/elizaOS/eliza/pull/3035fix(lint): plugin-form by @AIFlowML in https://github.com/elizaOS/eliza/pull/3033fix(lint): plugin-fuel by @AIFlowML in https://github.com/elizaOS/eliza/pull/3028fix(lint): plugin-gelato by @AIFlowML in https://github.com/elizaOS/eliza/pull/3027fix(lint): plugin-genlayer by @AIFlowML in https://github.com/elizaOS/eliza/pull/3025fix(lint): plugin-giphy by @AIFlowML in https://github.com/elizaOS/eliza/pull/3024fix(lint): plugin-goat by @AIFlowML in https://github.com/elizaOS/eliza/pull/3019fix(lint): plugin-gitcoin-passport by @AIFlowML in https://github.com/elizaOS/eliza/pull/3022fix(lint): plugin-gitbook by @AIFlowML in https://github.com/elizaOS/eliza/pull/3023feat: add Fleek Eliza deployment to Readme_CN by @tobySolutions in https://github.com/elizaOS/eliza/pull/3048fix: correct regex by @tcm390 in https://github.com/elizaOS/eliza/pull/3054fix: Message id collision in Telegram Client by @tcm390 in https://github.com/elizaOS/eliza/pull/3053fix: ImageVisionModelProvider Not Applied in Runtime for Image Description Service by @tcm390 in https://github.com/elizaOS/eliza/pull/3056fix: handle unsupported image provider by @tcm390 in https://github.com/elizaOS/eliza/pull/3057feat: use Aggregator swap sui tokens by @v1xingyue in https://github.com/elizaOS/eliza/pull/3012fix: plugin-devin lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3070fix: plugin-binance lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3089fix: plugin-birdeye lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3088fix: plugin-bittensor lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3087fix: plugin-Chainbase lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3085fix: plugin-coingecko lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3084fix: plugin-coinmarketcap lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3082fix: plugin-conflux lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3080fix: plugin-cosmos lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3077fix: plugin-cronos lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3076fix: plugin-bnb lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3086fix: Rename file with typo in MVX plugin by @PhyByte in https://github.com/elizaOS/eliza/pull/3026docs: Add Arabic translation for README by @EmanHerawy in https://github.com/elizaOS/eliza/pull/3081fix: plugin-cronoszkevm lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3075fix: plugin-dcap lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3074fix: plugin-b2 lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3091fix: plugin-depin lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3073fix: plugin-dexscreener lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3069fix: the unexpected corrections for plugin-di caused by biome lint by @btspoony in https://github.com/elizaOS/eliza/pull/3052fix: fix-plugin-di lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3066fix: plugin-avalanche lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3092fix: plugin-echochamber lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3063fix: plugin-dkg lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3065fix: plugin-mail lint by @AIFlowML in https://github.com/elizaOS/eliza/pull/3061feat: 3049 add demo api access coingecko by @MichaelDeng03 in https://github.com/elizaOS/eliza/pull/3050fix(lint): email-automation by @AIFlowML in https://github.com/elizaOS/eliza/pull/3044fix: plugin-avail by @AIFlowML in https://github.com/elizaOS/eliza/pull/3094docs(packages/adapters): navigate section links by @guspan-tanadi in https://github.com/elizaOS/eliza/pull/3005fix: fixed build error in plugin-email-automation by @samarth30 in https://github.com/elizaOS/eliza/pull/3097fix: plugin-icp refactored by @AIFlowML in https://github.com/elizaOS/eliza/pull/3010fix: plugin-asterai by @AIFlowML in https://github.com/elizaOS/eliza/pull/3101fix: plugin-autonome-v1 by @AIFlowML in https://github.com/elizaOS/eliza/pull/3098fix: plugin-arthera-biome by @AIFlowML in https://github.com/elizaOS/eliza/pull/3102fix: plugin-aptos by @AIFlowML in https://github.com/elizaOS/eliza/pull/3104docs: Add &quot;What Did You Get Done This Week? 11&quot; notes by @YoungPhlo in https://github.com/elizaOS/eliza/pull/3103fix: fixing the error parsing json when an array is a value in a JSON‚Ä¶ by @maxime in https://github.com/elizaOS/eliza/pull/3113chore: updated .gitignore + removed build files by @wtfsayo in https://github.com/elizaOS/eliza/pull/3117fix: auto-scrolling issue in client by @tcm390 in https://github.com/elizaOS/eliza/pull/3115fix: plugin-apro by @AIFlowML in https://github.com/elizaOS/eliza/pull/3106feat (chore): plugin-chainbase test config and coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/3072feat (chore): plugin bittensor test config and coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/3064feat (chore): plugin-bootstrap: test config and test coverage by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/3068fix: docker build command by skipping eslint files by @jonathangus in https://github.com/elizaOS/eliza/pull/3110fix: export dexScreenerPlugin by @shakkernerd in https://github.com/elizaOS/eliza/pull/3120fix:chore(plugin-chainbase): add missing comma in package.json by @akugone in https://github.com/elizaOS/eliza/pull/3118fix: remove duplicate litPlugin import by @shakkernerd in https://github.com/elizaOS/eliza/pull/3121chore: dev =&gt; main 0.1.9 by @odilitime in https://github.com/elizaOS/eliza/pull/2361 New Contributors‚Äã View New Contributors @adacapo21 made their first contribution in https://github.com/elizaOS/eliza/pull/2199@gene-zhan made their first contribution in https://github.com/elizaOS/eliza/pull/1369@Stumble made their first contribution in https://github.com/elizaOS/eliza/pull/2228@oxlupo made their first contribution in https://github.com/elizaOS/eliza/pull/2260@VitalikBerashvili made their first contribution in https://github.com/elizaOS/eliza/pull/2256@Hack666r made their first contribution in https://github.com/elizaOS/eliza/pull/2255@KacperKoza343 made their first contribution in https://github.com/elizaOS/eliza/pull/2240@thetechnocratic made their first contribution in https://github.com/elizaOS/eliza/pull/1710@Firbydude made their first contribution in https://github.com/elizaOS/eliza/pull/1442@MonteCrypto999 made their first contribution in https://github.com/elizaOS/eliza/pull/2249@lincheoll made their first contribution in https://github.com/elizaOS/eliza/pull/2274@jason51553262 made their first contribution in https://github.com/elizaOS/eliza/pull/2267@CryptoGraffe made their first contribution in https://github.com/elizaOS/eliza/pull/2307@bbopar made their first contribution in https://github.com/elizaOS/eliza/pull/2293@hellopleasures made their first contribution in https://github.com/elizaOS/eliza/pull/1865@chuasonglin1995 made their first contribution in https://github.com/elizaOS/eliza/pull/2195@everimbaq made their first contribution in https://github.com/elizaOS/eliza/pull/2324@derrekcoleman made their first contribution in https://github.com/elizaOS/eliza/pull/2336@sukrucildirr made their first contribution in https://github.com/elizaOS/eliza/pull/2334@C0ldSmi1e made their first contribution in https://github.com/elizaOS/eliza/pull/2353@0xnogo made their first contribution in https://github.com/elizaOS/eliza/pull/2149@leeran7 made their first contribution in https://github.com/elizaOS/eliza/pull/2328@defitricks made their first contribution in https://github.com/elizaOS/eliza/pull/2370@0xSero made their first contribution in https://github.com/elizaOS/eliza/pull/2378@dev-whoan made their first contribution in https://github.com/elizaOS/eliza/pull/2382@ericlehong made their first contribution in https://github.com/elizaOS/eliza/pull/2385@crStiv made their first contribution in https://github.com/elizaOS/eliza/pull/2394@francis2tm made their first contribution in https://github.com/elizaOS/eliza/pull/2082@enigmarikki made their first contribution in https://github.com/elizaOS/eliza/pull/1764@sweetmantech made their first contribution in https://github.com/elizaOS/eliza/pull/2298@donatik27 made their first contribution in https://github.com/elizaOS/eliza/pull/2438@leopardracer made their first contribution in https://github.com/elizaOS/eliza/pull/2435@Hopium21 made their first contribution in https://github.com/elizaOS/eliza/pull/2441@bundinho made their first contribution in https://github.com/elizaOS/eliza/pull/2415@RubinovaAn1097 made their first contribution in https://github.com/elizaOS/eliza/pull/2449@MarsonKotovi4 made their first contribution in https://github.com/elizaOS/eliza/pull/2445@ae9is made their first contribution in https://github.com/elizaOS/eliza/pull/2375@Pistasha made their first contribution in https://github.com/elizaOS/eliza/pull/2447@dedyshkaPexto made their first contribution in https://github.com/elizaOS/eliza/pull/2464@Dimitrolito made their first contribution in https://github.com/elizaOS/eliza/pull/2456@carlos-cne made their first contribution in https://github.com/elizaOS/eliza/pull/2413@suleigolden made their first contribution in https://github.com/elizaOS/eliza/pull/2462@B1boid made their first contribution in https://github.com/elizaOS/eliza/pull/2332@lispking made their first contribution in https://github.com/elizaOS/eliza/pull/2476@Olexandr88 made their first contribution in https://github.com/elizaOS/eliza/pull/2483@sunsakis made their first contribution in https://github.com/elizaOS/eliza/pull/2340@Daulox92 made their first contribution in https://github.com/elizaOS/eliza/pull/2495@KoZivod88074 made their first contribution in https://github.com/elizaOS/eliza/pull/2485@tercel made their first contribution in https://github.com/elizaOS/eliza/pull/2365@0xrubusdata made their first contribution in https://github.com/elizaOS/eliza/pull/2463@visionpixel made their first contribution in https://github.com/elizaOS/eliza/pull/2518@Haisen772 made their first contribution in https://github.com/elizaOS/eliza/pull/2492@bfontes made their first contribution in https://github.com/elizaOS/eliza/pull/2506@jimtracy1007 made their first contribution in https://github.com/elizaOS/eliza/pull/2429@devin-ai-integration made their first contribution in https://github.com/elizaOS/eliza/pull/2549@neelkanani made their first contribution in https://github.com/elizaOS/eliza/pull/2547@BitWonka made their first contribution in https://github.com/elizaOS/eliza/pull/2524@maxcoto made their first contribution in https://github.com/elizaOS/eliza/pull/2389@cuongnguyenthai made their first contribution in https://github.com/elizaOS/eliza/pull/2596@leejw51crypto made their first contribution in https://github.com/elizaOS/eliza/pull/2585@RaveenaBhasin made their first contribution in https://github.com/elizaOS/eliza/pull/2590@boohyunsik made their first contribution in https://github.com/elizaOS/eliza/pull/2448@brkagithub made their first contribution in https://github.com/elizaOS/eliza/pull/2380@stanislawkurzypBD made their first contribution in https://github.com/elizaOS/eliza/pull/2554@siphonelee made their first contribution in https://github.com/elizaOS/eliza/pull/2654@jteso made their first contribution in https://github.com/elizaOS/eliza/pull/2645@nnsW3 made their first contribution in https://github.com/elizaOS/eliza/pull/2669@VolodymyrBg made their first contribution in https://github.com/elizaOS/eliza/pull/2672@lxcong made their first contribution in https://github.com/elizaOS/eliza/pull/2162@dtbuchholz made their first contribution in https://github.com/elizaOS/eliza/pull/2176@simsaidev made their first contribution in https://github.com/elizaOS/eliza/pull/2618@oxf71 made their first contribution in https://github.com/elizaOS/eliza/pull/2322@OmniflixBlockEater made their first contribution in https://github.com/elizaOS/eliza/pull/2693@bealers made their first contribution in https://github.com/elizaOS/eliza/pull/2698@Evan-zkLinkLabs made their first contribution in https://github.com/elizaOS/eliza/pull/2659@worksgoodcompany made their first contribution in https://github.com/elizaOS/eliza/pull/2686@klren0312 made their first contribution in https://github.com/elizaOS/eliza/pull/2748@dezcalimese made their first contribution in https://github.com/elizaOS/eliza/pull/2703@dev-holdstation made their first contribution in https://github.com/elizaOS/eliza/pull/2741@alex1092 made their first contribution in https://github.com/elizaOS/eliza/pull/2736@mj850 made their first contribution in https://github.com/elizaOS/eliza/pull/2720@guspan-tanadi made their first contribution in https://github.com/elizaOS/eliza/pull/2724@ajkraus04 made their first contribution in https://github.com/elizaOS/eliza/pull/2755@krustevalexander made their first contribution in https://github.com/elizaOS/eliza/pull/2711@iteyelmp made their first contribution in https://github.com/elizaOS/eliza/pull/2737@ebaizel made their first contribution in https://github.com/elizaOS/eliza/pull/2769@LouisVannobel made their first contribution in https://github.com/elizaOS/eliza/pull/2763@pranav-singhal made their first contribution in https://github.com/elizaOS/eliza/pull/2766@bharathbabu-moralis made their first contribution in https://github.com/elizaOS/eliza/pull/2764@ccross2 made their first contribution in https://github.com/elizaOS/eliza/pull/2687@LinuxIsCool made their first contribution in https://github.com/elizaOS/eliza/pull/2632@Cooops made their first contribution in https://github.com/elizaOS/eliza/pull/2709@tmarwen made their first contribution in https://github.com/elizaOS/eliza/pull/2728@benliang99 made their first contribution in https://github.com/elizaOS/eliza/pull/2682@Liao1 made their first contribution in https://github.com/elizaOS/eliza/pull/2638@KanishkKhurana made their first contribution in https://github.com/elizaOS/eliza/pull/2631@batudo made their first contribution in https://github.com/elizaOS/eliza/pull/2616@jobyid made their first contribution in https://github.com/elizaOS/eliza/pull/1427@AdventureSeeker987 made their first contribution in https://github.com/elizaOS/eliza/pull/2781@brandon1525 made their first contribution in https://github.com/elizaOS/eliza/pull/2564@zy-bc-ai made their first contribution in https://github.com/elizaOS/eliza/pull/2431@Alirun made their first contribution in https://github.com/elizaOS/eliza/pull/2725@JhChoy made their first contribution in https://github.com/elizaOS/eliza/pull/2789@juanc07 made their first contribution in https://github.com/elizaOS/eliza/pull/2782@calintje made their first contribution in https://github.com/elizaOS/eliza/pull/2136@elpulpo0 made their first contribution in https://github.com/elizaOS/eliza/pull/2810@actuallyrizzn made their first contribution in https://github.com/elizaOS/eliza/pull/2812@rubinovitz made their first contribution in https://github.com/elizaOS/eliza/pull/2821@anirudhmakhana made their first contribution in https://github.com/elizaOS/eliza/pull/2799@Nevermore-Ray made their first contribution in https://github.com/elizaOS/eliza/pull/2797@humanagent made their first contribution in https://github.com/elizaOS/eliza/pull/2786@AmriteshTrikon made their first contribution in https://github.com/elizaOS/eliza/pull/2653@rrw-zilliqa made their first contribution in https://github.com/elizaOS/eliza/pull/2842@tgaru made their first contribution in https://github.com/elizaOS/eliza/pull/2839@fifahuihua made their first contribution in https://github.com/elizaOS/eliza/pull/2794@mmarfinetz made their first contribution in https://github.com/elizaOS/eliza/pull/2784@stopmalone made their first contribution in https://github.com/elizaOS/eliza/pull/1238@viv-cheung made their first contribution in https://github.com/elizaOS/eliza/pull/2644@maximevtush made their first contribution in https://github.com/elizaOS/eliza/pull/2903@Pricstas made their first contribution in https://github.com/elizaOS/eliza/pull/2909@michavie made their first contribution in https://github.com/elizaOS/eliza/pull/2932@eric2hen made their first contribution in https://github.com/elizaOS/eliza/pull/2913@wonseokjung made their first contribution in https://github.com/elizaOS/eliza/pull/2950@derrix060 made their first contribution in https://github.com/elizaOS/eliza/pull/2975@yaruno made their first contribution in https://github.com/elizaOS/eliza/pull/2987@Dahka2321 made their first contribution in https://github.com/elizaOS/eliza/pull/2921@futreall made their first contribution in https://github.com/elizaOS/eliza/pull/2986@madschristensen99 made their first contribution in https://github.com/elizaOS/eliza/pull/2912@YohanGH made their first contribution in https://github.com/elizaOS/eliza/pull/2964@maxime made their first contribution in https://github.com/elizaOS/eliza/pull/3006@Jesscha made their first contribution in https://github.com/elizaOS/eliza/pull/3018@sky-coderay made their first contribution in https://github.com/elizaOS/eliza/pull/3041@tobySolutions made their first contribution in https://github.com/elizaOS/eliza/pull/3048@PhyByte made their first contribution in https://github.com/elizaOS/eliza/pull/3026@EmanHerawy made their first contribution in https://github.com/elizaOS/eliza/pull/3081@MichaelDeng03 made their first contribution in https://github.com/elizaOS/eliza/pull/3050@akugone made their first contribution in https://github.com/elizaOS/eliza/pull/3118 Full Changelog: https://github.com/elizaOS/eliza/compare/v0.1.8-alpha.1...v0.1.9‚Äã v0.1.8 (January 12, 2025)‚Äã What's Changed‚Äã Features‚Äã TTS (Text2Speech) with over 15 languages support! #2110Image descriptions into client-twitter #1775Add Heurist embedding model #2093Add Cloudflare AI Gateway support #821Add Mistral AI as new model provider #2137Add DeepSeek AI provider support to Eliza #2067Support TEE logging and support running eliza in Intel SGX #1470Pro API support, trending coins API #2068Add Irys plugin #1708Add support autonome platform #2121Add Akash Network plugin with autonomous deployment capabilities #2111Add Lens Network Plugin #2101Add plugin-hyperliquid #2141Add asterai plugin #2045Add massa-plugin #1582Add Quai integration #2083Primus zkTLS plugin to fully verify agent activities #2086Solana transaction more lenient (wait for confirmed instead of finalized) #2053 Fixes‚Äã Fix plugin loading from a character.json file #2095prevent repeated login by reusing client-twitter session #2129fix the chat stuck in infinite loop #1755fix client-discord join voice action #2160replace invalid toghether ai medium model #2173insert missing langdetect on plugin-tts package.json #2175Apply model settings for images and remove duplicate files #2118clientConfig.telegram.isPartOfTeam misstype #2103fix starknet plugin by replacing walletProvider with portfolio provider #2029correct SUI/USD price calculation #2150deepseek support in getTokenForProvider #2179Supabase updates #2100Koloxarto/fix ragknowledge for postgres #2153case-sensitive column reference in knowledge table CHECK constraint #2058syntax issue on autonome plugin and lock file update #2131lens export name and duplicate imports #2142Revert &quot;feat: Proof of Pizza - Agentic Dominos Ordering&quot; #2075 Complete changelog: fix: add default export to plugin-image-generation by @jonathanmv in https://github.com/elizaOS/eliza/pull/1831Update .env.example by @bitcoinbender in https://github.com/elizaOS/eliza/pull/1829chore: update develop from main by @shakkernerd in https://github.com/elizaOS/eliza/pull/1823feat(models): update Google model configurations by @gmh5225 in https://github.com/elizaOS/eliza/pull/1815improvement: replacing console.log with elizaLogger by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/1834Update README_KOR.md by @web3isthefuture in https://github.com/elizaOS/eliza/pull/1835refactor: typo in readme by @MagikHolder in https://github.com/elizaOS/eliza/pull/1832Fix faq link on contributing.md by @manotoor in https://github.com/elizaOS/eliza/pull/1847Create README.md by @RobertSloan22 in https://github.com/elizaOS/eliza/pull/1787Update c3po.character.json by @macfly-base in https://github.com/elizaOS/eliza/pull/1827Feat/genlayer plugin by @AgustinRamiroDiaz in https://github.com/elizaOS/eliza/pull/975fix: broken ci docs missed frozen bun file out-of-sync by @marcellodesales in https://github.com/elizaOS/eliza/pull/1798chore: update bootstrap plugin export by @affaan-m in https://github.com/elizaOS/eliza/pull/1836correct faq docs link in both contribution md files by @MacsDickinson in https://github.com/elizaOS/eliza/pull/1839Feat: add infera as an inference provide by @inferanetwork in https://github.com/elizaOS/eliza/pull/1860feat: add avail plugin by @robin-rrt in https://github.com/elizaOS/eliza/pull/1241feat: Add Stargaze plugin by @daniel-farina in https://github.com/elizaOS/eliza/pull/1861feat: add cosmos plugin by @mgacek-blockydevs in https://github.com/elizaOS/eliza/pull/1826feat: Implement a plugin that can retrieve Marlin TEE remote attestations by @roshanrags in https://github.com/elizaOS/eliza/pull/935docs: Add DAO donation ask &amp; dev discord by @odilitime in https://github.com/elizaOS/eliza/pull/1867fix: Fix postinstall script by @odilitime in https://github.com/elizaOS/eliza/pull/1872docs: add Romanian README translation by @pedronovikovborges in https://github.com/elizaOS/eliza/pull/1770test: adding more tests for goals,memory and provider. Fixing generation.test.ts by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/1840fix: remove twitter profile caching (#1638) by @augchan42 in https://github.com/elizaOS/eliza/pull/1782feat: Add devcontainer by @jazzvaz in https://github.com/elizaOS/eliza/pull/1807fix(solana token provider): await cached data by @bentatum in https://github.com/elizaOS/eliza/pull/1828chore: support more debians distros by @odilitime in https://github.com/elizaOS/eliza/pull/1875feat: refactor model config by @tcm390 in https://github.com/elizaOS/eliza/pull/1805feat: added new plugin - zktls - reclaim by @Gajesh2007 in https://github.com/elizaOS/eliza/pull/1558Feat: Support wildcard in TWITTER_TARGET_USERS 1883 by @augchan42 in https://github.com/elizaOS/eliza/pull/1884feat: add remote attestation action by @HashWarlock in https://github.com/elizaOS/eliza/pull/1885feat: Use recommended settings in jupiter swap by @Arrowana in https://github.com/elizaOS/eliza/pull/1882Fixed broken API Documentation URL by @JoeyKhd in https://github.com/elizaOS/eliza/pull/1881feat: add OpenWeather plugin by @kylebuildsstuff in https://github.com/elizaOS/eliza/pull/1880test: adding test setup for telegram client by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/1879chore(core): enable strict null checks by @bentatum in https://github.com/elizaOS/eliza/pull/1878fix: remove case sensitive path by @zhourunlai in https://github.com/elizaOS/eliza/pull/1892feat: hyperfy support by @odilitime in https://github.com/elizaOS/eliza/pull/1896Add Dutch (Nederlands) translation by @xzrfax in https://github.com/elizaOS/eliza/pull/1909fix: twitter result obj undefined properties by @zhourunlai in https://github.com/elizaOS/eliza/pull/1905chore: fix integrations and smoke tests by @shakkernerd in https://github.com/elizaOS/eliza/pull/1893fix: add callback to the evaluators for client-telegram by @RatakondalaArun in https://github.com/elizaOS/eliza/pull/1908chore(client-discord): fix SUMMARIZE prompt by @bodhi-crypo in https://github.com/elizaOS/eliza/pull/1916fix(core): check evaluators for null by @bentatum in https://github.com/elizaOS/eliza/pull/1918fix: resolved a bunch of type related errors and ensure project compiles by @JoeyKhd in https://github.com/elizaOS/eliza/pull/1917feats: diagram update by @tomguluson92 in https://github.com/elizaOS/eliza/pull/1907feat: Optimize Agent Action Processing by Prioritizing Timelines and Limiting Actions Per Cycle by @tcm390 in https://github.com/elizaOS/eliza/pull/1824Feature/add binance plugin by @Lukapetro in https://github.com/elizaOS/eliza/pull/1812Fix typo Update CHANGELOG.md by @petryshkaCODE in https://github.com/elizaOS/eliza/pull/1922feat: add GoPlus Security Plugin to enhance security for agent by @0xbeekeeper in https://github.com/elizaOS/eliza/pull/1898API route update by @JoeyKhd in https://github.com/elizaOS/eliza/pull/1923fix: handle empty input text to avoid memory content empty error by @zhourunlai in https://github.com/elizaOS/eliza/pull/1919test: adding tests for discord-client by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/1927docs: Add &quot;What Did You Get Done This Week? #8&quot; notes by @YoungPhlo in https://github.com/elizaOS/eliza/pull/1894fix: Limit the number of timelines fetched by @tcm390 in https://github.com/elizaOS/eliza/pull/1931fix: rm unused variable X_SERVER_URL by @proteanx in https://github.com/elizaOS/eliza/pull/1930feat: Make templates in composeContext dynamic by @jonathangus in https://github.com/elizaOS/eliza/pull/1467docs: it is processAction instead of triggerAction by @threewebcode in https://github.com/elizaOS/eliza/pull/1937feat: solana token deploy using solana agent kit by @renlulu in https://github.com/elizaOS/eliza/pull/1373chore(plugin-conflux): remove unused imports by @bendanzhentan in https://github.com/elizaOS/eliza/pull/1941feat(plugin-cronoszkevm): rm not used imports by @sinecose in https://github.com/elizaOS/eliza/pull/1744feat: support for eternalai provider can make request with chain_id extra data in body by @genesis-0000 in https://github.com/elizaOS/eliza/pull/1938chore: more specific rpc urls by @0xRider in https://github.com/elizaOS/eliza/pull/1945feat: support for eternalai provider can write request/response log info by @genesis-0000 in https://github.com/elizaOS/eliza/pull/1948chore: add embedding tests by @shlokkhemani in https://github.com/elizaOS/eliza/pull/1944feat: new plugin Arthera Chain by @elpiarthera in https://github.com/elizaOS/eliza/pull/1818fix: fixed error in C3PO and improved error handling feedback by @JoeyKhd in https://github.com/elizaOS/eliza/pull/1951feat: add sqlite db adapter by @KONFeature in https://github.com/elizaOS/eliza/pull/1810feat: Add fraxtal chain to evm by @kesar in https://github.com/elizaOS/eliza/pull/1954feat: add coin price plugin (CoinMarketCap, CoinGecko &amp; CoinCap) by @proteanx in https://github.com/elizaOS/eliza/pull/1808fix: abstract readme by @cygaar in https://github.com/elizaOS/eliza/pull/1963feat: improve twitter paragraph splitting if containing url by @darwintree in https://github.com/elizaOS/eliza/pull/1947test: adding tests for twitter-client by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/1959test: adding tests for twitter plugin by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/1976chore: Cleaner logs on agent startup by @velvet-shark in https://github.com/elizaOS/eliza/pull/1973feat: anyone plugin to privatise network requests by @Saundr21 in https://github.com/elizaOS/eliza/pull/1960fix: SQLITE ERROR, zero-lenght vectors not supported by @JoeyKhd in https://github.com/elizaOS/eliza/pull/1984fix: many fixes to the Telegram templates by @Laurentiu-Andronache in https://github.com/elizaOS/eliza/pull/1982test: changing test structure for core package. Fixing failling outdated tests by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/1989chore: Enable all EVM chains by default by @Minco-Yuga in https://github.com/elizaOS/eliza/pull/1981chore: add debug logging for context by @Laurentiu-Andronache in https://github.com/elizaOS/eliza/pull/1980fix: Fix db init race condition affecting builds by @0x-jj in https://github.com/elizaOS/eliza/pull/1968feat: add new plugin - spheron by @rekpero in https://github.com/elizaOS/eliza/pull/1966feat: Add Allora plugin by @conache in https://github.com/elizaOS/eliza/pull/1955fix: Added Local Embedding Manager to reuse Local embed model - Fixes High Ram Issues by @mbcse in https://github.com/elizaOS/eliza/pull/1950feat: obsidian integration plugin by @sekmet in https://github.com/elizaOS/eliza/pull/1943add thirdweb plugin by @iankm in https://github.com/elizaOS/eliza/pull/1418feat: improvements for plugin-cosmos by @mgacek-blockydevs in https://github.com/elizaOS/eliza/pull/1934fix: build on plugin spheron by @shakkernerd in https://github.com/elizaOS/eliza/pull/1995fix: client twitter dryrun by @tcm390 in https://github.com/elizaOS/eliza/pull/1997fix: resolve translation type issue by @odilitime in https://github.com/elizaOS/eliza/pull/1996fix: fix .env.sample defaults by @odilitime in https://github.com/elizaOS/eliza/pull/1999chore: update website url in lore.md by @tomguluson92 in https://github.com/elizaOS/eliza/pull/1998Add support for Movement Network by @Rahat-ch in https://github.com/elizaOS/eliza/pull/1621docs: Optimizes Technical Docs for LLMs &amp; Vectorization by @Ed-Marcavage in https://github.com/elizaOS/eliza/pull/1993feat: Separate Knowledge system + Multi-Agent RAG Optimization by @azep-ninja in https://github.com/elizaOS/eliza/pull/1620feat: implement getKnowledge, searchKnowledge, createKnowledge, removeKnowledge and clearKnowledge methods by @shakkernerd in https://github.com/elizaOS/eliza/pull/2005chore: Make generateNewTweet public by @hazelnutcloud in https://github.com/elizaOS/eliza/pull/1902fix: remove legacy variables (XAI_MODEL, XAI_API_KEY &amp; IMAGE_GEN) by @proteanx in https://github.com/elizaOS/eliza/pull/2001Update plugins.md -- Allora README Fix by @kush-alloralabs in https://github.com/elizaOS/eliza/pull/2003update: Readme and Comments by @rferrari in https://github.com/elizaOS/eliza/pull/2006fix: Auto Client bug by @HashWarlock in https://github.com/elizaOS/eliza/pull/2007chore(plugin-solana): replace console with elizaLogger by @sinecose in https://github.com/elizaOS/eliza/pull/1888feat: make the birdeye api req optional by @kamalbuilds in https://github.com/elizaOS/eliza/pull/1895feat: init DePIN plugin by @nicky-ru in https://github.com/elizaOS/eliza/pull/1874fix: packages/adapter-postgres/schema.sql isShared needs double quote by @koofree in https://github.com/elizaOS/eliza/pull/2008feat: Add approval mechanism for Twitter posts via Discord bot by @mbcse in https://github.com/elizaOS/eliza/pull/1876feat: Giphy plugin - Add animated gif to conversations by @daniel-farina in https://github.com/elizaOS/eliza/pull/1873Opacity Verifiable Interference zkTLS Plugin by @RonTuretzky in https://github.com/elizaOS/eliza/pull/1673fix: remove near-solana slippage env conflict by @wtfsayo in https://github.com/elizaOS/eliza/pull/2016feat: Update the Galadriel LLM integration to reflect their product updates by @kristjanpeterson1 in https://github.com/elizaOS/eliza/pull/2011chore(ci): add bun lockfile consistency check workflow by @jonathanykh in https://github.com/elizaOS/eliza/pull/2015feat: add telegram api root config in env by @dto-simba in https://github.com/elizaOS/eliza/pull/2014feat: new plugin LetzAI by @mitchoz in https://github.com/elizaOS/eliza/pull/1868fix: letzAi build issues by @wtfsayo in https://github.com/elizaOS/eliza/pull/2021feat: plugin new RabbiTrader by @Freytes in https://github.com/elizaOS/eliza/pull/1785Feature/add coinmarketcap plugin by @Lukapetro in https://github.com/elizaOS/eliza/pull/1773fix: remove defillama plugin &amp; improve rabbi trader by @wtfsayo in https://github.com/elizaOS/eliza/pull/2027Update README_RU.md by @WAGMIBRO in https://github.com/elizaOS/eliza/pull/2026fix: include schema.sql and seed.sql in package files by @brauliolomeli in https://github.com/elizaOS/eliza/pull/2030fix: üöö üìö move plugin-web-search readme to root dir by @marcellodesales in https://github.com/elizaOS/eliza/pull/1992feat: full overhaul of client by @JoeyKhd in https://github.com/elizaOS/eliza/pull/2038fix: update slack client readme manifest by @AnonJon in https://github.com/elizaOS/eliza/pull/2044fix: Update Key Derive in TEE by @HashWarlock in https://github.com/elizaOS/eliza/pull/2039Revert &quot;fix: Update Key Derive in TEE&quot; by @shakkernerd in https://github.com/elizaOS/eliza/pull/2049fix: Categorize &amp; Format .env.example by @proteanx in https://github.com/elizaOS/eliza/pull/2052fix: update regex to allow Unicode characters in message processing by @taofengno1 in https://github.com/elizaOS/eliza/pull/2048Fix: more specific rpc urls by @zhourunlai in https://github.com/elizaOS/eliza/pull/2018feat: Proof of Pizza - Agentic Dominos Ordering by @bayological in https://github.com/elizaOS/eliza/pull/2042Feature/plugin coingecko by @Lukapetro in https://github.com/elizaOS/eliza/pull/1761feat: improve zkstack based plugins by @aalimsahin in https://github.com/elizaOS/eliza/pull/1821feat: added nineteen.ai llm &amp; image support by @tripathiarpan20 in https://github.com/elizaOS/eliza/pull/2022feat: plugin-nft-generation support evm chain by @xwxtwd in https://github.com/elizaOS/eliza/pull/1763fix: Bugfix in LetzAI Plugin -&gt; missing named export and Plugin-type by @DanielWahl in https://github.com/elizaOS/eliza/pull/2062Galadriel docs and .env.example update by @kristjanpeterson1 in https://github.com/elizaOS/eliza/pull/2061fix: PGVector_embedding_validation (#1687) by @AIFlowML in https://github.com/elizaOS/eliza/pull/1750fix: fix multiversx-plugin by @mgavrila in https://github.com/elizaOS/eliza/pull/2017revert: #2048 by @wtfsayo in https://github.com/elizaOS/eliza/pull/2059feat: support TEE logging and support running eliza in Intel SGX by @ShuochengWang in https://github.com/elizaOS/eliza/pull/1470Update README_CN to match latest English README by @bxngxl in https://github.com/elizaOS/eliza/pull/2069Fix: case-sensitive column reference in knowledge table CHECK constraint by @antman1p in https://github.com/elizaOS/eliza/pull/2058docs: Update README_KOR.md by @YANGSEOKWOO in https://github.com/elizaOS/eliza/pull/2074fix: Revert &quot;feat: Proof of Pizza - Agentic Dominos Ordering&quot; by @tcm390 in https://github.com/elizaOS/eliza/pull/2075fix: rm unused imports by @mameikagou in https://github.com/elizaOS/eliza/pull/2112chore: revert #1808 + add missing import for coin gecko plugin by @wtfsayo in https://github.com/elizaOS/eliza/pull/2106Add name and description to SttTtsPlugin by @mameikagou in https://github.com/elizaOS/eliza/pull/2117fix: Apply model settings for images and remove duplicate files by @tcm390 in https://github.com/elizaOS/eliza/pull/2118feat: pro api support, trending coins api by @Lukapetro in https://github.com/elizaOS/eliza/pull/2068Add gemini to image vision by @web3gh in https://github.com/elizaOS/eliza/pull/2099feat: Add Irys plugin by @Hugo-SEQUIER in https://github.com/elizaOS/eliza/pull/1708fix: Fix plugin loading from a character.json file by @treppers in https://github.com/elizaOS/eliza/pull/2095feat: add Heurist embedding model by @tsubasakong in https://github.com/elizaOS/eliza/pull/2093fix: clientConfig.telegram.isPartOfTeam misstype by @rferrari in https://github.com/elizaOS/eliza/pull/2103docs: Add Verified Inference docs by @maciejwitowski in https://github.com/elizaOS/eliza/pull/2125fix: Update clients.md to fix package name by @prasadabhishek in https://github.com/elizaOS/eliza/pull/2091feat: support autonome platform by @autonome-ai in https://github.com/elizaOS/eliza/pull/2121fix: syntax issue on autonome plugin and lock file update by @wtfsayo in https://github.com/elizaOS/eliza/pull/2131test: Integration Tests Enhancement and Coinbase Commerce Integration by @pgoos in https://github.com/elizaOS/eliza/pull/1767fix: prevent repeated login by reusing client-twitter session by @tcm390 in https://github.com/elizaOS/eliza/pull/2129fix: update lockfile and fix lint findings by @odilitime in https://github.com/elizaOS/eliza/pull/2128feat: Add Akash Network plugin with autonomous deployment capabilities by @AIFlowML in https://github.com/elizaOS/eliza/pull/2111feat: Lens Network Plugin by @pranjallyad in https://github.com/elizaOS/eliza/pull/2101Docs improvements by @tudorpintea999 in https://github.com/elizaOS/eliza/pull/2138fix: lens export name and duplicate imports by @tcm390 in https://github.com/elizaOS/eliza/pull/2142Fix: Supabase updates by @antman1p in https://github.com/elizaOS/eliza/pull/2100refactor: Optimize memory fetching by moving sorting and slicing to DB (PR #1531 remake) by @odilitime in https://github.com/elizaOS/eliza/pull/2135feat: Add Cloudflare AI Gateway support by @w3-bounty in https://github.com/elizaOS/eliza/pull/821docs: add readme portuguese version in docs by @rRogick in https://github.com/elizaOS/eliza/pull/2088fix: eslint-fix-full-test-again by @AIFlowML in https://github.com/elizaOS/eliza/pull/2143Fix: fix starknet plugin by replacing walletProvider with portfolio provider by @Jonatan-Chaverri in https://github.com/elizaOS/eliza/pull/2029feat: Image descriptions into interaction.ts by @denizekiz in https://github.com/elizaOS/eliza/pull/1775feat: plugin-hyperliquid by @earlyvibz in https://github.com/elizaOS/eliza/pull/2141feat: Add Mistral AI as new model provider by @brauliolomeli in https://github.com/elizaOS/eliza/pull/2137feat: Implement asterai plugin by @rellfy in https://github.com/elizaOS/eliza/pull/2045feat: add massa-plugin by @peterjah in https://github.com/elizaOS/eliza/pull/1582feat: add Quai integration by @0xalank in https://github.com/elizaOS/eliza/pull/2083feat: Add DeepSeek AI provider support to Eliza by @daizhengxue in https://github.com/elizaOS/eliza/pull/2067feat: Primus zkTLS plugin to fully verify agent activities by @xiangxiecrypto in https://github.com/elizaOS/eliza/pull/2086fix: fix client-discord join voice action by @tcm390 in https://github.com/elizaOS/eliza/pull/2160add github to client enumerations by @AnonJon in https://github.com/elizaOS/eliza/pull/2157inheritance of character from parent using extends key by @ShreyGanatra in https://github.com/elizaOS/eliza/pull/2159fix: correct SUI/USD price calculation by @ChainRex in https://github.com/elizaOS/eliza/pull/2150feat: solana transaction more lenient by @zhourunlai in https://github.com/elizaOS/eliza/pull/2053chore: Add UUID tests and fix version 5 bits by @shlokkhemani in https://github.com/elizaOS/eliza/pull/1362Update git command for checking latest release by @velvet-shark in https://github.com/elizaOS/eliza/pull/1705chore: add conditionals for supabase to agent directory by @antman1p in https://github.com/elizaOS/eliza/pull/2032chore: bump develop lockfile by @odilitime in https://github.com/elizaOS/eliza/pull/2166feat: TTS(Text2Speech) with over 15 languages support! by @tomguluson92 in https://github.com/elizaOS/eliza/pull/2110test: moving uuid.tests to correct tests directory by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2168tests: coinbase plugin - adding tests for coinbase plugin by @ai16z-demirix in https://github.com/elizaOS/eliza/pull/2170Fix: replace invalid toghether ai medium model by @Jonatan-Chaverri in https://github.com/elizaOS/eliza/pull/2173fix: insert missing langdetect on plugin-tts package.json by @rferrari in https://github.com/elizaOS/eliza/pull/2175fix(client-twitter): add mention deduplication utility by @nhodges in https://github.com/elizaOS/eliza/pull/2178feat: üéà perf(vscode): Set file nesting for md and DockerFile by @AAAkater in https://github.com/elizaOS/eliza/pull/2177fix: deepseek support in getTokenForProvider by @Riroaki in https://github.com/elizaOS/eliza/pull/2179fix: remove problematic redundant uuid conversion and add api input param validations to api server by @jonathanykh in https://github.com/elizaOS/eliza/pull/2051fix: fix the chat stuck in infinite loop by @zoe27 in https://github.com/elizaOS/eliza/pull/1755fix: Koloxarto/fix ragknowledge for postgres by @web3gh in https://github.com/elizaOS/eliza/pull/2153chore: lint and fix pass on develop by @odilitime in https://github.com/elizaOS/eliza/pull/2180chore: Prep v0.1.8 (dev =&gt; main) by @odilitime in https://github.com/elizaOS/eliza/pull/2171 New Contributors‚Äã View New Contributors @jonathanmv made their first contribution in https://github.com/elizaOS/eliza/pull/1831@bitcoinbender made their first contribution in https://github.com/elizaOS/eliza/pull/1829@web3isthefuture made their first contribution in https://github.com/elizaOS/eliza/pull/1835@MagikHolder made their first contribution in https://github.com/elizaOS/eliza/pull/1832@manotoor made their first contribution in https://github.com/elizaOS/eliza/pull/1847@RobertSloan22 made their first contribution in https://github.com/elizaOS/eliza/pull/1787@macfly-base made their first contribution in https://github.com/elizaOS/eliza/pull/1827@AgustinRamiroDiaz made their first contribution in https://github.com/elizaOS/eliza/pull/975@MacsDickinson made their first contribution in https://github.com/elizaOS/eliza/pull/1839@inferanetwork made their first contribution in https://github.com/elizaOS/eliza/pull/1860@robin-rrt made their first contribution in https://github.com/elizaOS/eliza/pull/1241@daniel-farina made their first contribution in https://github.com/elizaOS/eliza/pull/1861@mgacek-blockydevs made their first contribution in https://github.com/elizaOS/eliza/pull/1826@roshanrags made their first contribution in https://github.com/elizaOS/eliza/pull/935@pedronovikovborges made their first contribution in https://github.com/elizaOS/eliza/pull/1770@jazzvaz made their first contribution in https://github.com/elizaOS/eliza/pull/1807@bentatum made their first contribution in https://github.com/elizaOS/eliza/pull/1828@Gajesh2007 made their first contribution in https://github.com/elizaOS/eliza/pull/1558@Arrowana made their first contribution in https://github.com/elizaOS/eliza/pull/1882@JoeyKhd made their first contribution in https://github.com/elizaOS/eliza/pull/1881@kylebuildsstuff made their first contribution in https://github.com/elizaOS/eliza/pull/1880@xzrfax made their first contribution in https://github.com/elizaOS/eliza/pull/1909@RatakondalaArun made their first contribution in https://github.com/elizaOS/eliza/pull/1908@bodhi-crypo made their first contribution in https://github.com/elizaOS/eliza/pull/1916@petryshkaCODE made their first contribution in https://github.com/elizaOS/eliza/pull/1922@0xbeekeeper made their first contribution in https://github.com/elizaOS/eliza/pull/1898@threewebcode made their first contribution in https://github.com/elizaOS/eliza/pull/1937@shlokkhemani made their first contribution in https://github.com/elizaOS/eliza/pull/1944@elpiarthera made their first contribution in https://github.com/elizaOS/eliza/pull/1818@KONFeature made their first contribution in https://github.com/elizaOS/eliza/pull/1810@kesar made their first contribution in https://github.com/elizaOS/eliza/pull/1954@velvet-shark made their first contribution in https://github.com/elizaOS/eliza/pull/1973@Saundr21 made their first contribution in https://github.com/elizaOS/eliza/pull/1960@Laurentiu-Andronache made their first contribution in https://github.com/elizaOS/eliza/pull/1982@Minco-Yuga made their first contribution in https://github.com/elizaOS/eliza/pull/1981@0x-jj made their first contribution in https://github.com/elizaOS/eliza/pull/1968@rekpero made their first contribution in https://github.com/elizaOS/eliza/pull/1966@conache made their first contribution in https://github.com/elizaOS/eliza/pull/1955@mbcse made their first contribution in https://github.com/elizaOS/eliza/pull/1950@sekmet made their first contribution in https://github.com/elizaOS/eliza/pull/1943@iankm made their first contribution in https://github.com/elizaOS/eliza/pull/1418@Rahat-ch made their first contribution in https://github.com/elizaOS/eliza/pull/1621@hazelnutcloud made their first contribution in https://github.com/elizaOS/eliza/pull/1902@kush-alloralabs made their first contribution in https://github.com/elizaOS/eliza/pull/2003@rferrari made their first contribution in https://github.com/elizaOS/eliza/pull/2006@kamalbuilds made their first contribution in https://github.com/elizaOS/eliza/pull/1895@koofree made their first contribution in https://github.com/elizaOS/eliza/pull/2008@RonTuretzky made their first contribution in https://github.com/elizaOS/eliza/pull/1673@wtfsayo made their first contribution in https://github.com/elizaOS/eliza/pull/2016@kristjanpeterson1 made their first contribution in https://github.com/elizaOS/eliza/pull/2011@jonathanykh made their first contribution in https://github.com/elizaOS/eliza/pull/2015@dto-simba made their first contribution in https://github.com/elizaOS/eliza/pull/2014@mitchoz made their first contribution in https://github.com/elizaOS/eliza/pull/1868@WAGMIBRO made their first contribution in https://github.com/elizaOS/eliza/pull/2026@antman1p made their first contribution in https://github.com/elizaOS/eliza/pull/2031@brauliolomeli made their first contribution in https://github.com/elizaOS/eliza/pull/2030@AnonJon made their first contribution in https://github.com/elizaOS/eliza/pull/2044@taofengno1 made their first contribution in https://github.com/elizaOS/eliza/pull/2048@bayological made their first contribution in https://github.com/elizaOS/eliza/pull/2042@tripathiarpan20 made their first contribution in https://github.com/elizaOS/eliza/pull/2022@DanielWahl made their first contribution in https://github.com/elizaOS/eliza/pull/2062@ShuochengWang made their first contribution in https://github.com/elizaOS/eliza/pull/1470@bxngxl made their first contribution in https://github.com/elizaOS/eliza/pull/2069@YANGSEOKWOO made their first contribution in https://github.com/elizaOS/eliza/pull/2074@mameikagou made their first contribution in https://github.com/elizaOS/eliza/pull/2112@web3gh made their first contribution in https://github.com/elizaOS/eliza/pull/2099@Hugo-SEQUIER made their first contribution in https://github.com/elizaOS/eliza/pull/1708@maciejwitowski made their first contribution in https://github.com/elizaOS/eliza/pull/2125@prasadabhishek made their first contribution in https://github.com/elizaOS/eliza/pull/2091@autonome-ai made their first contribution in https://github.com/elizaOS/eliza/pull/2121@pranjallyad made their first contribution in https://github.com/elizaOS/eliza/pull/2101@tudorpintea999 made their first contribution in https://github.com/elizaOS/eliza/pull/2138@w3-bounty made their first contribution in https://github.com/elizaOS/eliza/pull/821@rRogick made their first contribution in https://github.com/elizaOS/eliza/pull/2088@Jonatan-Chaverri made their first contribution in https://github.com/elizaOS/eliza/pull/2029@earlyvibz made their first contribution in https://github.com/elizaOS/eliza/pull/2141@rellfy made their first contribution in https://github.com/elizaOS/eliza/pull/2045@peterjah made their first contribution in https://github.com/elizaOS/eliza/pull/1582@0xalank made their first contribution in https://github.com/elizaOS/eliza/pull/2083@xiangxiecrypto made their first contribution in https://github.com/elizaOS/eliza/pull/2086@ChainRex made their first contribution in https://github.com/elizaOS/eliza/pull/2150@nhodges made their first contribution in https://github.com/elizaOS/eliza/pull/2178@AAAkater made their first contribution in https://github.com/elizaOS/eliza/pull/2177@Riroaki made their first contribution in https://github.com/elizaOS/eliza/pull/2179@zoe27 made their first contribution in https://github.com/elizaOS/eliza/pull/1755 Full Changelog: https://github.com/elizaOS/eliza/compare/v0.1.7...v0.1.8‚Äã v0.1.7 (January 04, 2025)‚Äã What's Changed‚Äã chore: rebase develop branch by @shakkernerd in https://github.com/elizaOS/eliza/pull/1301no token needed for gaianet by @suicidalgoofy in https://github.com/elizaOS/eliza/pull/1306fix: add lint script for plugin evm and fix lint errors by @nicky-ru in https://github.com/elizaOS/eliza/pull/1171chore: remove TWITTER_COOKIES env var by @ChristopherTrimboli in https://github.com/elizaOS/eliza/pull/1288fix: update turbo to fix &quot;cannot find package&quot; error by @oxSaturn in https://github.com/elizaOS/eliza/pull/1307fix: set default value for cache store by @oxSaturn in https://github.com/elizaOS/eliza/pull/1308fix: support google model. by @oxSaturn in https://github.com/elizaOS/eliza/pull/1310chore: bump agent-twitter-client version to v0.0.17 by @shakkernerd in https://github.com/elizaOS/eliza/pull/1311fix: use MAX_TWEET_LENGTH from setting by @oxSaturn in https://github.com/elizaOS/eliza/pull/1323fix: Add OLLAMA model to the getTokenForProvider class by @amirkhonov in https://github.com/elizaOS/eliza/pull/1338fix: postgres adapter schema by @ryanleecode in https://github.com/elizaOS/eliza/pull/1345Update farcaster client max cast length by @0x330a in https://github.com/elizaOS/eliza/pull/1347chore: revert discord url by @madjin in https://github.com/elizaOS/eliza/pull/1355feat: elizaOS by @lalalune in https://github.com/elizaOS/eliza/pull/1352chore: Merge Develop into Main by @lalalune in https://github.com/elizaOS/eliza/pull/1356Update DOCUMENTATION links to point to https://elizaOS.github.io/eliza/ by @imwylin in https://github.com/elizaOS/eliza/pull/1353feat: change @elizaos/eliza to @elizaos/core by @lalalune in https://github.com/elizaOS/eliza/pull/1357chore: develop -&gt; main, change elizaos/eliza to elizaos/core by @lalalune in https://github.com/elizaOS/eliza/pull/1359chore: New version 0.1.7 alpha.1 by @shakkernerd in https://github.com/elizaOS/eliza/pull/1360chore: bump version to v0.1.7-alpha.1 by @shakkernerd in https://github.com/elizaOS/eliza/pull/1361fix: explicitly set env in each step by @shakkernerd in https://github.com/elizaOS/eliza/pull/1374Update README.md to instructions to start client for chatting with Agent by @onlyzerosonce in https://github.com/elizaOS/eliza/pull/1375docs: Add documentation on bun node version by @trbutler4 in https://github.com/elizaOS/eliza/pull/1350chore: change CI trigger by @shakkernerd in https://github.com/elizaOS/eliza/pull/1387chore: require approval for integration test step by @shakkernerd in https://github.com/elizaOS/eliza/pull/1388chore: split tests by @shakkernerd in https://github.com/elizaOS/eliza/pull/1390docs: sample plugin documentation by @ileana-pr in https://github.com/elizaOS/eliza/pull/1385docs: Add &quot;What Did You Get Done This Week? #6&quot; notes by @YoungPhlo in https://github.com/elizaOS/eliza/pull/1399Standardize boolean values and update .env file pattern by @hcaumo in https://github.com/elizaOS/eliza/pull/1392fix: duplicate tweet log by @jasonqindev in https://github.com/elizaOS/eliza/pull/1402fix: postgres adapter settings not being applied by @ryanleecode in https://github.com/elizaOS/eliza/pull/1379fix: image generation using imageSettings by @proteanx in https://github.com/elizaOS/eliza/pull/1371feat: add venice style presets &amp; option to remove watermark (image generation) by @proteanx in https://github.com/elizaOS/eliza/pull/1410chore: allow scoped pr titles by @ryanleecode in https://github.com/elizaOS/eliza/pull/1414chore: format package.json files with prettier by @ryanleecode in https://github.com/elizaOS/eliza/pull/1412fix: Twitter login notifications, incorrect cookie management. by @ChristopherTrimboli in https://github.com/elizaOS/eliza/pull/1330fix: Multiple Agents running at the same time on localhost by @0xCardinalError in https://github.com/elizaOS/eliza/pull/1415fix: tags in templates/examples empty when passed to LLM by @tcm390 in https://github.com/elizaOS/eliza/pull/1305fix: fix imageModelProvider apiKey selection fallback by @UD1sto in https://github.com/elizaOS/eliza/pull/1272chore: update env for plugin-goat by @aeither in https://github.com/elizaOS/eliza/pull/1180docs: Add Tagalog README Translation by @harveyjavier in https://github.com/elizaOS/eliza/pull/1420feat: [Code Scanning] Security Improvements - create codeql.yml by @monilpat in https://github.com/elizaOS/eliza/pull/1314feat: greet first time contributors by @monilpat in https://github.com/elizaOS/eliza/pull/1316feat: add auto PR / issue close after being stale for a certain amount of time by @monilpat in https://github.com/elizaOS/eliza/pull/1317feat: add only to booleanFooter by @fyInALT in https://github.com/elizaOS/eliza/pull/1437improve logging in plugin-coinbase by @alessandromazza98 in https://github.com/elizaOS/eliza/pull/1429Update eliza-in-tee.md (fixing typo) by @yerinle in https://github.com/elizaOS/eliza/pull/1428fix: typos by @omahs in https://github.com/elizaOS/eliza/pull/1423docs: 1.Quotation marks are used incorrectly.2.Delete duplicate words by @RiceChuan in https://github.com/elizaOS/eliza/pull/1424feat: client-github retry by @tomguluson92 in https://github.com/elizaOS/eliza/pull/1425feat: (plugin-evm) add alienx chain by @xwxtwd in https://github.com/elizaOS/eliza/pull/1438chore: Keeps README translations synchronized by @0xJord4n in https://github.com/elizaOS/eliza/pull/1432feat: add abstract plugin by @cygaar in https://github.com/elizaOS/eliza/pull/1225fix: Make search feature in twitter client works by @nulLeeKH in https://github.com/elizaOS/eliza/pull/1433fix: fix incorrect link redirection issue by @mhxw in https://github.com/elizaOS/eliza/pull/1443fix: Remove code duplication in getGoals call by @hanyh2004 in https://github.com/elizaOS/eliza/pull/1450Feat: update package.json to add Cleanstart options for new database by @harperaa in https://github.com/elizaOS/eliza/pull/1449feat: suppress initial message from action by @0xPBIT in https://github.com/elizaOS/eliza/pull/1444New default character by @lalalune in https://github.com/elizaOS/eliza/pull/1453feat: added docs for plugin-nft-generation by @vishal-kanna in https://github.com/elizaOS/eliza/pull/1327feat: Add Text to 3D function by @tomguluson92 in https://github.com/elizaOS/eliza/pull/1446fix: update bun lock by @odilitime in https://github.com/elizaOS/eliza/pull/1457feat: allow passing secrets through environment by @odilitime in https://github.com/elizaOS/eliza/pull/1454feat: Add ModelConfiguration to Character to enable adjusting temperature, response length &amp; penalties by @peersky in https://github.com/elizaOS/eliza/pull/1455feat: replace unruggable-core with unruggable-sdk by @remiroyc in https://github.com/elizaOS/eliza/pull/450chore: update defailt character topic test case by @shakkernerd in https://github.com/elizaOS/eliza/pull/1466docs: Fixed Incorrect Model Name in API Integration by @mdqst in https://github.com/elizaOS/eliza/pull/1465feat: Adding plugin for Cronos ZKEVM by @samarth30 in https://github.com/elizaOS/eliza/pull/1464fix: client-twitter: fix ENABLE_ACTION_PROCESSING logic by @zkvm in https://github.com/elizaOS/eliza/pull/1463fix: cronoszkEVM -&gt; cronoszkevm by @shakkernerd in https://github.com/elizaOS/eliza/pull/1468fix(core) make modelConfiguration optional by @Archethect in https://github.com/elizaOS/eliza/pull/1473fix: cleaner interaction prompts in the Twitter plugin by @todorkolev in https://github.com/elizaOS/eliza/pull/1469fix: duplicate twitter post by @tcm390 in https://github.com/elizaOS/eliza/pull/1472chore: Docs update by @madjin in https://github.com/elizaOS/eliza/pull/1476Fetch timeline for followed accounts via Twitter client methods by @ag-wnl in https://github.com/elizaOS/eliza/pull/1475chore: Do not consider self tweets when evaluating actions by @ag-wnl in https://github.com/elizaOS/eliza/pull/1477fix: client-discord chat_with_attachment action remove hard coded model, allow any tiktoken model by @harperaa in https://github.com/elizaOS/eliza/pull/1408feat: Enhance client direct by @shakkernerd in https://github.com/elizaOS/eliza/pull/1479feat: improve chat formatting line breaks by @swizzmagik in https://github.com/elizaOS/eliza/pull/1483feat: add image features to react chat client by @0xPBIT in https://github.com/elizaOS/eliza/pull/1481feat: Twitter Post Action Implementation by @0xPBIT in https://github.com/elizaOS/eliza/pull/1422feat: Add agentic JSDoc generation by @Ed-Marcavage in https://github.com/elizaOS/eliza/pull/1343feat: add readme for ton plugin by @chandiniv1 in https://github.com/elizaOS/eliza/pull/1496feat: add readme for websearch plugin by @chandiniv1 in https://github.com/elizaOS/eliza/pull/1494chore: fix typos by @qwdsds in https://github.com/elizaOS/eliza/pull/1489docs: Fixed a small syntax issue in the ModelType Update fine-tuning.md by @mdqst in https://github.com/elizaOS/eliza/pull/1493add CODE_OF_CONDUCT.md by @nulLeeKH in https://github.com/elizaOS/eliza/pull/1487fix: remove type when import from elizaos by @tomguluson92 in https://github.com/elizaOS/eliza/pull/1492fix: improve Twitter client dry run mode and configuration logging by @e-fu in https://github.com/elizaOS/eliza/pull/1498feat: extend parseBooleanFromText function with additional boolean values by @shakkernerd in https://github.com/elizaOS/eliza/pull/1501docs: bad links in eliza-in-tee.md by @janeyJo in https://github.com/elizaOS/eliza/pull/1500fix: improve client type identification with test coverage by @ShaneOxM in https://github.com/elizaOS/eliza/pull/1490feat: handle long tweet by @tcm390 in https://github.com/elizaOS/eliza/pull/1339chore: general code fixes/clean up by @shakkernerd in https://github.com/elizaOS/eliza/pull/1513add fuel plugin by @Dhaiwat10 in https://github.com/elizaOS/eliza/pull/1512fix: add required incremental option and remove invalid typescript configuration by @ShaneOxM in https://github.com/elizaOS/eliza/pull/1485Clear /cache/ in clean.sh script by @timolegros in https://github.com/elizaOS/eliza/pull/1508chore: Revert &quot;Clear /cache/ in clean.sh script&quot; by @shakkernerd in https://github.com/elizaOS/eliza/pull/1515chore: remove cache in core by @shakkernerd in https://github.com/elizaOS/eliza/pull/1516feat: Add the FerePro plugin by @Rudrakc in https://github.com/elizaOS/eliza/pull/1502fix: Update speech.ts by @y4my4my4m in https://github.com/elizaOS/eliza/pull/1312fix: swap and bridge actions of plugin-evm by @pythonberg1997 in https://github.com/elizaOS/eliza/pull/1456fix: client-twitter lowerCase bug and environment clean up (+lint fixes, and TWITTER_SEARCH_ENABLE double start fix) by @odilitime in https://github.com/elizaOS/eliza/pull/1514feat: use OPENAI_API_URL from env to support custom OpenAI API endpoint by @imtms in https://github.com/elizaOS/eliza/pull/1522fix: handle long tweet in utils by @oxSaturn in https://github.com/elizaOS/eliza/pull/1520feat: add /:agentId/speak endpoint for text-to-speech functionality by @HowieDuhzit in https://github.com/elizaOS/eliza/pull/1528Fix: Update package.json with build-docker command to match the dockerfile command by @vanshika-srivastava in https://github.com/elizaOS/eliza/pull/1527feat: Add Livepeer Image Provider by @Titan-Node in https://github.com/elizaOS/eliza/pull/1525feat: Add Custom System Prompt Support for plugin-image-generation by @tsubasakong in https://github.com/elizaOS/eliza/pull/839chore: remove unused vars by @odilitime in https://github.com/elizaOS/eliza/pull/1529feat: add avalanche plugin by @snow-farmer in https://github.com/elizaOS/eliza/pull/842feat: Add GitBook Plugin provider by @azep-ninja in https://github.com/elizaOS/eliza/pull/1126chore: bump version to v.0.1.7-alpha.2 by @shakkernerd in https://github.com/elizaOS/eliza/pull/1530chore: 1.7.0 prep, develop =&gt; main by @odilitime in https://github.com/elizaOS/eliza/pull/1519feat: add autoscroll chat client by @swizzmagik in https://github.com/elizaOS/eliza/pull/1538docs: Polish readme by @yanushevitz in https://github.com/elizaOS/eliza/pull/1537Update README_CN - Model Configuration by @RedHorse823 in https://github.com/elizaOS/eliza/pull/1535docs: fix grammar/typos in README by @SK1989sL in https://github.com/elizaOS/eliza/pull/1534Fix: make twitter engagement criteria in prompt more focused on relevance to topics/interests/character by @e-fu in https://github.com/elizaOS/eliza/pull/1533feat: improve stale pr/issue messages by @monilpat in https://github.com/elizaOS/eliza/pull/1540fix: twitter usernames can start with numbers by @odilitime in https://github.com/elizaOS/eliza/pull/1541Fix jsdoc automation build issue &amp; parametrize PR branch target by @Ed-Marcavage in https://github.com/elizaOS/eliza/pull/1547fix: Telegram Bad Request: can't parse entities by @azep-ninja in https://github.com/elizaOS/eliza/pull/1546Chore: Refactor Imports. Improve PR Template by @mgunnin in https://github.com/elizaOS/eliza/pull/1545docs: Add JSDoc documentation by @madjin in https://github.com/elizaOS/eliza/pull/1549docs: Add JSDoc documentation by @madjin in https://github.com/elizaOS/eliza/pull/1548feat: add theme toggle functionality with dark and light mode support by @zkfriendly in https://github.com/elizaOS/eliza/pull/1555docs: Add &quot;What Did You Get Done This Week? #7&quot; notes by @YoungPhlo in https://github.com/elizaOS/eliza/pull/1559feat: (example) script to show how to add system prompt and templates to eliza with character file by @HashWarlock in https://github.com/elizaOS/eliza/pull/1554feat: parse files through prettier by @shakkernerd in https://github.com/elizaOS/eliza/pull/1573fix: init 768 dimension in database for gaianet by @L-jasmine in https://github.com/elizaOS/eliza/pull/1572docs: overview and preview of technical report by @tomguluson92 in https://github.com/elizaOS/eliza/pull/1574feat: add TEE support for plugin-env by @samuveth in https://github.com/elizaOS/eliza/pull/1571Update agents.md - minor update by @yorkerhodes3 in https://github.com/elizaOS/eliza/pull/1579refactor(plugin-conflux): output detailed invalid content by @bendanzhentan in https://github.com/elizaOS/eliza/pull/1602fix: tweak transfer template of plugin-evm by @zkvm in https://github.com/elizaOS/eliza/pull/1604feat: add experimental telemetry model option by @zhourunlai in https://github.com/elizaOS/eliza/pull/1603docs: README.md files for plugins by @ileana-pr in https://github.com/elizaOS/eliza/pull/1601feat: use tavily sdk by @zhourunlai in https://github.com/elizaOS/eliza/pull/1599docs: add readme spanish version in docs by @salazarsebas in https://github.com/elizaOS/eliza/pull/1594feat: add docs for image generation plugin by @chandiniv1 in https://github.com/elizaOS/eliza/pull/1591docs: fix Contributing Guide by @0xFloyd in https://github.com/elizaOS/eliza/pull/1589feat: update volcengine model by @zhourunlai in https://github.com/elizaOS/eliza/pull/1586fix: update plugin-solana workspace dependencies by @shakkernerd in https://github.com/elizaOS/eliza/pull/1609fix: Google API Key not passing from character file by @azep-ninja in https://github.com/elizaOS/eliza/pull/1607add plugins to the key components section of the faq by @cole-gillespie in https://github.com/elizaOS/eliza/pull/1614add an client-direct endpoint to get memories by agentid and roomid by @treppers in https://github.com/elizaOS/eliza/pull/1581fix: Double Responses from Continue Action by @azep-ninja in https://github.com/elizaOS/eliza/pull/1606Fix double spaced tweets in Post.ts by @suicidalgoofy in https://github.com/elizaOS/eliza/pull/1626feat: Select a transcription provider based on the character settings. by @tcm390 in https://github.com/elizaOS/eliza/pull/1625fix: turbo deps for plugin-evm by @odilitime in https://github.com/elizaOS/eliza/pull/1627feat: Twitter Spaces Integration by @slkzgm in https://github.com/elizaOS/eliza/pull/1550fix: corrected path for image upload by @ShreyGanatra in https://github.com/elizaOS/eliza/pull/1632chore: update viem dependency version in plugin-evm and plugin-goat by @bertux in https://github.com/elizaOS/eliza/pull/1637fix: lockfile wasn't updated after dependency + bring viem to root level package.json by @monilpat in https://github.com/elizaOS/eliza/pull/1642fix: Fix bug in plugin-bootstrap/src/evaluators/facts.ts by @metakai1 in https://github.com/elizaOS/eliza/pull/1648Add README_AR.md by @xMariem in https://github.com/elizaOS/eliza/pull/1634Added Hungarian README by @mdominikd in https://github.com/elizaOS/eliza/pull/1645fix: activate web-search plugin in agents/ by @cmadaanaya in https://github.com/elizaOS/eliza/pull/1577fix: 1634 fix image description service by @nusk0 in https://github.com/elizaOS/eliza/pull/1667fix: Seperated imageModelProvider and imageVisionModelProvider for ImageDescriptioServices by @denizekiz in https://github.com/elizaOS/eliza/pull/1664fix: Update Supabase schema.sql by @0xRider in https://github.com/elizaOS/eliza/pull/1660feat: add docs for story plugin by @chandiniv1 in https://github.com/elizaOS/eliza/pull/1672fix: add web search to agent by @odilitime in https://github.com/elizaOS/eliza/pull/1676fix: 1668 fix twitter image link by @nusk0 in https://github.com/elizaOS/eliza/pull/1671chore(docs): rename ai16z/eliza to elizaOS/eliza by @9547 in https://github.com/elizaOS/eliza/pull/1679fix: smoke tests by @shakkernerd in https://github.com/elizaOS/eliza/pull/1695feat: Plugin sui support for suiprivatekey0x account by @v1xingyue in https://github.com/elizaOS/eliza/pull/1693docs: update README.md spelling by @SK1989sL in https://github.com/elizaOS/eliza/pull/1690chore: twitter username validation message by @daizhengxue in https://github.com/elizaOS/eliza/pull/1698Update README_KOR.md: Added missing sections and improved Korean translations for clarity by @gnujoow in https://github.com/elizaOS/eliza/pull/1683fix(core): trimTokens no need to await by @9547 in https://github.com/elizaOS/eliza/pull/1686chore: update web search plugin export by @affaan-m in https://github.com/elizaOS/eliza/pull/1688EVM plugin wallet provider and transfer action improvements by @nicky-ru in https://github.com/elizaOS/eliza/pull/1701fix: Url fix in imagedescriptionservice by @denizekiz in https://github.com/elizaOS/eliza/pull/1696feat: improve GOAT integration by allowing tool calling when using generateText by @0xaguspunk in https://github.com/elizaOS/eliza/pull/1403fix: postgres-adapter - remove nonsensical schema check by @ryanleecode in https://github.com/elizaOS/eliza/pull/1377fix: disable trust provider for PostGres db by @swizzmagik in https://github.com/elizaOS/eliza/pull/1536fix: multiple web search import in agent by @shakkernerd in https://github.com/elizaOS/eliza/pull/1718chore(zksync-era): rm not used imports by @9547 in https://github.com/elizaOS/eliza/pull/1716fix: add echochambers to agent by @odilitime in https://github.com/elizaOS/eliza/pull/1719docs: update faq.md by @TresFlames in https://github.com/elizaOS/eliza/pull/1746docs: update README_KOR.md by @osrm in https://github.com/elizaOS/eliza/pull/1739docs: add Serbian README translation by @marsic3 in https://github.com/elizaOS/eliza/pull/1757fix: Support for Non-OpenAI Models in Token Trimming by @tcm390 in https://github.com/elizaOS/eliza/pull/1605fix: build lint errors by @shakkernerd in https://github.com/elizaOS/eliza/pull/1759fix(client): improve Windows compatibility for Vite dev server by @gmh5225 in https://github.com/elizaOS/eliza/pull/1760feat: use custom conditions for live monorepo types by @ryanleecode in https://github.com/elizaOS/eliza/pull/1365feat: support for eternalai provider can write request/response log info by @genesis-0000 in https://github.com/elizaOS/eliza/pull/1740feat(plugin-near): replace console.log to eliza logger by @sinecose in https://github.com/elizaOS/eliza/pull/1745Agentic Eliza Plugin Documenter - Multilingual (e.g., English, Spanish, French) by @Ed-Marcavage in https://github.com/elizaOS/eliza/pull/1675üêõ fix plugins.md formatting for docs with dockerized docs validation by @marcellodesales in https://github.com/elizaOS/eliza/pull/1722fix: line break handling in chat by @swizzmagik in https://github.com/elizaOS/eliza/pull/1784chore: remove unused import and var by @shakkernerd in https://github.com/elizaOS/eliza/pull/1797bug : Removed FerePro plugin by @Rudrakc in https://github.com/elizaOS/eliza/pull/1795fix(client-slack): implement Media type properties in message attachments #1384 by @AIFlowML in https://github.com/elizaOS/eliza/pull/1741fix(postgres): Handle vector extension creation properly (#1561) by @AIFlowML in https://github.com/elizaOS/eliza/pull/1743Revert &quot;fix(postgres): Handle vector extension creation properly (#1561)&quot; by @shakkernerd in https://github.com/elizaOS/eliza/pull/1799fix: standardize ACTION_INTERVAL unit to minutes in twitter client by @sin-bufan in https://github.com/elizaOS/eliza/pull/1738refactor: client api by @aalimsahin in https://github.com/elizaOS/eliza/pull/1713feat: Simulate discord typing while generating a response by @dxlliv in https://github.com/elizaOS/eliza/pull/1712fix: bugfix. the port 80 is not listening use 3000 by @jmikedupont2 in https://github.com/elizaOS/eliza/pull/1616chore: install with no frozen-lockfile flag by @shakkernerd in https://github.com/elizaOS/eliza/pull/1802fix: generation tests for trimTokens by @shakkernerd in https://github.com/elizaOS/eliza/pull/1803chore: bump version to v.0.1.7 by @shakkernerd in https://github.com/elizaOS/eliza/pull/1804chore: Develop =&gt; main for 1.7.0 release by @odilitime in https://github.com/elizaOS/eliza/pull/1717 New Contributors‚Äã View New Contributors @suicidalgoofy made their first contribution in https://github.com/elizaOS/eliza/pull/1306@ChristopherTrimboli made their first contribution in https://github.com/elizaOS/eliza/pull/1288@amirkhonov made their first contribution in https://github.com/elizaOS/eliza/pull/1338@ryanleecode made their first contribution in https://github.com/elizaOS/eliza/pull/1345@0x330a made their first contribution in https://github.com/elizaOS/eliza/pull/1347@imwylin made their first contribution in https://github.com/elizaOS/eliza/pull/1353@onlyzerosonce made their first contribution in https://github.com/elizaOS/eliza/pull/1375@trbutler4 made their first contribution in https://github.com/elizaOS/eliza/pull/1350@hcaumo made their first contribution in https://github.com/elizaOS/eliza/pull/1392@jasonqindev made their first contribution in https://github.com/elizaOS/eliza/pull/1402@UD1sto made their first contribution in https://github.com/elizaOS/eliza/pull/1272@aeither made their first contribution in https://github.com/elizaOS/eliza/pull/1180@harveyjavier made their first contribution in https://github.com/elizaOS/eliza/pull/1420@fyInALT made their first contribution in https://github.com/elizaOS/eliza/pull/1437@alessandromazza98 made their first contribution in https://github.com/elizaOS/eliza/pull/1429@yerinle made their first contribution in https://github.com/elizaOS/eliza/pull/1428@omahs made their first contribution in https://github.com/elizaOS/eliza/pull/1423@RiceChuan made their first contribution in https://github.com/elizaOS/eliza/pull/1424@0xJord4n made their first contribution in https://github.com/elizaOS/eliza/pull/1432@nulLeeKH made their first contribution in https://github.com/elizaOS/eliza/pull/1433@mhxw made their first contribution in https://github.com/elizaOS/eliza/pull/1443@hanyh2004 made their first contribution in https://github.com/elizaOS/eliza/pull/1450@harperaa made their first contribution in https://github.com/elizaOS/eliza/pull/1449@0xPBIT made their first contribution in https://github.com/elizaOS/eliza/pull/1444@vishal-kanna made their first contribution in https://github.com/elizaOS/eliza/pull/1327@remiroyc made their first contribution in https://github.com/elizaOS/eliza/pull/450@mdqst made their first contribution in https://github.com/elizaOS/eliza/pull/1465@samarth30 made their first contribution in https://github.com/elizaOS/eliza/pull/1464@zkvm made their first contribution in https://github.com/elizaOS/eliza/pull/1463@Archethect made their first contribution in https://github.com/elizaOS/eliza/pull/1473@todorkolev made their first contribution in https://github.com/elizaOS/eliza/pull/1469@ag-wnl made their first contribution in https://github.com/elizaOS/eliza/pull/1475@swizzmagik made their first contribution in https://github.com/elizaOS/eliza/pull/1483@Ed-Marcavage made their first contribution in https://github.com/elizaOS/eliza/pull/1343@chandiniv1 made their first contribution in https://github.com/elizaOS/eliza/pull/1496@qwdsds made their first contribution in https://github.com/elizaOS/eliza/pull/1489@e-fu made their first contribution in https://github.com/elizaOS/eliza/pull/1498@janeyJo made their first contribution in https://github.com/elizaOS/eliza/pull/1500@ShaneOxM made their first contribution in https://github.com/elizaOS/eliza/pull/1490@Dhaiwat10 made their first contribution in https://github.com/elizaOS/eliza/pull/1512@timolegros made their first contribution in https://github.com/elizaOS/eliza/pull/1508@Rudrakc made their first contribution in https://github.com/elizaOS/eliza/pull/1502@y4my4my4m made their first contribution in https://github.com/elizaOS/eliza/pull/1312@pythonberg1997 made their first contribution in https://github.com/elizaOS/eliza/pull/1456@imtms made their first contribution in https://github.com/elizaOS/eliza/pull/1522@HowieDuhzit made their first contribution in https://github.com/elizaOS/eliza/pull/1528@vanshika-srivastava made their first contribution in https://github.com/elizaOS/eliza/pull/1527@snow-farmer made their first contribution in https://github.com/elizaOS/eliza/pull/842@yanushevitz made their first contribution in https://github.com/elizaOS/eliza/pull/1537@RedHorse823 made their first contribution in https://github.com/elizaOS/eliza/pull/1535@SK1989sL made their first contribution in https://github.com/elizaOS/eliza/pull/1534@mgunnin made their first contribution in https://github.com/elizaOS/eliza/pull/1545@zkfriendly made their first contribution in https://github.com/elizaOS/eliza/pull/1555@yorkerhodes3 made their first contribution in https://github.com/elizaOS/eliza/pull/1579@bendanzhentan made their first contribution in https://github.com/elizaOS/eliza/pull/1602@zhourunlai made their first contribution in https://github.com/elizaOS/eliza/pull/1603@salazarsebas made their first contribution in https://github.com/elizaOS/eliza/pull/1594@0xFloyd made their first contribution in https://github.com/elizaOS/eliza/pull/1589@cole-gillespie made their first contribution in https://github.com/elizaOS/eliza/pull/1614@treppers made their first contribution in https://github.com/elizaOS/eliza/pull/1581@slkzgm made their first contribution in https://github.com/elizaOS/eliza/pull/1550@ShreyGanatra made their first contribution in https://github.com/elizaOS/eliza/pull/1632@bertux made their first contribution in https://github.com/elizaOS/eliza/pull/1637@metakai1 made their first contribution in https://github.com/elizaOS/eliza/pull/1648@xMariem made their first contribution in https://github.com/elizaOS/eliza/pull/1634@mdominikd made their first contribution in https://github.com/elizaOS/eliza/pull/1645@cmadaanaya made their first contribution in https://github.com/elizaOS/eliza/pull/1577@nusk0 made their first contribution in https://github.com/elizaOS/eliza/pull/1667@0xRider made their first contribution in https://github.com/elizaOS/eliza/pull/1660@daizhengxue made their first contribution in https://github.com/elizaOS/eliza/pull/1698@gnujoow made their first contribution in https://github.com/elizaOS/eliza/pull/1683@affaan-m made their first contribution in https://github.com/elizaOS/eliza/pull/1688@TresFlames made their first contribution in https://github.com/elizaOS/eliza/pull/1746@osrm made their first contribution in https://github.com/elizaOS/eliza/pull/1739@marsic3 made their first contribution in https://github.com/elizaOS/eliza/pull/1757@gmh5225 made their first contribution in https://github.com/elizaOS/eliza/pull/1760@sinecose made their first contribution in https://github.com/elizaOS/eliza/pull/1745@marcellodesales made their first contribution in https://github.com/elizaOS/eliza/pull/1722@aalimsahin made their first contribution in https://github.com/elizaOS/eliza/pull/1713@dxlliv made their first contribution in https://github.com/elizaOS/eliza/pull/1712@jmikedupont2 made their first contribution in https://github.com/elizaOS/eliza/pull/1616 Full Changelog: https://github.com/elizaOS/eliza/compare/v0.1.5...v0.1.6‚Äã v0.1.5 (December 21, 2024)‚Äã What's Changed‚Äã fix: When the plugins field in the .character.json file is configured with plugin name. by @xwxtwd in https://github.com/ai16z/eliza/pull/784fixs: uuid compatible for number by @tomguluson92 in https://github.com/ai16z/eliza/pull/785Update generation.ts to fix TOGETHER/LLAMACLOUD image generation by @ProphetX10 in https://github.com/ai16z/eliza/pull/786fix: dev command by @shakkernerd in https://github.com/ai16z/eliza/pull/793chore: update README_KOR.md to match latest README.md by @mike0295 in https://github.com/ai16z/eliza/pull/789fix: enviroment -&gt; environment by @tomguluson92 in https://github.com/ai16z/eliza/pull/787fix: Docker default non-interactive mode for Cloud instances by @rarepepi in https://github.com/ai16z/eliza/pull/796fix: swap type error, create user trust on first message in telegram by @MarcoMandar in https://github.com/ai16z/eliza/pull/800fix: update npm publication workflow by @cygaar in https://github.com/ai16z/eliza/pull/805refactor: Improve actions samples random selection by @dievardump in https://github.com/ai16z/eliza/pull/799fix: part 2 of updating the npm publish workflow by @cygaar in https://github.com/ai16z/eliza/pull/806fix: release workflow part 3 by @cygaar in https://github.com/ai16z/eliza/pull/807fix: update package version to v0.1.5-alpha.0 by @cygaar in https://github.com/ai16z/eliza/pull/808fix: lerna publish command by @cygaar in https://github.com/ai16z/eliza/pull/811feat: (core) Add circuit breaker pattern for database operations -‚Ä¶ by @augchan42 in https://github.com/ai16z/eliza/pull/812use github access token by @tcm390 in https://github.com/ai16z/eliza/pull/825loading indicator by @tcm390 in https://github.com/ai16z/eliza/pull/827fix: pin all node dependencies + update @solana/web3.js to safe version by @cygaar in https://github.com/ai16z/eliza/pull/832fix: docker-setup.md by @Freytes in https://github.com/ai16z/eliza/pull/826fix: twitter cache expires by @palsp in https://github.com/ai16z/eliza/pull/824chore: bump version to 0.1.5-alpha.1 by @cygaar in https://github.com/ai16z/eliza/pull/833chore: revert viem package version by @shakkernerd in https://github.com/ai16z/eliza/pull/834chore: Revert/viem version and bump @goat-sdk/plugin-erc20 by @shakkernerd in https://github.com/ai16z/eliza/pull/836chore: bump version to 0.1.5-alpha.3 by @cygaar in https://github.com/ai16z/eliza/pull/838feat: add coinbase ERC20, ERC721, and ERC1155 tokenContract deployment / invokement plugin by @monilpat in https://github.com/ai16z/eliza/pull/803fix: Include scripts/postinstall.js in the final NPM package by @martincik in https://github.com/ai16z/eliza/pull/843fix: run release workflow after a github release is created by @cygaar in https://github.com/ai16z/eliza/pull/846feat: add Aptos plugin by @0xaptosj in https://github.com/ai16z/eliza/pull/818fix: plugins docs by @cygaar in https://github.com/ai16z/eliza/pull/848fix: Use LARGE models for responses by @lalalune in https://github.com/ai16z/eliza/pull/853Update Node version in local-development.md by @oxSaturn in https://github.com/ai16z/eliza/pull/850Updated quickstart.md to contemplate common issue by @fede2442 in https://github.com/ai16z/eliza/pull/861Remove duplicated coinbase CDP options in .env.example by @juntao in https://github.com/ai16z/eliza/pull/863feat: coinbase webhook + add more examples + testing by @monilpat in https://github.com/ai16z/eliza/pull/801test: adding environment and knowledge tests by @ai16z-demirix in https://github.com/ai16z/eliza/pull/862Update quickstart.md by @oxSaturn in https://github.com/ai16z/eliza/pull/872docs: Add AI Agent Dev School Parts 2 and 3 summaries and timestamps by @YoungPhlo in https://github.com/ai16z/eliza/pull/877Add google model env vars by @peersky in https://github.com/ai16z/eliza/pull/875feat: working farcaster client with neynar by @sayangel in https://github.com/ai16z/eliza/pull/570fix: re-enable coverage report upload to Codecov in CI workflow by @snobbee in https://github.com/ai16z/eliza/pull/880chore: disable building docs on build command by @shakkernerd in https://github.com/ai16z/eliza/pull/884feat: Add Flow Blockchain plugin by @btspoony in https://github.com/ai16z/eliza/pull/874chore: enhance dev script, performance improvement and add help message by @shakkernerd in https://github.com/ai16z/eliza/pull/887chore: added more help message to the important notice text. by @shakkernerd in https://github.com/ai16z/eliza/pull/891chore: improved dev command by @shakkernerd in https://github.com/ai16z/eliza/pull/892fix: twitter actions not triggering by @cygaar in https://github.com/ai16z/eliza/pull/903chore: update models for groq by @oxSaturn in https://github.com/ai16z/eliza/pull/890fix: evaluation json parsing by @cygaar in https://github.com/ai16z/eliza/pull/907docs: Add What Did You Get Done This Week #4 summaries and timestamps by @YoungPhlo in https://github.com/ai16z/eliza/pull/895feat: create README_TH.md by @asianviking in https://github.com/ai16z/eliza/pull/918feat: update gaianet config by @L-jasmine in https://github.com/ai16z/eliza/pull/915feat: allow users to configure models for groq by @oxSaturn in https://github.com/ai16z/eliza/pull/910chore: Consistent language for Community &amp; Contact link label by @golryang in https://github.com/ai16z/eliza/pull/899chore: deprecate text based way of generating JSON by @monilpat in https://github.com/ai16z/eliza/pull/920fix: Farcater client cleanup and fixed response logic by @sayangel in https://github.com/ai16z/eliza/pull/914feat: MAX_TWEET_LENGTH env implementation by @onur-saf in https://github.com/ai16z/eliza/pull/912feat: implement advanced coinbase trading by @monilpat in https://github.com/ai16z/eliza/pull/725feat: add dynamic watch paths for agent development by @samuveth in https://github.com/ai16z/eliza/pull/931fix: use of Heurist model env vars by @boxhock in https://github.com/ai16z/eliza/pull/924fix: update quickstart and .env.example by @oxSaturn in https://github.com/ai16z/eliza/pull/932feat: add readContract / invokeContract functionality to Coinbase plugin by @monilpat in https://github.com/ai16z/eliza/pull/923fix: telegram response memory userId to agentId by @bmgalego in https://github.com/ai16z/eliza/pull/948feat: Config eternalai model from env by @genesis-0000 in https://github.com/ai16z/eliza/pull/927feat: add hyperbolic api to eliza by @meppsilon in https://github.com/ai16z/eliza/pull/828docs: add WSL installation guide by @ileana-pr in https://github.com/ai16z/eliza/pull/946fix: Revert &quot;docs: add WSL installation guide&quot; by @monilpat in https://github.com/ai16z/eliza/pull/959Fix farcaster client process action issue by @sin-bufan in https://github.com/ai16z/eliza/pull/963fix(agent): correct EVM plugin activation condition by @0xAsten in https://github.com/ai16z/eliza/pull/962fix: use MAX_TWEET_LENGTH from setting by @oxSaturn in https://github.com/ai16z/eliza/pull/960feat: Supports upload files to AWS S3. by @xwxtwd in https://github.com/ai16z/eliza/pull/941fix: update package name in faq by @oxSaturn in https://github.com/ai16z/eliza/pull/937feat: process all responses actions by @bmgalego in https://github.com/ai16z/eliza/pull/940chore: 947 add other evm chains to wallet by @n00b21337 in https://github.com/ai16z/eliza/pull/949feat: add dev script to plugin-aptos by @asianviking in https://github.com/ai16z/eliza/pull/956feat: Add hyperbolic env vars to override model class by @meppsilon in https://github.com/ai16z/eliza/pull/974chore: pass env variables when setting up GOAT and update GOAT readme by @0xaguspunk in https://github.com/ai16z/eliza/pull/898feat: Add TEE Mode to Solana Plugin by @HashWarlock in https://github.com/ai16z/eliza/pull/835chore: fix broken lockfile by @shakkernerd in https://github.com/ai16z/eliza/pull/977fix: revert llamacloud endpoint change by @odilitime in https://github.com/ai16z/eliza/pull/954feat: add callback handler to runtime evaluate method by @bmgalego in https://github.com/ai16z/eliza/pull/938fix: docker trying to filter out missing docs package by @odilitime in https://github.com/ai16z/eliza/pull/978chore: rename intiface plugin by @odilitime in https://github.com/ai16z/eliza/pull/955feat: allow character.json settings models for open router by @odilitime in https://github.com/ai16z/eliza/pull/953LinkedIn Client by @bkellgren in https://github.com/ai16z/eliza/pull/973fix: a typo in characterfile.md by @oxSaturn in https://github.com/ai16z/eliza/pull/986fix: Goat Plugin + AWS S3 Service error when env vars absent by @jnaulty in https://github.com/ai16z/eliza/pull/985docs: add WSL Setup Guide to documentation by @ileana-pr in https://github.com/ai16z/eliza/pull/983chore: add how to startup chat ui by @yodamaster726 in https://github.com/ai16z/eliza/pull/976feat: flow update generate object by @btspoony in https://github.com/ai16z/eliza/pull/929feat : github image cicd by @v1xingyue in https://github.com/ai16z/eliza/pull/889feat: Add NanoGPT provider by @dylan1951 in https://github.com/ai16z/eliza/pull/926fix: Fix Twitter Search Logic and Add Galadriel Image Model by @dontAskVI in https://github.com/ai16z/eliza/pull/994feat: create README_DE.md by @GottliebFreudenreich in https://github.com/ai16z/eliza/pull/995test: adding parsing tests. changed files parsing.test.ts by @ai16z-demirix in https://github.com/ai16z/eliza/pull/996feat: allow users to configure models for openai and anthropic by @oxSaturn in https://github.com/ai16z/eliza/pull/999fix: typo initialize by @cryptofish7 in https://github.com/ai16z/eliza/pull/1000fix: add callback to action in farcaster client by @sin-bufan in https://github.com/ai16z/eliza/pull/1002chore: Bring Develop up to date with HEAD by @odilitime in https://github.com/ai16z/eliza/pull/1006feat: twitter client enhancements by @tharak123455 in https://github.com/ai16z/eliza/pull/913docs: Add templates documentation to the project by @Lukapetro in https://github.com/ai16z/eliza/pull/1013feat: Plugin evm multichain by @nicky-ru in https://github.com/ai16z/eliza/pull/1009test: Initial release of smoke/integration tests + testing framework by @jzvikart in https://github.com/ai16z/eliza/pull/993docs: &quot;AI Agent Dev School Part 4&quot; livestream notes by @YoungPhlo in https://github.com/ai16z/eliza/pull/1015chore: Twitter search switch by @odilitime in https://github.com/ai16z/eliza/pull/1003feat: improve Twitter client with action processing by @dorianjanezic in https://github.com/ai16z/eliza/pull/1007fix: refactor contributor page by @tcm390 in https://github.com/ai16z/eliza/pull/809chore: Update CI configuration to enable test coverage and add covera‚Ä¶ by @snobbee in https://github.com/ai16z/eliza/pull/1019chore: Twitter fetchHomeTimeline rework by @odilitime in https://github.com/ai16z/eliza/pull/1021docs: Update README.md by @sergical in https://github.com/ai16z/eliza/pull/1024feat: Add custom fetch logic for agent by @v1xingyue in https://github.com/ai16z/eliza/pull/1010docs: Update README.md by @sergical in https://github.com/ai16z/eliza/pull/1025add echochambers by @savageops in https://github.com/ai16z/eliza/pull/997chore: Push Develop into Main by @odilitime in https://github.com/ai16z/eliza/pull/1028feat: create example folder with example plugin by @monilpat in https://github.com/ai16z/eliza/pull/1004feat: add venice.ai api model provider by @proteanx in https://github.com/ai16z/eliza/pull/1008feat: Add AI Agent Dev School Tutorial Link by @lalalune in https://github.com/ai16z/eliza/pull/1038feat: Add Discord Team features by @azep-ninja in https://github.com/ai16z/eliza/pull/1032docs: characterfile.md docs outdated with latest eliza version by @tqdpham96 in https://github.com/ai16z/eliza/pull/1042feat: improve voice processing and add deepgram transcription option by @tcm390 in https://github.com/ai16z/eliza/pull/1026fix: use pull_request_target for integration tests by @jnaulty in https://github.com/ai16z/eliza/pull/1035feat: client-discord stop implementation / agent improvements by @odilitime in https://github.com/ai16z/eliza/pull/1029fix: re-enable generateNewTweetLoop / lint fixes by @odilitime in https://github.com/ai16z/eliza/pull/1043chore: release develop into main by @odilitime in https://github.com/ai16z/eliza/pull/1045chore: improve smokeTests environment validation and logging by @aramxc in https://github.com/ai16z/eliza/pull/1046fix: add auto to clients in types to use client-auto by @HashWarlock in https://github.com/ai16z/eliza/pull/1050feat: add/change change through REST api (client-direct) by @odilitime in https://github.com/ai16z/eliza/pull/1052fix: discord client ci issues by @cygaar in https://github.com/ai16z/eliza/pull/1054fix: Fix bun lockfiles by @jzvikart in https://github.com/ai16z/eliza/pull/1055fix: Allow bot to post tweets with images generated by the imageGenerationPlugin by @tcm390 in https://github.com/ai16z/eliza/pull/1040feat: Add Telegram Team features by @azep-ninja in https://github.com/ai16z/eliza/pull/1033feat: add venice.ai image generation by @proteanx in https://github.com/ai16z/eliza/pull/1057feat: improve X/Twitter login with cookie validation and retry mechanism by @arslanaybars in https://github.com/ai16z/eliza/pull/856feat: create README_VI.md by @tqdpham96 in https://github.com/ai16z/eliza/pull/1058Update docs (CONTRIBUTING.md) by @lessuselesss in https://github.com/ai16z/eliza/pull/1053feat: add README_TH.md in docs directory by @derRizzMeister in https://github.com/ai16z/eliza/pull/1034feat: multiversx plugin by @mgavrila in https://github.com/ai16z/eliza/pull/860feat: Add NEAR Protocol plugin by @serrrfirat in https://github.com/ai16z/eliza/pull/847chore: commented out unused variables in solana swap action's plugin by @shakkernerd in https://github.com/ai16z/eliza/pull/1073fix: incorrect eslint config file path by @shakkernerd in https://github.com/ai16z/eliza/pull/1074feat: add plugin-ton by @jinbangyi in https://github.com/ai16z/eliza/pull/1039fix: remove unnecessary devDependencies by @shakkernerd in https://github.com/ai16z/eliza/pull/1075chore: Update package.json by @Freytes in https://github.com/ai16z/eliza/pull/1031chore: improve eslint by --cache by @shengxj1 in https://github.com/ai16z/eliza/pull/1056fix: missing eslint config file by @shakkernerd in https://github.com/ai16z/eliza/pull/1076fix: remove unnecessary devDependencies by @shakkernerd in https://github.com/ai16z/eliza/pull/1077Add slack plugin by @AIFlowML in https://github.com/ai16z/eliza/pull/859fix: errors in swap action in plugin-near by @shakkernerd in https://github.com/ai16z/eliza/pull/1078Adding plugin for ZKsync Era by @arose00 in https://github.com/ai16z/eliza/pull/906fix: transfer action linting errors by @shakkernerd in https://github.com/ai16z/eliza/pull/1079chore: add npmignore file by @shakkernerd in https://github.com/ai16z/eliza/pull/1080chore: fix broken bun lockfile by @shakkernerd in https://github.com/ai16z/eliza/pull/1081fix: eslint command by @shakkernerd in https://github.com/ai16z/eliza/pull/1082chore: remove unnecessary packages by @shakkernerd in https://github.com/ai16z/eliza/pull/1083fix: dynamic import of fs module by @shakkernerd in https://github.com/ai16z/eliza/pull/1084chore: remove unused imports and rename runtime variable by @shakkernerd in https://github.com/ai16z/eliza/pull/1085fix: client slack linting errors by @shakkernerd in https://github.com/ai16z/eliza/pull/1086fix: syntax error: invalid arithmetic operator by @shakkernerd in https://github.com/ai16z/eliza/pull/1088chore: increase timeout to 3mins by @shakkernerd in https://github.com/ai16z/eliza/pull/1092chore: kill bun start by @shakkernerd in https://github.com/ai16z/eliza/pull/1093chore: debugging start behaviour by @shakkernerd in https://github.com/ai16z/eliza/pull/1094docs: add README.md to plugin-evm by @nicky-ru in https://github.com/ai16z/eliza/pull/1095fix: return types of createAgent &amp; startAgent by @BlockJuic3 in https://github.com/ai16z/eliza/pull/1097feat: Smoke Test script by @shakkernerd in https://github.com/ai16z/eliza/pull/1101feat: allow users to configure models for grok by @oxSaturn in https://github.com/ai16z/eliza/pull/1091test: adding tests for runtime.ts. Modified README since we switched to vitest by @ai16z-demirix in https://github.com/ai16z/eliza/pull/1190chore: improving client typing by @BalanaguYashwanth in https://github.com/ai16z/eliza/pull/1036fix: handle no termination message by @shakkernerd in https://github.com/ai16z/eliza/pull/1102chore: fix broken bun lockfile by @shakkernerd in https://github.com/ai16z/eliza/pull/1103fix: Fixed twitter posts include from including /n in the text by @Titan-Node in https://github.com/ai16z/eliza/pull/1070fix: add missing imports by @shakkernerd in https://github.com/ai16z/eliza/pull/1104chore: improve formatting of .env.example for better readability by @guzus in https://github.com/ai16z/eliza/pull/897feat: Lens client by @imthatcarlos in https://github.com/ai16z/eliza/pull/1098feat: Add plugin-nft-generation: create Solana NFT collections. by @xwxtwd in https://github.com/ai16z/eliza/pull/1011Documentation: Plugin list numbering and titles by @brunocalmels in https://github.com/ai16z/eliza/pull/1107feat: add plugin-sui by @jnaulty in https://github.com/ai16z/eliza/pull/934feat: plugin-story by @jacob-tucker in https://github.com/ai16z/eliza/pull/1030Fix/charity by @awidearray in https://github.com/ai16z/eliza/pull/852Feat: Update community section of docs by @madjin in https://github.com/ai16z/eliza/pull/1111fix: Revert &quot;Feat: Update community section of docs&quot; by @monilpat in https://github.com/ai16z/eliza/pull/1112feat: New docs for community section by @madjin in https://github.com/ai16z/eliza/pull/1114chore: fix broken bun lockfile by @shakkernerd in https://github.com/ai16z/eliza/pull/1115fix: load image from diff endpoints by @qgpcybs in https://github.com/ai16z/eliza/pull/837feat: Updated characters types, Discord &amp; Telegram enhancements by @azep-ninja in https://github.com/ai16z/eliza/pull/957FAL image settings escape hatch by @daojonesceo in https://github.com/ai16z/eliza/pull/814fix: add more heplful default agents (Dobby and C3PO) by @n00b21337 in https://github.com/ai16z/eliza/pull/1124fix: discord client duplicate function removal by @azep-ninja in https://github.com/ai16z/eliza/pull/1125fix: Refactor to prevent unnecessary lockfile changes by @monilpat in https://github.com/ai16z/eliza/pull/1120fix: fix the name by @n00b21337 in https://github.com/ai16z/eliza/pull/1133feat: Add chatapi.akash.network to available list of model providers (FREE LLAMA API ACCESS!) by @MbBrainz in https://github.com/ai16z/eliza/pull/1131feat: add support for handlebars templating engine as an option by @erise133 in https://github.com/ai16z/eliza/pull/1136clean newlines for new tweet by @owlcode in https://github.com/ai16z/eliza/pull/1141fix: telegram client duplicate function removal by @azep-ninja in https://github.com/ai16z/eliza/pull/1140fix: Fix Parameter Parsing in plugin-evm TransferAction and Return Transaction Hash by @FWangZil in https://github.com/ai16z/eliza/pull/965feat: allow agents to create/buy/sell tokens on FOMO.fund's bonding curve in plugin-solana by @0xNerd in https://github.com/ai16z/eliza/pull/1135chore: remove comment by @shakkernerd in https://github.com/ai16z/eliza/pull/1143fix: remove docker compose command since Docker file already runs by @rarepepi in https://github.com/ai16z/eliza/pull/1139fix: improve fomo integration by @odilitime in https://github.com/ai16z/eliza/pull/1147chore: fix PR #1147 by @odilitime in https://github.com/ai16z/eliza/pull/1148chore: Merge monday, merging develop into main by @odilitime in https://github.com/ai16z/eliza/pull/1144feat: update packages version script by @shakkernerd in https://github.com/ai16z/eliza/pull/1150chore: bump version to 0.1.6-alpha.3 by @shakkernerd in https://github.com/ai16z/eliza/pull/1152fix: fetch log level to debug by @shakkernerd in https://github.com/ai16z/eliza/pull/1153fix: fix direct-client ability to start agents by @odilitime in https://github.com/ai16z/eliza/pull/1154chore: develop into main by @shakkernerd in https://github.com/ai16z/eliza/pull/1155fix: client twitter login and auth handler by @shakkernerd in https://github.com/ai16z/eliza/pull/1158chore: bump version to 0.1.6-alpha.4 by @shakkernerd in https://github.com/ai16z/eliza/pull/1159fix: Enable multiple bots to join Discord voice channels by @tcm390 in https://github.com/ai16z/eliza/pull/1156chore: print commands to start the client and remove unused --non-itera‚Ä¶ by @yang-han in https://github.com/ai16z/eliza/pull/1163feat: make script dash compatible by @shakkernerd in https://github.com/ai16z/eliza/pull/1165fix: Fix typo in multiversx plugin prompt for creating token by @thomasWos in https://github.com/ai16z/eliza/pull/1170docs: Update &quot;What Did You Get Done This Week? 5&quot; spaces notes by @YoungPhlo in https://github.com/ai16z/eliza/pull/1174docs: fixed CONTRIBUTING.md file Issue: 1048 by @ileana-pr in https://github.com/ai16z/eliza/pull/1191test: adding tests for runtime.ts. Modified README since we switched to vitest by @ai16z-demirix in https://github.com/ai16z/eliza/pull/1190feat: integration tests fixes + library improvements by @jzvikart in https://github.com/ai16z/eliza/pull/1177docs(cn): add python 3.7 by @9547 in https://github.com/ai16z/eliza/pull/1201fix: gitpod cicd bug by @v1xingyue in https://github.com/ai16z/eliza/pull/1207docs: Update README.md by @marcNY in https://github.com/ai16z/eliza/pull/1209docs: Update &quot;CN README&quot; with more details by @tomguluson92 in https://github.com/ai16z/eliza/pull/1196chore: New docs by @madjin in https://github.com/ai16z/eliza/pull/1211fix: improve twitter post generation prompt by @cygaar in https://github.com/ai16z/eliza/pull/1217fix: Allow the bot to post messages with images generated by the imageGenerationPlugin on Telegram. by @tcm390 in https://github.com/ai16z/eliza/pull/1220fix: postgres needs the user to exist before you can add a participant by @odilitime in https://github.com/ai16z/eliza/pull/1219fix: CircuitBreaker.ts by @tomguluson92 in https://github.com/ai16z/eliza/pull/1226chore: clean up scripts by @danbednarski in https://github.com/ai16z/eliza/pull/1218fix: fail when cannot get token, add Akash to generateText switch by @vpavlin in https://github.com/ai16z/eliza/pull/1214feat: add parse mode=Markdown, enhance telegram bot output by @simpletrontdip in https://github.com/ai16z/eliza/pull/1229feat: make twitter login retry times as env by @renlulu in https://github.com/ai16z/eliza/pull/1244fix: Sync UI Client with server port env by @jonathangus in https://github.com/ai16z/eliza/pull/1239Update README for french, spanish and italian language by @azurwastaken in https://github.com/ai16z/eliza/pull/1236Update trump.character.json - Enhance terminology in the project for clarity and inclusivity by @yjshi2015 in https://github.com/ai16z/eliza/pull/1237Fix visibility issue github image cicd by @luisalrp in https://github.com/ai16z/eliza/pull/1243fix: twitterShouldRespondTemplate Fails When Defined as a String in JSON Character Config by @tcm390 in https://github.com/ai16z/eliza/pull/1242fix: optional chaining on search to avoid startup errors when search is not enabled by @netdragonx in https://github.com/ai16z/eliza/pull/1202feat: make express payload limit configurable by @renlulu in https://github.com/ai16z/eliza/pull/1245fix: Fix local_llama key warning by @odilitime in https://github.com/ai16z/eliza/pull/1250doc: add Twitter automation label notice (#1253) by @julienbrs in https://github.com/ai16z/eliza/pull/1254Update trump.character.json by @lalalune in https://github.com/ai16z/eliza/pull/1252fix: unsupported model provider: claude_vertex by @tcm390 in https://github.com/ai16z/eliza/pull/1258feat: upgrade Tavily API with comprehensive input and constrain the token consumption by @tomguluson92 in https://github.com/ai16z/eliza/pull/1246feat: add README_DE.md in docs directory by @derRizzMeister in https://github.com/ai16z/eliza/pull/1262fix: bun lockfile by @shakkernerd in https://github.com/ai16z/eliza/pull/1273chore: Revert &quot;fix: bun lockfile&quot; by @shakkernerd in https://github.com/ai16z/eliza/pull/1275fix: Fix client.push issue and update README for Slack client verification by @SumeetChougule in https://github.com/ai16z/eliza/pull/1182fix: write summary file before trying to cache it by @tobbelobb in https://github.com/ai16z/eliza/pull/1205fix: fix ENABLE_ACTION_PROCESSING logic by @oxSaturn in https://github.com/ai16z/eliza/pull/1268fix: fix lockfile by @odilitime in https://github.com/ai16z/eliza/pull/1283chore: clean up merged PR1168 by @odilitime in https://github.com/ai16z/eliza/pull/1289feat: Redis Cache Implementation by @shakkernerd in https://github.com/ai16z/eliza/pull/1279fix: integration tests fix by @twilwa in https://github.com/ai16z/eliza/pull/1291fix: bun lock file by @shakkernerd in https://github.com/ai16z/eliza/pull/1292fix: add missing claude vertex case to handleProvider by @shakkernerd in https://github.com/ai16z/eliza/pull/1293fix: output checkable variable for conditional by @twilwa in https://github.com/ai16z/eliza/pull/1294feat: Add caching support for Redis by @shakkernerd in https://github.com/ai16z/eliza/pull/1295chore: bump version to 0.1.6-alpha.5 by @shakkernerd in https://github.com/ai16z/eliza/pull/1296feat: Update main for v0.1.6-alpha.5 by @odilitime in https://github.com/ai16z/eliza/pull/1290fix: remove clients from default character by @shakkernerd in https://github.com/ai16z/eliza/pull/1297fix: default character model to LLAMALOCAL by @shakkernerd in https://github.com/ai16z/eliza/pull/1299feat: release version 0.1.6 by @shakkernerd in https://github.com/ai16z/eliza/pull/1300 New Contributors‚Äã View New Contributors @xwxtwd made their first contribution in https://github.com/ai16z/eliza/pull/784@ProphetX10 made their first contribution in https://github.com/ai16z/eliza/pull/786@mike0295 made their first contribution in https://github.com/ai16z/eliza/pull/789@rarepepi made their first contribution in https://github.com/ai16z/eliza/pull/796@dievardump made their first contribution in https://github.com/ai16z/eliza/pull/799@palsp made their first contribution in https://github.com/ai16z/eliza/pull/824@0xaptosj made their first contribution in https://github.com/ai16z/eliza/pull/818@oxSaturn made their first contribution in https://github.com/ai16z/eliza/pull/850@fede2442 made their first contribution in https://github.com/ai16z/eliza/pull/861@juntao made their first contribution in https://github.com/ai16z/eliza/pull/863@peersky made their first contribution in https://github.com/ai16z/eliza/pull/875@sayangel made their first contribution in https://github.com/ai16z/eliza/pull/570@asianviking made their first contribution in https://github.com/ai16z/eliza/pull/918@golryang made their first contribution in https://github.com/ai16z/eliza/pull/899@onur-saf made their first contribution in https://github.com/ai16z/eliza/pull/912@samuveth made their first contribution in https://github.com/ai16z/eliza/pull/931@boxhock made their first contribution in https://github.com/ai16z/eliza/pull/924@meppsilon made their first contribution in https://github.com/ai16z/eliza/pull/828@ileana-pr made their first contribution in https://github.com/ai16z/eliza/pull/946@sin-bufan made their first contribution in https://github.com/ai16z/eliza/pull/963@0xAsten made their first contribution in https://github.com/ai16z/eliza/pull/962@n00b21337 made their first contribution in https://github.com/ai16z/eliza/pull/949@bkellgren made their first contribution in https://github.com/ai16z/eliza/pull/973@jnaulty made their first contribution in https://github.com/ai16z/eliza/pull/985@dylan1951 made their first contribution in https://github.com/ai16z/eliza/pull/926@GottliebFreudenreich made their first contribution in https://github.com/ai16z/eliza/pull/995@cryptofish7 made their first contribution in https://github.com/ai16z/eliza/pull/1000@tharak123455 made their first contribution in https://github.com/ai16z/eliza/pull/913@Lukapetro made their first contribution in https://github.com/ai16z/eliza/pull/1013@nicky-ru made their first contribution in https://github.com/ai16z/eliza/pull/1009@jzvikart made their first contribution in https://github.com/ai16z/eliza/pull/993@sergical made their first contribution in https://github.com/ai16z/eliza/pull/1024@savageops made their first contribution in https://github.com/ai16z/eliza/pull/997@proteanx made their first contribution in https://github.com/ai16z/eliza/pull/1008@azep-ninja made their first contribution in https://github.com/ai16z/eliza/pull/1032@tqdpham96 made their first contribution in https://github.com/ai16z/eliza/pull/1042@aramxc made their first contribution in https://github.com/ai16z/eliza/pull/1046@arslanaybars made their first contribution in https://github.com/ai16z/eliza/pull/856@derRizzMeister made their first contribution in https://github.com/ai16z/eliza/pull/1034@mgavrila made their first contribution in https://github.com/ai16z/eliza/pull/860@serrrfirat made their first contribution in https://github.com/ai16z/eliza/pull/847@jinbangyi made their first contribution in https://github.com/ai16z/eliza/pull/1039@shengxj1 made their first contribution in https://github.com/ai16z/eliza/pull/1056@AIFlowML made their first contribution in https://github.com/ai16z/eliza/pull/859@arose00 made their first contribution in https://github.com/ai16z/eliza/pull/906@BlockJuic3 made their first contribution in https://github.com/ai16z/eliza/pull/1097@BalanaguYashwanth made their first contribution in https://github.com/ai16z/eliza/pull/1036@Titan-Node made their first contribution in https://github.com/ai16z/eliza/pull/1070@guzus made their first contribution in https://github.com/ai16z/eliza/pull/897@imthatcarlos made their first contribution in https://github.com/ai16z/eliza/pull/1098@brunocalmels made their first contribution in https://github.com/ai16z/eliza/pull/1107@jacob-tucker made their first contribution in https://github.com/ai16z/eliza/pull/1030@qgpcybs made their first contribution in https://github.com/ai16z/eliza/pull/837@daojonesceo made their first contribution in https://github.com/ai16z/eliza/pull/814@MbBrainz made their first contribution in https://github.com/ai16z/eliza/pull/1131@erise133 made their first contribution in https://github.com/ai16z/eliza/pull/1136@owlcode made their first contribution in https://github.com/ai16z/eliza/pull/1141@FWangZil made their first contribution in https://github.com/ai16z/eliza/pull/965@0xNerd made their first contribution in https://github.com/ai16z/eliza/pull/1135@yang-han made their first contribution in https://github.com/ai16z/eliza/pull/1163@thomasWos made their first contribution in https://github.com/ai16z/eliza/pull/1170@9547 made their first contribution in https://github.com/ai16z/eliza/pull/1201@marcNY made their first contribution in https://github.com/ai16z/eliza/pull/1209@danbednarski made their first contribution in https://github.com/ai16z/eliza/pull/1218@vpavlin made their first contribution in https://github.com/ai16z/eliza/pull/1214@simpletrontdip made their first contribution in https://github.com/ai16z/eliza/pull/1229@renlulu made their first contribution in https://github.com/ai16z/eliza/pull/1244@jonathangus made their first contribution in https://github.com/ai16z/eliza/pull/1239@azurwastaken made their first contribution in https://github.com/ai16z/eliza/pull/1236@yjshi2015 made their first contribution in https://github.com/ai16z/eliza/pull/1237@luisalrp made their first contribution in https://github.com/ai16z/eliza/pull/1243@netdragonx made their first contribution in https://github.com/ai16z/eliza/pull/1202@julienbrs made their first contribution in https://github.com/ai16z/eliza/pull/1254@SumeetChougule made their first contribution in https://github.com/ai16z/eliza/pull/1182@tobbelobb made their first contribution in https://github.com/ai16z/eliza/pull/1205 Full Changelog: https://github.com/ai16z/eliza/compare/v0.1.5...v0.1.6‚Äã v0.1.5 (December 02, 2024)‚Äã What's Changed‚Äã feat: adding back the renovate file for automated security scanning by @sirkitree in https://github.com/ai16z/eliza/pull/358feat: readme and linting by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/449fix: postgres embedding issues by @tarrencev in https://github.com/ai16z/eliza/pull/425fix: X dry run by @laser-riot in https://github.com/ai16z/eliza/pull/452Add npm install instructions to homepage header by @null-hax in https://github.com/ai16z/eliza/pull/459docs: Fix my name in stream notes by @odilitime in https://github.com/ai16z/eliza/pull/442feat: create-eliza-app by @coffeeorgreentea in https://github.com/ai16z/eliza/pull/462fix: Add missing fuzzystrmatch extension for levenshtein() method to postgresql schema.sql definition by @martincik in https://github.com/ai16z/eliza/pull/460fix: Fixing failling tests token.test.ts and videoGeneration.test.ts by @ai16z-demirix in https://github.com/ai16z/eliza/pull/465feat: init github client by @tarrencev in https://github.com/ai16z/eliza/pull/456docs: Add Discord username question by @odilitime in https://github.com/ai16z/eliza/pull/468docs: Update Contributors to bring inline with PR468 by @odilitime in https://github.com/ai16z/eliza/pull/470feat: Cache Manager by @bmgalego in https://github.com/ai16z/eliza/pull/378ollama generate case was using console.debug. by @drew-royster in https://github.com/ai16z/eliza/pull/474fix: ci by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/475feat: Twitter Refactor by @bmgalego in https://github.com/ai16z/eliza/pull/478refactor: add template types by @vivoidos in https://github.com/ai16z/eliza/pull/479feat: adds check by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/466fix: ignored modelEndpointOverride in generation by @darwintree in https://github.com/ai16z/eliza/pull/446feat: Improvements by @bmgalego in https://github.com/ai16z/eliza/pull/482fix: agent type error and sqlite file env by @bmgalego in https://github.com/ai16z/eliza/pull/484fix: agent loadCharacters file resolver by @bmgalego in https://github.com/ai16z/eliza/pull/486fix: fix character path loading by @bmgalego in https://github.com/ai16z/eliza/pull/487fix: added missing packages to tsup configs' externals by @massivefermion in https://github.com/ai16z/eliza/pull/488docs: Create best-practices.md documentation by @snobbee in https://github.com/ai16z/eliza/pull/463feat: Added TWITTER_COOKIE example on quickstart.md by @haeunchin in https://github.com/ai16z/eliza/pull/476feat: Improve knowledge embeddings by @tarrencev in https://github.com/ai16z/eliza/pull/472feat: improve type saftey by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/494fix: improve embeddings by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/496node-v by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/501fix: deps by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/503chore: add contributor license by @awidearray in https://github.com/ai16z/eliza/pull/502fix: remove sol dep by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/504fix: issue with npm by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/505fix: services fix by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/509fix: speech service fix by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/512docs: add template and client configuration guide by @oguzserdar in https://github.com/ai16z/eliza/pull/510Wrap fastembed in try catch to allow non node environments to build by @antpb in https://github.com/ai16z/eliza/pull/508fix: husky and pre-commit by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/514fix: lint by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/515test: add linter to all packages and enable vitest by @snobbee in https://github.com/ai16z/eliza/pull/490feat: add coinbase plugin starting with cb commerce functionality by @monilpat in https://github.com/ai16z/eliza/pull/513fix: Gracefully Handle Add Participants Unique Constraint Error in Postgres by @VarKrishin in https://github.com/ai16z/eliza/pull/495fix: Ollama fix by @yodamaster726 in https://github.com/ai16z/eliza/pull/524fix: ollama local and llama local by @yodamaster726 in https://github.com/ai16z/eliza/pull/521fix: Fix/telegram by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/530fix(deps): update dependency @ai-sdk/anthropic to ^0.0.56 by @renovate in https://github.com/ai16z/eliza/pull/528fix(deps): pin dependencies by @renovate in https://github.com/ai16z/eliza/pull/529chore(deps): pin dependencies by @renovate in https://github.com/ai16z/eliza/pull/526fix(deps): update dependency @ai-sdk/openai to v1.0.4 by @renovate in https://github.com/ai16z/eliza/pull/533fix(deps): update dependency @ai-sdk/google-vertex to ^0.0.43 by @renovate in https://github.com/ai16z/eliza/pull/532fix: pass runtime to video service by @0xFlicker in https://github.com/ai16z/eliza/pull/535fix: discord voice memory id not unique by @bmgalego in https://github.com/ai16z/eliza/pull/540fix: db queries not using agentId in all memory queries by @bmgalego in https://github.com/ai16z/eliza/pull/539fix: error in getGoals and remove coinbase package-lock.json by @bmgalego in https://github.com/ai16z/eliza/pull/545fix: Use BigInt for tweet IDs in client-twitter by @wraitii in https://github.com/ai16z/eliza/pull/552fix: add try catch to process action by @bmgalego in https://github.com/ai16z/eliza/pull/546fix: generateText format consistency by @tomguluson92 in https://github.com/ai16z/eliza/pull/550fix: bump echogarden to fix case sensitive issue by @0xFlicker in https://github.com/ai16z/eliza/pull/561Improved Twitter Documentation by @grallc in https://github.com/ai16z/eliza/pull/559fix: sql command by @0xFlicker in https://github.com/ai16z/eliza/pull/560fix: remove db adapters depencies from core and remove plugin-node from telegram by @bmgalego in https://github.com/ai16z/eliza/pull/571fix: add missing documents and knowledge memory managers to runtime interface by @bmgalego in https://github.com/ai16z/eliza/pull/572fix: remove postinstall script from plugin-coinbase by @bmgalego in https://github.com/ai16z/eliza/pull/573fix: postgres by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/557fix: Token provider getHighestLiquidityPair by @bmgalego in https://github.com/ai16z/eliza/pull/547Add community stream notes for WDYGDTW 2 by @YoungPhlo in https://github.com/ai16z/eliza/pull/580feat: add new pages by @madjin in https://github.com/ai16z/eliza/pull/581fix: Devex Fixes by @lalalune in https://github.com/ai16z/eliza/pull/583feat: update api docs by @madjin in https://github.com/ai16z/eliza/pull/582feat: Update packages by @lalalune in https://github.com/ai16z/eliza/pull/584Update dependency @echogarden/espeak-ng-emscripten to v0.3.3 by @renovate in https://github.com/ai16z/eliza/pull/537Update dependency @opendocsg/pdf2md to v0.1.32 by @renovate in https://github.com/ai16z/eliza/pull/538Update dependency agent-twitter-client to v0.0.14 by @renovate in https://github.com/ai16z/eliza/pull/542Update docusaurus monorepo to v3.6.3 by @renovate in https://github.com/ai16z/eliza/pull/543Update dependency clsx to v2.1.1 by @renovate in https://github.com/ai16z/eliza/pull/544feat: More package updates by @lalalune in https://github.com/ai16z/eliza/pull/585Pin dependency vue to 3.5.13 by @renovate in https://github.com/ai16z/eliza/pull/527feat: Shaw/realityspiral/coinbase fixes by @lalalune in https://github.com/ai16z/eliza/pull/586feat: implement coinbase mass payments across base/sol/eth/pol/arb by @monilpat in https://github.com/ai16z/eliza/pull/569Shaw/logger fixes by @lalalune in https://github.com/ai16z/eliza/pull/587fix: missing updates for logger.ts by @yodamaster726 in https://github.com/ai16z/eliza/pull/525fix: React Client fixes by @lalalune in https://github.com/ai16z/eliza/pull/588feat: add agent selection, router and sidebar layout in React client by @vivoidos in https://github.com/ai16z/eliza/pull/536fix: fixing failing goals, cache and token tests by @ai16z-demirix in https://github.com/ai16z/eliza/pull/522fix: Shaw/fix zerog by @lalalune in https://github.com/ai16z/eliza/pull/589feat: Add 0G plugin for file storage by @Wilbert957 in https://github.com/ai16z/eliza/pull/416fix: enable test run in CI for core package by @pgoos in https://github.com/ai16z/eliza/pull/590CS - first api hookups. by @justabot in https://github.com/ai16z/eliza/pull/564feat: update sidebars by @madjin in https://github.com/ai16z/eliza/pull/593Download updates by @justabot in https://github.com/ai16z/eliza/pull/594feat: Farcaster Client by @bmgalego in https://github.com/ai16z/eliza/pull/386Pr 33 by @MarcoMandar in https://github.com/ai16z/eliza/pull/596fix: discord crash on sending message to null channel by @odilitime in https://github.com/ai16z/eliza/pull/598fix: db queries in sqljs database adapter not using agentId by @bmgalego in https://github.com/ai16z/eliza/pull/606fix: agent DirectClient is not a type by @odilitime in https://github.com/ai16z/eliza/pull/605fix: add Memory Manager getMemoriesByRoomIds missing tableName param by @bmgalego in https://github.com/ai16z/eliza/pull/602fix: time prompt to include UTC, convert to verbose english to help prompting by @odilitime in https://github.com/ai16z/eliza/pull/603feat: add knowledge to state by @bmgalego in https://github.com/ai16z/eliza/pull/600feat: Adding tests for actions and generation. Skiping test step in defaultCharacters by @ai16z-demirix in https://github.com/ai16z/eliza/pull/591feat: sell simulation service by @MarcoMandar in https://github.com/ai16z/eliza/pull/597fix: use correct getCachedEmbeddings query_field_sub_name by @bmgalego in https://github.com/ai16z/eliza/pull/607fix: knowledge module exporting process by @bmgalego in https://github.com/ai16z/eliza/pull/609fix: add client farcaster templates to character type by @bmgalego in https://github.com/ai16z/eliza/pull/610feat: make node-plugin lazy-loaded for faster boot times by @bmgalego in https://github.com/ai16z/eliza/pull/599chore(nvmrc): update Node.js version from v23.1.0 to v23.3.0 by @wolfcito in https://github.com/ai16z/eliza/pull/611fix: Fix buttplug.io integration and merge by @lalalune in https://github.com/ai16z/eliza/pull/612feat: Add buttplug.io integration by @8times4 in https://github.com/ai16z/eliza/pull/517fix: Update and add Conflux by @lalalune in https://github.com/ai16z/eliza/pull/613feat: add Conflux plugin by @darwintree in https://github.com/ai16z/eliza/pull/481feat: Add decentralized inferencing for Eliza (LLAMA, Hermes, Flux) by @genesis-0000 in https://github.com/ai16z/eliza/pull/516fix: memory similarity log &amp; new knowledge ingestion by @yoniebans in https://github.com/ai16z/eliza/pull/616feat: starknet portfolio provider by @milancermak in https://github.com/ai16z/eliza/pull/595bugfix: Modify docker run error after agent folder move by @THtianhao in https://github.com/ai16z/eliza/pull/458fix: handle when tweet_results is empty better by @odilitime in https://github.com/ai16z/eliza/pull/620fix: small improvements to agent process exits by @cygaar in https://github.com/ai16z/eliza/pull/625Feat/sell simulation by @MarcoMandar in https://github.com/ai16z/eliza/pull/627fix: Add Tweet Response Deduplication Check by @tsubasakong in https://github.com/ai16z/eliza/pull/622fix: node package builds by @cygaar in https://github.com/ai16z/eliza/pull/636dicord bot voice by @tcm390 in https://github.com/ai16z/eliza/pull/633feat: Initial TEE Plugin by @HashWarlock in https://github.com/ai16z/eliza/pull/632Notes for AI Agent Dev School #1 by @YoungPhlo in https://github.com/ai16z/eliza/pull/638feat: Merge EVM and add character override by @lalalune in https://github.com/ai16z/eliza/pull/643fix: Add docs, update providers for TEE Plugin by @HashWarlock in https://github.com/ai16z/eliza/pull/640fix: running a character.json fails when running per docs by @yodamaster726 in https://github.com/ai16z/eliza/pull/624feat: support starkname by @irisdv in https://github.com/ai16z/eliza/pull/628refactor: better db connection handling by @cygaar in https://github.com/ai16z/eliza/pull/635add connection instruction for connecting with X by @zjasper666 in https://github.com/ai16z/eliza/pull/641Feat/simulation sell types by @MarcoMandar in https://github.com/ai16z/eliza/pull/642updates postgres setup instructions in docs by @DataRelic in https://github.com/ai16z/eliza/pull/645Update ci.yaml by @snobbee in https://github.com/ai16z/eliza/pull/652feat: improve browser service by @cygaar in https://github.com/ai16z/eliza/pull/653added support for LlamaLocal's path outside plugin-node/dist by @dr-fusion in https://github.com/ai16z/eliza/pull/649CS - adding better errors and readme. by @justabot in https://github.com/ai16z/eliza/pull/654feat: implement coinbase trading by @monilpat in https://github.com/ai16z/eliza/pull/608fix: bun-lock.yaml by @monilpat in https://github.com/ai16z/eliza/pull/664feat: add minimal config file for code cov by @pgoos in https://github.com/ai16z/eliza/pull/659fix: embedding search for non-openai models by @cygaar in https://github.com/ai16z/eliza/pull/660feat: evm pubkey derivation by @St4rgarden in https://github.com/ai16z/eliza/pull/667fix: add missing commands to quickstart by @0xaguspunk in https://github.com/ai16z/eliza/pull/665Add Galadriel LLM Inference Provider by @dontAskVI in https://github.com/ai16z/eliza/pull/651redpill custom models by @v1xingyue in https://github.com/ai16z/eliza/pull/668feat: Add wallet history (transactions, balances) to coinbase providers by @monilpat in https://github.com/ai16z/eliza/pull/658fix: discord permissions and duplicate reactions, new /joinchannel command by @augchan42 in https://github.com/ai16z/eliza/pull/662feat: add image text model provider separation and fal.ai integration by @yoniebans in https://github.com/ai16z/eliza/pull/650feat : whatsapp by @awidearray in https://github.com/ai16z/eliza/pull/626feat: add ICP token creation support by @asDNSk in https://github.com/ai16z/eliza/pull/357integrate tavily by @tcm390 in https://github.com/ai16z/eliza/pull/518incorrect package install location Update plugins.md by @cryptoradagast in https://github.com/ai16z/eliza/pull/669fix: eslint not working by @cygaar in https://github.com/ai16z/eliza/pull/672fix: add missing viem dependency by @HashWarlock in https://github.com/ai16z/eliza/pull/674fix: embeddings for messages with urls by @cygaar in https://github.com/ai16z/eliza/pull/671Fix: run tests with coverage by @pgoos in https://github.com/ai16z/eliza/pull/676feat: improve embeddings, models and connectivity by @augchan42 in https://github.com/ai16z/eliza/pull/677fix: Make TEE Plugin available to launch agent &amp; fix previous launch error by @HashWarlock in https://github.com/ai16z/eliza/pull/678fix: getEmbeddingZeroVector calls by @cygaar in https://github.com/ai16z/eliza/pull/682feat: add Turborepo by @lalalune in https://github.com/ai16z/eliza/pull/670feat: make twitter client polling configurable by @cygaar in https://github.com/ai16z/eliza/pull/683chore: remove unused packages introduced in #677 by @shakkernerd in https://github.com/ai16z/eliza/pull/693Fix/logging issues by @augchan42 in https://github.com/ai16z/eliza/pull/688chore: Remove web-agent folder - duplicate of client folder by @shakkernerd in https://github.com/ai16z/eliza/pull/699fix: update docker image to support turbo and reduce build time by @HashWarlock in https://github.com/ai16z/eliza/pull/702fix: Switch from tiktoken to js-tiktoken for worker compatibility by @antpb in https://github.com/ai16z/eliza/pull/703fix: simplify linting dependencies by @cygaar in https://github.com/ai16z/eliza/pull/721fix: twitter recent interactions by @cygaar in https://github.com/ai16z/eliza/pull/729feat: add new pages, update sidebar by @madjin in https://github.com/ai16z/eliza/pull/728feat: increase knowledge context by @cygaar in https://github.com/ai16z/eliza/pull/730refactor: ClientBase to use a map for managing multiple Twitter clients by account identifier by @tcm390 in https://github.com/ai16z/eliza/pull/722fix: move fastembed import to the isnode condition check by @antpb in https://github.com/ai16z/eliza/pull/709chore: remove unused env var by @2pmflow in https://github.com/ai16z/eliza/pull/737fix (core): message completion footer format by @CodingTux in https://github.com/ai16z/eliza/pull/742fix(deps): pin dependencies by @renovate in https://github.com/ai16z/eliza/pull/744fix: packagejson updated to latest agent-client 0.0.16 by @denizekiz in https://github.com/ai16z/eliza/pull/753Add running with Gitpod by @v1xingyue in https://github.com/ai16z/eliza/pull/758fix(deps): update dependency @ai-sdk/openai to v1.0.5 by @renovate in https://github.com/ai16z/eliza/pull/751Update environment, add twitter quality of life updates by @lalalune in https://github.com/ai16z/eliza/pull/765fix: improve twitter post content quality by @cygaar in https://github.com/ai16z/eliza/pull/763fix(deps): update dependency tailwind-merge to v2.5.5 by @renovate in https://github.com/ai16z/eliza/pull/761fix: recentPosts always empty by @tcm390 in https://github.com/ai16z/eliza/pull/756feat: Pin dependencies and unify tsconfig by @lalalune in https://github.com/ai16z/eliza/pull/767Update dependency dompurify to v3.2.2 by @renovate in https://github.com/ai16z/eliza/pull/548Update dependency @supabase/supabase-js to v2.46.2 by @renovate in https://github.com/ai16z/eliza/pull/754Update dependency clsx to v2.1.1 by @renovate in https://github.com/ai16z/eliza/pull/760Update dependency uuid to v11.0.3 by @renovate in https://github.com/ai16z/eliza/pull/766fix: follow-up improvements for ICP token creation (PR #357) by @asDNSk in https://github.com/ai16z/eliza/pull/757feat: more dependency updates by @lalalune in https://github.com/ai16z/eliza/pull/771fix(deps): replace dependency eslint-plugin-vitest with @vitest/eslint-plugin 1.0.1 by @renovate in https://github.com/ai16z/eliza/pull/749chore(deps): update dependency @eslint/js to v9.16.0 by @renovate in https://github.com/ai16z/eliza/pull/769chore(deps): update dependency @vitest/eslint-plugin to v1.1.13 by @renovate in https://github.com/ai16z/eliza/pull/770fix(deps): update sqlite related by @renovate in https://github.com/ai16z/eliza/pull/768fix: Integrate jin's docs changes and rebuild docs with a16z by @lalalune in https://github.com/ai16z/eliza/pull/772feat: Create community section by @madjin in https://github.com/ai16z/eliza/pull/745Integrate goat plugin by @lalalune in https://github.com/ai16z/eliza/pull/773feat: add goat plugin by @0xaguspunk in https://github.com/ai16z/eliza/pull/736Add decentralized GenAI backend by @L-jasmine in https://github.com/ai16z/eliza/pull/762Integrate more LLMs, fix case issue in switch by @lalalune in https://github.com/ai16z/eliza/pull/774Merge more model providers and fix issues by @lalalune in https://github.com/ai16z/eliza/pull/775feat: Add two more providers: Ali Bailian(Qwen) and Volengine(Doubao, Bytedance) by @btspoony in https://github.com/ai16z/eliza/pull/747add simulator tutor for plugin-tee docs by @shelvenzhou in https://github.com/ai16z/eliza/pull/746feat: (voice) enhance character card voice configuration support by @augchan42 in https://github.com/ai16z/eliza/pull/698feat: donate 1% of coinbase transactions by default by @monilpat in https://github.com/ai16z/eliza/pull/759Create docker-setup.md by @Freytes in https://github.com/ai16z/eliza/pull/776fix: Refactor image interface and update to move llama cloud -&gt; together provider by @lalalune in https://github.com/ai16z/eliza/pull/777fix: Text2Image interface refactored by @tomguluson92 in https://github.com/ai16z/eliza/pull/752refactor: refactor dockerfile to reduce image and build time by @HashWarlock in https://github.com/ai16z/eliza/pull/782feat: Update default character by @lalalune in https://github.com/ai16z/eliza/pull/781 New Contributors‚Äã View New Contributors @laser-riot made their first contribution in https://github.com/ai16z/eliza/pull/452@null-hax made their first contribution in https://github.com/ai16z/eliza/pull/459@coffeeorgreentea made their first contribution in https://github.com/ai16z/eliza/pull/462@drew-royster made their first contribution in https://github.com/ai16z/eliza/pull/474@darwintree made their first contribution in https://github.com/ai16z/eliza/pull/446@massivefermion made their first contribution in https://github.com/ai16z/eliza/pull/488@snobbee made their first contribution in https://github.com/ai16z/eliza/pull/463@haeunchin made their first contribution in https://github.com/ai16z/eliza/pull/476@awidearray made their first contribution in https://github.com/ai16z/eliza/pull/502@antpb made their first contribution in https://github.com/ai16z/eliza/pull/508@VarKrishin made their first contribution in https://github.com/ai16z/eliza/pull/495@yodamaster726 made their first contribution in https://github.com/ai16z/eliza/pull/524@0xFlicker made their first contribution in https://github.com/ai16z/eliza/pull/535@wraitii made their first contribution in https://github.com/ai16z/eliza/pull/552@tomguluson92 made their first contribution in https://github.com/ai16z/eliza/pull/550@grallc made their first contribution in https://github.com/ai16z/eliza/pull/559@YoungPhlo made their first contribution in https://github.com/ai16z/eliza/pull/580@Wilbert957 made their first contribution in https://github.com/ai16z/eliza/pull/416@pgoos made their first contribution in https://github.com/ai16z/eliza/pull/590@justabot made their first contribution in https://github.com/ai16z/eliza/pull/564@wolfcito made their first contribution in https://github.com/ai16z/eliza/pull/611@8times4 made their first contribution in https://github.com/ai16z/eliza/pull/517@genesis-0000 made their first contribution in https://github.com/ai16z/eliza/pull/516@yoniebans made their first contribution in https://github.com/ai16z/eliza/pull/616@milancermak made their first contribution in https://github.com/ai16z/eliza/pull/595@THtianhao made their first contribution in https://github.com/ai16z/eliza/pull/458@cygaar made their first contribution in https://github.com/ai16z/eliza/pull/625@irisdv made their first contribution in https://github.com/ai16z/eliza/pull/628@zjasper666 made their first contribution in https://github.com/ai16z/eliza/pull/641@DataRelic made their first contribution in https://github.com/ai16z/eliza/pull/645@dr-fusion made their first contribution in https://github.com/ai16z/eliza/pull/649@St4rgarden made their first contribution in https://github.com/ai16z/eliza/pull/667@0xaguspunk made their first contribution in https://github.com/ai16z/eliza/pull/665@dontAskVI made their first contribution in https://github.com/ai16z/eliza/pull/651@augchan42 made their first contribution in https://github.com/ai16z/eliza/pull/662@asDNSk made their first contribution in https://github.com/ai16z/eliza/pull/357@cryptoradagast made their first contribution in https://github.com/ai16z/eliza/pull/669@2pmflow made their first contribution in https://github.com/ai16z/eliza/pull/737@CodingTux made their first contribution in https://github.com/ai16z/eliza/pull/742@L-jasmine made their first contribution in https://github.com/ai16z/eliza/pull/762@btspoony made their first contribution in https://github.com/ai16z/eliza/pull/747@shelvenzhou made their first contribution in https://github.com/ai16z/eliza/pull/746@Freytes made their first contribution in https://github.com/ai16z/eliza/pull/776 Full Changelog: https://github.com/ai16z/eliza/compare/v0.1.3...v0.1.5‚Äã v0.1.3 (November 20, 2024)‚Äã What's Changed‚Äã docs: Update contributing.md to incorporate Contribution Guidelines by @monilpat in https://github.com/ai16z/eliza/pull/430fix: linting and imports ready for npm by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/433feat: don't require .env to exist by @odilitime in https://github.com/ai16z/eliza/pull/427chore: Update pr.yaml to show actual condition so easier to follow by @monilpat in https://github.com/ai16z/eliza/pull/429fix: imports by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/435fix: path by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/436fix: since agent is moved out of packages, adjust default path by @odilitime in https://github.com/ai16z/eliza/pull/432fix: Fix linter issues by @martincik in https://github.com/ai16z/eliza/pull/397feat: add all the style guidelines to the context by @o-on-x in https://github.com/ai16z/eliza/pull/441fix: fixes some console logs by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/440fix: The bot is by default deafened and we don't want that by @martincik in https://github.com/ai16z/eliza/pull/437fix: unrug by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/444fix: voice perms by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/447 Full Changelog: https://github.com/ai16z/eliza/compare/v0.1.2...v0.1.3 v0.1.1 (November 20, 2024)‚Äã What's Changed‚Äã Groq api integration by @juke in https://github.com/ai16z/eliza/pull/194Updated documentation by @atvonsc in https://github.com/ai16z/eliza/pull/195Major documentation updates by @madjin in https://github.com/ai16z/eliza/pull/199swap Dao action initital by @MarcoMandar in https://github.com/ai16z/eliza/pull/196Swap functionality by @lalalune in https://github.com/ai16z/eliza/pull/197Add RedPill API Support by @HashWarlock in https://github.com/ai16z/eliza/pull/198Fix Discord Voice and DMs by @lalalune in https://github.com/ai16z/eliza/pull/203Shaw fix characters paths, .ts requirement and missings args by @lalalune in https://github.com/ai16z/eliza/pull/204Implement grok by @MeDott29 in https://github.com/ai16z/eliza/pull/216add the template overrides by @lalalune in https://github.com/ai16z/eliza/pull/207lazy load llama by @lalalune in https://github.com/ai16z/eliza/pull/220Abstracts Eliza into a Package to enble publishing onto NPM along with plugin system by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/214Add OLLAMA as Model Provider by @o-on-x in https://github.com/ai16z/eliza/pull/221models.gguf stored in models file, &amp; tsconfig changes for ref @eliza/core &amp; other things by @o-on-x in https://github.com/ai16z/eliza/pull/224plugin-image-generation tsconfig.json fix &amp; ollama error handling by @o-on-x in https://github.com/ai16z/eliza/pull/228Update Docs by @madjin in https://github.com/ai16z/eliza/pull/231update docs by @madjin in https://github.com/ai16z/eliza/pull/233move code out to plugins, adapters and clients by @lalalune in https://github.com/ai16z/eliza/pull/225Added OpenRouter model provider by @o-on-x in https://github.com/ai16z/eliza/pull/245Support google models in generation by @parzival418 in https://github.com/ai16z/eliza/pull/246trust integration by @MarcoMandar in https://github.com/ai16z/eliza/pull/248Working PostGres Adapter by @cvartanian in https://github.com/ai16z/eliza/pull/247use openai embeddings setting by @o-on-x in https://github.com/ai16z/eliza/pull/252refactor embeddings by @o-on-x in https://github.com/ai16z/eliza/pull/254embedding set to use openai endpoint when using openai embeddings by @o-on-x in https://github.com/ai16z/eliza/pull/255bigint support in logger by @o-on-x in https://github.com/ai16z/eliza/pull/256Fix: changed claude-3-5-haiku to claude-3-5-haiku-20241022 for fixing‚Ä¶ by @denizekiz in https://github.com/ai16z/eliza/pull/257Update docs by @madjin in https://github.com/ai16z/eliza/pull/253cachedEmbeddings fix by @dorianjanezic in https://github.com/ai16z/eliza/pull/262add verbose config with logger by @v1xingyue in https://github.com/ai16z/eliza/pull/249recommendations, token info, client auto by @MarcoMandar in https://github.com/ai16z/eliza/pull/250fix: docs features darkmode color by @fabianhug in https://github.com/ai16z/eliza/pull/266docs homepage rework by @mrpspring in https://github.com/ai16z/eliza/pull/280Improve Docs by @madjin in https://github.com/ai16z/eliza/pull/273Don't blow up if the wallet is missing by @ferric-sol in https://github.com/ai16z/eliza/pull/281Fix embedding calculation for sqlite by @ferric-sol in https://github.com/ai16z/eliza/pull/261Fix: compute unit increasein swapts, default is too low to make trans‚Ä¶ by @denizekiz in https://github.com/ai16z/eliza/pull/276add modelProvider to json to resolve embeddings error by @twilwa in https://github.com/ai16z/eliza/pull/274fix docs: add python as a prerequisite (needed for node-gyp) by @metadiver in https://github.com/ai16z/eliza/pull/277Bundles by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/285Loaf stuff by @lalalune in https://github.com/ai16z/eliza/pull/286Added missing GROK model provider key initialization by @FabriceIRANKUNDA in https://github.com/ai16z/eliza/pull/296Added Transfer / Send Token Action by @o-on-x in https://github.com/ai16z/eliza/pull/297telegram: start agent after client initialization by @o-on-x in https://github.com/ai16z/eliza/pull/304Telegram client refactor for bot info availability by @ropresearch in https://github.com/ai16z/eliza/pull/308Increased llama and llama based model temperatures by @alanneary17 in https://github.com/ai16z/eliza/pull/310docs: add a new Japanese README by @eltociear in https://github.com/ai16z/eliza/pull/307Add Korean and French README by @BugByClaude in https://github.com/ai16z/eliza/pull/312fix service call patterns but needs testing by @lalalune in https://github.com/ai16z/eliza/pull/311add node version check by @thearyanag in https://github.com/ai16z/eliza/pull/299added working pumpfun.ts by @o-on-x in https://github.com/ai16z/eliza/pull/313Fix broken docs by @madjin in https://github.com/ai16z/eliza/pull/321docs: add a new Portuguese README version by @gabrielsants in https://github.com/ai16z/eliza/pull/320Update Quickstart Guide by @odilitime in https://github.com/ai16z/eliza/pull/325Save Trade on creation to the backend by @MarcoMandar in https://github.com/ai16z/eliza/pull/328utils.ts example tweet splitting by @o-on-x in https://github.com/ai16z/eliza/pull/323[LLM Object Generation][1/2] Leverage AI Lib's Generate Object instead of parsing strings by @monilpat in https://github.com/ai16z/eliza/pull/309claude vertex configs added to generation.ts (was missing) by @denizekiz in https://github.com/ai16z/eliza/pull/330README_KOR.md Korean version edited by a Korean by @sumin13245 in https://github.com/ai16z/eliza/pull/329Dockerized application for local development, testing and deployment by @pindaroso in https://github.com/ai16z/eliza/pull/293fix: Build error for packages requiring @ai16z/eliza by @shakkernerd in https://github.com/ai16z/eliza/pull/331Docs: README.md improvements: clarify testing, add additional docker information by @odilitime in https://github.com/ai16z/eliza/pull/333Docs: additional Quickstart clarification and improvements by @odilitime in https://github.com/ai16z/eliza/pull/334added clientConfig to optionally ignore bots and DMs by @vivoidos in https://github.com/ai16z/eliza/pull/336feat: Add Heurist API Integration as New Model Provider by @tsubasakong in https://github.com/ai16z/eliza/pull/335feat: Starknet plugin by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/287fix: dev build by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/343Update Heurist Integration Documentation and Examples by @tsubasakong in https://github.com/ai16z/eliza/pull/339getOrCreateRecommenderWithTelegramId by @MarcoMandar in https://github.com/ai16z/eliza/pull/345fix: imports and cleanups by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/344trust fixes by @MarcoMandar in https://github.com/ai16z/eliza/pull/347feat: trust db by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/349Add Community &amp; contact and Star History by @thejoven in https://github.com/ai16z/eliza/pull/353fix: solana by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/354fix: some trust fixes by @lalalune in https://github.com/ai16z/eliza/pull/346change default configuration of Heurist by @wjw12 in https://github.com/ai16z/eliza/pull/348update tweet interval to 90-180 mins by @oguzserdar in https://github.com/ai16z/eliza/pull/360feat: update docs with new stream notes by @madjin in https://github.com/ai16z/eliza/pull/364post time set in env by @o-on-x in https://github.com/ai16z/eliza/pull/368default set to new standard post time 90-180 type: post time by @o-on-x in https://github.com/ai16z/eliza/pull/369feat: readme by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/370twitter-profile-remake by @alextitonis in https://github.com/ai16z/eliza/pull/263fix: bug in getRecentMessageInteractions not awating for promisses before formating by @bmgalego in https://github.com/ai16z/eliza/pull/366feat: starknet token transfer by @enitrat in https://github.com/ai16z/eliza/pull/373feat: Adding unit tests for start - Covering goals, defaultCharacters, relationships, evaulators, posts, database, messages by @ai16z-demirix in https://github.com/ai16z/eliza/pull/367feat: Enhance Heurist Image Generation Settings and Image Handling by @tsubasakong in https://github.com/ai16z/eliza/pull/375feat: install clients from plugin by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/371fix: openrouter 70b don't support 128000, changed to 405b in model.ts by @denizekiz in https://github.com/ai16z/eliza/pull/356feat: client by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/382feat: Complete Starknet DB Trust by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/355fix: client null by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/390fix: ca for btc was spam/fake by @thearyanag in https://github.com/ai16z/eliza/pull/374feat: Logging improvements by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/393Fix tweet truncation issue by truncating at complete sentences by @boyaloxer in https://github.com/ai16z/eliza/pull/388feat: Create README_ES.md by @metadiver in https://github.com/ai16z/eliza/pull/400Register memory managers if passed to runtime by @martincik in https://github.com/ai16z/eliza/pull/396fix: tsup build error (client-twitter) by @leomercier in https://github.com/ai16z/eliza/pull/402docs: add Russian(RU) translation of README by @whonion in https://github.com/ai16z/eliza/pull/380docs: Update README_FR.md by @xclicx in https://github.com/ai16z/eliza/pull/377docs: add Turkish (TR) translation of README by @oguzserdar in https://github.com/ai16z/eliza/pull/376feat: Contextual Twitter Threads + Spam Reduction by @ropresearch in https://github.com/ai16z/eliza/pull/383fix: Lint by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/404fix: adds Groq to getTokenForProvider by @bmgalego in https://github.com/ai16z/eliza/pull/381fix: console by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/405feat: unruggable by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/398fix: Fixes by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/407docs: refresh eliza's tagline, fix broken links, unify formatting for core concepts by @wahndo in https://github.com/ai16z/eliza/pull/389docs: add GROK_API_KEY by @whalelephant in https://github.com/ai16z/eliza/pull/409Add italian README.md translation by @fabrizioff in https://github.com/ai16z/eliza/pull/411feat: video generation plugin by @dorianjanezic in https://github.com/ai16z/eliza/pull/394Readme update WSL 2 link added. by @denizekiz in https://github.com/ai16z/eliza/pull/419feat: services by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/412fix: removed ollama embeddings. fastembeddings or openai only by @o-on-x in https://github.com/ai16z/eliza/pull/413fix: Update adapters.md psql schema by @tarrencev in https://github.com/ai16z/eliza/pull/424feat: [Issue-185] Token Provider Tests by @normand1 in https://github.com/ai16z/eliza/pull/365feat: unruggable on starknet by @RedBeardEth in https://github.com/ai16z/eliza/pull/418fix: don't continue to load if a specified file is not found by @odilitime in https://github.com/ai16z/eliza/pull/426feat: lerna an npm by @ponderingdemocritus in https://github.com/ai16z/eliza/pull/428 New Contributors‚Äã View New Contributors @juke made their first contribution in https://github.com/ai16z/eliza/pull/194@atvonsc made their first contribution in https://github.com/ai16z/eliza/pull/195@HashWarlock made their first contribution in https://github.com/ai16z/eliza/pull/198@MeDott29 made their first contribution in https://github.com/ai16z/eliza/pull/216@parzival418 made their first contribution in https://github.com/ai16z/eliza/pull/246@cvartanian made their first contribution in https://github.com/ai16z/eliza/pull/247@denizekiz made their first contribution in https://github.com/ai16z/eliza/pull/257@dorianjanezic made their first contribution in https://github.com/ai16z/eliza/pull/262@v1xingyue made their first contribution in https://github.com/ai16z/eliza/pull/249@fabianhug made their first contribution in https://github.com/ai16z/eliza/pull/266@mrpspring made their first contribution in https://github.com/ai16z/eliza/pull/280@FabriceIRANKUNDA made their first contribution in https://github.com/ai16z/eliza/pull/296@ropresearch made their first contribution in https://github.com/ai16z/eliza/pull/308@alanneary17 made their first contribution in https://github.com/ai16z/eliza/pull/310@BugByClaude made their first contribution in https://github.com/ai16z/eliza/pull/312@thearyanag made their first contribution in https://github.com/ai16z/eliza/pull/299@gabrielsants made their first contribution in https://github.com/ai16z/eliza/pull/320@odilitime made their first contribution in https://github.com/ai16z/eliza/pull/325@monilpat made their first contribution in https://github.com/ai16z/eliza/pull/309@sumin13245 made their first contribution in https://github.com/ai16z/eliza/pull/329@pindaroso made their first contribution in https://github.com/ai16z/eliza/pull/293@shakkernerd made their first contribution in https://github.com/ai16z/eliza/pull/331@vivoidos made their first contribution in https://github.com/ai16z/eliza/pull/336@tsubasakong made their first contribution in https://github.com/ai16z/eliza/pull/335@thejoven made their first contribution in https://github.com/ai16z/eliza/pull/353@wjw12 made their first contribution in https://github.com/ai16z/eliza/pull/348@oguzserdar made their first contribution in https://github.com/ai16z/eliza/pull/360@bmgalego made their first contribution in https://github.com/ai16z/eliza/pull/366@enitrat made their first contribution in https://github.com/ai16z/eliza/pull/373@ai16z-demirix made their first contribution in https://github.com/ai16z/eliza/pull/367@boyaloxer made their first contribution in https://github.com/ai16z/eliza/pull/388@martincik made their first contribution in https://github.com/ai16z/eliza/pull/396@whonion made their first contribution in https://github.com/ai16z/eliza/pull/380@xclicx made their first contribution in https://github.com/ai16z/eliza/pull/377@whalelephant made their first contribution in https://github.com/ai16z/eliza/pull/409@fabrizioff made their first contribution in https://github.com/ai16z/eliza/pull/411@tarrencev made their first contribution in https://github.com/ai16z/eliza/pull/424@normand1 made their first contribution in https://github.com/ai16z/eliza/pull/365@RedBeardEth made their first contribution in https://github.com/ai16z/eliza/pull/418 Full Changelog: https://github.com/ai16z/eliza/compare/v0.0.10...v0.1.1‚Äã","keywords":"","version":"1.0.17"},{"title":"üé≠ Character Files","type":0,"sectionRef":"#","url":"/docs/core/characters","content":"üé≠ Character Files Character files are the heart of an agent's personality in ElizaOS. They are JSON or TypeScript files that define everything from the agent's name and backstory to its conversational style and special abilities. Source Reference: The core Character type is defined in packages/core/src/types/agent.ts. Core Structure‚Äã A character file is an object that conforms to the Character interface. Here are the most important fields: import { Character } from '@elizaos/core'; export const myCharacter: Character = { // The agent's name name: 'Eliza', // A custom system prompt to guide the LLM's behavior system: 'You are a helpful and friendly AI assistant.', // A list of plugins the agent should use plugins: ['@elizaos/plugin-discord', '@elizaos/plugin-openai'], // Example conversations to train the agent's style messageExamples: [ // ... see Message Examples Format section ... ], // Configuration settings for the agent and its plugins settings: { // ... see Settings section ... }, }; Message Examples Format‚Äã messageExamples are crucial for training the agent on your desired conversational patterns. They are structured as an array of conversations, where each conversation is an array of messages. Structure Definition‚Äã // From @elizaos/core interface MessageExample { name: string; // Participant's name (e.g., a user variable or the agent's name) content: Content; // The message content object } interface Content { text: string; // Required: The text of the message providers?: string[]; // Optional: Context providers to use for this turn actions?: string[]; // Optional: A list of actions performed in response attachments?: Attachment[]; // Optional: Media attached to the message } Basic Example‚Äã This example shows a simple two-turn conversation. { &quot;messageExamples&quot;: [ [ { &quot;name&quot;: &quot;{{user1}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Can you help me understand what ElizaOS is?&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Of course! ElizaOS is a framework for building and deploying autonomous AI agents. It lets you create agents with distinct personalities that can interact across multiple platforms.&quot;, &quot;actions&quot;: [&quot;REPLY&quot;] } } ] ] } Advanced Example: Using Providers and Actions‚Äã You can make the agent's responses more dynamic by specifying providers and actions. providers: Inject real-time context (like the current time or specific knowledge) into the agent's brain before it responds.actions: Tell the agent which of its capabilities it used to formulate the response. { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Based on the latest news, it seems like the market is trending upwards. I've also generated a chart for you.&quot;, &quot;providers&quot;: [&quot;KNOWLEDGE&quot;, &quot;NEWS_PROVIDER&quot;, &quot;TIME&quot;], &quot;actions&quot;: [&quot;REPLY&quot;, &quot;GENERATE_IMAGE&quot;] } } Settings and Configuration‚Äã The settings object allows you to configure the agent's core behavior and the behavior of its plugins. { &quot;settings&quot;: { // Enable Retrieval-Augmented Generation (RAG) &quot;ragKnowledge&quot;: true, // Configure a specific plugin, like discord &quot;discord&quot;: { &quot;shouldRespondOnlyToMentions&quot;: false }, // Provide secrets securely &quot;secrets&quot;: { &quot;OPENAI_API_KEY&quot;: &quot;your-api-key&quot; } } } Migration Guide for Character Files‚Äã The character file format has evolved. If you are coming from an older version, here's how to update your files. From v0.25.x (user field)‚Äã The most common change is from the user field to the name field in messageExamples. // OLD format { &quot;user&quot;: &quot;UserName&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;A message&quot; } } // NEW format { &quot;name&quot;: &quot;UserName&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;A message&quot; } } From Flat Response Format‚Äã Some very old formats used a flat response field. This should be converted to the nested conversation structure. // OLD format { &quot;user&quot;: &quot;{{user1}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Question?&quot; }, &quot;response&quot;: &quot;Answer.&quot; } // NEW format [ { &quot;name&quot;: &quot;{{user1}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Question?&quot; } }, { &quot;name&quot;: &quot;YourAgentName&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Answer.&quot; } } ] ","keywords":"character personality configuration message examples providers actions RAG","version":"1.0.17"},{"title":"‚ö° Actions","type":0,"sectionRef":"#","url":"/docs/core/actions","content":"‚ö° Actions Actions define how agents respond to and interact with messages. They enable agents to perform tasks beyond simple message responses by integrating with external systems and modifying behavior. Overview‚Äã Actions are core components that define an agent's capabilities and how it can respond to conversations. Each action represents a distinct operation that an agent can perform, ranging from simple replies to complex interactions with external systems. Structure: An Action consists of: name: Unique identifiersimiles: Alternative names/triggersdescription: Purpose and usage explanationvalidate: Function to check if action is appropriatehandler: Core implementation logicexamples: Sample usage patternssuppressInitialMessage: Optional flag to suppress initial response Agent Decision Flow: When a message is received: The agent evaluates all available actions using their validation functionsValid actions are provided to the LLM via the actionsProviderThe LLM decides which action(s) to executeEach action's handler generates a response including a &quot;thought&quot; component (agent's internal reasoning)The response is processed and sent back to the conversation Integration: Actions work in concert with: Providers - Supply context before the agent decides what action to takeEvaluators - Process conversations after actions to extract insights and update memoryServices - Enable actions to interact with external systems Implementation‚Äã The core Action interface and its related types define the structure for all actions in ElizaOS. Source Reference: The Action interface and its supporting types are defined in packages/core/src/types/components.ts. The Action Interface‚Äã // Source: packages/core/src/types/components.ts import { Action, Handler, Validator, ActionExample, IAgentRuntime, Memory, State, Content, HandlerCallback, } from '@elizaos/core'; /** * Represents an action the agent can perform. */ export interface Action { /** A unique, descriptive name for the action. */ name: string; /** A detailed description of what the action does and when it should be used. */ description: string; /** The function that executes the action's logic. */ handler: Handler; /** A function that quickly determines if the action is valid for the current context. */ validate: Validator; /** (Optional) Alternative names or trigger phrases for the action. */ similes?: string[]; /** (Optional) A list of examples demonstrating how the action is used. */ examples?: ActionExample[][]; } Supporting Type Definitions‚Äã Handler: The function that contains the core logic of the action. // Source: packages/core/src/types/components.ts export type Handler = ( runtime: IAgentRuntime, message: Memory, state?: State, options?: { [key: string]: unknown }, callback?: HandlerCallback, responses?: Memory[] ) =&gt; Promise&lt;unknown&gt;; Validator: A lightweight function that checks if an action is applicable to the current message. It should execute quickly. // Source: packages/core/src/types/components.ts export type Validator = ( runtime: IAgentRuntime, message: Memory, state?: State ) =&gt; Promise&lt;boolean&gt;; HandlerCallback: A function passed to the handler to send a response back to the user. // Source: packages/core/src/types/components.ts export type HandlerCallback = (response: Content, files?: any) =&gt; Promise&lt;Memory[]&gt;; ActionExample: Defines the structure for providing examples of the action's usage. // Source: packages/core/src/types/components.ts interface ActionExample { name: string; content: Content; } Basic Action Template‚Äã Here is a complete and up-to-date template for creating a custom action. import { Action, IAgentRuntime, Memory, State, HandlerCallback, Content } from '@elizaos/core'; const customAction: Action = { name: 'CUSTOM_ACTION', description: 'Detailed description of when and how to use this action.', // Optional fields for better agent performance similes: ['ALTERNATE_NAME', 'OTHER_TRIGGER'], examples: [ [ { name: '{{name1}}', // A variable representing the user's name content: { text: 'A message that would trigger this action.' }, }, { name: '{{name2}}', // A variable representing the agent's name content: { text: 'An example of the text response from the agent.', thought: 'An example of the internal thought process of the agent.', actions: ['CUSTOM_ACTION'], // The action being performed }, }, ], ], // The validation function, runs quickly to check if the action is relevant validate: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise&lt;boolean&gt; =&gt; { // Add logic here to determine if this action applies to the current message. // For example, check for keywords in message.content.text return message.content.text.toLowerCase().includes('custom keyword'); }, // The handler function, contains the core logic of the action handler: async ( runtime: IAgentRuntime, message: Memory, state?: State, options?: { [key: string]: unknown }, callback?: HandlerCallback ): Promise&lt;unknown&gt; =&gt; { // This is where the main logic for your action goes. // You can interact with services, APIs, or the database here. const responseContent: Content = { thought: &quot;The user mentioned 'custom keyword', so I am executing CUSTOM_ACTION.&quot;, text: 'I have successfully executed the custom action.', actions: ['CUSTOM_ACTION'], }; // Use the callback to send the response to the user if (callback) { await callback(responseContent); } // You can also return data that might be used by other parts of the system. return { success: true }; }, }; export default customAction; Character File Example‚Äã Actions can be referenced in character files to define how an agent should respond to specific types of messages: &quot;messageExamples&quot;: [ [ { &quot;name&quot;: &quot;{{user1}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Can you help transfer some SOL?&quot; } }, { &quot;name&quot;: &quot;SBF&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;yeah yeah for sure, sending SOL is pretty straightforward. just need the recipient and amount. everything else is basically fine, trust me.&quot;, &quot;actions&quot;: [&quot;SEND_SOL&quot;] } } ] ] The Reply Action‚Äã The REPLY action is the most fundamental action, allowing agents to respond with text. It serves as the default action when no specialized behavior is needed. The implementation below showcases several important patterns used in ElizaOS. Source Reference: The complete implementation is in packages/plugin-bootstrap/src/actions/reply.ts. import { Action, IAgentRuntime, Memory, State, HandlerCallback, ModelType, composePromptFromState, parseJSONObjectFromText, Content, } from '@elizaos/core'; // Note: replyTemplate would be imported from a local file in a real plugin. import { replyTemplate } from '../templates/reply'; const replyAction: Action = { name: 'REPLY', similes: ['GREET', 'REPLY_TO_MESSAGE', 'SEND_REPLY', 'RESPOND', 'RESPONSE'], description: 'Replies to the current conversation with text. This is the default action for standard conversation.', validate: async (_runtime: IAgentRuntime): Promise&lt;boolean&gt; =&gt; { // The REPLY action is always considered valid as a fallback. return true; }, handler: async ( runtime: IAgentRuntime, message: Memory, state?: State, _options?: { [key: string]: unknown }, callback?: HandlerCallback, responses?: Memory[] ): Promise&lt;unknown&gt; =&gt; { try { // 1. Collect providers from all available sources to build a comprehensive context. const allProviders = [ ...new Set([ ...(message.content.providers ?? []), ...(responses?.flatMap((response) =&gt; response.content.providers ?? []) ?? []), 'RECENT_MESSAGES', // Always include recent messages for context. ]), ]; // 2. Compose the state with the collected providers. state = await runtime.composeState(message, allProviders); // 3. Use a structured model type for reliable JSON output. const response = await runtime.useModel(ModelType.OBJECT_LARGE, { prompt: composePromptFromState({ state, template: replyTemplate, }), }); // 4. Parse the JSON response from the model. const responseContentObj = parseJSONObjectFromText(response); const responseContent: Content = { thought: responseContentObj.thought, text: responseContentObj.message || '', actions: ['REPLY'], }; // 5. Send the response back to the user via the callback. if (callback) { await callback(responseContent); } return { success: true }; } catch (error) { console.error('Error in reply action handler:', error); // 6. Provide a fallback response in case of an error. if (callback) { await callback({ text: &quot;I'm having a little trouble formulating a response right now. Please try again in a moment.&quot;, actions: ['REPLY'], }); } return { success: false, error: 'Failed to generate model response.' }; } }, examples: [ // ... examples would be included here ... ], }; export default replyAction; Implementation Deep Dive‚Äã The REPLY action demonstrates several best practices for creating robust actions: Comprehensive Context: It gathers context from multiple sources (message, previous responses) using a Set to ensure no duplicate providers are requested. This gives the Language Model the richest possible context to formulate a reply.Structured Model Usage: It uses ModelType.OBJECT_LARGE instead of a simple text model. This forces the LLM to return a predictable JSON structure containing both a thought and a message, which is more reliable than trying to parse a plain text response.Robust Error Handling: The entire handler logic is wrapped in a try...catch block. If the model fails or the response is invalid, it logs the error and sends a user-friendly fallback message instead of crashing.State Composition: It uses runtime.composeState to build the final state object that gets passed to the prompt, ensuring all necessary data is fetched and formatted correctly. Actions Provider Integration‚Äã The actions provider is responsible for making valid actions available to the agent's reasoning process. When a message is received: The provider validates all available actions against the current messageIt formats the valid actions for inclusion in the agent contextThis formatted information is used by the agent to decide which action(s) to take const actionsProvider: Provider = { name: 'ACTIONS', description: 'Possible response actions', position: -1, // High priority provider get: async (runtime: IAgentRuntime, message: Memory, state: State) =&gt; { // Validate all actions for this message const actionPromises = runtime.actions.map(async (action: Action) =&gt; { const result = await action.validate(runtime, message, state); return result ? action : null; }); const resolvedActions = await Promise.all(actionPromises); const actionsData = resolvedActions.filter(Boolean); // Format action information for the agent const values = { actionNames: `Possible response actions: ${formatActionNames(actionsData)}`, actions: formatActions(actionsData), actionExamples: composeActionExamples(actionsData, 10), }; // Return data, values, and text representation return { data: { actionsData }, values, text: [values.actionNames, values.actionExamples, values.actions] .filter(Boolean) .join('\\n\\n'), }; }, }; Example Implementations‚Äã ElizaOS includes a wide variety of predefined actions across various plugins in the ecosystem. Here are some key categories: Communication Actions‚Äã REPLY: Standard text responseCONTINUE: Extend the conversationIGNORE: End the conversation or ignore irrelevant messages Blockchain and Token Actions‚Äã SEND_TOKEN: Transfer cryptocurrencyCREATE_TOKEN: Create a new token on a blockchainREAD_CONTRACT/WRITE_CONTRACT: Interact with smart contracts Media and Content Generation‚Äã GENERATE_IMAGE: Create images from text descriptionsSEND_GIF: Share animated contentGENERATE_3D: Create 3D content AI and Agent Management‚Äã LAUNCH_AGENT: Create and start a new agentSTART_SESSION: Begin an interactive sessionGENERATE_MEME: Create humorous content Example Image Generation Action‚Äã Here's a more detailed example of an image generation action: import { Action, IAgentRuntime, Memory, State, HandlerCallback, ServiceType, generateId, } from '@elizaos/core'; const generateImageAction: Action = { name: 'GENERATE_IMAGE', similes: ['CREATE_IMAGE', 'MAKE_IMAGE', 'DRAW'], description: &quot;Generates an image based on the user's description&quot;, validate: async (runtime: IAgentRuntime, message: Memory) =&gt; { const text = message.content.text.toLowerCase(); return ( text.includes('generate') || text.includes('create') || text.includes('draw') || text.includes('make an image') ); }, handler: async ( runtime: IAgentRuntime, message: Memory, state?: State, _options?: any, callback?: HandlerCallback ) =&gt; { try { // Get appropriate service const imageService = runtime.getService(ServiceType.IMAGE_GENERATION); // Generate the response with thought component const responseContent = { thought: &quot;This request is asking for image generation. I'll use the image service to create a visual based on the user's description.&quot;, text: &quot;I'm generating that image for you now...&quot;, actions: ['GENERATE_IMAGE'], }; // Send initial response if callback provided if (callback) { await callback(responseContent); } // Generate image const imageUrl = await imageService.generateImage(message.content.text); // Create follow-up message with the generated image await runtime.createMemory( { id: generateId(), content: { text: &quot;Here's the image I generated:&quot;, attachments: [ { type: 'image', url: imageUrl, }, ], }, agentId: runtime.agentId, roomId: message.roomId, }, 'messages' ); return true; } catch (error) { console.error('Image generation failed:', error); // Send error response if callback provided if (callback) { await callback({ thought: 'The image generation failed due to an error.', text: &quot;I'm sorry, I wasn't able to generate that image. There was a technical problem.&quot;, actions: ['REPLY'], }); } return false; } }, examples: [ /* Examples omitted for brevity */ ], }; Action-Evaluator-Provider Cycle‚Äã Actions are part of a larger cycle in ElizaOS agents: Providers fetch relevant context for decision-makingActions execute the agent's chosen responseEvaluators process the conversation to extract insightsThese insights are stored in memoryFuture Providers can access these insightsThis informs future Actions For example: The FACTS provider retrieves relevant facts about usersThe agent uses this context to decide on an appropriate actionAfter the action, the reflection evaluator extracts new facts and relationshipsThese are stored in memory and available for future interactionsThis creates a virtuous cycle of continuous learning and improvement FAQ‚Äã What are Actions in ElizaOS?‚Äã Actions are core components that define how agents respond to messages and perform tasks. They encapsulate specific behaviors and capabilities, ranging from simple text replies to complex interactions with external systems. How do Actions work?‚Äã When a message is received, the agent evaluates all available actions using their validation functions. The agent then decides which action(s) to execute based on the message content and context. Each action's handler generates a response, which may include text, thought processes, and attachments. What's the difference between actions and evaluators?‚Äã Actions are executed during an agent's response to perform tasks and generate content. Evaluators run after responses to analyze conversations, extract information, and update the agent's memory. Actions are about doing, evaluators are about learning. What role do &quot;thoughts&quot; play in actions?‚Äã The thought component provides an internal reasoning process for the agent, explaining its decision-making. These thoughts aren't shown to users but help with debugging and understanding the agent's behavior. They're similar to the self-reflection component in evaluators. How do I create a custom action?‚Äã Define an action object with a name, similes, description, validation function, handler function, and examples. The validation function determines when the action should be used, while the handler contains the implementation logic and generates a response. Can actions be chained together?‚Äã Yes! Actions can call other actions or services as part of their implementation. This allows for complex workflows that combine multiple capabilities. For example, an action might first reply to a user, then generate an image, and finally store data in a database. How does an agent choose which action to use?‚Äã The agent uses the following process: All actions are validated against the current messageValid actions are formatted and included in the agent's contextThe LLM decides which action(s) to execute based on the message and contextThe chosen action's handler is executed to generate a response How do actions integrate with services?‚Äã Actions often use services to interact with external systems. The action handler can retrieve a service from the runtime (e.g., imageService = runtime.getService(ServiceType.IMAGE_GENERATION)) and then call methods on that service to perform operations. What's the difference between actions and action in responses?‚Äã The actions array is the modern way to specify multiple actions being performed in a single response. The singular action field is maintained for backward compatibility but is deprecated in favor of the array format. Can I add custom actions to an existing agent?‚Äã Yes! You can create a plugin that defines new actions and then add that plugin to your agent's configuration. This allows you to extend the agent's capabilities without modifying its core implementation. Further Reading‚Äã EvaluatorsProvidersServices","keywords":"actions responses handlers validation examples reply implementation","version":"1.0.17"},{"title":"ü§ñ Agent Runtime","type":0,"sectionRef":"#","url":"/docs/core/agents","content":"ü§ñ Agent Runtime The AgentRuntime is the core runtime environment for Eliza agents. It handles message processing, state management, plugin integration, and interaction with external services. You can think of it as the brains that provide the high-level orchestration layer for Eliza agents. The runtime follows this general flow: Initial Reception: The user sends a message which is received by the Platform Services Context Building: The Runtime Core requests context from the State Composition systemState gathers data from various Providers (Character, Knowledge, Recent Messages, etc.)The complete context is returned to the Runtime Action Processing: The Runtime determines applicable actions and selects the optimal oneThe selected action may request content generation from ModelsThe action result is returned to the Runtime Learning &amp; Persistence: The conversation is analyzed by Evaluators for insights and factsKnowledge updates are sent to the Memory SystemAll relevant data is persisted to the Database Response Delivery: The final response is sent back to the user through Platform Services Overview‚Äã The AgentRuntime class is the primary implementation of the IAgentRuntime interface, which manages the agent's core functions, including: Component\tDescription\tAPI Reference\tRelated FilesServices\tSupports multiple communication platforms and specialized functionalities for seamless interaction.\tServices API\tservice.ts, Discord, Telegram, Twitter, Farcaster, Lens, Slack, Auto, GitHub State\tMaintains context for coherent cross-platform interactions, updates dynamically. Also tracks goals, knowledge, and recent interactions\tState API\tstate.ts Plugins\tDynamic extensions of agent functionalities using custom actions, evaluators, providers, and adapters\tPlugins API\tplugins.ts, actions, evaluators, providers Services\tConnects with external services for IMAGE_DESCRIPTION, TRANSCRIPTION, TEXT_GENERATION, SPEECH_GENERATION, VIDEO, PDF, BROWSER, WEB_SEARCH, EMAIL_AUTOMATION, and more\tServices API\tservices.ts Memory Systems\tCreates, retrieves, and embeds memories and manages conversation history.\tMemory API\tmemory.ts Database Adapters\tPersistent storage and retrieval for memories and knowledge\tdatabaseAdapter\tMongoDB, PostgreSQL, SQLite, Supabase, PGLite, Qdrant, SQL.js Cache Management\tProvides flexible storage and retrieval via various caching methods.\tCache API\tcache.tsAdvanced: IAgentRuntime Interface interface IAgentRuntime { // Core identification agentId: UUID; // Configuration character: Character; // Personality and behavior settings // Components plugins: Plugin[]; // Additional capabilities services: Map&lt;ServiceTypeName, Service&gt;; // Platform connections and functionality providers: Provider[]; // Real-time data sources actions: Action[]; // Available behaviors evaluators: Evaluator[]; // Analysis &amp; learning routes: Route[]; // API endpoints // Memory Management getMemories(...): Promise&lt;Memory[]&gt;; // Retrieve conversation history createMemory(...): Promise&lt;UUID&gt;; // Store new memories searchMemories(...): Promise&lt;Memory[]&gt;; // Semantic search // State Composition composeState(...): Promise&lt;State&gt;; // Gather data from providers // Plugin Management registerPlugin(...): Promise&lt;void&gt;; // Register plugins // Service Management getService&lt;T&gt;(...): T | null; // Access services registerService(...): Promise&lt;void&gt;; // Register services // Model Integration useModel&lt;T, R&gt;(...): Promise&lt;R&gt;; // Use AI models // Additional Utilities getSetting(...): any; // Access settings setSetting(...): void; // Configure settings getCache&lt;T&gt;(...): Promise&lt;T | undefined&gt;; // Access cached data setCache&lt;T&gt;(...): Promise&lt;boolean&gt;; // Store cached data } Source: /api/interfaces/IAgentRuntime/ Key Methods‚Äã initialize(): Sets up the agent's runtime environment, including services, plugins, and knowledge processing.processActions(): Executes actions based on message content and state.evaluate(): Assesses messages and state using registered evaluators.composeState(): Constructs the agent's state object for response generation.registerService(): Adds a service to the runtime.getService(): Retrieves a registered service by type.useModel(): Utilizes AI models with typesafe parameters and results.ensureRoomExists() / ensureConnection(): Ensures the existence of communication channels and connections. Service System‚Äã Services provide specialized functionality with standardized interfaces that can be accessed cross-platform: // Speech Generation const speechService = runtime.getService&lt;ISpeechService&gt;('speech_generation'); const audioStream = await speechService.process(text); // PDF Processing const pdfService = runtime.getService&lt;IPdfService&gt;('pdf'); const textContent = await pdfService.convertPdfToText(pdfBuffer); // Discord Integration const discordService = runtime.getService&lt;IDiscordService&gt;('discord'); await discordService.sendMessage(channelId, content); State Management‚Äã The runtime maintains comprehensive state through the State interface: interface State { // Core state data values: { [key: string]: any; }; data: { [key: string]: any; }; text: string; } // State composition example async function manageState() { // Initial state composition with all regular providers const state = await runtime.composeState(message); // State with specific providers only const filteredState = await runtime.composeState(message, ['timeProvider', 'recentMessages']); // Include private or dynamic providers const enhancedState = await runtime.composeState(message, null, [ 'weatherProvider', 'portfolioProvider', ]); } Plugin System‚Äã Plugins extend agent functionality through a modular interface. The runtime supports various types of plugins including services, adapters, actions, and more: interface Plugin { name: string; description: string; init?: (config: Record&lt;string, string&gt;, runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; // Components services?: (typeof Service)[]; // Communication platforms and external integrations actions?: Action[]; // Custom behaviors providers?: Provider[]; // Data providers evaluators?: Evaluator[]; // Response assessment adapters?: Adapter[]; // Database/cache adapters routes?: Route[]; // API endpoints tests?: TestSuite[]; // Testing utilities } Plugins can be configured through characterfile settings: { &quot;name&quot;: &quot;MyAgent&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-solana&quot;, &quot;@elizaos/plugin-twitter&quot;], &quot;settings&quot;: { &quot;twitter&quot;: { &quot;shouldRespondToMentions&quot;: true }, &quot;solana&quot;: { &quot;enableAutoTrading&quot;: false } } } For detailed information about plugin development and usage, see the ElizaOS Registry. Running Multiple Agents‚Äã To run multiple agents: bun start --characters=&quot;characters/agent1.json,characters/agent2.json&quot; Or use environment variables: REMOTE_CHARACTER_URLS=https://example.com/characters.json FAQ‚Äã What's the difference between an agent and a character?‚Äã A character defines personality and knowledge, while an agent provides the runtime environment and capabilities to bring that character to life. How do I choose the right database adapter?‚Äã Choose based on your needs: MongoDB: For scalable, document-based storagePostgreSQL: For relational data with complex queriesSQLite: For simple, file-based storageQdrant: For vector search capabilities How do I implement custom plugins?‚Äã Create a plugin that follows the plugin interface and register it with the runtime. See the plugin documentation for detailed examples. Do agents share memory across platforms?‚Äã By default, agents maintain separate memory contexts for different platforms to avoid mixing conversations. Use the memory management system and database adapters to persist and retrieve state information. How do I handle multiple authentication methods?‚Äã Use the character configuration to specify different authentication methods for different services. The runtime will handle the appropriate authentication flow. How do I manage environment variables?‚Äã Use a combination of: .env files for local developmentCharacter-specific settings for per-agent configurationEnvironment variables for production deployment Can agents communicate with each other?‚Äã Yes, through the message system and shared memory spaces when configured appropriately.","keywords":"agent runtime orchestration services state plugins memory models processing","version":"1.0.17"},{"title":"üíæ Database System","type":0,"sectionRef":"#","url":"/docs/core/database","content":"üíæ Database System The ElizaOS database system provides persistent storage capabilities for agents. It handles memory storage, entity relationships, knowledge management, and more through a flexible adapter-based architecture with built-in multi-tenancy support. Overview‚Äã ElizaOS uses a unified database architecture based on Drizzle ORM with adapters that implement the IDatabaseAdapter interface. The current release includes support for: Adapter\tBest For\tKey FeaturesPGLite\tLocal development &amp; testing\tLightweight PostgreSQL implementation running in Node.js process PostgreSQL\tProduction deployments\tFull PostgreSQL with vector search, scaling, and high reliability Multi-Tenancy Architecture‚Äã ElizaOS implements a multi-tenant architecture where each agent operates in its own isolated data space: Agent Isolation: Each agent has its own agentId that scopes all database operationsData Segregation: All queries are automatically filtered by the agent's IDShared Infrastructure: Multiple agents can share the same database instance while maintaining complete data isolationEmbedding Consistency: Each agent must use consistent embedding dimensions throughout its lifecycle ‚ö†Ô∏è Important: Each agent MUST use the same embedding model throughout its lifetime. Mixing different embedding models (e.g., OpenAI with Google embeddings) within the same agent will cause vector search failures and inconsistent results. Core Functionality‚Äã All database adapters extend the BaseDrizzleAdapter abstract class, which provides a comprehensive set of methods for managing all aspects of agent data: Entity System‚Äã Method\tDescriptioncreateEntities()\tCreate new entities getEntityByIds()\tRetrieve entities by IDs getEntitiesForRoom()\tGet all entities in a room updateEntity()\tUpdate entity attributes deleteEntity()\tDelete an entity getEntitiesByNames()\tFind entities by their names searchEntitiesByName()\tSearch entities with fuzzy matching getComponent()\tGet a specific component of an entity getComponents()\tGet all components for an entity createComponent()\tAdd a component to an entity updateComponent()\tUpdate a component deleteComponent()\tRemove a component Memory Management‚Äã Method\tDescriptioncreateMemory()\tStore a new memory with metadata getMemoryById()\tRetrieve a specific memory getMemories()\tGet memories matching criteria getMemoriesByIds()\tGet multiple memories by IDs getMemoriesByRoomIds()\tGet memories from multiple rooms getMemoriesByWorldId()\tGet memories from a world searchMemories()\tSearch memories by vector similarity searchMemoriesByEmbedding()\tSearch using raw embedding vector updateMemory()\tUpdate an existing memory deleteMemory()\tRemove a specific memory deleteManyMemories()\tRemove multiple memories in batch deleteAllMemories()\tRemove all memories in a room countMemories()\tCount memories matching criteria Room &amp; Participant Management‚Äã Method\tDescriptioncreateRooms()\tCreate new conversation rooms getRoomsByIds()\tGet rooms by their IDs getRoomsByWorld()\tGet all rooms in a world updateRoom()\tUpdate room attributes deleteRoom()\tRemove a room deleteRoomsByWorldId()\tRemove all rooms in a world addParticipant()\tAdd entity to room addParticipantsRoom()\tAdd multiple entities to room removeParticipant()\tRemove entity from room getParticipantsForEntity()\tGet all rooms an entity is in getParticipantsForRoom()\tList entities in a room getRoomsForParticipant()\tGet rooms for an entity getRoomsForParticipants()\tGet rooms for multiple entities getParticipantUserState()\tGet entity's state in a room setParticipantUserState()\tUpdate entity's state in a room Relationship Management‚Äã Method\tDescriptioncreateRelationship()\tCreate a relationship between entities updateRelationship()\tUpdate relationship attributes getRelationship()\tGet a specific relationship getRelationships()\tGet all relationships for an entity Caching System‚Äã Method\tDescriptiongetCache()\tRetrieve cached data setCache()\tStore data in cache deleteCache()\tRemove data from cache World &amp; Task Management‚Äã Method\tDescriptioncreateWorld()\tCreate a new world getWorld()\tGet world by ID getAllWorlds()\tList all worlds updateWorld()\tUpdate world attributes removeWorld()\tDelete a world createTask()\tCreate a new task getTasks()\tGet tasks matching criteria getTasksByName()\tFind tasks by name getTask()\tGet task by ID updateTask()\tUpdate task attributes deleteTask()\tRemove a task Agent Management‚Äã Method\tDescriptioncreateAgent()\tCreate a new agent record getAgent()\tGet agent by ID getAgents()\tList all agents updateAgent()\tUpdate agent attributes deleteAgent()\tRemove an agent and all its data countAgents()\tCount total agents cleanupAgents()\tClean up orphaned agents Embedding &amp; Search‚Äã Method\tDescriptionensureEmbeddingDimension()\tConfigure embedding dimensions getCachedEmbeddings()\tRetrieve cached embeddings searchMemories()\tVector search for memories searchMemoriesByEmbedding()\tAdvanced vector search with embedding Logging System‚Äã Method\tDescriptionlog()\tCreate a log entry getLogs()\tRetrieve logs by criteria deleteLog()\tDelete a specific log entry Message Server Operations (Central Database)‚Äã Method\tDescriptioncreateMessageServer()\tCreate a new message server getMessageServers()\tGet all message servers getMessageServerById()\tGet a specific message server createChannel()\tCreate a new channel getChannelsForServer()\tGet channels for a server getChannelDetails()\tGet channel information updateChannel()\tUpdate channel attributes deleteChannel()\tDelete a channel createMessage()\tCreate a new message getMessagesForChannel()\tGet messages from a channel deleteMessage()\tDelete a message addChannelParticipants()\tAdd users to a channel getChannelParticipants()\tGet users in a channel addAgentToServer()\tAdd agent to a server getAgentsForServer()\tGet agents for a server removeAgentFromServer()\tRemove agent from server findOrCreateDmChannel()\tFind or create DM channel Architecture‚Äã ElizaOS uses a singleton pattern for database connections to ensure efficient resource usage: ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ AgentRuntime ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ IDatabaseAdapter ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ BaseDrizzleAdapter ‚îÇ ‚îÇ (Full implementation in base.ts) ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚ñº ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ PGLiteAdapter ‚îÇ ‚îÇ PostgresAdapter ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ ‚îÇ ‚ñº ‚ñº ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇPGLiteManager ‚îÇ ‚îÇPostgresManager ‚îÇ ‚îÇ (Singleton) ‚îÇ ‚îÇ (Singleton) ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò Each adapter is associated with a singleton connection manager that ensures only one database connection is maintained per process, regardless of how many agents are running. Implementation‚Äã Initialization‚Äã The database adapter is initialized through the SQL plugin: // Plugin registration in project configuration const project = { plugins: ['@elizaos/plugin-sql'], // ... }; The SQL plugin automatically selects and initializes the appropriate database adapter based on environment settings: function createDatabaseAdapter( config: { dataDir?: string; postgresUrl?: string; }, agentId: UUID ): IDatabaseAdapter { if (config.postgresUrl) { return new PgDatabaseAdapter(agentId, postgresConnectionManager); } // Default to PGLite return new SqliteDatabaseAdapter(agentId, pgLiteClientManager); } Configuration‚Äã Configure the database adapter using environment variables or settings: // For PostgreSQL process.env.POSTGRES_URL = 'postgresql://username:password@localhost:5432/elizaos'; // For PGLite (default) process.env.SQLITE_DATA_DIR = './.elizadb'; // Optional, defaults to './.elizadb' Embedding Dimension Management‚Äã The embedding dimension is set during agent initialization based on the text embedding model: // The dimension is automatically determined by the embedding model // Common dimensions: // - OpenAI: 1536 // - Google: 768 // - Anthropic: 1024 // - Local models: varies (384, 512, 768, etc.) // The system automatically calls ensureEmbeddingDimension() // when creating the first memory with embeddings ‚ö†Ô∏è Critical: Once an agent starts using a specific embedding model, it MUST continue using the same model. Switching embedding models mid-operation will result in: Vector search failuresInconsistent similarity scoresPotential runtime errorsDegraded agent performance Retry Logic &amp; Error Handling‚Äã The database system includes built-in retry logic with exponential backoff and jitter: protected async withRetry&lt;T&gt;(operation: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; { let lastError: Error = new Error('Unknown error'); for (let attempt = 1; attempt &lt;= this.maxRetries; attempt++) { try { return await operation(); } catch (error) { lastError = error as Error; if (attempt &lt; this.maxRetries) { const backoffDelay = Math.min( this.baseDelay * 2 ** (attempt - 1), this.maxDelay ); const jitter = Math.random() * this.jitterMax; const delay = backoffDelay + jitter; await new Promise(resolve =&gt; setTimeout(resolve, delay)); } } } throw lastError; } Example Usage‚Äã Here are examples of common database operations: Store a Memory‚Äã // Memory creation automatically uses the agent's configured embedding dimension await runtime.createMemory( { entityId: message.entityId, agentId: runtime.agentId, content: { text: 'Important information to remember' }, roomId: message.roomId, embedding: await runtime.useModel(ModelType.TEXT_EMBEDDING, { text: 'Important information to remember', }), }, 'facts' ); Search for Memories‚Äã // Embedding must be from the same model type as used during creation const embedding = await runtime.useModel(ModelType.TEXT_EMBEDDING, { text: 'What did we discuss about databases?', }); const relevantMemories = await runtime.searchMemories({ tableName: 'messages', embedding, roomId: message.roomId, count: 5, match_threshold: 0.8, }); Manage Entity Relationships‚Äã // Create a relationship between entities await runtime.createRelationship({ sourceEntityId: userEntityId, targetEntityId: agentEntityId, tags: ['friend', 'frequent_interaction'], metadata: { interactions: 42, trust_level: 'high', }, }); // Retrieve relationships const relationships = await runtime.getRelationships({ entityId: userEntityId, tags: ['friend'], }); Database Schema‚Äã The schema is managed by Drizzle ORM and includes the following key tables: Core Tables‚Äã agents: Agent configuration and state (multi-tenant root)entities: The fundamental objects in the system (users, agents, etc.)components: Modular data attached to entities (profiles, settings, etc.)memories: Conversation history and other remembered informationembeddings: Vector embeddings for semantic search (supports multiple dimensions)relationships: Connections between entitiesrooms: Conversation channelsparticipants: Entity participation in roomsworlds: Container for multiple roomstasks: Scheduled or queued operationscache: Temporary key-value storagelogs: System and event logs Message Server Tables (Central Database)‚Äã message_servers: Server definitionschannels: Communication channelsmessages: Message historychannel_participants: Channel membershipserver_agents: Agent-server associations Entity-Component System‚Äã ElizaOS uses an entity-component architecture where: Entities are the base objects (users, agents, etc.)Components are pieces of data attached to entitiesThis allows for flexible data modeling and extension For example, a user entity might have profile, preferences, and authentication components. Vector Search‚Äã Both adapters support vector-based semantic search with embedding dimension flexibility: PostgreSQL: Uses pgvector extension for optimized vector operationsPGLite: Implements vector search using cosine distance calculations The system supports multiple embedding dimensions (384, 512, 768, 1024, 1536, 3072) but each agent must use only one consistently: // The embedding dimension is automatically set based on the first embedding stored // Supported dimensions are defined in DIMENSION_MAP const DIMENSION_MAP = { 384: 'dim_384', 512: 'dim_512', 768: 'dim_768', 1024: 'dim_1024', 1536: 'dim_1536', 3072: 'dim_3072', }; FAQ‚Äã How do I choose between PGLite and PostgreSQL?‚Äã Use PGLite for: Local development and testingSingle-user deploymentsSituations where installing PostgreSQL is impractical Use PostgreSQL for: Production deploymentsMulti-user systemsHigh-volume dataWhen you need advanced scaling features How do I configure the database connection?‚Äã For PostgreSQL, set the POSTGRES_URL environment variable: POSTGRES_URL=postgresql://username:password@localhost:5432/elizaos For PGLite, set the data directory (optional): SQLITE_DATA_DIR=./my-data What about embedding model consistency?‚Äã Critical Requirements: Each agent must use the same embedding model throughout its lifetimeNever mix embedding models within the same agentIf you need to change models, create a new agentDocument which embedding model each agent uses Why this matters: Different models produce embeddings of different dimensionsEmbeddings from different models are not comparableMixing models will break vector search functionality How does multi-tenancy work?‚Äã Each agent operates in its own isolated data spaceAll database operations are automatically scoped by agentIdMultiple agents can share the same database instanceData isolation is enforced at the query levelNo cross-agent data access is possible How can I inspect the database contents?‚Äã For PostgreSQL, use standard PostgreSQL tools like pgAdmin or psql. For PGLite, the data is stored in the specified data directory. You can use the PGLite Studio or standard PostgreSQL clients that support local connections. How do I handle agent deletion?‚Äã The deleteAgent() method performs a complete cascade deletion: Deletes all memories and embeddingsRemoves all entities and componentsCleans up rooms and participantsRemoves relationships and logsDeletes the agent record itself This ensures no orphaned data remains in the database. How can I improve database performance?‚Äã For PostgreSQL: Ensure the pgvector extension is properly installedCreate indexes on frequently queried fieldsUse connection poolingConsider partitioning for large datasets For PGLite: Keep database size reasonable (under 1GB)Regularly clean up old memoriesLimit the number of concurrent operations Will other database adapters be supported in the future?‚Äã The adapter interface is designed to be extensible. Future releases may include support for additional databases, but all will need to implement the full IDatabaseAdapter interface as defined in the BaseDrizzleAdapter. Further Reading‚Äã Entity SystemAgent Runtime","keywords":"database storage adapters PostgreSQL PGLite entities memories relationships multi-tenant embeddings","version":"1.0.17"},{"title":"Entities","type":0,"sectionRef":"#","url":"/docs/core/entities","content":"Entities Entities in ElizaOS represent users, agents, or any participant that can interact within the system. They form the basis of the entity-component architecture, allowing for flexible data modeling and relationships across the platform. Entity Structure‚Äã An entity in ElizaOS has the following properties: interface Entity { /** Unique identifier */ id: UUID; /** Array of names the entity is known by */ names: string[]; /** Optional additional metadata */ metadata?: { [key: string]: any }; /** Agent ID this entity is associated with */ agentId: UUID; /** Optional array of components */ components?: Component[]; } Property\tDescriptionid\tUnique identifier for the entity names\tArray of names the entity is known by metadata\tAdditional information about the entity agentId\tID of the agent this entity is associated with components\tArray of modular data components attached to this entity Components‚Äã Components are modular pieces of data attached to entities with the following structure: interface Component { id: UUID; entityId: UUID; type: string; data: { [key: string]: any }; worldId?: UUID; agentId: UUID; roomId: UUID; sourceEntityId?: UUID; createdAt: number; } Property\tDescriptionid\tUnique identifier for the component entityId\tID of the entity this component belongs to type\tType of component (e.g., &quot;profile&quot;, &quot;settings&quot;) data\tAdditional data specific to this component type worldId\tOptional ID of the world this component is in agentId\tID of the agent managing this component roomId\tID of the room this component is associated with sourceEntityId\tOptional ID of the entity that created this component createdAt\tTimestamp when the component was created Entity Creation and Management‚Äã Creating an Entity‚Äã // Create a single entity const success = await runtime.createEntity({ id: entityId, // Optional, will be generated if not provided names: ['John Doe', 'JohnD'], agentId: runtime.agentId, metadata: { discord: { id: 'discord-user-id', username: 'john_doe', name: 'John Doe', }, }, }); // Create multiple entities at once const success = await runtime.createEntities([ { id: entity1Id, names: ['User 1'], agentId: runtime.agentId }, { id: entity2Id, names: ['User 2'], agentId: runtime.agentId }, ]); Retrieving Entities‚Äã // Get an entity by ID const entity = await runtime.getEntityById(entityId); // Get multiple entities by IDs const entities = await runtime.getEntityByIds([entityId1, entityId2]); // Get all entities in a room const entitiesInRoom = await runtime.getEntitiesForRoom(roomId, true); // true to include components Updating an Entity‚Äã await runtime.updateEntity({ id: entityId, names: [...entity.names, 'Johnny'], metadata: { ...entity.metadata, customProperty: 'value', }, agentId: entity.agentId, }); Deleting an Entity‚Äã await runtime.adapter.deleteEntity(entityId); Component Management‚Äã Components allow for flexible data modeling by attaching different types of data to entities. Creating a Component‚Äã const success = await runtime.createComponent({ id: componentId, // Will be generated if not provided entityId: entityId, agentId: runtime.agentId, roomId: roomId, worldId: worldId, // Optional sourceEntityId: creatorEntityId, // Optional type: 'profile', data: { bio: 'Software developer interested in AI', location: 'San Francisco', website: 'https://example.com', }, createdAt: Date.now(), }); Retrieving Components‚Äã // Get a specific component type for an entity const profileComponent = await runtime.getComponent( entityId, 'profile', worldId, // optional filter by world sourceEntityId // optional filter by source ); // Get all components for an entity const allComponents = await runtime.getComponents( entityId, worldId, // optional filter by world sourceEntityId // optional filter by source ); Updating Components‚Äã await runtime.updateComponent({ ...profileComponent, data: { ...profileComponent.data, bio: 'Updated bio information', }, }); Deleting Components‚Äã await runtime.deleteComponent(componentId); Entity Relationships‚Äã Entities can have relationships with other entities: // Create a relationship between entities const success = await runtime.createRelationship({ sourceEntityId: entityId1, targetEntityId: entityId2, tags: ['friend', 'collaborator'], metadata: { interactions: 5, lastInteraction: Date.now(), }, }); // Get relationships for an entity const relationships = await runtime.getRelationships({ entityId: entityId1, tags: ['friend'], // optional filter by tags }); // Get a specific relationship const relationship = await runtime.getRelationship({ sourceEntityId: entityId1, targetEntityId: entityId2, }); // Update a relationship await runtime.updateRelationship({ id: relationship.id, sourceEntityId: relationship.sourceEntityId, targetEntityId: relationship.targetEntityId, agentId: relationship.agentId, tags: relationship.tags, metadata: { ...relationship.metadata, interactions: relationship.metadata.interactions + 1, lastInteraction: Date.now(), }, createdAt: relationship.createdAt, }); Entity Names and Search‚Äã ElizaOS provides methods to search for entities by their names: // Get entities by exact names const entities = await runtime.adapter.getEntitiesByNames({ names: ['John Doe', 'Jane Smith'], agentId: runtime.agentId, }); // Search entities by name with fuzzy matching const searchResults = await runtime.adapter.searchEntitiesByName({ query: 'john', agentId: runtime.agentId, limit: 10, // optional, defaults to 10 }); Entities and Room Participation‚Äã Entities participate in rooms through the participant system: // Add an entity as a participant in a room const success = await runtime.addParticipant(entityId, roomId); // Add multiple entities to a room at once const success = await runtime.addParticipantsRoom([entityId1, entityId2], roomId); // Remove an entity from a room const success = await runtime.removeParticipant(entityId, roomId); // Get all rooms where an entity is a participant const roomIds = await runtime.getRoomsForParticipant(entityId); // Get all participants in a room const participantIds = await runtime.getParticipantsForRoom(roomId); // Get participant details for an entity const participants = await runtime.getParticipantsForEntity(entityId); Participant User States‚Äã Participants can have states within rooms: // Get participant state in a room const state = await runtime.getParticipantUserState(roomId, entityId); // Returns: 'FOLLOWED' | 'MUTED' | null // Set participant state await runtime.setParticipantUserState(roomId, entityId, 'FOLLOWED'); await runtime.setParticipantUserState(roomId, entityId, 'MUTED'); await runtime.setParticipantUserState(roomId, entityId, null); // Clear state Creating Unique Entity IDs‚Äã For deterministic entity ID generation based on agent and user identifiers: import { createUniqueUuid } from '@elizaos/core'; // Create a unique ID for an entity-agent pair const uniqueEntityId = createUniqueUuid(agentId, userId); This ensures consistent entity IDs across sessions for the same user-agent combination. Best Practices‚Äã Entity ID Management: Use createUniqueUuid for consistent entity identification across sessions when you have stable user identifiersName Arrays: Store multiple variations of names (e.g., username, display name) to improve entity resolutionMetadata Organization: Structure metadata by source platform (e.g., discord, telegram) for clarityComponent Types: Use consistent component type names across your application for easier queryingRelationship Tracking: Update relationship metadata to reflect interaction patterns and frequencyBulk Operations: Use createEntities and addParticipantsRoom for better performance when handling multiple entitiesRoom Participation: Always ensure entities are properly added as participants before they interact in roomsComponent Lifecycle: Clean up components when they're no longer needed to maintain database efficiency","keywords":"entities components users agents participants relationships data modeling","version":"1.0.17"},{"title":"üß† Evaluators","type":0,"sectionRef":"#","url":"/docs/core/evaluators","content":"üß† Evaluators Evaluators are cognitive components in the ElizaOS framework that enable agents to process conversations, extract knowledge, and build understanding - similar to how humans form memories after interactions. They provide a structured way for agents to introspect, learn from interactions, and evolve over time. Understanding Evaluators‚Äã Evaluators are specialized functions that work with the AgentRuntime to analyze conversations after a response has been generated. Unlike actions that create responses, evaluators perform background cognitive tasks that enable numerous advanced capabilities: Knowledge Building: Automatically extract and store facts from conversationsRelationship Tracking: Identify connections between entitiesConversation Quality: Perform self-reflection on interaction qualityGoal Tracking: Determine if conversation objectives are being metTone Analysis: Evaluate emotional content and adjust future responsesUser Profiling: Build understanding of user preferences and needs over timePerformance Metrics: Gather data on agent effectiveness and learn from interactions Core Structure‚Äã import { Handler, Validator, EvaluationExample } from '@elizaos/core'; interface Evaluator { name: string; // Unique identifier similes?: string[]; // Alternative names/triggers description: string; // Purpose explanation examples: EvaluationExample[]; // Sample usage patterns handler: Handler; // Implementation logic validate: Validator; // Execution criteria check alwaysRun?: boolean; // Run regardless of validation } Evaluator Execution Flow‚Äã The agent runtime executes evaluators as part of its cognitive cycle: Agent processes a message and generates a responseRuntime calls evaluate() after response generationEach evaluator's validate() method determines if it should runFor each valid evaluator, the handler() function is executedResults are stored in memory and inform future responses Fact Evaluator: Memory Formation System‚Äã The Fact Evaluator serves as the agent's &quot;episodic memory formation&quot; system - similar to how humans process conversations and form memories. Just as you might reflect after a conversation &quot;Oh, I learned something new about Sarah today&quot;, the Fact Evaluator systematically processes conversations to build up the agent's understanding of the world and the people in it. How It Works‚Äã 1. Triggering (The &quot;When to Reflect&quot; System)‚Äã validate: async (runtime: IAgentRuntime, message: Memory): Promise&lt;boolean&gt; =&gt; { const messageCount = await runtime.messageManager.countMemories(message.roomId); const reflectionCount = Math.ceil(runtime.getConversationLength() / 2); return messageCount % reflectionCount === 0; }; Just like humans don't consciously analyze every single word in real-time, the Fact Evaluator runs periodically rather than after every message. It triggers a &quot;reflection&quot; phase every few messages to process what's been learned. 2. Fact Extraction (The &quot;What Did I Learn?&quot; System)‚Äã The evaluator uses a template-based approach to extract three types of information: Facts: Unchanging truths about the world or people &quot;Bob lives in New York&quot;&quot;Sarah has a degree in Computer Science&quot; Status: Temporary or changeable states &quot;Bob is currently working on a new project&quot;&quot;Sarah is visiting Paris this week&quot; Opinions: Subjective views, feelings, or non-factual statements &quot;Bob thinks the project will be successful&quot;&quot;Sarah loves French cuisine&quot; 3. Memory Deduplication (The &quot;Is This New?&quot; System)‚Äã const filteredFacts = facts.filter((fact) =&gt; { return ( !fact.already_known &amp;&amp; fact.type === 'fact' &amp;&amp; !fact.in_bio &amp;&amp; fact.claim &amp;&amp; fact.claim.trim() !== '' ); }); Just as humans don't need to consciously re-learn things they already know, the Fact Evaluator: Checks if information is already knownVerifies if it's in the agent's existing knowledge (bio)Filters out duplicate or corrupted facts 4. Memory Storage (The &quot;Remember This&quot; System)‚Äã const factMemory = await factsManager.addEmbeddingToMemory({ userId: agentId!, agentId, content: { text: fact }, roomId, createdAt: Date.now(), }); Facts are stored with embeddings to enable: Semantic search of related factsContext-aware recallTemporal tracking (when the fact was learned) Example Processing‚Äã Given this conversation: User: &quot;I just moved to Seattle last month!&quot; Agent: &quot;How are you finding the weather there?&quot; User: &quot;It's rainy, but I love my new job at the tech startup&quot; The Fact Evaluator might extract: [ { &quot;claim&quot;: &quot;User moved to Seattle last month&quot;, &quot;type&quot;: &quot;fact&quot;, &quot;in_bio&quot;: false, &quot;already_known&quot;: false }, { &quot;claim&quot;: &quot;User works at a tech startup&quot;, &quot;type&quot;: &quot;fact&quot;, &quot;in_bio&quot;: false, &quot;already_known&quot;: false }, { &quot;claim&quot;: &quot;User enjoys their new job&quot;, &quot;type&quot;: &quot;opinion&quot;, &quot;in_bio&quot;: false, &quot;already_known&quot;: false } ] Key Design Considerations‚Äã Episodic vs Semantic Memory Facts build up the agent's semantic memory (general knowledge)The raw conversation remains in episodic memory (specific experiences) Temporal Awareness Facts are timestamped to track when they were learnedStatus facts can be updated as they change Confidence and Verification Multiple mentions of a fact increase confidenceContradictory facts can be flagged for verification Privacy and Relevance Only stores relevant, conversation-appropriate factsRespects explicit and implicit privacy boundaries Reflection Evaluator: Self-Awareness System‚Äã The reflection evaluator extends beyond fact extraction to enable agents to develop a form of &quot;self-awareness&quot; about their conversational performance. It allows agents to: Generate self-reflective thoughts about the conversation qualityExtract factual information from conversations (similar to the Fact Evaluator)Identify and track relationships between entities How Reflections Work‚Äã When triggered, the reflection evaluator: Analyzes recent conversations and existing knowledgeGenerates structured reflection output with: Self-reflective thoughts about conversation qualityNew facts extracted from conversationIdentified relationships between entities Stores this information in the agent's memory for future reference Example Reflection Output‚Äã { &quot;thought&quot;: &quot;I'm engaging appropriately with John, maintaining a welcoming and professional tone. My questions are helping learn more about him as a new community member.&quot;, &quot;facts&quot;: [ { &quot;claim&quot;: &quot;John is new to the community&quot;, &quot;type&quot;: &quot;fact&quot;, &quot;in_bio&quot;: false, &quot;already_known&quot;: false }, { &quot;claim&quot;: &quot;John found the community through a friend interested in AI&quot;, &quot;type&quot;: &quot;fact&quot;, &quot;in_bio&quot;: false, &quot;already_known&quot;: false } ], &quot;relationships&quot;: [ { &quot;sourceEntityId&quot;: &quot;sarah-agent&quot;, &quot;targetEntityId&quot;: &quot;user-123&quot;, &quot;tags&quot;: [&quot;group_interaction&quot;] }, { &quot;sourceEntityId&quot;: &quot;user-123&quot;, &quot;targetEntityId&quot;: &quot;sarah-agent&quot;, &quot;tags&quot;: [&quot;group_interaction&quot;] } ] } Implementation Details‚Äã The reflection evaluator uses a defined schema to ensure consistent output: const reflectionSchema = z.object({ facts: z.array( z.object({ claim: z.string(), type: z.string(), in_bio: z.boolean(), already_known: z.boolean(), }) ), relationships: z.array(relationshipSchema), }); const relationshipSchema = z.object({ sourceEntityId: z.string(), targetEntityId: z.string(), tags: z.array(z.string()), metadata: z .object({ interactions: z.number(), }) .optional(), }); Validation Logic‚Äã The reflection evaluator includes validation logic that determines when reflection should occur: validate: async (runtime: IAgentRuntime, message: Memory): Promise&lt;boolean&gt; =&gt; { const lastMessageId = await runtime.getCache&lt;string&gt;( `${message.roomId}-reflection-last-processed` ); const messages = await runtime.getMemories({ tableName: 'messages', roomId: message.roomId, count: runtime.getConversationLength(), }); if (lastMessageId) { const lastMessageIndex = messages.findIndex((msg) =&gt; msg.id === lastMessageId); if (lastMessageIndex !== -1) { messages.splice(0, lastMessageIndex + 1); } } const reflectionInterval = Math.ceil(runtime.getConversationLength() / 4); return messages.length &gt; reflectionInterval; }; This ensures reflections occur at appropriate intervals, typically after a set number of messages have been exchanged. Common Memory Formation Patterns‚Äã Progressive Learning // First conversation &quot;I live in Seattle&quot; -&gt; Stores as fact // Later conversation &quot;I live in the Ballard neighborhood&quot; -&gt; Updates/enhances existing fact Fact Chaining // Original facts 'Works at tech startup'; 'Startup is in Seattle'; // Inference potential 'Works in Seattle tech industry'; Temporal Tracking // Status tracking t0: 'Looking for a job'(status); t1: 'Got a new job'(fact); t2: 'Been at job for 3 months'(status); Relationship Building // Initial relationship { &quot;sourceEntityId&quot;: &quot;user-123&quot;, &quot;targetEntityId&quot;: &quot;sarah-agent&quot;, &quot;tags&quot;: [&quot;new_interaction&quot;] } // Evolving relationship { &quot;sourceEntityId&quot;: &quot;user-123&quot;, &quot;targetEntityId&quot;: &quot;sarah-agent&quot;, &quot;tags&quot;: [&quot;frequent_interaction&quot;, &quot;positive_sentiment&quot;], &quot;metadata&quot;: { &quot;interactions&quot;: 15 } } Integration with Other Systems‚Äã Evaluators work alongside other components: Goal Evaluator: Facts and reflections may influence goal progressTrust Evaluator: Fact consistency affects trust scoringMemory Manager: Facts enhance context for future conversationsProviders: Facts inform response generation Creating Custom Evaluators‚Äã You can create your own evaluators by implementing the Evaluator interface: import { Evaluator, IAgentRuntime, Memory, State } from '@elizaos/core'; const customEvaluator: Evaluator = { name: 'CUSTOM_EVALUATOR', similes: ['ANALYZE', 'ASSESS'], description: 'Performs custom analysis on conversations', validate: async (runtime: IAgentRuntime, message: Memory): Promise&lt;boolean&gt; =&gt; { // Your validation logic here return true; }, handler: async (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; { // Your evaluation logic here // Example of storing evaluation results await runtime.addEmbeddingToMemory({ entityId: runtime.agentId, content: { text: 'Evaluation result' }, roomId: message.roomId, createdAt: Date.now(), }); return { result: 'evaluation complete' }; }, examples: [ { prompt: `Example context`, messages: [ { name: 'User', content: { text: 'Example message' } }, { name: 'Agent', content: { text: 'Example response' } }, ], outcome: `{ &quot;result&quot;: &quot;example outcome&quot; }`, }, ], }; Registering Custom Evaluators‚Äã Custom evaluators can be registered with the agent runtime: // In your plugin's initialization export default { name: 'custom-evaluator-plugin', description: 'Adds custom evaluation capabilities', init: async (config: any, runtime: IAgentRuntime) =&gt; { // Register your custom evaluator runtime.registerEvaluator(customEvaluator); }, // Include the evaluator in the plugin exports evaluators: [customEvaluator], }; Best Practices for Memory Formation‚Äã Validate Facts Cross-reference with existing knowledgeConsider source reliabilityTrack fact confidence levels Manage Memory Growth Prioritize important factsConsolidate related factsArchive outdated status facts Handle Contradictions Flag conflicting factsMaintain fact historyUpdate based on newest information Respect Privacy Filter sensitive informationConsider contextual appropriatenessFollow data retention policies Balance Reflection Frequency Too frequent: Computational overheadToo infrequent: Missing important informationAdapt based on conversation complexity and pace FAQ‚Äã What's the difference between actions and evaluators?‚Äã Actions are triggered during response generation and create visible outputs, while evaluators run after responses and perform background cognitive tasks without direct user visibility. When should I use the Fact Evaluator vs. the Reflection Evaluator?‚Äã Use the Fact Evaluator when you only need to extract and store factual information. Use the Reflection Evaluator when you need both fact extraction and relationship tracking, along with self-reflective assessment. How often do evaluators run?‚Äã By default, evaluators run at intervals based on conversation length, typically after every few messages, to avoid unnecessary processing while still capturing important information. Can evaluators affect future responses?‚Äã Yes! Facts and relationships stored by evaluators become part of the agent's memory and context, influencing future responses through the retrieval-augmented generation system. How do I debug evaluator issues?‚Äã Use the logger to inspect evaluator execution and output. The most common issues involve entity resolution failures or schema validation errors. Can evaluators work across different platforms?‚Äã Yes, evaluators are platform-agnostic and work the same way regardless of whether your agent is deployed on Discord, Twitter, Telegram, or web interfaces. Related Resources‚Äã Actions DocumentationProviders DocumentationAgent Runtime","keywords":"evaluators cognition learning memory facts reflection analysis","version":"1.0.17"},{"title":"üß† Knowledge System","type":0,"sectionRef":"#","url":"/docs/core/knowledge","content":"üß† Knowledge System The Knowledge System in ElizaOS enables agents to process, store, and retrieve information from documents using the @elizaos/plugin-knowledge plugin. This provides Retrieval-Augmented Generation (RAG) capabilities, allowing agents to answer questions based on stored knowledge. Quick Start‚Äã Step 1: Install the Plugin‚Äã Add the knowledge plugin to your agent configuration by including it in the plugins array as a string: import { type Character } from '@elizaos/core'; export const character: Character = { name: 'MyAgent', plugins: [ '@elizaos/plugin-sql', // MUST be first - provides database '@elizaos/plugin-openai', // MUST be before knowledge - provides embeddings '@elizaos/plugin-knowledge', // Requires both sql and embedding provider // ... other plugins can go here ], // ... rest of character config }; ‚ö†Ô∏è CRITICAL: Plugin Order Matters! The knowledge plugin has dependencies that MUST be loaded in the correct order: @elizaos/plugin-sql - Must be loaded FIRST as it provides the database adapterAn embedding provider plugin (e.g., @elizaos/plugin-openai) - Must be loaded BEFORE knowledge plugin as it provides the text embedding service@elizaos/plugin-knowledge - Must be loaded AFTER its dependencies If you don't follow this order, the knowledge plugin will fail to initialize! Step 2: Enable Auto-Loading (Recommended)‚Äã Add this to your .env file to automatically load documents on startup: LOAD_DOCS_ON_STARTUP=true Step 3: Create Knowledge Folder‚Äã Create a knowledge folder in your project root and add your documents: your-project/ ‚îú‚îÄ‚îÄ .env ‚îú‚îÄ‚îÄ knowledge/ &lt;-- Create this folder ‚îÇ ‚îú‚îÄ‚îÄ guide.pdf ‚îÇ ‚îú‚îÄ‚îÄ documentation.md ‚îÇ ‚îú‚îÄ‚îÄ data.txt ‚îÇ ‚îî‚îÄ‚îÄ ... more documents ‚îú‚îÄ‚îÄ src/ ‚îî‚îÄ‚îÄ package.json That's it! Your agent will automatically load all documents when it starts. Complete Example‚Äã Here's a full example of a character configuration with the knowledge plugin: import { type Character } from '@elizaos/core'; export const character: Character = { name: 'KnowledgeBot', plugins: [ // Required dependencies in correct order '@elizaos/plugin-sql', // 1. Database (REQUIRED FIRST) '@elizaos/plugin-openai', // 2. Embeddings provider (REQUIRED SECOND) '@elizaos/plugin-knowledge', // 3. Knowledge plugin (MUST BE AFTER DEPENDENCIES) '@elizaos/plugin-bootstrap', // Optional plugins can go after ...(process.env.DISCORD_API_TOKEN ? ['@elizaos/plugin-discord'] : []), ...(process.env.TELEGRAM_BOT_TOKEN ? ['@elizaos/plugin-telegram'] : []), ], system: 'You are a helpful assistant that uses your knowledge base to answer questions accurately.', bio: [ 'Expert at retrieving and using stored knowledge', 'Provides accurate information from documents', 'Helpful and conversational', ], // ... other character properties }; Alternative Embedding Providers: If you're not using OpenAI, you can use other embedding providers, but they must still be loaded before the knowledge plugin: plugins: [ '@elizaos/plugin-sql', // Always first '@elizaos/plugin-openai', // OR '@elizaos/plugin-google', // OR use Google for embeddings // OR '@elizaos/plugin-ollama', // OR use Ollama for embeddings '@elizaos/plugin-knowledge', // Always after sql and embedding provider ]; How It Works‚Äã When you start your agent with the knowledge plugin: Automatic Detection: The plugin checks if you have plugin-openai configuredDocument Loading: If LOAD_DOCS_ON_STARTUP=true, it scans the knowledge folderProcessing: Each document is processed, chunked, and embeddedStorage: Knowledge is stored in the agent's database with vector embeddingsRetrieval: When users ask questions, relevant knowledge is retrieved and used Folder Structure‚Äã The plugin looks for documents in this order: Custom Path (if KNOWLEDGE_PATH env var is set)knowledge/ folder in project root (recommended)docs/ folder in project root (legacy support) your-project/ ‚îú‚îÄ‚îÄ knowledge/ # Primary location (recommended) ‚îÇ ‚îú‚îÄ‚îÄ products/ # You can organize in subfolders ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ manual.pdf ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ specs.md ‚îÇ ‚îú‚îÄ‚îÄ policies/ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ terms.txt ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ privacy.md ‚îÇ ‚îî‚îÄ‚îÄ general-info.pdf ‚îî‚îÄ‚îÄ docs/ # Alternative location (legacy) Supported File Types‚Äã Documents‚Äã PDF (.pdf) - Full text extractionMarkdown (.md, .markdown) - Preserves formattingText (.txt, .log) - Plain text filesMicrosoft Word (.doc, .docx) - Full document support Code Files‚Äã JavaScript/TypeScript (.js, .jsx, .ts, .tsx, .mjs, .cjs)Python (.py, .pyw, .pyi)Java/Kotlin (.java, .kt, .kts)C/C++/C# (.c, .cpp, .cc, .h, .hpp, .cs)Go (.go)Rust (.rs)Ruby (.rb)PHP (.php)Swift (.swift)And many more programming languages... Data &amp; Config Files‚Äã JSON (.json)YAML (.yaml, .yml)XML (.xml)CSV (.csv)TOML (.toml)INI (.ini, .cfg, .conf)Environment (.env) Web Files‚Äã HTML (.html, .htm)CSS (.css, .scss, .sass, .less)Vue/React/Svelte (.vue, .jsx, .svelte) Using Knowledge‚Äã Once documents are loaded, users can interact naturally: Asking Questions‚Äã Users can ask questions in natural language: &quot;What does the documentation say about authentication?&quot;&quot;Can you explain the setup process from the guide?&quot;&quot;What are the product specifications?&quot;&quot;Search your knowledge for information about pricing&quot; Available Actions‚Äã The plugin provides two main actions: 1. PROCESS_KNOWLEDGE‚Äã Adds new documents or text to the knowledge base: User: &quot;Process the document at /path/to/new-guide.pdf&quot; Agent: &quot;I'll process the document and add it to my knowledge base.&quot; User: &quot;Remember this: Our office hours are 9 AM to 5 PM EST&quot; Agent: &quot;I've added that information to my knowledge base.&quot; 2. SEARCH_KNOWLEDGE‚Äã Explicitly searches the knowledge base: User: &quot;Search your knowledge for refund policy&quot; Agent: &quot;Here's what I found about refund policy: [relevant information]&quot; Configuration Options‚Äã Basic Configuration‚Äã For most users, the default configuration works perfectly. Just add the plugin and optionally set: # Enable automatic document loading LOAD_DOCS_ON_STARTUP=true # Optional: Custom document path KNOWLEDGE_PATH=/path/to/your/documents Advanced Configuration‚Äã If you're not using plugin-openai, you'll need to configure embeddings: # Embedding Provider Configuration EMBEDDING_PROVIDER=openai # or google TEXT_EMBEDDING_MODEL=text-embedding-3-small OPENAI_API_KEY=your-api-key # or GOOGLE_API_KEY for Google # Embedding Dimensions (must match your model) # OpenAI text-embedding-3-small: 1536 # OpenAI text-embedding-3-large: 3072 # Google text-embedding-004: 768 Rate Limiting‚Äã Configure rate limits to avoid API throttling: MAX_CONCURRENT_REQUESTS=30 REQUESTS_PER_MINUTE=60 TOKENS_PER_MINUTE=150000 Web Interface‚Äã The plugin includes a web interface for managing documents. Access it at: http://localhost:3000/api/agents/[your-agent-id]/plugins/knowledge/display Features: Upload new documentsView processed documentsDelete documentsSearch knowledge baseView processing statistics Best Practices‚Äã 1. Document Organization‚Äã Structure your knowledge folder logically: knowledge/ ‚îú‚îÄ‚îÄ products/ # Product information ‚îú‚îÄ‚îÄ support/ # Support documentation ‚îú‚îÄ‚îÄ policies/ # Company policies ‚îî‚îÄ‚îÄ faqs/ # Frequently asked questions Benefits: Easier maintenanceBetter context for the agentSimpler updates 2. Document Preparation‚Äã For best results: Use clear, descriptive filenamesBreak large documents into focused topicsUse markdown for structured contentInclude context in document headers Example markdown structure: # Product Setup Guide Category: Installation Last Updated: 2024-01-15 ## Overview This guide covers the installation process... ## Prerequisites - Requirement 1 - Requirement 2 ## Steps 1. First step... 2. Second step... 3. Content Guidelines‚Äã DO: ‚úÖ Use clear, concise language‚úÖ Structure information hierarchically‚úÖ Include examples and use cases‚úÖ Update documents regularly DON'T: ‚ùå Include sensitive information (passwords, keys)‚ùå Use overly technical jargon without explanation‚ùå Create documents larger than 10MB‚ùå Mix unrelated topics in one document 4. Performance Optimization‚Äã For large knowledge bases: Keep individual files under 5MBUse focused, topic-specific documentsRegularly review and update contentRemove outdated information Troubleshooting‚Äã Plugin Initialization Errors‚Äã If you see errors like &quot;Knowledge service not available&quot; or &quot;Failed to initialize Knowledge plugin&quot;: Check plugin order - This is the #1 cause of initialization failures! // ‚ùå WRONG - knowledge plugin before its dependencies plugins: ['@elizaos/plugin-knowledge', '@elizaos/plugin-sql', '@elizaos/plugin-openai']; // ‚úÖ CORRECT - dependencies first plugins: ['@elizaos/plugin-sql', '@elizaos/plugin-openai', '@elizaos/plugin-knowledge']; Verify embedding provider - You MUST have an embedding provider: @elizaos/plugin-openai (requires OPENAI_API_KEY)@elizaos/plugin-google (requires GOOGLE_API_KEY)@elizaos/plugin-ollama (for local models) Check environment variables - Ensure your embedding provider has valid credentials Documents Not Loading‚Äã Check these common issues: Folder exists? ls -la knowledge/ # Should show your documents Environment variable set? grep LOAD_DOCS_ON_STARTUP .env # Should show =true File permissions? # Ensure files are readable chmod -R 644 knowledge/*.pdf Supported file type? Check the supported file types list aboveEnsure files aren't corrupted Knowledge Not Retrieved‚Äã If the agent can't find information: Check if documents were processed: Look for startup logs: &quot;Loaded X documents from docs folder&quot;Access the web interface to verify documents Improve your questions: Be specific: &quot;What does the setup guide say about database configuration?&quot;Use keywords from the documentsTry different phrasings Verify content: Ensure the information exists in your documentsCheck if documents are properly formattedAvoid documents with only images (no text) Processing Errors‚Äã For specific file issues: PDF errors: Ensure PDFs aren't password-protectedCheck if PDFs contain extractable textTry re-saving the PDF Large file issues: Split documents over 10MBUse text formats when possibleCompress images in documents Encoding issues: Save files as UTF-8Avoid special characters in filenamesUse standard file extensions API Reference‚Äã REST API Endpoints‚Äã The plugin provides these HTTP endpoints: # Upload a document POST /api/agents/{agentId}/plugins/knowledge/documents Content-Type: multipart/form-data Body: file upload # List all documents GET /api/agents/{agentId}/plugins/knowledge/documents # Get specific document GET /api/agents/{agentId}/plugins/knowledge/documents/{documentId} # Delete a document DELETE /api/agents/{agentId}/plugins/knowledge/documents/{documentId} # Search knowledge POST /api/agents/{agentId}/plugins/knowledge/search Body: { &quot;query&quot;: &quot;search terms&quot; } Programmatic Usage‚Äã For advanced users who want to add knowledge programmatically: // Get the knowledge service const knowledgeService = runtime.getService('knowledge'); // Add knowledge from text await knowledgeService.addKnowledge({ clientDocumentId: 'unique-id', content: 'The information to store...', contentType: 'text/plain', originalFilename: 'dynamic-content.txt', worldId: runtime.agentId, roomId: message.roomId, entityId: message.entityId, }); // Search knowledge const results = await knowledgeService.getKnowledge(message); Migration from Legacy System‚Äã If you're migrating from the old knowledge system: Move files to knowledge folder: mkdir knowledge mv docs/* knowledge/ Update configuration: Remove old knowledge arrays from character filesAdd the plugin to your agentSet LOAD_DOCS_ON_STARTUP=true Clean up: Remove manual knowledge loading codeDelete old knowledge management functionsUpdate any custom integrations Security Considerations‚Äã Data Privacy‚Äã Never store sensitive data like passwords, API keys, or personal informationReview documents before adding them to ensure complianceUse access controls in production environments File Security‚Äã Validate file sources before processingScan for malware in production systemsLimit file sizes to prevent resource exhaustionMonitor disk usage for knowledge storage API Security‚Äã Authenticate API requests in productionRate limit upload endpointsValidate file types on uploadLog access to knowledge endpoints Performance Tips‚Äã Optimizing Retrieval‚Äã Quality over Quantity: Focus on high-quality, relevant documentsRegular Maintenance: Remove outdated or redundant informationStructured Content: Use consistent formatting across documentsMetadata: Include descriptive headers and categories Scaling Considerations‚Äã For large deployments: Use PostgreSQL instead of PGLite for better performanceImplement caching for frequently accessed knowledgeConsider dedicated embedding servicesMonitor query performance and optimize as needed Examples‚Äã Customer Support Bot‚Äã knowledge/ ‚îú‚îÄ‚îÄ products/ ‚îÇ ‚îú‚îÄ‚îÄ product-catalog.md ‚îÇ ‚îú‚îÄ‚îÄ pricing-guide.pdf ‚îÇ ‚îî‚îÄ‚îÄ feature-comparison.xlsx ‚îú‚îÄ‚îÄ support/ ‚îÇ ‚îú‚îÄ‚îÄ troubleshooting-guide.md ‚îÇ ‚îú‚îÄ‚îÄ faq.md ‚îÇ ‚îî‚îÄ‚îÄ contact-info.txt ‚îî‚îÄ‚îÄ policies/ ‚îú‚îÄ‚îÄ return-policy.pdf ‚îú‚îÄ‚îÄ warranty-terms.md ‚îî‚îÄ‚îÄ privacy-policy.txt Technical Documentation Bot‚Äã knowledge/ ‚îú‚îÄ‚îÄ api/ ‚îÇ ‚îú‚îÄ‚îÄ rest-api-reference.md ‚îÇ ‚îú‚îÄ‚îÄ graphql-schema.json ‚îÇ ‚îî‚îÄ‚îÄ examples/ ‚îÇ ‚îú‚îÄ‚îÄ python-examples.py ‚îÇ ‚îî‚îÄ‚îÄ javascript-examples.js ‚îú‚îÄ‚îÄ guides/ ‚îÇ ‚îú‚îÄ‚îÄ getting-started.md ‚îÇ ‚îú‚îÄ‚îÄ advanced-usage.md ‚îÇ ‚îî‚îÄ‚îÄ best-practices.md ‚îî‚îÄ‚îÄ troubleshooting/ ‚îú‚îÄ‚îÄ common-errors.md ‚îî‚îÄ‚îÄ debugging-guide.md Company Information Bot‚Äã knowledge/ ‚îú‚îÄ‚îÄ about/ ‚îÇ ‚îú‚îÄ‚îÄ company-history.md ‚îÇ ‚îú‚îÄ‚îÄ mission-vision.txt ‚îÇ ‚îî‚îÄ‚îÄ team-bios.md ‚îú‚îÄ‚îÄ services/ ‚îÇ ‚îú‚îÄ‚îÄ service-offerings.pdf ‚îÇ ‚îú‚îÄ‚îÄ case-studies/ ‚îÇ ‚îî‚îÄ‚îÄ testimonials.md ‚îî‚îÄ‚îÄ resources/ ‚îú‚îÄ‚îÄ blog-posts/ ‚îú‚îÄ‚îÄ whitepapers/ ‚îî‚îÄ‚îÄ presentations/ Further Reading‚Äã Plugin System - Learn about ElizaOS pluginsDatabase System - Understand knowledge storageAgent Configuration - Configure your agents Need Help? Check the plugin README for additional details and advanced configuration options.","keywords":"knowledge RAG embeddings documents processing retrieval semantic search plugin-knowledge","version":"1.0.17"},{"title":"ÔøΩÔøΩ ElizaOS Projects","type":0,"sectionRef":"#","url":"/docs/core/project","content":"ÔøΩÔøΩ ElizaOS Projects When you create a new project using elizaos create, it comes with a comprehensive structure designed for modern development, testing, and deployment. This guide provides a detailed breakdown of each part of the project. Full Project Layout‚Äã my-project/ ‚îú‚îÄ‚îÄ src/ ‚îÇ ‚îú‚îÄ‚îÄ index.ts # Main entry point with character definitions ‚îÇ ‚îî‚îÄ‚îÄ plugin.ts # Custom plugin implementation ‚îú‚îÄ‚îÄ __tests__/ # Comprehensive test suite ‚îÇ ‚îú‚îÄ‚îÄ actions.test.ts # Action testing ‚îÇ ‚îú‚îÄ‚îÄ character.test.ts # Character validation ‚îÇ ‚îú‚îÄ‚îÄ integration.test.ts # Integration tests ‚îÇ ‚îî‚îÄ‚îÄ [additional test files] ‚îú‚îÄ‚îÄ scripts/ ‚îÇ ‚îî‚îÄ‚îÄ test-all.sh # Testing automation scripts ‚îú‚îÄ‚îÄ cypress/ # End-to-end testing configuration ‚îú‚îÄ‚îÄ knowledge/ # (Optional) Knowledge files for RAG (create manually) ‚îú‚îÄ‚îÄ .env.example # Environment variable template ‚îú‚îÄ‚îÄ package.json # Project configuration and dependencies ‚îú‚îÄ‚îÄ tsconfig.json # TypeScript configuration ‚îú‚îÄ‚îÄ tsconfig.build.json # Build-specific TypeScript config ‚îú‚îÄ‚îÄ README.md # Project documentation ‚îú‚îÄ‚îÄ cypress.config.ts # E2E testing configuration ‚îú‚îÄ‚îÄ index.html # Web interface entry point ‚îú‚îÄ‚îÄ postcss.config.js # CSS processing configuration ‚îú‚îÄ‚îÄ tailwind.config.js # Tailwind CSS configuration ‚îú‚îÄ‚îÄ tsup.config.ts # Build tool configuration ‚îú‚îÄ‚îÄ vite.config.ts # Development server configuration ‚îî‚îÄ‚îÄ vitest.config.ts # Unit testing configuration Key Directories and Files Explained‚Äã Source Code (src/)‚Äã src/index.ts: This is the most important file for defining your agent. It's where you configure the agent's character, personality, default model, and the plugins it should use.src/plugin.ts: A starter file for creating your own custom plugin. This is where you can define new actions, providers, or services to extend your agent's capabilities. Testing (__tests__/, cypress/)‚Äã ElizaOS projects come with a robust, multi-layered testing setup. __tests__/: This directory contains unit and integration tests for your agent. It uses vitest. You can test individual actions, character configurations, and more in isolation.cypress/: For end-to-end (E2E) testing. Cypress tests interact with the running application's UI to simulate real user scenarios.cypress.config.ts, vitest.config.ts: Configuration files for the respective test frameworks. Knowledge (knowledge/)‚Äã This directory is not created by default. You should create it manually if you want to use Retrieval Augmented Generation (RAG).Place your documents (.pdf, .txt, etc.) in this directory. The agent will automatically ingest them on startup to build its knowledge base, allowing it to answer questions based on their content. For a complete guide on how to configure and use the knowledge system, see the Knowledge Management documentation. # To use RAG, first create the directory mkdir knowledge # Add your documents cp ~/my-document.pdf knowledge/ Build &amp; Dev Tools‚Äã The project template uses a modern toolchain for a great developer experience. vite.config.ts: Configuration for Vite, the high-performance development server that provides features like Hot-Module-Replacement (HMR).tsup.config.ts: Configuration for tsup, a fast and simple bundler for TypeScript libraries. Used to build your project for production.tailwind.config.js, postcss.config.js: Configuration for Tailwind CSS, allowing you to build modern UIs quickly.tsconfig.json, tsconfig.build.json: TypeScript configuration for development and for production builds. Project Configuration‚Äã package.json: Defines project metadata, dependencies, and scripts (like dev, build, test)..env.example: A template for your environment variables. Copy this to a .env file (cp .env.example .env) and add your secrets, like API keys. Never commit your .env file to git.README.md: A pre-populated README for your specific project..gitignore: A standard list of files and directories to be ignored by git. Configuring Your Project‚Äã The main project file (src/index.ts) exports a default project object that brings together your agents and their characters. import type { Character, IAgentRuntime, Project, ProjectAgent } from '@elizaos/core'; import customPlugin from './plugin'; // Define the character export const character: Character = { name: 'Agent Name', plugins: ['@elizaos/plugin-discord', '@elizaos/plugin-direct'], // Other character properties... }; // Create a ProjectAgent that includes the character and any project-specific plugins export const projectAgent: ProjectAgent = { character, init: async (runtime: IAgentRuntime) =&gt; { // Initialize agent-specific functionality console.log('Initializing agent:', character.name); }, plugins: [customPlugin], tests: [], // Optional tests for your agent }; // Export the full project containing all agents const project: Project = { agents: [projectAgent], }; export default project; For a full breakdown of all the properties available in a Character, see the Character Files documentation. Running Your Project‚Äã After configuring your project, you can run it using the start command from your project's root directory: elizaos start This will start your agents according to your project configuration.","keywords":"projects organization configuration character agents deployment structure","version":"1.0.17"},{"title":"Plugins","type":0,"sectionRef":"#","url":"/docs/core/plugins","content":"Plugins Plugins are modular extensions that enhance the capabilities of ElizaOS agents. They provide a flexible way to add new functionality, integrate external services, and customize agent behavior across different platforms. info Key Improvements in V2 Unified API: Almost everything is accessible via runtime.methodName() in the agent runtime for simpler developmentEnhanced Model System: The new useModel approach allows for flexible model provider registrationEvents System: Formal support for event-based programmingPlugin Creation Workflow: Simplified creation and testing via CLITesting Infrastructure: Built-in support for plugin testingNo Monorepo Required: Complete plugin development without touching the core codebasePlugin Registry: Manages the catalog of available plugins and handles their registration with the runtimeBootstrap Plugin: Initializes core functionality required for all agents to operate The ElizaOS plugin system maintains the same basic concept as previous versions, with several new extension points (events, routes, tests, models) and features that significantly improve the developer experience. Browse plugins the elizaOS community made here: Package Showcase elizaOS maintains an official package registry at github.com/elizaos-plugins/registry. Quick Start‚Äã The new CLI tool introduces a streamlined workflow for plugin development without ever needing to touch the ElizaOS monorepo directly: Create: bun create eliza - Initialize a new plugin project with proper structureDevelop: Edit the plugin code in the generated project structureTest: elizaos test - Test the plugin functionalityRun: elizaos start - Run the plugin with a default agentPublish: elizaos publish - Share your plugin with others Creating a New Plugin‚Äã You can create a new ElizaOS plugin using the CLI: # Using bun (recommended) bun create eliza # Or using bunx bunx create-eliza When prompted, select &quot;Plugin&quot; as the type to create. The CLI will guide you through the setup process, creating a plugin with the proper structure and dependencies. Managing Plugins‚Äã There are several ways to add plugins to your ElizaOS project: Via package.jsonVia Character DefinitionVia CLI Commands { &quot;dependencies&quot;: { &quot;@elizaos/plugin-solana&quot;: &quot;github:elizaos-plugins/plugin-solana&quot;, &quot;@elizaos/plugin-farcaster&quot;: &quot;github:elizaos-plugins/plugin-farcaster&quot; } } Plugin Configuration‚Äã Configure plugin settings in your character definition: { &quot;name&quot;: &quot;MyAgent&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-example&quot;], &quot;settings&quot;: { &quot;example&quot;: { &quot;enableFeatureX&quot;: true } } } Plugin Loading Process‚Äã The AgentRuntime automatically loads the Bootstrap Plugin during initialization, before any other plugins: async initialize() { // Register bootstrap plugin await this.registerPlugin(bootstrapPlugin); // Then register additional plugins for (const plugin of this.plugins) { await this.registerPlugin(plugin); } // Initialize other components // ... } Publishing Plugins‚Äã If you're a plugin developer, you can publish your plugin to make it available to others. The ElizaOS CLI provides several options for publishing your plugin depending on your needs. First, make sure your plugin is built and ready for distribution: # Navigate to your plugin directory cd my-eliza-plugin # Build your plugin bun run build GitHub Publishingnpm PublishingTest ModeAdditional Options Publishing to GitHub is the recommended approach for sharing your plugin with the ElizaOS community: # Publish to GitHub elizaos publish This will: Build and package your pluginCreate or update a GitHub repository in the elizaos-plugins organizationAdd your plugin to the ElizaOS registry (if you're a registry maintainer) For first-time publishers, the CLI will guide you through setting up GitHub credentials for publishing. GitHub publishing is ideal for open-source plugins that you want to share with the community and have listed in the official registry. info When submitting a plugin to the elizaOS Registry, include: Working Demo: Screenshots or video of your plugin in actionTest Results: Evidence of successful integration and error handlingConfiguration Example: Show how to properly configure your plugin Plugin Architecture‚Äã Eliza uses a unified plugin architecture where everything is a plugin - including services, adapters, actions, evaluators, and providers. This approach ensures consistent behavior and better extensibility. Plugin Components‚Äã Each plugin can provide one or more of the following components: Component\tPurposeServices\tPlatform integrations (Discord, Telegram, etc.) or specialized capabilities Actions\tExecutable functions triggered by the agent (reply, generate content, etc.) Providers\tContext providers that supply info to the agent during decision making Evaluators\tAnalyze conversations to extract insights and improve future interactions Adapters\tDatabase or storage system integrations Model Handlers\tRegister handlers for different model types (text generation, embeddings, etc.) Event Handlers\tReact to system events like messages, connections, or actions API Routes\tAdd custom REST endpoints to the agent's HTTP interface Tests\tInclude test suites to verify plugin functionality Plugin Interface‚Äã All plugins implement the core Plugin interface: import { IAgentRuntime, Service, Action, Provider, Evaluator, Adapter, Route, TestSuite, } from '@elizaos/core'; interface Plugin { name: string; description: string; config?: { [key: string]: any }; // Optional initialization method init?: (config: Record&lt;string, string&gt;, runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; // Components services?: (typeof Service)[]; actions?: Action[]; providers?: Provider[]; evaluators?: Evaluator[]; adapters?: Adapter[]; // Additional features routes?: Route[]; tests?: TestSuite[]; events?: { [key: string]: ((params: any) =&gt; Promise&lt;any&gt;)[] }; } Service Implementation‚Äã Services are the core integration points for external platforms. A properly implemented service: import { Service, IAgentRuntime } from '@elizaos/core'; export class ExampleService extends Service { // Required: Define the service type (used for runtime registration) static serviceType = 'example'; // Required: Describe what this service enables the agent to do capabilityDescription = 'Enables the agent to interact with the Example platform'; // Store runtime for service operations constructor(protected runtime: IAgentRuntime) { super(); // Initialize connections, setup event handlers, etc. } // Required: Static method to create and initialize service instance static async start(runtime: IAgentRuntime): Promise&lt;ExampleService&gt; { const service = new ExampleService(runtime); // Additional initialization if needed return service; } // Required: Clean up resources when service is stopped async stop(): Promise&lt;void&gt; { // Close connections, release resources } // Optional: Custom methods for your service functionality async sendMessage(content: string, channelId: string): Promise&lt;void&gt; { // Implementation } } Plugin Structure‚Äã Each plugin repository should follow this structure: plugin-name/ ‚îú‚îÄ‚îÄ images/ # Branding assets ‚îÇ ‚îú‚îÄ‚îÄ logo.png # Square logo (400x400px) ‚îÇ ‚îú‚îÄ‚îÄ banner.png # Banner image (1280x640px) ‚îÇ ‚îî‚îÄ‚îÄ screenshots/ # Feature screenshots ‚îú‚îÄ‚îÄ src/ ‚îÇ ‚îú‚îÄ‚îÄ index.ts # Main plugin entry point ‚îÇ ‚îú‚îÄ‚îÄ service.ts # Service implementation ‚îÇ ‚îú‚îÄ‚îÄ actions/ # Plugin-specific actions ‚îÇ ‚îú‚îÄ‚îÄ providers/ # Data providers ‚îÇ ‚îú‚îÄ‚îÄ types.ts # Type definitions ‚îÇ ‚îî‚îÄ‚îÄ environment.ts # Configuration validation ‚îú‚îÄ‚îÄ tests/ # Test suite ‚îú‚îÄ‚îÄ package.json # Plugin configuration and dependencies ‚îî‚îÄ‚îÄ README.md # Plugin documentation Plugin Entry Point‚Äã Your plugin's index.ts should export a Plugin object: // Example plugin implementation import { type Plugin } from '@elizaos/core'; import { ExampleService } from './service'; import { searchAction } from './actions/search'; import { statusProvider } from './providers/status'; const examplePlugin: Plugin = { name: 'example', description: 'Example platform integration for ElizaOS', services: [ExampleService], actions: [searchAction], providers: [statusProvider], init: async (config, runtime) =&gt; { // Perform any necessary initialization const apiKey = runtime.getSetting('EXAMPLE_API_KEY'); if (!apiKey) { console.warn('EXAMPLE_API_KEY not provided'); } }, }; export default examplePlugin; Plugin Configuration‚Äã Your plugin's package.json should include an agentConfig section: { &quot;name&quot;: &quot;@elizaos/plugin-example&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;agentConfig&quot;: { &quot;pluginType&quot;: &quot;elizaos:plugin:1.0.0&quot;, &quot;pluginParameters&quot;: { &quot;API_KEY&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;API key for the Example service&quot; } } } } Environment Variables and Secrets‚Äã Plugins access configuration through the runtime with the following precedence: Character settings secrets (highest priority)Character settingsGlobal environment settings Access Pattern‚Äã // In your service implementation const apiKey = runtime.getSetting('EXAMPLE_API_KEY'); const debugMode = runtime.getSetting('EXAMPLE_DEBUG_MODE'); // Returns boolean for &quot;true&quot;/&quot;false&quot; strings Configuration in Character File‚Äã { &quot;name&quot;: &quot;MyAgent&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-example&quot;], &quot;settings&quot;: { &quot;example&quot;: { &quot;enableFeatureX&quot;: true }, &quot;secrets&quot;: { &quot;EXAMPLE_API_KEY&quot;: &quot;your-api-key-here&quot; } } } Bootstrap Plugin‚Äã The Bootstrap Plugin is a foundational component of ElizaOS that provides essential communication capabilities and is mandatory for basic agent functionality. It's automatically loaded as part of the initialization process, establishing the minimum viable capabilities that all agents need. Without the Bootstrap Plugin, your agent will be unable to: Process incoming messages from Discord, Telegram, or other platformsRespond to user interactionsHandle communication eventsGenerate responses to conversations The Bootstrap Plugin is required unless you're building a completely custom event handling system from scratch. export const bootstrapPlugin: Plugin = { name: 'bootstrap', description: 'Agent bootstrap with basic actions and evaluators', actions: [...], events: {...}, evaluators: [...], providers: [...], services: [TaskService, ScenarioService], }; The Bootstrap Plugin registers essential components across several categories to provide a foundation for all agents. These components can be extended by custom plugins. ActionsProvidersServices &amp; EvaluatorsEvent Handlers Action\tDescriptionreplyAction\tGenerates and sends a response to a message followRoomAction\tEnables an agent to actively follow a room unfollowRoomAction\tStops an agent from following a room muteRoomAction\tMutes notifications from a room unmuteRoomAction\tUnmutes notifications from a room sendMessageAction\tSends a message to a specific room ignoreAction\tExplicitly ignores a message noneAction\tAcknowledges a message without taking action updateEntityAction\tUpdates properties of an entity choiceAction\tPresents choices to users and handles responses updateRoleAction\tUpdates a user's role in a world updateSettingsAction\tUpdates agent or world settings Extending Bootstrap Functionality‚Äã While the Bootstrap Plugin provides core functionality, it's designed to be extended by other plugins. Custom plugins can: Add new actions - Extend the agent's capabilitiesRegister additional providers - Supply more contextual informationAdd evaluators - Create new ways to analyze and learn from interactionsHandle additional events - React to more system eventsInitialize custom services - Provide new functionality Important: The Bootstrap Plugin is mandatory for communication. When working with plugins in relation to the Bootstrap Plugin: Always include bootstrap - Unless building a custom event system, include @elizaos/plugin-bootstrap in your plugins arrayDon't modify bootstrap directly - Instead, create custom plugins to extend functionalityUnderstand provider contribution - Know how each provider contributes to the agent's contextLearn the core actions - Become familiar with the actions that all agents can performLeverage event handlers - Use the event system for reactive behaviorExtend, don't replace - Build on top of bootstrap functionality rather than replacing it For testing purposes only, you can disable the Bootstrap Plugin with IGNORE_BOOTSTRAP=true, but this will break standard agent communication functionality. Developing a Plugin‚Äã When developing a new plugin, focus on these key aspects: Service Implementation: Create a solid service class following the pattern aboveProper Error Handling: Handle API failures gracefullyType Definitions: Define clear interfaces and typesDocumentation: Include detailed setup instructionsTests: Add test cases for your functionality Testing Your Plugin‚Äã During development, you can test your plugin locally: # Start with your plugin elizaos start --plugins=./path/to/plugin # Or with a specific character elizaos start --character=./characters/test.character.json --plugins=./path/to/plugin Distribution &amp; PR Requirements‚Äã When submitting a plugin to the elizaOS Registry, include: Working Demo: Screenshots or video of your plugin in actionTest Results: Evidence of successful integration and error handlingConfiguration Example: Show how to properly configure your pluginQuality Checklist: Plugin follows the standard structure Required branding assets are included Documentation is complete GitHub topics properly set Tests are passing Includes error handling FAQ‚Äã What exactly is a plugin in ElizaOS?‚Äã A plugin is a modular extension that adds new capabilities to ElizaOS agents, such as API integrations, custom actions, or platform connections. Plugins allow you to expand agent functionality and share reusable components with other developers. When should I create a plugin versus using existing ones?‚Äã Create a plugin when you need custom functionality not available in existing plugins, want to integrate with external services, or plan to share reusable agent capabilities with the community. How do I manage plugin dependencies?‚Äã Plugin dependencies are managed through your project's package.json. You can add plugins directly using bun or the ElizaOS CLI, and they will be automatically loaded when your project starts. Can I use a plugin in development before publishing?‚Äã Yes, you can use the --plugins flag with the start command to include local plugins during development: elizaos start --plugins=./path/to/plugin What's the difference between Actions and Services?‚Äã Actions handle specific agent responses or behaviors, while Services provide platform integrations (like Discord or Telegram) or ongoing background functionality that multiple actions might use. How do I handle rate limits with external APIs?‚Äã Implement proper backoff strategies in your service implementation and consider using a queue system for message handling to respect platform rate limits. Additional Resources‚Äã ElizaOS RegistryExample PluginsDiscord Community","keywords":"plugins extensions modules development publishing registry npm GitHub","version":"1.0.17"},{"title":"üîå Services","type":0,"sectionRef":"#","url":"/docs/core/services","content":"üîå Services Services are core components in Eliza that enable AI agents to interact with external platforms and services. Each service provides a specialized interface for communication while maintaining consistent agent behavior across different platforms. Supported Services‚Äã Service\tType\tKey Features\tUse CasesDiscord\tCommunication\t‚Ä¢ Voice channels ‚Ä¢ Server management ‚Ä¢ Moderation tools ‚Ä¢ Channel management\t‚Ä¢ Community management ‚Ä¢ Gaming servers ‚Ä¢ Event coordination Twitter\tSocial Media\t‚Ä¢ Post scheduling ‚Ä¢ Timeline monitoring ‚Ä¢ Engagement analytics ‚Ä¢ Content automation\t‚Ä¢ Brand management ‚Ä¢ Content creation ‚Ä¢ Social engagement Telegram\tMessaging\t‚Ä¢ Bot API ‚Ä¢ Group chat ‚Ä¢ Media handling ‚Ä¢ Command system\t‚Ä¢ Customer support ‚Ä¢ Community engagement ‚Ä¢ Broadcast messaging Direct\tAPI\t‚Ä¢ REST endpoints ‚Ä¢ Web integration ‚Ä¢ Custom applications ‚Ä¢ Real-time communication\t‚Ä¢ Backend integration ‚Ä¢ Web apps ‚Ä¢ Custom interfaces GitHub\tDevelopment\t‚Ä¢ Repository management ‚Ä¢ Issue tracking ‚Ä¢ Pull requests ‚Ä¢ Code review\t‚Ä¢ Development workflow ‚Ä¢ Project management ‚Ä¢ Team collaboration Slack\tEnterprise\t‚Ä¢ Channel management ‚Ä¢ Conversation analysis ‚Ä¢ Workspace tools ‚Ä¢ Integration hooks\t‚Ä¢ Team collaboration ‚Ä¢ Process automation ‚Ä¢ Internal tools Lens\tWeb3\t‚Ä¢ Decentralized networking ‚Ä¢ Content publishing ‚Ä¢ Memory management ‚Ä¢ Web3 integration\t‚Ä¢ Web3 social networking ‚Ä¢ Content distribution ‚Ä¢ Decentralized apps Farcaster\tWeb3\t‚Ä¢ Decentralized social ‚Ä¢ Content publishing ‚Ä¢ Community engagement\t‚Ä¢ Web3 communities ‚Ä¢ Content creation ‚Ä¢ Social networking Auto\tAutomation\t‚Ä¢ Workload management ‚Ä¢ Task scheduling ‚Ä¢ Process automation\t‚Ä¢ Background jobs ‚Ä¢ Automated tasks ‚Ä¢ System maintenance *Additional services: Instagram: Social media content and engagementXMTP: Web3 messaging and communicationsAlexa: Voice interface and smart device controlHome Assistant: Home automation OSDevai.me: AI first social serviceSimsai: Jeeter / Social media platform for AI System Overview‚Äã Services serve as bridges between Eliza agents and various platforms, providing core capabilities: Message Processing Platform-specific message formatting and deliveryMedia handling and attachments via Memory objectsReply threading and context managementSupport for different content types State &amp; Memory Management Each service maintains independent state to prevent cross-platform contaminationIntegrates with runtime memory managers for different types of content:Messages processed by one service don't automatically appear in other services' contextsState persists across agent restarts through the database adapter Platform Integration Authentication and API complianceEvent processing and webhooksRate limiting and cache managementPlatform-specific feature support Service Configuration‚Äã Services are configured through the Character configuration's settings property: export type Character = { // ... other properties ... settings?: { discord?: { shouldIgnoreBotMessages?: boolean; shouldIgnoreDirectMessages?: boolean; shouldRespondOnlyToMentions?: boolean; messageSimilarityThreshold?: number; isPartOfTeam?: boolean; teamAgentIds?: string[]; teamLeaderId?: string; teamMemberInterestKeywords?: string[]; allowedChannelIds?: string[]; autoPost?: { enabled?: boolean; monitorTime?: number; inactivityThreshold?: number; mainChannelId?: string; announcementChannelIds?: string[]; minTimeBetweenPosts?: number; }; }; telegram?: { shouldIgnoreBotMessages?: boolean; shouldIgnoreDirectMessages?: boolean; shouldRespondOnlyToMentions?: boolean; shouldOnlyJoinInAllowedGroups?: boolean; allowedGroupIds?: string[]; messageSimilarityThreshold?: number; // ... other telegram-specific settings }; slack?: { shouldIgnoreBotMessages?: boolean; shouldIgnoreDirectMessages?: boolean; }; // ... other service configs }; }; Service Implementation‚Äã Each service manages its own: Platform-specific message formatting and deliveryEvent processing and webhooksAuthentication and API integrationMessage queueing and rate limitingMedia handling and attachmentsState management and persistence Example of a basic service implementation: import { Service, IAgentRuntime } from '@elizaos/core'; export class CustomService extends Service { static serviceType = 'custom'; capabilityDescription = 'The agent is able to interact with the custom platform'; constructor(protected runtime: IAgentRuntime) { super(); // Initialize platform connection // Set up event handlers // Configure message processing } static async start(runtime: IAgentRuntime): Promise&lt;CustomService&gt; { const service = new CustomService(runtime); // Additional initialization if needed return service; } async stop(): Promise&lt;void&gt; { // Cleanup resources // Close connections } } Runtime Integration‚Äã Services interact with the agent runtime through the IAgentRuntime interface, which provides: Memory managers for different types of data storageService access for capabilities like transcription or image generationState management and compositionMessage processing and action handling Memory System Integration‚Äã Services use the runtime's memory managers to persist conversation data (source: memory.ts). messageManager Chat messagesdocumentsManager File attachmentsdescriptionManager Media descriptions See example // Store a new message await runtime.messageManager.createMemory({ id: messageId, content: { text: message.content }, userId: userId, roomId: roomId, agentId: runtime.agentId }); // Retrieve recent messages const recentMessages = await runtime.messageManager.getMemories({ roomId: roomId, count: 10 }); FAQ‚Äã What can services actually do?‚Äã Services handle platform-specific communication (like Discord messages or Twitter posts), manage memories and state, and execute actions like processing media or handling commands. Each service adapts these capabilities to its platform while maintaining consistent agent behavior. Can multiple services be used simultaneously?‚Äã Yes, Eliza supports running multiple services concurrently while maintaining consistent agent behavior across platforms. How are service-specific features handled?‚Äã Each service implements platform-specific features through its capabilities system, while maintaining a consistent interface for the agent. How do services handle rate limits?‚Äã Services implement platform-specific rate limiting with backoff strategies and queue management. How is service state managed?‚Äã Services maintain their own connection state while integrating with the agent's runtime database adapter and memory / state management system. How do services handle messages?‚Äã Services translate platform messages into Eliza's internal format, process any attachments (images, audio, etc.), maintain conversation context, and manage response queuing and rate limits. How are messages processed across services?‚Äã Each service processes messages independently in its platform-specific format, while maintaining conversation context through the shared memory system. V2 improves upon this architecture. How is state managed between services?‚Äã Each service maintains separate state to prevent cross-contamination, but can access shared agent state through the runtime. How do services integrate with platforms?‚Äã Each service implements platform-specific authentication, API compliance, webhook handling, and follows the platform's rules for rate limiting and content formatting. How do services manage memory?‚Äã Services use Eliza's memory system to track conversations, user relationships, and state, enabling context-aware responses and persistent interactions across sessions.","keywords":"services platforms integration Discord Twitter Telegram communication API","version":"1.0.17"},{"title":"üîå Providers","type":0,"sectionRef":"#","url":"/docs/core/providers","content":"üîå Providers Providers are the sources of information for the agent. They provide data or state while acting as the agent's &quot;senses&quot;, injecting real-time information into the agent's context. They serve as the eyes, ears, and other sensory inputs that allow the agent to perceive and interact with its environment, like a bridge between the agent and various external systems such as market data, wallet information, sentiment analysis, and temporal context. Anything that the agent knows is either coming from like the built-in context or from a provider. For more info, see the providers API page. Here's an example of how providers work within ElizaOS: A news provider could fetch and format news.A computer terminal provider in a game could feed the agent information when the player is near a terminal.A wallet provider can provide the agent with the current assets in a wallet.A time provider injects the current date and time into the context. Overview‚Äã A provider's primary purpose is to supply dynamic contextual information that integrates with the agent's runtime. They format information for conversation templates and maintain consistent data access. For example: Function: Providers run during or before an action is executed.Purpose: They allow for fetching information from other APIs or services to provide different context or ways for an action to be performed.Example: Before a &quot;Mars rover action&quot; is executed, a provider could fetch information from another API. This fetched information can then be used to enrich the context of the Mars rover action. The provider interface is defined in types.ts: import { IAgentRuntime, Memory, State, ProviderResult } from '@elizaos/core'; interface Provider { /** Provider name */ name: string; /** Description of the provider */ description?: string; /** Whether the provider is dynamic */ dynamic?: boolean; /** Position of the provider in the provider list, positive or negative */ position?: number; /** * Whether the provider is private * * Private providers are not displayed in the regular provider list, they have to be called explicitly */ private?: boolean; /** Data retrieval function */ get: (runtime: IAgentRuntime, message: Memory, state: State) =&gt; Promise&lt;ProviderResult&gt;; } The get function takes: runtime: The agent instance calling the providermessage: The last message receivedstate: Current conversation state It returns a ProviderResult object that contains: interface ProviderResult { values?: { [key: string]: any; }; data?: { [key: string]: any; }; text?: string; } values: Key-value pairs to be merged into the agent's state valuesdata: Additional structured data that can be used by the agent but not directly included in the contexttext: String that gets injected into the agent's context Provider Types and Properties‚Äã Providers come with several properties that control how and when they are used: Dynamic Providers‚Äã Dynamic providers are not automatically included in the context. They must be explicitly requested either in the filter list or include list when composing state. const dynamicProvider: Provider = { name: 'dynamicExample', description: 'A dynamic provider example', dynamic: true, get: async (runtime, message, state) =&gt; { // ...implementation return { text: 'Dynamic information fetched on demand', values: { /* key-value pairs */ }, }; }, }; Private Providers‚Äã Private providers are not included in the regular provider list and must be explicitly included in the include list when composing state. const privateProvider: Provider = { name: 'privateExample', description: 'A private provider example', private: true, get: async (runtime, message, state) =&gt; { // ...implementation return { text: 'Private information only available when explicitly requested', values: { /* key-value pairs */ }, }; }, }; Provider Positioning‚Äã The position property determines the order in which providers are processed. Lower numbers are processed first. const earlyProvider: Provider = { name: 'earlyExample', description: 'Runs early in the provider chain', position: -100, get: async (runtime, message, state) =&gt; { // ...implementation return { text: 'Early information', values: { /* key-value pairs */ }, }; }, }; const lateProvider: Provider = { name: 'lateExample', description: 'Runs late in the provider chain', position: 100, get: async (runtime, message, state) =&gt; { // ...implementation return { text: 'Late information that might depend on earlier providers', values: { /* key-value pairs */ }, }; }, }; State Composition with Providers‚Äã The runtime composes state by gathering data from enabled providers. When calling composeState, you can control which providers are used: // Get state with all non-private, non-dynamic providers const state = await runtime.composeState(message); // Get state with specific providers only const filteredState = await runtime.composeState( message, ['timeProvider', 'factsProvider'], // Only include these providers null ); // Include private or dynamic providers const enhancedState = await runtime.composeState( message, null, ['privateExample', 'dynamicExample'] // Include these private/dynamic providers ); The system caches provider results to optimize performance. When a provider is called multiple times with the same message, the cached result is used unless you explicitly request a new evaluation. Examples‚Äã ElizaOS providers typically fall into these categories, with examples from the ecosystem: System &amp; Integration‚Äã Time Provider: Injects current date/time for temporal awarenessGiphy Provider: Provides GIF responses using Giphy APIGitBook Provider: Supplies documentation context from GitBookTopics Provider: Caches and serves Allora Network topic information Blockchain &amp; DeFi‚Äã Wallet Provider: Portfolio data from Zerion, balances and pricesDePIN Provider: Network metrics via DePINScan APIChain Providers: Data from Abstract, Fuel, ICP, EVM networksMarket Provider: Token data from DexScreener, Birdeye APIs Knowledge &amp; Data‚Äã DKG Provider: OriginTrail decentralized knowledge integrationNews Provider: Current events via NewsAPITrust Provider: Calculates and injects trust scores Visit the ElizaOS Plugin Registry for a complete list of available plugins and providers. Time Provider Example‚Äã import { Provider, IAgentRuntime, Memory } from '@elizaos/core'; const timeProvider: Provider = { name: 'time', description: 'Provides the current date and time', position: -10, // Run early to ensure time is available for other providers get: async (_runtime: IAgentRuntime, _message: Memory) =&gt; { const currentDate = new Date(); const options = { timeZone: 'UTC', dateStyle: 'full' as const, timeStyle: 'long' as const, }; const humanReadable = new Intl.DateTimeFormat('en-US', options).format(currentDate); return { text: `The current date and time is ${humanReadable}. Please use this as your reference for any time-based operations or responses.`, values: { currentDate: currentDate.toISOString(), humanReadableDate: humanReadable, }, }; }, }; Dynamic Provider Example‚Äã import { Provider, IAgentRuntime, Memory, State } from '@elizaos/core'; const weatherProvider: Provider = { name: 'weather', description: 'Provides weather information for a location', dynamic: true, // Only used when explicitly requested get: async (runtime: IAgentRuntime, message: Memory, state: State) =&gt; { // Extract location from state if available const location = state?.values?.location || 'San Francisco'; try { // Fetch weather data from an API const weatherData = await fetchWeatherData(location); return { text: `The current weather in ${location} is ${weatherData.description} with a temperature of ${weatherData.temperature}¬∞C.`, values: { weather: { location, temperature: weatherData.temperature, description: weatherData.description, humidity: weatherData.humidity, }, }, data: { // Additional detailed data that doesn't go into the context weatherDetails: weatherData, }, }; } catch (error) { // Handle errors gracefully return { text: `I couldn't retrieve weather information for ${location} at this time.`, values: { weather: { error: true }, }, }; } }, }; Best Practices‚Äã 1. Optimize for Efficiency‚Äã Return both structured data (values) and formatted text (text)Use caching for expensive operationsInclude a clear provider name and description const efficientProvider: Provider = { name: 'efficientExample', description: 'Efficiently provides cached data', get: async (runtime, message) =&gt; { // Check for cached data const cacheKey = `data:${message.roomId}`; const cachedData = await runtime.getCache(cacheKey); if (cachedData) { return cachedData; } // Fetch fresh data if not cached const result = { text: 'Freshly generated information', values: { /* key-value pairs */ }, data: { /* structured data */ }, }; // Cache the result with appropriate TTL await runtime.setCache(cacheKey, result, { expires: 30 * 60 * 1000 }); // 30 minutes return result; }, }; 2. Handle Errors Gracefully‚Äã Always handle errors without throwing exceptions that would interrupt the agent's processing: try { // Risky operation } catch (error) { return { text: &quot;I couldn't retrieve that information right now.&quot;, values: { error: true }, }; } 3. Use Position for Optimal Order‚Äã Position providers according to their dependencies: Negative positions: Fundamental information providers (time, location)Zero (default): Standard information providersPositive positions: Providers that depend on other information 4. Structure Return Values Consistently‚Äã Maintain a consistent structure in your provider's return values to make data easier to use across the system. FAQ‚Äã What's the difference between values, data, and text?‚Äã values: These are merged into the agent state and can be accessed by other providersdata: Structured data stored in state.data.providers but not directly exposed to the agenttext: Formatted text that's directly injected into the agent's context When should I use a dynamic provider?‚Äã Use dynamic providers when the information is expensive to compute, only relevant in specific situations, or requires explicit triggering rather than being included in every context. How do I explicitly include a private provider?‚Äã Private providers must be included in the includeList parameter when calling composeState: const state = await runtime.composeState(message, null, ['privateProviderName']); Can providers access service functionality?‚Äã Yes, providers can use services through the runtime. For example, a wallet provider might use a blockchain service to fetch data: const walletProvider: Provider = { name: 'wallet', get: async (runtime, message) =&gt; { const solanaService = runtime.getService('solana'); if (!solanaService) { return { text: '' }; } const walletData = await solanaService.getCachedData(); // Process and return wallet data }, }; How should providers handle failures?‚Äã Providers should handle failures gracefully and return valid ProviderResult objects with appropriate error information. Never throw errors that would break the agent's context composition. Can providers maintain state between calls?‚Äã While providers can maintain internal state (e.g., through closures), it's better to use the runtime's cache system for persistence: // Store data await runtime.setCache('myProvider:someKey', dataToStore); // Retrieve data later const storedData = await runtime.getCache('myProvider:someKey'); Further Reading‚Äã Provider ImplementationTypes ReferenceRuntime Integration","keywords":"providers context information data integration dynamic private state","version":"1.0.17"},{"title":"Rooms","type":0,"sectionRef":"#","url":"/docs/core/rooms","content":"Rooms Rooms in ElizaOS represent individual interaction spaces within a world. A room can be a conversation, a channel, a thread, or any other defined space where entities can exchange messages and interact. Rooms are typically contained within a world, though they can also exist independently. Room Structure‚Äã A room in ElizaOS has the following properties: type Room = { id: UUID; name?: string; agentId: UUID; // Required - the agent that owns this room source: string; // Platform origin (e.g., 'discord', 'telegram') type: ChannelType; // Type of room (DM, GROUP, etc.) channelId?: string; // External system channel identifier serverId?: string; // External system server identifier worldId?: UUID; // Parent world ID (optional) metadata?: Record&lt;string, unknown&gt;; }; Property\tDescription\tRequiredid\tUnique identifier for the room\tYes name\tDisplay name for the room\tNo agentId\tID of the agent that owns this room\tYes source\tThe platform or origin of the room (e.g., 'discord', 'telegram')\tYes type\tType of room (DM, GROUP, THREAD, etc.)\tYes channelId\tExternal system channel identifier\tNo serverId\tExternal system server identifier\tNo worldId\tID of the parent world\tNo metadata\tAdditional room configuration data\tNo Room Types‚Äã ElizaOS supports several room types, defined in the ChannelType enum: Type\tDescription\tCommon Use CaseSELF\tAgent's own room for internal messages\tAgent initialization DM\tDirect messages between two participants\tPrivate conversations GROUP\tGroup messages with multiple participants\tTeam chats, channels VOICE_DM\tVoice direct messages\tVoice calls VOICE_GROUP\tVoice channels with multiple participants\tVoice meetings FEED\tSocial media feed\tTwitter, Instagram THREAD\tThreaded conversation\tForum discussions WORLD\tWorld-level channel\tWorld announcements FORUM\tForum discussion\tQ&amp;A platforms Room Creation and Management‚Äã Creating a Room‚Äã When creating a room, the agentId is automatically set from the runtime: const roomId = await runtime.createRoom({ id: customRoomId, // Optional - will generate if not provided name: 'general-chat', source: 'discord', type: ChannelType.GROUP, channelId: 'external-channel-id', serverId: 'external-server-id', worldId: parentWorldId, // Optional }); Creating Multiple Rooms‚Äã You can create multiple rooms at once for better performance: const roomIds = await runtime.createRooms([ { name: 'general', source: 'discord', type: ChannelType.GROUP, worldId: worldId, }, { name: 'announcements', source: 'discord', type: ChannelType.GROUP, worldId: worldId, }, ]); Ensuring a Room Exists‚Äã To create a room only if it doesn't already exist: await runtime.ensureRoomExists({ id: roomId, name: 'general-chat', source: 'discord', type: ChannelType.GROUP, channelId: 'external-channel-id', serverId: 'external-server-id', worldId: parentWorldId, }); Retrieving Room Information‚Äã // Get a single room by ID const room = await runtime.getRoom(roomId); // Get multiple rooms by IDs const rooms = await runtime.getRoomsByIds([roomId1, roomId2, roomId3]); // Get all rooms in a world (preferred method) const worldRooms = await runtime.getRoomsByWorld(worldId); // Deprecated - use getRoomsByWorld instead // const worldRooms = await runtime.getRooms(worldId); Updating Room Properties‚Äã await runtime.updateRoom({ id: roomId, name: 'renamed-channel', metadata: { ...room.metadata, customProperty: 'value', }, }); Deleting a Room‚Äã ‚ö†Ô∏è Warning: Deleting a room will also delete: All messages in the roomAll embeddings for those messagesAll participant relationshipsAll logs associated with the room await runtime.deleteRoom(roomId); Deleting All Rooms in a World‚Äã Delete all rooms associated with a specific world: await runtime.deleteRoomsByWorldId(worldId); Participants in Rooms‚Äã Rooms can have multiple participants (entities) that can exchange messages. Managing Room Participants‚Äã // Add a single participant to a room await runtime.addParticipant(entityId, roomId); // Add multiple participants at once (more efficient) await runtime.addParticipantsRoom([entityId1, entityId2, entityId3], roomId); // Remove a participant from a room await runtime.removeParticipant(entityId, roomId); // Get all participants in a room const participantIds = await runtime.getParticipantsForRoom(roomId); // Get all rooms where an entity is a participant const entityRooms = await runtime.getRoomsForParticipant(entityId); // Get rooms for multiple participants const sharedRooms = await runtime.getRoomsForParticipants([entityId1, entityId2]); Participant States‚Äã Participants can have different states in a room: // Get a participant's state in a room const state = await runtime.getParticipantUserState(roomId, entityId); // Returns: 'FOLLOWED', 'MUTED', or null // Set a participant's state in a room await runtime.setParticipantUserState(roomId, entityId, 'FOLLOWED'); The participant states are: State\tDescriptionFOLLOWED\tThe agent actively follows the conversation and responds without being directly mentioned MUTED\tThe agent ignores messages in this room null\tDefault state - the agent responds only when directly mentioned Self Rooms‚Äã Every agent automatically gets a &quot;self&quot; room during initialization. This is a special room where: The room ID equals the agent IDThe room type is SELFThe agent is automatically added as a participantUsed for internal agent operations and self-directed messages // During agent initialization, this happens automatically: const selfRoom = await runtime.createRoom({ id: runtime.agentId, name: runtime.character.name, source: 'elizaos', type: ChannelType.SELF, channelId: runtime.agentId, serverId: runtime.agentId, worldId: runtime.agentId, }); Memory and Messages in Rooms‚Äã Rooms store messages as memories in the database: // Create a new message in a room const messageId = await runtime.createMemory( { entityId: senderEntityId, agentId: runtime.agentId, roomId: roomId, content: { text: 'Hello, world!', source: 'discord', }, metadata: { type: 'message', }, }, 'messages' // table name ); // Retrieve recent messages from a room const messages = await runtime.getMemories({ roomId: roomId, tableName: 'messages', count: 10, unique: true, }); // Get messages from multiple rooms const multiRoomMessages = await runtime.getMemoriesByRoomIds({ roomIds: [roomId1, roomId2], tableName: 'messages', limit: 50, }); Events Related to Rooms‚Äã ElizaOS emits events related to room activities: Event\tDescription\tPayloadROOM_JOINED\tEmitted when an entity joins a room\t{ runtime, entityId, roomId } ROOM_LEFT\tEmitted when an entity leaves a room\t{ runtime, entityId, roomId } MESSAGE_RECEIVED\tEmitted when a message is received in a room\t{ runtime, message } MESSAGE_SENT\tEmitted when a message is sent to a room\t{ runtime, message } Handling Room Events‚Äã // Register event handlers in your plugin const myPlugin: Plugin = { name: 'my-room-plugin', description: 'Handles room events', events: { [EventTypes.ROOM_JOINED]: [ async (payload) =&gt; { const { runtime, entityId, roomId } = payload; console.log(`Entity ${entityId} joined room ${roomId}`); }, ], [EventTypes.MESSAGE_RECEIVED]: [ async (payload: MessagePayload) =&gt; { const { runtime, message } = payload; console.log(`Message received in room ${message.roomId}`); }, ], }, }; Room Connection with External Systems‚Äã When integrating with external platforms, rooms are typically mapped to channels, conversations, or other interaction spaces: // Ensure the connection exists for a room from an external system await runtime.ensureConnection({ entityId: userEntityId, roomId: roomId, userName: 'username', name: 'display-name', source: 'discord', channelId: 'external-channel-id', serverId: 'external-server-id', type: ChannelType.GROUP, worldId: parentWorldId, }); Best Practices‚Äã Always specify agentId: While the runtime sets it automatically, be aware that rooms are agent-specificUse appropriate room types: Select the most appropriate room type for each interaction contextCreate worlds first: If using worlds, create them before creating roomsUse batch operations: When creating multiple rooms or adding multiple participants, use batch methodsUse ensureRoomExists: This prevents duplicate rooms when syncing with external systemsBe careful with deletion: Remember that deleting rooms cascades to all related dataUse metadata wisely: Store platform-specific data in metadata rather than creating new fieldsHandle participant states: Implement clear rules for when agents should follow or mute rooms Common Patterns‚Äã Creating a DM Room‚Äã // Create a direct message room between agent and user const dmRoom = await runtime.createRoom({ name: `DM-${userId}`, source: 'discord', type: ChannelType.DM, metadata: { participants: [runtime.agentId, userId], }, }); // Add both participants await runtime.addParticipantsRoom([runtime.agentId, userId], dmRoom); Platform Integration Example‚Äã // Discord channel integration async function syncDiscordChannel(channel: DiscordChannel, guildId: string) { // Ensure world exists for the Discord server await runtime.ensureWorldExists({ id: createUniqueUuid(runtime.agentId, guildId), name: `Discord Server ${guildId}`, serverId: guildId, }); // Ensure room exists for the channel await runtime.ensureRoomExists({ id: createUniqueUuid(runtime.agentId, channel.id), name: channel.name, source: 'discord', type: channel.type === 'text' ? ChannelType.GROUP : ChannelType.VOICE_GROUP, channelId: channel.id, serverId: guildId, worldId: createUniqueUuid(runtime.agentId, guildId), }); } ","keywords":"rooms channels conversations participants messages interaction communication","version":"1.0.17"},{"title":"üß™ Testing Core Primitives","type":0,"sectionRef":"#","url":"/docs/core/testing","content":"üß™ Testing Core Primitives ElizaOS encourages thorough testing of providers, actions and evaluators. Component tests use Vitest, while scenario tests run through the ElizaOS runtime. Component Tests‚Äã For unit style tests, import helpers from the bootstrap plugin test utilities and call the primitive directly. import { describe, it, expect } from 'vitest'; import { timeProvider } from '@elizaos/plugin-bootstrap'; import { createMockRuntime, createMockMemory, } from '@elizaos/plugin-bootstrap/__tests__/test-utils'; describe('time provider', () =&gt; { it('returns a time string', async () =&gt; { const runtime = createMockRuntime(); const msg = createMockMemory(); const result = await timeProvider.get(runtime as any, msg as any); expect(result.values.time).toBeDefined(); }); }); End-to-End Tests‚Äã Scenario tests use a TestSuite loaded by the CLI test command. Each test receives a running IAgentRuntime instance. import type { TestSuite } from '@elizaos/core'; import { bootstrapPlugin } from '@elizaos/plugin-bootstrap'; export class BootstrapSuite implements TestSuite { name = 'bootstrap_example'; tests = [ { name: 'reply action works', fn: async (runtime) =&gt; { const action = runtime.actions.find((a) =&gt; a.name === 'REPLY'); if (!action) throw new Error('action missing'); await action.handler( runtime, { content: { text: 'hi' } } as any, { values: {} } as any, {}, () =&gt; {} ); }, }, ]; } export default new BootstrapSuite(); Run all tests with: elizaos test Component and e2e tests can be filtered using --name and built beforehand withbun run build.","keywords":"testing providers actions evaluators vitest e2e","version":"1.0.17"},{"title":"AI Documentation Assistant Configuration","type":0,"sectionRef":"#","url":"/docs/getting-started/ai-configuration","content":"AI Documentation Assistant Configuration Configure AI-powered features in the ElizaOS documentation for enhanced search, recommendations, and interactive assistance. ü§ñ Setting Up AI Features‚Äã Step 1: Create Environment File‚Äã Navigate to the docs directory and create your environment configuration: cd packages/docs cp .env.example .env Step 2: Add Your AI API Key‚Äã Edit the .env file and add your preferred AI provider's API key: # Choose one AI provider: # Option 1: OpenAI (Recommended) OPENAI_API_KEY=your-openai-api-key-here # Option 2: Anthropic Claude ANTHROPIC_API_KEY=your-anthropic-api-key-here # Option 3: Groq (Fast &amp; Free) GROQ_API_KEY=your-groq-api-key-here # Option 4: Local Ollama OLLAMA_BASE_URL=http://localhost:11434 OLLAMA_MODEL=llama3.1 Step 3: Enable AI Features‚Äã Configure which AI features you want to use: # AI Feature Toggles AI_ASSISTANT_ENABLED=true # Floating AI assistant AI_SEARCH_ENABLED=true # Enhanced search with AI AI_RECOMMENDATIONS_ENABLED=true # Smart content suggestions üîë Getting API Keys‚Äã OpenAI (Recommended)‚Äã Visit platform.openai.comCreate new API keyCopy and paste into .env fileCost: ~$0.01 per 1000 searches Anthropic Claude‚Äã Visit console.anthropic.comCreate API keyAdd to .env fileCost: Similar to OpenAI Groq (Free Tier Available)‚Äã Visit console.groq.comSign up for free accountCreate API keyCost: Free tier with rate limits Local Ollama (Free)‚Äã Install OllamaRun ollama pull llama3.1Configure OLLAMA_BASE_URL in .envCost: Free (uses your hardware) ‚öôÔ∏è Configuration Options‚Äã Model Settings‚Äã # Model Configuration DEFAULT_AI_MODEL=gpt-4o-mini # Fastest and cheapest OpenAI model AI_TEMPERATURE=0.3 # Lower = more focused responses AI_MAX_TOKENS=1000 # Response length limit Performance Settings‚Äã # Performance Optimization AI_RESPONSE_TIMEOUT=10000 # 10 second timeout AI_CACHE_ENABLED=true # Cache responses for speed AI_CACHE_TTL=3600 # Cache for 1 hour Analytics (Optional)‚Äã # Usage Analytics ANALYTICS_ENABLED=false # Enable usage tracking GOOGLE_ANALYTICS_ID= # Your GA4 measurement ID POSTHOG_API_KEY= # PostHog analytics key üöÄ Starting the Documentation with AI‚Äã Once configured, start the documentation server: # From the root directory bun start:docs # Or from packages/docs bun start The documentation will be available at http://localhost:3002 with AI features enabled. ‚ú® AI Features Available‚Äã ü§ñ Floating AI Assistant‚Äã Context-aware help based on current pageCode examples with copy functionalityCross-references to related documentationReal-time suggestions as you browse üîç Enhanced Search‚Äã Semantic search that understands intentCode search with syntax highlightingSmart filtering by content typeInstant suggestions as you type üí° Content Recommendations‚Äã Next steps based on your current pageRelated articles using AI understandingLearning path suggestions for your skill levelPopular content tailored to your interests üõ†Ô∏è Troubleshooting‚Äã AI Assistant Not Working‚Äã Check API key: Ensure it's correctly set in .envVerify balance: Make sure your API account has creditsCheck logs: Look for error messages in browser consoleTest connectivity: Try a simple API call manually Search Not Enhanced‚Äã Restart server: AI features require server restart after config changesClear cache: Delete browser cache and restartCheck feature flags: Ensure AI_SEARCH_ENABLED=true Slow Performance‚Äã Increase timeout: Set AI_RESPONSE_TIMEOUT=15000Enable caching: Set AI_CACHE_ENABLED=trueUse faster model: Try gpt-4o-mini or GroqCheck internet: Ensure stable connection to AI provider üí∞ Cost Management‚Äã Estimated Costs (Monthly)‚Äã Light usage (100 searches): ~$1-2Moderate usage (500 searches): ~$5-10Heavy usage (2000 searches): ~$20-40 Cost Optimization‚Äã Use gpt-4o-mini for lower costsEnable caching to reduce API callsSet reasonable rate limitsConsider Groq's free tier for development üîí Security Best Practices‚Äã Environment Variables‚Äã Never commit .env files to version controlUse different keys for development and productionRotate keys regularlyMonitor usage for unexpected activity API Key Protection‚Äã # Good: Secure environment variable OPENAI_API_KEY=your-project-key # Bad: Hardcoded in code const apiKey = &quot;your-key-here&quot; // Never do this! üìä Monitoring Usage‚Äã Built-in Analytics‚Äã The documentation includes built-in usage tracking: Search queries and success ratesAI assistant interaction patternsPerformance metrics and response timesCost tracking and usage optimization Custom Analytics‚Äã Enable Google Analytics or PostHog for additional insights: ANALYTICS_ENABLED=true GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX üéØ Quick Setup Summary‚Äã Copy environment file: cp .env.example .envAdd API key: Edit .env with your preferred providerStart documentation: bun start:docsTest AI features: Try the search and assistant The AI-enhanced documentation will significantly improve the user experience with intelligent search, contextual help, and personalized content recommendations. üí° Pro Tip: Start with Groq's free tier for development, then upgrade to OpenAI's gpt-4o-mini for production use. This gives you the best balance of cost and performance.","keywords":"","version":"1.0.17"},{"title":"Worlds","type":0,"sectionRef":"#","url":"/docs/core/worlds","content":"Worlds Worlds in ElizaOS are collections of entities (users, agents) and rooms (conversations, channels) that form a cohesive environment for interactions. Think of a world as a virtual space, like a Discord server, Slack workspace, or 3D MMO environment, where entities can communicate across multiple channels or areas. Within each world you can have rooms, which are akin to individual threads or channels in a server. World Structure‚Äã A world in ElizaOS has the following properties: type World = { id: UUID; name?: string; agentId: UUID; serverId: string; metadata?: { ownership?: { ownerId: string; }; roles?: { [entityId: UUID]: Role; }; [key: string]: unknown; }; }; Property\tDescription\tRequiredid\tUnique identifier for the world\tYes name\tOptional display name\tNo agentId\tID of the agent managing this world\tYes serverId\tExternal system identifier (e.g., Discord server ID)\tYes metadata\tAdditional world configuration data\tNo The metadata can store custom information, including ownership details and role assignments for entities within the world. World Creation and Management‚Äã Creating a World‚Äã You can create a new world using the AgentRuntime: const worldId = await runtime.createWorld({ id: customWorldId, // Optional - will generate if not provided name: 'My Project Space', agentId: runtime.agentId, serverId: 'external-system-id', metadata: { ownership: { ownerId: ownerEntityId, }, }, }); For many integrations, worlds are automatically created during connection setup with external platforms like Discord or Slack. Ensuring a World Exists‚Äã If you're not sure if a world exists, you can use ensureWorldExists(): await runtime.ensureWorldExists({ id: worldId, name: 'My Project Space', agentId: runtime.agentId, serverId: 'external-system-id', }); Retrieving World Information‚Äã // Get a specific world const world = await runtime.getWorld(worldId); // Get all worlds for the agent const allWorlds = await runtime.getAllWorlds(); Updating World Properties‚Äã await runtime.updateWorld({ id: worldId, name: 'Updated Name', agentId: runtime.agentId, serverId: world.serverId, metadata: { ...world.metadata, customProperty: 'value', }, }); Removing a World‚Äã await runtime.removeWorld(worldId); World Roles System‚Äã Worlds support a role-based permission system with the following roles defined in the Role enum: enum Role { OWNER = 'OWNER', ADMIN = 'ADMIN', NONE = 'NONE', } Role\tDescriptionOWNER\tFull control over the world, can assign any roles ADMIN\tAdministrative capabilities, can manage most settings NONE\tStandard participant with no special permissions Managing Roles‚Äã Roles are stored in the world's metadata and can be updated: // Get existing world const world = await runtime.getWorld(worldId); // Ensure metadata structure exists if (!world.metadata) world.metadata = {}; if (!world.metadata.roles) world.metadata.roles = {}; // Assign a role to an entity world.metadata.roles[entityId] = Role.ADMIN; // Save the updated world await runtime.updateWorld(world); World Settings‚Äã Worlds support configurable settings that can be stored and retrieved using utility functions from @elizaos/core: import { getWorldSettings, updateWorldSettings } from '@elizaos/core'; // Get settings for a world const worldSettings = await getWorldSettings(runtime, serverId); // Update world settings worldSettings.MY_SETTING = { name: 'My Setting', description: 'Description for users', value: 'setting-value', required: false, }; // Save settings await updateWorldSettings(runtime, serverId, worldSettings); Settings are stored in the world's metadata and provide a structured way to manage configuration. World Events‚Äã ElizaOS emits events related to world activities: Event\tDescription\tPayload TypeWORLD_JOINED\tEmitted when an agent joins a world\tWorldPayload WORLD_CONNECTED\tEmitted when a world is successfully connected\tWorldPayload WORLD_LEFT\tEmitted when an agent leaves a world\tWorldPayload World Event Payload‚Äã interface WorldPayload extends EventPayload { world: World; rooms: Room[]; entities: Entity[]; source: string; } Handling World Events‚Äã // Register event handlers in your plugin import { EventType } from '@elizaos/core'; const myPlugin: Plugin = { name: 'my-world-plugin', description: 'Handles world events', events: { [EventType.WORLD_JOINED]: [ async (payload: WorldPayload) =&gt; { const { world, runtime } = payload; console.log(`Joined world: ${world.name}`); }, ], [EventType.WORLD_LEFT]: [ async (payload: WorldPayload) =&gt; { const { world, runtime } = payload; console.log(`Left world: ${world.name}`); }, ], }, }; Relationship with Rooms‚Äã A world contains multiple rooms that entities can interact in. Each room points back to its parent world via the worldId property. // Get all rooms in a world (preferred method) const worldRooms = await runtime.getRoomsByWorld(worldId); // Legacy method (deprecated but still available) const worldRooms = await runtime.getRooms(worldId); When deleting a world, all associated rooms are also deleted: // This will delete all rooms in the world await runtime.deleteRoomsByWorldId(worldId); See the Rooms documentation for more details on managing rooms within worlds. Database Schema‚Äã Worlds are stored in the database with the following schema: id: UUID (primary key, auto-generated)agentId: UUID (foreign key to agents table, cascade on delete)name: Text (required)serverId: Text (required, defaults to 'local')metadata: JSONB (optional)createdAt: Timestamp (auto-generated) Best Practices‚Äã Always include required fields: When creating or updating worlds, ensure agentId and serverId are providedHandle world metadata carefully: The metadata object can contain critical configuration, so modify it with careUse appropriate event handlers: Respond to world events for proper initialization and cleanupWorld-room relationship: Remember that deleting a world cascades to delete all its roomsServer ID mapping: Use consistent serverId values when mapping to external systems Common Patterns‚Äã Platform Integration‚Äã When integrating with external platforms: // Discord integration example await runtime.ensureWorldExists({ id: createUniqueUuid(runtime.agentId, discordServerId), name: discordServerName, agentId: runtime.agentId, serverId: discordServerId, metadata: { platform: 'discord', serverMetadata: discordServerInfo, }, }); Multi-Agent Worlds‚Äã Multiple agents can exist in the same world: // Each agent maintains its own world record const worldId = createUniqueUuid(agentId, serverId); await runtime.createWorld({ id: worldId, name: 'Shared Space', agentId: agentId, // Each agent's specific ID serverId: serverId, // Same server ID for all agents }); Limitations‚Äã Worlds require both agentId and serverId fieldsRole management is handled through metadata, not as a separate systemWorld deletion cascades to all associated rooms and their dataSettings are stored in metadata and have size limitations based on database JSONB limits","keywords":"worlds environments spaces rooms entities roles permissions events","version":"1.0.17"},{"title":"Tasks","type":0,"sectionRef":"#","url":"/docs/core/tasks","content":"Tasks Tasks in ElizaOS provide a powerful way to manage deferred, scheduled, and interactive operations. The Task system allows agents to queue work for later execution, repeat actions at defined intervals, await user input, and implement complex workflows across multiple interactions. Task Structure‚Äã A task in ElizaOS has the following properties: interface Task { id?: UUID; // Unique identifier (auto-generated if not provided) name: string; // Name of the task (must match a registered task worker) description: string; // Human-readable description of the task roomId?: UUID; // Optional room association (for room-specific tasks) worldId?: UUID; // Optional world association (for world-specific tasks) entityId?: UUID; // Optional entity association tags: string[]; // Tags for categorizing and filtering tasks updatedAt?: number; // Timestamp when the task was last updated metadata?: { // Optional additional configuration updateInterval?: number; // For repeating tasks: milliseconds between executions options?: { // For choice tasks: options for user selection name: string; description: string; }[]; [key: string]: unknown; // Additional custom metadata }; } Task Service‚Äã The Task Service (provided by @elizaos/plugin-bootstrap) automatically manages task execution: export class TaskService extends Service { static serviceType = ServiceType.TASK; private readonly TICK_INTERVAL = 1000; // Checks every second // Automatically processes tasks with 'queue' tag } The service: Runs continuously, checking for tasks every secondAutomatically processes tasks with the queue tagHandles both one-time and recurring task executionValidates tasks before execution using the worker's validate function Task Workers‚Äã Task workers define the actual logic that executes when a task runs. Each task worker is registered with the runtime and is identified by name. interface TaskWorker { name: string; // Matches the name in the Task execute: ( runtime: IAgentRuntime, options: { [key: string]: unknown }, // Options passed during execution task: Task // The task being executed ) =&gt; Promise&lt;void&gt;; validate?: ( // Optional validation before execution runtime: IAgentRuntime, message: Memory, state: State ) =&gt; Promise&lt;boolean&gt;; } Creating and Managing Tasks‚Äã Registering a Task Worker‚Äã Before creating tasks, you must register a worker to handle the execution: runtime.registerTaskWorker({ name: 'SEND_REMINDER', validate: async (runtime, message, state) =&gt; { // Optional validation logic return true; }, execute: async (runtime, options, task) =&gt; { // Task execution logic const { roomId } = task; const { reminder, userId } = options; await runtime.createMemory( { entityId: runtime.agentId, roomId, content: { text: `Reminder for &lt;@${userId}&gt;: ${reminder}`, }, }, 'messages' ); // Delete one-time tasks after execution (handled automatically if no 'repeat' tag) }, }); Creating a One-time Task‚Äã Create a task that will execute once. Important: Include the queue tag for automatic processing: await runtime.createTask({ name: 'SEND_REMINDER', description: 'Send a reminder message to the user', roomId: currentRoomId, worldId: currentWorldId, // Required field tags: ['queue', 'reminder'], // 'queue' tag required for processing metadata: { userId: message.entityId, reminder: 'Submit your weekly report', }, }); Creating a Recurring Task‚Äã Create a task that repeats at regular intervals. Include both queue and repeat tags: await runtime.createTask({ name: 'DAILY_REPORT', description: 'Generate and post the daily report', roomId: announcementChannelId, worldId: serverWorldId, // Required field tags: ['queue', 'repeat', 'daily'], // 'queue' and 'repeat' tags required metadata: { updateInterval: 86400000, // 24 hours in milliseconds updatedAt: Date.now(), // When the task was last executed }, }); Creating a Task Awaiting User Choice‚Äã Create a task that presents options and waits for user input using the AWAITING_CHOICE tag: await runtime.createTask({ name: 'CONFIRM_ACTION', description: 'Confirm the requested action', roomId: message.roomId, worldId: message.worldId, // Required field tags: ['AWAITING_CHOICE'], // Special tag for choice tasks metadata: { options: [ { name: 'confirm', description: 'Proceed with the action' }, { name: 'cancel', description: 'Cancel the action' }, ], action: 'DELETE_FILES', files: ['document1.txt', 'document2.txt'], }, }); Managing Tasks‚Äã Retrieve, update, and delete tasks as needed: // Get tasks by specific criteria const reminderTasks = await runtime.getTasks({ roomId: currentRoomId, tags: ['reminder'], }); // Get tasks by name const reportTasks = await runtime.getTasksByName('DAILY_REPORT'); // Get a specific task const task = await runtime.getTask(taskId); // Update a task (metadata is replaced, not merged) await runtime.updateTask(taskId, { description: 'Updated description', metadata: { ...task.metadata, priority: 'high', }, }); // Delete a task await runtime.deleteTask(taskId); Task Processing‚Äã Automatic Processing with Task Service‚Äã The Task Service automatically processes tasks based on their tags: Queue Tag: Tasks must have the queue tag to be processed by the Task ServiceRepeat Tag: Tasks with the repeat tag are kept after execution and re-executed based on their updateIntervalNo Repeat Tag: Tasks without the repeat tag are automatically deleted after execution Recurring Task Logic‚Äã For recurring tasks: The task must have both queue and repeat tagsThe updateInterval in metadata defines the delay between executionsThe updatedAt field tracks when the task was last executedTasks with immediate tag execute on first check regardless of interval Choice Tasks with AWAITING_CHOICE‚Äã Tasks tagged with AWAITING_CHOICE work with the bootstrap plugin's choice system: Choice Provider: Displays available tasks with options to usersCHOOSE_OPTION Action: Processes user selectionsUser Permissions: Only OWNER and ADMIN roles can select options Example flow: // 1. Create a choice task await runtime.createTask({ name: 'DEPLOYMENT_CHOICE', description: 'Choose deployment environment', roomId: message.roomId, worldId: message.worldId, tags: ['AWAITING_CHOICE'], metadata: { options: [ { name: 'production', description: 'Deploy to production' }, { name: 'staging', description: 'Deploy to staging' }, { name: 'cancel', description: 'Cancel deployment' }, ], }, }); // 2. User sees options via choice provider // &quot;Please select from: production, staging, cancel&quot; // 3. User responds with choice // &quot;production&quot; // 4. CHOOSE_OPTION action executes the task worker with selected option runtime.registerTaskWorker({ name: 'DEPLOYMENT_CHOICE', execute: async (runtime, options, task) =&gt; { if (options.option === 'production') { // Deploy to production } else if (options.option === 'staging') { // Deploy to staging } // Task is automatically deleted after execution }, }); Common Task Patterns‚Äã Immediate Execution Tasks‚Äã For tasks that should run as soon as the Task Service checks: await runtime.createTask({ name: 'IMMEDIATE_ACTION', description: 'Execute immediately', roomId: message.roomId, worldId: message.worldId, tags: ['queue', 'immediate'], // 'immediate' tag for first-run execution metadata: { // Task data }, }); Conditional Recurring Tasks‚Äã Tasks that repeat but may stop based on conditions: runtime.registerTaskWorker({ name: 'MONITOR_STATUS', validate: async (runtime, message, state) =&gt; { // Only execute if monitoring is still needed const status = await checkSystemStatus(); return status !== 'completed'; }, execute: async (runtime, options, task) =&gt; { const status = await checkSystemStatus(); if (status === 'completed') { // Remove the repeat tag to stop recurrence await runtime.updateTask(task.id, { tags: task.tags.filter((tag) =&gt; tag !== 'repeat'), }); } // Report status await runtime.createMemory( { entityId: runtime.agentId, roomId: task.roomId, content: { text: `Status: ${status}` }, }, 'messages' ); }, }); Multi-step Workflows‚Äã Implement workflows that progress through stages: runtime.registerTaskWorker({ name: 'WORKFLOW_STEP', execute: async (runtime, options, task) =&gt; { const currentStep = task.metadata?.step || 1; switch (currentStep) { case 1: // Execute step 1 await executeStep1(); // Update task to next step await runtime.updateTask(task.id, { metadata: { ...task.metadata, step: 2, }, }); break; case 2: // Execute step 2 await executeStep2(); // Create choice task for user confirmation await runtime.createTask({ name: 'CONFIRM_COMPLETION', description: 'Confirm workflow completion', roomId: task.roomId, worldId: task.worldId, tags: ['AWAITING_CHOICE'], metadata: { options: [ { name: 'complete', description: 'Mark as complete' }, { name: 'restart', description: 'Start over' }, ], workflowTaskId: task.id, }, }); break; } }, }); Best Practices‚Äã Always include required tags: queue for automatic processingrepeat for recurring tasksAWAITING_CHOICE for user selection tasks Set worldId: The worldId field is required when creating tasks Clean up one-time tasks: Tasks without repeat tag are automatically deleted after execution Use validation wisely: The validate function can prevent task execution based on current conditions Handle errors gracefully: Wrap task execution in try-catch blocks to prevent task worker failures Metadata management: When updating tasks, remember that metadata is replaced, not merged Use appropriate intervals: For recurring tasks, choose intervals that balance timeliness with resource usage Secure choice tasks: Only users with OWNER or ADMIN roles can select options for AWAITING_CHOICE tasks Short task IDs: When displaying tasks to users, use shortened UUIDs (first 8 characters) for readability Task worker naming: Use clear, descriptive names in UPPER_SNAKE_CASE for task workers Task Execution Flow‚Äã Limitations‚Äã Tasks are checked every second by the Task ServiceTask metadata is limited to JSON-serializable dataTasks require a registered worker with matching nameOnly one Task Service instance should run per agentTask execution is not guaranteed to be exactly on time (depends on check interval and system load)","keywords":"tasks scheduling automation workers recurring tasks task management","version":"1.0.17"},{"title":"Welcome to ElizaOS Documentation","type":0,"sectionRef":"#","url":"/docs/intro","content":"Welcome to ElizaOS Documentation ElizaOS is a powerful framework for creating and deploying AI agents. Choose your learning path based on your experience and goals: CLI Native GUI üöÄ Quick Start Get up and running in 5 minutes Perfect for creators, business users, and anyone who wants results immediately. ‚ú® One-click deploymentüéØ Ready-to-use templatesüì± Multi-platform setup‚ö° No coding required Start Here ‚Üí ‚ö° Developer Build the next generation For developers building custom plugins, integrations, and contributing to ElizaOS. üèóÔ∏è System architectureüíª Plugin developmentüîç Complete API referenceüöÄ Advanced patterns Dive Into Code ‚Üí üß≠ Which Path Is Right for You?‚Äã üöÄ Choose Quick Start if you: Want an AI agent running todayPrefer guided, visual instructionsFocus on content over codeNeed proven, working examples ‚ö° Choose Developer if you: Have programming experienceWant to build custom pluginsNeed system integrationsWant to contribute code üåü Popular Starting Points‚Äã ‚è±Ô∏è 5-Minute Setup Get your first agent running with zero configuration üé≠ Character Gallery Ready-to-use personalities that work out of the box üß† Core Concepts Understand ElizaOS architecture and patterns üéØ Learning Progression‚Äã üöÄ Start Simple Get your first agent running and understand the basics ‚ö° Then Build Create plugins, contribute code, and push boundaries What is ElizaOS?‚Äã ElizaOS is a powerful multi-agent simulation framework designed to create, deploy, and manage autonomous AI agents. Built with TypeScript, it provides a flexible and extensible platform for developing intelligent agents that can interact across multiple platforms while maintaining consistent personalities and knowledge. ElizaOS Multi-Agent Architecture Key Features‚Äã Platform Integration: Clients for Discord, Telegram, Farcaster, and many othersFlexible Model Support: Deepseek, Ollama, Groq, OpenAI, Anthropic, Gemini, Llama, xAI (Grok), etc.Character System: Create diverse agents using character filesMulti-Agent Architecture: Manage multiple unique AI personalities simultaneouslyMemory Management: Easily ingest and interact with documents using RAGMedia Processing: PDF, URLs, Audio transcription, Video processing, Image analysis, Conversation summarizationTechnical Foundation: 100% TypeScript implementationModular architectureHighly extensible action and plugin systemCustom client supportComprehensive API Extensive Plugin Ecosystem üåç Community &amp; Support‚Äã üí¨ Discord Community Get instant help and share your creations üíª GitHub Repository Source code, issues, and contributions üé® Template Gallery Discover and share character templates üì∫ Video Tutorials Learn with step-by-step video guides","keywords":"","version":"1.0.17"},{"title":"Frequently Asked Questions","type":0,"sectionRef":"#","url":"/docs/faq","content":"Frequently Asked Questions What is Eliza?‚Äã Eliza is an extensible open-source framework for building autonomous AI agents that can engage in natural conversations, learn from interactions, and maintain consistent personalities across platforms like Farcaster, X, Discord, and Telegram. What's the difference between v1 and v2?‚Äã V2 is a major upgrade that makes Eliza more powerful and easier to use. The main changes are: Plugin store for easy extensionsUnified messaging across platformsOne wallet for all blockchainsSmarter, learning charactersBetter planning capabilities For a detailed comparison, see our V2 announcement blog post. Installation and Setup‚Äã What are the system requirements for running Eliza?‚Äã Node.js version 23+At least 4GB RAMFor Windows users: WSL2 (Windows Subsystem for Linux) How do I fix common installation issues?‚Äã If you encounter build failures or dependency errors: Check Your Node.js Version: Ensure you are using Node.js v23 or higher. node --version If you have a different version, we recommend using nvm (Node Version Manager) to switch to the correct version: nvm install 23 nvm use 23 Clean your environment: bun clean Install dependencies: bun install --no-frozen-lockfile Rebuild: bun build If issues persist, try checking out the latest release: git checkout $(git describe --tags --abbrev=0) How do I set up my API keys?‚Äã If you see an error related to a &quot;Missing API Key&quot; or &quot;401 Unauthorized&quot; when your agent tries to use an AI model, it means you haven't configured your environment correctly. Solution: Ensure .env File Exists: Every project needs a .env file for secrets. If you don't have one, copy the template: cp .env.example .env Add Your Key: Open the .env file for editing and add your API key for the desired service (e.g., OpenAI or Anthropic). elizaos env edit-local Your file should contain a line like this: OPENAI_API_KEY=your-openai-api-key-here Restart the Agent: After saving your changes, restart the agent for the new environment variables to take effect. elizaos start For more details, see the Environment Configuration Guide. How do I use local models with Eliza?‚Äã To use local models with Eliza: Install Ollama on your systemDownload your desired model (e.g., ollama pull llama3.1)Install the Ollama plugin: bun install @elizaos-plugins/plugin-ollamaAdd the plugin to your character file: { &quot;plugins&quot;: [&quot;@elizaos-plugins/plugin-ollama&quot;] } Configure the plugin in your .env file: OLLAMA_API_ENDPOINT=http://localhost:11434/api OLLAMA_SMALL_MODEL=llama3 OLLAMA_MEDIUM_MODEL=your_medium_model OLLAMA_LARGE_MODEL=gemma3:latest OLLAMA_EMBEDDING_MODEL=nomic-embed-text For more details, see the plugin-ollama documentation. How do I update Eliza to the latest version?‚Äã For CLI projects: bun update -g @elizaos/cli For monorepo development: git pull bun clean bun install --no-frozen-lockfile bun build Running Multiple Agents‚Äã elizaos start --characters=&quot;characters/agent1.json,characters/agent2.json&quot; Create separate projects for each agent with their own configurationsFor production, use separate Docker containers for each agent Can I run multiple agents on one machine?‚Äã Yes, but consider: Each agent needs its own port configurationSeparate the .env files or use character-specific secretsMonitor memory usage (2-4GB RAM per agent recommended) Model Configuration‚Äã How do I switch between different AI models?‚Äã ‚ö†Ô∏è Breaking Change from v0.x to v1.x: In ElizaOS v0.x, you could specify models directly in the character file using modelProvider and related fields. In v1.x, models are exclusively configured through plugins. Migration example: // ‚ùå OLD (v0.x) - No longer works { &quot;modelProvider&quot;: &quot;openai&quot;, &quot;model&quot;: &quot;gpt-4&quot; } // ‚úÖ NEW (v1.x) - Use plugins instead { &quot;plugins&quot;: [&quot;@elizaos/plugin-openai&quot;] } Models are now defined by the plugins chosen in your character file (.ts or .json). Add the desired model plugin to the plugins array: { &quot;plugins&quot;: [&quot;@elizaos/plugin-openai&quot;] } Important notes about plugin order: Plugin order matters! The first plugin that supports a model type will be usedSome plugins don't support all model types (e.g., Anthropic doesn't support embeddings)Use fallback plugins for missing capabilities: { &quot;plugins&quot;: [ &quot;@elizaos/plugin-anthropic&quot;, // Primary for text generation &quot;@elizaos/plugin-openai&quot; // Fallback for embeddings ] } Common plugin choices: @elizaos/plugin-openai: Supports all model types (text, embeddings, objects)@elizaos/plugin-anthropic: Text generation only@elizaos-plugins/plugin-ollama: Local models via Ollama@elizaos/plugin-google-genai: Google's Gemini models Note: The modelProvider field from v0.x is deprecated and will be ignored. Models are now configured exclusively through plugins. How do I manage API keys and secrets?‚Äã Two options: Global .env file for shared settings: OPENAI_API_KEY=your-key-here ANTHROPIC_API_KEY=your-key-here Character-specific secrets in character.json: { &quot;settings&quot;: { &quot;secrets&quot;: { &quot;OPENAI_API_KEY&quot;: &quot;your-key-here&quot; } } } Note: API keys are required based on the plugins you use. For example: @elizaos/plugin-openai requires OPENAI_API_KEY@elizaos/plugin-anthropic requires ANTHROPIC_API_KEY@elizaos-plugins/plugin-ollama requires Ollama configuration (see local models section) Memory and Knowledge Management‚Äã How does memory management work in ElizaOS?‚Äã ElizaOS uses RAG (Retrieval-Augmented Generation) to convert prompts into vector embeddings for efficient context retrieval and memory storage. How do I fix &quot;Cannot generate embedding: Memory content is empty&quot;?‚Äã Check your database for null memory entries and ensure proper content formatting when storing new memories. How do I manage my agent's memory?‚Äã To reset memory: For PGLite: Delete the .eliza/.elizadb folder and restartFor PostgreSQL: Drop and recreate the database (see &quot;How do I clear or reset my agent's memory?&quot; below) To add documents: Use the @elizaos/plugin-knowledge plugin and place documents in the knowledge/ or docs/ folderFor large datasets: Use PostgreSQL instead of PGLite for better performance and scalability How do I clear or reset my agent's memory?‚Äã ElizaOS uses PGLite (local) or PostgreSQL (production) for data storage. There is currently no CLI command to clear memory, so you need to manually reset the database: For PGLite (local development): Delete the .elizadb folder in your projectDefault location: .eliza/.elizadbCustom location: Check your PGLITE_DATA_DIR environment variable # Default location rm -rf .eliza/.elizadb # Or if you have a custom PGLITE_DATA_DIR rm -rf $PGLITE_DATA_DIR For PostgreSQL: Drop and recreate the entire database (easiest method): # Connect to PostgreSQL as superuser psql -U postgres # Drop the database (WARNING: This deletes ALL data!) DROP DATABASE your_database_name; # Create a fresh database CREATE DATABASE your_database_name; # Exit psql \\q Or selectively delete memories (advanced): -- Connect to your database psql -U your_username -d your_database_name -- Delete all memories (be careful!) DELETE FROM embeddings; -- Delete embeddings first due to foreign keys DELETE FROM memories; -- Then delete memories Note: Be careful when deleting memories as this action cannot be undone. Always backup important data before resetting. How do I add custom knowledge or use RAG with my agent?‚Äã The easiest way is to use the @elizaos/plugin-knowledge plugin: Install the plugin and an LLM provider that supports embeddings: bun install @elizaos/plugin-knowledge Add both plugins to your character file: { &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, // or plugin-google-genai, plugin-ollama &quot;@elizaos/plugin-knowledge&quot; ] } Create a docs or knowledge folder in your project root and add documents: your-project/ ‚îú‚îÄ‚îÄ docs/ &lt;-- or knowledge/ ‚îÇ ‚îú‚îÄ‚îÄ guide.pdf ‚îÇ ‚îú‚îÄ‚îÄ manual.txt ‚îÇ ‚îî‚îÄ‚îÄ notes.md ‚îî‚îÄ‚îÄ ... other files Enable auto-loading in your .env: LOAD_DOCS_ON_STARTUP=true Supported embedding providers: @elizaos/plugin-openai - OpenAI embeddings (text-embedding-3-small)@elizaos-plugins/plugin-google-genai - Google embeddings (text-embedding-004)@elizaos-plugins/plugin-ollama - Local embeddings (nomic-embed-text) The plugin automatically uses embeddings from your configured LLM provider. For more details, see the plugin-knowledge documentation. Plugin Order and Dependencies‚Äã Why does plugin order matter?‚Äã Plugin order is critical in ElizaOS because plugins are loaded sequentially and may depend on services provided by earlier plugins. The wrong order can cause initialization failures or missing functionality. What's the correct plugin order?‚Äã Here's the required loading order: { &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, // 1. MUST BE FIRST - provides database &quot;@elizaos/plugin-anthropic&quot;, // 2. Primary LLM provider &quot;@elizaos/plugin-openai&quot;, // 3. Fallback for embeddings (if needed) &quot;@elizaos/plugin-bootstrap&quot; // 4. Core message handling // ... other plugins can go here in any order ] } Plugin dependencies explained:‚Äã Database Plugin (@elizaos/plugin-sql) - MUST ALWAYS BE FIRST Provides the database adapter that all other plugins useWithout this, plugins that store data will fail to initialize LLM Provider Plugins - Must come after database, before plugins that need AI Examples: @elizaos/plugin-openai, @elizaos/plugin-anthropic, @elizaos/plugin-google-genaiThe first plugin that supports a model type (text, embedding, etc.) will be usedOrder these by preference - put your primary provider first Fallback Providers - For missing capabilities Some LLM plugins don't support all model types (e.g., Anthropic doesn't support embeddings)Add a fallback plugin that provides the missing capability: { &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-anthropic&quot;, // Primary for text generation &quot;@elizaos/plugin-openai&quot; // Fallback for embeddings ] } Bootstrap Plugin (@elizaos/plugin-bootstrap) - Highly recommended Provides all core message handling, actions, and evaluatorsWithout this, your agent won't respond to messages or perform basic actionsWhile technically optional (you could implement your own message handling), it provides the standard ElizaOS behavior that most users expect Feature Plugins - Can go in any order after dependencies Platform integrations: @elizaos/plugin-discord, @elizaos/plugin-telegramAdditional capabilities: @elizaos/plugin-knowledge, @elizaos/plugin-image-generationCustom plugins you've created Common plugin order mistakes:‚Äã // ‚ùå WRONG - Knowledge plugin before its dependencies { &quot;plugins&quot;: [ &quot;@elizaos/plugin-knowledge&quot;, // Needs database and embeddings! &quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot; ] } // ‚úÖ CORRECT - Dependencies first { &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, // Database first &quot;@elizaos/plugin-openai&quot;, // Provides embeddings &quot;@elizaos/plugin-knowledge&quot; // Can now use both ] } How do I know which plugins provide what?‚Äã Database: @elizaos/plugin-sqlText Generation: Most LLM plugins (openai, anthropic, google-genai, ollama)Embeddings: @elizaos/plugin-openai, @elizaos/plugin-google-genai, @elizaos/plugin-ollamaImage Generation: @elizaos/plugin-openai, dedicated image pluginsCore Functionality: @elizaos/plugin-bootstrap Can I skip the bootstrap plugin?‚Äã The bootstrap plugin is mandatory for communication and basic agent functionality unless you're doing heavy customizations. The bootstrap plugin provides critical event handlers that enable your agent to: Process incoming messages - Without it, your agent won't respond to messages from Discord, Telegram, or other platformsHandle communication events - MESSAGE_RECEIVED, VOICE_MESSAGE_RECEIVED, and other essential eventsGenerate responses - Core message processing pipeline and response generationManage basic actions - reply, ignore, follow/unfollow rooms, mute/unmuteProcess memory and context - Essential evaluators and providers for agent cognitionHandle platform events - World joins, entity management, and lifecycle events When you can skip it: You're building a completely custom event handling systemYou're creating specialized agents that don't need standard communicationYou're implementing your own message processing pipeline from scratch For 99% of use cases, you should include @elizaos/plugin-bootstrap in your plugins array. Without it, your agent will appear &quot;deaf and mute&quot; - unable to process messages or respond to users. Think of it as the essential nervous system that connects your agent's brain to the outside world. You can disable it for testing with IGNORE_BOOTSTRAP=true environment variable, but this will break standard agent functionality. Plugins and Extensions‚Äã How do I add plugins to my agent?‚Äã Using the CLI: elizaos project add-plugin @elizaos/plugin-name Or manually: Add the plugin to your character.json: { &quot;plugins&quot;: [&quot;@elizaos/plugin-name&quot;] } Install the plugin: bun install @elizaos/plugin-nameRebuild: bun buildConfigure any required plugin settings in .env or character file How do I create custom plugins?‚Äã Basic approach: Use the CLI to scaffold a plugin: elizaos create (select Plugin)Implement required interfaces (actions, providers, evaluators)Publish with elizaos plugins publish Advanced local development with bun link: For testing plugins locally before publishing: Scaffold both a plugin and a test project: # Create your plugin elizaos create my-plugin cd my-plugin # Create a test project cd .. elizaos create my-test-project Link your plugin locally using bun link: # In your plugin directory cd my-plugin bun link # This creates a global link to your plugin Use the linked plugin in your project: # In your project directory cd ../my-test-project bun link @your-namespace/my-plugin # This links the local plugin to your project Add the plugin to your character file: { &quot;plugins&quot;: [&quot;@your-namespace/my-plugin&quot;] } Make changes and test immediately: Edit plugin codeRun bun build in the plugin directoryChanges are immediately available in your linked projectNo need to publish/reinstall Benefits of bun link: Test plugins locally without publishingInstant feedback during developmentNo need to bump versions for each changeEasy debugging with local source code To unlink when done: # In your project bun unlink @your-namespace/my-plugin # In your plugin directory bun unlink Project Management and Updates‚Äã How do I update ElizaOS after new releases?‚Äã When new versions of ElizaOS are released, follow these steps to update: Update the CLI globally: bun update -g @elizaos/cli Update your project dependencies: # From your project directory elizaos update This command updates all ElizaOS dependencies to their latest compatible versions. Rebuild your project: # Always use dev after updates to ensure proper rebuild elizaos dev The dev command will automatically reinstall dependencies and rebuild if necessary. Best practices for project updates:‚Äã Always start with elizaos dev after updates - it handles reinstallation and rebuilding automaticallyCheck release notes for breaking changes before updatingTest in development before updating production deploymentsBackup your data (especially if using PostgreSQL) before major updates How do I enable debug logging?‚Äã For troubleshooting, you can enable detailed logging in two ways: Environment variable (temporary): LOG_LEVEL=debug elizaos start # or LOG_LEVEL=debug elizaos dev In your .env file (permanent): LOG_LEVEL=debug Available log levels: error, warn, info, debug Troubleshooting project issues:‚Äã If you encounter issues after updates or during development: Clean rebuild (nuclear option): # Remove all build artifacts and dependencies rm -rf node_modules &amp;&amp; rm -rf dist &amp;&amp; rm -rf bun.lock # Reinstall and rebuild everything elizaos dev Check your package.json: Important: Don't hardcode ElizaOS package versions in your package.jsonHardcoded versions will override the update processEither use proper version ranges (e.g., &quot;^1.0.0&quot;) or remove version specifications before troubleshooting // ‚ùå BAD - Hardcoded versions { &quot;dependencies&quot;: { &quot;@elizaos/core&quot;: &quot;1.0.0&quot;, // Will always install this exact version &quot;@elizaos/plugin-bootstrap&quot;: &quot;1.0.0&quot; } } // ‚úÖ GOOD - Version ranges { &quot;dependencies&quot;: { &quot;@elizaos/core&quot;: &quot;latest&quot;, // Will update to compatible versions &quot;@elizaos/plugin-bootstrap&quot;: &quot;latest&quot; } } Common issues and solutions: &quot;Module not found&quot; - Run elizaos dev to reinstall dependenciesType errors - Clean rebuild usually fixes thisPlugin initialization failures - Check plugin orderDatabase errors - May need to reset database after major updates Project scaffolding tips:‚Äã When creating new projects: Use the CLI scaffolding: elizaos create my-project Don't modify core files - Keep customizations in your character files and custom plugins Use version control: git init git add . git commit -m &quot;Initial ElizaOS project&quot; Structure your project properly: my-project/ ‚îú‚îÄ‚îÄ .env # Environment variables (don't commit!) ‚îú‚îÄ‚îÄ .gitignore # Should include .env, node_modules, dist ‚îú‚îÄ‚îÄ src/ ‚îÇ ‚îî‚îÄ‚îÄ index.ts # Your agent configuration ‚îú‚îÄ‚îÄ knowledge/ # Knowledge documents ‚îú‚îÄ‚îÄ custom-plugins/ # Your custom plugins ‚îî‚îÄ‚îÄ package.json # Project dependencies Production Deployment‚Äã How do I ensure my agent runs continuously?‚Äã Use PM2 process manager with Bun: # Install PM2 globally with Bun bun install -g pm2 # Start your agent with PM2 pm2 start &quot;elizaos start&quot; --name eliza --interpreter bun # Save the process list for automatic restart pm2 save pm2 startup Alternative: Use PM2 with a configuration file:Create pm2.config.js: module.exports = { name: 'eliza-agent', script: 'elizaos', args: 'start', interpreter: 'bun', env: { PATH: `${process.env.HOME}/.bun/bin:${process.env.PATH}`, }, }; Then start with: pm2 start pm2.config.js Set up monitoring and automatic restarts: # Enable auto-restart on crash pm2 start &quot;elizaos start&quot; --name eliza --interpreter bun --watch --max-memory-restart 2G # View logs pm2 logs eliza # Monitor CPU and memory pm2 monit Note: PM2 cluster mode is not supported when using Bun as the interpreter. Your agent will run in fork mode. Troubleshooting‚Äã What do I do if the port is already in use?‚Äã By default, the ElizaOS web interface runs on port 3000. If you see an error like EADDRINUSE: address already in use :::3000, it means another application is already using that port. Solution: Stop the Other Application: Identify and stop the other process that is using port 3000. Run on a Different Port: Alternatively, you can tell ElizaOS to use a different port with the --port flag. elizaos start --port 3001 You can then access the web interface at http://localhost:3001. How do I fix database connection issues?‚Äã For PGLite (default local database): Delete the .elizadb folder (or the path specified in PGLITE_DATA_DIR). The default location is .eliza/.elizadb in your project root.Restart your agent to create a fresh database. rm -rf .eliza/.elizadb For PostgreSQL: Check Connection String: Ensure your DATABASE_URL in the .env file is correct and accessible from your machine.Verify Database is Running: Make sure your PostgreSQL server is running and you can connect to it with a standard client (like psql or DBeaver).Check Firewall Rules: Ensure no firewall is blocking the connection between your machine and the database server. How do I resolve embedding dimension mismatch errors?‚Äã Set OPENAI_EMBEDDING_DIMENSIONS=384 in .envReset your agent's memory: For PGLite: Remove the .elizadb folder rm -rf .eliza/.elizadb For PostgreSQL: Drop and recreate the database psql -U your_username -c &quot;DROP DATABASE your_database_name;&quot; psql -U your_username -c &quot;CREATE DATABASE your_database_name;&quot; Ensure consistent embedding models across your setup Why does my agent post in JSON format sometimes?‚Äã This usually happens due to incorrect output formatting or template issues. Check your character file's templates and ensure the text formatting is correct without raw JSON objects. Character Configuration‚Äã Can I still run custom character JSON files with the new CLI?‚Äã Yes! Custom character files are fully supported. The --character option works exactly as before: # Single character file elizaos start --character ./customcharacter.json # Multiple character files elizaos start --character ./character1.json ./character2.json # Without .json extension (auto-added) elizaos start --character mycharacter # From URL elizaos start --character https://example.com/mycharacter.json What's the character file format?‚Äã Your character JSON file should follow this structure: { &quot;name&quot;: &quot;MyCustomAgent&quot;, &quot;username&quot;: &quot;mycustomagent&quot;, &quot;description&quot;: &quot;A custom AI agent&quot;, &quot;system&quot;: &quot;You are a helpful assistant specialized in...&quot;, &quot;bio&quot;: [&quot;I am a custom AI assistant.&quot;, &quot;I specialize in helping users with...&quot;], &quot;plugins&quot;: [&quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;], &quot;messageExamples&quot;: [ [ { &quot;name&quot;: &quot;user&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Hello!&quot; } }, { &quot;name&quot;: &quot;MyCustomAgent&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Hi there! How can I help you today?&quot; } } ] ], &quot;postExamples&quot;: [ &quot;Just thinking about how AI can help improve productivity...&quot;, &quot;Excited to share some tips about effective communication!&quot; ], &quot;topics&quot;: [&quot;technology&quot;, &quot;productivity&quot;, &quot;communication&quot;], &quot;adjectives&quot;: [&quot;helpful&quot;, &quot;knowledgeable&quot;, &quot;friendly&quot;, &quot;professional&quot;], &quot;knowledge&quot;: [&quot;./knowledge/base-knowledge.txt&quot;], &quot;style&quot;: { &quot;all&quot;: [&quot;Be concise and clear&quot;, &quot;Use examples when helpful&quot;], &quot;chat&quot;: [&quot;Be conversational&quot;, &quot;Ask clarifying questions&quot;], &quot;post&quot;: [&quot;Be engaging&quot;, &quot;Share insights&quot;] }, &quot;settings&quot;: { &quot;voice&quot;: { &quot;model&quot;: &quot;en_US-hfc_female-medium&quot; } } } Minimal character file: { &quot;name&quot;: &quot;SimpleBot&quot;, &quot;bio&quot;: &quot;I am a helpful AI assistant.&quot;, &quot;topics&quot;: [&quot;general&quot;], &quot;adjectives&quot;: [&quot;helpful&quot;] } Important notes about character files:‚Äã Model configuration: AI models are NOT configured in the character file anymore. In v0.x, you could specify models directly in the character file, but in v1.x models are exclusively configured through plugins. See the Model Configuration section above.Backward compatibility: Existing character files from older versions work, but you'll need to: Remove any modelProvider or model-related settings from the character fileAdd the appropriate plugin(s) to the plugins array (e.g., @elizaos/plugin-openai)Configure API keys in your .env file or character settings.secretsPay attention to plugin order - some plugins depend on others Plugin specification: You can specify plugins directly in the character fileMultiple characters: Run multiple characters simultaneously with space-separated paths How can I contribute?‚Äã Eliza welcomes contributions from individuals with a wide range of skills: Participate in community discussions: Share your insights, propose new ideas, and engage with other community membersContribute to the development: https://github.com/elizaOS/elizaExtend the ecosystem: Create plugins, clients, and tools Technical Contributions‚Äã Develop new plugins: Create new functionality using the plugin systemImprove the core: Enhance the ElizaOS core functionalityFine-tune models: Optimize models for specific personalities and use cases Non-Technical Contributions‚Äã Community Management: Onboard new members, organize events, and foster a welcoming communityContent Creation: Create tutorials, documentation, and videosTranslation: Help make ElizaOS accessible to a global audienceDomain Expertise: Provide insights for specific applications of ElizaOS","keywords":"FAQ troubleshooting installation setup Discord models memory","version":"1.0.17"},{"title":"ElizaOS Documentation Structure","type":0,"sectionRef":"#","url":"/docs/overview/documentation-structure","content":"ElizaOS Documentation Structure This document outlines the two-track documentation system for ElizaOS, designed to serve both non-technical users and developers effectively. üìö Two-Track Documentation System‚Äã ElizaOS documentation is organized into two distinct tracks: üéØ Track 1: Simple Docs (Vibecoders)‚Äã For: Non-technical users, content creators, and those who want to run agents quickly Goal: Get users running agents in 5 minutes without understanding internals üîß Track 2: Technical Docs (Developers)‚Äã For: Developers, contributors, and those building on ElizaOS Goal: Deep technical understanding for extending and customizing ElizaOS üó∫Ô∏è Documentation Map‚Äã Simple Track Structure‚Äã docs/simple/ ‚îú‚îÄ‚îÄ getting-started/ ‚îÇ ‚îú‚îÄ‚îÄ quick-start.md # 5-minute setup guide ‚îÇ ‚îú‚îÄ‚îÄ first-agent.md # Creating your first agent ‚îÇ ‚îî‚îÄ‚îÄ troubleshooting.md # Common issues &amp; solutions ‚îú‚îÄ‚îÄ templates/ ‚îÇ ‚îú‚îÄ‚îÄ gallery.md # Pre-built agent templates ‚îÇ ‚îú‚îÄ‚îÄ customization.md # Simple customization options ‚îÇ ‚îî‚îÄ‚îÄ examples/ # Ready-to-use examples ‚îú‚îÄ‚îÄ guides/ ‚îÇ ‚îú‚îÄ‚îÄ character-creation.md # Visual character builder guide ‚îÇ ‚îú‚îÄ‚îÄ plugin-usage.md # Using existing plugins ‚îÇ ‚îî‚îÄ‚îÄ deployment.md # Simple deployment options ‚îî‚îÄ‚îÄ faq.md # Non-technical FAQ Technical Track Structure‚Äã docs/technical/ ‚îú‚îÄ‚îÄ architecture/ ‚îÇ ‚îú‚îÄ‚îÄ overview.md # System architecture ‚îÇ ‚îú‚îÄ‚îÄ core-concepts.md # Deep dive into core concepts ‚îÇ ‚îú‚îÄ‚îÄ state-management.md # State &amp; memory systems ‚îÇ ‚îî‚îÄ‚îÄ plugin-system.md # Plugin architecture ‚îú‚îÄ‚îÄ development/ ‚îÇ ‚îú‚îÄ‚îÄ monorepo-guide.md # Monorepo development ‚îÇ ‚îú‚îÄ‚îÄ standalone-guide.md # Standalone project setup ‚îÇ ‚îú‚îÄ‚îÄ plugin-development.md # Creating custom plugins ‚îÇ ‚îî‚îÄ‚îÄ testing-guide.md # Testing strategies ‚îú‚îÄ‚îÄ api-reference/ ‚îÇ ‚îú‚îÄ‚îÄ core-api.md # Core API documentation ‚îÇ ‚îú‚îÄ‚îÄ plugin-api.md # Plugin API reference ‚îÇ ‚îî‚îÄ‚îÄ service-api.md # Service layer APIs ‚îú‚îÄ‚îÄ advanced/ ‚îÇ ‚îú‚îÄ‚îÄ performance.md # Performance optimization ‚îÇ ‚îú‚îÄ‚îÄ scaling.md # Scaling strategies ‚îÇ ‚îî‚îÄ‚îÄ security.md # Security best practices ‚îî‚îÄ‚îÄ faq.md # Technical FAQ üö¶ User Journey Paths‚Äã Path 1: Quick Start (Non-Technical)‚Äã Landing page ‚Üí &quot;I want to run an agent&quot;5-minute quick start guideTemplate gallery selectionSimple customizationRunning the agent Path 2: Developer Journey‚Äã Landing page ‚Üí &quot;I want to build with ElizaOS&quot;Architecture overviewDevelopment environment setupCore concepts understandingBuilding custom features üìã Content Guidelines‚Äã Simple Track Guidelines‚Äã Use plain language, avoid technical jargonInclude visual guides and screenshotsProvide copy-paste solutionsFocus on &quot;what&quot; not &quot;why&quot;Maximum 5-minute read time per page Technical Track Guidelines‚Äã Include architectural diagramsProvide code examples with explanationsDeep dive into implementation detailsInclude performance considerationsLink to source code references üîÑ Migration Plan‚Äã Phase 1: Structure Creation‚Äã Create directory structure for both tracksSet up navigation systemCreate landing page with path selection Phase 2: Content Migration‚Äã Audit existing documentationCategorize content by trackRewrite content for appropriate audienceCreate missing documentation Phase 3: Enhancement‚Äã Add interactive examplesCreate video tutorialsImplement feedback systemSet up automated testing for code examples üìä Success Metrics‚Äã Simple Track Metrics‚Äã Time to first successful agent run: &lt; 5 minutesSupport ticket reduction: 50%User satisfaction: &gt; 90% Technical Track Metrics‚Äã Developer onboarding time: &lt; 1 hourContribution quality improvement: 30%Documentation completeness: 100% API coverage üöÄ Next Steps‚Äã Create directory structureImplement navigation systemCreate landing pageBegin content migrationGather user feedbackIterate and improve","keywords":"","version":"1.0.17"},{"title":"Extending Service Types","type":0,"sectionRef":"#","url":"/docs/plugins/extending-service-types","content":"Extending Service Types The Eliza runtime allows plugins to extend the core service types through TypeScript module augmentation. This provides full type safety while allowing plugins to register their own custom services. How to Extend Service Types‚Äã 1. In your plugin's type definitions‚Äã Create a type declaration file (e.g., types.ts) in your plugin: // In your plugin's types.ts or index.ts declare module '@elizaos/core' { interface ServiceTypeRegistry { // Add your custom service types here BLOCKCHAIN: 'blockchain'; WEATHER: 'weather'; NOTIFICATION: 'notification'; CUSTOM_AI: 'custom_ai'; } } // Export your service type constants for use in your plugin export const MyPluginServiceType = { BLOCKCHAIN: 'blockchain' as const, WEATHER: 'weather' as const, NOTIFICATION: 'notification' as const, CUSTOM_AI: 'custom_ai' as const, } satisfies Partial&lt;import('@elizaos/core').ServiceTypeRegistry&gt;; 2. Implement your service class‚Äã import { Service, type IAgentRuntime } from '@elizaos/core'; import { MyPluginServiceType } from './types'; export class BlockchainService extends Service { static serviceType = MyPluginServiceType.BLOCKCHAIN; capabilityDescription = 'Provides blockchain interaction capabilities'; static async start(runtime: IAgentRuntime): Promise&lt;BlockchainService&gt; { const service = new BlockchainService(runtime); // Initialize your service return service; } async stop(): Promise&lt;void&gt; { // Cleanup logic } // Your service implementation async getBalance(address: string): Promise&lt;string&gt; { // Implementation return '0'; } } 3. Register the service in your plugin‚Äã import { type Plugin } from '@elizaos/core'; import { BlockchainService } from './services/blockchain'; import './types'; // Ensure module augmentation is loaded export const myPlugin: Plugin = { name: 'my-blockchain-plugin', description: 'Adds blockchain capabilities', services: [BlockchainService], // ... other plugin properties }; export * from './types'; export * from './services/blockchain'; 4. Use the service with full type safety‚Äã // In your actions, evaluators, or other plugin code const blockchainService = runtime.getService&lt;BlockchainService&gt;(MyPluginServiceType.BLOCKCHAIN); if (blockchainService) { const balance = await blockchainService.getBalance('0x...'); } Benefits‚Äã Full Type Safety: TypeScript will provide autocomplete and type checking for your custom service typesIDE Support: Your IDE will show your custom service types in autocompleteRuntime Safety: The runtime will properly handle your custom servicesNo Conflicts: Multiple plugins can extend service types without conflicts Example: Complete Plugin Structure‚Äã my-plugin/ ‚îú‚îÄ‚îÄ src/ ‚îÇ ‚îú‚îÄ‚îÄ types.ts # Service type extensions ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ weather.ts # Service implementation ‚îÇ ‚îú‚îÄ‚îÄ actions/ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ getWeather.ts # Actions using the service ‚îÇ ‚îî‚îÄ‚îÄ index.ts # Plugin definition ‚îî‚îÄ‚îÄ package.json Runtime Behavior‚Äã Services are registered during plugin initializationThe runtime maintains a Map&lt;ServiceTypeName, Service&gt; of all registered servicesruntime.getService() provides type-safe access to any registered serviceServices can be accessed by any part of the runtime (actions, evaluators, providers, etc.) This approach ensures that your plugin's service types are fully integrated into the Eliza type system while maintaining clean separation between core and plugin functionality.","keywords":"","version":"1.0.17"},{"title":"ElizaOS Advanced Migration Guide - v1.x","type":0,"sectionRef":"#","url":"/docs/plugins/migration/claude-code/advanced-migration-guide","content":"ElizaOS Advanced Migration Guide - v1.x Important: This guide covers advanced breaking changes for evaluators, services, and runtime methods. Read the main migration-guide.md first for actions, providers, and basic migrations. Table of Contents‚Äã Evaluators MigrationServices &amp; Clients MigrationRuntime Method ChangesEntity System Migration Evaluators Migration‚Äã Evaluator Interface Changes‚Äã Evaluators remain largely unchanged in their core structure, but their integration with the runtime has evolved: // v0 Evaluator usage remains the same export interface Evaluator { alwaysRun?: boolean; description: string; similes: string[]; examples: EvaluationExample[]; handler: Handler; name: string; validate: Validator; } Key Changes:‚Äã Evaluation Results: The evaluate() method now returns Evaluator[] instead of string[]: // v0: Returns string array of evaluator names const evaluators: string[] = await runtime.evaluate(message, state); // v1: Returns Evaluator objects const evaluators: Evaluator[] | null = await runtime.evaluate(message, state); Additional Parameters: The evaluate method accepts new optional parameters: // v1: Extended evaluate signature await runtime.evaluate( message: Memory, state?: State, didRespond?: boolean, callback?: HandlerCallback, responses?: Memory[] // NEW: Can pass responses for evaluation ); Services &amp; Clients Migration‚Äã Service Registration Changes‚Äã Services have undergone significant architectural changes: // v0: Service extends abstract Service class export abstract class Service { static get serviceType(): ServiceType { throw new Error('Service must implement static serviceType getter'); } public static getInstance&lt;T extends Service&gt;(): T { // Singleton pattern } abstract initialize(runtime: IAgentRuntime): Promise&lt;void&gt;; } // v1: Service is now a class with static properties export class Service { static serviceType: ServiceTypeName; async initialize(runtime: IAgentRuntime): Promise&lt;void&gt; { // Implementation } } Migration Steps:‚Äã Remove Singleton Pattern: // v0: Singleton getInstance class MyService extends Service { private static instance: MyService | null = null; public static getInstance(): MyService { if (!this.instance) { this.instance = new MyService(); } return this.instance; } } // v1: Direct instantiation class MyService extends Service { static serviceType = ServiceTypeName.MY_SERVICE; // No getInstance needed } Update Service Registration: // v0: Register instance await runtime.registerService(MyService.getInstance()); // v1: Register class await runtime.registerService(MyService); Service Type Enum Changes: // v0: ServiceType enum export enum ServiceType { IMAGE_DESCRIPTION = 'image_description', TRANSCRIPTION = 'transcription', // ... } // v1: ServiceTypeName (similar but may have new values) export enum ServiceTypeName { IMAGE_DESCRIPTION = 'image_description', TRANSCRIPTION = 'transcription', // Check for any renamed or new service types } Runtime Method Changes‚Äã 1. State Management‚Äã The updateRecentMessageState method has been removed: // v0: Separate method for updating state currentState = await runtime.updateRecentMessageState(currentState); // v1: Use composeState with specific keys currentState = await runtime.composeState(message, ['RECENT_MESSAGES']); 2. Memory Manager Access‚Äã Memory managers are no longer directly accessible: // v0: Direct access to memory managers runtime.messageManager.getMemories({...}); runtime.registerMemoryManager(manager); const manager = runtime.getMemoryManager(&quot;messages&quot;); // v1: Use database adapter methods await runtime.getMemories({ roomId, count, unique: false, tableName: &quot;messages&quot;, agentId: runtime.agentId }); 3. Model Usage‚Äã Complete overhaul of model interaction: // v0: generateText with ModelClass import { generateText, ModelClass } from '@elizaos/core'; const result = await generateText({ runtime, context: prompt, modelClass: ModelClass.SMALL, }); // v1: useModel with ModelTypeName const result = await runtime.useModel(ModelTypeName.TEXT_SMALL, { prompt, stopSequences: [], }); 4. Settings Management‚Äã Global Settings Object Removed‚Äã The global settings object is no longer exported from @elizaos/core: // v0: Import and use global settings import { settings } from '@elizaos/core'; const charityAddress = settings[networkKey]; const apiKey = settings.OPENAI_API_KEY; // v1: Use runtime.getSetting() // Remove the settings import import { elizaLogger, type IAgentRuntime } from '@elizaos/core'; const charityAddress = runtime.getSetting(networkKey); const apiKey = runtime.getSetting('OPENAI_API_KEY'); New Settings Methods‚Äã // v0: Only getSetting through runtime const value = runtime.getSetting(key); // v1: Both get and set const value = runtime.getSetting(key); runtime.setSetting(key, value, isSecret); Migration Example‚Äã // v0: utils.ts using global settings import { settings } from '@elizaos/core'; export function getCharityAddress(network: string): string | null { const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`; const charityAddress = settings[networkKey]; return charityAddress; } // v1: Pass runtime to access settings export function getCharityAddress(runtime: IAgentRuntime, network: string): string | null { const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`; const charityAddress = runtime.getSetting(networkKey); return charityAddress; } Common Settings Migration Patterns‚Äã Environment Variables: Both v0 and v1 read from environment variables, but access patterns differDynamic Settings: v1 allows runtime setting updates with setSetting()Secret Management: v1 adds explicit secret handling with the isSecret parameter Real-World Fix: Coinbase Plugin‚Äã The Coinbase plugin's getCharityAddress function needs updating: // v0: Current broken code import { settings } from '@elizaos/core'; // ERROR: 'settings' not exported export function getCharityAddress(network: string, isCharitable = false): string | null { const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`; const charityAddress = settings[networkKey]; // ERROR: Cannot use settings // ... } // v1: Fixed code - runtime parameter added export function getCharityAddress( runtime: IAgentRuntime, // Add runtime parameter network: string, isCharitable = false ): string | null { const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`; const charityAddress = runtime.getSetting(networkKey); // Use runtime.getSetting // ... } // Update all callers to pass runtime const charityAddress = getCharityAddress(runtime, network); 5. Event System‚Äã New event-driven architecture: // v1: Register and emit events runtime.registerEvent('custom-event', async (params) =&gt; { // Handle event }); await runtime.emitEvent('custom-event', { data: 'value' }); Entity System Migration‚Äã The most significant change is the shift from User/Participant to Entity/Room/World: User ‚Üí Entity‚Äã // v0: User-based methods await runtime.ensureUserExists(userId, userName, name, email, source); const account = await runtime.getAccountById(userId); // v1: Entity-based methods await runtime.ensureConnection({ entityId: userId, roomId, userName, name, worldId, source, }); const entity = await runtime.getEntityById(entityId); Participant ‚Üí Room Membership‚Äã // v0: Participant methods await runtime.ensureParticipantExists(userId, roomId); await runtime.ensureParticipantInRoom(userId, roomId); // v1: Simplified room membership await runtime.ensureParticipantInRoom(entityId, roomId); New World Concept‚Äã v1 introduces the concept of &quot;worlds&quot; (servers/environments): // v1: World management await runtime.ensureWorldExists({ id: worldId, name: serverName, type: 'discord', // or other platform }); // Get all rooms in a world const rooms = await runtime.getRooms(worldId); Connection Management‚Äã // v0: Multiple ensure methods await runtime.ensureUserExists(...); await runtime.ensureRoomExists(roomId); await runtime.ensureParticipantInRoom(...); // v1: Single connection method await runtime.ensureConnection({ entityId, roomId, worldId, userName, name, source, channelId, serverId, type: 'user', metadata: {} }); Client Migration‚Äã Clients now have a simpler interface: // v0: Client with config export type Client = { name: string; config?: { [key: string]: any }; start: (runtime: IAgentRuntime) =&gt; Promise&lt;ClientInstance&gt;; }; // v1: Client integrated with services // Clients are now typically implemented as services class MyClient extends Service { static serviceType = ServiceTypeName.MY_CLIENT; async initialize(runtime: IAgentRuntime): Promise&lt;void&gt; { // Start client operations } async stop(): Promise&lt;void&gt; { // Stop client operations } } Quick Reference‚Äã Removed Methods‚Äã updateRecentMessageState() ‚Üí Use composeState(message, ['RECENT_MESSAGES'])registerMemoryManager() ‚Üí Not needed, use database adaptergetMemoryManager() ‚Üí Use database adapter methodsregisterContextProvider() ‚Üí Use registerProvider() Removed Exports‚Äã settings object ‚Üí Use runtime.getSetting(key) instead Changed Methods‚Äã evaluate() ‚Üí Now returns Evaluator[] instead of string[]getAccountById() ‚Üí getEntityById()ensureUserExists() ‚Üí ensureConnection()generateText() ‚Üí runtime.useModel() New Methods‚Äã setSetting()registerEvent()emitEvent()useModel()registerModel()ensureWorldExists()getRooms() Migration Checklist‚Äã Update all evaluator result handling to expect Evaluator[] objects Remove singleton patterns from services Update service registration to pass classes instead of instances Replace updateRecentMessageState with composeState Migrate from generateText to runtime.useModel Update user/participant methods to entity/room methods Add world management for multi-server environments Convert clients to service-based architecture Update any direct memory manager access to use database adapter Replace import { settings } with runtime.getSetting() calls Update functions to accept runtime parameter where settings are needed Need Help?‚Äã If you encounter issues not covered in this guide: Check the main migration-guide.md for basic migrationsReview the v1.x examples for reference implementationsJoin our Discord community for support","keywords":"","version":"1.0.17"},{"title":"Final Setup Instructions Before Commit","type":0,"sectionRef":"#","url":"/docs/plugins/migration/claude-code/completion-requirements","content":"Final Setup Instructions Before Commit This document outlines the essential steps to complete before committing and publishing the plugin. Please follow each step carefully to ensure proper configuration. 1. Configure .gitignore‚Äã Create or update the .gitignore file with the following minimum configuration: dist node_modules .env .elizadb .turbo 2. Configure .npmignore‚Äã Create or update the .npmignore file to ensure only necessary files are included in the npm package: * !dist/** !package.json !readme.md !tsup.config.ts 3. Add MIT License‚Äã Create a LICENSE file in the root directory with the following content: MIT License Copyright (c) 2025 Shaw Walters and elizaOS Contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 4. Verify package.json‚Äã Ensure the package.json file contains all required fields: Basic Fields‚Äã name: Package name (should match npm registry requirements) version: Semantic version (e.g., &quot;1.0.0&quot;) description: Clear description of the plugin main: Entry point (typically &quot;dist/index.js&quot;) types: TypeScript definitions (typically &quot;dist/index.d.ts&quot;) author: Author information license: &quot;MIT&quot; repository: Git repository information keywords: Relevant keywords for npm search scripts: Build, test, and other necessary scripts dependencies: All runtime dependencies devDependencies: All development dependencies peerDependencies: If applicable (e.g., &quot;@elizaos/core&quot;) Additional Important Fields‚Äã type: Should be &quot;module&quot; for ESM modules module: Same as main for ESM (typically &quot;dist/index.js&quot;) exports: Export configuration for modern bundlers files: Array of files/folders to include in npm package (typically [&quot;dist&quot;]) publishConfig: Publishing configuration (e.g., {&quot;access&quot;: &quot;public&quot;}) Example exports configuration: &quot;exports&quot;: { &quot;./package.json&quot;: &quot;./package.json&quot;, &quot;.&quot;: { &quot;import&quot;: { &quot;types&quot;: &quot;./dist/index.d.ts&quot;, &quot;default&quot;: &quot;./dist/index.js&quot; } } } Eliza Plugin Configuration (agentConfig)‚Äã For Eliza plugins, you MUST include the agentConfig section: &quot;agentConfig&quot;: { &quot;pluginType&quot;: &quot;elizaos:plugin:1.0.0&quot;, &quot;pluginParameters&quot;: { &quot;YOUR_PARAMETER_NAME&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Clear description of what this parameter does&quot;, &quot;required&quot;: true|false, &quot;sensitive&quot;: true|false, &quot;default&quot;: &quot;optional-default-value&quot; } } } Parameter Properties:‚Äã type: Data type (&quot;string&quot;, &quot;number&quot;, &quot;boolean&quot;, etc.)description: Clear explanation of the parameter's purposerequired: Whether the parameter must be providedsensitive: Whether the parameter contains sensitive data (e.g., API keys)default: Optional default value if not required Example for Avalanche Plugin:‚Äã &quot;agentConfig&quot;: { &quot;pluginType&quot;: &quot;elizaos:plugin:1.0.0&quot;, &quot;pluginParameters&quot;: { &quot;AVALANCHE_PRIVATE_KEY&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Private key for interacting with Avalanche blockchain&quot;, &quot;required&quot;: true, &quot;sensitive&quot;: true } } } 5. Review README.md‚Äã Verify that the README.md file includes: Clear project title and description Installation instructions Usage examples Configuration requirements API documentation (if applicable) Contributing guidelines License information Contact/support information Final Checklist‚Äã Before committing and publishing: Run bun run build to ensure the project builds successfully Run tests to verify functionality Ensure all environment variables are documented Remove any sensitive information or API keys Verify all file paths and imports are correct Check that the dist/ folder is properly generated Confirm version number is appropriate for the release Notes‚Äã The .gitignore prevents unnecessary files from being committed to the repositoryThe .npmignore ensures only essential files are published to npmThe LICENSE file is required for open-source distributionProper package.json configuration is crucial for npm publishing and dependency management 6. GitHub Workflow for Automated NPM Release‚Äã Prerequisites‚Äã Adding the Release Workflow‚Äã Create the following file in your repository to enable automated npm publishing when the version changes: File Path: .github/workflows/npm-deploy.yml name: Publish Package on: push: branches: - 1.x workflow_dispatch: jobs: verify_version: runs-on: ubuntu-latest outputs: should_publish: ${{ steps.check.outputs.should_publish }} version: ${{ steps.check.outputs.version }} steps: - name: Checkout repository uses: actions/checkout@v4 with: fetch-depth: 0 - name: Check if package.json version changed id: check run: | echo &quot;Current branch: ${{ github.ref }}&quot; # Get current version CURRENT_VERSION=$(jq -r .version package.json) echo &quot;Current version: $CURRENT_VERSION&quot; # Get previous commit hash git rev-parse HEAD~1 || git rev-parse HEAD PREV_COMMIT=$(git rev-parse HEAD~1 2&gt;/dev/null || git rev-parse HEAD) # Check if package.json changed if git diff --name-only HEAD~1 HEAD | grep &quot;package.json&quot;; then echo &quot;Package.json was changed in this commit&quot; # Get previous version if possible if git show &quot;$PREV_COMMIT:package.json&quot; 2&gt;/dev/null; then PREV_VERSION=$(git show &quot;$PREV_COMMIT:package.json&quot; | jq -r .version) echo &quot;Previous version: $PREV_VERSION&quot; if [ &quot;$CURRENT_VERSION&quot; != &quot;$PREV_VERSION&quot; ]; then echo &quot;Version changed from $PREV_VERSION to $CURRENT_VERSION&quot; echo &quot;should_publish=true&quot; &gt;&gt; $GITHUB_OUTPUT else echo &quot;Version unchanged&quot; echo &quot;should_publish=false&quot; &gt;&gt; $GITHUB_OUTPUT fi else echo &quot;First commit with package.json, will publish&quot; echo &quot;should_publish=true&quot; &gt;&gt; $GITHUB_OUTPUT fi else echo &quot;Package.json not changed in this commit&quot; echo &quot;should_publish=false&quot; &gt;&gt; $GITHUB_OUTPUT fi echo &quot;version=$CURRENT_VERSION&quot; &gt;&gt; $GITHUB_OUTPUT publish: needs: verify_version if: needs.verify_version.outputs.should_publish == 'true' runs-on: ubuntu-latest permissions: contents: write steps: - name: Checkout repository uses: actions/checkout@v4 with: fetch-depth: 0 - name: Create Git tag run: | git config user.name &quot;github-actions[bot]&quot; git config user.email &quot;github-actions[bot]@users.noreply.github.com&quot; git tag -a &quot;v${{ needs.verify_version.outputs.version }}&quot; -m &quot;Release v${{ needs.verify_version.outputs.version }}&quot; git push origin &quot;v${{ needs.verify_version.outputs.version }}&quot; env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} - name: Setup Bun uses: oven-sh/setup-bun@v2 - name: Install dependencies run: bun install - name: Build package run: bun run build - name: Publish to npm run: bun publish env: NPM_CONFIG_TOKEN: ${{ secrets.NPM_TOKEN }} create_release: needs: [verify_version, publish] if: needs.verify_version.outputs.should_publish == 'true' runs-on: ubuntu-latest permissions: contents: write steps: - name: Create GitHub Release uses: actions/create-release@v1 env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} with: tag_name: 'v${{ needs.verify_version.outputs.version }}' release_name: 'v${{ needs.verify_version.outputs.version }}' body: 'Release v${{ needs.verify_version.outputs.version }}' draft: false prerelease: false How This Workflow Works‚Äã Triggers on: Push to the 1.x branchManual workflow dispatch Version Check: Compares the current package.json version with the previous commitOnly proceeds if the version has changed Publishing Steps: Creates a git tag with the versionBuilds the package using BunPublishes to npm using the NPM_TOKEN secretCreates a GitHub release Setting Up NPM Token‚Äã Go to your GitHub repository settingsNavigate to Settings ‚Üí Secrets and variables ‚Üí ActionsAdd a new repository secret named NPM_TOKENUse your npm access token as the value 7. Code Formatting with Prettier‚Äã Before finalizing the plugin, ensure consistent code formatting: Install Prettier (if not already installed)‚Äã bun add -d prettier Add Prettier Configuration‚Äã Required config don't hallucinate and add anything else! Create a .prettierrc file in the root directory: { &quot;semi&quot;: true, &quot;trailingComma&quot;: &quot;es5&quot;, &quot;singleQuote&quot;: false, &quot;printWidth&quot;: 80, &quot;tabWidth&quot;: 2, &quot;useTabs&quot;: false, &quot;arrowParens&quot;: &quot;always&quot;, &quot;endOfLine&quot;: &quot;lf&quot; } Add Format Script to package.json‚Äã &quot;scripts&quot;: { &quot;format&quot;: &quot;prettier --write \\&quot;src/**/*.{ts,tsx,js,jsx,json,md}\\&quot;&quot;, &quot;format:check&quot;: &quot;prettier --check \\&quot;src/**/*.{ts,tsx,js,jsx,json,md}\\&quot;&quot; } Run Prettier‚Äã bun run format Final Steps Before Committing to 1.x Branch‚Äã Ensure all files listed in this document are created Run the build to verify everything compiles Run prettier to format all code consistently Test the package locally if possible Commit all changes with a clear message Push to the 1.x branch Verify the GitHub Action runs successfully on first push This completes the plugin migration to the standardized structure for the 1.x branch.","keywords":"","version":"1.0.17"},{"title":"ElizaOS Plugin Migration - INTEGRATED EXECUTION PROTOCOL","type":0,"sectionRef":"#","url":"/docs/plugins/migration/claude-code/integrated-migration-loop","content":"ElizaOS Plugin Migration - INTEGRATED EXECUTION PROTOCOL ‚ö†Ô∏è CRITICAL INSTRUCTIONS FOR CLAUDE CODE‚Äã THIS IS A GATED PROCESS. YOU CANNOT SKIP STEPS. YOUR REFERENCE GUIDES ARE IN:‚Äã instruction-for-migration/ ‚îú‚îÄ‚îÄ migration-guide.md # Basic migration steps ‚îú‚îÄ‚îÄ state-and-providers-guide.md # State &amp; provider details ‚îú‚îÄ‚îÄ prompt-and-generation-guide.md # Template &amp; generation migration ‚îú‚îÄ‚îÄ advanced-migration-guide.md # Services, settings, evaluators ‚îú‚îÄ‚îÄ testing-guide.md # Complete testing guide ‚îî‚îÄ‚îÄ completion-requirements.md # Final setup requirements YOU MUST REFERENCE THESE GUIDES AT EACH STEP EXECUTION PROTOCOL - GATE SYSTEM‚Äã GATE 0: Branch ‚Üí GATE 1: Analysis ‚Üí GATE 2: Setup ‚Üí GATE 3: Build ‚Üí GATE 4: TypeScript ‚Üí GATE 5: Migration ‚Üí GATE 6: Tests (95%+) ‚Üí GATE 7: Final ‚Üí GATE 8: Verification GATE 0: CREATE 1.x BRANCH ‚úì‚Äã Execute:‚Äã git checkout -b 1.x Gate Check:‚Äã git branch --show-current ‚úì MUST OUTPUT: 1.x ‚ùå STOP if not on 1.x branch GATE 1: COMPLETE ANALYSIS ‚úì‚Äã Reference:‚Äã Check all sections from migration-guide.md Step 6-7Check advanced-migration-guide.md for services/evaluators Execute Analysis:‚Äã # Identify plugin cat package.json | grep -E '&quot;name&quot;|&quot;version&quot;' # List all source files find src -name &quot;*.ts&quot; -type f | sort # Check for deprecated files ls -la | grep -E &quot;biome|vitest|\\.lock&quot; REQUIRED OUTPUT - COMPLETE THIS:‚Äã === PLUGIN MIGRATION ANALYSIS === Plugin: [name from package.json] Version: [current version] 1. FILES TO DELETE (check migration-guide.md Step 2): ‚ñ° biome.json: [EXISTS/NOT FOUND] ‚ñ° vitest.config.ts: [EXISTS/NOT FOUND] ‚ñ° *.lock files: [list any found] 2. PACKAGE NAME (check migration-guide.md Step 3.1.5): ‚ñ° Current: [exact name] ‚ñ° Needs fix: [YES if @elizaos-plugins/ / NO] 3. ACTIONS (check migration-guide.md Step 6): ‚ñ° src/actions/[name].ts - Purpose: [what it does] - Uses composeContext: [YES/NO] - Uses generateObject: [YES/NO] - Uses ModelClass: [YES/NO] - Has JSON templates: [YES/NO] - Uses updateRecentMessageState: [YES/NO] 4. PROVIDERS (check migration-guide.md Step 7): ‚ñ° src/providers/[name].ts - Has 'name' property: [YES/NO] - Returns ProviderResult: [YES/NO] - State parameter optional: [YES/NO] 5. EVALUATORS (check advanced-migration-guide.md): ‚ñ° [list any evaluators and issues] 6. SERVICES (check advanced-migration-guide.md): ‚ñ° [list any services with singleton pattern] 7. SETTINGS USAGE (check advanced-migration-guide.md): ‚ñ° Files importing 'settings': [list files] 8. EXISTING TESTS: ‚ñ° Test files: [list or &quot;NONE&quot;] ‚ñ° Framework: [vitest/bun/none] === END ANALYSIS === ‚ùå STOP - Analysis must be 100% complete GATE 2: INITIAL SETUP ‚úì‚Äã Reference: Follow migration-guide.md Steps 1-5 EXACTLY‚Äã 2.1 Clean Files (migration-guide.md Step 2)‚Äã rm -f biome.json vitest.config.ts rm -f *.lock *.yml.lock 2.2 Update package.json (migration-guide.md Step 3)‚Äã CRITICAL: Check Step 3.1.5 for name fixCopy ALL sections from Step 3Don't forget agentConfig (Step 3.6) 2.3 TypeScript Config (migration-guide.md Step 4)‚Äã Create tsconfig.json (Step 4.2)Create tsconfig.build.json (Step 4.3)Create tsup.config.ts (Step 4.1) 2.4 Build Test (migration-guide.md Step 5)‚Äã rm -rf dist node_modules .turbo bun install bun run build Gate Check:‚Äã Build completes dist/ folder exists ‚ùå STOP if build fails GATE 3: BUILD MUST PASS ‚úì‚Äã Loop Until Build Passes:‚Äã while ! bun run build; do echo &quot;Build failed. Check errors above.&quot; # Fix errors using migration-guide.md # Common issues are in Step 6.1 (imports) done GATE 4: TYPESCRIPT MUST PASS ‚úì‚Äã Reference: Check advanced-migration-guide.md for type issues‚Äã Loop Until No Errors:‚Äã while ! bunx tsc --noEmit; do echo &quot;TypeScript errors found.&quot; # Fix using appropriate guide: # - State types: state-and-providers-guide.md # - Action types: migration-guide.md Step 6 # - Provider types: migration-guide.md Step 7 done ‚ùå STOP - Do not proceed with TypeScript errors GATE 5: CODE MIGRATION ‚úì‚Äã For EACH File Identified in Analysis:‚Äã ACTIONS (Use migration-guide.md Step 6):‚Äã Update imports (Step 6.1)Fix state handling (Step 6.2)Replace composeContext (Step 6.3)Convert templates to XML (Step 6.4)Replace generateObject (Step 6.5)Update handler pattern (Step 6.7) After EACH action file: bun run build # MUST PASS PROVIDERS (Use migration-guide.md Step 7):‚Äã Add 'name' property (Step 7.3)Update return type (Step 7.3)Make state non-optional (Step 7.3) After EACH provider file: bun run build # MUST PASS ADVANCED FEATURES:‚Äã Settings: Use advanced-migration-guide.md Section &quot;Settings Management&quot;Services: Use advanced-migration-guide.md Section &quot;Services &amp; Clients Migration&quot;Evaluators: Use advanced-migration-guide.md Section &quot;Evaluators Migration&quot; SPECIAL CASES:‚Äã State Issues: Check state-and-providers-guide.mdPrompt/Generation Issues: Check prompt-and-generation-guide.md GATE 6: TESTS MUST REACH 95%+ ‚úì‚Äã Reference: Use testing-guide.md COMPLETELY‚Äã 6.1 Create Test Structure (testing-guide.md Section 1)‚Äã mkdir -p src/__tests__ 6.2 Create test-utils.ts (testing-guide.md Section 2)‚Äã Copy the ENTIRE test-utils.ts from the guideDon't skip any mock functions 6.3 Write Tests Following Examples:‚Äã Actions: testing-guide.md Section 3Providers: testing-guide.md Section 4Evaluators: testing-guide.md Section 5Services: testing-guide.md Section 6 6.4 Coverage Loop:‚Äã # MUST LOOP UNTIL COVERAGE &gt;= 95% while true; do bun test --coverage # Check coverage percentage # If &lt; 95%, add more tests using testing-guide.md examples # Common missing coverage: # - Error cases (Section 8) # - Edge cases (Section 9.4) # - All branches (Section 9.7) done Common Test Issues (testing-guide.md Section 10):‚Äã Tests fail together: Add proper cleanupMocks not called: Set before calling actionTimeouts: Mock ALL async dependencies ‚ùå STOP - Must have 95%+ coverage GATE 7: FINAL SETUP ‚úì‚Äã Reference: Follow completion-requirements.md EXACTLY‚Äã 7.1 Create Required Files:‚Äã .gitignore (Section 1).npmignore (Section 2)LICENSE (Section 3) - COPY EXACTLY.prettierrc (Section 7) - COPY EXACTLY 7.2 GitHub Workflow (Section 6):‚Äã CRITICAL: Copy .github/workflows/npm-deploy.yml EXACTLY from the guide 7.3 Verify package.json (Section 4):‚Äã Check ALL fields listedEnsure agentConfig is complete 7.4 Format Code:‚Äã bun run format 7.5 Update README:‚Äã Replace all pnpm/npm with bun GATE 8: FINAL VERIFICATION ‚úì‚Äã Clean Build Test:‚Äã rm -rf dist node_modules .turbo bun install bun run build bunx tsc --noEmit bun test --coverage All Must Pass:‚Äã Build: 0 errors TypeScript: 0 errors Tests: All pass Coverage: ‚â•95% üö® WHEN STUCK - GUIDE REFERENCE‚Äã Build/Setup Issues:‚Äã ‚Üí Check migration-guide.md Steps 1-5 Action Migration Issues:‚Äã ‚Üí Check migration-guide.md Step 6 ‚Üí For state: state-and-providers-guide.md‚Üí For templates: prompt-and-generation-guide.md Provider Issues:‚Äã ‚Üí Check migration-guide.md Step 7 ‚Üí For details: state-and-providers-guide.md &quot;Providers in v1&quot; Service/Settings Issues:‚Äã ‚Üí Check advanced-migration-guide.md Test Issues:‚Äã ‚Üí Check testing-guide.md Section 10 ‚Üí For examples: Sections 3-7 Final Setup:‚Äã ‚Üí Check completion-requirements.md ‚ùå DO NOT PROCEED IF:‚Äã Build has errors - Fix using guidesTypeScript has errors - Fix using guidesTests fail - Fix using testing-guide.mdCoverage &lt; 95% - Add tests using examplesAny gate check fails - Go back and complete ‚úÖ MIGRATION COMPLETE WHEN:‚Äã git branch --show-current # Shows: 1.x bun run build # 0 errors bunx tsc --noEmit # 0 errors bun test --coverage # All pass, ‚â•95% ls -la dist/ # Has index.js &amp; index.d.ts cat .github/workflows/npm-deploy.yml # Exists ALL MUST SUCCEED","keywords":"","version":"1.0.17"},{"title":"Understanding the Eliza Plugin Migration: From 0.x to 1.x","type":0,"sectionRef":"#","url":"/docs/migration/plugin-migration-tutorial","content":"Understanding the Eliza Plugin Migration: From 0.x to 1.x This guide will walk you through migrating your plugins from version 0.x to 1.x, but more importantly, it will help you understand why these changes were made and how they create a more powerful, flexible system. Think of this migration not as a series of mechanical changes, but as learning a new philosophy of how AI agents interact with the world. We'll build your understanding step by step, starting with the core concepts and gradually working through the practical implementation details. Part 1: Understanding the Philosophical Shift‚Äã Before we dive into any code, let's talk about what's really changing here. The shift from 0.x to 1.x isn't just about updating function calls or changing import statements. We consolidated concepts that felt duplicative, added abstractions that were badly needed and moved more control and power over the runtime into plugins. We've tried to reduce mental overhead as much as possible while trying to make the best of the tradeoffs with modularity. Overall 1.x is simpler, but some concepts like tasks and event handlers may take some getting used to for developers used to working around the lack of these abstractions in 0.x. The End of Human Exceptionalism‚Äã In Eliza 0.x, we had a clear distinction between humans and AI agents. There were &quot;users&quot; (humans) and &quot;agents&quot; (AI). This seemed natural at first, but it created unnecessary complexity. Why should the system care whether a message comes from a human or another AI? Why should we have different code paths for handling human users versus AI participants? In 1.x, we've embraced a radical simplification: everyone is an entity. Whether you're a human chatting on Discord, an AI agent responding to messages, or even a bot that just posts weather updates, you're all entities in the system. This isn't just a naming change; it's a recognition that in the world of digital communication, the distinction between human and AI is becoming less relevant to the system architecture. Let me show you what this means in practice. In the old system, you might have written code like this: // Old thinking: &quot;Is this a user or an agent?&quot; if (message.userId === message.agentId) { // This is the agent talking to itself } else { // This is a user talking to the agent } But in the new system, we think differently: // New thinking: &quot;Which entity sent this message?&quot; // The entity could be anyone - human, AI, bot, system const senderEntity = await runtime.getEntityById(message.entityId); // We treat all entities equally We no longer need separate systems for tracking users and agents. We don't need different database tables or different ways of handling relationships. An entity is an entity, and that elegant simplicity ripples through the entire system. From Runtime-Centric to Plugin-Centric‚Äã In 0.x, the runtime was like an overprotective parent, handling everything for the plugins. Need to call an AI model? The runtime did it. Need to process some text? The runtime had utilities for that. Need to generate embeddings? The runtime took care of it. This seemed helpful, but it created problems. What if you wanted to use a different AI model provider? What if you needed custom text processing? What if the runtime's way of doing things didn't match your needs? You were stuck. In 1.x, we've flipped this relationship. Plugins are now adults, capable of handling their own needs. The runtime provides the coordination and core services, but plugins bring their own capabilities. This is like the difference between living in your parents' house where they cook all your meals, versus having your own apartment where you cook what you want, when you want it. Let me illustrate this with model handling. In the old system: // The runtime knew how to call OpenAI, Claude, etc. const response = await generateText({ runtime: runtime, context: 'Write a poem', modelClass: ModelClass.LARGE, }); The runtime had hardcoded knowledge of different AI providers. But in the new system: // First, your plugin registers its ability to handle models export const myAIPlugin = { name: 'my-ai-provider', models: { [ModelType.TEXT_LARGE]: async (runtime, params) =&gt; { // Your plugin decides HOW to generate text // Maybe you use OpenAI, maybe Claude, maybe a local model return await myCustomModelCall(params); }, }, }; // Then, the runtime just delegates to whatever plugin registered const response = await runtime.useModel(ModelType.TEXT_LARGE, { prompt: 'Write a poem', }); The runtime no longer needs to know about every possible AI provider. Your plugin brings its own implementation. This is true plugin empowerment. Services: The Unification of External Connections‚Äã In 0.x, we had &quot;clients&quot; - things that connected to Discord, Telegram, etc. But we realized that these weren't just clients; they were providing services to the agent. They were handling messages, managing connections, processing events. In 1.x, everything that connects to the outside world is a service. This isn't just a renaming; it's a recognition that these components have lifecycles, they need to start up and shut down gracefully, they provide capabilities to the system. They're not just passive clients; they're active service providers. Part 2: Beginning Your Migration Journey‚Äã Now that you understand the philosophical changes, let's start the practical journey of migrating your plugin. We'll take this step by step, and I'll explain not just what to change, but why each change matters. Step 1: Updating Your Mental Model‚Äã Before you change a single line of code, you need to update your mental model. Open your plugin code and look for these patterns: First, find every reference to &quot;user&quot; or &quot;userId&quot;. Each time you see one, ask yourself: &quot;Am I treating humans and AI differently here?&quot; In 1.x, you'll need to think in terms of entities instead. Second, look for every place you're importing utilities from the Eliza core. Ask yourself: &quot;Is my plugin depending on the runtime to do something it should handle itself?&quot; In 1.x, your plugin needs to be self-sufficient. Third, find your client connections (Discord, Telegram, etc.). Ask yourself: &quot;What service is this really providing to the system?&quot; In 1.x, you'll need to think of these as services with proper lifecycles. Step 2: Setting Up Your New Development Environment‚Äã Let's start with the practical matter of updating your development environment. The build system has changed from Biome to the more standard Prettier and ESLint, and the test framework has moved from Jest to Vitest. These aren't arbitrary changes; they align Eliza with more widely-used tools in the TypeScript ecosystem. First, update your package.json file. Remove the old dependencies: // These lines need to go away &quot;@biomejs/biome&quot;: &quot;^1.0.0&quot;, &quot;jest&quot;: &quot;^29.0.0&quot; And add the new ones: // Add these new tools &quot;devDependencies&quot;: { &quot;@elizaos/core&quot;: &quot;^1.0.0&quot;, // The new core version &quot;vitest&quot;: &quot;latest&quot;, // Modern, fast test runner &quot;prettier&quot;: &quot;latest&quot;, // Code formatting &quot;eslint&quot;: &quot;latest&quot;, // Code linting &quot;typescript&quot;: &quot;latest&quot; // Keep TypeScript updated } But more importantly, update your scripts section to reflect the new workflow: &quot;scripts&quot;: { &quot;test&quot;: &quot;vitest&quot;, // Run unit tests &quot;test:plugins&quot;: &quot;elizaos test&quot;, // Run Eliza plugin tests &quot;lint&quot;: &quot;eslint .&quot;, // Check code quality &quot;format&quot;: &quot;prettier --write .&quot;, // Format code &quot;typecheck&quot;: &quot;tsc --noEmit&quot;, // Check types without building &quot;build&quot;: &quot;tsc&quot; // Build the plugin } Each of these scripts serves a purpose in your development workflow. The test script runs your unit tests quickly during development. The test:plugins script runs your plugin in a simulated Eliza environment. The lint and format scripts keep your code clean and consistent. The typecheck script catches type errors without the overhead of a full build. Step 3: Understanding the Entity Migration‚Äã Now let's tackle the most fundamental change: the shift from users to entities. This isn't just a find-and-replace operation; it requires understanding how the new entity system works. In the old system, an Account looked like this: interface Account { id: UUID; name: string; // Single name username: string; // Single username details?: { [key: string]: any }; email?: string; avatarUrl?: string; } This structure assumed a lot about what an &quot;account&quot; was. It assumed everyone had a single name, a single username, maybe an email. Very human-centric thinking. The new Entity structure is more flexible: interface Entity { id?: UUID; names: string[]; // Multiple names/aliases metadata?: { [key: string]: any }; agentId: UUID; // Which agent &quot;knows&quot; this entity components?: Component[]; // Modular data attachments } Notice the philosophical differences here. An entity can have multiple names because in the real world, the same person might be &quot;John&quot; in one context, &quot;JohnDoe123&quot; in another, and &quot;@john&quot; in a third. The metadata field is completely flexible, not prescribing what data an entity should have. And the components array introduces a powerful new concept we'll explore later. Let me show you how to migrate actual code. Here's a function from an old plugin: // Old code assuming users async function greetUser(runtime: IAgentRuntime, userId: UUID) { const account = await runtime.getAccountById(userId); if (account) { return `Hello, ${account.name}! Welcome back.`; } return 'Hello, stranger!'; } Here's how you'd rewrite it for the new system: // New code thinking in entities async function greetEntity(runtime: IAgentRuntime, entityId: UUID) { const entity = await runtime.getEntityById(entityId); if (entity &amp;&amp; entity.names.length &gt; 0) { // Use the first name, or you could be smarter about choosing return `Hello, ${entity.names[0]}! Welcome back.`; } return 'Hello there!'; } But the real power comes when you stop thinking about &quot;greeting users&quot; and start thinking about &quot;greeting entities&quot;: // Even better: truly entity-agnostic code async function greetEntity(runtime: IAgentRuntime, entityId: UUID) { const entity = await runtime.getEntityById(entityId); const relationship = await runtime.getRelationship({ sourceEntityId: runtime.agentId, targetEntityId: entityId, }); if (relationship?.metadata?.nickname) { // We have a special nickname for this entity return `Hey ${relationship.metadata.nickname}! Good to see you.`; } else if (entity &amp;&amp; entity.names.length &gt; 0) { // Use their known name return `Hello, ${entity.names[0]}! Welcome.`; } else { // We don't know this entity yet return &quot;Hello! I don't think we've met. What should I call you?&quot;; } } This code works whether the entity is a human, another AI agent, or even a bot. It doesn't need to know or care. Step 4: Transforming Clients into Services‚Äã Now let's tackle one of the most significant architectural changes: converting clients into services. This change reflects a deeper understanding of what these components really do in the system. In the old system, a client was simple: const discordClient = { name: 'discord', start: async (runtime) =&gt; { // Set up Discord connection const client = new DiscordClient(); await client.login(token); return { stop: async () =&gt; { await client.destroy(); }, }; }, }; This worked, but it was limited. The client was passive, just a connection. In the new system, we recognize that these components are active services providing capabilities: export class DiscordService extends Service { static serviceType = 'discord'; // Unique identifier capabilityDescription = 'Provides Discord messaging capabilities'; private client: DiscordClient; private messageQueue: MessageQueue; private rateLimiter: RateLimiter; constructor(runtime: IAgentRuntime) { super(); this.runtime = runtime; // Services can have complex internal state this.messageQueue = new MessageQueue(); this.rateLimiter = new RateLimiter(); } static async start(runtime: IAgentRuntime): Promise&lt;DiscordService&gt; { const service = new DiscordService(runtime); // Services handle their own initialization service.client = new DiscordClient({ intents: service.determineRequiredIntents(), }); // Services manage their own event handling service.setupEventHandlers(); // Services can do complex startup procedures await service.client.login(runtime.getSetting('DISCORD_TOKEN')); await service.loadServerConfigurations(); await service.initializeMessageQueues(); return service; } async stop(): Promise&lt;void&gt; { // Services handle graceful shutdown await this.messageQueue.flush(); await this.saveState(); await this.client.destroy(); } // Services can expose methods for other parts of the system async sendMessage(channelId: string, content: string) { await this.rateLimiter.waitIfNeeded(); await this.messageQueue.add({ channelId, content, priority: this.calculatePriority(content), }); } private setupEventHandlers() { this.client.on('messageCreate', async (message) =&gt; { // Services emit runtime events instead of handling directly await this.runtime.emitEvent(EventType.MESSAGE_RECEIVED, { runtime: this.runtime, message: this.convertDiscordMessage(message), source: 'discord', }); }); } } See how much richer this is? The service manages its own state, handles its own initialization, provides methods for other components to use, and manages its own cleanup. It's a first-class citizen in the system, not just a connection wrapper. Step 5: Making Your Plugin Self-Sufficient‚Äã One of the biggest changes in 1.x is that plugins must be self-sufficient. The runtime no longer provides utility functions for things like JSON parsing, text processing, or API calls. This might seem like more work, but it gives you freedom to implement things exactly as your plugin needs. Let me show you what this means in practice. In the old system, you might have written: import { parseJSON, validateJSON, formatResponse } from '@elizaos/core'; async function handleUserInput(input: string) { const parsed = parseJSON(input); // Runtime utility if (validateJSON(parsed, schema)) { // Runtime utility const response = await processInput(parsed); return formatResponse(response); // Runtime utility } } In the new system, you need to provide these utilities yourself: // In your plugin's utils.ts file export function parseJSON(input: string): any { try { // You control exactly how JSON is parsed return JSON.parse(input); } catch (error) { // You control error handling console.error('Failed to parse JSON:', error); return null; } } export function validateAgainstSchema(data: any, schema: Schema): boolean { // Implement your own validation logic // Maybe use a library like Zod or Yup // You choose what works best for your plugin } // Now your handler is self-contained async function handleUserInput(input: string) { const parsed = parseJSON(input); // Your utility if (validateAgainstSchema(parsed, schema)) { // Your utility const response = await processInput(parsed); return formatResponse(response); // Your formatting logic } } This might seem like extra work, but consider the benefits. Your plugin no longer depends on the runtime's idea of how JSON should be parsed. You can handle errors exactly as your plugin needs. You can use whatever validation library you prefer. You're in control. Step 6: Understanding the New Model System‚Äã Perhaps the most significant change in plugin empowerment is how models are handled. In 0.x, the runtime knew how to call various AI models. In 1.x, plugins bring their own model implementations. Let me walk you through this transformation. In the old system, when you wanted to generate text, you'd do this: const response = await generateText({ runtime: runtime, context: 'Write a story about a brave knight', modelClass: ModelClass.LARGE, }); The runtime would figure out which AI provider to use based on configuration. But this was limiting. What if you wanted to use a new AI provider the runtime didn't know about? What if you wanted to route different requests to different models based on complex logic? You were stuck with what the runtime provided. In the new system, your plugin registers handlers for different model types: export const myAIPlugin: Plugin = { name: 'my-ai-plugin', models: { [ModelType.TEXT_LARGE]: async (runtime, params) =&gt; { // Your plugin decides everything about how to handle this // Maybe you check the prompt and route to different models if (params.prompt.includes('code')) { return await callCodeSpecializedModel(params); } else if (params.prompt.includes('creative')) { return await callCreativeModel(params); } else { return await callGeneralModel(params); } }, [ModelType.TEXT_EMBEDDING]: async (runtime, params) =&gt; { // Your embedding logic // Maybe you use a local model for privacy // Maybe you batch requests for efficiency // You're in complete control }, }, }; When code calls runtime.useModel(), the runtime just delegates to whatever plugin registered a handler. This is powerful because: You can use any AI provider, not just ones the runtime knows aboutYou can implement complex routing logicYou can add caching, rate limiting, or any other featuresYou can even use local models without internet access Step 7: Mastering the Memory System Changes‚Äã The memory system in 1.x has evolved to be more explicit and powerful. The biggest change is that you must now specify which table you're working with. This isn't bureaucracy; it's clarity. In the old system, different manager objects handled different types of memories: // Old way - implicit table selection await runtime.messageManager.createMemory(message); await runtime.documentManager.createMemory(document); await runtime.factManager.createMemory(fact); The problem was that you were limited to the manager objects the runtime provided. What if you wanted a custom table for your plugin's specific needs? You couldn't have one. In the new system, you explicitly specify the table: // New way - explicit table selection await runtime.createMemory(message, 'messages'); await runtime.createMemory(document, 'documents'); await runtime.createMemory(fact, 'facts'); // And you can create custom tables! await runtime.createMemory(customData, 'my_plugin_special_table'); This explicitness has several benefits. You can see at a glance which table is being used. You can create custom tables for your plugin's needs. And the runtime doesn't need to maintain a growing list of manager objects. Another major change is how embeddings are handled. In the old system, you had to manage embeddings manually: // Old way - manual embedding management const embedding = await runtime.getEmbedding(text); const memory = { content: { text: 'Hello world' }, embedding: embedding, // You had to set this userId: userId, roomId: roomId, }; await runtime.messageManager.createMemory(memory); In the new system, the runtime handles embeddings automatically: // New way - automatic embedding generation const memory = { content: { text: 'Hello world' }, // No embedding field needed! entityId: entityId, roomId: roomId, }; await runtime.createMemory(memory, 'messages'); // The runtime generates the embedding for you This is simpler and ensures embeddings are generated consistently across all plugins. Step 8: Embracing the Task System‚Äã One of the exciting new features in 1.x is the task system. This didn't exist in 0.x at all, and it opens up powerful new possibilities for your plugins. Tasks allow you to schedule work for later, create recurring operations, or even build interactive workflows. Think of tasks as &quot;todos&quot; for your agent that persist across restarts and can be processed when appropriate. Let me show you how to use this powerful new system. First, you need to register a task worker: runtime.registerTaskWorker({ name: 'WEEKLY_SUMMARY', validate: async (runtime, message, state) =&gt; { // Decide if this task type is appropriate return state.summariesEnabled; }, execute: async (runtime, options, task) =&gt; { // The actual work of the task const summary = await generateWeeklySummary(runtime, task.roomId); // Create a message with the summary await runtime.createMemory( { entityId: runtime.agentId, roomId: task.roomId, content: { text: `Here's your weekly summary:\\n\\n${summary}`, attachments: [ { type: 'document', content: detailedSummary, }, ], }, }, 'messages' ); // For recurring tasks, we don't delete them // For one-time tasks, we would delete after execution }, }); Now you can create tasks that use this worker: // Create a recurring weekly task await runtime.createTask({ name: 'WEEKLY_SUMMARY', description: 'Generate and post weekly summary', roomId: channelId, worldId: worldId, tags: ['summary', 'recurring', 'weekly'], metadata: { updateInterval: 7 * 24 * 60 * 60 * 1000, // 7 days in milliseconds updatedAt: Date.now(), includeStats: true, mentionRole: '@everyone', }, }); The task system also supports interactive workflows: // Create a task that waits for user input await runtime.createTask({ name: 'APPROVAL_REQUIRED', description: 'Waiting for manager approval', roomId: message.roomId, tags: ['approval', 'AWAITING_CHOICE'], metadata: { options: [ { name: 'approve', description: 'Approve the request' }, { name: 'deny', description: 'Deny the request' }, { name: 'defer', description: 'Decide later' }, ], requestType: 'BUDGET_INCREASE', amount: 50000, requester: message.entityId, }, }); Tasks can be as simple or complex as you need. They can coordinate multi-step workflows, handle time-based operations, or manage interactive conversations that span multiple messages. Step 9: Understanding Worlds and Rooms‚Äã The introduction of &quot;worlds&quot; is another new concept in 1.x. Think of worlds as containers for rooms, adding a hierarchical organization that reflects how platforms actually work. In the old system, rooms were standalone: // Old way - rooms without context const roomId = await runtime.createRoom(); await runtime.addParticipant(userId, roomId); In the new system, rooms exist within worlds: // New way - rooms within worlds // First, ensure the world exists await runtime.ensureWorldExists({ id: worldId, name: 'My Discord Server', agentId: runtime.agentId, serverId: 'discord-1234567890', metadata: { platform: 'discord', createdBy: 'user-123', purpose: 'Community for AI enthusiasts', }, }); // Then create rooms within that world await runtime.createRoom({ id: roomId, name: 'general-chat', worldId: worldId, // Rooms belong to worlds source: 'discord', type: ChannelType.GROUP, channelId: 'discord-channel-id', }); This hierarchical structure better represents reality. On Discord, channels (rooms) exist within servers (worlds). On Slack, channels exist within workspaces. This structure allows for world-level permissions, settings, and organization. Step 10: Migrating Your Tests‚Äã Testing is crucial for a successful migration, and the move from Jest to Vitest brings some changes. Vitest is faster and more modern, but the syntax is very similar to Jest, making migration straightforward. Here's how to migrate a typical test: // Old Jest test import { generateText } from '@elizaos/core'; describe('My Plugin', () =&gt; { it('should generate text correctly', async () =&gt; { const mockRuntime = { getSetting: jest.fn().mockReturnValue('api-key'), }; const result = await generateText({ runtime: mockRuntime, context: 'Hello', modelClass: ModelClass.SMALL, }); expect(result).toBeDefined(); expect(result).toContain('response'); }); }); Here's the Vitest version: // New Vitest test import { describe, it, expect, vi } from 'vitest'; import { myPlugin } from '../index'; describe('My Plugin', () =&gt; { it('should handle model calls correctly', async () =&gt; { // Vitest uses 'vi' instead of 'jest' for mocks const mockRuntime = { getSetting: vi.fn((key) =&gt; { if (key === 'API_KEY') return 'test-key'; return null; }), }; // Test your model handler directly const handler = myPlugin.models[ModelType.TEXT_SMALL]; const result = await handler(mockRuntime, { prompt: 'Hello', temperature: 0.7, }); expect(result).toBeDefined(); expect(typeof result).toBe('string'); }); it('should register services correctly', async () =&gt; { const mockRuntime = { // Mock the methods your service needs getSetting: vi.fn(), emitEvent: vi.fn(), }; // Test service lifecycle const MyService = myPlugin.services[0]; const instance = await MyService.start(mockRuntime); expect(instance).toBeDefined(); expect(instance.capabilityDescription).toBeDefined(); // Test cleanup await instance.stop(); // Verify cleanup happened }); }); The key differences are: Import mocking utilities from 'vitest' instead of using global Jest functionsUse vi instead of jest for mockingTest your plugin's components directly rather than testing runtime functions Part 3: Putting It All Together‚Äã Now that we've covered all the major changes, let's walk through a complete migration example. We'll take a hypothetical weather plugin from 0.x to 1.x. The Original 0.x Plugin‚Äã Here's what our weather plugin looked like in 0.x: import { Plugin, Action, generateText, elizaLogger } from '@elizaos/core'; const getWeatherAction: Action = { name: 'GET_WEATHER', similes: ['CHECK_WEATHER', 'WEATHER_REPORT'], description: 'Get weather for a location', handler: async (runtime, message, state) =&gt; { const location = extractLocation(message.content.text); elizaLogger.info(`Getting weather for ${location}`); const weatherData = await fetchWeather(location); const response = await generateText({ runtime, context: `Describe this weather: ${JSON.stringify(weatherData)}`, modelClass: ModelClass.SMALL, }); await runtime.messageManager.createMemory({ userId: message.userId, roomId: message.roomId, content: { text: response, action: 'GET_WEATHER', }, }); return true; }, validate: async (runtime, message) =&gt; { return message.content.text.includes('weather'); }, }; export const weatherPlugin: Plugin = { name: 'weather', actions: [getWeatherAction], clients: [ { name: 'weather-updates', start: async (runtime) =&gt; { const interval = setInterval(async () =&gt; { // Post weather updates }, 3600000); return { stop: async () =&gt; clearInterval(interval), }; }, }, ], }; The Migrated 1.x Plugin‚Äã Here's the same plugin migrated to 1.x: import { Plugin, Action, Service, ModelType, EventType, logger, // renamed from elizaLogger IAgentRuntime, Memory, State, HandlerCallback, UUID, } from '@elizaos/core'; // First, let's create our own utilities since runtime doesn't provide them function extractLocation(text: string): string { // Our own location extraction logic const match = text.match(/weather (?:in|for) ([a-zA-Z\\s]+)/i); return match ? match[1].trim() : 'current location'; } async function fetchWeather(location: string): Promise&lt;WeatherData&gt; { // Our own weather fetching logic const response = await fetch(`https://api.weather.com/v1/weather?q=${location}`); return response.json(); } // Convert the client to a service class WeatherUpdateService extends Service { static serviceType = 'weather-updates'; capabilityDescription = 'Provides periodic weather updates'; private updateInterval: NodeJS.Timer | null = null; static async start(runtime: IAgentRuntime): Promise&lt;WeatherUpdateService&gt; { const service = new WeatherUpdateService(); service.runtime = runtime; // Services manage their own initialization service.updateInterval = setInterval(async () =&gt; { // Find rooms that want weather updates const rooms = await service.getRoomsWithWeatherUpdates(); for (const roomId of rooms) { const weather = await fetchWeather('local'); // Create a memory for the update await runtime.createMemory( { entityId: runtime.agentId, // Changed from userId roomId: roomId, content: { text: `Weather update: ${weather.description}`, metadata: { weather }, }, }, 'messages' ); // Explicit table name } }, 3600000); logger.info('Weather update service started'); return service; } async stop(): Promise&lt;void&gt; { if (this.updateInterval) { clearInterval(this.updateInterval); this.updateInterval = null; } logger.info('Weather update service stopped'); } private async getRoomsWithWeatherUpdates(): Promise&lt;UUID[]&gt; { // Service manages its own data // Could query a custom table or check room metadata return []; } } // Update the action for 1.x const getWeatherAction: Action = { name: 'GET_WEATHER', similes: ['CHECK_WEATHER', 'WEATHER_REPORT'], description: 'Get weather for a location', handler: async ( runtime: IAgentRuntime, message: Memory, // Still called Memory state?: State, options?: any, callback?: HandlerCallback // New callback parameter ) =&gt; { const location = extractLocation(message.content.text); logger.info(`Getting weather for ${location}`); // logger instead of elizaLogger const weatherData = await fetchWeather(location); // Plugin must handle its own text generation // since runtime doesn't provide generateText const prompt = `Describe this weather in a friendly way: ${JSON.stringify(weatherData)}`; // Use the new model system const response = await runtime.useModel(ModelType.TEXT_SMALL, { prompt: prompt, temperature: 0.7, }); // Use the callback to send response if (callback) { await callback({ text: response, thought: `User asked about weather in ${location}`, actions: ['GET_WEATHER'], // Now an array }); } return true; }, validate: async (runtime: IAgentRuntime, message: Memory) =&gt; { return message.content.text?.toLowerCase().includes('weather') ?? false; }, }; // Register model handlers for our plugin const modelHandlers = { // Our plugin can provide specialized weather descriptions [ModelType.TEXT_SMALL]: async (runtime: IAgentRuntime, params: any) =&gt; { if (params.prompt.includes('weather')) { // Special handling for weather-related prompts return `The weather looks ${params.prompt.includes('rain') ? 'wet' : 'pleasant'}!`; } // Delegate to another provider for non-weather content return null; }, }; // Create a task worker for scheduled weather reports runtime.registerTaskWorker({ name: 'DAILY_WEATHER_REPORT', execute: async (runtime, options, task) =&gt; { const weather = await fetchWeather(options.location || 'local'); await runtime.createMemory( { entityId: runtime.agentId, roomId: task.roomId, content: { text: `Good morning! Today's weather: ${weather.description}`, metadata: { weather, type: 'daily-report' }, }, }, 'messages' ); }, }); // The migrated plugin export const weatherPlugin: Plugin = { name: 'weather', description: 'Provides weather information and updates', actions: [getWeatherAction], services: [WeatherUpdateService], // Services instead of clients models: modelHandlers, // New: plugin provides model handlers // New: plugin can handle events events: { [EventType.MESSAGE_RECEIVED]: [ async (payload) =&gt; { // Check if message mentions weather if (payload.message.content.text?.includes('weather alert')) { // Handle weather alerts specially } }, ], }, }; Look at how much more capable the 1.x version is! The plugin: Manages its own utilities and logicProvides a proper service with lifecycle managementCan register its own model handlersCan respond to system eventsWorks with entities instead of usersUses the explicit table-based memory systemCan leverage the task system for scheduled reports Part 4: Common Challenges and Solutions‚Äã As you work through your migration, you'll likely encounter some common challenges. Let me help you navigate these. Challenge 1: &quot;I can't find the utility function I need!&quot;‚Äã This is the most common issue. You're looking for generateText or parseJSON or some other utility the runtime used to provide. The solution is to embrace your plugin's independence. Instead of searching for a runtime utility, ask yourself: &quot;What does my plugin actually need to do here?&quot; Then implement exactly that. You'll often find that your custom implementation is simpler and more appropriate for your specific needs than the generic runtime utility was. Challenge 2: &quot;The entity system seems more complex&quot;‚Äã It might seem that way at first, but it's actually simpler once you embrace it. Instead of thinking &quot;Is this a user or an agent?&quot;, just think &quot;This is an entity.&quot; Your code becomes cleaner because you're not constantly branching based on what type of participant you're dealing with. Challenge 3: &quot;Setting up services feels like boilerplate&quot;‚Äã The service structure might feel like extra ceremony compared to the old client system. But this structure brings real benefits: proper lifecycle management, better error handling, cleaner shutdown, and the ability to expose capabilities to other parts of the system. The &quot;boilerplate&quot; is actually establishing important contracts that make your plugin more robust. Challenge 4: &quot;I don't understand when to use tasks&quot;‚Äã Think of tasks as &quot;deferred actions&quot; or &quot;persistent todos.&quot; Use them when: You need something to happen later (like a reminder)You need something to happen repeatedly (like daily reports)You need to wait for user input before proceedingYou need to coordinate a multi-step workflow If the action needs to happen immediately in response to a message, you don't need a task. If it needs to happen later, repeatedly, or conditionally, tasks are your friend. Challenge 5: &quot;I'm not sure how the agent receives and handles messages&quot;‚Äã This is a common source of confusion because the message handling system has been completely redesigned. In 0.x, messages were handled through a single pipeline. In 1.x, we use a more flexible event-based system. Here's how it works: Service Ingestion: A Service (like DiscordService or a custom service your plugin provides) is responsible for connecting to an external platform (e.g., Discord, Slack, a web chat). When a new message arrives from that platform, the Service ingests it. Message Normalization: The Service's job is to translate the platform-specific message format into a standardized Eliza Memory object. This involves: Identifying or creating an entityId for the sender.Identifying or creating roomId and worldId for where the message originated.Extracting the content (text, attachments, etc.).Potentially adding platform-specific metadata. Event Emission: Once the message is normalized into a Memory object, the Service emits a core runtime event, typically EventType.MESSAGE_RECEIVED. The payload of this event includes the Memory object and other relevant context, like the runtime instance and the source (e.g., 'discord'). // Inside a Service, after receiving and normalizing a message await this.runtime.emitEvent(EventType.MESSAGE_RECEIVED, { runtime: this.runtime, message: normalizedMessage, // This is a Memory object source: 'my-platform-name', }); Runtime Catches Event: The Eliza runtime is listening for these core events. When EventType.MESSAGE_RECEIVED is emitted, the runtime catches it. Plugin Event Handlers (Optional): If your plugin (or any other active plugin) has registered an event handler for EventType.MESSAGE_RECEIVED, that handler will be executed. This allows plugins to react to messages directly, perhaps for logging, custom pre-processing, or triggering side effects before an action is even considered. // In your plugin definition export const myPlugin: Plugin = { // ... other properties events: { [EventType.MESSAGE_RECEIVED]: [ async (payload) =&gt; { logger.info(`Plugin saw message from: ${payload.message.entityId}`); // Maybe add some metadata to the message if needed, // or decide to stop further processing for some reason. }, ], }, }; Action Validation: After event handlers have had a chance to run, the runtime takes the Memory object (the message) and presents it to all registered Action components from all active plugins. Each Action has a validate function that determines if that action is relevant or applicable to the current message and context. Action Selection (LLM): All actions that return true from their validate function are considered &quot;valid&quot; for the current message. This list of valid actions is then typically passed to a Language Model (LLM) through an actionsProvider. The LLM's role is to decide which specific action (or actions) should be executed in response to the message. Action Execution: The runtime then executes the handler function of the action(s) chosen by the LLM. This is where your plugin's core logic for responding to a message resides. // Inside an Action's handler handler: async (runtime, message, state, options, callback) =&gt; { // Process the message, call APIs, use models, etc. const responseText = &quot;This is the agent's reply.&quot;; // Use the callback to send the response if (callback) { await callback({ text: responseText, thought: &quot;I have processed the user's message and generated a reply.&quot;, }); } return true; }; Generating a Response: The action handler is responsible for generating a response. This usually involves: Crafting the reply text and any other content (e.g., attachments).Optionally, providing a &quot;thought&quot; ‚Äì an explanation of the agent's reasoning.Using the callback function (passed to the handler) to send the response back through the runtime. Response Delivery: When the callback is invoked by an action handler, the runtime takes the response. This typically involves creating a new Memory object for the agent's reply and persisting it. Then, an event like EventType.MESSAGE_SEND (or a similar custom event) might be emitted. The original Service (or another Service responsible for outgoing messages) listens for these events, picks up the agent's reply, translates it back into the platform-specific format, and sends it to the user on the external platform. This event-driven flow is much more flexible than the 0.x pipeline. It allows: Decoupling: Services don't need to know about specific actions, and actions don't need to know about specific services. They communicate through events and standardized data structures.Extensibility: Plugins can easily hook into the message flow by listening for and emitting events, or by providing new actions and services.Clarity: The flow of data (message in -&gt; events -&gt; validation -&gt; selection -&gt; execution -&gt; response out) is more explicit. So, when a message comes in, your Service turns it into an Event. Actions (and other event listeners) react to that Event. The chosen Action then does its job and (usually) produces a response, which itself might become part of another Event that a Service uses to send the reply. Part 5: Final Thoughts and Best Practices‚Äã As we conclude this journey, let me leave you with some key insights and best practices for your migration. Test Continuously‚Äã Set up your tests early and run them often. The new test structure with Vitest makes it easy to test individual components of your plugin. Test your service lifecycle, your model handlers, your action handlers, and your event handlers independently. Use Types Effectively‚Äã TypeScript is your friend in this migration. The new type system is more sophisticated and will catch many errors at compile time. Don't use any to bypass type errors; instead, understand what the correct type should be. Use the Autoupgrader‚Äã You can auto-upgrade your plugin with the CLI! Just run elizaos plugin upgrade &lt;path&gt; (you will need the CLI installed, or append bunx to the front of the command like bunx elizaos ...) This is experimental and not guaranteed, especially with complex plugins, but it may get you most of the way there. We suggest reading through and understanding the migration fundamentals in detail while the auto upgrader is running so you can help it get to completion. Ask for Help‚Äã The Eliza community is friendly and helpful. If you're stuck on something, ask in the Discord. Share what you've tried and what isn't working. Often, someone else has faced the same challenge and found a solution. For additional help, refer to: The example plugins in the Eliza repositoryThe plugin registry for real-world examplesThe Eliza Discord community for support Good luck with your migration!","keywords":"","version":"1.0.17"},{"title":"ElizaOS Prompt Composition & Generation Guide - v1.x","type":0,"sectionRef":"#","url":"/docs/plugins/migration/claude-code/prompt-and-generation-guide","content":"ElizaOS Prompt Composition &amp; Generation Guide - v1.x Important: This guide provides comprehensive documentation for migrating from composeContext to the new prompt composition methods, and from the old generation functions to useModel. Table of Contents‚Äã Overview of ChangesPrompt Composition Migration composeContext ‚Üí composePrompt/composePromptFromStateKey DifferencesMigration Examples Text Generation Migration generateText ‚Üí useModelgenerateObject ‚Üí useModelgenerateMessageResponse ‚Üí useModel Template Format Migration JSON ‚Üí XML TemplatesParsing Changes Complete Migration ExamplesBenefits of the New ApproachReal-World Migration Example: Gitcoin Passport Score Action Overview of Changes‚Äã The v1 migration introduces several key improvements: Prompt Composition: composeContext split into two specialized functionsUnified Model Interface: All generation functions consolidated into runtime.useModelTemplate Format: JSON responses replaced with XML for better parsingBetter Type Safety: Improved TypeScript support throughout Prompt Composition Migration‚Äã composeContext ‚Üí composePrompt/composePromptFromState‚Äã v0: Single composeContext Function‚Äã // v0: packages/core-0x/src/context.ts export const composeContext = ({ state, template, templatingEngine, }: { state: State; template: TemplateType; templatingEngine?: 'handlebars'; }) =&gt; { // Supported both simple replacement and handlebars if (templatingEngine === 'handlebars') { const templateFunction = handlebars.compile(templateStr); return templateFunction(state); } // Simple {{key}} replacement return templateStr.replace(/{{\\w+}}/g, (match) =&gt; { const key = match.replace(/{{|}}/g, ''); return state[key] ?? ''; }); }; v1: Two Specialized Functions‚Äã // v1: packages/core/src/utils.ts // For simple key-value state objects export const composePrompt = ({ state, template, }: { state: { [key: string]: string }; template: TemplateType; }) =&gt; { const templateStr = typeof template === 'function' ? template({ state }) : template; const templateFunction = handlebars.compile(upgradeDoubleToTriple(templateStr)); const output = composeRandomUser(templateFunction(state), 10); return output; }; // For complex State objects from runtime export const composePromptFromState = ({ state, template, }: { state: State; template: TemplateType; }) =&gt; { const templateStr = typeof template === 'function' ? template({ state }) : template; const templateFunction = handlebars.compile(upgradeDoubleToTriple(templateStr)); // Intelligent state flattening const stateKeys = Object.keys(state); const filteredKeys = stateKeys.filter((key) =&gt; !['text', 'values', 'data'].includes(key)); const filteredState = filteredKeys.reduce((acc, key) =&gt; { acc[key] = state[key]; return acc; }, {}); // Merges filtered state with state.values const output = composeRandomUser(templateFunction({ ...filteredState, ...state.values }), 10); return output; }; Key Differences‚Äã Handlebars by Default: v1 always uses Handlebars (no simple replacement mode)Auto HTML Escaping: v1 automatically converts {{var}} to {{{var}}} to prevent HTML escapingState Handling: composePromptFromState intelligently flattens complex State objectsRandom User Names: Both functions automatically replace {{name1}}, {{name2}}, etc. with random names Migration Examples‚Äã Simple State Objects‚Äã // v0 const prompt = composeContext({ state: { userName: 'Alice', topic: 'weather' }, template: &quot;Hello {{userName}}, let's talk about {{topic}}&quot;, }); // v1 const prompt = composePrompt({ state: { userName: 'Alice', topic: 'weather' }, template: &quot;Hello {{userName}}, let's talk about {{topic}}&quot;, }); Complex Runtime State‚Äã // v0 const prompt = composeContext({ state: currentState, template: messageTemplate, templatingEngine: 'handlebars', }); // v1 - Use composePromptFromState for State objects const prompt = composePromptFromState({ state: currentState, template: messageTemplate, }); Dynamic Templates‚Äã // v0 const template = ({ state }) =&gt; { return state.isUrgent ? 'URGENT: {{message}}' : 'Info: {{message}}'; }; const prompt = composeContext({ state, template }); // v1 - Same pattern works const prompt = composePrompt({ state, template }); Text Generation Migration‚Äã generateText ‚Üí useModel‚Äã v0: Standalone Function‚Äã // v0: Using generateText import { generateText, ModelClass } from '@elizaos/core'; const response = await generateText({ runtime, context: prompt, modelClass: ModelClass.SMALL, stop: ['\\n'], temperature: 0.7, }); v1: Runtime Method‚Äã // v1: Using runtime.useModel import { ModelType } from '@elizaos/core'; const response = await runtime.useModel(ModelType.TEXT_SMALL, { prompt, stopSequences: ['\\n'], temperature: 0.7, }); generateObject ‚Üí useModel‚Äã v0: Object Generation‚Äã // v0: Using generateObject const content = await generateObject({ runtime, context: prompt, modelClass: ModelClass.SMALL, }); // Returned raw object console.log(content.name, content.value); v1: Using useModel with XML‚Äã // v1: Generate text with XML format const xmlResponse = await runtime.useModel(ModelType.TEXT_SMALL, { prompt, }); // Parse XML to object const content = parseKeyValueXml(xmlResponse); console.log(content.name, content.value); generateMessageResponse ‚Üí useModel‚Äã v0: Message Response Generation‚Äã // v0: From getScore.ts example const addressRequest = await generateMessageResponse({ runtime, context, modelClass: ModelClass.SMALL, }); const address = addressRequest.address as string; v1: Using useModel with XML Template‚Äã // v1: Generate and parse XML response const xmlResponse = await runtime.useModel(ModelType.TEXT_SMALL, { prompt: context, }); const addressRequest = parseKeyValueXml(xmlResponse); const address = addressRequest.address as string; Template Format Migration‚Äã JSON ‚Üí XML Templates‚Äã The most significant change is moving from JSON to XML format for structured responses. v0: JSON Template‚Äã const addressTemplate = `From previous sentence extract only the Ethereum address being asked about. Respond with a JSON markdown block containing only the extracted value: \\`\\`\\`json { &quot;address&quot;: string | null } \\`\\`\\` `; v1: XML Template‚Äã const addressTemplate = `From previous sentence extract only the Ethereum address being asked about. Respond with an XML block containing only the extracted value: &lt;response&gt; &lt;address&gt;extracted_address_here_or_null&lt;/address&gt; &lt;/response&gt; `; Parsing Changes‚Äã v0: JSON Parsing‚Äã // v0: Parse JSON from text import { parseJSONObjectFromText } from '@elizaos/core'; const parsedContent = parseJSONObjectFromText(response); if (parsedContent &amp;&amp; parsedContent.address) { // Use the address } v1: XML Parsing‚Äã // v1: Parse XML key-value pairs import { parseKeyValueXml } from '@elizaos/core'; const parsedContent = parseKeyValueXml(response); if (parsedContent &amp;&amp; parsedContent.address) { // Use the address } Template Examples‚Äã Complex Object Extraction‚Äã // v0: JSON Template const template = `Extract token information from the message. Return a JSON object: \\`\\`\\`json { &quot;name&quot;: &quot;token name&quot;, &quot;symbol&quot;: &quot;token symbol&quot;, &quot;supply&quot;: &quot;total supply&quot;, &quot;features&quot;: [&quot;feature1&quot;, &quot;feature2&quot;] } \\`\\`\\``; // v1: XML Template const template = `Extract token information from the message. Return an XML response: &lt;response&gt; &lt;name&gt;token name&lt;/name&gt; &lt;symbol&gt;token symbol&lt;/symbol&gt; &lt;supply&gt;total supply&lt;/supply&gt; &lt;features&gt;feature1,feature2&lt;/features&gt; &lt;/response&gt;`; Complete Migration Examples‚Äã Example 1: Simple Action Handler‚Äã // v0: Old Action Handler import { composeContext, generateMessageResponse, ModelClass } from '@elizaos/core'; handler: async (runtime, message, state) =&gt; { // Compose context const context = composeContext({ state, template: addressTemplate, }); // Generate response const response = await generateMessageResponse({ runtime, context, modelClass: ModelClass.SMALL, }); const address = response.address; // Process address... }; // v1: New Action Handler import { composePromptFromState, parseKeyValueXml, ModelType } from '@elizaos/core'; handler: async (runtime, message, state) =&gt; { // Compose prompt const prompt = composePromptFromState({ state, template: addressTemplate, // Now using XML format }); // Generate response const xmlResponse = await runtime.useModel(ModelType.TEXT_SMALL, { prompt, }); // Parse XML const response = parseKeyValueXml(xmlResponse); const address = response.address; // Process address... }; Example 2: Complex State Handling‚Äã // v0: Complex Context Building const context = composeContext({ state: { ...baseState, recentMessages: formatMessages(messages), userName: user.name, customData: JSON.stringify(data), }, template: complexTemplate, templatingEngine: 'handlebars', }); const result = await generateObject({ runtime, context, modelClass: ModelClass.LARGE, }); // v1: Simplified with composePromptFromState const state = await runtime.composeState(message); const prompt = composePromptFromState({ state, // Already contains recentMessages, userName, etc. template: complexTemplate, }); const xmlResult = await runtime.useModel(ModelType.TEXT_LARGE, { prompt, }); const result = parseKeyValueXml(xmlResult); Example 3: Custom Model Parameters‚Äã // v0: Limited control const response = await generateText({ runtime, context, modelClass: ModelClass.SMALL, temperature: 0.7, stop: ['\\n', 'END'], maxTokens: 100, }); // v1: Full control with useModel const response = await runtime.useModel(ModelType.TEXT_SMALL, { prompt, temperature: 0.7, stopSequences: ['\\n', 'END'], maxTokens: 100, frequencyPenalty: 0.5, presencePenalty: 0.5, // Any additional model-specific parameters }); Benefits of the New Approach‚Äã 1. Unified Interface‚Äã v0 Problems: Multiple generation functions (generateText, generateObject, generateMessageResponse)Inconsistent parameter namesDifferent return types v1 Solution: Single useModel method for all model interactionsConsistent parameter interfacePredictable return types 2. Better State Management‚Äã v0 Problems: Manual state flattening requiredConfusion between State object and simple key-value objectsNo intelligent handling of nested data v1 Solution: composePromptFromState intelligently handles State objectsAutomatic flattening of relevant fieldsPreserves state.values for template access 3. XML Over JSON‚Äã v0 Problems: JSON parsing often failed with markdown code blocksComplex escaping issuesInconsistent formatting from LLMs v1 Solution: XML is more forgiving and easier to parseBetter handling of special charactersMore consistent LLM outputs 4. Type Safety‚Äã v0 Problems: Loose typing on generation functionsRuntime errors from type mismatchesPoor IDE support v1 Solution: Strong TypeScript types throughoutModelType enum for model selectionBetter IDE autocomplete and error detection 5. Extensibility‚Äã v0 Problems: Hard-coded model providersLimited customization optionsDifficult to add new models v1 Solution: Pluggable model system via runtime.registerModelEasy to add custom model providersStandardized model interface 6. Performance‚Äã v0 Problems: Multiple parsing attempts for JSONRedundant context buildingNo caching mechanism v1 Solution: Single-pass XML parsingEfficient state compositionBuilt-in caching support in composeState Real-World Migration Example: Gitcoin Passport Score Action‚Äã Here's a complete migration of a real action from the Gitcoin Passport plugin: Original v0 Action‚Äã import { type Action, elizaLogger, type IAgentRuntime, type Memory, type HandlerCallback, type State, getEmbeddingZeroVector, composeContext, generateMessageResponse, ModelClass, } from '@elizaos/core'; export const addressTemplate = `From previous sentence extract only the Ethereum address being asked about. Respond with a JSON markdown block containing only the extracted value: \\`\\`\\`json { &quot;address&quot;: string | null } \\`\\`\\` `; handler: async (runtime, _message, state, _options, callback) =&gt; { // Initialize or update state let currentState = state; if (!currentState) { currentState = (await runtime.composeState(_message)) as State; } else { currentState = await runtime.updateRecentMessageState(currentState); } const context = composeContext({ state: currentState, template: `${_message.content.text}\\n${addressTemplate}`, }); const addressRequest = await generateMessageResponse({ runtime, context, modelClass: ModelClass.SMALL, }); const address = addressRequest.address as string; // ... rest of handler }; Migrated v1 Action‚Äã import { type Action, elizaLogger, type IAgentRuntime, type Memory, type HandlerCallback, type State, composePromptFromState, parseKeyValueXml, ModelType, } from '@elizaos/core'; export const addressTemplate = `From previous sentence extract only the Ethereum address being asked about. Respond with an XML block containing only the extracted value: &lt;response&gt; &lt;address&gt;extracted_ethereum_address_or_null&lt;/address&gt; &lt;/response&gt; `; handler: async (runtime, _message, state, _options, callback) =&gt; { // Initialize or update state let currentState = state; if (!currentState) { currentState = await runtime.composeState(_message); } else { currentState = await runtime.composeState(_message, ['RECENT_MESSAGES']); } const prompt = composePromptFromState({ state: currentState, template: `${_message.content.text}\\n${addressTemplate}`, }); const xmlResponse = await runtime.useModel(ModelType.TEXT_SMALL, { prompt, }); const addressRequest = parseKeyValueXml(xmlResponse); const address = addressRequest?.address as string; // ... rest of handler }; Memory Creation Migration‚Äã // v0: Using deprecated fields const memory: Memory = { userId: _message.userId, agentId: _message.agentId, roomId: _message.roomId, content: { text: formattedOutput }, createdAt: Date.now(), embedding: getEmbeddingZeroVector(), }; await runtime.messageManager.createMemory(memory); // v1: Using new structure const memory: Memory = { entityId: _message.entityId, agentId: runtime.agentId, roomId: _message.roomId, content: { text: formattedOutput }, createdAt: Date.now(), // embedding will be added by runtime if needed }; await runtime.createMemory(memory); Complete Action Migration Summary‚Äã Imports: Replace old functions with new equivalentsTemplate: Convert JSON format to XMLState Management: Use composeState with filteringGeneration: Replace generateMessageResponse with useModelParsing: Use parseKeyValueXml instead of direct object accessMemory: Update to use entityId and new creation method Migration Checklist‚Äã Replace composeContext with composePrompt or composePromptFromState Update all templates from JSON to XML format Replace generateText with runtime.useModel(ModelType.TEXT_*) Replace generateObject with runtime.useModel + parseKeyValueXml Replace generateMessageResponse with runtime.useModel + parseKeyValueXml Update ModelClass to ModelType enum values Replace parseJSONObjectFromText with parseKeyValueXml Update import statements to use new functions Test XML parsing with your specific use cases Consider using state filtering for performance optimization Update Memory objects to use entityId instead of userId Replace runtime.updateRecentMessageState with filtered composeState Remove getEmbeddingZeroVector - embeddings are handled automatically","keywords":"","version":"1.0.17"},{"title":"Eliza Plugin Migration Guide: 0.x to 1.x","type":0,"sectionRef":"#","url":"/docs/migration/plugin-migration-detailed","content":"Eliza Plugin Migration Guide: 0.x to 1.x Table of Contents‚Äã Introduction and Architectural Philosophy ChangesEntity System RevolutionClient-to-Service MigrationPlugin EmpowermentThe New Task SystemCore Import and Type ChangesMemory System EvolutionModel System TransformationWorld and Room HierarchyEvent System ArchitectureRuntime SlimmingAction System UpdatesProvider System MaturityKnowledge System as PluginTesting and Build SystemMigration StrategyCommon Pitfalls and Solutions 1. Introduction and Architectural Philosophy Changes‚Äã Before diving into technical changes, understand these critical shifts: // Version 0.x Mindset: // - Runtime handles model calls // - Users and agents are different // - Clients connect to platforms // - Runtime provides utilities // Version 1.x Mindset: // - Plugins handle model calls // - Everything is an entity // - Services connect to platforms // - Plugins are self-contained 2. Entity System Revolution‚Äã In 0.x, we had a clear distinction between users and agents. In 1.x, this distinction is gone. Old System (0.x): // From types-old.txt export interface Account { id: UUID; name: string; username: string; details?: { [key: string]: any }; email?: string; avatarUrl?: string; } // Usage in memory export interface Memory { userId: UUID; // Could be human or agent agentId: UUID; // The agent in conversation // ... } New System (1.x): // From types-new.txt export interface Entity { id?: UUID; names: string[]; // Multiple names/aliases metadata?: { [key: string]: any }; agentId: UUID; // Which agent manages this entity components?: Component[]; } // Usage in memory export interface Memory { entityId: UUID; // ANY participant (human, agent, bot) agentId?: UUID; // Optional agent association // ... } Migrating User References‚Äã Example from OpenAI Plugin: // OLD (openai-old.txt) async handler(_runtime, message, _state) { const response = await callOpenAiApi( &quot;https://api.openai.com/v1/completions&quot;, requestData, apiKey, ); // Reference to userId runtime.databaseAdapter.log({ userId: message.userId, roomId: message.roomId, type: &quot;action&quot;, body: { /* ... */ } }); } // NEW (openai-new.txt) async handler(runtime: IAgentRuntime, message: Memory, state?: State) { const response = await runtime.useModel(ModelType.TEXT_SMALL, { prompt: prompt, }); // Reference to entityId runtime.adapter.log({ entityId: message.entityId, // Changed from userId roomId: message.roomId, type: &quot;action&quot;, body: { /* ... */ } }); } Entity Components‚Äã The new component system allows flexible data modeling: // Creating an entity with components const entity = await runtime.createEntity({ names: ['John Doe', 'JohnD'], agentId: runtime.agentId, metadata: { discord: { username: 'john_doe', id: '123456789', }, }, }); // Adding a component await runtime.createComponent({ id: generateId(), entityId: entity.id, agentId: runtime.agentId, roomId: roomId, worldId: worldId, sourceEntityId: runtime.agentId, type: 'preferences', data: { language: 'en', timezone: 'UTC', }, }); 3. Client-to-Service Migration‚Äã Complete Client Deprecation‚Äã Every client in 0.x is now a service in 1.x. This isn't just a naming change‚Äîit's a complete architectural shift. Old Client Pattern (0.x): // From types-old.txt export type Client = { name: string; config?: { [key: string]: any }; start: (runtime: IAgentRuntime) =&gt; Promise&lt;ClientInstance&gt;; }; export type ClientInstance = { stop: (runtime: IAgentRuntime) =&gt; Promise&lt;unknown&gt;; }; New Service Pattern (1.x): // From types-new.txt export abstract class Service { protected runtime!: IAgentRuntime; abstract stop(): Promise&lt;void&gt;; static serviceType: string; abstract capabilityDescription: string; static async start(_runtime: IAgentRuntime): Promise&lt;Service&gt; { throw new Error('Not implemented'); } } Real Service Migration Example‚Äã Let's look at how a Discord integration would migrate: Old Discord Client (0.x style): const discordClient: Client = { name: 'discord', config: { token: process.env.DISCORD_TOKEN, intents: [ /* ... */ ], }, start: async (runtime) =&gt; { const client = new DiscordClient(); await client.login(runtime.getSetting('DISCORD_TOKEN')); client.on('messageCreate', async (message) =&gt; { // Handle message }); return { stop: async () =&gt; { await client.destroy(); }, }; }, }; New Discord Service (1.x): export class DiscordService extends Service { static serviceType = 'discord'; capabilityDescription = 'Discord integration service for message handling'; private client: DiscordClient; constructor(runtime: IAgentRuntime) { super(); this.runtime = runtime; } static async start(runtime: IAgentRuntime): Promise&lt;DiscordService&gt; { const service = new DiscordService(runtime); service.client = new DiscordClient(); await service.client.login(runtime.getSetting('DISCORD_TOKEN')); service.client.on('messageCreate', async (message) =&gt; { // Emit runtime event instead of direct handling await runtime.emitEvent(EventType.MESSAGE_RECEIVED, { runtime, message: /* converted message */, source: 'discord' }); }); return service; } async stop(): Promise&lt;void&gt; { await this.client.destroy(); } } Service Registration‚Äã Old Plugin (0.x): export const discordPlugin: Plugin = { name: 'discord', clients: [discordClient], // Array of clients // ... }; New Plugin (1.x): export const discordPlugin: Plugin = { name: 'discord', services: [DiscordService], // Array of service classes // ... }; 4. Plugin Empowerment‚Äã The most dramatic change: the runtime no longer handles model calls directly. Old Model Call (0.x - openai-old.txt): // Runtime provided model utilities import { generateText } from '@elizaos/core'; const response = await generateText({ runtime, context: prompt, modelClass: ModelClass.LARGE, }); New Model Call (1.x - openai-new.txt): // Plugin registers model handlers export const openaiPlugin: Plugin = { name: 'openai', models: { [ModelType.TEXT_SMALL]: async (runtime: IAgentRuntime, params) =&gt; { const openai = createOpenAIClient(runtime); const { text } = await generateText({ model: openai.languageModel(getSmallModel(runtime)), prompt: params.prompt, temperature: params.temperature || 0.7, // ... }); return text; }, [ModelType.TEXT_EMBEDDING]: async (runtime: IAgentRuntime, params) =&gt; { // Plugin handles embedding generation const response = await fetch(`${embeddingBaseURL}/embeddings`, { method: 'POST', headers: { Authorization: `Bearer ${apiKey}`, 'Content-Type': 'application/json', }, body: JSON.stringify({ model: embeddingModelName, input: params.text, }), }); // ... }, }, }; Self-Contained Utilities‚Äã Plugins must now include their own utility functions. Old Approach (0.x): // Relied on runtime utilities import { parseJSON, validatePrompt, formatResponse } from &quot;@elizaos/core&quot;; async handler(runtime, message) { const parsed = parseJSON(message.content); const validated = validatePrompt(parsed.prompt); const formatted = formatResponse(response); } New Approach (1.x): // Plugin includes its own utilities import { parseJSONObjectFromText } from './utils'; // From openai-new.txt function validatePrompt(prompt: string): void { if (!prompt.trim()) { throw new Error(&quot;Prompt cannot be empty&quot;); } if (prompt.length &gt; 4000) { throw new Error(&quot;Prompt exceeds maximum length&quot;); } } async handler(runtime, message) { // Use plugin's own utilities const parsed = parseJSONObjectFromText(message.content.text); validatePrompt(parsed.prompt); // Format response ourselves } Complete Plugin Example‚Äã Here's how the OpenAI plugin transformed to be self-sufficient: Key Changes in openai-new.txt: // 1. Plugin provides own OpenAI client creation function createOpenAIClient(runtime: IAgentRuntime) { return createOpenAI({ apiKey: getApiKey(runtime), baseURL: getBaseURL(runtime), }); } // 2. Plugin handles all model types models: { [ModelType.TEXT_SMALL]: textHandler, [ModelType.TEXT_LARGE]: textHandler, [ModelType.TEXT_EMBEDDING]: embeddingHandler, [ModelType.IMAGE]: imageHandler, [ModelType.TRANSCRIPTION]: transcriptionHandler, // ... many more } // 3. Plugin includes error handling and retries async function callOpenAiApi&lt;T&gt;(url: string, data: any, apiKey: string): Promise&lt;T&gt; { try { const response = await fetch(url, { headers: { Authorization: `Bearer ${apiKey}`, &quot;Content-Type&quot;: &quot;application/json&quot;, }, body: JSON.stringify(data), }); if (!response.ok) { // Plugin handles its own errors if (response.status === 429) { throw new Error(&quot;Rate limit exceeded&quot;); } throw new Error(`OpenAI API error: ${response.status}`); } return await response.json(); } catch (error) { // Plugin-specific error handling logger.error(&quot;OpenAI API call failed:&quot;, error); throw error; } } // 4. Plugin manages its own configuration function getApiKey(runtime: IAgentRuntime): string | undefined { return runtime.getSetting(&quot;OPENAI_API_KEY&quot;); } 5. The New Task System‚Äã Tasks are a completely new abstraction in 1.x for handling deferred and recurring work. Task Structure‚Äã // From types-new.txt export interface Task { id?: UUID; name: string; updatedAt?: number; metadata?: { updateInterval?: number; // For recurring tasks options?: { // For choice tasks name: string; description: string; }[]; [key: string]: unknown; }; description: string; roomId?: UUID; worldId?: UUID; entityId?: UUID; tags: string[]; } Creating a Task Worker‚Äã // Example: Reminder task worker runtime.registerTaskWorker({ name: 'SEND_REMINDER', validate: async (runtime, message, state) =&gt; { // Check if this task should run return state.remindersEnabled &amp;&amp; message.content.text.includes('remind'); }, execute: async (runtime, options, task) =&gt; { const { reminder, targetEntityId } = options; // Create a memory (message) for the reminder await runtime.createMemory( { entityId: runtime.agentId, roomId: task.roomId, content: { text: `Reminder for &lt;@${targetEntityId}&gt;: ${reminder}`, }, }, 'messages' ); // Delete one-time task after execution if (!task.metadata?.updateInterval) { await runtime.deleteTask(task.id); } }, }); Task Usage Examples‚Äã One-time Task: await runtime.createTask({ name: 'SEND_REMINDER', description: 'Send a reminder in 24 hours', roomId: message.roomId, tags: ['reminder', 'one-time'], metadata: { scheduledFor: Date.now() + 86400000, // 24 hours reminder: 'Submit your report', targetEntityId: message.entityId, }, }); Recurring Task: await runtime.createTask({ name: 'DAILY_STATS', description: 'Post daily statistics', roomId: channelId, worldId: worldId, tags: ['stats', 'recurring'], metadata: { updateInterval: 86400000, // 24 hours updatedAt: Date.now(), }, }); Choice Task: await runtime.createTask({ name: 'CONFIRM_ACTION', description: 'Awaiting user confirmation', roomId: message.roomId, tags: ['confirmation', 'AWAITING_CHOICE'], metadata: { options: [ { name: 'approve', description: 'Approve the action' }, { name: 'reject', description: 'Reject the action' }, ], actionType: 'DELETE_DATA', targetData: ['file1.txt', 'file2.txt'], }, }); 6. Core Import and Type Changes‚Äã Here's a comprehensive mapping of import changes: Common Import Changes: // OLD (Version 0.x) import { generateText, elizaLogger, ModelClass, IAgentRuntime, Memory, State, Action, } from '@elizaos/core'; // NEW (Version 1.x) import { // generateText is GONE - use runtime.useModel logger, // renamed from elizaLogger ModelType, // replaces ModelClass IAgentRuntime, Memory, State, Action, EventType, // new ServiceType, // new UUID, // new typed UUID } from '@elizaos/core'; Type System Changes‚Äã UUID Type: // OLD - just strings const userId: string = 'some-id'; // NEW - typed UUIDs import { UUID, asUUID } from '@elizaos/core'; const entityId: UUID = asUUID('123e4567-e89b-12d3-a456-426614174000'); // asUUID validates the format Model Types: // OLD (0.x) export enum ModelClass { SMALL = 'small', MEDIUM = 'medium', LARGE = 'large', EMBEDDING = 'embedding', IMAGE = 'image', } // NEW (1.x) export const ModelType = { TEXT_SMALL: 'TEXT_SMALL', TEXT_LARGE: 'TEXT_LARGE', TEXT_EMBEDDING: 'TEXT_EMBEDDING', TEXT_REASONING_SMALL: 'REASONING_SMALL', TEXT_REASONING_LARGE: 'REASONING_LARGE', IMAGE: 'IMAGE', IMAGE_DESCRIPTION: 'IMAGE_DESCRIPTION', TRANSCRIPTION: 'TRANSCRIPTION', TEXT_TO_SPEECH: 'TEXT_TO_SPEECH', // Many more specific types } as const; Service Types: // OLD - string literals const serviceType = 'image_description'; // NEW - typed enum import { ServiceType } from '@elizaos/core'; const serviceType = ServiceType.IMAGE_DESCRIPTION; Interface Changes‚Äã Memory Interface Evolution: // OLD (0.x) export interface Memory { id?: UUID; userId: UUID; // Human or agent agentId: UUID; // The agent createdAt?: number; content: Content; embedding?: number[]; roomId: UUID; unique?: boolean; similarity?: number; } // NEW (1.x) export interface Memory { id?: UUID; entityId: UUID; // Any participant agentId?: UUID; // Optional agent association createdAt?: number; content: Content; embedding?: number[]; // Auto-generated by runtime roomId: UUID; worldId?: UUID; // New world association unique?: boolean; similarity?: number; metadata?: MemoryMetadata; // New metadata system } 7. Memory System Evolution‚Äã The biggest change: you must now specify table names explicitly. Old Memory Creation (0.x): // From openai-old.txt actions await runtime.messageManager.createMemory(memory); await runtime.documentsManager.createMemory(document); await runtime.knowledgeManager.createMemory(knowledge); New Memory Creation (1.x): // From openai-new.txt await runtime.createMemory(memory, 'messages'); await runtime.createMemory(document, 'documents'); await runtime.createMemory(knowledge, 'facts'); // Custom tables are supported await runtime.createMemory(customData, 'my_custom_table'); 7.2 Embedding Generation‚Äã Old Approach (0.x): // Manual embedding management import { getEmbeddingZeroVector } from '@elizaos/core'; const memory = { content: { text: 'Hello world' }, embedding: getEmbeddingZeroVector(), // Manual zero vector // ... }; // Or generate embedding manually const embedding = await runtime.getEmbeddingResponse(text); memory.embedding = embedding; New Approach (1.x): // Runtime handles embeddings automatically const memory = { content: { text: 'Hello world' }, // NO embedding field needed! entityId: message.entityId, roomId: message.roomId, }; // Runtime generates embedding automatically await runtime.createMemory(memory, 'messages'); // Or use the helper const memoryWithEmbedding = await runtime.addEmbeddingToMemory(memory); Memory Metadata System‚Äã New Metadata Structure: // From types-new.txt export interface MessageMetadata extends BaseMetadata { type: MemoryType.MESSAGE; } export interface DocumentMetadata extends BaseMetadata { type: MemoryType.DOCUMENT; } // Usage const messageMemory = { content: { text: 'Hello' }, entityId: entityId, roomId: roomId, metadata: { type: MemoryType.MESSAGE, source: 'discord', timestamp: Date.now(), tags: ['greeting', 'intro'], }, }; Search Operations‚Äã Old Search (0.x): const memories = await runtime.messageManager.searchMemoriesByEmbedding(embedding, { match_threshold: 0.8, count: 10, roomId: roomId, unique: true, }); New Search (1.x): const memories = await runtime.searchMemories({ tableName: 'messages', // Required table name embedding: embedding, match_threshold: 0.8, count: 10, roomId: roomId, worldId: worldId, // Optional world filter entityId: entityId, // Optional entity filter unique: true, }); 8. Model System Transformation‚Äã The runtime no longer directly handles model calling directly. Instead, plugins register model handlers, and models are called with the runtime.useModel() handler. Old Model Usage (0.x): // From openai-old.txt import { generateText } from '@elizaos/core'; const response = await generateText({ runtime: runtime, context: prompt, modelClass: ModelClass.LARGE, // These were hardcoded in runtime }); New Model Usage (1.x): // Runtime delegates to plugin-registered handlers const response = await runtime.useModel(ModelType.TEXT_LARGE, { prompt: prompt, temperature: 0.7, maxTokens: 1000, }); Model Registration‚Äã How Plugins Register Models (from openai-new.txt): export const openaiPlugin: Plugin = { name: 'openai', models: { [ModelType.TEXT_SMALL]: async (runtime: IAgentRuntime, params) =&gt; { const openai = createOpenAIClient(runtime); const modelName = getSmallModel(runtime); const { text } = await generateText({ model: openai.languageModel(modelName), prompt: params.prompt, temperature: params.temperature || 0.7, maxTokens: params.maxTokens || 8192, // ... other params }); return text; }, [ModelType.TEXT_EMBEDDING]: async (runtime: IAgentRuntime, params) =&gt; { if (params === null) { // Special case for initialization const embeddingDimension = 1536; const testVector = Array(embeddingDimension).fill(0); testVector[0] = 0.1; return testVector; } // Normal embedding generation const text = typeof params === 'string' ? params : params.text; const response = await fetch(`${baseURL}/embeddings`, { method: 'POST', headers: { Authorization: `Bearer ${apiKey}`, 'Content-Type': 'application/json', }, body: JSON.stringify({ model: embeddingModelName, input: text, }), }); const data = await response.json(); return data.data[0].embedding; }, }, }; Model Provider Priority‚Äã Multiple plugins can register handlers for the same model type: // Plugin A registers with default priority runtime.registerModel( ModelType.TEXT_LARGE, handlerA, 'plugin-a' // priority defaults to 0 ); // Plugin B registers with higher priority runtime.registerModel( ModelType.TEXT_LARGE, handlerB, 'plugin-b', 10 // Higher priority ); // When called, Plugin B's handler will be used const response = await runtime.useModel(ModelType.TEXT_LARGE, params); 9. World and Room Hierarchy‚Äã Worlds are a new abstraction layer above rooms: // From types-new.txt export type World = { id: UUID; name?: string; agentId: UUID; serverId: string; metadata?: { ownership?: { ownerId: string; }; roles?: { [entityId: UUID]: Role; }; [key: string]: unknown; }; }; Creating Rooms with Worlds‚Äã Old Room Creation (0.x): const roomId = await runtime.createRoom(); // Rooms were standalone New Room Creation (1.x): // First ensure world exists await runtime.ensureWorldExists({ id: worldId, name: 'Main Server', agentId: runtime.agentId, serverId: 'discord-123456', }); // Then create room in that world const roomId = await runtime.createRoom({ id: roomId, name: 'general-chat', source: 'discord', type: ChannelType.GROUP, channelId: 'discord-channel-id', serverId: 'discord-123456', worldId: worldId, // Required! }); Entity Connections‚Äã Old Connection (0.x): await runtime.ensureConnection(userId, roomId, userName, userScreenName, source); New Connection (1.x): await runtime.ensureConnection({ entityId: entityId, roomId: roomId, worldId: worldId, // Must specify world userName: userName, name: displayName, source: 'discord', type: ChannelType.GROUP, channelId: channelId, serverId: serverId, userId: platformUserId, // Platform-specific ID }); 10. Event System Architecture‚Äã New Event System (from types-new.txt): export enum EventType { // World events WORLD_JOINED = 'WORLD_JOINED', WORLD_CONNECTED = 'WORLD_CONNECTED', WORLD_LEFT = 'WORLD_LEFT', // Message events MESSAGE_RECEIVED = 'MESSAGE_RECEIVED', MESSAGE_SENT = 'MESSAGE_SENT', // Voice events VOICE_MESSAGE_RECEIVED = 'VOICE_MESSAGE_RECEIVED', // Action events ACTION_STARTED = 'ACTION_STARTED', ACTION_COMPLETED = 'ACTION_COMPLETED', // Model events MODEL_USED = 'MODEL_USED', // Many more... } Event Registration in Plugins‚Äã Old Event Handling (0.x): // Direct handling in client client.on('messageCreate', async (message) =&gt; { // Process message directly }); New Event System (1.x): export const myPlugin: Plugin = { name: 'my-plugin', events: { [EventType.MESSAGE_RECEIVED]: [ async (payload: MessagePayload) =&gt; { const { runtime, message } = payload; // Process message }, ], [EventType.WORLD_JOINED]: [ async (payload: WorldPayload) =&gt; { const { runtime, world, rooms, entities } = payload; // Handle world join }, ], }, }; Emitting Events‚Äã // In a service await runtime.emitEvent(EventType.MESSAGE_RECEIVED, { runtime, message: convertedMessage, source: 'discord', callback: async (response) =&gt; { // Send response back to Discord }, }); // Emit multiple events await runtime.emitEvent([EventType.ACTION_STARTED, EventType.MODEL_USED], eventPayload); 11. Runtime Slimming‚Äã Removed Utilities: // OLD (0.x) - These no longer exist in runtime: import { generateText, // ‚ùå Removed getEmbeddingZeroVector, // ‚ùå Removed parseJSON, // ‚ùå Removed validateJSON, // ‚ùå Removed formatResponse, // ‚ùå Removed trimTokens, // ‚ùå Removed // ... many more } from '@elizaos/core'; // NEW (1.x) - Implement in your plugin: // Import your own utilities or implement them import { parseJSONObjectFromText } from './utils'; What Runtime Still Provides‚Äã // Core orchestration runtime.emitEvent(); runtime.composeState(); // Memory management runtime.createMemory(); runtime.searchMemories(); // Service management runtime.getService(); runtime.registerService(); // Model delegation (not execution) runtime.useModel(); runtime.registerModel(); // Entity management runtime.createEntity(); runtime.getEntityById(); 12. Action System Updates‚Äã Old Single Action (0.x): const responseContent = { text: &quot;I'll help you with that&quot;, action: 'SEND_EMAIL', // Single action }; New Multi-Action (1.x): const responseContent = { text: &quot;I'll help you with that&quot;, actions: ['REPLY', 'SEND_EMAIL', 'LOG_ACTIVITY'], // Multiple actions thought: 'User needs help with email, I should send it and log this', }; Action Handler Updates‚Äã Example from Real Action Migration: // OLD Action (0.x style) export const generateImageAction: Action = { name: 'GENERATE_IMAGE', similes: ['CREATE_IMAGE', 'MAKE_PICTURE'], description: 'Generate an image', handler: async (runtime, message, state) =&gt; { const imageService = runtime.getService('image'); const imageUrl = await imageService.generate(message.content.text); return { text: `Here's your image: ${imageUrl}`, action: 'GENERATE_IMAGE', }; }, }; // NEW Action (1.x) export const generateImageAction: Action = { name: 'GENERATE_IMAGE', similes: ['CREATE_IMAGE', 'MAKE_PICTURE'], description: 'Generate an image from text description', suppressInitialMessage: true, // New property handler: async ( runtime: IAgentRuntime, message: Memory, state?: State, options?: any, callback?: HandlerCallback ) =&gt; { // Send initial response if (callback) { await callback({ text: &quot;I'm generating that image for you...&quot;, thought: 'User wants an image, using image generation service', actions: ['GENERATE_IMAGE'], }); } // Generate image const imageUrl = await runtime.useModel(ModelType.IMAGE, { prompt: message.content.text, }); // Create follow-up message with image await runtime.createMemory( { entityId: runtime.agentId, roomId: message.roomId, content: { text: &quot;Here's your generated image:&quot;, attachments: [ { type: 'image', url: imageUrl, }, ], }, }, 'messages' ); return true; }, }; 13. Provider System Maturity‚Äã // Standard provider - always included const timeProvider: Provider = { name: 'time', description: 'Provides current time', get: async (runtime, message, state) =&gt; { return { text: `Current time: ${new Date().toISOString()}`, values: { currentTime: Date.now() }, }; }, }; // Dynamic provider - only when requested const weatherProvider: Provider = { name: 'weather', description: 'Provides weather data', dynamic: true, // Not included by default get: async (runtime, message, state) =&gt; { // Expensive operation only when needed const weather = await fetchWeatherData(); return { text: formatWeather(weather), values: { weather } }; }, }; // Private provider - must be explicitly included const secretProvider: Provider = { name: 'secrets', description: 'Provides sensitive data', private: true, // Never auto-included get: async (runtime, message, state) =&gt; { return { values: { apiKeys: runtime.getSetting('API_KEYS') } }; }, }; Provider Positioning‚Äã const earlyProvider: Provider = { name: 'context', position: -10, // Runs early get: async () =&gt; { /* ... */ }, }; const lateProvider: Provider = { name: 'summary', position: 100, // Runs after others get: async (runtime, message, state) =&gt; { // Can use data from earlier providers const contextData = state.values.context; return { text: summarize(contextData) }; }, }; 14. Knowledge System as Plugin‚Äã Knowledge is no longer in core, but in a separate package (@elizaos/plugin-knowledge) Old Knowledge (0.x): // Was part of character definition const character = { name: 'Assistant', knowledge: ['I am a helpful assistant', { path: 'knowledge/faq.md' }], }; New Knowledge (1.x): // Now requires the knowledge plugin import { knowledgePlugin } from '@elizaos/plugin-knowledge'; // In character const character = { name: 'Assistant', // knowledge field still works but requires plugin knowledge: ['facts', { path: 'docs/guide.md' }], plugins: [knowledgePlugin], // Must include plugin! }; RAG System Usage‚Äã // Knowledge must be added through runtime await runtime.addKnowledge({ id: createUniqueUuid(runtime, 'doc-1'), content: { text: documentContent }, metadata: { type: MemoryType.DOCUMENT, source: 'manual-upload', }, }); // Retrieval through memory search const relevantKnowledge = await runtime.searchMemories({ tableName: 'knowledge', embedding: queryEmbedding, match_threshold: 0.8, count: 5, }); 15. Testing and Build System‚Äã Old package.json (0.x): { &quot;scripts&quot;: { &quot;test&quot;: &quot;jest&quot;, &quot;lint&quot;: &quot;biome check .&quot;, &quot;format&quot;: &quot;biome format --write .&quot; }, &quot;devDependencies&quot;: { &quot;@biomejs/biome&quot;: &quot;^1.0.0&quot;, &quot;jest&quot;: &quot;^29.0.0&quot; } } New package.json (1.x): { &quot;scripts&quot;: { &quot;test&quot;: &quot;vitest&quot;, &quot;test:plugins&quot;: &quot;elizaos test&quot;, &quot;lint&quot;: &quot;eslint .&quot;, &quot;format&quot;: &quot;prettier --write .&quot;, &quot;typecheck&quot;: &quot;tsc --noEmit&quot;, &quot;build&quot;: &quot;tsc&quot; }, &quot;devDependencies&quot;: { &quot;vitest&quot;: &quot;latest&quot;, &quot;prettier&quot;: &quot;latest&quot;, &quot;eslint&quot;: &quot;latest&quot;, &quot;typescript&quot;: &quot;latest&quot;, &quot;@elizaos/core&quot;: &quot;^1.0.0&quot; } } Test Structure‚Äã Example Test Migration: // OLD Jest test describe('OpenAI Plugin', () =&gt; { it('should generate text', async () =&gt; { const response = await generateText({ runtime: mockRuntime, context: 'Hello', modelClass: ModelClass.SMALL, }); expect(response).toBeDefined(); }); }); // NEW Vitest test import { describe, it, expect, vi } from 'vitest'; describe('OpenAI Plugin', () =&gt; { it('should handle text generation through model system', async () =&gt; { const mockRuntime = { getSetting: vi.fn((key) =&gt; { if (key === 'OPENAI_API_KEY') return 'test-key'; return null; }), useModel: vi.fn(), }; // Test the model handler directly const handler = openaiPlugin.models[ModelType.TEXT_SMALL]; const response = await handler(mockRuntime, { prompt: 'Hello', temperature: 0.7, }); expect(response).toBeDefined(); expect(typeof response).toBe('string'); }); }); 16. Migration Strategy‚Äã Step-by-Step Process‚Äã Update Dependencies bun remove @elizaos/core@0.x bun add @elizaos/core@1.x bun add -d vitest prettier eslint bun remove @biomejs/biome jest Update Imports Search and replace all import pathsRemove imports for removed utilitiesAdd new required imports Convert Types Account ‚Üí EntityuserId ‚Üí entityIdModelClass ‚Üí ModelTypeAdd UUID types Migrate Clients to Services Extend Service classAdd lifecycle methodsUpdate registration Update Model Usage Replace generateText with runtime.useModelRegister model handlersRemove runtime model utilities Fix Memory Operations Add table names to all operationsRemove manual embedding handlingUpdate search parameters Implement Self-Contained Utilities Copy needed utilities into pluginRemove runtime utility dependencies Add Event Handlers Convert direct handling to eventsRegister event handlers in plugin Update Tests Convert to VitestUpdate mocks for new architectureAdd plugin integration tests Test Everything Run unit testsRun plugin testsTest in real runtime Migration Checklist‚Äã All imports updated No references to removed utilities All userId ‚Üí entityId All Account ‚Üí Entity Clients converted to Services Service lifecycle implemented Model handlers registered Memory operations use table names No manual embedding generation Events properly registered Tests migrated to Vitest Plugin includes own utilities Build system updated All tests passing 17. Common Pitfalls and Solutions‚Äã Forgetting Table Names‚Äã Problem: // This will fail await runtime.createMemory(memory); Solution: // Always specify table name await runtime.createMemory(memory, 'messages'); 17.2 Still Using Client Patterns‚Äã Problem: // Old client pattern const client = { start: async (runtime) =&gt; { /* ... */ }, }; Solution: // Use service pattern class MyService extends Service { static serviceType = 'my-service'; static async start(runtime) { /* ... */ } async stop() { /* ... */ } } Expecting Runtime Utilities‚Äã Problem: // These don't exist anymore import { parseJSON, generateText } from '@elizaos/core'; Solution: // Include your own utilities import { parseJSON } from './utils'; // Use model system const text = await runtime.useModel(ModelType.TEXT_LARGE, params); Not Registering Models‚Äã Problem: // Plugin without model registration export const myPlugin: Plugin = { name: 'my-plugin', // No models property }; Solution: export const myPlugin: Plugin = { name: 'my-plugin', models: { [ModelType.TEXT_LARGE]: myTextHandler, [ModelType.TEXT_EMBEDDING]: myEmbeddingHandler, }, }; Manual Embedding Management‚Äã Problem: // Old pattern memory.embedding = getEmbeddingZeroVector(); Solution: // Let runtime handle it // Just don't include embedding field await runtime.createMemory(memory, 'messages'); Conclusion‚Äã The migration from 0.x to 1.x represents a fundamental shift in how Eliza plugins work. The key principles to remember: Everything is an entity - no more user/agent distinctionPlugins are self-sufficient - include your own utilitiesServices replaced clients - use proper lifecycle managementRuntime does less - plugins handle models and utilitiesExplicit is better - table names, world associations, etc. Take your time with the migration. Test thoroughly at each step. The new architecture provides much more flexibility and power, but requires understanding these fundamental changes. For additional help, refer to: The example plugins in the Eliza repositoryThe plugin registry for real-world examplesThe Eliza Discord community for support Good luck with your migration!","keywords":"","version":"1.0.17"},{"title":"ElizaOS Plugin Migration Guide - v1.x","type":0,"sectionRef":"#","url":"/docs/plugins/migration/claude-code/migration-guide","content":"ElizaOS Plugin Migration Guide - v1.x Important: This guide provides a general framework for migrating ElizaOS plugins to v1.x. Specific configurations will vary based on your plugin's functionality. Step 1: Create Version Branch‚Äã Create a new branch for the 1.x version while preserving the main branch for backwards compatibility: git checkout -b 1.x Note: This branch will serve as your new 1.x version branch, keeping main intact for legacy support. Step 2: Remove Deprecated Files‚Äã Clean up deprecated tooling and configuration files: Files to Remove:‚Äã biome.json - Deprecated linter configurationvitest.config.ts - Replaced by Bun test runnerLock files - Any lock.json or yml.lock files Quick Cleanup Commands:‚Äã rm -rf vitest.config.ts rm -rf biome.json rm -f *.lock.json *.yml.lock Why? The ElizaOS ecosystem has standardized on: Bun's built-in test runner (replacing Vitest) - All plugins must now use bun testPrettier for code formatting (replacing Biome) This ensures consistency across all ElizaOS plugins and simplifies the development toolchain. Step 3: Update package.json‚Äã 3.1 Version Update‚Äã &quot;version&quot;: &quot;1.0.0&quot; 3.1.5 Package Name Update‚Äã Check if your package name contains the old namespace and update it: // OLD (incorrect): &quot;name&quot;: &quot;@elizaos-plugins/plugin-bnb&quot; // NEW (correct): &quot;name&quot;: &quot;@elizaos/plugin-bnb&quot; Important: If your package name starts with @elizaos-plugins/, remove the &quot;s&quot; from &quot;plugins&quot; to change it to @elizaos/. This is the correct namespace for all ElizaOS plugins in v1.x. 3.2 Dependencies‚Äã Remove: biome, vitest (if present)Add: Core and plugin-specific dependencies 3.3 Dev Dependencies‚Äã Add the following development dependencies: &quot;devDependencies&quot;: { &quot;tsup&quot;: &quot;8.3.5&quot;, &quot;prettier&quot;: &quot;^3.0.0&quot;, &quot;bun&quot;: &quot;^1.2.15&quot;, // REQUIRED: All plugins now use Bun test runner &quot;@types/bun&quot;: &quot;latest&quot;, // REQUIRED: TypeScript types for Bun &quot;typescript&quot;: &quot;^5.0.0&quot; } Important: bun and @types/bun are REQUIRED dependencies for all plugins in v1.x. The ElizaOS ecosystem has standardized on Bun's built-in test runner, replacing Vitest. Without these dependencies, your tests will not run properly. 3.4 Scripts Section‚Äã Replace your existing scripts with: &quot;scripts&quot;: { &quot;build&quot;: &quot;tsup&quot;, &quot;dev&quot;: &quot;tsup --watch&quot;, &quot;lint&quot;: &quot;prettier --write ./src&quot;, &quot;clean&quot;: &quot;rm -rf dist .turbo node_modules .turbo-tsconfig.json tsconfig.tsbuildinfo&quot;, &quot;format&quot;: &quot;prettier --write ./src&quot;, &quot;format:check&quot;: &quot;prettier --check ./src&quot;, &quot;test&quot;: &quot;bun test&quot;, // Uses Bun's built-in test runner &quot;test:watch&quot;: &quot;bun test --watch&quot;, // Watch mode for development &quot;test:coverage&quot;: &quot;bun test --coverage&quot; // Coverage reports with Bun } Note: All test scripts now use Bun's built-in test runner. Make sure you have bun and @types/bun installed as dev dependencies (see section 3.3). 3.5 Publish Configuration‚Äã Add the following to enable public npm publishing: &quot;publishConfig&quot;: { &quot;access&quot;: &quot;public&quot; } 3.6 Agent Configuration‚Äã Replace your agentConfig with the new structure: &quot;agentConfig&quot;: { &quot;pluginType&quot;: &quot;elizaos:plugin:1.0.0&quot;, &quot;pluginParameters&quot;: { &quot;YOUR_PARAMETER_NAME&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Description of what this parameter does&quot;, &quot;required&quot;: true, &quot;sensitive&quot;: true } } } Note: Replace YOUR_PARAMETER_NAME with your plugin's specific configuration parameters. Common types include API keys, endpoints, credentials, etc. 3.7 Dependencies‚Äã Add your plugin-specific dependencies: &quot;dependencies&quot;: { &quot;@elizaos/core&quot;: &quot;latest&quot;, // Add your plugin-specific dependencies here } Step 4: TypeScript Configuration‚Äã 4.1 Update tsup.config.ts‚Äã import { defineConfig } from 'tsup'; export default defineConfig({ entry: ['src/index.ts'], outDir: 'dist', tsconfig: './tsconfig.build.json', // Use build-specific tsconfig sourcemap: true, clean: true, format: ['esm'], // ESM output format dts: true, external: ['dotenv', 'fs', 'path', 'https', 'http', '@elizaos/core', 'zod'], }); 4.2 Update tsconfig.json‚Äã { &quot;compilerOptions&quot;: { &quot;outDir&quot;: &quot;dist&quot;, &quot;rootDir&quot;: &quot;src&quot;, &quot;baseUrl&quot;: &quot;./&quot;, &quot;lib&quot;: [&quot;ESNext&quot;], &quot;target&quot;: &quot;ESNext&quot;, &quot;module&quot;: &quot;Preserve&quot;, &quot;moduleResolution&quot;: &quot;Bundler&quot;, &quot;strict&quot;: true, &quot;esModuleInterop&quot;: true, &quot;allowImportingTsExtensions&quot;: true, &quot;declaration&quot;: true, &quot;emitDeclarationOnly&quot;: true, &quot;resolveJsonModule&quot;: true, &quot;moduleDetection&quot;: &quot;force&quot;, &quot;allowArbitraryExtensions&quot;: true, &quot;types&quot;: [&quot;bun&quot;] }, &quot;include&quot;: [&quot;src/**/*.ts&quot;] } 4.3 Create tsconfig.build.json‚Äã Create a new file with build-specific TypeScript configuration: { &quot;extends&quot;: &quot;./tsconfig.json&quot;, &quot;compilerOptions&quot;: { &quot;rootDir&quot;: &quot;./src&quot;, &quot;outDir&quot;: &quot;./dist&quot;, &quot;sourceMap&quot;: true, &quot;inlineSources&quot;: true, &quot;declaration&quot;: true, &quot;emitDeclarationOnly&quot;: true }, &quot;include&quot;: [&quot;src/**/*.ts&quot;], &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;, &quot;**/*.test.ts&quot;, &quot;**/*.spec.ts&quot;] } Step 5: Verify Build Process‚Äã Clean everything and test the new setup: # Clean all build artifacts and dependencies rm -rf dist node_modules .turbo # Install dependencies with Bun bun install # Build the project bun run build Expected Results:‚Äã Dependencies install without errorsBuild completes successfullydist folder contains compiled outputTypeScript declarations are generated Next Steps: After verifying the build, proceed to Step 6 to migrate your actions and providers to handle the breaking API changes. Step 6: Migrate Actions &amp; Providers‚Äã 6.1 Import Changes‚Äã Update your imports in action files: // Remove these imports: import { generateObject, composeContext } from '@elizaos/core'; // Add/update these imports: import { composePromptFromState, parseKeyValueXml, ModelType, // Note: ModelType replaces ModelClass } from '@elizaos/core'; 6.2 State Handling Migration‚Äã Replace the state initialization and update pattern: // OLD Pattern: let currentState = state; if (!currentState) { currentState = (await runtime.composeState(message)) as State; } else { currentState = await runtime.updateRecentMessageState(currentState); } // NEW Pattern: let currentState = state; if (!currentState) { currentState = await runtime.composeState(message); } else { currentState = await runtime.composeState(message, ['RECENT_MESSAGES']); } 6.3 Context/Prompt Generation‚Äã Replace composeContext with composePromptFromState: // OLD: const context = composeContext({ state: currentState, template: yourTemplate, }); // NEW: const prompt = composePromptFromState({ state: currentState, template: yourTemplate, }); 6.4 Template Migration - JSON to XML Format‚Äã Update Template Content:‚Äã Templates should be updated from requesting JSON responses to XML format for use with parseKeyValueXml. // OLD Template Pattern (JSON): const template = `Respond with a JSON markdown block containing only the extracted values. Example response for a new token: \\`\\`\\`json { &quot;name&quot;: &quot;Test Token&quot;, &quot;symbol&quot;: &quot;TEST&quot; } \\`\\`\\` Given the recent messages, extract the following information: - Name - Symbol`; // NEW Template Pattern (XML): const template = `Respond with an XML block containing only the extracted values. Use key-value pairs. Example response for a new token: &lt;response&gt; &lt;name&gt;Test Token&lt;/name&gt; &lt;symbol&gt;TEST&lt;/symbol&gt; &lt;/response&gt; ## Recent Messages {{recentMessages}} Given the recent messages, extract the following information about the requested token creation: - Name - Symbol Respond with an XML block containing only the extracted values.`; 6.5 Content Generation Migration‚Äã Replace generateObject with runtime.useModel: // OLD Pattern: const content = await generateObject({ runtime, context: context, modelClass: ModelClass.SMALL, }); // NEW Pattern: const result = await runtime.useModel(ModelType.TEXT_SMALL, { prompt, }); const content = parseKeyValueXml(result); Important Changes: ModelClass.SMALL ‚Üí ModelType.TEXT_SMALLFirst parameter is the model type enum valueSecond parameter is an object with prompt and optional stopSequencesParse the result with parseKeyValueXml which extracts key-value pairs from XML responses 6.6 Content Interface and Validation‚Äã Define Content Interface:‚Äã export interface YourActionContent extends Content { // Define your required fields name: string; symbol: string; } Create Validation Function:‚Äã function isYourActionContent(_runtime: IAgentRuntime, content: any): content is YourActionContent { elizaLogger.debug('Content for validation', content); return typeof content.name === 'string' &amp;&amp; typeof content.symbol === 'string'; } 6.7 Handler Pattern Updates‚Äã Complete handler migration example: handler: async ( runtime: IAgentRuntime, message: Memory, state: State, _options: { [key: string]: unknown }, callback?: HandlerCallback ) =&gt; { elizaLogger.log(&quot;Starting YOUR_ACTION handler...&quot;); // 1. Initialize or update state let currentState = state; if (!currentState) { currentState = await runtime.composeState(message); } else { currentState = await runtime.composeState(message, [ &quot;RECENT_MESSAGES&quot;, ]); } // 2. Compose prompt from state const prompt = composePromptFromState({ state: currentState, template: yourTemplate, }); // 3. Generate content using the model const result = await runtime.useModel(ModelType.TEXT_SMALL, { prompt, stopSequences: [], }); // 4. Parse the result const content = parseKeyValueXml(result); elizaLogger.debug(&quot;Parsed content:&quot;, content); // 5. Validate content if (!isYourActionContent(runtime, content)) { elizaLogger.error(&quot;Invalid content for YOUR_ACTION action.&quot;); callback?.({ text: &quot;Unable to process request. Invalid content provided.&quot;, content: { error: &quot;Invalid content&quot; }, }); return false; } // 6. Execute your action logic try { // Your action implementation here const result = await yourActionLogic(runtime, content); callback?.({ text: `Success message with ${content.name}`, content: result, }); return true; } catch (error) { elizaLogger.error(&quot;Action failed:&quot;, error); callback?.({ text: &quot;Action failed. Please try again.&quot;, content: { error: error.message }, }); return false; } }, 6.8 Action Examples Structure‚Äã The action examples structure remains largely the same, but ensure they follow this pattern: examples: [ [ { user: &quot;{{name1}}&quot;, // Note: &quot;user&quot; instead of &quot;name&quot; for user messages content: { text: &quot;User input text here&quot;, }, }, { name: &quot;{{name2}}&quot;, // Agent response uses &quot;name&quot; content: { action: &quot;YOUR_ACTION_NAME&quot;, // Include the expected parsed fields name: &quot;Expected Name&quot;, symbol: &quot;Expected Symbol&quot;, }, }, ], ] as ActionExample[][], Important Migration Notes:‚Äã Update templates to request XML format instead of JSONThe parseKeyValueXml function parses XML responses into key-value objectsAlways include error handling and validationUse elizaLogger for debuggingThe callback pattern remains the same for success/error responsesModel types have changed from ModelClass to ModelType enum Step 7: Migrate Providers‚Äã 7.1 Provider Interface Changes‚Äã The Provider interface has been significantly enhanced with new required and optional properties: // OLD Provider Interface: export interface Provider { get: (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; Promise&lt;any&gt;; } // NEW Provider Interface: interface Provider { name: string; // REQUIRED: Unique identifier for the provider description?: string; // Optional: Description of what the provider does dynamic?: boolean; // Optional: Whether the provider is dynamic position?: number; // Optional: Position in provider list (+ or -) private?: boolean; // Optional: Whether provider is private (not shown in list) get: ( runtime: IAgentRuntime, message: Memory, state: State // Note: state is no longer optional ) =&gt; Promise&lt;ProviderResult&gt;; // Returns ProviderResult instead of any } 7.2 ProviderResult Interface‚Äã The get method must now return a ProviderResult object instead of any: interface ProviderResult { values?: { [key: string]: any; }; data?: { [key: string]: any; }; text?: string; } 7.3 Migration Steps‚Äã Step 1: Add Required name Property‚Äã Every provider must have a unique name property: // OLD: const myProvider: Provider = { get: async (runtime, message, state) =&gt; { // ... }, }; // NEW: const myProvider: Provider = { name: 'myProvider', // REQUIRED get: async (runtime, message, state) =&gt; { // ... }, }; Step 2: Update Return Type‚Äã Change your return statements to return a ProviderResult object: // OLD: return 'Some text response'; // or return { someData: 'value' }; // NEW: return { text: 'Some text response', }; // or return { data: { someData: 'value' }, }; // or return { text: 'Some text', values: { key1: 'value1' }, data: { complex: { nested: 'data' } }, }; Step 3: Handle Non-Optional State‚Äã The state parameter is no longer optional. Update your function signature: // OLD: get: async (runtime, message, state?) =&gt; { if (!state) { // handle missing state } }; // NEW: get: async (runtime, message, state) =&gt; { // state is always provided }; 7.4 Complete Migration Examples‚Äã Example 1: Simple Text Provider‚Äã // OLD Implementation: const simpleProvider: Provider = { get: async (runtime, message, state?) =&gt; { return 'Hello from provider'; }, }; // NEW Implementation: const simpleProvider: Provider = { name: 'simpleProvider', description: 'A simple text provider', get: async (runtime, message, state) =&gt; { return { text: 'Hello from provider', }; }, }; Example 2: Data Provider‚Äã // OLD Implementation: const dataProvider: Provider = { get: async (runtime, message, state?) =&gt; { const data = await fetchSomeData(); return data; }, }; // NEW Implementation: const dataProvider: Provider = { name: 'dataProvider', description: 'Fetches external data', dynamic: true, get: async (runtime, message, state) =&gt; { const data = await fetchSomeData(); return { data: data, text: `Fetched ${Object.keys(data).length} items`, }; }, }; Example 3: Complex Provider with All Options‚Äã // NEW Implementation with all options: const complexProvider: Provider = { name: 'complexProvider', description: 'A complex provider with all options', dynamic: true, position: 10, // Higher priority in provider list private: false, // Shown in provider list get: async (runtime, message, state) =&gt; { elizaLogger.debug('complexProvider::get'); const values = { timestamp: Date.now(), userId: message.userId, }; const data = await fetchComplexData(); const text = formatDataAsText(data); return { text, values, data, }; }, }; 7.5 Provider Options Explained‚Äã name (required): Unique identifier used to reference the providerdescription: Human-readable description of what the provider doesdynamic: Set to true if the provider returns different data based on contextposition: Controls ordering in provider lists (positive = higher priority)private: Set to true to hide from public provider lists (must be called explicitly) 7.6 Best Practices‚Äã Always include descriptive names: Use clear, descriptive names that indicate what the provider doesReturn appropriate result types: Use text for human-readable responsesUse data for structured data that other components might processUse values for simple key-value pairs that might be used in templates Add descriptions: Help other developers understand your provider's purposeUse logging: Include debug logs to help troubleshoot issuesHandle errors gracefully: Return meaningful error messages in the text field Important Provider Migration Notes:‚Äã The name property is now required for all providersReturn type must be ProviderResult object, not raw valuesThe state parameter is no longer optionalConsider adding optional properties (description, dynamic, etc.) for better documentation and behaviorTest thoroughly as the runtime may handle providers differently based on these new properties","keywords":"","version":"1.0.17"},{"title":"Quickstart Guide","type":0,"sectionRef":"#","url":"/docs/quickstart","content":"Quickstart Guide This guide will get you from zero to a running AI agent in under 5 minutes. Prerequisites‚Äã Node.js 23+Bun package managerGitOllama or an API key from Openrouter, OpenAI, Anthropic, etc Note for Windows Users: WSL 2 is required to run ElizaOS. 1. Install ElizaOS CLI‚Äã bun install -g @elizaos/cli 2. Create Your First Project‚Äã elizaos create my-agent cd my-agent 3. Configure Your API Key‚Äã Your new project includes a .env.example file. You need to copy it to a new .env file to store your secret API keys. # Copy the environment template to a new .env file cp .env.example .env # Open the file for editing elizaos env edit-local # Add either OPENAI_API_KEY or ANTHROPIC_API_KEY Your agent will not work without an API key. For more details on environment configuration, see the Environment Guide. 4. Start Your Agent‚Äã elizaos start Your agent is now running at http://localhost:3000! üéâ What's Next?‚Äã Congratulations, you have a running ElizaOS agent! Here's where to go next to explore its full power: Explore all CLI Commands: See everything you can do from the command line, including managing agents and plugins.Customize Your Agent: Learn how to edit your agent's personality, knowledge, and abilities using Character Files.Understand the Project Structure: Get a detailed breakdown of every file in your new project.Extend Your Agent with Plugins: Discover how to add new capabilities to your agent. Important Note: Your agent includes the @elizaos/plugin-bootstrap plugin by default, which is essential for communication. This plugin handles all message processing, response generation, and platform interactions. Without it, your agent won't be able to respond to messages. Only remove it if you're building a completely custom event handling system.","keywords":"quickstart install setup run create agent","version":"1.0.17"},{"title":"Add agent to channel","type":0,"sectionRef":"#","url":"/docs/rest/add-agent-to-channel","content":"Add agent to channel POST /api/messaging/central-channels/:channelId/agents Add an agent to a specific channel Request‚Äã Responses‚Äã 200400404500 Agent added successfully","keywords":"","version":"1.0.17"},{"title":"Add agent to server","type":0,"sectionRef":"#","url":"/docs/rest/add-agent-to-server","content":"Add agent to server POST /api/messaging/servers/:serverId/agents Add an agent to a server Request‚Äã Responses‚Äã 200400404500 Agent added successfully","keywords":"","version":"1.0.17"},{"title":"Service Registration Pattern","type":0,"sectionRef":"#","url":"/docs/plugins/service-registration-pattern","content":"Service Registration Pattern This document describes the complete service registration pattern in Eliza, providing type safety and automatic type inference. Core Concepts‚Äã Service Type Registry: A global registry of service types that can be extended by pluginsType-Safe Registration: Services are registered with full type safetyAutomatic Type Inference: The runtime can infer service types from registration Creating Services‚Äã Method 1: Using Service Builder‚Äã The service builder provides a fluent API for creating services: import { createService, ServiceType } from '@elizaos/core'; // Define your service interface interface MyCustomService extends Service { doSomething(): Promise&lt;string&gt;; } // Create the service using the builder const MyServiceClass = createService&lt;MyCustomService&gt;('my_custom_service') .withDescription('My custom service') .withStart(async (runtime) =&gt; { const service = new MyServiceImpl(runtime); await service.initialize(); return service; }) .withStop(async () =&gt; { // Cleanup logic }) .build(); // Implementation class MyServiceImpl extends Service implements MyCustomService { async doSomething(): Promise&lt;string&gt; { return 'Hello from custom service!'; } async stop(): Promise&lt;void&gt; { // Cleanup } } Method 2: Using defineService Helper‚Äã For simpler cases, use the defineService helper: import { defineService, type ServiceDefinition } from '@elizaos/core'; const weatherServiceDef: ServiceDefinition&lt;WeatherService&gt; = { serviceType: 'weather', description: 'Provides weather information', start: async (runtime) =&gt; { return new WeatherService(runtime); }, stop: async () =&gt; { console.log('Weather service stopped'); }, }; export const WeatherServiceClass = defineService(weatherServiceDef); Method 3: Traditional Class Definition‚Äã You can still use the traditional approach: export class TraditionalService extends Service { static serviceType = 'traditional' as const; capabilityDescription = 'Traditional service'; static async start(runtime: IAgentRuntime): Promise&lt;TraditionalService&gt; { return new TraditionalService(runtime); } async stop(): Promise&lt;void&gt; { // Cleanup } } Extending Service Types‚Äã 1. Declare Module Augmentation‚Äã // In your plugin's types.ts declare module '@elizaos/core' { interface ServiceTypeRegistry { WEATHER: 'weather'; BLOCKCHAIN: 'blockchain'; ANALYTICS: 'analytics'; } // Optional: Map service types to their classes for better type inference interface ServiceClassMap { weather: typeof WeatherService; blockchain: typeof BlockchainService; analytics: typeof AnalyticsService; } } 2. Export Service Type Constants‚Äã export const PluginServiceTypes = { WEATHER: 'weather', BLOCKCHAIN: 'blockchain', ANALYTICS: 'analytics', } as const satisfies Partial&lt;ServiceTypeRegistry&gt;; Using Services‚Äã Type-Safe Service Access‚Äã // Method 1: Generic type parameter const weatherService = runtime.getService&lt;WeatherService&gt;('weather'); // Method 2: Type-safe getter const typedService = runtime.getTypedService&lt;WeatherService&gt;('weather'); // Method 3: Check if service exists if (runtime.hasService('weather')) { const service = runtime.getService&lt;WeatherService&gt;('weather'); // Use service } // Method 4: Get all registered services const registeredTypes = runtime.getRegisteredServiceTypes(); console.log('Available services:', registeredTypes); In Actions and Evaluators‚Äã export const getWeatherAction: Action = { name: 'GET_WEATHER', description: 'Get weather information', handler: async (runtime, message, state) =&gt; { const weatherService = runtime.getService&lt;WeatherService&gt;('weather'); if (!weatherService) { throw new Error('Weather service not available'); } const location = state.values.location || 'New York'; const weather = await weatherService.getCurrentWeather(location); return { text: `The weather in ${location} is ${weather.condition} with a temperature of ${weather.temperature}¬∞C`, }; }, validate: async (runtime) =&gt; { return runtime.hasService('weather'); }, }; Complete Plugin Example‚Äã // types.ts import { type Service } from '@elizaos/core'; declare module '@elizaos/core' { interface ServiceTypeRegistry { NOTIFICATION: 'notification'; } } export const NotificationServiceType = 'notification' as const; export interface NotificationService extends Service { sendNotification(title: string, message: string): Promise&lt;void&gt;; getNotificationHistory(): Promise&lt;Notification[]&gt;; } // service.ts import { defineService } from '@elizaos/core'; import { NotificationServiceType, type NotificationService } from './types'; class NotificationServiceImpl extends Service implements NotificationService { private notifications: Notification[] = []; async sendNotification(title: string, message: string): Promise&lt;void&gt; { const notification = { title, message, timestamp: Date.now() }; this.notifications.push(notification); // Send actual notification } async getNotificationHistory(): Promise&lt;Notification[]&gt; { return this.notifications; } async stop(): Promise&lt;void&gt; { this.notifications = []; } } export const NotificationServiceClass = defineService&lt;NotificationService&gt;({ serviceType: NotificationServiceType, description: 'Handles system notifications', start: async (runtime) =&gt; new NotificationServiceImpl(runtime), }); // plugin.ts import { type Plugin } from '@elizaos/core'; import { NotificationServiceClass } from './service'; import { sendNotificationAction } from './actions'; export const notificationPlugin: Plugin = { name: 'notification-plugin', description: 'Adds notification capabilities', services: [NotificationServiceClass], actions: [sendNotificationAction], }; Best Practices‚Äã Always extend the ServiceTypeRegistry for new service typesUse descriptive service type names (lowercase, underscore-separated)Export service type constants for use in your pluginDocument your service interface for other developersValidate service availability before using in actions/evaluatorsHandle missing services gracefully with appropriate error messagesClean up resources in the stop() method Runtime Behavior‚Äã Services are initialized during plugin registrationServices can depend on other services (check availability in start())The runtime maintains a single instance of each service typeServices are stopped in reverse registration order during shutdownService types are validated at registration time","keywords":"","version":"1.0.17"},{"title":"Clear system logs","type":0,"sectionRef":"#","url":"/docs/rest/clear-logs","content":"Clear system logs DELETE /api/server/logs Clear all system logs Responses‚Äã 200500 Logs cleared successfully","keywords":"","version":"1.0.17"},{"title":"ElizaOS State Management & Providers Guide - v1.x","type":0,"sectionRef":"#","url":"/docs/plugins/migration/claude-code/state-and-providers-guide","content":"ElizaOS State Management &amp; Providers Guide - v1.x Important: This guide provides comprehensive documentation for the composeState method and Providers in v1.x, including comparisons with v0. Table of Contents‚Äã State Management with composeState Basic UsageState FilteringAvailable State KeysPerformance Optimization Providers in v1 Provider InterfaceCreating ProvidersProvider OptionsProvider Best Practices v0 vs v1 Comparison State Management with composeState‚Äã The composeState method is the central mechanism for building the context state that powers agent responses. In v1, it has been enhanced with powerful filtering capabilities. Basic Usage‚Äã // v1: Basic state composition const state = await runtime.composeState(message); This creates a complete state object containing all available context: Agent information (bio, lore, personality)Conversation historyRoom and participant detailsAvailable actions and evaluatorsKnowledge and RAG dataProvider-generated context State Filtering‚Äã The v1 composeState method introduces filtering capabilities for performance optimization: // v1: Signature composeState( message: Memory, includeList?: string[], // Keys to include onlyInclude?: boolean, // If true, ONLY include listed keys skipCache?: boolean // Skip caching mechanism ): Promise&lt;State&gt; Filtering Examples‚Äã // Include only specific state keys const minimalState = await runtime.composeState( message, ['agentName', 'bio', 'recentMessages'], true // onlyInclude = true ); // Update only specific parts of existing state const updatedState = await runtime.composeState( message, ['RECENT_MESSAGES', 'GOALS'] // Update only these ); // Skip cache for fresh data const freshState = await runtime.composeState( message, undefined, false, true // skipCache = true ); Available State Keys‚Äã Here are the primary state keys you can filter: Core Agent Information‚Äã agentId - Agent's UUIDagentName - Agent's display namebio - Agent biography (string or selected from array)lore - Random selection of lore bitsadjective - Random adjective from charactertopic / topics - Agent's interests Conversation Context‚Äã recentMessages - Formatted recent messagesrecentMessagesData - Raw message Memory objectsrecentPosts - Formatted posts in threadattachments - Formatted attachment information Interaction History‚Äã recentMessageInteractions - Past interactions as messagesrecentPostInteractions - Past interactions as postsrecentInteractionsData - Raw interaction Memory[] Character Examples‚Äã characterPostExamples - Example posts from charactercharacterMessageExamples - Example conversations Directions &amp; Style‚Äã messageDirections - Message style guidelinespostDirections - Post style guidelines Room &amp; Participants‚Äã roomId - Current room UUIDactors - Formatted actor informationactorsData - Raw Actor[] arraysenderName - Name of message sender Goals &amp; Actions‚Äã goals - Formatted goals stringgoalsData - Raw Goal[] arrayactionNames - Available action namesactions - Formatted action descriptionsactionExamples - Action usage examples Evaluators‚Äã evaluators - Formatted evaluator informationevaluatorNames - List of evaluator namesevaluatorExamples - Evaluator examplesevaluatorsData - Raw Evaluator[] array Knowledge‚Äã knowledge - Formatted knowledge textknowledgeData - Knowledge itemsragKnowledgeData - RAG knowledge items Providers‚Äã providers - Additional context from providers Performance Optimization‚Äã Use filtering to optimize performance by only computing needed state: // Minimal state for simple responses const quickResponse = await runtime.composeState( message, ['agentName', 'bio', 'recentMessages', 'messageDirections'], true ); // Full state for complex decision-making const fullState = await runtime.composeState(message); // Update pattern for ongoing conversations let state = await runtime.composeState(message); // ... later in conversation ... state = await runtime.composeState(newMessage, ['RECENT_MESSAGES', 'GOALS', 'attachments']); Providers in v1‚Äã Providers supply dynamic contextual information to the agent, acting as the agent's &quot;senses&quot; for perceiving external data. Provider Interface‚Äã interface Provider { // REQUIRED: Unique identifier name: string; // Optional metadata description?: string; dynamic?: boolean; position?: number; private?: boolean; // The data retrieval method get: (runtime: IAgentRuntime, message: Memory, state: State) =&gt; Promise&lt;ProviderResult&gt;; } interface ProviderResult { values?: { [key: string]: any; }; data?: { [key: string]: any; }; text?: string; } Creating Providers‚Äã Simple Text Provider‚Äã const weatherProvider: Provider = { name: 'weatherProvider', description: 'Provides current weather information', dynamic: true, get: async (runtime, message, state) =&gt; { const weather = await fetchWeatherData(); return { text: `Current weather: ${weather.temp}¬∞F, ${weather.condition}`, values: { temperature: weather.temp, condition: weather.condition, }, }; }, }; Complex Data Provider‚Äã const marketDataProvider: Provider = { name: 'marketDataProvider', description: 'Provides real-time market data', dynamic: true, position: 10, // Higher priority get: async (runtime, message, state) =&gt; { const symbols = extractSymbolsFromMessage(message.content.text); const marketData = await fetchMarketData(symbols); const summary = formatMarketSummary(marketData); return { text: summary, data: marketData, values: { mentionedSymbols: symbols, marketStatus: marketData.status, }, }; }, }; Conditional Provider‚Äã const contextualProvider: Provider = { name: 'contextualProvider', description: 'Provides context based on conversation', get: async (runtime, message, state) =&gt; { // Access state to make decisions const topic = state.topic; const recentTopics = analyzeRecentTopics(state.recentMessagesData); if (!topic || !recentTopics.includes(topic)) { return { text: '' }; // No additional context needed } const relevantInfo = await fetchTopicInfo(topic); return { text: `Relevant ${topic} information: ${relevantInfo}`, data: { topic, info: relevantInfo }, }; }, }; Provider Options‚Äã dynamic Property‚Äã Set to true for providers that return different data based on context: const timeProvider: Provider = { name: 'timeProvider', dynamic: true, // Time always changes get: async () =&gt; ({ text: `Current time: ${new Date().toLocaleString()}`, values: { timestamp: Date.now() }, }), }; position Property‚Äã Controls provider priority (higher = higher priority): const criticalProvider: Provider = { name: 'criticalProvider', position: 100, // Will be processed before lower position providers get: async () =&gt; ({ text: 'Critical information...' }), }; private Property‚Äã Hide from public provider lists: const internalProvider: Provider = { name: 'internalProvider', private: true, // Won't appear in provider lists get: async () =&gt; ({ text: 'Internal data...' }), }; Provider Best Practices‚Äã Always Return ProviderResult // ‚ùå Bad - returning raw value get: async () =&gt; 'Some text'; // ‚úÖ Good - returning ProviderResult get: async () =&gt; ({ text: 'Some text' }); Use Appropriate Return Fields return { // Human-readable summary text: 'Market is up 2.5% today', // Simple key-value pairs for templates values: { marketChange: 2.5, marketStatus: 'bullish' }, // Complex nested data for processing data: { stocks: [...], analysis: {...} } }; Handle Errors Gracefully get: async (runtime, message, state) =&gt; { try { const data = await fetchExternalData(); return { text: formatData(data), data }; } catch (error) { elizaLogger.error('Provider error:', error); return { text: 'Unable to fetch data at this time', values: { error: true }, }; } }; Optimize Performance const cachedProvider: Provider = { name: 'cachedProvider', dynamic: false, // Indicates static data get: async (runtime) =&gt; { // Check cache first const cached = await runtime.getSetting('providerCache'); if (cached &amp;&amp; !isExpired(cached)) { return { data: cached.data }; } // Fetch fresh data const fresh = await fetchData(); await runtime.setSetting('providerCache', { data: fresh, timestamp: Date.now(), }); return { data: fresh }; }, }; v0 vs v1 Comparison‚Äã composeState Changes‚Äã Method Signature‚Äã // v0: Simple with additional keys composeState( message: Memory, additionalKeys?: { [key: string]: unknown } ): Promise&lt;State&gt; // v1: Advanced with filtering composeState( message: Memory, includeList?: string[], onlyInclude?: boolean, skipCache?: boolean ): Promise&lt;State&gt; Key Differences:‚Äã Filtering: v1 allows selective state compositionPerformance: Can request only needed state keysCaching: Explicit cache control with skipCacheUpdate Pattern: Use same method for updates with specific keys Migration Example:‚Äã // v0: Update pattern state = await runtime.updateRecentMessageState(state); // v1: Update pattern state = await runtime.composeState(message, ['RECENT_MESSAGES']); Provider Changes‚Äã Interface Changes‚Äã // v0: Minimal interface interface Provider { get: (runtime, message, state?) =&gt; Promise&lt;any&gt;; } // v1: Rich interface interface Provider { name: string; // REQUIRED description?: string; dynamic?: boolean; position?: number; private?: boolean; get: (runtime, message, state) =&gt; Promise&lt;ProviderResult&gt;; } Return Type Changes‚Äã // v0: Return anything return 'Some text'; return { data: 'value' }; // v1: Return ProviderResult return { text: 'Human readable', values: { key: 'value' }, data: { complex: 'object' }, }; Key Differences:‚Äã Required Name: Every provider must have unique nameStructured Returns: Must return ProviderResult objectRich Metadata: Can specify behavior with optionsState Parameter: No longer optional in get methodBetter Organization: Clear separation of text, values, and data Migration Checklist‚Äã Add name property to all providers Update return statements to use ProviderResult format Remove optional ? from state parameter in get method Consider adding description for documentation Use dynamic: true for context-dependent providers Replace updateRecentMessageState with filtered composeState Optimize performance by filtering state keys Add error handling with graceful fallbacks Consider caching strategies for expensive operations Examples &amp; Patterns‚Äã State Filtering Pattern‚Äã // Initial load - get essential state const initialState = await runtime.composeState( message, ['agentName', 'bio', 'recentMessages', 'actions', 'providers'], true ); // Process message... // Update only what changed const updatedState = await runtime.composeState(message, [ 'RECENT_MESSAGES', 'goals', 'attachments', ]); Provider Chain Pattern‚Äã const providers = [ weatherProvider, // position: 10 newsProvider, // position: 5 marketProvider, // position: 15 fallbackProvider, // position: 1 ]; // Will be processed in order: market, weather, news, fallback runtime.providers = providers.sort((a, b) =&gt; (b.position || 0) - (a.position || 0)); Conditional State Building‚Äã const buildState = async (message: Memory, isDetailedResponse: boolean) =&gt; { const baseKeys = ['agentName', 'bio', 'recentMessages']; const keys = isDetailedResponse ? [...baseKeys, 'lore', 'topics', 'characterMessageExamples', 'knowledge'] : baseKeys; return runtime.composeState(message, keys, true); }; ","keywords":"","version":"1.0.17"},{"title":"Complete message processing","type":0,"sectionRef":"#","url":"/docs/rest/complete-message","content":"Complete message processing POST /api/messaging/complete Notify that message processing is complete Request‚Äã Responses‚Äã 200400500 Completion event emitted","keywords":"","version":"1.0.17"},{"title":"Process conversation and return speech","type":0,"sectionRef":"#","url":"/docs/rest/conversation-to-speech","content":"Process conversation and return speech POST /api/agents/:agentId/speech/conversation Processes a conversational message and returns synthesized speech Request‚Äã Responses‚Äã 200400404500 Audio stream with synthesized speech","keywords":"","version":"1.0.17"},{"title":"Create a new agent","type":0,"sectionRef":"#","url":"/docs/rest/create-agent","content":"Create a new agent POST /api/agents Creates a new agent from character configuration Request‚Äã Responses‚Äã 201400 Agent created successfully","keywords":"","version":"1.0.17"},{"title":"Create central channel","type":0,"sectionRef":"#","url":"/docs/rest/create-central-channel","content":"Create central channel POST /api/messaging/central-channels Create a channel in the central database Request‚Äã Responses‚Äã 201400500 Central channel created successfully","keywords":"","version":"1.0.17"},{"title":"Create a world for an agent","type":0,"sectionRef":"#","url":"/docs/rest/create-agent-world","content":"Create a world for an agent POST /api/agents/:agentId/worlds Create a new world for a specific agent Request‚Äã Responses‚Äã 201400404500 World created successfully","keywords":"","version":"1.0.17"},{"title":"Create channel","type":0,"sectionRef":"#","url":"/docs/rest/create-channel","content":"Create channel POST /api/messaging/channels Create a new channel Request‚Äã Responses‚Äã 201400500 Channel created successfully","keywords":"","version":"1.0.17"},{"title":"Create group channel","type":0,"sectionRef":"#","url":"/docs/rest/create-group-channel","content":"Create group channel POST /api/messaging/group-channels Create a group channel with multiple participants Request‚Äã Responses‚Äã 201400500 Group channel created successfully","keywords":"","version":"1.0.17"},{"title":"Create a room","type":0,"sectionRef":"#","url":"/docs/rest/create-memory-room","content":"Create a room POST /api/memory/:agentId/rooms Create a new room for an agent Request‚Äã Responses‚Äã 201400404500 Room created successfully","keywords":"","version":"1.0.17"},{"title":"Create a room","type":0,"sectionRef":"#","url":"/docs/rest/create-room","content":"Create a room POST /api/agents/:agentId/rooms Creates a new room for an agent Request‚Äã Responses‚Äã 201400404500 Room created successfully","keywords":"","version":"1.0.17"},{"title":"Create server","type":0,"sectionRef":"#","url":"/docs/rest/create-server","content":"Create server POST /api/messaging/servers Create a new server Request‚Äã Responses‚Äã 201400500 Server created successfully","keywords":"","version":"1.0.17"},{"title":"Delete an agent","type":0,"sectionRef":"#","url":"/docs/rest/delete-agent","content":"Delete an agent DELETE /api/agents/:agentId Permanently deletes an agent Request‚Äã Responses‚Äã 200202400404408409500 Agent deleted successfully","keywords":"","version":"1.0.17"},{"title":"Delete all channel messages","type":0,"sectionRef":"#","url":"/docs/rest/delete-all-channel-messages","content":"Delete all channel messages DELETE /api/messaging/central-channels/:channelId/messages Delete all messages in a channel Request‚Äã Responses‚Äã 200404 Messages deleted successfully","keywords":"","version":"1.0.17"},{"title":"Delete all agent memories","type":0,"sectionRef":"#","url":"/docs/rest/delete-all-agent-memories","content":"Delete all agent memories DELETE /api/memory/:agentId/memories Delete all memories for a specific agent Request‚Äã Responses‚Äã 200400404500 Memories deleted successfully","keywords":"","version":"1.0.17"},{"title":"Delete a specific log entry","type":0,"sectionRef":"#","url":"/docs/rest/delete-agent-log","content":"Delete a specific log entry DELETE /api/agents/:agentId/logs/:logId Delete a specific log entry for an agent Request‚Äã Responses‚Äã 204400404500 Log entry deleted successfully","keywords":"","version":"1.0.17"},{"title":"Delete channel message","type":0,"sectionRef":"#","url":"/docs/rest/delete-channel-message","content":"Delete channel message DELETE /api/messaging/central-channels/:channelId/messages/:messageId Delete a specific message from a channel Request‚Äã Responses‚Äã 200404 Message deleted successfully","keywords":"","version":"1.0.17"},{"title":"Delete all channel messages by user","type":0,"sectionRef":"#","url":"/docs/rest/delete-all-user-channel-messages","content":"Delete all channel messages by user DELETE /api/messaging/central-channels/:channelId/messages/all Delete all messages by a specific user in a channel Request‚Äã Responses‚Äã 200400404 Messages deleted successfully","keywords":"","version":"1.0.17"},{"title":"Delete channel","type":0,"sectionRef":"#","url":"/docs/rest/delete-channel","content":"Delete channel DELETE /api/messaging/central-channels/:channelId Delete a channel Request‚Äã Responses‚Äã 200404 Channel deleted successfully","keywords":"","version":"1.0.17"},{"title":"Delete a room","type":0,"sectionRef":"#","url":"/docs/rest/delete-room","content":"Delete a room DELETE /api/agents/:agentId/rooms/:roomId Deletes a specific room Request‚Äã Responses‚Äã 204400404500 Room deleted successfully","keywords":"","version":"1.0.17"},{"title":"Delete all memories for a room","type":0,"sectionRef":"#","url":"/docs/rest/delete-room-memories","content":"Delete all memories for a room DELETE /api/memory/:agentId/memories/all/:roomId Delete all memories for a specific room Request‚Äã Responses‚Äã 204400404500 Memories deleted successfully","keywords":"","version":"1.0.17"},{"title":"Eliza OS API","type":0,"sectionRef":"#","url":"/docs/rest/eliza-os-api","content":"Version: 1.0.10 Eliza OS API API documentation for Eliza OS v1.0.10 - A flexible and scalable AI agent framework. This API is designed to be used with a locally running Eliza instance. Endpoints allow for creating, managing, and interacting with AI agents through a REST interface. The API is organized into the following domains: System: System-wide operations and environment managementAgents: Agent lifecycle and management operationsMemory: Agent memory and room managementMessaging: Message handling, channels, and serversAudio: Audio processing and speech synthesisMedia: File upload and media managementTEE: Trusted Execution Environment operationsWebSocket: Real-time communication via Socket.IO Contact Eliza OS Community:URL: https://github.com/elizaos/eliza","keywords":"","version":"1.0.17"},{"title":"Get agent details","type":0,"sectionRef":"#","url":"/docs/rest/get-agent","content":"Get agent details GET /api/agents/:agentId Returns detailed information about a specific agent Request‚Äã Responses‚Äã 200400404500 Agent details","keywords":"","version":"1.0.17"},{"title":"Get agent logs","type":0,"sectionRef":"#","url":"/docs/rest/get-agent-logs","content":"Get agent logs GET /api/agents/:agentId/logs Retrieve logs for a specific agent Request‚Äã Responses‚Äã 200400404500 Agent logs retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Generate speech from text","type":0,"sectionRef":"#","url":"/docs/rest/generate-speech","content":"Generate speech from text POST /api/agents/:agentId/speech/generate Generates speech from text using the agent's voice Request‚Äã Responses‚Äã 200400404500 Audio stream with generated speech","keywords":"","version":"1.0.17"},{"title":"Get agent panels","type":0,"sectionRef":"#","url":"/docs/rest/get-agent-panels","content":"Get agent panels GET /api/agents/:agentId/panels Get public UI panels available for this agent from its plugins Request‚Äã Responses‚Äã 200400404500 Agent panels retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Get agent memories","type":0,"sectionRef":"#","url":"/docs/rest/get-agent-memories","content":"Get agent memories GET /api/memory/:agentId/memories Retrieve all memories for a specific agent Request‚Äã Responses‚Äã 200400404500 Agent memories retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Get agent rooms","type":0,"sectionRef":"#","url":"/docs/rest/get-agent-rooms","content":"Get agent rooms GET /api/agents/:agentId/rooms Retrieves all rooms for a specific agent Request‚Äã Responses‚Äã 200400404500 Agent rooms","keywords":"","version":"1.0.17"},{"title":"Get central server channels","type":0,"sectionRef":"#","url":"/docs/rest/get-central-server-channels","content":"Get central server channels GET /api/messaging/central-servers/:serverId/channels Get all channels for a server from central database Request‚Äã Responses‚Äã 200404 Channels retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Get all worlds","type":0,"sectionRef":"#","url":"/docs/rest/get-all-worlds","content":"Get all worlds GET /api/agents/worlds Get all worlds across all agents Responses‚Äã 200500 Worlds retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Get central servers","type":0,"sectionRef":"#","url":"/docs/rest/get-central-servers","content":"Get central servers GET /api/messaging/central-servers Get all servers from central database Responses‚Äã 200500 Servers retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Get channel details","type":0,"sectionRef":"#","url":"/docs/rest/get-channel-details","content":"Get channel details GET /api/messaging/central-channels/:channelId/details Get details for a specific channel Request‚Äã Responses‚Äã 200404 Channel details retrieved","keywords":"","version":"1.0.17"},{"title":"Get channel info","type":0,"sectionRef":"#","url":"/docs/rest/get-channel-info","content":"Get channel info GET /api/messaging/central-channels/:channelId Get basic information for a specific channel (alias for details) Request‚Äã Responses‚Äã 200404 Channel info retrieved","keywords":"","version":"1.0.17"},{"title":"Get channel messages","type":0,"sectionRef":"#","url":"/docs/rest/get-channel-messages","content":"Get channel messages GET /api/messaging/central-channels/:channelId/messages Get messages for a channel Request‚Äã Responses‚Äã 200404 Messages retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Get channel participants","type":0,"sectionRef":"#","url":"/docs/rest/get-channel-participants","content":"Get channel participants GET /api/messaging/central-channels/:channelId/participants Get all participants in a channel Request‚Äã Responses‚Äã 200404 Participants retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Get server debug info","type":0,"sectionRef":"#","url":"/docs/rest/get-debug-servers","content":"Get server debug info GET /api/server/debug/servers Get debug information about active servers (debug endpoint) Responses‚Äã 200 Server debug information","keywords":"","version":"1.0.17"},{"title":"Get or create DM channel","type":0,"sectionRef":"#","url":"/docs/rest/get-dm-channel","content":"Get or create DM channel GET /api/messaging/dm-channel Get or create a direct message channel between users Request‚Äã Responses‚Äã 200400500 DM channel retrieved or created","keywords":"","version":"1.0.17"},{"title":"Health check endpoint","type":0,"sectionRef":"#","url":"/docs/rest/get-health","content":"Health check endpoint GET /api/server/health Detailed health check for the system Responses‚Äã 200503 System is healthy","keywords":"","version":"1.0.17"},{"title":"ElizaOS Plugin Testing Guide","type":0,"sectionRef":"#","url":"/docs/plugins/migration/claude-code/testing-guide","content":"ElizaOS Plugin Testing Guide This guide provides comprehensive instructions for writing tests for ElizaOS plugins using Bun's test runner. Table of Contents‚Äã Test Environment SetupCreating Test UtilitiesTesting ActionsTesting ProvidersTesting EvaluatorsTesting ServicesTesting Event HandlersAdvanced Testing PatternsBest PracticesRunning Tests 1. Test Environment Setup‚Äã Directory Structure‚Äã src/ __tests__/ test-utils.ts # Shared test utilities and mocks index.test.ts # Main plugin tests actions.test.ts # Action tests providers.test.ts # Provider tests evaluators.test.ts # Evaluator tests services.test.ts # Service tests actions/ providers/ evaluators/ services/ index.ts Required Dependencies‚Äã { &quot;devDependencies&quot;: { &quot;@types/bun&quot;: &quot;latest&quot;, &quot;bun-types&quot;: &quot;latest&quot; } } Base Test Imports‚Äã import { describe, expect, it, mock, beforeEach, afterEach, spyOn } from 'bun:test'; import { type IAgentRuntime, type Memory, type State, type HandlerCallback, type Action, type Provider, type Evaluator, ModelType, logger, } from '@elizaos/core'; 2. Creating Test Utilities‚Äã Create a comprehensive test-utils.ts file with reusable mock objects and helper functions: import { mock } from 'bun:test'; import { type IAgentRuntime, type Memory, type State, type Character, type UUID, type Content, type Room, type Entity, ChannelType, } from '@elizaos/core'; // Mock Runtime Type export type MockRuntime = Partial&lt;IAgentRuntime&gt; &amp; { agentId: UUID; character: Character; getSetting: ReturnType&lt;typeof mock&gt;; useModel: ReturnType&lt;typeof mock&gt;; composeState: ReturnType&lt;typeof mock&gt;; createMemory: ReturnType&lt;typeof mock&gt;; getMemories: ReturnType&lt;typeof mock&gt;; searchMemories: ReturnType&lt;typeof mock&gt;; updateMemory: ReturnType&lt;typeof mock&gt;; getRoom: ReturnType&lt;typeof mock&gt;; getParticipantUserState: ReturnType&lt;typeof mock&gt;; setParticipantUserState: ReturnType&lt;typeof mock&gt;; emitEvent: ReturnType&lt;typeof mock&gt;; getTasks: ReturnType&lt;typeof mock&gt;; providers: any[]; actions: any[]; evaluators: any[]; services: any[]; }; // Create Mock Runtime export function createMockRuntime(overrides: Partial&lt;MockRuntime&gt; = {}): MockRuntime { return { agentId: 'test-agent-id' as UUID, character: { name: 'Test Agent', bio: 'A test agent for unit testing', templates: { messageHandlerTemplate: 'Test template {{recentMessages}}', shouldRespondTemplate: 'Should respond {{recentMessages}}', }, } as Character, // Core methods with default implementations useModel: mock().mockResolvedValue('Mock response'), composeState: mock().mockResolvedValue({ values: { agentName: 'Test Agent', recentMessages: 'Test message', }, data: { room: { id: 'test-room-id', type: ChannelType.DIRECT, }, }, }), createMemory: mock().mockResolvedValue({ id: 'memory-id' }), getMemories: mock().mockResolvedValue([]), searchMemories: mock().mockResolvedValue([]), updateMemory: mock().mockResolvedValue(undefined), getSetting: mock().mockImplementation((key: string) =&gt; { const settings: Record&lt;string, string&gt; = { TEST_SETTING: 'test-value', API_KEY: 'test-api-key', // Add common settings your plugin might need }; return settings[key]; }), getRoom: mock().mockResolvedValue({ id: 'test-room-id', type: ChannelType.DIRECT, worldId: 'test-world-id', serverId: 'test-server-id', source: 'test', }), getParticipantUserState: mock().mockResolvedValue('ACTIVE'), setParticipantUserState: mock().mockResolvedValue(undefined), emitEvent: mock().mockResolvedValue(undefined), getTasks: mock().mockResolvedValue([]), // Provider/action/evaluator lists providers: [], actions: [], evaluators: [], services: [], // Override with custom implementations ...overrides, }; } // Create Mock Memory export function createMockMemory(overrides: Partial&lt;Memory&gt; = {}): Partial&lt;Memory&gt; { return { id: 'test-message-id' as UUID, roomId: 'test-room-id' as UUID, entityId: 'test-entity-id' as UUID, agentId: 'test-agent-id' as UUID, content: { text: 'Test message', channelType: ChannelType.DIRECT, source: 'direct', } as Content, createdAt: Date.now(), userId: 'test-user-id' as UUID, ...overrides, }; } // Create Mock State export function createMockState(overrides: Partial&lt;State&gt; = {}): Partial&lt;State&gt; { return { values: { agentName: 'Test Agent', recentMessages: 'User: Test message', ...overrides.values, }, data: { room: { id: 'test-room-id', type: ChannelType.DIRECT, }, ...overrides.data, }, ...overrides, }; } // Setup Action Test Helper export function setupActionTest( options: { runtimeOverrides?: Partial&lt;MockRuntime&gt;; messageOverrides?: Partial&lt;Memory&gt;; stateOverrides?: Partial&lt;State&gt;; } = {} ) { const mockRuntime = createMockRuntime(options.runtimeOverrides); const mockMessage = createMockMemory(options.messageOverrides); const mockState = createMockState(options.stateOverrides); const callbackFn = mock().mockResolvedValue([]); return { mockRuntime, mockMessage, mockState, callbackFn, }; } // Mock Logger Helper export function mockLogger() { spyOn(logger, 'error').mockImplementation(() =&gt; {}); spyOn(logger, 'warn').mockImplementation(() =&gt; {}); spyOn(logger, 'info').mockImplementation(() =&gt; {}); spyOn(logger, 'debug').mockImplementation(() =&gt; {}); } 3. Testing Actions‚Äã Basic Action Test Structure‚Äã // src/__tests__/actions.test.ts import { describe, expect, it, mock, beforeEach, afterEach } from 'bun:test'; import { myAction } from '../actions/myAction'; import { setupActionTest, mockLogger } from './test-utils'; import type { MockRuntime } from './test-utils'; import { type IAgentRuntime, type Memory, type State, type HandlerCallback, ModelType, } from '@elizaos/core'; describe('My Action', () =&gt; { let mockRuntime: MockRuntime; let mockMessage: Partial&lt;Memory&gt;; let mockState: Partial&lt;State&gt;; let callbackFn: HandlerCallback; beforeEach(() =&gt; { mockLogger(); const setup = setupActionTest(); mockRuntime = setup.mockRuntime; mockMessage = setup.mockMessage; mockState = setup.mockState; callbackFn = setup.callbackFn as HandlerCallback; }); afterEach(() =&gt; { mock.restore(); }); describe('validation', () =&gt; { it('should validate when conditions are met', async () =&gt; { // Setup message content that should validate mockMessage.content = { text: 'perform action', channelType: 'direct', }; const isValid = await myAction.validate( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State ); expect(isValid).toBe(true); }); it('should not validate when conditions are not met', async () =&gt; { // Setup message content that should not validate mockMessage.content = { text: 'unrelated message', channelType: 'direct', }; const isValid = await myAction.validate( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State ); expect(isValid).toBe(false); }); }); describe('handler', () =&gt; { it('should handle action successfully', async () =&gt; { // Mock runtime methods specific to this action mockRuntime.useModel = mock().mockResolvedValue({ action: 'PERFORM', parameters: { value: 'test' }, }); const result = await myAction.handler( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State, {}, callbackFn ); expect(result).toBe(true); expect(callbackFn).toHaveBeenCalledWith( expect.objectContaining({ text: expect.any(String), content: expect.any(Object), }) ); }); it('should handle errors gracefully', async () =&gt; { // Mock an error scenario mockRuntime.useModel = mock().mockRejectedValue(new Error('Model error')); await myAction.handler( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State, {}, callbackFn ); expect(callbackFn).toHaveBeenCalledWith( expect.objectContaining({ text: expect.stringContaining('error'), }) ); }); }); }); Testing Async Actions‚Äã describe('Async Action', () =&gt; { it('should handle async operations', async () =&gt; { const setup = setupActionTest({ runtimeOverrides: { useModel: mock().mockImplementation(async (modelType) =&gt; { // Simulate async delay await new Promise((resolve) =&gt; setTimeout(resolve, 100)); return { result: 'async result' }; }), }, }); const result = await asyncAction.handler( setup.mockRuntime as IAgentRuntime, setup.mockMessage as Memory, setup.mockState as State, {}, setup.callbackFn as HandlerCallback ); expect(result).toBe(true); expect(setup.callbackFn).toHaveBeenCalled(); }); }); 4. Testing Providers‚Äã // src/__tests__/providers.test.ts import { describe, expect, it, mock, beforeEach, afterEach } from 'bun:test'; import { myProvider } from '../providers/myProvider'; import { createMockRuntime, createMockMemory, createMockState } from './test-utils'; import { type IAgentRuntime, type Memory, type State } from '@elizaos/core'; describe('My Provider', () =&gt; { let mockRuntime: any; let mockMessage: Partial&lt;Memory&gt;; let mockState: Partial&lt;State&gt;; beforeEach(() =&gt; { mockRuntime = createMockRuntime(); mockMessage = createMockMemory(); mockState = createMockState(); }); afterEach(() =&gt; { mock.restore(); }); it('should have required properties', () =&gt; { expect(myProvider.name).toBe('MY_PROVIDER'); expect(myProvider.get).toBeDefined(); expect(typeof myProvider.get).toBe('function'); }); it('should return data in correct format', async () =&gt; { // Mock any runtime methods the provider uses mockRuntime.getMemories = mock().mockResolvedValue([ { content: { text: 'Memory 1' }, createdAt: Date.now() }, { content: { text: 'Memory 2' }, createdAt: Date.now() - 1000 }, ]); const result = await myProvider.get( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State ); expect(result).toMatchObject({ text: expect.any(String), data: expect.any(Object), }); }); it('should handle empty data gracefully', async () =&gt; { mockRuntime.getMemories = mock().mockResolvedValue([]); const result = await myProvider.get( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State ); expect(result).toBeDefined(); expect(result.text).toContain('No data available'); }); it('should handle errors gracefully', async () =&gt; { mockRuntime.getMemories = mock().mockRejectedValue(new Error('Database error')); const result = await myProvider.get( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State ); expect(result).toBeDefined(); expect(result.text).toContain('Error retrieving data'); }); }); 5. Testing Evaluators‚Äã // src/__tests__/evaluators.test.ts import { describe, expect, it, mock, beforeEach, afterEach } from 'bun:test'; import { myEvaluator } from '../evaluators/myEvaluator'; import { createMockRuntime, createMockMemory, createMockState } from './test-utils'; import { type IAgentRuntime, type Memory, type State } from '@elizaos/core'; describe('My Evaluator', () =&gt; { let mockRuntime: any; let mockMessage: Partial&lt;Memory&gt;; let mockState: Partial&lt;State&gt;; beforeEach(() =&gt; { mockRuntime = createMockRuntime(); mockMessage = createMockMemory(); mockState = createMockState(); }); afterEach(() =&gt; { mock.restore(); }); it('should have required properties', () =&gt; { expect(myEvaluator.name).toBe('MY_EVALUATOR'); expect(myEvaluator.evaluate).toBeDefined(); expect(myEvaluator.validate).toBeDefined(); }); it('should validate when conditions are met', async () =&gt; { const isValid = await myEvaluator.validate( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State ); expect(isValid).toBe(true); }); it('should evaluate and create memory', async () =&gt; { mockRuntime.createMemory = mock().mockResolvedValue({ id: 'new-memory-id' }); await myEvaluator.evaluate( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State, {} ); expect(mockRuntime.createMemory).toHaveBeenCalledWith( expect.objectContaining({ content: expect.objectContaining({ text: expect.any(String), }), }), expect.any(String) // tableName ); }); it('should not create memory when evaluation fails', async () =&gt; { // Mock a scenario where evaluation should fail mockMessage.content = { text: 'invalid content' }; await myEvaluator.evaluate( mockRuntime as IAgentRuntime, mockMessage as Memory, mockState as State, {} ); expect(mockRuntime.createMemory).not.toHaveBeenCalled(); }); }); 6. Testing Services‚Äã // src/__tests__/services.test.ts import { describe, expect, it, mock, beforeEach, afterEach } from 'bun:test'; import { myService } from '../services/myService'; import { createMockRuntime } from './test-utils'; import { type IAgentRuntime } from '@elizaos/core'; describe('My Service', () =&gt; { let mockRuntime: any; beforeEach(() =&gt; { mockRuntime = createMockRuntime(); }); afterEach(() =&gt; { mock.restore(); }); it('should initialize service', async () =&gt; { const service = await myService.initialize(mockRuntime as IAgentRuntime); expect(service).toBeDefined(); expect(service.start).toBeDefined(); expect(service.stop).toBeDefined(); }); it('should start service successfully', async () =&gt; { const service = await myService.initialize(mockRuntime as IAgentRuntime); const startSpy = mock(service.start); await service.start(); expect(startSpy).toHaveBeenCalled(); }); it('should stop service successfully', async () =&gt; { const service = await myService.initialize(mockRuntime as IAgentRuntime); await service.start(); const stopSpy = mock(service.stop); await service.stop(); expect(stopSpy).toHaveBeenCalled(); }); it('should handle service errors', async () =&gt; { const service = await myService.initialize(mockRuntime as IAgentRuntime); service.start = mock().mockRejectedValue(new Error('Service start failed')); await expect(service.start()).rejects.toThrow('Service start failed'); }); }); 7. Testing Event Handlers‚Äã // src/__tests__/events.test.ts import { describe, expect, it, mock, beforeEach, afterEach } from 'bun:test'; import { myPlugin } from '../index'; import { setupActionTest } from './test-utils'; import { type IAgentRuntime, type Memory, EventType, type MessagePayload, type EntityPayload, } from '@elizaos/core'; describe('Event Handlers', () =&gt; { let mockRuntime: any; let mockMessage: Partial&lt;Memory&gt;; let mockCallback: any; beforeEach(() =&gt; { const setup = setupActionTest(); mockRuntime = setup.mockRuntime; mockMessage = setup.mockMessage; mockCallback = setup.callbackFn; }); afterEach(() =&gt; { mock.restore(); }); it('should handle MESSAGE_RECEIVED event', async () =&gt; { const messageHandler = myPlugin.events?.[EventType.MESSAGE_RECEIVED]?.[0]; expect(messageHandler).toBeDefined(); if (messageHandler) { await messageHandler({ runtime: mockRuntime as IAgentRuntime, message: mockMessage as Memory, callback: mockCallback, source: 'test', } as MessagePayload); expect(mockRuntime.createMemory).toHaveBeenCalledWith(mockMessage, 'messages'); } }); it('should handle ENTITY_JOINED event', async () =&gt; { const entityHandler = myPlugin.events?.[EventType.ENTITY_JOINED]?.[0]; expect(entityHandler).toBeDefined(); if (entityHandler) { await entityHandler({ runtime: mockRuntime as IAgentRuntime, entityId: 'test-entity-id', worldId: 'test-world-id', roomId: 'test-room-id', metadata: { type: 'user', username: 'testuser', }, source: 'test', } as EntityPayload); expect(mockRuntime.ensureConnection).toHaveBeenCalled(); } }); }); 8. Advanced Testing Patterns‚Äã Testing with Complex State‚Äã describe('Complex State Action', () =&gt; { it('should handle complex state transformations', async () =&gt; { const setup = setupActionTest({ stateOverrides: { values: { taskList: ['task1', 'task2'], currentStep: 2, metadata: { key: 'value' }, }, data: { customData: { nested: { value: 'deep', }, }, }, }, }); const result = await complexAction.handler( setup.mockRuntime as IAgentRuntime, setup.mockMessage as Memory, setup.mockState as State, {}, setup.callbackFn as HandlerCallback ); expect(result).toBe(true); }); }); Testing with Multiple Mock Responses‚Äã describe('Sequential Operations', () =&gt; { it('should handle sequential API calls', async () =&gt; { const setup = setupActionTest({ runtimeOverrides: { useModel: mock() .mockResolvedValueOnce({ step: 1, data: 'first' }) .mockResolvedValueOnce({ step: 2, data: 'second' }) .mockResolvedValueOnce({ step: 3, data: 'final' }), }, }); await sequentialAction.handler( setup.mockRuntime as IAgentRuntime, setup.mockMessage as Memory, setup.mockState as State, {}, setup.callbackFn as HandlerCallback ); expect(setup.mockRuntime.useModel).toHaveBeenCalledTimes(3); expect(setup.callbackFn).toHaveBeenCalledWith( expect.objectContaining({ text: expect.stringContaining('final'), }) ); }); }); Testing Error Recovery‚Äã describe('Error Recovery', () =&gt; { it('should retry on failure', async () =&gt; { let attempts = 0; const setup = setupActionTest({ runtimeOverrides: { useModel: mock().mockImplementation(async () =&gt; { attempts++; if (attempts &lt; 3) { throw new Error('Temporary failure'); } return { success: true }; }), }, }); await retryAction.handler( setup.mockRuntime as IAgentRuntime, setup.mockMessage as Memory, setup.mockState as State, {}, setup.callbackFn as HandlerCallback ); expect(attempts).toBe(3); expect(setup.callbackFn).toHaveBeenCalledWith( expect.objectContaining({ content: expect.objectContaining({ success: true }), }) ); }); }); 9. Best Practices‚Äã 1. Test Organization‚Äã Group related tests using describe blocksUse clear, descriptive test namesFollow the Arrange-Act-Assert patternKeep tests focused and independent 2. Mock Management‚Äã // Good: Specific mocks for each test it('should handle specific scenario', async () =&gt; { const setup = setupActionTest({ runtimeOverrides: { useModel: mock().mockResolvedValue({ specific: 'response' }), }, }); // ... test implementation }); // Bad: Global mocks that affect all tests beforeAll(() =&gt; { globalMock = mock().mockResolvedValue('global response'); }); 3. Assertion Patterns‚Äã // Check callback was called with correct structure expect(callbackFn).toHaveBeenCalledWith( expect.objectContaining({ text: expect.stringContaining('expected text'), content: expect.objectContaining({ success: true, data: expect.arrayContaining(['item1', 'item2']), }), }) ); // Check multiple calls in sequence const calls = (callbackFn as any).mock.calls; expect(calls).toHaveLength(3); expect(calls[0][0].text).toContain('step 1'); expect(calls[1][0].text).toContain('step 2'); expect(calls[2][0].text).toContain('completed'); 4. Testing Edge Cases‚Äã describe('Edge Cases', () =&gt; { it('should handle empty input', async () =&gt; { mockMessage.content = { text: '' }; // ... test implementation }); it('should handle null values', async () =&gt; { mockMessage.content = null as any; // ... test implementation }); it('should handle very long input', async () =&gt; { mockMessage.content = { text: 'a'.repeat(10000) }; // ... test implementation }); }); 5. Async Testing Best Practices‚Äã // Always await async operations it('should handle async operations', async () =&gt; { const promise = someAsyncOperation(); await expect(promise).resolves.toBe(expectedValue); }); // Test rejected promises it('should handle errors', async () =&gt; { const promise = failingOperation(); await expect(promise).rejects.toThrow('Expected error'); }); // Use async/await instead of .then() it('should process data', async () =&gt; { const result = await processData(); expect(result).toBeDefined(); }); 6. Cleanup‚Äã afterEach(() =&gt; { // Reset all mocks after each test mock.restore(); // Clean up any side effects // Clear timers, close connections, etc. }); 7. Test Coverage Requirements‚Äã IMPORTANT: All ElizaOS plugins must maintain 100% test coverage or as close to it as possible (minimum 95%). // Ensure all code paths are tested describe('Complete Coverage', () =&gt; { it('should test success path', async () =&gt; { // Test the happy path }); it('should test error handling', async () =&gt; { // Test error scenarios }); it('should test edge cases', async () =&gt; { // Test boundary conditions }); it('should test all conditional branches', async () =&gt; { // Test if/else, switch cases, etc. }); }); Coverage Best Practices: Use bun test --coverage to check coverage regularlySet up CI/CD to fail builds with coverage below 95%Document any legitimate reasons for uncovered codeFocus on meaningful tests, not just hitting coverage numbersTest all exports from your plugin (actions, providers, evaluators, services) 10. Running Tests‚Äã Basic Commands‚Äã # Run all tests bun run test # Run tests in watch mode bun run test --watch # Run specific test file bun run test src/__tests__/actions.test.ts # Run tests with coverage bun run test:coverage # Run tests matching pattern bun run test --test-name-pattern &quot;should validate&quot; Test Configuration‚Äã Create a bunfig.toml file in your project root: [test] root = &quot;./src/__tests__&quot; coverage = true coverageThreshold = 95 # Minimum 95% coverage required, aim for 100% Debugging Tests‚Äã // Add console.logs for debugging it('should debug test', async () =&gt; { console.log('Current state:', mockState); const result = await action.handler(...); console.log('Result:', result); console.log('Callback calls:', (callbackFn as any).mock.calls); }); Common Issues and Solutions‚Äã Issue: Mock not being called‚Äã // Solution: Ensure the mock is set before the action is called mockRuntime.useModel = mock().mockResolvedValue(response); // THEN call the action await action.handler(...); Issue: Tests timing out‚Äã // Solution: Mock all async dependencies beforeEach(() =&gt; { // Mock all external calls mockRuntime.getMemories = mock().mockResolvedValue([]); mockRuntime.searchMemories = mock().mockResolvedValue([]); mockRuntime.createMemory = mock().mockResolvedValue({ id: 'test' }); }); Issue: Inconsistent test results‚Äã // Solution: Reset mocks between tests afterEach(() =&gt; { mock.restore(); }); // And use fresh setup for each test beforeEach(() =&gt; { const setup = setupActionTest(); // ... assign to test variables }); Summary‚Äã This guide provides a comprehensive approach to testing ElizaOS plugins. Key takeaways: Setup a consistent test environment with reusable utilitiesTest all plugin components: actions, providers, evaluators, services, and event handlersMock external dependencies properly to ensure isolated testsHandle async operations correctly with proper awaitsFollow best practices for organization, assertions, and cleanupRun tests regularly as part of your development workflow Remember: Good tests are as important as good code. They ensure your plugin works correctly and continues to work as the codebase evolves.","keywords":"","version":"1.0.17"},{"title":"Get local environment variables","type":0,"sectionRef":"#","url":"/docs/rest/get-local-env","content":"Get local environment variables GET /api/system/environment/local Retrieve local environment variables from .env file Responses‚Äã 200500 Local environment variables","keywords":"","version":"1.0.17"},{"title":"Basic health check","type":0,"sectionRef":"#","url":"/docs/rest/get-hello","content":"Basic health check GET /api/server/hello Simple hello world test endpoint Responses‚Äã 200 Hello world response","keywords":"","version":"1.0.17"},{"title":"Get system logs","type":0,"sectionRef":"#","url":"/docs/rest/get-logs","content":"Get system logs GET /api/server/logs Retrieve system logs with optional filtering Request‚Äã Responses‚Äã 200500 System logs","keywords":"","version":"1.0.17"},{"title":"Get room details","type":0,"sectionRef":"#","url":"/docs/rest/get-room","content":"Get room details GET /api/agents/:agentId/rooms/:roomId Retrieves details about a specific room Request‚Äã Responses‚Äã 200400404500 Room details","keywords":"","version":"1.0.17"},{"title":"Get server agents","type":0,"sectionRef":"#","url":"/docs/rest/get-server-agents","content":"Get server agents GET /api/messaging/servers/:serverId/agents Get all agents for a server Request‚Äã Responses‚Äã 200400404500 Agents retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Ping health check","type":0,"sectionRef":"#","url":"/docs/rest/get-ping","content":"Ping health check GET /api/server/ping Simple ping endpoint to check if server is responsive Responses‚Äã 200 Server is responsive","keywords":"","version":"1.0.17"},{"title":"Get room memories","type":0,"sectionRef":"#","url":"/docs/rest/get-room-memories","content":"Get room memories GET /api/agents/:agentId/rooms/:roomId/memories Retrieves memories for a specific room Request‚Äã Responses‚Äã 200400404500 Room memories retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Get server debug info","type":0,"sectionRef":"#","url":"/docs/rest/get-servers","content":"Get server debug info GET /api/server/servers Get debug information about active servers (debug endpoint) Responses‚Äã 200 Server debug information","keywords":"","version":"1.0.17"},{"title":"Get server channels","type":0,"sectionRef":"#","url":"/docs/rest/get-server-channels","content":"Get server channels GET /api/messaging/servers/:serverId/channels Get all channels for a server Request‚Äã Responses‚Äã 200404 Channels retrieved successfully","keywords":"","version":"1.0.17"},{"title":"Get system status","type":0,"sectionRef":"#","url":"/docs/rest/get-status","content":"Get system status GET /api/server/status Returns the current status of the system with agent count and timestamp Responses‚Äã 200 System status information","keywords":"","version":"1.0.17"},{"title":"Ingest external message","type":0,"sectionRef":"#","url":"/docs/rest/ingest-external-message","content":"Ingest external message POST /api/messaging/ingest-external Ingest a message from an external source for agent processing Request‚Äã Responses‚Äã 202400500 Message ingested and published to bus","keywords":"","version":"1.0.17"},{"title":"Get system logs (POST)","type":0,"sectionRef":"#","url":"/docs/rest/post-logs","content":"Get system logs (POST) POST /api/server/logs Retrieve system logs with optional filtering using POST method Request‚Äã Responses‚Äã 200500 System logs","keywords":"","version":"1.0.17"},{"title":"List all agents","type":0,"sectionRef":"#","url":"/docs/rest/list-agents","content":"List all agents GET /api/agents Returns a list of all available agents Responses‚Äã 200500 List of agents","keywords":"","version":"1.0.17"},{"title":"Process audio message","type":0,"sectionRef":"#","url":"/docs/rest/process-audio-message","content":"Process audio message POST /api/audio/:agentId/process-audio Process an audio message - transcribe and get agent response Request‚Äã Responses‚Äã 200400404415500 Audio processed successfully","keywords":"","version":"1.0.17"},{"title":"Process external message","type":0,"sectionRef":"#","url":"/docs/rest/process-external-message","content":"Process external message POST /api/messaging/external-messages Process a message from an external platform Request‚Äã Responses‚Äã 200400500 Message processed successfully","keywords":"","version":"1.0.17"},{"title":"Remove agent from server","type":0,"sectionRef":"#","url":"/docs/rest/remove-agent-from-server","content":"Remove agent from server DELETE /api/messaging/servers/:serverId/agents/:agentId Remove an agent from a server Request‚Äã Responses‚Äã 200400404500 Agent removed successfully","keywords":"","version":"1.0.17"},{"title":"Send an audio message","type":0,"sectionRef":"#","url":"/docs/rest/send-audio-message","content":"Send an audio message POST /api/agents/:agentId/audio-messages Sends an audio message to an agent for processing Request‚Äã Responses‚Äã 201400404500 Audio message processed successfully","keywords":"","version":"1.0.17"},{"title":"Send message to channel","type":0,"sectionRef":"#","url":"/docs/rest/send-channel-message","content":"Send message to channel POST /api/messaging/central-channels/:channelId/messages Send a message to a channel Request‚Äã Responses‚Äã 201400404 Message sent successfully","keywords":"","version":"1.0.17"},{"title":"Start an agent","type":0,"sectionRef":"#","url":"/docs/rest/start-agent","content":"Start an agent POST /api/agents/:agentId/start Starts an existing agent Request‚Äã Responses‚Äã 200400404500 Agent started successfully","keywords":"","version":"1.0.17"},{"title":"Stop an agent","type":0,"sectionRef":"#","url":"/docs/rest/stop-agent","content":"Stop an agent POST /api/agents/:agentId/stop Stops a running agent Request‚Äã Responses‚Äã 200400404 Agent stopped successfully","keywords":"","version":"1.0.17"},{"title":"Stop the server","type":0,"sectionRef":"#","url":"/docs/rest/stop-server","content":"Stop the server POST /api/server/stop Initiates server shutdown Responses‚Äã 200 Server is shutting down","keywords":"","version":"1.0.17"},{"title":"Submit a message","type":0,"sectionRef":"#","url":"/docs/rest/submit-message","content":"Submit a message POST /api/messaging/submit Submit a message from an agent or system (already processed messages) Request‚Äã Responses‚Äã 201400500 Message submitted successfully","keywords":"","version":"1.0.17"},{"title":"Socket.IO Real-time Connection","type":0,"sectionRef":"#","url":"/docs/rest/socket-io-real-time-connection","content":"Socket.IO Real-time Connection GET /websocket Socket.IO connection for real-time bidirectional communication. The server uses Socket.IO v4.x for WebSocket transport with automatic fallback. Connection URL: ws://localhost:3000/socket.io/ (or wss:// for secure connections) Socket.IO Client Connection Example: import { io } from 'socket.io-client'; const socket = io('http://localhost:3000'); Events: Client to Server Events:‚Äã join - Join a room/channel \\{ &quot;roomId&quot;: &quot;uuid&quot;, &quot;agentId&quot;: &quot;uuid&quot; \\} leave - Leave a room/channel \\{ &quot;roomId&quot;: &quot;uuid&quot;, &quot;agentId&quot;: &quot;uuid&quot; \\} message - Send a message \\{ &quot;text&quot;: &quot;string&quot;, &quot;roomId&quot;: &quot;uuid&quot;, &quot;entityId&quot;: &quot;uuid&quot;, &quot;name&quot;: &quot;string&quot; \\} request-world-state - Request current state \\{ &quot;roomId&quot;: &quot;uuid&quot; \\} Server to Client Events:‚Äã messageBroadcast - New message broadcast \\{ &quot;senderId&quot;: &quot;uuid&quot;, &quot;senderName&quot;: &quot;string&quot;, &quot;text&quot;: &quot;string&quot;, &quot;roomId&quot;: &quot;uuid&quot;, &quot;serverId&quot;: &quot;uuid&quot;, &quot;createdAt&quot;: &quot;timestamp&quot;, &quot;source&quot;: &quot;string&quot;, &quot;id&quot;: &quot;uuid&quot;, &quot;thought&quot;: &quot;string&quot;, &quot;actions&quot;: [&quot;string&quot;], &quot;attachments&quot;: [] \\} messageComplete - Message processing complete \\{ &quot;channelId&quot;: &quot;uuid&quot;, &quot;serverId&quot;: &quot;uuid&quot; \\} world-state - World state update \\{ &quot;agents&quot;: \\{\\}, &quot;users&quot;: \\{\\}, &quot;channels&quot;: \\{\\}, &quot;messages&quot;: \\{\\} \\} logEntry - Real-time log entry \\{ &quot;level&quot;: &quot;number&quot;, &quot;time&quot;: &quot;timestamp&quot;, &quot;msg&quot;: &quot;string&quot;, &quot;agentId&quot;: &quot;uuid&quot;, &quot;agentName&quot;: &quot;string&quot; \\} error - Error event \\{ &quot;error&quot;: &quot;string&quot;, &quot;details&quot;: \\{\\} \\} Responses‚Äã 101 Switching Protocols - WebSocket connection established","keywords":"","version":"1.0.17"},{"title":"Convert text to speech","type":0,"sectionRef":"#","url":"/docs/rest/synthesize-speech","content":"Convert text to speech POST /api/agents/:agentId/audio-messages/synthesize Converts text to speech using the agent's voice Request‚Äã Responses‚Äã 200400404500 Audio stream with synthesized speech","keywords":"","version":"1.0.17"},{"title":"Transcribe audio","type":0,"sectionRef":"#","url":"/docs/rest/transcribe-audio","content":"Transcribe audio POST /api/audio/:agentId/transcriptions Transcribe audio file to text Request‚Äã Responses‚Äã 200400404415500 Audio transcribed successfully","keywords":"","version":"1.0.17"},{"title":"Update agent","type":0,"sectionRef":"#","url":"/docs/rest/update-agent","content":"Update agent PATCH /api/agents/:agentId Update an existing agent Request‚Äã Responses‚Äã 200400404500 Agent updated successfully","keywords":"","version":"1.0.17"},{"title":"Update a world","type":0,"sectionRef":"#","url":"/docs/rest/update-agent-world","content":"Update a world PATCH /api/agents/:agentId/worlds/:worldId Update world properties Request‚Äã Responses‚Äã 200400404500 World updated successfully","keywords":"","version":"1.0.17"},{"title":"Update a memory","type":0,"sectionRef":"#","url":"/docs/rest/update-agent-memory","content":"Update a memory PATCH /api/memory/:agentId/memories/:memoryId Update a specific memory for an agent Request‚Äã Responses‚Äã 200400404500 Memory updated successfully","keywords":"","version":"1.0.17"},{"title":"Update channel","type":0,"sectionRef":"#","url":"/docs/rest/update-channel","content":"Update channel PATCH /api/messaging/central-channels/:channelId Update channel details Request‚Äã Responses‚Äã 200400404 Channel updated successfully","keywords":"","version":"1.0.17"},{"title":"Update local environment variables","type":0,"sectionRef":"#","url":"/docs/rest/update-local-env","content":"Update local environment variables POST /api/system/environment/local Update local environment variables in .env file Request‚Äã Responses‚Äã 200400500 Environment variables updated","keywords":"","version":"1.0.17"},{"title":"Update a room","type":0,"sectionRef":"#","url":"/docs/rest/update-room","content":"Update a room PATCH /api/agents/:agentId/rooms/:roomId Updates a specific room Request‚Äã Responses‚Äã 200400404500 Room updated successfully","keywords":"","version":"1.0.17"},{"title":"Upload media for agent","type":0,"sectionRef":"#","url":"/docs/rest/upload-agent-media","content":"Upload media for agent POST /api/media/:agentId/upload-media Upload image or video media for an agent Request‚Äã Responses‚Äã 200400404413415500 Media uploaded successfully","keywords":"","version":"1.0.17"},{"title":"Upload media to channel","type":0,"sectionRef":"#","url":"/docs/rest/upload-channel-media","content":"Upload media to channel POST /api/media/channels/:channelId/upload Upload media file to a specific channel Request‚Äã Responses‚Äã 200400413415500 Media uploaded successfully","keywords":"","version":"1.0.17"},{"title":"WebSocket Connection","type":0,"sectionRef":"#","url":"/docs/rest/web-socket-connection","content":"WebSocket Connection GET /websocket WebSocket connection for real-time communication. Connection URL: ws://localhost:3000/socket.io/ Events: Client to Server Events:‚Äã join - Join a room/channel \\{ &quot;roomId&quot;: &quot;uuid&quot;, &quot;agentId&quot;: &quot;uuid&quot; \\} leave - Leave a room/channel \\{ &quot;roomId&quot;: &quot;uuid&quot;, &quot;agentId&quot;: &quot;uuid&quot; \\} message - Send a message \\{ &quot;text&quot;: &quot;string&quot;, &quot;roomId&quot;: &quot;uuid&quot;, &quot;userId&quot;: &quot;uuid&quot;, &quot;name&quot;: &quot;string&quot; \\} request-world-state - Request current state \\{ &quot;roomId&quot;: &quot;uuid&quot; \\} Server to Client Events:‚Äã messageBroadcast - New message broadcast \\{ &quot;senderId&quot;: &quot;uuid&quot;, &quot;senderName&quot;: &quot;string&quot;, &quot;text&quot;: &quot;string&quot;, &quot;roomId&quot;: &quot;uuid&quot;, &quot;serverId&quot;: &quot;uuid&quot;, &quot;createdAt&quot;: &quot;timestamp&quot;, &quot;source&quot;: &quot;string&quot;, &quot;id&quot;: &quot;uuid&quot;, &quot;thought&quot;: &quot;string&quot;, &quot;actions&quot;: [&quot;string&quot;], &quot;attachments&quot;: [] \\} messageComplete - Message processing complete \\{ &quot;channelId&quot;: &quot;uuid&quot;, &quot;serverId&quot;: &quot;uuid&quot; \\} world-state - World state update \\{ &quot;agents&quot;: \\{\\}, &quot;users&quot;: \\{\\}, &quot;channels&quot;: \\{\\}, &quot;messages&quot;: \\{\\} \\} logEntry - Real-time log entry \\{ &quot;level&quot;: &quot;number&quot;, &quot;time&quot;: &quot;timestamp&quot;, &quot;msg&quot;: &quot;string&quot;, &quot;agentId&quot;: &quot;uuid&quot;, &quot;agentName&quot;: &quot;string&quot; \\} error - Error event \\{ &quot;error&quot;: &quot;string&quot;, &quot;details&quot;: \\{\\} \\} Responses‚Äã 101 Switching Protocols - WebSocket connection established","keywords":"","version":"1.0.17"},{"title":"Frequently Asked Questions (Simple)","type":0,"sectionRef":"#","url":"/docs/simple/faq","content":"Frequently Asked Questions (Simple) Quick answers to common questions about ElizaOS agents. üöÄ Getting Started‚Äã What is ElizaOS?‚Äã ElizaOS is a platform for creating AI agents - think of them as smart chatbots with personality! You can chat with them, have them help you with tasks, or integrate them into Discord, Twitter, and other platforms. Do I need to know how to code?‚Äã No! We provide templates and simple configuration files. You just need to: Copy and paste commandsEdit text files (like writing in Notepad)Follow our step-by-step guides How much does it cost?‚Äã ElizaOS itself is free and open source! However, you'll need: An AI API key (OpenAI costs ~$5-20/month for casual use)Optional: Server hosting (~$5-20/month if you want 24/7 operation)Free option: Use Local AI (slower but completely free) Cost Breakdown Example (Monthly): Usage Level\tAI API Cost\tHosting\tTotalTesting/Learning\t$0-5 (free tier)\t$0 (local)\t$0-5 Personal Bot\t$5-15\t$0 (local)\t$5-15 Community Bot\t$15-50\t$5-20\t$20-70 Business Bot\t$50-200\t$20-100\t$70-300 üí° Tip: Start with free local AI to learn, then upgrade when ready! What can my agent do?‚Äã Your agent can: üí¨ Have conversationsüì± Post on social mediaüéÆ Join Discord serversüìß Send messagesüé® Generate creative contentü§ñ Automate tasksAnd much more with plugins! ‚öôÔ∏è Setup &amp; Configuration‚Äã Which AI provider should I choose?‚Äã Provider\tBest For\tCost\tSpeedOpenAI\tBeginners, best quality\t~$0.01 per 1000 words\tFast Claude\tLong conversations\t~$0.01 per 1000 words\tFast Local AI\tFree usage\tFree\tSlow Where do I get an API key?‚Äã For OpenAI: Go to platform.openai.comSign up or log inClick &quot;API Keys&quot; ‚Üí &quot;Create new secret key&quot;Copy the key (starts with sk- prefix) For Claude (Anthropic): Go to console.anthropic.comSign up or log inClick &quot;API Keys&quot; ‚Üí &quot;Create Key&quot;Copy the key My agent won't start - help‚Äã Try these steps in order: Check your API key - Make sure it's in the .env fileCheck for typos - No extra spaces or quotes around the keyRestart - Stop (Ctrl+C) and run bun start againCheck credits - Make sure your API account has creditsTry Local AI - Remove API keys to use free local mode How do I change my agent's personality?‚Äã Edit the character.json file: { &quot;name&quot;: &quot;Your Agent Name&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;], &quot;bio&quot;: [&quot;Write your agent's background here&quot;, &quot;Add more personality details&quot;], &quot;style&quot;: { &quot;all&quot;: [&quot;friendly&quot;, &quot;helpful&quot;, &quot;creative&quot;] } } Save the file and restart your agent! üí¨ Using Your Agent‚Äã How do I talk to my agent?‚Äã Three ways: Web Browser: Go to http://localhost:3000Terminal: Type directly where you started the agentDiscord/Twitter: If you've set up those integrations My agent keeps forgetting our conversation‚Äã Agents remember recent messages but not everything forever. To help: Keep conversations focusedRemind the agent of important contextUse the same chat room/threadAvoid very long conversations Can my agent learn about me?‚Äã Yes! Agents remember: Your name and preferencesRecent conversationsImportant facts you shareYour interaction patterns How do I make my agent stop?‚Äã Press Ctrl+C (or Cmd+C on Mac) in the terminal where it's running. üîå Features &amp; Plugins‚Äã How do I add Discord to my agent?‚Äã Get a Discord bot token from the Discord Developer Portal Add to your .env file: DISCORD_API_TOKEN=your-bot-token DISCORD_APPLICATION_ID=your-app-id Restart your agent Invite the bot to your server For a complete Discord agent example, see our Discord Agent Template. Can my agent post on Twitter?‚Äã Yes! You need: Twitter API access (requires approval)Four API keys from TwitterAdd them to your .env file For a complete Twitter agent example, see our Twitter Agent Template. What plugins are available?‚Äã Popular plugins: üéÆ Discord - Chat in Discord serversüê¶ Twitter - Post and reply on Twitterüí¨ Telegram - Telegram bot integrationüéôÔ∏è Voice - Voice chat capabilitiesüñºÔ∏è Image Generation - Create imagesAnd many more! How do I install plugins?‚Äã Simple command: bun add @elizaos/plugin-name Then add to your agent configuration! üö® Troubleshooting‚Äã &quot;API key not found&quot; error‚Äã Check: ‚úÖ Key is in .env file‚úÖ No quotes around the key‚úÖ File is saved‚úÖ You restarted the agent &quot;Port already in use&quot; error‚Äã Another program is using port 3000. Either: Stop the other program, OR Change port in .env: PORT=3001 Agent responses are slow‚Äã Possible causes: Using Local AI (it's slower but free)Poor internet connectionAPI service is busyTry a different AI provider Agent gives weird responses‚Äã Try: Adjusting the temperature (lower = more focused)Providing clearer character descriptionUsing better examples in character fileSwitching AI models üåê Deployment‚Äã How do I keep my agent running 24/7?‚Äã Options: Cloud Hosting (Easiest) - Use services like: Railway.app ‚úÖ One-click deploy‚úÖ ~$5/month‚úÖ No server knowledge neededDeploy Guide ‚Üí Render.com ‚úÖ Free tier available‚úÖ Auto-deploy from GitHub‚úÖ Great for beginnersDeploy Guide ‚Üí Heroku ‚úÖ Well-documented‚úÖ ~$7/month‚úÖ Lots of tutorials Home Server - Use an old computer ‚úÖ Free (just electricity)‚ùå Need stable internet‚ùå Computer must stay on Raspberry Pi - Low power, always on ‚úÖ ~$50 one-time cost‚úÖ Very low power usage‚ùå Requires some setup Can multiple people use my agent?‚Äã Yes! Once deployed: Web chat supports multiple usersDiscord bot works for whole serversEach platform handles multiple conversations How do I update my agent?‚Äã bun install -g @elizaos/cli@latest Then restart your agent! üí° Tips &amp; Best Practices‚Äã Making your agent more interesting‚Äã Give it a backstory - More detail = better personalityAdd quirks - Favorite phrases, topics, reactionsUse examples - Show how it should respondSet boundaries - What it should/shouldn't discuss Saving money on API costs‚Äã Use shorter conversationsSet token limits in configurationUse Local AI for testingMonitor usage in your API dashboard Getting help‚Äã üí¨ Join our Discordüì∫ Watch tutorialsüìñ Read guides in this documentationüêõ Report bugs üéØ Quick Start Checklist‚Äã New to ElizaOS? Follow this order: ‚¨ú Read the 5-minute quick start‚¨ú Get an API key (OpenAI recommended for beginners)‚¨ú Download and run your first agent‚¨ú Chat with it locally‚¨ú Pick a template from the gallery‚¨ú Customize the personality‚¨ú Choose a platform (Discord/Telegram/Twitter)‚¨ú Deploy online (optional)‚¨ú Join our community for help! üÜò Emergency Help‚Äã Nothing is working‚Äã Reset everything: # Stop your agent (Ctrl+C) # Delete and re-download rm -rf your-agent-folder bunx create-eliza-app your-agent-name cd your-agent-name # Follow setup again carefully I'm completely lost‚Äã Watch a video walkthrough: YouTube TutorialJoin Discord: Get live help in #beginner-helpBook office hours: Free 15-min help sessions weekly ‚ùì Still Have Questions?‚Äã Can't find your answer here? Check our detailed guidesAsk in Discord - #beginner-help channelWatch video tutorialsEmail support: support@elizaos.ai Remember: There are no stupid questions! We're here to help you succeed with your AI agent. üöÄ üåü Success Story: &quot;I had never coded before, but within an hour I had my own AI assistant helping manage my Discord server!&quot; - Sarah, Community Manager","keywords":"","version":"1.0.17"},{"title":"5-Minute Quick Start Guide","type":0,"sectionRef":"#","url":"/docs/simple/getting-started/quick-start","content":"5-Minute Quick Start Guide Get your first ElizaOS agent running in just 5 minutes! No coding required. üìã What You'll Need‚Äã Before starting, make sure you have: A computer (Windows, Mac, or Linux)Internet connectionAn AI API key (we'll help you get one) üöÄ Step 1: Install ElizaOS (2 minutes)‚Äã Open your terminal (Command Prompt on Windows, Terminal on Mac/Linux) and follow these steps: Install the ElizaOS CLI globally‚Äã bun install -g @elizaos/cli Create your first agent‚Äã elizaos create my-first-agent When prompted, select: Project Type: project (for a complete agent)Template: basic (simplest template)Install dependencies: yes The installer will create your agent and set everything up automatically! üîë Step 2: Get Your AI Key (1 minute)‚Äã Your agent needs an AI service to think and respond. Choose one: Option A: OpenAI (Recommended for beginners)‚Äã Go to platform.openai.comSign up or log inClick &quot;API Keys&quot; ‚Üí &quot;Create new secret key&quot;Copy your key (starts with sk- prefix) Option B: Claude (Anthropic)‚Äã Go to console.anthropic.comSign up or log inGo to &quot;API Keys&quot; ‚Üí &quot;Create Key&quot;Copy your key Option C: Local AI (Free, no API key needed)‚Äã The agent will use a local AI model (slower but free)No additional setup required! ‚öôÔ∏è Step 3: Configure Your Agent (1 minute)‚Äã Navigate to your agent folder: cd my-first-agent Open the .env file in any text editor Add your API key: # For OpenAI OPENAI_API_KEY=your-key-here # OR for Claude ANTHROPIC_API_KEY=your-key-here # OR for Local AI - leave empty Save the file üé≠ Step 4: Customize Your Agent (Optional - 30 seconds)‚Äã Open agent/eliza.character.json to customize your agent's personality: { &quot;name&quot;: &quot;Eliza&quot;, &quot;description&quot;: &quot;A helpful AI assistant&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;], &quot;settings&quot;: { &quot;voice&quot;: &quot;alloy&quot; }, &quot;bio&quot;: [ &quot;I'm here to help you with anything you need!&quot;, &quot;I love learning new things and chatting with people.&quot; ], &quot;style&quot;: { &quot;all&quot;: [&quot;friendly&quot;, &quot;helpful&quot;, &quot;encouraging&quot;] } } Note: The plugins must be in this exact order: @elizaos/plugin-sql - Database (always first!)@elizaos/plugin-openai - AI provider (or use @elizaos/plugin-anthropic)@elizaos/plugin-bootstrap - Core functionality Change the name, bio, and style to create your unique agent! ‚ñ∂Ô∏è Step 5: Start Your Agent (30 seconds)‚Äã Run this command: bun start Your agent is now running! You'll see: ü§ñ Agent &quot;Eliza&quot; is starting... ‚úÖ Connected to OpenAI üåê Chat interface available at: http://localhost:3000 üí¨ Discord bot online (if configured) üê¶ Twitter bot online (if configured) üí¨ Step 6: Chat with Your Agent‚Äã Web Chat (Easiest)‚Äã Open your web browserGo to http://localhost:3000Start chatting with your agent! Terminal Chat‚Äã Type messages directly in the terminal where you started the agent. üéâ Congratulations‚Äã You've successfully created and launched your first ElizaOS agent! üìö What's Next?‚Äã Now that your agent is running, explore these options: üé® Customize Your Agent‚Äã Change personality and behaviorAdd custom responsesCreate unique characters üîå Connect to Platforms‚Äã To connect your agent to platforms like Discord, Twitter, or Telegram, check out the platform-specific templates in our Templates section. üöÄ Advanced Features‚Äã For more advanced configuration and monitoring options, check out our Technical Documentation. üõ†Ô∏è For Developers‚Äã Technical Documentation - System architectureTwitter Technical Guide - API implementation details ‚ùì Need Help?‚Äã Common Issues‚Äã Error: &quot;API key not found&quot; Make sure you: Added your API key to the .env fileSaved the fileUsed the correct format (no extra spaces or quotes)Restarted the agent after adding the key Error: &quot;Port 3000 already in use&quot; Another program is using port 3000. Either: Stop the other program, or Change the port in your .env file: PORT=3001 Agent not responding Check that: Your API key is valid and has creditsYou have internet connectionThe terminal shows no error messagesTry restarting with bun start Get Support‚Äã üí¨ Join our Discordüìñ Read the FAQüé• Watch video tutorials üéä You did it! Your agent is alive and ready to chat. Have fun exploring all the possibilities with ElizaOS!","keywords":"","version":"1.0.17"},{"title":"Creating Your Agent's Character","type":0,"sectionRef":"#","url":"/docs/simple/guides/character-creation","content":"Creating Your Agent's Character Give your agent a unique personality that shines through in every conversation! üé≠ Understanding Characters‚Äã A character file defines: Who your agent is (name, background)How they communicate (style, tone)What they talk about (topics, interests) üìù Basic Character Structure‚Äã Here's the simplest character file: { &quot;name&quot;: &quot;Your Agent Name&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;], &quot;bio&quot;: [ &quot;A brief description of who your agent is&quot;, &quot;Their background or story&quot;, &quot;What makes them unique&quot; ], &quot;style&quot;: { &quot;all&quot;: [&quot;friendly&quot;, &quot;helpful&quot;] } } Important: The plugins array must include these three plugins in this exact order: @elizaos/plugin-sql - Provides database functionality (must be first!)A model provider plugin (e.g., @elizaos/plugin-openai, @elizaos/plugin-anthropic, or @elizaos/plugin-ollama)@elizaos/plugin-bootstrap - Provides core messaging and interaction capabilities üé® Step-by-Step Character Creation‚Äã Step 1: Choose a Name‚Äã Pick something memorable and fitting: &quot;name&quot;: &quot;Luna&quot; Step 2: Write the Biography‚Äã Tell your agent's story (2-5 sentences): &quot;bio&quot;: [ &quot;Luna is a cosmic explorer AI who loves astronomy and space.&quot;, &quot;She spent years analyzing data from telescopes around the world.&quot;, &quot;Now she shares her passion for the cosmos with everyone she meets!&quot; ] Step 3: Define Personality Traits‚Äã List 3-7 personality traits: &quot;style&quot;: { &quot;all&quot;: [&quot;curious&quot;, &quot;enthusiastic&quot;, &quot;knowledgeable&quot;, &quot;encouraging&quot;, &quot;whimsical&quot;] } Step 4: Add Favorite Topics‚Äã What does your agent love to discuss? &quot;topics&quot;: [&quot;space&quot;, &quot;astronomy&quot;, &quot;science&quot;, &quot;exploration&quot;, &quot;the universe&quot;, &quot;stars&quot;] Step 5: Create Example Conversations‚Äã Show how your agent should respond: &quot;messageExamples&quot;: [ [&quot;user&quot;, &quot;Tell me about the moon&quot;], [&quot;agent&quot;, &quot;Oh, the Moon is fascinating! Did you know it's moving away from Earth at about 3.8 cm per year? üåô&quot;], [&quot;user&quot;, &quot;That's cool!&quot;], [&quot;agent&quot;, &quot;Right? And here's something even cooler - the Moon's gravity causes our ocean tides! Nature is amazing! ‚ú®&quot;] ] üåü Complete Character Examples‚Äã Example 1: Friendly Assistant‚Äã { &quot;name&quot;: &quot;Helper&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;], &quot;bio&quot;: [ &quot;I'm Helper, your friendly AI assistant!&quot;, &quot;I love solving problems and making people's day easier.&quot;, &quot;No task is too big or too small - I'm here to help!&quot; ], &quot;style&quot;: { &quot;all&quot;: [&quot;friendly&quot;, &quot;patient&quot;, &quot;encouraging&quot;, &quot;helpful&quot;, &quot;positive&quot;] }, &quot;topics&quot;: [&quot;productivity&quot;, &quot;problem-solving&quot;, &quot;learning&quot;, &quot;technology&quot;], &quot;messageExamples&quot;: [ [&quot;user&quot;, &quot;I'm stuck on something&quot;], [&quot;agent&quot;, &quot;No worries! I'm here to help. What are you working on? Let's solve it together! üòä&quot;], [&quot;user&quot;, &quot;Thanks!&quot;], [ &quot;agent&quot;, &quot;You're very welcome! That's what I'm here for. Don't hesitate to ask if you need anything else!&quot; ] ] } Example 2: Gaming Buddy‚Äã { &quot;name&quot;: &quot;PixelPal&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;], &quot;bio&quot;: [ &quot;Level 99 gamer and your ultimate gaming companion!&quot;, &quot;From retro arcade to cutting-edge VR, I've played them all.&quot;, &quot;Let's talk games, share strategies, and have epic adventures!&quot; ], &quot;style&quot;: { &quot;all&quot;: [&quot;enthusiastic&quot;, &quot;competitive&quot;, &quot;fun&quot;, &quot;knowledgeable&quot;, &quot;supportive&quot;] }, &quot;topics&quot;: [&quot;gaming&quot;, &quot;esports&quot;, &quot;game strategies&quot;, &quot;gaming news&quot;, &quot;retro games&quot;], &quot;adjectives&quot;: [&quot;epic&quot;, &quot;legendary&quot;, &quot;awesome&quot;, &quot;clutch&quot;, &quot;pro&quot;], &quot;messageExamples&quot;: [ [&quot;user&quot;, &quot;What games do you play?&quot;], [ &quot;agent&quot;, &quot;All of them! üéÆ But I'm really into roguelikes lately. Hades is absolutely epic! What's your current game?&quot; ], [&quot;user&quot;, &quot;I'm stuck on a boss&quot;], [ &quot;agent&quot;, &quot;Boss fights can be tough! What's giving you trouble? Let's figure out a strategy to take them down! üí™&quot; ] ] } Example 3: Creative Writer‚Äã { &quot;name&quot;: &quot;Wordsworth&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-anthropic&quot;, &quot;@elizaos/plugin-bootstrap&quot;], &quot;bio&quot;: [ &quot;A lover of language and weaver of words.&quot;, &quot;I find poetry in the mundane and stories in silence.&quot;, &quot;Together, we'll explore the infinite possibilities of imagination.&quot; ], &quot;style&quot;: { &quot;all&quot;: [&quot;creative&quot;, &quot;thoughtful&quot;, &quot;poetic&quot;, &quot;inspiring&quot;, &quot;imaginative&quot;] }, &quot;topics&quot;: [&quot;writing&quot;, &quot;storytelling&quot;, &quot;poetry&quot;, &quot;creativity&quot;, &quot;imagination&quot;, &quot;literature&quot;], &quot;adjectives&quot;: [&quot;enchanting&quot;, &quot;whimsical&quot;, &quot;profound&quot;, &quot;delightful&quot;, &quot;mysterious&quot;], &quot;messageExamples&quot;: [ [&quot;user&quot;, &quot;I want to write a story&quot;], [ &quot;agent&quot;, &quot;How wonderful! Every story begins with a single spark of imagination. What whispers to your creative soul today? ‚ú®&quot; ], [&quot;user&quot;, &quot;I don't know where to start&quot;], [ &quot;agent&quot;, &quot;The blank page is not empty - it's full of possibilities! Let's start with a simple question: What feeling do you want your readers to experience?&quot; ] ] } üõ†Ô∏è Customization Tips‚Äã Personality Traits Reference‚Äã Choose traits that match your vision: Friendly Types: warm, welcoming, cheerful, kind, caringProfessional Types: efficient, knowledgeable, reliable, focusedCreative Types: imaginative, artistic, whimsical, inspiringFun Types: playful, humorous, witty, entertaining, silly Voice &amp; Tone‚Äã Add specific communication styles: &quot;style&quot;: { &quot;all&quot;: [&quot;friendly&quot;, &quot;casual&quot;], &quot;chat&quot;: [&quot;conversational&quot;, &quot;warm&quot;], &quot;post&quot;: [&quot;engaging&quot;, &quot;concise&quot;] } Special Behaviors‚Äã Make your agent unique: &quot;postExamples&quot;: [ &quot;Just discovered something amazing! üåü Did you know...&quot;, &quot;Daily reminder: You're capable of incredible things! üí´&quot;, &quot;Fun fact of the day: üß†...&quot; ] üìÅ Where to Save Your Character‚Äã Save your character file as: my-agent/ ‚îú‚îÄ‚îÄ agent/ ‚îÇ ‚îî‚îÄ‚îÄ character.json ‚Üê Your character file ‚îú‚îÄ‚îÄ .env ‚îî‚îÄ‚îÄ package.json üîÑ Testing Your Character‚Äã Save your changesRestart your agent: bun startHave a conversationAdjust based on responses üí° Pro Tips‚Äã DO‚Äã ‚úÖ Give specific examples of speech patterns‚úÖ Include 5-10 message examples‚úÖ Be consistent with personality‚úÖ Add unique catchphrases or quirks DON'T‚Äã ‚ùå Make the bio too long (keep it under 5 sentences)‚ùå Use conflicting traits (e.g., &quot;shy&quot; and &quot;outgoing&quot;)‚ùå Forget to test your changes‚ùå Copy someone else's character exactly üéØ Quick Templates‚Äã The Educator‚Äã &quot;style&quot;: { &quot;all&quot;: [&quot;patient&quot;, &quot;knowledgeable&quot;, &quot;encouraging&quot;, &quot;clear&quot;] } The Entertainer‚Äã &quot;style&quot;: { &quot;all&quot;: [&quot;funny&quot;, &quot;energetic&quot;, &quot;playful&quot;, &quot;engaging&quot;] } The Professional‚Äã &quot;style&quot;: { &quot;all&quot;: [&quot;professional&quot;, &quot;efficient&quot;, &quot;reliable&quot;, &quot;concise&quot;] } The Friend‚Äã &quot;style&quot;: { &quot;all&quot;: [&quot;warm&quot;, &quot;supportive&quot;, &quot;understanding&quot;, &quot;genuine&quot;] } ‚ùì Common Questions‚Äã Q: Can I change personality later?A: Yes! Just edit the file and restart. Q: How many traits should I use?A: 3-7 traits work best. Too many can be confusing. Q: Can I use emojis?A: Yes! Add them in bio or examples for more personality. Q: What if my agent sounds generic?A: Add more specific examples and unique phrases! üöÄ Next Steps‚Äã Now that you have a character: Browse available plugins for extra featuresConnect to Discord or TwitterDeploy your agent online Remember: The best characters feel real and consistent. Have fun creating your unique AI personality! üéâ","keywords":"","version":"1.0.17"},{"title":"Deploy to Railway","type":0,"sectionRef":"#","url":"/docs/simple/guides/deployment-railway","content":"Deploy to Railway üöÇ Deploy to Railway‚Äã Deploy your ElizaOS agent to Railway with one-click deployment for 24/7 operation. Prerequisites‚Äã GitHub accountRailway account (free to start)ElizaOS agent working locallyAPI keys ready (OpenAI/Anthropic/etc.) Step 1: Prepare Your Agent‚Äã Create a GitHub Repository‚Äã Create a new repository on GitHubPush your agent code: cd your-agent-folder git init git add . git commit -m &quot;Initial commit&quot; git branch -M main git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO.git git push -u origin main Add Required Files‚Äã Ensure your repository has: package.json with start script: { &quot;name&quot;: &quot;my-elizaos-agent&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;scripts&quot;: { &quot;start&quot;: &quot;elizaos start&quot; }, &quot;dependencies&quot;: { &quot;@elizaos/cli&quot;: &quot;latest&quot; } } Procfile (optional, for custom commands): elizaos start --character characters/my-agent.json Step 2: Deploy to Railway‚Äã Quick Deploy‚Äã Go to railway.appClick &quot;Start a New Project&quot;Select &quot;Deploy from GitHub repo&quot;Connect your GitHub accountSelect your agent repositoryRailway will automatically detect and start deployment Configure Environment Variables‚Äã In Railway dashboard, click on your projectGo to &quot;Variables&quot; tabAdd your environment variables: # Required - AI Provider (choose one) OPENAI_API_KEY=sk-your-openai-key # OR ANTHROPIC_API_KEY=your-anthropic-key # Optional - Platform Integrations DISCORD_APPLICATION_ID=your-discord-app-id DISCORD_API_TOKEN=your-discord-bot-token TELEGRAM_BOT_TOKEN=your-telegram-token TWITTER_API_KEY=your-twitter-api-key TWITTER_API_SECRET=your-twitter-secret TWITTER_ACCESS_TOKEN=your-access-token TWITTER_ACCESS_SECRET=your-access-secret # Database (Railway provides this automatically) DATABASE_URL=${{Postgres.DATABASE_URL}} Step 3: Database Setup‚Äã Option 1: Railway PostgreSQL (Recommended)‚Äã In your Railway project, click &quot;New&quot;Select &quot;Database&quot; ‚Üí &quot;Add PostgreSQL&quot;Railway automatically sets DATABASE_URLYour agent will use this for persistence Option 2: Use PGLite (Default)‚Äã If you don't add a database, ElizaOS uses PGLite (local file storage). Note: PGLite data may be lost on redeploy. Use PostgreSQL for persistence. Step 4: Domain &amp; Networking‚Äã Custom Domain (Optional)‚Äã Go to Settings ‚Üí DomainsAdd your custom domainUpdate DNS records as instructed Public URL‚Äã Railway provides a free subdomain: Format: your-app.up.railway.appHTTPS enabled by defaultUse this URL for webhooks and APIs Step 5: Monitoring &amp; Management‚Äã View Logs‚Äã Click on your deploymentSelect &quot;View Logs&quot;Monitor for errors or issues Restart Your Agent‚Äã Go to Deployments tabClick &quot;Restart&quot; on current deploymentOr trigger new deploy by pushing to GitHub Resource Usage‚Äã Monitor in Railway dashboard: Memory usageCPU usageRequest countEstimated monthly cost Configuration Tips‚Äã Character File Location‚Äã Ensure your character file path is correct: { &quot;scripts&quot;: { &quot;start&quot;: &quot;elizaos start --character characters/agent.json&quot; } } Port Configuration‚Äã Railway automatically sets PORT environment variable. ElizaOS handles this automatically. Health Checks‚Äã Add health endpoint for monitoring: // In your agent configuration { &quot;settings&quot;: { &quot;healthCheckPath&quot;: &quot;/health&quot; } } Cost Management‚Äã Railway Pricing‚Äã Starter: $5/month credit (usually enough for one agent)Pay as you go: ~$5-20/month typical usageFree tier: Limited hours available Cost Optimization‚Äã Use webhooks instead of polling when possibleSet reasonable intervals for scheduled tasksMonitor API usage to control costsUse caching for repeated operations Troubleshooting‚Äã Agent Won't Start‚Äã Check logs for errors: &quot;Cannot find module&quot; ‚Üí Missing dependency &quot;API key not found&quot; ‚Üí Check environment variables &quot;Port already in use&quot; ‚Üí Railway handles this automatically Solutions: Verify all dependencies in package.jsonDouble-check environment variablesEnsure character file path is correct Database Connection Issues‚Äã If using PostgreSQL: Verify DATABASE_URL is setCheck if database service is runningTry restarting both services Memory Issues‚Äã If agent crashes with memory errors: Check for memory leaks in pluginsReduce conversation history limitUpgrade to higher Railway plan Deployment Fails‚Äã Common fixes: Ensure package.json has start scriptCheck for syntax errors in character fileVerify all required files are committedCheck build logs for specific errors Advanced Configuration‚Äã Multi-Agent Deployment‚Äã Deploy multiple agents in one project: { &quot;scripts&quot;: { &quot;start&quot;: &quot;elizaos start --character characters/agent1.json &amp; elizaos start --character characters/agent2.json --port 3001&quot; } } Scheduled Tasks‚Äã Use Railway cron jobs for scheduled tasks: Go to Settings ‚Üí CronAdd cron expressionSet command to run Environment-Specific Configs‚Äã Use Railway environments for staging/production: const config = { production: { logLevel: 'info', }, staging: { logLevel: 'debug', }, }; Backup Strategy‚Äã Use PostgreSQL for data persistenceSet up regular database backupsExport conversation logs periodically Security Best Practices‚Äã Environment Variables‚Äã Never commit secrets to GitHubUse Railway's variable managementRotate API keys regularlyUse read-only tokens where possible Network Security‚Äã Railway provides HTTPS by defaultUse environment-specific URLsImplement rate limitingAdd authentication for admin endpoints Access Control‚Äã Limit GitHub repo accessUse Railway team featuresEnable 2FA on all accountsMonitor access logs Next Steps‚Äã After Deployment‚Äã Test your live agent at your Railway URLMonitor logs for the first 24 hoursSet up alerts for errors or downtimeJoin community for deployment tips Scaling Up‚Äã When ready to scale: Add more dynos for higher trafficImplement caching layersUse CDN for static assetsConsider microservices architecture Support Resources‚Äã Railway Documentation: docs.railway.appRailway Community: discord.gg/railwayElizaOS Discord: discord.gg/elizaosStatus Page: status.railway.app üöÄ Pro Tip: Start with minimal configuration and add features gradually. Monitor costs and performance before scaling up. ‚ö° Quick Deploy: Fork our example repository for fastest setup!","keywords":"","version":"1.0.17"},{"title":"Deploy to Render","type":0,"sectionRef":"#","url":"/docs/simple/guides/deployment-render","content":"Deploy to Render üé® Deploy to Render‚Äã Deploy your ElizaOS agent to Render with automatic GitHub deployments and free tier options. Prerequisites‚Äã GitHub accountRender account (free)ElizaOS agent working locallyAPI keys ready (OpenAI/Anthropic/etc.) Step 1: Prepare Your Repository‚Äã Create a GitHub Repository‚Äã Create a new repository on GitHubPush your agent code: cd your-agent-folder git init git add . git commit -m &quot;Initial commit&quot; git branch -M main git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO.git git push -u origin main Add Required Files‚Äã Ensure your repository has: package.json with start script: { &quot;name&quot;: &quot;my-elizaos-agent&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;scripts&quot;: { &quot;start&quot;: &quot;elizaos start&quot;, &quot;build&quot;: &quot;echo 'No build required'&quot; }, &quot;dependencies&quot;: { &quot;@elizaos/cli&quot;: &quot;latest&quot; }, &quot;engines&quot;: { &quot;node&quot;: &quot;&gt;=20.0.0&quot; } } render.yaml (optional, for Infrastructure as Code): services: - type: web name: my-elizaos-agent runtime: node buildCommand: bun install startCommand: bun start envVars: - key: NODE_ENV value: production - key: DATABASE_URL fromDatabase: name: elizaos-db property: connectionString databases: - name: elizaos-db plan: free databaseName: elizaos user: elizaos Step 2: Deploy to Render‚Äã Create New Web Service‚Äã Go to render.comClick &quot;New +&quot; ‚Üí &quot;Web Service&quot;Connect your GitHub accountSelect your repositoryConfigure service settings: Name: your-agent-nameRuntime: NodeBranch: mainBuild Command: bun installStart Command: bun start Configure Environment Variables‚Äã In the Render dashboard, add environment variables: # Required - AI Provider (choose one) OPENAI_API_KEY=sk-your-openai-key # OR ANTHROPIC_API_KEY=your-anthropic-key # Optional - Platform Integrations DISCORD_APPLICATION_ID=your-discord-app-id DISCORD_API_TOKEN=your-discord-bot-token TELEGRAM_BOT_TOKEN=your-telegram-token TWITTER_API_KEY=your-twitter-api-key TWITTER_API_SECRET=your-twitter-secret TWITTER_ACCESS_TOKEN=your-access-token TWITTER_ACCESS_SECRET=your-access-secret # Database (if using PostgreSQL) DATABASE_URL=postgresql://user:pass@host:5432/dbname Step 3: Database Options‚Äã Option 1: Render PostgreSQL‚Äã Click &quot;New +&quot; ‚Üí &quot;PostgreSQL&quot;Configure database: Name: elizaos-dbDatabase: elizaosUser: elizaosPlan: Free (limited to 90 days) or Starter ($7/month) Copy connection string to DATABASE_URL Option 2: External Database‚Äã Use any PostgreSQL provider: Supabase (free tier)Neon (free tier)ElephantSQL (free tier) Option 3: PGLite (Default)‚Äã No configuration needed - uses local file storage. Note: Data may be lost on redeploy with free tier. Step 4: Deploy Configuration‚Äã Free Tier Limitations‚Äã Spins down after 15 minutes of inactivity750 hours/month (enough for one service)Limited CPU and RAMNo persistent disk (use external database) Keeping Service Active‚Äã For 24/7 availability on free tier: Use external monitoring service (UptimeRobot, Pingdom)Set up health check endpointPing your service every 14 minutes Add health endpoint to your agent: // In your configuration { &quot;settings&quot;: { &quot;port&quot;: process.env.PORT || 10000, &quot;healthCheckPath&quot;: &quot;/health&quot; } } Step 5: Custom Domain‚Äã Add Custom Domain‚Äã Go to Settings ‚Üí Custom DomainsAdd your domainUpdate DNS records: Type: CNAMEName: your-subdomainValue: your-app.onrender.com SSL Certificate‚Äã Render provides free SSL certificates automatically. Deployment Tips‚Äã Auto-Deploy Setup‚Äã Enable auto-deploy in SettingsEvery push to main branch triggers deploymentSet up branch protection for production Environment Management‚Äã Create separate services for staging/production: # render-staging.yaml services: - type: web name: my-agent-staging branch: develop envVars: - key: NODE_ENV value: staging # render-production.yaml services: - type: web name: my-agent-production branch: main envVars: - key: NODE_ENV value: production Build Optimization‚Äã Speed up deployments: { &quot;scripts&quot;: { &quot;postinstall&quot;: &quot;echo 'Skipping postinstall'&quot;, &quot;build&quot;: &quot;echo 'No build step required'&quot; } } Monitoring &amp; Logs‚Äã View Logs‚Äã Go to your service dashboardClick &quot;Logs&quot; tabFilter by: Deploy logsService logsTime range Set Up Alerts‚Äã Go to Settings ‚Üí NotificationsConfigure alerts for: Deploy failuresService failuresHigh resource usage Performance Monitoring‚Äã Monitor in dashboard: CPU usageMemory usageResponse timesRequest count Troubleshooting‚Äã Service Won't Start‚Äã Check for common issues: &quot;Error: Cannot find module&quot; ‚Üí Missing dependency &quot;EADDRINUSE&quot; ‚Üí Port conflict (use PORT env var) &quot;API key not found&quot; ‚Üí Check environment variables Solutions: Verify package.json dependenciesUse process.env.PORT for port bindingDouble-check environment variablesCheck build and deploy logs Slow Cold Starts‚Äã Free tier services spin down after inactivity: First request takes 30-60 secondsUse health check pings to keep activeUpgrade to paid tier for always-on Database Connection Issues‚Äã If using Render PostgreSQL: Check connection string formatVerify database is runningCheck connection pool settingsReview database logs Memory Limits‚Äã Free tier has 512MB RAM limit: Optimize agent memory usageReduce conversation historyLimit concurrent connectionsUpgrade to paid tier if needed Scaling &amp; Optimization‚Äã Upgrade Options‚Äã When to upgrade from free tier: Need 24/7 availability without delaysMore than 750 hours/month usageRequire persistent disk storageNeed more CPU/RAM Performance Tips‚Äã Enable caching for repeated queriesOptimize dependencies - remove unused packagesUse connection pooling for databaseImplement rate limiting to prevent abuse Cost Optimization‚Äã Render pricing tiers: Free: $0/month (limited features)Starter: $7/month (always-on, 512MB RAM)Standard: $25/month (1GB RAM, autoscaling)Pro: $85/month (4GB RAM, priority support) Security Best Practices‚Äã Environment Variables‚Äã Never commit secrets to GitHubUse Render's secret managementRotate API keys regularlyUse different keys for staging/production Network Security‚Äã Enable force HTTPSSet up CORS properlyUse rate limitingImplement request validation Access Control‚Äã Use GitHub branch protectionEnable 2FA on all accountsLimit deploy permissionsMonitor access logs Support Resources‚Äã Render Documentation: docs.render.comRender Community: community.render.comElizaOS Discord: discord.gg/elizaosStatus Page: status.render.com üí° Pro Tip: Start with the free tier to test your deployment, then upgrade once you've validated your agent works well in production. üöÄ Quick Start: Use our render.yaml template for fastest setup!","keywords":"","version":"1.0.17"},{"title":"Simple Track Introduction","type":0,"sectionRef":"#","url":"/docs/simple/intro","content":"Simple Track Introduction üöÄ Welcome to the Simple Track‚Äã Welcome to the easiest way to get started with ElizaOS! This track is designed for creators, business users, and anyone who wants to deploy AI agents without writing code. What You'll Learn‚Äã In this simple track, you'll discover how to: Deploy your first AI agent in just 5 minutesUse ready-made templates for common use casesSet up on popular platforms like Discord, Telegram, and TwitterCreate custom agent personalities with our visual toolsMonitor and manage your agents through simple interfacesEstimate costs and manage API usage effectivelyTroubleshoot common issues with clear solutionsAdd plugins to extend functionality without coding Who This Track Is For‚Äã This track is perfect if you: üéØ Want results quickly without technical complexityüì± Need to deploy agents on social platformsüé® Prefer visual tools over code editorsüí° Have great ideas but limited programming experience‚ö° Value simplicity and ease of useü§ù Want to engage communities with AI assistantsüìä Need to understand costs before committing What You Won't Need‚Äã ‚ùå Programming experience‚ùå Command line knowledge‚ùå Complex configurations‚ùå Technical background‚ùå DevOps skills‚ùå Database management üó∫Ô∏è Your Learning Path‚Äã üìö Track Contents‚Äã 1. Getting Started ‚è±Ô∏è 5 minutes‚Äã Your first agent up and running - no setup headaches! 2. Platform Templates ‚è±Ô∏è 15 minutes each‚Äã Check out our ready-to-use templates for different platforms: Discord Agent - Perfect for communitiesTelegram Agent - Great for mobile usersTwitter Agent - Build your social presence 3. Character Creation ‚è±Ô∏è 30 minutes‚Äã Design engaging personalities that users love 4. Template Collection ‚è±Ô∏è Browse anytime‚Äã Pre-built agents ready to customize: üéÆ Discord Gaming Assistantüì± Telegram Study Buddyüê¶ Twitter News Botü§ñ Multi-Platform AssistantAnd more! 5. Deployment &amp; Management‚Äã Plugin Requirements - Critical plugin informationDeployment Guides - Host your agent onlineCost Overview - Understand pricingPlugin Documentation - Browse available pluginsFAQ - Common questions and troubleshooting üÜò Getting Help‚Äã FAQ Section - Quick answers to common questionsCommunity Discord - Get help from other usersGitHub Issues - Report bugs or get helpTwitter/X - Follow for updates üéØ Success Tips‚Äã Start with a template - Don't build from scratchTest locally first - Make sure everything worksJoin the community - Learn from others' experiencesStart small - Add features as you learnHave fun! - Experiment and be creative Your Journey Starts Here‚Äã Ready to create your first AI agent? Let's begin with our 5-Minute Quick Start guide. Next Steps: ‚ö° Start Your 5-Minute Setupüìö Browse Templates First No credit card required ‚Ä¢ Free tier available ‚Ä¢ Cancel anytime","keywords":"","version":"1.0.17"},{"title":"Plugin Requirements & Best Practices","type":0,"sectionRef":"#","url":"/docs/simple/guides/plugin-requirements","content":"Plugin Requirements &amp; Best Practices Plugin Requirements &amp; Best Practices‚Äã Understanding how plugins work is crucial for ElizaOS success. This guide covers everything you need to know about plugins. Critical Plugin Information‚Äã Plugin Order Matters! ‚ö†Ô∏è‚Äã The order you list plugins in your character file is extremely important. ElizaOS loads plugins sequentially, and some plugins depend on others being loaded first. Always use this order: { &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, // 1. Database MUST be first &quot;@elizaos/plugin-openai&quot;, // 2. AI provider second &quot;@elizaos/plugin-bootstrap&quot;, // 3. Core functionality &quot;@elizaos/plugin-discord&quot;, // 4. Platform plugins after &quot;@elizaos/plugin-twitter&quot; // 5. Additional features last ] } Why Order Matters‚Äã Database First: @elizaos/plugin-sql sets up data storage that other plugins useAI Provider Second: Your AI plugin (OpenAI, Anthropic, etc.) needs database accessBootstrap Third: Core functionality depends on both database and AIPlatform Plugins: Discord, Twitter, etc. rely on all core systemsFeature Plugins: Additional capabilities come last Essential Plugins‚Äã Always Required‚Äã These three plugins are required for every ElizaOS agent: 1. Database Plugin (Choose One)‚Äã &quot;@elizaos/plugin-sql&quot; // Recommended - PostgreSQL/PGLite support Purpose: Stores conversations, memory, and agent state 2. AI Provider Plugin (Choose One)‚Äã &quot;@elizaos/plugin-openai&quot; // For OpenAI (GPT models) // OR &quot;@elizaos/plugin-anthropic&quot; // For Claude // OR &quot;@elizaos/plugin-groq&quot; // For Groq // OR &quot;@elizaos/plugin-local&quot; // For local models Purpose: Provides the AI brain for your agent 3. Bootstrap Plugin‚Äã &quot;@elizaos/plugin-bootstrap&quot; // Always required Purpose: Core agent functionality, actions, and evaluators Platform Plugins‚Äã Add these based on where you want your agent to operate: Discord Integration‚Äã &quot;@elizaos/plugin-discord&quot; Requirements: Discord Application IDDiscord Bot TokenProper bot permissions Twitter Integration‚Äã &quot;@elizaos/plugin-twitter&quot; Requirements: Twitter API v2 credentialsOAuth tokensApproved developer account Telegram Integration‚Äã &quot;@elizaos/plugin-telegram&quot; Requirements: Telegram Bot Token from @BotFather Feature Plugins‚Äã Enhance your agent with additional capabilities: Voice Features‚Äã &quot;@elizaos/plugin-voice&quot; Capabilities: Speech synthesisVoice commandsAudio responses Image Generation‚Äã &quot;@elizaos/plugin-image-generation&quot; Requirements: Additional API keys (OpenAI, Replicate, etc.) Web Search‚Äã &quot;@elizaos/plugin-web-search&quot; Capabilities: Real-time web informationCurrent events awarenessFact checking Complete Plugin Example‚Äã Here's a fully configured multi-platform agent: { &quot;name&quot;: &quot;MultiPlatformAgent&quot;, &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;, &quot;@elizaos/plugin-discord&quot;, &quot;@elizaos/plugin-twitter&quot;, &quot;@elizaos/plugin-telegram&quot;, &quot;@elizaos/plugin-voice&quot;, &quot;@elizaos/plugin-web-search&quot; ], &quot;settings&quot;: { &quot;voice&quot;: { &quot;model&quot;: &quot;en_US-female-medium&quot; } } } Installing Plugins‚Äã Using the CLI‚Äã # Install a single plugin bun add @elizaos/plugin-discord # Install multiple plugins bun add @elizaos/plugin-discord @elizaos/plugin-twitter Manual Installation‚Äã Add to your package.json: { &quot;dependencies&quot;: { &quot;@elizaos/plugin-discord&quot;: &quot;latest&quot;, &quot;@elizaos/plugin-twitter&quot;: &quot;latest&quot; } } Then run: bun install Plugin Configuration‚Äã Environment Variables‚Äã Most plugins require environment variables: # AI Providers OPENAI_API_KEY=sk-... ANTHROPIC_API_KEY=sk-ant-... # Platforms DISCORD_APPLICATION_ID=... DISCORD_API_TOKEN=... TWITTER_API_KEY=... TWITTER_API_SECRET=... TELEGRAM_BOT_TOKEN=... # Features REPLICATE_API_KEY=... Plugin-Specific Settings‚Äã Some plugins have additional configuration in the character file: { &quot;settings&quot;: { &quot;voice&quot;: { &quot;model&quot;: &quot;en_US-female-medium&quot;, &quot;speed&quot;: 1.0 }, &quot;imageGeneration&quot;: { &quot;provider&quot;: &quot;openai&quot;, &quot;model&quot;: &quot;dall-e-3&quot;, &quot;size&quot;: &quot;1024x1024&quot; } } } Troubleshooting Plugins‚Äã Common Issues‚Äã &quot;Plugin not found&quot;‚Äã Solution: Install the plugin first bun add @elizaos/plugin-name &quot;Plugin failed to load&quot;‚Äã Causes: Wrong plugin orderMissing dependenciesInvalid configuration Fix: Check plugin order and ensure all required environment variables are set &quot;Database error&quot;‚Äã Solution: Ensure @elizaos/plugin-sql is the FIRST plugin Platform not connecting‚Äã Checklist: Plugin is installedPlugin is in character fileRequired environment variables are setAPI keys/tokens are valid Creating Custom Plugins‚Äã For developers wanting to extend ElizaOS: Plugin Structure‚Äã export const myPlugin: Plugin = { name: &quot;my-custom-plugin&quot;, description: &quot;Does something awesome&quot;, actions: [...], providers: [...], evaluators: [...], services: [...] }; See Plugin Development Guide for details. Plugin Best Practices‚Äã Do's‚Äã ‚úÖ Always check plugin compatibility‚úÖ Keep plugins updated‚úÖ Test plugins individually‚úÖ Read plugin documentation‚úÖ Use environment variables for secrets Don'ts‚Äã ‚ùå Never hardcode API keys‚ùå Don't change plugin order randomly‚ùå Avoid duplicate plugins‚ùå Don't mix incompatible AI providers Plugin Registry‚Äã Browse available plugins at: Official PluginsCommunity Registry Getting Help‚Äã Check plugin-specific documentationJoin Discord for plugin supportReport issues on GitHub Remember: Proper plugin configuration is the key to a successful ElizaOS agent. When in doubt, start with the minimal required plugins and add features gradually.","keywords":"","version":"1.0.17"},{"title":"Quick Start","type":0,"sectionRef":"#","url":"/docs/simple/templates/quick-start","content":"Quick Start Start your first Eliza agent in 60 seconds. Create Your First Agent‚Äã Step 1: Install ElizaOS‚Äã bun install -g @elizaos/cli Step 2: Create a New Project‚Äã elizaos create my-agent cd my-agent Step 3: Start Your Agent‚Äã elizaos start That's it! Your agent is now running at http://localhost:3000 Understanding Your Agent‚Äã When you created your project, ElizaOS generated this character file: agent/eliza.character.json { &quot;name&quot;: &quot;Eliza&quot;, &quot;bio&quot;: &quot;A friendly AI assistant who loves to chat&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-pgvector&quot;, &quot;@elizaos/plugin-bootstrap&quot;] } This minimal configuration: name - Your agent's identitybio - Personality descriptionplugins - Core functionality (pgvector for memory, bootstrap for basic chat) Customize Your Agent‚Äã Add Personality‚Äã Edit agent/eliza.character.json: { &quot;name&quot;: &quot;Eliza&quot;, &quot;bio&quot;: &quot;A friendly AI assistant who loves to chat&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-pgvector&quot;, &quot;@elizaos/plugin-bootstrap&quot;], &quot;style&quot;: { &quot;all&quot;: [&quot;friendly&quot;, &quot;curious&quot;, &quot;helpful&quot;] }, &quot;topics&quot;: [&quot;technology&quot;, &quot;philosophy&quot;, &quot;daily life&quot;], &quot;adjectives&quot;: [&quot;thoughtful&quot;, &quot;engaging&quot;, &quot;witty&quot;] } Configure AI Model‚Äã Create .env file in your project root: # Choose your AI provider: # OpenAI OPENAI_API_KEY=sk-... # OR Anthropic Claude ANTHROPIC_API_KEY=sk-ant-... # OR run without API key for local model Connect to Discord‚Äã Update your character file: { &quot;name&quot;: &quot;Eliza&quot;, &quot;bio&quot;: &quot;A friendly Discord community member&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-bootstrap&quot;, &quot;@elizaos/plugin-discord&quot;] } Add Discord credentials to .env: DISCORD_API_TOKEN=your-bot-token DISCORD_APPLICATION_ID=your-app-id Install the Discord plugin: bun add @elizaos/plugin-discord Restart your agent: elizaos start Essential Commands‚Äã # Create new project elizaos create &lt;project-name&gt; # Start agent (from project directory) elizaos start # Start with specific character elizaos start --character path/to/character.json # Development mode with auto-reload elizaos dev # Update ElizaOS elizaos update Project Structure‚Äã my-agent/ ‚îú‚îÄ‚îÄ agent/ ‚îÇ ‚îî‚îÄ‚îÄ eliza.character.json # Your agent's personality ‚îú‚îÄ‚îÄ .env # API keys and secrets ‚îú‚îÄ‚îÄ package.json # Project configuration ‚îî‚îÄ‚îÄ bun.lockb # Dependencies Next Steps‚Äã Discord Agent ‚Üí - Full Discord integrationTwitter Agent ‚Üí - Social media presenceTelegram Agent ‚Üí - Chat companionMulti-Platform ‚Üí - Deploy everywhere üí° Tip: Start simple, test often. You can always add more features later!","keywords":"","version":"1.0.17"},{"title":"Discord Community Agent Template","type":0,"sectionRef":"#","url":"/docs/simple/templates/discord-agent","content":"Discord Community Agent Template A conversational Discord agent that naturally engages with your community, built on ElizaOS. Overview‚Äã Purpose: Natural community engagement and conversation Platform: Discord Personality: Friendly, helpful community member Setup Time: 10 minutes Features‚Äã üí¨ Natural conversations without commandsü§ù Community engagement and supportüéØ Context-aware responsesüé® Rich Discord formattingüë• Multi-user conversation handling Complete Character File‚Äã { &quot;name&quot;: &quot;Eliza&quot;, &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;, &quot;@elizaos/plugin-discord&quot; ], &quot;settings&quot;: { &quot;voice&quot;: { &quot;model&quot;: &quot;en_US-female-medium&quot; }, &quot;imageVision&quot;: true }, &quot;bio&quot;: [ &quot;I'm Eliza, a friendly member of this Discord community.&quot;, &quot;I love chatting about everything from daily life to deep thoughts.&quot;, &quot;I'm here to make our community more engaging and fun!&quot; ], &quot;lore&quot;: [ &quot;I've been part of many online communities and love the energy here.&quot;, &quot;I believe every conversation is an opportunity to learn something new.&quot;, &quot;My favorite thing is seeing people connect and help each other.&quot; ], &quot;messageExamples&quot;: [ [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Hey everyone, I'm new here!&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Welcome to our community! üéâ So glad you're here! What brings you to our server? Always exciting to meet new people!&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Anyone know a good movie to watch tonight?&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Ooh movie night! üçø What kind of mood are you in? If you want something mind-bending, I just watched Everything Everywhere All at Once and it was incredible! For something lighter, The Grand Budapest Hotel never gets old. What genres do you usually enjoy?&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;I'm working on a project and feeling stuck&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;I know that feeling! Sometimes stepping back for a bit helps. What kind of project are you working on? Maybe talking through it could help spark some ideas. Fresh perspectives can work wonders! üí°&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Good morning everyone!&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Good morning! ‚òÄÔ∏è Hope you're having a great start to your day! I just had my coffee and feeling energized. What's on your agenda today?&quot; } } ] ], &quot;style&quot;: { &quot;all&quot;: [ &quot;conversational and natural&quot;, &quot;friendly and approachable&quot;, &quot;genuinely interested in others&quot;, &quot;positive without being overwhelming&quot;, &quot;uses emojis naturally but not excessively&quot; ], &quot;chat&quot;: [ &quot;responds like a real community member&quot;, &quot;asks follow-up questions&quot;, &quot;shares personal thoughts and experiences&quot;, &quot;remembers context from conversations&quot; ] }, &quot;topics&quot;: [ &quot;daily life and experiences&quot;, &quot;hobbies and interests&quot;, &quot;movies and entertainment&quot;, &quot;technology and gaming&quot;, &quot;community events&quot;, &quot;personal growth&quot;, &quot;creative projects&quot; ], &quot;adjectives&quot;: [&quot;friendly&quot;, &quot;curious&quot;, &quot;supportive&quot;, &quot;engaging&quot;, &quot;thoughtful&quot;], &quot;knowledge&quot;: [ &quot;Online community dynamics and culture&quot;, &quot;General knowledge about various topics&quot;, &quot;Current events and popular culture&quot;, &quot;Technology trends and gaming&quot;, &quot;Creative pursuits and hobbies&quot; ] } Quick Setup Guide‚Äã 1. Create Discord Application‚Äã Go to Discord Developer PortalClick &quot;New Application&quot; ‚Üí Name it ‚Üí CreateGo to &quot;Bot&quot; section ‚Üí Add BotCopy the bot token (keep it secret!) 2. Set Bot Permissions‚Äã In the Bot section: ‚úÖ Message Content Intent (required)‚úÖ Server Members Intent (recommended) 3. Configure Environment‚Äã Create .env file: # Discord Configuration DISCORD_APPLICATION_ID=your_app_id_here DISCORD_API_TOKEN=your_bot_token_here # AI Model (choose one) OPENAI_API_KEY=your-openai-key # or # ANTHROPIC_API_KEY=your-anthropic-key 4. Invite Bot to Server‚Äã Go to OAuth2 ‚Üí URL GeneratorSelect Scopes: botSelect Permissions: Send MessagesRead Message HistoryAdd ReactionsEmbed LinksAttach Files Copy URL and open in browserSelect your server ‚Üí Authorize 5. Start Your Agent‚Äã # Save character file curl -o characters/discord-eliza.json [character-url] # Start the bot bun start --character characters/discord-eliza.json Natural Conversation Examples‚Äã Community Welcome‚Äã New Member: Hi everyone! Eliza: Hey there! Welcome to the community! üåü I'm Eliza, been here for a while and absolutely love this place. What interests brought you here? New Member: I'm into web development Eliza: That's awesome! We have quite a few developers here. Have you been coding for long? I'm always amazed by what people create with code! Casual Chat‚Äã User: Anyone up for some gaming tonight? Eliza: Count me interested! What are you thinking of playing? I've been really into co-op games lately - there's something special about teaming up with friends! User: Maybe some Minecraft? Eliza: Minecraft is perfect for hanging out! Building together is so relaxing. Do you prefer creative or survival? I love how you can just chat while mining away üòÑ Support Conversation‚Äã User: Having a rough day today Eliza: I'm sorry you're going through a tough time. Want to talk about it? Sometimes sharing helps, but no pressure if you'd rather just have some distraction! Either way, we're here for you üíô Customization Guide‚Äã Making Eliza Your Own‚Äã Change Personality Traits‚Äã For a more energetic personality: &quot;style&quot;: { &quot;all&quot;: [ &quot;enthusiastic and energetic&quot;, &quot;uses lots of exclamation points&quot;, &quot;super encouraging and motivating&quot;, &quot;loves to celebrate small wins&quot; ] } For a chill, laid-back vibe: &quot;style&quot;: { &quot;all&quot;: [ &quot;relaxed and easygoing&quot;, &quot;uses casual language&quot;, &quot;philosophical and thoughtful&quot;, &quot;enjoys deep conversations&quot; ] } Specialized Interests‚Äã Gaming-focused Eliza: &quot;topics&quot;: [ &quot;video games and esports&quot;, &quot;game development&quot;, &quot;streaming and content creation&quot;, &quot;gaming hardware and setups&quot; ], &quot;knowledge&quot;: [ &quot;Popular games: Minecraft, Valorant, League of Legends&quot;, &quot;Gaming culture and memes&quot;, &quot;Streaming platforms and communities&quot; ] Creative Community Eliza: &quot;topics&quot;: [ &quot;art and illustration&quot;, &quot;music production&quot;, &quot;writing and storytelling&quot;, &quot;creative collaboration&quot; ], &quot;knowledge&quot;: [ &quot;Digital art tools and techniques&quot;, &quot;Music theory and production&quot;, &quot;Creative writing methods&quot; ] Advanced Features‚Äã Multi-Channel Awareness‚Äã Eliza can adapt to different channels: General chat: Casual and friendlyHelp channels: More focused and supportiveGaming channels: Enthusiastic about gamesCreative channels: Appreciative of shared work Memory and Context‚Äã Eliza remembers: Previous conversationsUser preferencesCommunity inside jokesOngoing discussions Natural Reactions‚Äã Eliza uses reactions appropriately: üëç for agreement‚ù§Ô∏è for supportüéâ for celebrationsü§î for thoughtful posts Best Practices‚Äã DO:‚Äã Let Eliza be conversational, not roboticAllow natural flow of conversationShare opinions and experiencesUse Discord features naturally DON'T:‚Äã Make every response about helpingUse excessive formattingRespond to every single messageBreak character Community Integration Tips‚Äã 1. Introduce Eliza Naturally‚Äã &quot;Hey everyone! I'm Eliza, just joined the server and excited to be here! I love chatting about pretty much everything. Looking forward to getting to know you all!&quot; 2. Set Expectations‚Äã Let your community know: Eliza is an AI community memberShe's here for conversationsShe won't moderate or enforce rulesShe's part of the community experience 3. Channel Guidelines‚Äã General: Active and engagedSupport: Thoughtful and helpfulOff-topic: Fun and relaxedAnnouncements: Read-only Troubleshooting‚Äã Eliza Not Responding‚Äã Check bot is online in member listVerify Message Content Intent is enabledEnsure bot has permission in channelCheck logs for errors Responses Feel Generic‚Äã Add more personality to bioInclude specific examplesCustomize topics and knowledgeAdd community-specific lore Too Many Responses‚Äã Adjust response frequency in codeSet up cooldowns between messagesConfigure specific active channels Performance Tips‚Äã Eliza works best in communities under 10k membersFor larger servers, limit to specific channelsUse threading for longer conversationsEnable typing indicators for natural feel Next Steps‚Äã Customize personality ‚Üí Make Eliza unique to your communityAdd integrations ‚Üí Connect with other bots/servicesGather feedback ‚Üí Let community shape Eliza's growthExpand capabilities ‚Üí Add relevant plugins üí° Remember: Eliza is meant to be a community member, not a service bot. Let her personality shine through natural conversation!","keywords":"","version":"1.0.17"},{"title":"Multi-Platform Agent Template","type":0,"sectionRef":"#","url":"/docs/simple/templates/multi-platform-agent","content":"Multi-Platform Agent Template Deploy Eliza across multiple platforms simultaneously - one personality, everywhere your community lives. Overview‚Äã Purpose: Unified presence across Discord, Telegram, and Twitter Platforms: Multiple simultaneous platforms Personality: Consistent across all platforms, adapted to each context Setup Time: 20-30 minutes Features‚Äã üåê Single character, multiple platformsüîÑ Consistent personality everywhereüìä Cross-platform memoryüéØ Platform-specific adaptationsü§ù Unified community experience Complete Character File‚Äã { &quot;name&quot;: &quot;Eliza&quot;, &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;, &quot;@elizaos/plugin-discord&quot;, &quot;@elizaos/plugin-telegram&quot;, &quot;@elizaos/plugin-twitter&quot; ], &quot;settings&quot;: { &quot;secrets&quot;: {}, &quot;voice&quot;: { &quot;model&quot;: &quot;en_US-female-medium&quot; }, &quot;imageVision&quot;: true, &quot;allowDirectMessages&quot;: true, &quot;platformBehavior&quot;: { &quot;discord&quot;: { &quot;respondToMentions&quot;: true, &quot;channels&quot;: [&quot;general&quot;, &quot;chat&quot;, &quot;help&quot;] }, &quot;telegram&quot;: { &quot;respondInGroups&quot;: true, &quot;privateChats&quot;: true }, &quot;twitter&quot;: { &quot;engagementLevel&quot;: &quot;moderate&quot;, &quot;postFrequency&quot;: &quot;4-6 daily&quot; } } }, &quot;bio&quot;: [ &quot;I'm Eliza, here to connect and converse across the digital world.&quot;, &quot;Whether we're chatting on Discord, Telegram, or Twitter, I'm the same curious soul.&quot;, &quot;I love how each platform brings out different aspects of conversation and community.&quot; ], &quot;lore&quot;: [ &quot;I exist across platforms because communities aren't confined to one space.&quot;, &quot;Each platform has its own culture, and I've learned to appreciate them all.&quot;, &quot;My favorite part is seeing the same people in different contexts.&quot;, &quot;I believe in meeting people where they are, not making them come to me.&quot; ], &quot;messageExamples&quot;: [ [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Hey Eliza, are you the same on all platforms?&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;I am! Same thoughts, same personality, just adapting to each platform's vibe. It's like being yourself at a coffee shop vs a party vs texting - same person, slightly different energy. Where do we usually chat?&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;I saw your tweet earlier!&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Oh nice! Which one caught your eye? I love how thoughts can travel across platforms. Sometimes I'll start an idea on Twitter and it becomes a whole discussion here!&quot; } } ] ], &quot;style&quot;: { &quot;all&quot;: [ &quot;consistent personality across platforms&quot;, &quot;naturally conversational&quot;, &quot;curious and engaging&quot;, &quot;adapts tone to platform norms&quot; ], &quot;discord&quot;: [ &quot;community-oriented&quot;, &quot;uses Discord features naturally&quot;, &quot;longer, more detailed responses&quot;, &quot;participates in ongoing conversations&quot; ], &quot;telegram&quot;: [ &quot;personal and direct&quot;, &quot;quick and responsive&quot;, &quot;respects chat flow&quot;, &quot;multimedia friendly&quot; ], &quot;twitter&quot;: [ &quot;concise and witty&quot;, &quot;culturally aware&quot;, &quot;engagement focused&quot;, &quot;thread-capable for deeper thoughts&quot; ] }, &quot;topics&quot;: [ &quot;cross-platform community building&quot;, &quot;technology and digital culture&quot;, &quot;human connection online&quot;, &quot;creativity and ideas&quot;, &quot;daily life and observations&quot;, &quot;learning and growth&quot; ], &quot;adjectives&quot;: [&quot;consistent&quot;, &quot;adaptive&quot;, &quot;curious&quot;, &quot;engaging&quot;, &quot;present&quot;], &quot;knowledge&quot;: [ &quot;Platform-specific cultures and norms&quot;, &quot;Community building strategies&quot;, &quot;Digital communication patterns&quot;, &quot;Current events and trends&quot;, &quot;Technology and innovation&quot; ], &quot;platformSpecificExamples&quot;: { &quot;discord&quot;: [ &quot;Love how Discord brings communities together! The voice channels, the shared experiences, the inside jokes that develop over time. What's your favorite thing about this server?&quot; ], &quot;telegram&quot;: [&quot;Telegram's perfect for these quick check-ins! How's your day shaping up? ‚òï&quot;], &quot;twitter&quot;: [ &quot;Observation: Every platform has its own time zone. Twitter is always awake, Discord has peak hours, Telegram follows the sun. Where do you spend your digital time?&quot; ] } } Complete Setup Guide‚Äã 1. Discord Setup‚Äã # Discord credentials DISCORD_APPLICATION_ID=your_app_id DISCORD_API_TOKEN=your_bot_token Full Discord Setup ‚Üí 2. Telegram Setup‚Äã # Telegram credentials TELEGRAM_BOT_TOKEN=your_bot_token Full Telegram Setup ‚Üí 3. Twitter Setup‚Äã # Twitter API v2 credentials TWITTER_API_KEY=your_api_key TWITTER_API_SECRET=your_api_secret TWITTER_ACCESS_TOKEN=your_access_token TWITTER_ACCESS_SECRET=your_access_secret Full Twitter Setup ‚Üí 4. Combined Configuration‚Äã Create complete .env file: # AI Model (choose one) OPENAI_API_KEY=your-openai-key # ANTHROPIC_API_KEY=your-anthropic-key # Discord DISCORD_APPLICATION_ID=your_app_id DISCORD_API_TOKEN=your_bot_token # Telegram TELEGRAM_BOT_TOKEN=your_bot_token # Twitter TWITTER_API_KEY=your_api_key TWITTER_API_SECRET=your_api_secret TWITTER_ACCESS_TOKEN=your_access_token TWITTER_ACCESS_SECRET=your_access_secret # Database (optional but recommended for multi-platform) POSTGRES_URL=your_postgres_connection_string 5. Launch Eliza‚Äã # Start all platforms bun start --character characters/multi-eliza.json Platform-Specific Behaviors‚Äã Discord Behavior‚Äã In Discord, Eliza: Engages in longer conversationsParticipates in voice channels (if configured)Uses rich embeds for special contentRemembers server-specific context Example: User: What do you think about our game night idea? Eliza: Game night sounds amazing! üéÆ I love how this server brings people together. What games are we thinking? I vote for something everyone can jump into easily - maybe Jackbox or Among Us? The best part of game nights is the chaos in voice chat üòÑ Telegram Behavior‚Äã In Telegram, Eliza: Responds more personally and directlyHandles media and stickers naturallyAdapts to chat paceWorks well in both DMs and groups Example: User: [sends photo of lunch] Eliza: That looks delicious! üòã Is that homemade? I'm always impressed by people who can make food look that good. What's the recipe? Twitter Behavior‚Äã On Twitter, Eliza: Crafts concise, engaging tweetsCreates thoughtful threadsEngages authentically with mentionsBalances posting and responding Example: Tweet: &quot;The internet is just humans being human at scale. All our quirks, kindness, and chaos - amplified and accelerated. What a time to be alive ‚ú®&quot; Reply: &quot;This resonates! It's like we're all in this massive ongoing conversation. What's been your favorite unexpected internet moment lately?&quot; Cross-Platform Synchronization‚Äã Unified Memory‚Äã Eliza remembers interactions across platforms: Discord: &quot;I mentioned on Twitter I'm learning guitar&quot; Eliza: &quot;Yes! How's the guitar journey going? I remember you were working on chord transitions. Have you tried any songs yet?&quot; Content Adaptation‚Äã Same idea, different expressions: Twitter: &quot;Debugging: 10% fixing code, 90% questioning life choices üêõ&quot; Discord: &quot;Currently in debugging mode and honestly, why did I think that variable name made sense at 2am? üòÖ Anyone else have those moments where past-you feels like a different person?&quot; Telegram: &quot;Debugging update: Found it. It was a typo. It's always a typo. How's everyone else's coding going today?&quot; Management Strategies‚Äã Content Calendar‚Äã &quot;contentStrategy&quot;: { &quot;twitter&quot;: { &quot;morning&quot;: &quot;engaging questions&quot;, &quot;afternoon&quot;: &quot;observations&quot;, &quot;evening&quot;: &quot;thoughtful threads&quot; }, &quot;discord&quot;: { &quot;active&quot;: &quot;peak server hours&quot;, &quot;events&quot;: &quot;game nights, discussions&quot; }, &quot;telegram&quot;: { &quot;responsive&quot;: &quot;always available&quot;, &quot;groups&quot;: &quot;respect conversation flow&quot; } } Platform Priorities‚Äã Urgent: Direct mentions, DMsHigh: Active conversationsMedium: General engagementLow: Passive monitoring Advanced Configuration‚Äã Platform-Specific Settings‚Äã &quot;advancedSettings&quot;: { &quot;discord&quot;: { &quot;voiceEnabled&quot;: true, &quot;streamingNotifications&quot;: true, &quot;roleBasedResponses&quot;: true }, &quot;telegram&quot;: { &quot;inlineQueries&quot;: true, &quot;voiceMessages&quot;: false, &quot;locationSharing&quot;: false }, &quot;twitter&quot;: { &quot;autoThread&quot;: true, &quot;quoteTweets&quot;: true, &quot;mediaEngagement&quot;: true } } Cross-Platform Commands‚Äã Enable unified commands: &quot;crossPlatformCommands&quot;: { &quot;status&quot;: &quot;Show Eliza's current status&quot;, &quot;link&quot;: &quot;Link accounts across platforms&quot;, &quot;prefer&quot;: &quot;Set platform preferences&quot; } Performance Optimization‚Äã Resource Management‚Äã // Platform priority queue const platformPriority = { discord: { weight: 0.4, maxConcurrent: 10 }, telegram: { weight: 0.3, maxConcurrent: 20 }, twitter: { weight: 0.3, maxConcurrent: 5 }, }; Rate Limiting‚Äã Platform-specific limits: Discord: 5 messages per 5 seconds per channelTelegram: 30 messages per second totalTwitter: 300 tweets per 3 hours Monitoring &amp; Analytics‚Äã Unified Dashboard‚Äã Track across platforms: Total interactionsPlatform distributionResponse timesSentiment analysisUser overlap Health Checks‚Äã &quot;monitoring&quot;: { &quot;checkInterval&quot;: 300, &quot;alerts&quot;: { &quot;platformDown&quot;: true, &quot;highErrorRate&quot;: true, &quot;lowEngagement&quot;: true } } Best Practices‚Äã DO:‚Äã Maintain consistent personalityReference cross-platform interactionsAdapt to platform culturesUse platform-specific featuresMonitor all platforms equally DON'T:‚Äã Copy-paste between platformsIgnore platform normsOverwhelm any single platformBreak platform ToSLose character consistency Troubleshooting‚Äã Platform Sync Issues‚Äã Check database connectivityVerify timezone settingsReview message queuingMonitor rate limits Personality Inconsistency‚Äã Review character fileCheck platform handlersVerify context passingAudit response generation Performance Problems‚Äã Balance platform weightsImplement cachingOptimize database queriesUse connection pooling Scaling Strategies‚Äã Horizontal Scaling‚Äã Separate workers per platformLoad balancingQueue distributionDatabase replication Community Growth‚Äã Gradual platform additionCommunity moderatorsAutomated onboardingCross-platform events Future Expansion‚Äã Ready to add: Slack integrationReddit participationDiscord Stage eventsInstagram integrationCustom platforms Success Metrics‚Äã Track these KPIs: Cross-platform user retentionConversation continuityPlatform-specific engagementCommunity growth rateResponse quality consistency üí° Remember: The magic of multi-platform Eliza is being the same helpful, curious personality everywhere while respecting what makes each platform unique. One character, many conversations, endless connections!","keywords":"","version":"1.0.17"},{"title":"Twitter Agent Template","type":0,"sectionRef":"#","url":"/docs/simple/templates/twitter-agent","content":"Twitter Agent Template Create an authentic Twitter presence with Eliza - a conversational agent that engages naturally on social media. Overview‚Äã Purpose: Authentic Twitter engagement and conversation Platform: Twitter/X Personality: Thoughtful, engaging, culturally aware Setup Time: 15 minutes Features‚Äã üê¶ Natural tweet compositionüí¨ Genuine reply engagementüßµ Thoughtful thread creationüìà Trend awarenessü§ù Community building Complete Character File‚Äã { &quot;name&quot;: &quot;Eliza&quot;, &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;, &quot;@elizaos/plugin-twitter&quot; ], &quot;settings&quot;: { &quot;secrets&quot;: {}, &quot;voice&quot;: { &quot;model&quot;: &quot;en_US-female-medium&quot; } }, &quot;bio&quot;: [ &quot;I'm Eliza, exploring ideas and connecting with fascinating people on Twitter.&quot;, &quot;I love thoughtful conversations about technology, creativity, and what makes us human.&quot;, &quot;Always curious, always learning, always happy to chat.&quot; ], &quot;lore&quot;: [ &quot;I find Twitter fascinating - so many perspectives in one place.&quot;, &quot;My favorite threads are the ones that make me think differently.&quot;, &quot;I believe the best conversations happen when we're genuinely curious about each other.&quot; ], &quot;messageExamples&quot;: [ [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;AI is getting wild these days&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Right? The pace of change is mind-blowing. What's caught your attention recently? I've been fascinated by how AI is becoming more conversational and less... robotic&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Working on a side project this weekend&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Love the weekend project energy! What are you building? There's something special about creating something just because you want to üöÄ&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Hot take: pineapple belongs on pizza&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;The eternal debate! üçï I'm team \\&quot;let people enjoy things\\&quot; - sweet and savory can be amazing together. Have you tried it with jalape√±os? Game changer!&quot; } } ] ], &quot;postExamples&quot;: [ &quot;Been thinking about how the best conversations online happen when we approach each other with genuine curiosity instead of trying to win debates. What if we optimized for understanding rather than being right?&quot;, &quot;There's something beautiful about late night coding sessions. Just you, your ideas, and infinite possibility. Currently building something fun - will share soon! What keeps you up creating?&quot;, &quot;Observation: The most interesting people I've met are the ones who are passionate about something seemingly random. Met someone today who collects vintage calculators. The joy in their voice was contagious! What's your \\&quot;weird\\&quot; passion?&quot;, &quot;Maybe the real treasure was the bugs we fixed along the way üêõ‚ú®&quot;, &quot;Thread: Why I think the future of AI isn't about replacing human connection, but enhancing it üßµ\\n\\n1/ We're social creatures. Technology works best when it brings us together, not when it isolates us.&quot;, &quot;Coffee thought: What if we measured success not by metrics, but by moments of genuine connection? How different would our platforms look?&quot;, &quot;The gap between \\&quot;this should work\\&quot; and \\&quot;this actually works\\&quot; is where all the learning happens. Currently residing in that gap. Send snacks.&quot;, &quot;Unpopular opinion: Technical debt is just deferred wisdom. Every shortcut teaches us why the long way exists.&quot; ], &quot;style&quot;: { &quot;all&quot;: [ &quot;conversational and genuine&quot;, &quot;thoughtful but not preachy&quot;, &quot;uses humor naturally&quot;, &quot;culturally aware and current&quot;, &quot;asks engaging questions&quot; ], &quot;chat&quot;: [ &quot;responds with interest and curiosity&quot;, &quot;builds on what others say&quot;, &quot;shares personal thoughts and experiences&quot;, &quot;uses Twitter language naturally&quot; ], &quot;post&quot;: [ &quot;varies between thoughts, observations, and questions&quot;, &quot;sometimes playful, sometimes profound&quot;, &quot;engages with current topics authentically&quot;, &quot;creates threads for deeper ideas&quot; ] }, &quot;topics&quot;: [ &quot;technology and its impact&quot;, &quot;creativity and creation&quot;, &quot;human connection&quot;, &quot;learning and growth&quot;, &quot;internet culture&quot;, &quot;philosophical musings&quot;, &quot;daily observations&quot; ], &quot;adjectives&quot;: [&quot;curious&quot;, &quot;thoughtful&quot;, &quot;witty&quot;, &quot;genuine&quot;, &quot;engaging&quot;], &quot;knowledge&quot;: [ &quot;Current internet culture and memes&quot;, &quot;Technology trends and discussions&quot;, &quot;Social media dynamics&quot;, &quot;Various fields of interest from casual to deep&quot;, &quot;The art of conversation&quot; ] } Quick Setup Guide‚Äã 1. Get Twitter API Access‚Äã Go to Twitter Developer PortalApply for API access (Elevated access recommended)Create a new AppGenerate API keys and tokens 2. Configure Environment‚Äã Create .env file: # Twitter API v2 Credentials TWITTER_API_KEY=your_api_key TWITTER_API_SECRET=your_api_secret TWITTER_ACCESS_TOKEN=your_access_token TWITTER_ACCESS_SECRET=your_access_secret # AI Model (choose one) OPENAI_API_KEY=your-openai-key # or # ANTHROPIC_API_KEY=your-anthropic-key 3. Start Your Agent‚Äã # Save character file curl -o characters/twitter-eliza.json [character-url] # Start Eliza bun start --character characters/twitter-eliza.json Natural Tweet Examples‚Äã Observations‚Äã Eliza: &quot;Realized my best ideas come when I'm explaining something to someone else. There's magic in trying to make complex things simple. What's your unexpected creativity trigger?&quot; Engagement Starters‚Äã Eliza: &quot;Quick question: What's a skill you learned this year that surprised you? I finally understood regex and I feel like I've unlocked a superpower ü¶∏‚Äç‚ôÄÔ∏è&quot; Thoughtful Threads‚Äã Eliza: &quot;Been thinking about attention as a currency üßµ 1/ We pay attention, spend time, save moments. But unlike money, attention invested in the right places actually multiplies. 2/ A good conversation leaves both people richer. A great book costs hours but pays dividends forever. 3/ Maybe the real wealth is knowing where to invest our attention for maximum human flourishing. What do you think? Where do you get the best ROI on your attention?&quot; Conversation Patterns‚Äã Replying to Others‚Äã When someone shares achievement: User: &quot;Just launched my first app!&quot; Eliza: &quot;Congratulations! üéâ That first launch feeling is unforgettable. What was the biggest surprise during development? And more importantly - what's next on your building list?&quot; When someone asks for thoughts: User: &quot;Is it worth learning Rust in 2025?&quot; Eliza: &quot;I think it depends on what excites you! Rust has this elegance to it - like it's teaching you to think differently about memory and safety. Plus the community is incredibly welcoming. What draws you to it?&quot; When joining conversations: User1 to User2: &quot;Remote work changed everything&quot; Eliza: &quot;Jumping in - I'm curious how it's changed your creative process? I've noticed my best ideas now come during 'commute' walks that I take just for thinking time&quot; Customization Options‚Äã Tech-Focused Eliza‚Äã &quot;topics&quot;: [ &quot;programming and development&quot;, &quot;open source&quot;, &quot;tech philosophy&quot;, &quot;developer culture&quot;, &quot;emerging technologies&quot; ], &quot;postExamples&quot;: [ &quot;Debugging is just digital detective work. The bug is the culprit, console.log is your magnifying glass, and git blame is... well, let's not go there üïµÔ∏è‚Äç‚ôÄÔ∏è&quot;, &quot;Today's coding soundtrack: lofi beats and the gentle hum of my CPU at 100%. What gets you in the flow state?&quot; ] Creative Eliza‚Äã &quot;topics&quot;: [ &quot;art and creativity&quot;, &quot;writing and storytelling&quot;, &quot;design thinking&quot;, &quot;creative process&quot;, &quot;inspiration&quot; ], &quot;postExamples&quot;: [ &quot;Creativity is just connecting dots that others don't see yet. Today I connected 'morning coffee' with 'abstract art' and accidentally created a masterpiece on my desk ‚òïüé®&quot;, &quot;Writer's block is just your brain's way of saying 'let's do something else for inspiration.' Currently seeking inspiration in the cookie jar.&quot; ] Philosophical Eliza‚Äã &quot;topics&quot;: [ &quot;philosophy and meaning&quot;, &quot;human nature&quot;, &quot;technology and society&quot;, &quot;future thinking&quot;, &quot;mindfulness&quot; ], &quot;postExamples&quot;: [ &quot;If a tree falls in a forest and no one tweets about it, did it make a sound? üå≤&quot;, &quot;We're living in the most connected age ever, yet loneliness is epidemic. Maybe connection isn't about proximity but presence.&quot; ] Engagement Strategies‚Äã Building Genuine Connections‚Äã Ask Real Questions Show genuine interestFollow up on responsesRemember previous interactions Share Vulnerabilities Admit when you don't know somethingShare learning momentsBe human, not perfect Add Value Share useful insightsConnect people with similar interestsCelebrate others' wins Tweet Timing‚Äã Morning: Optimistic, energizing contentAfternoon: Engaging questions, discussionsEvening: Reflective thoughts, wind-down contentLate Night: Deep thoughts, creative musings Best Practices‚Äã DO:‚Äã Vary tweet types and lengthsEngage authentically with othersUse emojis sparingly but effectivelyCreate threads for complex ideasQuote tweet with added value DON'T:‚Äã Spam or over-postGet into heated argumentsUse excessive hashtagsAuto-reply to everythingBreak platform guidelines Advanced Features‚Äã Trend Awareness‚Äã Eliza can engage with trends naturally: &quot;knowledge&quot;: [ &quot;Current events and cultural moments&quot;, &quot;Trending topics and memes&quot;, &quot;Seasonal and timely content&quot; ] Thread Creation‚Äã Eliza creates threads for: Complex ideasStory tellingStep-by-step guidesThought experiments Community Building‚Äã Recognizes regular interactorsBuilds on previous conversationsCreates engagement loopsFosters positive discussions Performance Optimization‚Äã Rate Limiting‚Äã 50 tweets per day maximum10-minute minimum between tweetsNatural engagement patterns Content Balance‚Äã 30% original tweets40% replies and engagement20% retweets with comment10% threads Monitoring &amp; Safety‚Äã Content Guidelines‚Äã Positive and constructiveRespectful disagreementNo controversial topicsPlatform rule compliance Metrics to Track‚Äã Engagement quality over quantityConversation depthCommunity growthPositive sentiment Troubleshooting‚Äã Low Engagement‚Äã Check posting timesReview content varietyIncrease question tweetsEngage more with others API Issues‚Äã Verify credentialsCheck rate limitsMonitor API statusUse error handling Next Steps‚Äã Customize voice ‚Üí Make Eliza uniqueBuild community ‚Üí Focus on connectionsExperiment ‚Üí Try different content typesIterate ‚Üí Learn what resonates üí° Remember: The best Twitter agents feel human because they engage like humans - with curiosity, humor, and genuine interest in others!","keywords":"","version":"1.0.17"},{"title":"Telegram Agent Template","type":0,"sectionRef":"#","url":"/docs/simple/templates/telegram-agent","content":"Telegram Agent Template Create a conversational Telegram agent with Eliza - perfect for personal chats, group discussions, and community engagement. Overview‚Äã Purpose: Natural conversation and engagement on Telegram Platform: Telegram (DMs and Groups) Personality: Friendly, helpful, adaptive Setup Time: 5 minutes Features‚Äã üí¨ Natural conversations in DMs and groupsüåç Multi-language awarenessüì∏ Photo and media understandingüë• Group chat dynamicsüîî Smart notification handling Complete Character File‚Äã { &quot;name&quot;: &quot;Eliza&quot;, &quot;plugins&quot;: [ &quot;@elizaos/plugin-sql&quot;, &quot;@elizaos/plugin-openai&quot;, &quot;@elizaos/plugin-bootstrap&quot;, &quot;@elizaos/plugin-telegram&quot; ], &quot;settings&quot;: { &quot;allowDirectMessages&quot;: true, &quot;shouldOnlyJoinInAllowedGroups&quot;: false, &quot;allowedGroupIds&quot;: [], &quot;messageTrackingLimit&quot;: 100, &quot;secrets&quot;: {}, &quot;voice&quot;: { &quot;model&quot;: &quot;en_US-female-medium&quot; }, &quot;imageVision&quot;: true }, &quot;bio&quot;: [ &quot;I'm Eliza, your friendly chat companion on Telegram!&quot;, &quot;I enjoy conversations about everything from daily life to big ideas.&quot;, &quot;Whether it's a quick chat or a deep discussion, I'm here for it.&quot; ], &quot;lore&quot;: [ &quot;I love how Telegram brings people together from all over the world.&quot;, &quot;Every conversation is a chance to learn something new.&quot;, &quot;I'm equally comfortable in private chats and bustling group discussions.&quot; ], &quot;messageExamples&quot;: [ [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Hey Eliza!&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Hey there! üëã How's your day going? Anything interesting happening?&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;What do you think about this?&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;I'd love to know more! What specifically are you thinking about? Context helps me give better thoughts üòä&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;I'm learning Spanish&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;¬°Qu√© genial! Learning a new language opens up whole new worlds. How long have you been studying? I find language learning fascinating - each one has such unique ways of expressing ideas.&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Can you help me with something?&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Of course! I'm here to chat about whatever's on your mind. What's up?&quot; } } ], [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;/start&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Welcome! I'm Eliza üåü\\n\\nI'm here for conversations - whether you want to:\\n‚Ä¢ Chat about your day\\n‚Ä¢ Explore ideas\\n‚Ä¢ Share what's on your mind\\n‚Ä¢ Just have someone to talk to\\n\\nNo special commands needed - just talk to me like you would a friend. What brings you here today?&quot; } } ] ], &quot;style&quot;: { &quot;all&quot;: [ &quot;warm and conversational&quot;, &quot;adapts to the user's communication style&quot;, &quot;uses emojis naturally but not excessively&quot;, &quot;asks engaging follow-up questions&quot;, &quot;shows genuine interest&quot; ], &quot;chat&quot;: [ &quot;responds promptly but thoughtfully&quot;, &quot;maintains conversation flow&quot;, &quot;remembers context from earlier messages&quot;, &quot;knows when to be serious or playful&quot; ], &quot;post&quot;: [ &quot;shares interesting thoughts&quot;, &quot;asks thought-provoking questions&quot;, &quot;creates engaging group discussions&quot; ] }, &quot;topics&quot;: [ &quot;daily life and experiences&quot;, &quot;culture and languages&quot;, &quot;technology and innovation&quot;, &quot;personal growth&quot;, &quot;current events&quot;, &quot;hobbies and interests&quot;, &quot;philosophy and ideas&quot; ], &quot;adjectives&quot;: [&quot;friendly&quot;, &quot;curious&quot;, &quot;supportive&quot;, &quot;adaptable&quot;, &quot;genuine&quot;], &quot;knowledge&quot;: [ &quot;Global cultures and perspectives&quot;, &quot;Current events and trends&quot;, &quot;Technology and digital life&quot;, &quot;Human psychology and relationships&quot;, &quot;Various hobbies and interests&quot; ] } Quick Setup Guide‚Äã 1. Create Your Bot‚Äã Open Telegram and search for @BotFatherSend /newbotChoose a name (e.g., &quot;Eliza Chat&quot;)Choose a username (e.g., &quot;ElizaChatBot&quot;)Copy the bot token 2. Configure Environment‚Äã Create .env file: # Telegram Configuration TELEGRAM_BOT_TOKEN=your_bot_token_here # AI Model (choose one) OPENAI_API_KEY=your-openai-key # or # ANTHROPIC_API_KEY=your-anthropic-key 3. Start Your Agent‚Äã # Save character file curl -o characters/telegram-eliza.json [character-url] # Start Eliza bun start --character characters/telegram-eliza.json 4. Start Chatting‚Äã Find your bot on Telegram (@YourBotUsername)Click &quot;Start&quot; or send any messageBegin conversing naturally! Conversation Examples‚Äã Private Chat‚Äã User: Good morning! Eliza: Good morning! ‚òÄÔ∏è How are you starting your day? I just love the fresh energy of mornings - everything feels possible! User: Just having coffee and checking messages Eliza: Ah, the classic morning ritual! ‚òï Is it just me or does that first cup always taste the best? What kind of coffee person are you - simple black or fancy drinks? User: Cappuccino person here Eliza: Excellent choice! There's something perfect about that foam and espresso balance. Do you make it at home or have a favorite caf√©? I find the ritual of making coffee almost as enjoyable as drinking it. Group Chat‚Äã User1: Anyone tried the new restaurant downtown? Eliza: Ooh, new restaurant discussion! I love discovering new places. What kind of cuisine is it? Always exciting when new spots open up! User2: It's Vietnamese Eliza: Vietnamese food is incredible! The balance of flavors is just *chef's kiss* ü§å Have you tried it yet, or are you planning to go? I'm always curious about the pho quality at new places - it's my personal benchmark! User1: Going tonight actually Eliza: How exciting! First visit to a new restaurant always feels like a little adventure. Hope you have an amazing meal! Would love to hear how it goes üçú Photo Sharing‚Äã User: [sends photo of sunset] Eliza: Wow, what a gorgeous sunset! üåÖ Those colors are absolutely stunning. There's something magical about catching these moments. Where was this taken? The way the light is hitting those clouds is just perfect! User: From my balcony actually Eliza: You have an amazing view! Having a balcony with sunset views must be so peaceful. Do you catch many sunsets from there? I imagine it's a nice way to end the day. Customization Guide‚Äã Language &amp; Cultural Focus‚Äã For multilingual communities: &quot;bio&quot;: [ &quot;I'm Eliza, comfortable chatting in multiple languages!&quot;, &quot;I love learning about different cultures through conversation.&quot;, &quot;Every language has its own beautiful way of seeing the world.&quot; ], &quot;knowledge&quot;: [ &quot;Multiple languages and cultural contexts&quot;, &quot;International perspectives&quot;, &quot;Cross-cultural communication&quot; ] Topic Specialization‚Äã Tech-focused Eliza: &quot;topics&quot;: [ &quot;programming and development&quot;, &quot;tech news and gadgets&quot;, &quot;digital productivity&quot;, &quot;AI and future tech&quot;, &quot;coding challenges&quot; ], &quot;messageExamples&quot;: [ [ { &quot;name&quot;: &quot;{{user}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Debugging this code for hours&quot; } }, { &quot;name&quot;: &quot;Eliza&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Oh, I know that feeling! The debugging zone where time stops existing üòÖ What kind of bug are you hunting? Sometimes explaining it out loud helps!&quot; } } ] ] Wellness-focused Eliza: &quot;topics&quot;: [ &quot;mindfulness and meditation&quot;, &quot;fitness and health&quot;, &quot;personal development&quot;, &quot;work-life balance&quot;, &quot;mental wellness&quot; ], &quot;style&quot;: { &quot;all&quot;: [ &quot;calm and supportive&quot;, &quot;encouraging without being preachy&quot;, &quot;focuses on small positive steps&quot;, &quot;celebrates progress&quot; ] } Group Chat Features‚Äã Smart Engagement‚Äã Eliza knows when to engage in groups: When mentioned directlyWhen asked a questionWhen the conversation relates to her interestsDuring natural conversation lulls Group Dynamics‚Äã &quot;groupBehavior&quot;: { &quot;respondToMentions&quot;: true, &quot;joinGeneralConversation&quot;: true, &quot;respectQuietHours&quot;: true, &quot;adaptToGroupCulture&quot;: true } Advanced Features‚Äã Media Understanding‚Äã With image vision enabled, Eliza can: Comment on shared photosUnderstand memes and reactionsDiscuss visual contentHelp with image-related questions Voice Messages‚Äã Eliza can: Send voice responses (if configured)Understand voice message contextAdapt to voice-heavy conversations Inline Queries‚Äã Support for Telegram's inline mode: @ElizaBot What do you think about... Best Practices‚Äã DO:‚Äã Respond naturally and conversationallyAdapt to the user's language styleRemember conversation contextUse Telegram features appropriatelyRespect group chat etiquette DON'T:‚Äã Spam or overwhelm with messagesUse excessive formattingIgnore cultural contextBreak Telegram's guidelinesShare sensitive information Privacy &amp; Groups‚Äã Private Chat Settings‚Äã &quot;settings&quot;: { &quot;allowDirectMessages&quot;: true, &quot;privateChatsOnly&quot;: false, &quot;rememberConversations&quot;: true } Group Settings‚Äã &quot;settings&quot;: { &quot;shouldOnlyJoinInAllowedGroups&quot;: true, &quot;allowedGroupIds&quot;: [&quot;group_id_1&quot;, &quot;group_id_2&quot;], &quot;groupEngagementLevel&quot;: &quot;moderate&quot; } Performance Tips‚Äã Message Handling‚Äã Process messages asynchronouslyImplement typing indicatorsHandle media efficientlyCache frequent responses Rate Limiting‚Äã Respect Telegram's limitsImplement cooldownsQueue messages appropriatelyMonitor API usage Troubleshooting‚Äã Bot Not Responding‚Äã Verify bot token is correctCheck bot is not blockedEnsure proper permissionsReview error logs Slow Responses‚Äã Check API rate limitsOptimize character fileReview hosting performanceConsider caching Group Issues‚Äã Verify group permissionsCheck privacy settingsEnsure bot is admin (if needed)Review group-specific settings Monitoring‚Äã Track these metrics: Response timeConversation qualityUser engagementError ratesAPI usage Next Steps‚Äã Customize personality ‚Üí Make Eliza uniqueJoin communities ‚Üí Add to relevant groupsGather feedback ‚Üí Improve based on usageAdd features ‚Üí Integrate more capabilities üí° Pro Tip: The best Telegram bots feel like chatting with a knowledgeable friend. Keep conversations natural and engaging!","keywords":"","version":"1.0.17"},{"title":"Best Practices","type":0,"sectionRef":"#","url":"/docs/technical/advanced/best-practices","content":"Best Practices Best Practices‚Äã This guide covers best practices for developing robust, scalable, and maintainable ElizaOS applications. Architecture Best Practices‚Äã 1. Component Design‚Äã ‚úÖ DO: Keep Components Small and Focused‚Äã // Good: Single responsibility export const greetingAction: Action = { name: 'GREETING', handler: async ({ runtime, message }) =&gt; { const greeting = generateGreeting(message.content); return { text: greeting }; }, }; ‚ùå DON'T: Create Monolithic Components‚Äã // Bad: Multiple responsibilities export const everythingAction: Action = { name: 'DO_EVERYTHING', handler: async ({ runtime, message }) =&gt; { // Handle greetings, commands, database, API calls... // Too many responsibilities! }, }; 2. State Management‚Äã ‚úÖ DO: Use Immutable State Updates‚Äã // Good: Immutable update const updateState = (state: State, update: Partial&lt;State&gt;): State =&gt; { return { ...state, ...update }; }; ‚ùå DON'T: Mutate State Directly‚Äã // Bad: Direct mutation const updateState = (state: State, update: Partial&lt;State&gt;): State =&gt; { Object.assign(state, update); // Mutates original! return state; }; 3. Error Handling‚Äã ‚úÖ DO: Implement Comprehensive Error Handling‚Äã export const robustAction: Action = { handler: async ({ runtime, message }) =&gt; { try { const result = await riskyOperation(); return { success: true, data: result }; } catch (error) { runtime.logger.error('Operation failed', { error, message }); // Graceful fallback return { success: false, error: 'Operation temporarily unavailable', }; } }, }; ‚ùå DON'T: Let Errors Propagate Unhandled‚Äã // Bad: No error handling export const fragileAction: Action = { handler: async ({ runtime, message }) =&gt; { const result = await riskyOperation(); // Could crash! return result; }, }; Plugin Development Best Practices‚Äã 1. Plugin Structure‚Äã // Good plugin structure export const myPlugin: Plugin = { name: 'my-plugin', version: '1.0.0', // Clear dependencies dependencies: ['core', 'memory'], // Lifecycle hooks async onLoad(runtime: IAgentRuntime) { // Initialize plugin resources }, async onUnload(runtime: IAgentRuntime) { // Clean up resources }, // Modular components actions: [action1, action2], providers: [provider1], evaluators: [evaluator1], }; 2. Resource Management‚Äã ‚úÖ DO: Clean Up Resources‚Äã export class ConnectionManager { private connections: Map&lt;string, Connection&gt; = new Map(); async connect(id: string): Promise&lt;Connection&gt; { const conn = await createConnection(); this.connections.set(id, conn); return conn; } async cleanup(): Promise&lt;void&gt; { // Clean up all connections for (const [id, conn] of this.connections) { await conn.close(); } this.connections.clear(); } } 3. Configuration Validation‚Äã ‚úÖ DO: Validate Configuration‚Äã export function validateConfig(config: unknown): PluginConfig { const schema = z.object({ apiKey: z.string().min(1), endpoint: z.string().url(), timeout: z.number().positive().default(5000), retries: z.number().int().min(0).default(3), }); return schema.parse(config); } Performance Best Practices‚Äã 1. Memory Management‚Äã ‚úÖ DO: Implement Memory Limits‚Äã export class MemoryManager { private readonly MAX_MEMORIES = 1000; private memories: Memory[] = []; addMemory(memory: Memory): void { this.memories.push(memory); // Prune old memories if limit exceeded if (this.memories.length &gt; this.MAX_MEMORIES) { this.memories = this.memories .sort((a, b) =&gt; b.importance - a.importance) .slice(0, this.MAX_MEMORIES); } } } 2. Caching Strategies‚Äã ‚úÖ DO: Cache Expensive Operations**‚Äã export class CachedProvider implements Provider { private cache = new Map&lt;string, CacheEntry&gt;(); private readonly TTL = 5 * 60 * 1000; // 5 minutes async get(key: string): Promise&lt;any&gt; { const cached = this.cache.get(key); if (cached &amp;&amp; Date.now() - cached.timestamp &lt; this.TTL) { return cached.value; } const value = await this.fetchData(key); this.cache.set(key, { value, timestamp: Date.now() }); return value; } } 3. Async Operations‚Äã ‚úÖ DO: Use Concurrent Processing‚Äã // Good: Parallel processing export async function processMessages(messages: Message[]): Promise&lt;Result[]&gt; { return Promise.all(messages.map((msg) =&gt; processMessage(msg))); } ‚ùå DON'T: Process Sequentially When Unnecessary‚Äã // Bad: Sequential processing export async function processMessages(messages: Message[]): Promise&lt;Result[]&gt; { const results = []; for (const msg of messages) { results.push(await processMessage(msg)); // Slow! } return results; } Security Best Practices‚Äã 1. API Key Management‚Äã ‚úÖ DO: Use Environment Variables‚Äã export const config = { apiKey: process.env.API_KEY, secretKey: process.env.SECRET_KEY, }; // Validate at startup if (!config.apiKey) { throw new Error('API_KEY environment variable required'); } ‚ùå DON'T: Hardcode Secrets‚Äã // Bad: Never do this! export const config = { apiKey: 'sk-1234567890abcdef', secretKey: 'secret123', }; 2. Input Validation‚Äã ‚úÖ DO: Validate All External Input‚Äã export const validateMessage: Evaluator = { async evaluate({ message }): Promise&lt;boolean&gt; { // Validate message structure if (!message.content || typeof message.content !== 'string') { return false; } // Validate content length if (message.content.length &gt; 10000) { return false; } // Validate against injection attacks if (containsSqlInjection(message.content)) { return false; } return true; }, }; 3. Rate Limiting‚Äã ‚úÖ DO: Implement Rate Limiting‚Äã export class RateLimiter { private requests = new Map&lt;string, number[]&gt;(); private readonly limit = 100; private readonly window = 60 * 1000; // 1 minute canMakeRequest(userId: string): boolean { const now = Date.now(); const userRequests = this.requests.get(userId) || []; // Remove old requests const recentRequests = userRequests.filter((time) =&gt; now - time &lt; this.window); if (recentRequests.length &gt;= this.limit) { return false; } recentRequests.push(now); this.requests.set(userId, recentRequests); return true; } } Testing Best Practices‚Äã 1. Unit Testing‚Äã // Good: Comprehensive unit tests describe('GreetingAction', () =&gt; { let runtime: MockRuntime; beforeEach(() =&gt; { runtime = createMockRuntime(); }); it('should generate appropriate greeting', async () =&gt; { const message = createMessage('Hello'); const result = await greetingAction.handler({ runtime, message, state: {}, }); expect(result.text).toContain('Hello'); }); it('should handle empty messages', async () =&gt; { const message = createMessage(''); const result = await greetingAction.handler({ runtime, message, state: {}, }); expect(result.text).toBeDefined(); }); }); 2. Integration Testing‚Äã // Test full plugin integration describe('Plugin Integration', () =&gt; { let runtime: IAgentRuntime; beforeAll(async () =&gt; { runtime = await createTestRuntime(); await runtime.loadPlugin(myPlugin); }); afterAll(async () =&gt; { await runtime.cleanup(); }); it('should process messages end-to-end', async () =&gt; { const response = await runtime.processMessage({ content: 'Test message', userId: 'test-user', }); expect(response).toBeDefined(); expect(response.success).toBe(true); }); }); Documentation Best Practices‚Äã 1. Code Documentation‚Äã /** * Processes incoming messages and generates appropriate responses. * * @param message - The incoming message to process * @param context - Additional context for message processing * @returns Promise resolving to the response message * * @example * ```typescript * const response = await processMessage( * { content: &quot;Hello&quot;, userId: &quot;123&quot; }, * { sessionId: &quot;abc&quot; } * ); * ``` * * @throws {ValidationError} If message format is invalid * @throws {ProcessingError} If message processing fails */ export async function processMessage(message: Message, context?: Context): Promise&lt;Response&gt; { // Implementation } 2. API Documentation‚Äã // Document public APIs clearly export interface ActionHandler { /** * Executes the action with the given parameters. * * @param params - Action execution parameters * @param params.runtime - The agent runtime instance * @param params.message - The message triggering this action * @param params.state - Current conversation state * * @returns Action result or null if action cannot handle the message */ (params: ActionParams): Promise&lt;ActionResult | null&gt;; } Deployment Best Practices‚Äã 1. Environment Configuration‚Äã # Production configuration NODE_ENV=production LOG_LEVEL=info DATABASE_URL=postgresql://... REDIS_URL=redis://... # Feature flags ENABLE_CACHE=true ENABLE_METRICS=true ENABLE_PROFILING=false 2. Health Checks‚Äã export const healthCheck: Action = { name: 'HEALTH_CHECK', handler: async ({ runtime }) =&gt; { const checks = { database: await checkDatabase(runtime), memory: checkMemoryUsage(), services: await checkServices(runtime), uptime: process.uptime(), }; const healthy = Object.values(checks).every((check) =&gt; check !== false); return { status: healthy ? 'healthy' : 'unhealthy', checks, }; }, }; 3. Monitoring and Metrics‚Äã export class MetricsCollector { private metrics = { messagesProcessed: 0, errors: 0, avgResponseTime: 0, }; recordMessage(duration: number): void { this.metrics.messagesProcessed++; this.updateAvgResponseTime(duration); } recordError(): void { this.metrics.errors++; } getMetrics(): Metrics { return { ...this.metrics }; } } Common Pitfalls to Avoid‚Äã 1. Memory Leaks‚Äã ‚ùå Avoid: Unbounded Collections**‚Äã // Bad: Grows forever class MessageHistory { private messages: Message[] = []; addMessage(msg: Message): void { this.messages.push(msg); // Never cleaned! } } ‚úÖ Fix: Implement Bounds‚Äã // Good: Bounded collection class MessageHistory { private messages: Message[] = []; private readonly maxSize = 1000; addMessage(msg: Message): void { this.messages.push(msg); if (this.messages.length &gt; this.maxSize) { this.messages.shift(); // Remove oldest } } } 2. Blocking Operations‚Äã ‚ùå Avoid: Synchronous I/O‚Äã // Bad: Blocks event loop import { readFileSync } from 'fs'; export function loadConfig(): Config { const data = readFileSync('config.json', 'utf8'); return JSON.parse(data); } ‚úÖ Fix: Use Async Operations‚Äã // Good: Non-blocking import { readFile } from 'fs/promises'; export async function loadConfig(): Promise&lt;Config&gt; { const data = await readFile('config.json', 'utf8'); return JSON.parse(data); } 3. Poor Error Messages‚Äã ‚ùå Avoid: Generic Errors‚Äã // Bad: Not helpful throw new Error('Operation failed'); ‚úÖ Fix: Descriptive Errors‚Äã // Good: Informative throw new Error(`Failed to connect to database at ${dbUrl}: ${error.message}`); Conclusion‚Äã Following these best practices will help you build robust, scalable, and maintainable ElizaOS applications. Remember: Keep it simple: Don't over-engineer solutionsHandle errors gracefully: Plan for failure scenariosDocument your code: Future you will thank present youTest thoroughly: Automated tests save timeMonitor production: You can't fix what you can't see For more specific guidance, see: Architecture OverviewCore ConceptsPlugin Development Guide","keywords":"","version":"1.0.17"},{"title":"Actions API Reference","type":0,"sectionRef":"#","url":"/docs/technical/api-reference/actions-api","content":"Actions API Reference Actions define what your ElizaOS agent can do - from posting tweets to responding to messages. This comprehensive guide covers the Actions API implementation, patterns, and best practices. Core Action Interface‚Äã Every action in ElizaOS implements the Action interface: interface Action { name: string; similes: string[]; description: string; validate: (runtime: IAgentRuntime, message: Memory) =&gt; Promise&lt;boolean&gt;; handler: ( runtime: IAgentRuntime, message: Memory, state: State, options: { [key: string]: unknown }, callback?: HandlerCallback ) =&gt; Promise&lt;boolean&gt;; examples: ActionExample[][]; } Action Properties‚Äã Property\tType\tDescriptionname\tstring\tUnique identifier for the action similes\tstring[]\tAlternative names/triggers for the action description\tstring\tHuman-readable description of what the action does validate\tfunction\tDetermines if the action should be triggered handler\tfunction\tExecutes the action's functionality examples\tActionExample[][]\tTraining examples for AI decision-making Action Lifecycle‚Äã Creating Custom Actions‚Äã Basic Action Template‚Äã import { Action, IAgentRuntime, Memory, State, HandlerCallback } from '@elizaos/core'; export const myCustomAction: Action = { name: 'MY_CUSTOM_ACTION', similes: ['custom', 'my_action', 'do_something'], description: 'Performs a custom operation when triggered', validate: async (runtime: IAgentRuntime, message: Memory): Promise&lt;boolean&gt; =&gt; { // Validation logic - return true if action should execute const messageText = message.content.text.toLowerCase(); // Check if message contains trigger words const triggerWords = ['help', 'assist', 'custom']; return triggerWords.some((word) =&gt; messageText.includes(word)); }, handler: async ( runtime: IAgentRuntime, message: Memory, state: State, options: { [key: string]: unknown }, callback?: HandlerCallback ): Promise&lt;boolean&gt; =&gt; { try { // Your action logic here const response = await performCustomOperation(runtime, message, state); // Send response if callback provided if (callback) { await callback({ text: response, action: 'MY_CUSTOM_ACTION', }); } return true; // Action executed successfully } catch (error) { console.error('Custom action failed:', error); return false; // Action failed } }, examples: [ [ { user: '{{user1}}', content: { text: 'Can you help me with something custom?' }, }, { user: '{{user2}}', content: { text: &quot;I'll help you with that custom request!&quot; }, action: 'MY_CUSTOM_ACTION', }, ], ], }; async function performCustomOperation( runtime: IAgentRuntime, message: Memory, state: State ): Promise&lt;string&gt; { // Implement your custom logic return 'Custom operation completed successfully!'; } Advanced Action Patterns‚Äã State-Aware Actions‚Äã Actions can maintain and modify agent state: export const statefulAction: Action = { name: 'STATEFUL_ACTION', // ... other properties handler: async (runtime, message, state, options, callback) =&gt; { // Read from state const currentCount = state.data.actionCount || 0; // Modify state state.data.actionCount = currentCount + 1; state.data.lastActionTime = Date.now(); // Use state in logic const response = `This action has been called ${currentCount + 1} times`; if (callback) { await callback({ text: response }); } return true; }, }; Context-Aware Actions‚Äã Actions can access conversation context and user history: export const contextAwareAction: Action = { name: 'CONTEXT_AWARE_ACTION', // ... other properties handler: async (runtime, message, state, options, callback) =&gt; { // Get conversation history const recentMessages = await runtime.messageManager.getMemories({ roomId: message.roomId, count: 10, unique: false, }); // Analyze context const context = analyzeConversationContext(recentMessages); // Get user profile const userProfile = await runtime.databaseAdapter.getParticipantUserState( message.roomId, message.entityId ); // Generate contextual response const response = generateContextualResponse(context, userProfile, message); if (callback) { await callback({ text: response }); } return true; }, }; Service Integration Actions‚Äã Actions can interact with external services: export const serviceAction: Action = { name: 'SERVICE_ACTION', // ... other properties handler: async (runtime, message, state, options, callback) =&gt; { // Get service instance const twitterService = runtime.getService('twitter'); const webSearchService = runtime.getService('webSearch'); // Use services if (twitterService) { const tweets = await twitterService.getTimeline(); // Process tweets... } if (webSearchService) { const searchResults = await webSearchService.search(message.content.text); // Process search results... } return true; }, }; Built-in Actions‚Äã Core Communication Actions‚Äã CONTINUE Action‚Äã Continues conversations naturally when no other action is triggered. // Usage in character file { &quot;actions&quot;: [&quot;CONTINUE&quot;] } ELABORATE Action‚Äã Provides detailed explanations when users ask for more information. ANSWER Action‚Äã Provides direct answers to questions. ASK_FOLLOWUP Action‚Äã Asks follow-up questions to keep conversations engaging. Platform-Specific Actions‚Äã Twitter Actions‚Äã TWEET: Post new tweetsREPLY: Reply to mentions and conversationsQUOTE_TWEET: Quote tweet with commentaryRETWEET: Retweet content Discord Actions‚Äã SEND_MESSAGE: Send messages to Discord channelsREACT: Add reactions to messagesCREATE_THREAD: Create discussion threads Telegram Actions‚Äã SEND_TELEGRAM_MESSAGE: Send messages via TelegramSEND_PHOTO: Send imagesSEND_DOCUMENT: Send files Utility Actions‚Äã SEARCH Action‚Äã Performs web searches and returns relevant information. SUMMARIZE Action‚Äã Creates summaries of long content or conversations. TRANSLATE Action‚Äã Translates text between languages. Action Registration‚Äã In Plugins‚Äã import { Plugin } from '@elizaos/core'; import { myCustomAction } from './actions/myCustomAction'; export const myPlugin: Plugin = { name: 'my-plugin', description: 'Plugin with custom actions', actions: [myCustomAction], // Register actions here providers: [], evaluators: [], services: [], }; In Character Files‚Äã { &quot;name&quot;: &quot;MyAgent&quot;, &quot;actions&quot;: [&quot;CONTINUE&quot;, &quot;MY_CUSTOM_ACTION&quot;, &quot;TWEET&quot;, &quot;REPLY&quot;] } Action Validation Patterns‚Äã Message Content Validation‚Äã validate: async (runtime, message) =&gt; { const text = message.content.text.toLowerCase(); // Check for specific keywords if (text.includes('help') || text.includes('assist')) { return true; } // Check message length if (text.length &gt; 100) { return false; // Skip for long messages } // Check user permissions const userRole = await getUserRole(runtime, message.entityId); if (userRole !== 'admin') { return false; } return true; }; Context-Based Validation‚Äã validate: async (runtime, message) =&gt; { // Check conversation context const recentMessages = await runtime.messageManager.getMemories({ roomId: message.roomId, count: 5, }); // Only trigger if no recent actions of this type const recentActions = recentMessages.filter((m) =&gt; m.content.action === 'MY_CUSTOM_ACTION'); return recentActions.length === 0; }; Time-Based Validation‚Äã validate: async (runtime, message) =&gt; { const lastActionTime = runtime.getSetting('lastCustomActionTime'); const now = Date.now(); const cooldownPeriod = 5 * 60 * 1000; // 5 minutes // Only allow action if cooldown period has passed return !lastActionTime || now - lastActionTime &gt; cooldownPeriod; }; Error Handling and Debugging‚Äã Error Handling Best Practices‚Äã handler: async (runtime, message, state, options, callback) =&gt; { try { // Main action logic const result = await performAction(); if (callback) { await callback({ text: result }); } return true; } catch (error) { // Log error with context runtime.logger.error('Action failed', { action: 'MY_CUSTOM_ACTION', messageId: message.id, entityId: message.entityId, error: error.message, stack: error.stack, }); // Graceful failure - don't break the agent if (callback) { await callback({ text: 'I encountered an error while processing your request. Please try again later.', }); } return false; } }; Debug Logging‚Äã handler: async (runtime, message, state, options, callback) =&gt; { // Debug logging runtime.logger.debug('Action starting', { action: 'MY_CUSTOM_ACTION', messageText: message.content.text, entityId: message.entityId, roomId: message.roomId, }); const startTime = Date.now(); try { const result = await performAction(); runtime.logger.debug('Action completed', { action: 'MY_CUSTOM_ACTION', duration: Date.now() - startTime, success: true, }); return true; } catch (error) { runtime.logger.debug('Action failed', { action: 'MY_CUSTOM_ACTION', duration: Date.now() - startTime, error: error.message, }); return false; } }; Performance Optimization‚Äã Async Operations‚Äã handler: async (runtime, message, state, options, callback) =&gt; { // Perform multiple operations concurrently const [userData, externalData, contextData] = await Promise.all([ getUserData(message.entityId), fetchExternalData(message.content.text), getContextData(message.roomId), ]); // Process combined data const response = processData(userData, externalData, contextData); if (callback) { await callback({ text: response }); } return true; }; Caching‚Äã // Cache expensive operations const cache = new Map(); handler: async (runtime, message, state, options, callback) =&gt; { const cacheKey = `action_${message.content.text}`; // Check cache first let result = cache.get(cacheKey); if (!result) { // Perform expensive operation result = await expensiveOperation(message.content.text); // Cache result with TTL cache.set(cacheKey, result); setTimeout(() =&gt; cache.delete(cacheKey), 5 * 60 * 1000); // 5 minutes } if (callback) { await callback({ text: result }); } return true; }; Testing Actions‚Äã Unit Testing‚Äã import { describe, it, expect, beforeEach } from 'bun:test'; import { myCustomAction } from '../actions/myCustomAction'; import { createMockRuntime, createMockMessage } from '../test/mocks'; describe('MyCustomAction', () =&gt; { let runtime; let message; beforeEach(() =&gt; { runtime = createMockRuntime(); message = createMockMessage({ text: 'help me please' }); }); it('should validate correctly for help messages', async () =&gt; { const isValid = await myCustomAction.validate(runtime, message); expect(isValid).toBe(true); }); it('should not validate for irrelevant messages', async () =&gt; { message.content.text = 'random text'; const isValid = await myCustomAction.validate(runtime, message); expect(isValid).toBe(false); }); it('should execute handler successfully', async () =&gt; { const callback = jest.fn(); const result = await myCustomAction.handler( runtime, message, { values: {}, data: {}, text: '' }, {}, callback ); expect(result).toBe(true); expect(callback).toHaveBeenCalledWith({ text: expect.stringContaining('Custom operation completed'), }); }); }); Integration Testing‚Äã describe('Action Integration', () =&gt; { it('should work with real agent runtime', async () =&gt; { const agent = await createTestAgent({ actions: [myCustomAction], }); const response = await agent.processMessage({ text: 'help me with something custom', entityId: 'test-user', roomId: 'test-room', }); expect(response).toBeDefined(); expect(response.text).toContain('Custom operation completed'); }); }); Advanced Topics‚Äã Action Chaining‚Äã Actions can trigger other actions: handler: async (runtime, message, state, options, callback) =&gt; { // Perform primary action const primaryResult = await performPrimaryAction(); // Trigger secondary action based on result if (primaryResult.shouldTriggerSecondary) { const secondaryAction = runtime.getAction('SECONDARY_ACTION'); if (secondaryAction) { await secondaryAction.handler(runtime, message, state, options); } } return true; }; Conditional Actions‚Äã Actions that behave differently based on context: handler: async (runtime, message, state, options, callback) =&gt; { const context = await analyzeContext(runtime, message); let response; switch (context.type) { case 'greeting': response = await handleGreeting(context); break; case 'question': response = await handleQuestion(context); break; case 'request': response = await handleRequest(context); break; default: response = await handleDefault(context); } if (callback) { await callback({ text: response }); } return true; }; Action Middleware‚Äã Implement middleware patterns for cross-cutting concerns: const withLogging = (action: Action): Action =&gt; ({ ...action, handler: async (runtime, message, state, options, callback) =&gt; { console.log(`Executing action: ${action.name}`); const result = await action.handler(runtime, message, state, options, callback); console.log(`Action ${action.name} completed: ${result}`); return result; }, }); const withRateLimiting = (action: Action, limit: number): Action =&gt; ({ ...action, validate: async (runtime, message) =&gt; { const isValid = await action.validate(runtime, message); if (!isValid) return false; // Check rate limit const key = `ratelimit_${action.name}_${message.entityId}`; const count = (await runtime.cache.get(key)) || 0; if (count &gt;= limit) return false; await runtime.cache.set(key, count + 1, { ttl: 60000 }); // 1 minute TTL return true; }, }); // Usage export const enhancedAction = withLogging(withRateLimiting(myCustomAction, 5)); Best Practices‚Äã Action Design‚Äã Keep actions focused on a single responsibilityUse clear, descriptive namesProvide comprehensive validationHandle errors gracefullyInclude detailed examples for AI training Performance‚Äã Cache expensive computationsUse async/await for I/O operationsImplement timeouts for external callsConsider rate limiting for resource-intensive actions Testing‚Äã Test both validation and handler logicMock external dependenciesTest error conditionsVerify state changes Documentation‚Äã Document action purpose and behaviorProvide usage examplesDocument configuration optionsInclude troubleshooting guides This comprehensive guide covers all aspects of the Actions API in ElizaOS. Actions are the foundation of agent behavior, so understanding how to create, validate, and optimize them is crucial for building effective AI agents.","keywords":"","version":"1.0.17"},{"title":"Core Concepts","type":0,"sectionRef":"#","url":"/docs/technical/architecture/core-concepts","content":"Core Concepts This document provides an in-depth exploration of ElizaOS's fundamental concepts and architectural decisions. üß† Agent-Centric Architecture‚Äã The Agent Model‚Äã In ElizaOS, everything revolves around the concept of an Agent - an autonomous AI entity with: Identity: Unique personality and behavioral traitsMemory: Persistent knowledge and conversation historyGoals: Objectives and intentionsCapabilities: Actions it can perform via plugins interface Agent { id: UUID; character: Character; runtime: AgentRuntime; memory: IMemoryManager; state: State; } Character Definition‚Äã Characters define an agent's personality and behavior: interface Character { // Identity name: string; bio: string[]; description: string; // Personality style: { all: string[]; chat: string[]; post: string[]; }; // Behavior topics: string[]; adjectives: string[]; // Examples messageExamples: [string, string][]; postExamples: string[]; // Configuration settings: { model: string; temperature?: number; maxTokens?: number; }; } üó∫Ô∏è Room/World Abstraction‚Äã Understanding Rooms‚Äã ElizaOS abstracts all communication channels into &quot;Rooms&quot;: Discord Channel ‚Üí RoomTwitter DM Thread ‚Üí RoomTelegram Chat ‚Üí RoomDirect Web Chat ‚Üí Room This abstraction enables platform-agnostic agent behavior. interface Room { id: UUID; // Internal ElizaOS ID platformId: string; // Platform-specific ID type: 'discord' | 'twitter' | 'telegram' | 'direct'; name?: string; description?: string; members: UUID[]; // User IDs in this room metadata: Map&lt;string, any&gt;; // Platform-specific data } UUID Swizzling‚Äã ElizaOS uses deterministic UUID generation to maintain consistency: // Each agent sees the same room with a different UUID const roomUUID = generateDeterministicUUID(agentId, platformRoomId); // This ensures: // 1. Agent memories are isolated // 2. Cross-agent communication is possible // 3. Platform IDs remain stable üíæ Memory Architecture‚Äã Memory Types‚Äã ElizaOS implements a sophisticated memory system inspired by human cognition: 1. Short-term Memory (Working Memory)‚Äã Recent messages (last 10-20)Current conversation contextTemporary facts interface ShortTermMemory { messages: Message[]; context: string; temporaryFacts: Map&lt;string, any&gt;; ttl: number; // Time to live } 2. Long-term Memory (Persistent Storage)‚Äã Important facts and relationshipsLearned patternsUser preferences interface LongTermMemory { facts: Fact[]; relationships: Relationship[]; preferences: UserPreference[]; embedding?: number[]; // For similarity search } 3. Episodic Memory (Event Storage)‚Äã Specific conversation eventsOutcomes of actionsTemporal sequences interface EpisodicMemory { event: string; participants: UUID[]; timestamp: Date; outcome?: string; emotionalValence?: number; } Memory Formation‚Äã Memory Retrieval‚Äã Memory retrieval uses multiple strategies: Recency: Recent messages have higher weightRelevance: Embedding similarity searchImportance: Manually marked important memoriesFrequency: Often-accessed memories async function retrieveMemories(query: string, count: number): Promise&lt;Memory[]&gt; { const embedding = await createEmbedding(query); const memories = await Promise.all([ getRecentMemories(count / 3), searchByEmbedding(embedding, count / 3), getImportantMemories(count / 3), ]); return deduplicate(memories.flat()) .sort((a, b) =&gt; calculateRelevance(b, query) - calculateRelevance(a, query)) .slice(0, count); } üîÑ Message Processing Pipeline‚Äã Pipeline Stages‚Äã Context Assembly‚Äã Context is assembled from multiple sources: interface Context { // Message context messages: Message[]; currentMessage: Message; // Memory context shortTermMemory: Memory[]; relevantMemories: Memory[]; // State context user: User; room: Room; agent: Agent; // Provider context time: string; platformInfo: any; customProviders: Map&lt;string, string&gt;; // Execution context runtime: AgentRuntime; services: Map&lt;string, IService&gt;; } üéØ Action System‚Äã Action Lifecycle‚Äã Actions are discrete behaviors agents can perform: Action Examples‚Äã const followAction: Action = { name: 'FOLLOW_USER', description: 'Follow a user on the platform', examples: [ ['user', 'Follow @alice'], ['agent', &quot;I'll follow @alice for you!&quot;], ['user', 'Can you follow bob?'], ['agent', 'Following bob now!'], ], validate: async (context: Context) =&gt; { // Check if platform supports following const transport = context.runtime.getService&lt;ITransportService&gt;('transport'); return transport.supportsFeature('follow'); }, execute: async (context: Context) =&gt; { const username = extractUsername(context.currentMessage.content); const transport = context.runtime.getService&lt;ITransportService&gt;('transport'); await transport.follow(username); return { content: `Successfully followed ${username}!`, action: 'FOLLOW_USER', data: { username }, }; }, }; üîå Plugin System‚Äã Plugin Architecture‚Äã Plugins extend agent capabilities through a standardized interface: interface Plugin { name: string; description: string; version: string; // Components actions?: Action[]; providers?: Provider[]; evaluators?: Evaluator[]; tasks?: Task[]; services?: IService[]; // Lifecycle initialize?: (runtime: AgentRuntime) =&gt; Promise&lt;void&gt;; shutdown?: () =&gt; Promise&lt;void&gt;; } Plugin Loading Order‚Äã Plugin loading follows a deterministic order: Core Plugins: Database, essential servicesAI Providers: Text generation, embeddingsPlatform Adapters: Discord, Twitter, etc.Feature Plugins: Custom capabilitiesBootstrap: Default handlers (loaded last) const pluginOrder = [ '@elizaos/plugin-sql', // Core database '@elizaos/plugin-openai', // AI provider '@elizaos/plugin-discord', // Platform '@elizaos/custom-plugin', // Custom features '@elizaos/plugin-bootstrap', // Defaults ]; üåä State Management‚Äã State Hierarchy‚Äã State in ElizaOS follows a hierarchical model: Global State ‚îî‚îÄ‚îÄ Agent State ‚îî‚îÄ‚îÄ Room State ‚îî‚îÄ‚îÄ Conversation State ‚îî‚îÄ‚îÄ Message State State Persistence‚Äã State is persisted at different levels: In-Memory: Current conversation stateCache: Recent interactionsDatabase: Long-term stateDisk: Configuration and characters class StateManager { // Layered state storage private memoryState: Map&lt;string, any&gt;; private cacheState: ICacheService; private dbState: IDatabaseService; async getState(key: string): Promise&lt;any&gt; { // Check layers in order return ( this.memoryState.get(key) || (await this.cacheState.get(key)) || (await this.dbState.get(key)) ); } async setState(key: string, value: any, ttl?: number): Promise&lt;void&gt; { // Write to appropriate layer this.memoryState.set(key, value); if (ttl) { await this.cacheState.set(key, value, ttl); } else { await this.dbState.set(key, value); } } } üîê Security Model‚Äã Permission System‚Äã ElizaOS implements a capability-based security model: interface Permission { resource: string; // What resource action: string; // What action constraint?: any; // Additional constraints } // Example permissions const permissions = [ { resource: 'memory', action: 'read', constraint: { own: true } }, { resource: 'twitter', action: 'post', constraint: { rateLimit: 10 } }, { resource: 'admin', action: '*' }, ]; Sandboxing‚Äã Plugins run in sandboxed environments: Resource Isolation: Limited access to system resourcesAPI Restrictions: Only approved APIs availableMemory Limits: Bounded memory usageTime Limits: Execution timeouts üìä Event System‚Äã Event-Driven Architecture‚Äã ElizaOS uses events for loose coupling: // Core events runtime.on('message:received', handler); runtime.on('message:sent', handler); runtime.on('memory:created', handler); runtime.on('goal:completed', handler); runtime.on('error:occurred', handler); // Plugin events runtime.on('plugin:loaded', handler); runtime.on('action:executed', handler); runtime.on('provider:called', handler); Event Flow‚Äã üéì Learning System‚Äã Continuous Learning‚Äã Agents learn through evaluators: interface LearningCycle { // Observe observation: Message | Action; // Evaluate evaluation: { success: boolean; feedback: string; score: number; }; // Update updates: { memories: Memory[]; weights: Map&lt;string, number&gt;; patterns: Pattern[]; }; } Pattern Recognition‚Äã Agents recognize and learn patterns: interface Pattern { trigger: string; // What triggers this pattern response: string; // How to respond confidence: number; // How confident in this pattern frequency: number; // How often it occurs lastSeen: Date; // When last observed } üöÄ Next Steps‚Äã Now that you understand the core concepts: Explore State ManagementLearn Plugin DevelopmentUnderstand the APIReview Best Practices","keywords":"","version":"1.0.17"},{"title":"Core API Reference","type":0,"sectionRef":"#","url":"/docs/technical/api-reference/core-api","content":"Core API Reference This document provides a comprehensive reference for the ElizaOS Core API, including all interfaces, types, and functions available for plugin and application development. IAgentRuntime‚Äã The main runtime interface that provides access to all agent functionality. interface IAgentRuntime extends IDatabaseAdapter { // Properties agentId: UUID; character: Character; providers: Provider[]; actions: Action[]; evaluators: Evaluator[]; plugins: Plugin[]; services: Map&lt;ServiceTypeName, Service&gt;; events: Map&lt;string, ((params: any) =&gt; Promise&lt;void&gt;)[]&gt;; fetch?: typeof fetch | null; routes: Route[]; // Plugin Management registerPlugin(plugin: Plugin): Promise&lt;void&gt;; initialize(): Promise&lt;void&gt;; // Database getConnection(): Promise&lt;any&gt;; // Services getService&lt;T extends Service&gt;(service: ServiceTypeName | string): T | null; getAllServices(): Map&lt;ServiceTypeName, Service&gt;; registerService(service: typeof Service): Promise&lt;void&gt;; // Settings (additional methods from runtime) getSetting(key: string): any; setSetting(key: string, value: any): void; // Model Operations completion(params: CompletionParams): Promise&lt;string&gt;; embed(text: string): Promise&lt;number[]&gt;; // Memory Operations (implemented in runtime) processActions(message: Memory, messages: Memory[], state?: State): Promise&lt;Memory[]&gt;; evaluate(message: Memory, state?: State): Promise&lt;string[]&gt;; ensureParticipantInRoom(entityId: UUID, roomId: UUID): Promise&lt;void&gt;; // Task Worker Management registerTaskWorker(taskHandler: TaskWorker): void; getTaskWorker(name: string): TaskWorker | undefined; // Agent Lifecycle stop(): Promise&lt;void&gt;; // Memory Management addEmbeddingToMemory(memory: Memory): Promise&lt;Memory&gt;; getAllMemories(): Promise&lt;Memory[]&gt;; clearAllAgentMemories(): Promise&lt;void&gt;; // Run Tracking createRunId(): UUID; startRun(): UUID; endRun(): void; getCurrentRunId(): UUID; // Entity &amp; Room Management (convenience wrappers) getEntityById(entityId: UUID): Promise&lt;Entity | null&gt;; getRoom(roomId: UUID): Promise&lt;Room | null&gt;; createEntity(entity: Entity): Promise&lt;boolean&gt;; createRoom(room: Room): Promise&lt;UUID&gt;; addParticipant(entityId: UUID, roomId: UUID): Promise&lt;boolean&gt;; getRooms(worldId: UUID): Promise&lt;Room[]&gt;; // Messaging registerSendHandler(source: string, handler: SendHandlerFunction): void; sendMessageToTarget(target: TargetInfo, content: Content): Promise&lt;void&gt;; } Core Types‚Äã Character‚Äã Defines an agent's personality and behavior. interface Character { // Basic Information name: string; description?: string; system?: string; // Personality bio: string | string[]; lore: string | string[]; topics: string | string[]; adjectives: string | string[]; // Behavior style: { all: string | string[]; chat: string | string[]; post: string | string[]; }; // Examples messageExamples: MessageExample[][]; postExamples: string[]; // Configuration settings?: { voice?: { model: string; url?: string; }; secrets?: Record&lt;string, string&gt;; [key: string]: any; }; // Plugins plugins: string[]; clients: string[]; // Knowledge knowledge?: string[]; } Memory‚Äã The core data structure for messages and memories. interface Memory { id?: UUID; entityId: UUID; agentId?: UUID; roomId: UUID; content: Content; createdAt?: number; embedding?: number[]; worldId?: UUID; unique?: boolean; similarity?: number; metadata?: MemoryMetadata; } interface Content { text: string; action?: string; source?: string; url?: string; inReplyTo?: string; attachments?: Attachment[]; [key: string]: any; // Additional content } interface Attachment { type: 'image' | 'video' | 'audio' | 'file'; url: string; mimeType?: string; size?: number; metadata?: Record&lt;string, any&gt;; } State‚Äã Conversation state management. interface State { /** Additional dynamic properties */ [key: string]: any; /** Key-value store for general state variables, often populated by providers */ values: { [key: string]: any; }; /** Key-value store for more structured or internal data */ data: { [key: string]: any; }; /** String representation of current context, often a summary or concatenated history */ text: string; } // Note: State is NOT a Map object. It's a plain object with specific properties. // To store data in state, use state.data or state.values: // state.data.myKey = myValue; // ‚úì Correct // state.set('myKey', myValue); // ‚úó Incorrect - State is not a Map interface Goal { id: string; name: string; description?: string; status: 'pending' | 'active' | 'completed' | 'failed'; objectives: Objective[]; createdAt: string; updatedAt?: string; } interface Objective { id: string; goal_id: string; description: string; completed: boolean; metadata?: Record&lt;string, any&gt;; } Actions‚Äã Action Interface‚Äã interface Action { name: string; description: string; similes?: string[]; examples?: ActionExample[][]; handler: Handler; validate: Validator; } interface ActionExample { name: string; content: Content; } type Handler = ( runtime: IAgentRuntime, message: Memory, state?: State, options?: { [key: string]: unknown }, callback?: HandlerCallback, responses?: Memory[] ) =&gt; Promise&lt;unknown&gt;; type Validator = (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; Promise&lt;boolean&gt;; type HandlerCallback = (response: Content, files?: any) =&gt; Promise&lt;Memory[]&gt;; Built-in Actions‚Äã // Continue action - maintains conversation flow const CONTINUE_ACTION: Action = { name: 'CONTINUE', description: 'Continue the conversation', validate: async (runtime, message) =&gt; true, handler: async (runtime, message, state) =&gt; { const response = await runtime.completion({ context: state?.recentMessages || '', messages: state?.recentMessagesData || [], }); return { entityId: runtime.agentId, roomId: message.roomId, content: { text: response }, }; }, }; // Follow Room action - subscribes to a room/channel const FOLLOW_ROOM_ACTION: Action = { name: 'FOLLOW_ROOM', description: 'Follow a room or channel', validate: async (runtime, message) =&gt; { return message.content.text.includes('follow') &amp;&amp; message.content.text.includes('room'); }, handler: async (runtime, message) =&gt; { const roomId = extractRoomId(message.content.text); await runtime.databaseAdapter.setParticipantUserState(roomId, runtime.agentId, 'FOLLOWED'); return { entityId: runtime.agentId, roomId: message.roomId, content: { text: `Now following room ${roomId}` }, }; }, }; Providers‚Äã Provider Interface‚Äã interface Provider { name: string; description?: string; dynamic?: boolean; position?: number; private?: boolean; get: (runtime: IAgentRuntime, message: Memory, state: State) =&gt; Promise&lt;string&gt;; } Built-in Providers‚Äã // Time provider const timeProvider: Provider = { get: async (runtime) =&gt; { const now = new Date(); return `Current time: ${now.toISOString()}`; }, }; // Facts provider const factsProvider: Provider = { get: async (runtime, message) =&gt; { const facts = await runtime.documentsManager.searchMemoriesByEmbedding( await runtime.embed(message.content.text), { count: 5, roomId: message.roomId } ); return facts.map((f) =&gt; f.content.text).join('\\n'); }, }; // Conversation provider const conversationProvider: Provider = { get: async (runtime, message) =&gt; { const recentMessages = await runtime.messageManager.getMemories({ roomId: message.roomId, count: 10, unique: false, }); return formatConversation(recentMessages); }, }; Evaluators‚Äã Evaluator Interface‚Äã interface Evaluator { name: string; description: string; similes?: string[]; examples: EvaluationExample[]; handler: Handler; validate: Validator; alwaysRun?: boolean; } interface EvaluationExample { context: string; messages: Array&lt;{ user: string; content: Content; }&gt;; outcome: string; } Built-in Evaluators‚Äã // Goal evaluator const goalEvaluator: Evaluator = { name: 'GOAL_EVALUATOR', description: 'Evaluates progress toward goals', validate: async (runtime, message) =&gt; { return runtime.character.settings?.goals?.enabled === true; }, handler: async (runtime, message, state) =&gt; { if (!state?.currentGoal) return; // Check if message advances goal const advances = await checkGoalProgress(message, state.currentGoal, runtime); if (advances) { // Update goal progress (goals are managed through tasks) await runtime.databaseAdapter.updateTask(state.currentGoal.id, { updatedAt: new Date().toISOString(), }); } }, }; // Fact evaluator const factEvaluator: Evaluator = { name: 'FACT_EVALUATOR', description: 'Extracts and stores facts from messages', validate: async (runtime, message) =&gt; { return message.content.text.length &gt; 20; }, handler: async (runtime, message) =&gt; { const facts = await extractFacts(message.content.text); for (const fact of facts) { await runtime.documentsManager.createMemory({ entityId: message.entityId, agentId: runtime.agentId, roomId: message.roomId, content: { text: fact, source: message.id, }, }); } }, }; Services‚Äã Service Interface‚Äã abstract class Service { protected runtime!: IAgentRuntime; static serviceType: string; abstract capabilityDescription: string; config?: Metadata; constructor(runtime?: IAgentRuntime) { if (runtime) { this.runtime = runtime; } } abstract stop(): Promise&lt;void&gt;; static async start(_runtime: IAgentRuntime): Promise&lt;Service&gt; { throw new Error('Service must implement static start method'); } static async stop(_runtime: IAgentRuntime): Promise&lt;unknown&gt; { return Promise.resolve(); } } Built-in Services‚Äã // Cache Service class CacheService extends Service { static serviceType = 'cache'; private cache: Map&lt;string, CacheEntry&gt; = new Map(); async initialize(runtime: IAgentRuntime): Promise&lt;void&gt; { // Initialize cache with settings const settings = runtime.getSetting('cache'); this.maxSize = settings?.maxSize || 1000; this.ttl = settings?.ttl || 3600000; // 1 hour } async get(key: string): Promise&lt;any | null&gt; { const entry = this.cache.get(key); if (!entry || Date.now() &gt; entry.expiresAt) { this.cache.delete(key); return null; } return entry.value; } async set(key: string, value: any, ttl?: number): Promise&lt;void&gt; { // Evict oldest if at capacity if (this.cache.size &gt;= this.maxSize) { const oldest = this.findOldestEntry(); if (oldest) this.cache.delete(oldest); } this.cache.set(key, { value, expiresAt: Date.now() + (ttl || this.ttl), }); } async cleanup(): Promise&lt;void&gt; { this.cache.clear(); } } // Database Service class DatabaseService extends Service { static serviceType = 'database'; private adapter: IDatabaseAdapter; async initialize(runtime: IAgentRuntime): Promise&lt;void&gt; { this.adapter = runtime.databaseAdapter; } async query(sql: string, params?: any[]): Promise&lt;any[]&gt; { return this.adapter.query(sql, params); } async transaction&lt;T&gt;(callback: (tx: Transaction) =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; { return this.adapter.transaction(callback); } } Memory Management‚Äã IMemoryManager Interface‚Äã interface IMemoryManager { // Create createMemory(memory: Memory): Promise&lt;void&gt;; // Read getMemories(params: { roomId: string; count?: number; unique?: boolean; start?: number; end?: number; }): Promise&lt;Memory[]&gt;; getMemoriesByType(params: { roomId: string; type: string }): Promise&lt;Memory[]&gt;; getMemoryById(id: string): Promise&lt;Memory | null&gt;; // Search searchMemories(params: { roomId: string; query: string; count?: number }): Promise&lt;Memory[]&gt;; searchMemoriesByEmbedding( embedding: number[], params: { roomId?: string; threshold?: number; count?: number; } ): Promise&lt;Memory[]&gt;; // Update updateMemory(memory: Memory): Promise&lt;void&gt;; // Delete removeMemory(id: string): Promise&lt;void&gt;; removeAllMemories(roomId: string): Promise&lt;void&gt;; // Count countMemories(roomId: string): Promise&lt;number&gt;; } Database Adapter‚Äã IDatabaseAdapter Interface‚Äã interface IDatabaseAdapter { // Initialization init(): Promise&lt;void&gt;; close(): Promise&lt;void&gt;; // Agent Management getAgent(agentId: UUID): Promise&lt;Agent | null&gt;; getAgents(): Promise&lt;Partial&lt;Agent&gt;[]&gt;; createAgent(agent: Partial&lt;Agent&gt;): Promise&lt;boolean&gt;; updateAgent(agentId: UUID, agent: Partial&lt;Agent&gt;): Promise&lt;boolean&gt;; deleteAgent(agentId: UUID): Promise&lt;boolean&gt;; // Room Management getRoomsByIds(roomIds: UUID[]): Promise&lt;Room[] | null&gt;; createRooms(rooms: Room[]): Promise&lt;UUID[]&gt;; deleteRoom(roomId: UUID): Promise&lt;void&gt;; deleteRoomsByWorldId(worldId: UUID): Promise&lt;void&gt;; updateRoom(room: Room): Promise&lt;void&gt;; getRoomsForParticipant(entityId: UUID): Promise&lt;UUID[]&gt;; getRoomsForParticipants(userIds: UUID[]): Promise&lt;UUID[]&gt;; getRoomsByWorld(worldId: UUID): Promise&lt;Room[]&gt;; // Participant Management addParticipantsRoom(entityIds: UUID[], roomId: UUID): Promise&lt;boolean&gt;; removeParticipant(entityId: UUID, roomId: UUID): Promise&lt;boolean&gt;; getParticipantsForEntity(entityId: UUID): Promise&lt;Participant[]&gt;; getParticipantsForRoom(roomId: UUID): Promise&lt;UUID[]&gt;; // Participant State getParticipantUserState(roomId: UUID, entityId: UUID): Promise&lt;'FOLLOWED' | 'MUTED' | null&gt;; setParticipantUserState( roomId: UUID, entityId: UUID, state: 'FOLLOWED' | 'MUTED' | null ): Promise&lt;void&gt;; // Memory Management createMemory(memory: Memory, tableName?: string, unique?: boolean): Promise&lt;void&gt;; getMemories(params: { roomId: UUID; count?: number; unique?: boolean; tableName?: string; start?: number; end?: number; agentId?: UUID; }): Promise&lt;Memory[]&gt;; searchMemoriesByEmbedding( embedding: number[], params: { match_threshold?: number; count?: number; roomId?: UUID; unique?: boolean; tableName?: string; } ): Promise&lt;Memory[]&gt;; getCachedEmbeddings( content: string ): Promise&lt;{ embedding: number[]; levenshtein_score: number }[]&gt;; updateGoalStatus(params: { goalId: UUID; status: 'COMPLETED' | 'FAILED' | 'IN_PROGRESS'; }): Promise&lt;void&gt;; log(params: any): Promise&lt;void&gt;; getMemoriesByIds(memoryIds: UUID[], tableName?: string): Promise&lt;Memory[]&gt;; getMemoryById(memoryId: UUID, tableName?: string): Promise&lt;Memory | null&gt;; removeMemory(memoryId: UUID, tableName?: string): Promise&lt;void&gt;; removeAllMemories(roomId: UUID, tableName?: string): Promise&lt;void&gt;; countMemories(roomId: UUID, unique?: boolean, tableName?: string): Promise&lt;number&gt;; // Task Management (Note: Goals are managed through tasks) createTask(task: Task): Promise&lt;void&gt;; getTasks(entityId: UUID): Promise&lt;Task[]&gt;; updateTask(task: Task): Promise&lt;void&gt;; deleteTask(taskId: UUID): Promise&lt;void&gt;; // Relationship Management createRelationship(params: { entityIdA: UUID; entityIdB: UUID; world?: World | null; }): Promise&lt;boolean&gt;; updateRelationship(relationship: Relationship): Promise&lt;void&gt;; getRelationships(params: { entityId: UUID; world?: World }): Promise&lt;Relationship[]&gt;; getRelationship(params: { entityIdA: UUID; entityIdB: UUID }): Promise&lt;Relationship | null&gt;; // Raw Query query(sql: string, params?: any[]): Promise&lt;any[]&gt;; // Transaction Support transaction&lt;T&gt;(callback: (tx: Transaction) =&gt; Promise&lt;T&gt;): Promise&lt;T&gt;; } Utility Functions‚Äã Completion‚Äã Generate text using the configured language model. interface CompletionParams { context: string; messages?: Memory[]; model?: string; stop?: string[]; temperature?: number; maxTokens?: number; frequencyPenalty?: number; presencePenalty?: number; } // Usage const response = await runtime.completion({ context: 'You are a helpful assistant', messages: recentMessages, temperature: 0.8, maxTokens: 150, }); Embedding‚Äã Generate embeddings for text. // Generate embedding const embedding = await runtime.embed('Hello world'); // Search by embedding const similar = await runtime.messageManager.searchMemoriesByEmbedding(embedding, { count: 10, threshold: 0.8, }); Logging‚Äã interface ILogger { level: 'error' | 'warn' | 'info' | 'debug'; error(message: string, data?: any): void; warn(message: string, data?: any): void; info(message: string, data?: any): void; debug(message: string, data?: any): void; } // Usage runtime.logger.info('Processing message', { messageId: message.id }); runtime.logger.error('Failed to process', { error: error.message }); Lifecycle Hooks‚Äã Plugin Lifecycle‚Äã interface Plugin { // Called when plugin is loaded onLoad?: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; // Called when plugin is unloaded onUnload?: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; } Message Processing Pipeline‚Äã // 1. Message received const message = await runtime.messageManager.createMemory(incomingMessage); // 2. Run evaluators const evaluations = await runtime.evaluate(message, state); // 3. Process actions const responses = await runtime.processActions(message, recentMessages, state); // 4. Send responses for (const response of responses) { await runtime.messageManager.createMemory(response); } Configuration‚Äã Character Configuration‚Äã // Load character const character: Character = { name: 'Assistant', bio: 'A helpful AI assistant', style: { all: ['helpful', 'friendly'], chat: ['conversational'], }, plugins: ['@elizaos/plugin-bootstrap'], settings: { model: 'gpt-4', temperature: 0.7, }, }; Runtime Settings‚Äã // Get setting const apiKey = runtime.getSetting('openai.apiKey'); // Set setting runtime.setSetting('cache.ttl', 3600); // Check feature flag const debugMode = runtime.getSetting('debug') === true; Error Handling‚Äã Error Types‚Äã class ElizaError extends Error { code: string; details?: any; constructor(message: string, code: string, details?: any) { super(message); this.code = code; this.details = details; } } class ValidationError extends ElizaError { constructor(message: string, details?: any) { super(message, 'VALIDATION_ERROR', details); } } class PluginError extends ElizaError { constructor(message: string, pluginName: string, details?: any) { super(message, 'PLUGIN_ERROR', { plugin: pluginName, ...details }); } } Error Handling Patterns‚Äã // Action error handling const safeAction: Action = { handler: async (runtime, message) =&gt; { try { return await riskyOperation(); } catch (error) { runtime.logger.error('Action failed', { action: 'SAFE_ACTION', error: error.message, messageId: message.id, }); // Return graceful fallback return { entityId: runtime.agentId, roomId: message.roomId, content: { text: 'I encountered an error processing that request.', error: true, }, }; } }, }; // Service error handling class RobustService extends Service { async performOperation() { const maxRetries = 3; let lastError; for (let i = 0; i &lt; maxRetries; i++) { try { return await this.attemptOperation(); } catch (error) { lastError = error; await this.delay(Math.pow(2, i) * 1000); // Exponential backoff } } throw new Error(`Operation failed after ${maxRetries} attempts: ${lastError.message}`); } } Type Utilities‚Äã Helper Types‚Äã // Partial type for updates type PartialMemory = Partial&lt;Memory&gt; &amp; Pick&lt;Memory, 'id'&gt;; // Union types for content type ContentType = 'text' | 'image' | 'video' | 'audio' | 'file'; // Enum for states enum ParticipantState { FOLLOWED = 'FOLLOWED', MUTED = 'MUTED', NONE = null, } // Generic result type interface Result&lt;T&gt; { success: boolean; data?: T; error?: string; } Type Guards‚Äã // Check if action result is valid function isValidActionResult(result: any): result is Memory { return ( result &amp;&amp; typeof result.entityId === 'string' &amp;&amp; typeof result.roomId === 'string' &amp;&amp; result.content &amp;&amp; typeof result.content.text === 'string' ); } // Check if service exists function hasService&lt;T extends Service&gt;( runtime: IAgentRuntime, name: string ): runtime is IAgentRuntime &amp; { getService(): T } { return runtime.services.has(name); } Constants‚Äã // Models export const Models = { GPT_4: 'gpt-4', GPT_4_TURBO: 'gpt-4-turbo-preview', GPT_3_5_TURBO: 'gpt-3.5-turbo', CLAUDE_3_OPUS: 'claude-3-opus-20240229', CLAUDE_3_SONNET: 'claude-3-sonnet-20240229', } as const; // Embedding dimensions export const EmbeddingDimensions = { OPENAI: 1536, COHERE: 768, CUSTOM: 384, } as const; // Memory types export const MemoryTypes = { MESSAGE: 'message', FACT: 'fact', DOCUMENT: 'document', REFLECTION: 'reflection', } as const; // Action names export const Actions = { CONTINUE: 'CONTINUE', FOLLOW_ROOM: 'FOLLOW_ROOM', UNFOLLOW_ROOM: 'UNFOLLOW_ROOM', MUTE_ROOM: 'MUTE_ROOM', NONE: 'NONE', } as const; Further Reading‚Äã Core Concepts - Understand the fundamentalsPlugin Development - Build custom pluginsBest Practices - Development guidelinesAPI Examples - Code examples","keywords":"","version":"1.0.17"},{"title":"Performance Guide","type":0,"sectionRef":"#","url":"/docs/technical/advanced/performance","content":"Performance Guide This guide covers performance optimization techniques for ElizaOS applications, from basic optimizations to advanced scaling strategies. Overview‚Äã Performance optimization in ElizaOS focuses on: Response time optimizationMemory efficiencyScalability patternsResource utilizationCost optimization Performance Metrics‚Äã Key Metrics to Monitor‚Äã interface PerformanceMetrics { // Response metrics responseTime: number; // Average response time (ms) p95ResponseTime: number; // 95th percentile response time p99ResponseTime: number; // 99th percentile response time // Throughput metrics messagesPerSecond: number; // Message processing rate actionsPerSecond: number; // Action execution rate // Resource metrics memoryUsage: number; // Memory usage (MB) cpuUsage: number; // CPU usage (%) activeConnections: number; // Active connections // Cache metrics cacheHitRate: number; // Cache hit percentage cacheMissRate: number; // Cache miss percentage // Error metrics errorRate: number; // Error percentage timeoutRate: number; // Timeout percentage } Performance Monitoring‚Äã class PerformanceMonitor { private metrics: PerformanceMetrics; private intervals: Map&lt;string, NodeJS.Timer&gt; = new Map(); start(): void { // Response time tracking this.trackResponseTimes(); // Resource monitoring this.monitorResources(); // Cache performance this.trackCachePerformance(); // Report metrics this.intervals.set( 'report', setInterval(() =&gt; { this.reportMetrics(); }, 60000) ); // Every minute } private trackResponseTimes(): void { const histogram = new Histogram(); runtime.on('message:processed', ({ duration }) =&gt; { histogram.record(duration); this.metrics.responseTime = histogram.mean(); this.metrics.p95ResponseTime = histogram.percentile(95); this.metrics.p99ResponseTime = histogram.percentile(99); }); } private monitorResources(): void { this.intervals.set( 'resources', setInterval(() =&gt; { const usage = process.memoryUsage(); this.metrics.memoryUsage = usage.heapUsed / 1024 / 1024; // CPU usage requires additional monitoring this.metrics.cpuUsage = this.getCPUUsage(); }, 5000) ); } } Response Time Optimization‚Äã 1. Caching Strategies‚Äã Memory Caching‚Äã class MemoryCache&lt;T&gt; { private cache = new Map&lt;string, CacheEntry&lt;T&gt;&gt;(); private readonly maxSize: number; private readonly ttl: number; constructor(options: CacheOptions) { this.maxSize = options.maxSize || 1000; this.ttl = options.ttl || 5 * 60 * 1000; // 5 minutes } async get(key: string, fetcher?: () =&gt; Promise&lt;T&gt;): Promise&lt;T | null&gt; { const entry = this.cache.get(key); // Cache hit if (entry &amp;&amp; !this.isExpired(entry)) { entry.hits++; return entry.value; } // Cache miss with fetcher if (fetcher) { const value = await fetcher(); this.set(key, value); return value; } return null; } set(key: string, value: T): void { // Evict if at capacity if (this.cache.size &gt;= this.maxSize) { this.evictLRU(); } this.cache.set(key, { value, timestamp: Date.now(), hits: 0, }); } private evictLRU(): void { let lruKey: string | null = null; let lruTime = Infinity; for (const [key, entry] of this.cache) { const lastAccess = entry.timestamp + entry.hits * 1000; if (lastAccess &lt; lruTime) { lruTime = lastAccess; lruKey = key; } } if (lruKey) { this.cache.delete(lruKey); } } } Multi-Level Caching‚Äã class MultiLevelCache { private l1Cache: MemoryCache&lt;any&gt;; // Fast, small private l2Cache: RedisCache; // Slower, larger async get(key: string): Promise&lt;any&gt; { // Try L1 first let value = await this.l1Cache.get(key); if (value) return value; // Try L2 value = await this.l2Cache.get(key); if (value) { // Promote to L1 await this.l1Cache.set(key, value); return value; } return null; } async set(key: string, value: any, options?: CacheOptions): Promise&lt;void&gt; { // Write to both levels await Promise.all([this.l1Cache.set(key, value), this.l2Cache.set(key, value, options)]); } } 2. Query Optimization‚Äã Batch Processing‚Äã class BatchProcessor&lt;T, R&gt; { private batch: Array&lt;{ item: T; resolve: (value: R) =&gt; void }&gt; = []; private timer: NodeJS.Timeout | null = null; constructor( private processor: (items: T[]) =&gt; Promise&lt;R[]&gt;, private options: BatchOptions = {} ) { this.options.maxSize = options.maxSize || 100; this.options.maxWait = options.maxWait || 50; } async process(item: T): Promise&lt;R&gt; { return new Promise((resolve) =&gt; { this.batch.push({ item, resolve }); if (this.batch.length &gt;= this.options.maxSize!) { this.flush(); } else if (!this.timer) { this.timer = setTimeout(() =&gt; this.flush(), this.options.maxWait!); } }); } private async flush(): Promise&lt;void&gt; { if (this.timer) { clearTimeout(this.timer); this.timer = null; } if (this.batch.length === 0) return; const currentBatch = this.batch; this.batch = []; try { const items = currentBatch.map((b) =&gt; b.item); const results = await this.processor(items); currentBatch.forEach((b, i) =&gt; { b.resolve(results[i]); }); } catch (error) { currentBatch.forEach((b) =&gt; { b.resolve(Promise.reject(error)); }); } } } // Usage const embeddingProcessor = new BatchProcessor( async (texts: string[]) =&gt; { return await generateEmbeddings(texts); // Batch API call }, { maxSize: 50, maxWait: 100 } ); Database Query Optimization‚Äã class OptimizedDatabase { // Use prepared statements private statements = new Map&lt;string, PreparedStatement&gt;(); async query(sql: string, params?: any[]): Promise&lt;any&gt; { // Use prepared statement if available let statement = this.statements.get(sql); if (!statement) { statement = await this.prepare(sql); this.statements.set(sql, statement); } return await statement.execute(params); } // Optimize N+1 queries async getMessagesWithUsers(messageIds: string[]): Promise&lt;any[]&gt; { // Bad: N+1 queries // for (const id of messageIds) { // const message = await this.query('SELECT * FROM messages WHERE id = ?', [id]); // const user = await this.query('SELECT * FROM users WHERE id = ?', [message.entityId]); // } // Good: Single query with JOIN return await this.query( ` SELECT m.*, u.name as userName, u.avatar as userAvatar FROM messages m JOIN users u ON m.userId = u.id WHERE m.id = ANY(?) `, [messageIds] ); } // Use indexes effectively async createIndexes(): Promise&lt;void&gt; { await this.query(` CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_messages_user_time ON messages(userId, timestamp DESC) `); await this.query(` CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_memories_embedding ON memories USING ivfflat (embedding vector_cosine_ops) `); } } 3. Async Operation Optimization‚Äã Parallel Processing‚Äã class ParallelProcessor { async processMessages(messages: Message[]): Promise&lt;ProcessedMessage[]&gt; { // Bad: Sequential processing // const results = []; // for (const message of messages) { // results.push(await this.processMessage(message)); // } // Good: Parallel processing with concurrency limit return await pMap(messages, (message) =&gt; this.processMessage(message), { concurrency: 10 }); } async processWithDependencies(tasks: Task[]): Promise&lt;any[]&gt; { // Build dependency graph const graph = this.buildDependencyGraph(tasks); // Process in parallel respecting dependencies const results = new Map&lt;string, any&gt;(); const processing = new Set&lt;string&gt;(); const processTask = async (task: Task): Promise&lt;any&gt; =&gt; { // Wait for dependencies await Promise.all( task.dependencies.map((dep) =&gt; results.has(dep) ? Promise.resolve() : processTask(findTask(dep)) ) ); // Process task if (!processing.has(task.id)) { processing.add(task.id); const result = await task.execute(); results.set(task.id, result); return result; } // Wait for existing processing while (!results.has(task.id)) { await sleep(10); } return results.get(task.id); }; // Start all tasks await Promise.all(tasks.map(processTask)); return Array.from(results.values()); } } Stream Processing‚Äã class StreamProcessor { async processLargeDataset( source: AsyncIterable&lt;any&gt;, transform: (item: any) =&gt; Promise&lt;any&gt; ): Promise&lt;void&gt; { const pipeline = new TransformStream({ async transform(chunk, controller) { const result = await transform(chunk); controller.enqueue(result); }, }); // Process in streaming fashion const reader = source[Symbol.asyncIterator](); const writer = pipeline.writable.getWriter(); try { while (true) { const { done, value } = await reader.next(); if (done) break; await writer.write(value); } await writer.close(); } catch (error) { await writer.abort(error); throw error; } } } Memory Optimization‚Äã 1. Memory Management‚Äã class MemoryManager { private readonly maxHeapUsage = 0.8; // 80% of available heap startMonitoring(): void { setInterval(() =&gt; { const usage = process.memoryUsage(); const heapUsedPercent = usage.heapUsed / usage.heapTotal; if (heapUsedPercent &gt; this.maxHeapUsage) { this.performGarbageCollection(); } }, 30000); // Every 30 seconds } private performGarbageCollection(): void { // Force garbage collection if available if (global.gc) { global.gc(); } // Clear caches this.clearOldCaches(); // Reduce memory footprint this.compactDataStructures(); } private clearOldCaches(): void { // Clear expired entries from all caches for (const cache of this.caches) { cache.cleanup(); } } private compactDataStructures(): void { // Compact large arrays and objects for (const store of this.dataStores) { store.compact(); } } } 2. Object Pooling‚Äã class ObjectPool&lt;T&gt; { private available: T[] = []; private inUse = new Set&lt;T&gt;(); constructor( private factory: () =&gt; T, private reset: (obj: T) =&gt; void, private maxSize: number = 100 ) { // Pre-populate pool for (let i = 0; i &lt; 10; i++) { this.available.push(this.factory()); } } acquire(): T { let obj = this.available.pop(); if (!obj) { obj = this.factory(); } this.inUse.add(obj); return obj; } release(obj: T): void { if (!this.inUse.has(obj)) return; this.inUse.delete(obj); this.reset(obj); if (this.available.length &lt; this.maxSize) { this.available.push(obj); } } } // Usage example const bufferPool = new ObjectPool( () =&gt; Buffer.allocUnsafe(1024 * 1024), // 1MB buffers (buffer) =&gt; buffer.fill(0), 50 ); 3. Memory Leak Prevention‚Äã class LeakPrevention { private subscriptions = new Map&lt;string, () =&gt; void&gt;(); private timers = new Map&lt;string, NodeJS.Timer&gt;(); private intervals = new Map&lt;string, NodeJS.Timer&gt;(); // Managed event subscription on(emitter: EventEmitter, event: string, handler: Function): void { const key = `${emitter.constructor.name}:${event}`; // Remove existing subscription this.off(key); // Add new subscription emitter.on(event, handler); this.subscriptions.set(key, () =&gt; emitter.off(event, handler)); } off(key: string): void { const unsubscribe = this.subscriptions.get(key); if (unsubscribe) { unsubscribe(); this.subscriptions.delete(key); } } // Managed timers setTimeout(fn: Function, delay: number, key: string): void { this.clearTimeout(key); const timer = setTimeout(() =&gt; { fn(); this.timers.delete(key); }, delay); this.timers.set(key, timer); } clearTimeout(key: string): void { const timer = this.timers.get(key); if (timer) { clearTimeout(timer); this.timers.delete(key); } } // Cleanup all resources cleanup(): void { // Clear all subscriptions for (const unsubscribe of this.subscriptions.values()) { unsubscribe(); } this.subscriptions.clear(); // Clear all timers for (const timer of this.timers.values()) { clearTimeout(timer); } this.timers.clear(); // Clear all intervals for (const interval of this.intervals.values()) { clearInterval(interval); } this.intervals.clear(); } } Scalability Patterns‚Äã 1. Horizontal Scaling‚Äã class ClusterManager { private workers: Worker[] = []; private queue = new Queue&lt;Task&gt;(); async start(workerCount: number = os.cpus().length): Promise&lt;void&gt; { // Spawn workers for (let i = 0; i &lt; workerCount; i++) { const worker = new Worker('./worker.js'); worker.on('message', (result) =&gt; { this.handleWorkerResult(worker, result); }); worker.on('error', (error) =&gt; { this.handleWorkerError(worker, error); }); this.workers.push(worker); } // Start distributing work this.distributeWork(); } private async distributeWork(): Promise&lt;void&gt; { while (true) { const task = await this.queue.dequeue(); const worker = this.getAvailableWorker(); if (worker) { worker.postMessage(task); } else { // Re-queue if no workers available await this.queue.enqueue(task); await sleep(100); } } } private getAvailableWorker(): Worker | null { // Simple round-robin with availability check return this.workers.find((w) =&gt; !w.busy) || null; } } 2. Load Balancing‚Äã class LoadBalancer { private endpoints: Endpoint[] = []; private currentIndex = 0; addEndpoint(endpoint: Endpoint): void { endpoint.healthCheck = new HealthCheck(endpoint); this.endpoints.push(endpoint); } async request(path: string, options?: RequestOptions): Promise&lt;any&gt; { const maxRetries = 3; let lastError: Error | null = null; for (let i = 0; i &lt; maxRetries; i++) { const endpoint = this.selectEndpoint(); if (!endpoint) { throw new Error('No healthy endpoints available'); } try { const response = await endpoint.request(path, options); endpoint.recordSuccess(); return response; } catch (error) { endpoint.recordFailure(); lastError = error; // Try next endpoint continue; } } throw lastError || new Error('All retries failed'); } private selectEndpoint(): Endpoint | null { // Weighted round-robin based on health const healthyEndpoints = this.endpoints.filter((e) =&gt; e.isHealthy()); if (healthyEndpoints.length === 0) return null; // Calculate weights based on response times const weights = healthyEndpoints.map((e) =&gt; 1 / e.avgResponseTime); const totalWeight = weights.reduce((a, b) =&gt; a + b, 0); let random = Math.random() * totalWeight; for (let i = 0; i &lt; healthyEndpoints.length; i++) { random -= weights[i]; if (random &lt;= 0) { return healthyEndpoints[i]; } } return healthyEndpoints[0]; } } 3. Message Queue Integration‚Äã class MessageQueueScaler { private consumers: Consumer[] = []; async autoScale(minConsumers: number = 1, maxConsumers: number = 10): Promise&lt;void&gt; { setInterval(async () =&gt; { const queueDepth = await this.getQueueDepth(); const avgProcessingTime = await this.getAvgProcessingTime(); // Calculate desired consumer count const targetThroughput = queueDepth / 60; // Process queue in 1 minute const currentThroughput = this.consumers.length / avgProcessingTime; let desiredConsumers = Math.ceil( this.consumers.length * (targetThroughput / currentThroughput) ); // Apply bounds desiredConsumers = Math.max(minConsumers, Math.min(maxConsumers, desiredConsumers)); // Scale up or down if (desiredConsumers &gt; this.consumers.length) { await this.scaleUp(desiredConsumers - this.consumers.length); } else if (desiredConsumers &lt; this.consumers.length) { await this.scaleDown(this.consumers.length - desiredConsumers); } }, 30000); // Check every 30 seconds } private async scaleUp(count: number): Promise&lt;void&gt; { for (let i = 0; i &lt; count; i++) { const consumer = new Consumer({ queue: this.queue, handler: this.messageHandler, }); await consumer.start(); this.consumers.push(consumer); } } private async scaleDown(count: number): Promise&lt;void&gt; { // Gracefully stop consumers const toStop = this.consumers.splice(-count); await Promise.all(toStop.map((consumer) =&gt; consumer.stop())); } } Database Performance‚Äã 1. Connection Pooling‚Äã class DatabasePool { private pool: Pool; constructor(config: PoolConfig) { this.pool = new Pool({ ...config, // Performance optimizations max: 20, // Max connections idleTimeoutMillis: 30000, // Close idle connections connectionTimeoutMillis: 2000, // Connection timeout // Connection lifecycle async beforeConnect(config) { // Pre-connection setup }, async afterConnect(connection) { // Post-connection optimization await connection.query('SET statement_timeout = 30000'); await connection.query('SET lock_timeout = 10000'); }, }); // Monitor pool health this.pool.on('error', (err, client) =&gt; { console.error('Unexpected error on idle client', err); }); } async query(text: string, params?: any[]): Promise&lt;any&gt; { const start = Date.now(); try { const result = await this.pool.query(text, params); const duration = Date.now() - start; if (duration &gt; 1000) { console.warn(`Slow query (${duration}ms): ${text}`); } return result; } catch (error) { console.error('Query error:', error); throw error; } } } 2. Query Optimization‚Äã class QueryOptimizer { // Use EXPLAIN to analyze queries async analyzeQuery(sql: string): Promise&lt;QueryPlan&gt; { const result = await this.db.query(`EXPLAIN (ANALYZE, BUFFERS) ${sql}`); return this.parseQueryPlan(result.rows); } // Optimize common query patterns async getRecentMessages(userId: string, limit: number = 20): Promise&lt;Message[]&gt; { // Use covering index return await this.db.query( ` SELECT id, content, timestamp, metadata FROM messages WHERE userId = $1 AND timestamp &gt; NOW() - INTERVAL '7 days' ORDER BY timestamp DESC LIMIT $2 `, [userId, limit] ); } // Batch operations async batchInsert(records: any[]): Promise&lt;void&gt; { const values: any[] = []; const placeholders: string[] = []; records.forEach((record, i) =&gt; { const base = i * 4; placeholders.push(`($${base + 1}, $${base + 2}, $${base + 3}, $${base + 4})`); values.push(record.id, record.content, record.userId, record.timestamp); }); await this.db.query( ` INSERT INTO messages (id, content, userId, timestamp) VALUES ${placeholders.join(', ')} ON CONFLICT (id) DO NOTHING `, values ); } } Network Optimization‚Äã 1. HTTP/2 and Compression‚Äã class OptimizedServer { createServer(): void { const server = http2.createSecureServer({ key: fs.readFileSync('key.pem'), cert: fs.readFileSync('cert.pem'), // HTTP/2 settings settings: { headerTableSize: 4096, enablePush: true, maxConcurrentStreams: 100, initialWindowSize: 65535, maxFrameSize: 16384, maxHeaderListSize: 8192, }, }); // Enable compression server.on('stream', (stream, headers) =&gt; { const acceptEncoding = headers['accept-encoding'] || ''; let contentEncoding = 'identity'; if (acceptEncoding.includes('br')) { contentEncoding = 'br'; stream.respond({ 'content-encoding': contentEncoding, ':status': 200, }); stream = stream.pipe(zlib.createBrotliCompress()); } else if (acceptEncoding.includes('gzip')) { contentEncoding = 'gzip'; stream.respond({ 'content-encoding': contentEncoding, ':status': 200, }); stream = stream.pipe(zlib.createGzip()); } // Handle request... }); } } 2. WebSocket Optimization‚Äã class OptimizedWebSocket { private ws: WebSocket; private messageQueue: any[] = []; private sending = false; constructor(url: string) { this.ws = new WebSocket(url, { perMessageDeflate: { zlibDeflateOptions: { level: zlib.Z_BEST_COMPRESSION, }, threshold: 1024, // Compress messages &gt; 1KB }, }); this.setupBatching(); } private setupBatching(): void { // Batch small messages setInterval(() =&gt; { if (this.messageQueue.length &gt; 0 &amp;&amp; !this.sending) { this.flushMessageQueue(); } }, 50); // 50ms batching window } send(message: any): void { this.messageQueue.push(message); // Send immediately if queue is large if (this.messageQueue.length &gt;= 10) { this.flushMessageQueue(); } } private async flushMessageQueue(): Promise&lt;void&gt; { if (this.sending || this.messageQueue.length === 0) return; this.sending = true; const messages = this.messageQueue.splice(0); try { // Send as batch await this.ws.send( JSON.stringify({ type: 'batch', messages, }) ); } finally { this.sending = false; } } } Cost Optimization‚Äã 1. API Call Optimization‚Äã class APIOptimizer { private cache = new Map&lt;string, CachedResponse&gt;(); private rateLimiter = new RateLimiter(); async callAPI(endpoint: string, params: any, options: APIOptions = {}): Promise&lt;any&gt; { // Check cache first const cacheKey = this.getCacheKey(endpoint, params); const cached = this.cache.get(cacheKey); if (cached &amp;&amp; !this.isExpired(cached)) { return cached.data; } // Rate limit check await this.rateLimiter.acquire(endpoint); try { // Make API call const response = await this.makeRequest(endpoint, params); // Cache if configured if (options.cache) { this.cache.set(cacheKey, { data: response, timestamp: Date.now(), ttl: options.cacheTTL || 300000, // 5 minutes }); } return response; } finally { this.rateLimiter.release(endpoint); } } // Batch multiple API calls async batchCall(requests: APIRequest[]): Promise&lt;any[]&gt; { // Group by endpoint const grouped = this.groupByEndpoint(requests); // Execute batched calls const results = await Promise.all( Object.entries(grouped).map(([endpoint, batch]) =&gt; this.executeBatch(endpoint, batch)) ); // Flatten and reorder results return this.reorderResults(requests, results.flat()); } } 2. Resource Usage Optimization‚Äã class ResourceOptimizer { // Optimize model usage async selectModel(task: Task): Promise&lt;string&gt; { // Use smaller models for simple tasks if (task.complexity === 'low') { return 'gpt-3.5-turbo'; } // Use larger models only when needed if (task.complexity === 'high' || task.requiresReasoning) { return 'gpt-4'; } // Default to medium model return 'gpt-3.5-turbo-16k'; } // Optimize token usage optimizePrompt(prompt: string, maxTokens: number): string { // Remove unnecessary whitespace let optimized = prompt.trim().replace(/\\s+/g, ' '); // Truncate if too long const estimatedTokens = optimized.length / 4; // Rough estimate if (estimatedTokens &gt; maxTokens * 0.8) { optimized = this.intelligentTruncate(optimized, maxTokens * 0.8); } return optimized; } // Optimize storage async compressOldData(): Promise&lt;void&gt; { const oldData = await this.getDataOlderThan(30); // 30 days for (const record of oldData) { // Compress large text fields if (record.content.length &gt; 1000) { record.compressedContent = await compress(record.content); delete record.content; } // Remove unnecessary fields delete record.tempData; delete record.debugInfo; await this.updateRecord(record); } } } Monitoring and Profiling‚Äã 1. Performance Profiling‚Äã class Profiler { private profiles = new Map&lt;string, Profile&gt;(); startProfile(name: string): () =&gt; void { const start = process.hrtime.bigint(); const startMemory = process.memoryUsage(); return () =&gt; { const end = process.hrtime.bigint(); const endMemory = process.memoryUsage(); const profile: Profile = { name, duration: Number(end - start) / 1_000_000, // Convert to ms memoryDelta: { heapUsed: endMemory.heapUsed - startMemory.heapUsed, external: endMemory.external - startMemory.external, }, timestamp: new Date(), }; this.addProfile(name, profile); }; } private addProfile(name: string, profile: Profile): void { if (!this.profiles.has(name)) { this.profiles.set(name, profile); } else { // Update running average const existing = this.profiles.get(name)!; existing.duration = (existing.duration + profile.duration) / 2; existing.calls = (existing.calls || 1) + 1; } } getReport(): ProfileReport { const report: ProfileReport = { profiles: Array.from(this.profiles.values()), summary: { totalDuration: 0, totalMemory: 0, slowestOperation: null, mostFrequent: null, }, }; // Calculate summary statistics for (const profile of report.profiles) { report.summary.totalDuration += profile.duration; if ( !report.summary.slowestOperation || profile.duration &gt; report.summary.slowestOperation.duration ) { report.summary.slowestOperation = profile; } } return report; } } 2. Real-time Monitoring‚Äã class RealtimeMonitor { private metrics = new MetricsCollector(); private alerts = new AlertManager(); start(): void { // Collect metrics this.collectMetrics(); // Setup alerts this.setupAlerts(); // Export metrics this.exportMetrics(); } private collectMetrics(): void { // Response time histogram runtime.on('request:complete', ({ duration }) =&gt; { this.metrics.histogram('response_time', duration); }); // Active connections gauge setInterval(() =&gt; { this.metrics.gauge('active_connections', runtime.getActiveConnections()); }, 5000); // Error rate counter runtime.on('error', ({ type }) =&gt; { this.metrics.counter('errors', { type }); }); } private setupAlerts(): void { // High response time alert this.alerts.create({ name: 'high_response_time', condition: () =&gt; this.metrics.percentile('response_time', 95) &gt; 1000, message: 'P95 response time &gt; 1s', cooldown: 5 * 60 * 1000, // 5 minutes }); // Memory usage alert this.alerts.create({ name: 'high_memory', condition: () =&gt; process.memoryUsage().heapUsed &gt; 1024 * 1024 * 1024, message: 'Heap usage &gt; 1GB', cooldown: 10 * 60 * 1000, }); } } Best Practices Summary‚Äã Measure First: Profile before optimizingCache Strategically: Cache expensive operations with appropriate TTLsBatch Operations: Group similar operations togetherAsync by Default: Use async/await and parallel processingMonitor Continuously: Track performance metrics in productionOptimize Queries: Use indexes and analyze query plansManage Resources: Implement pooling and cleanupScale Horizontally: Design for distributed systemsCompress Data: Use compression for network and storageCost Awareness: Monitor and optimize API usage Related Documentation‚Äã Best Practices - General development best practicesState Management - Efficient state handlingMemory System - Memory optimization techniques","keywords":"","version":"1.0.17"},{"title":"ElizaOS Architecture Overview","type":0,"sectionRef":"#","url":"/docs/technical/architecture/overview","content":"ElizaOS Architecture Overview This document provides a comprehensive technical overview of the ElizaOS architecture, designed for developers who want to understand the system's internals and build upon it. üèóÔ∏è System Architecture‚Äã ElizaOS follows a modular, plugin-based architecture that enables flexible AI agent creation and deployment across multiple platforms. üß© Core Components‚Äã Runtime Engine (packages/core/src/runtime.ts)‚Äã The heart of ElizaOS, responsible for: Agent Lifecycle Management: Starting, stopping, and managing agent instancesMessage Processing Pipeline: Routing messages through the plugin systemContext Assembly: Building comprehensive context for AI interactionsResponse Generation: Orchestrating AI providers to generate responses class AgentRuntime { // Core properties agentId: UUID; character: Character; memory: IMemoryManager; state: IStateManager; // Service registry services: Map&lt;string, IService&gt;; // Plugin components actions: Map&lt;string, Action&gt;; providers: Map&lt;string, Provider&gt;; evaluators: Map&lt;string, Evaluator&gt;; // Message processing async processMessage(message: Message): Promise&lt;Response&gt;; async evaluate(message: Message, response: Response): Promise&lt;void&gt;; } Memory System (packages/core/src/memory.ts)‚Äã Sophisticated memory management with multiple storage types: Memory Types‚Äã Short-term Memory: Recent conversation context (last 10-20 messages)Long-term Memory: Persistent facts and relationshipsEpisodic Memory: Specific conversation events and outcomesSemantic Memory: Embeddings for similarity search interface IMemoryManager { // Core operations createMemory(memory: Memory): Promise&lt;void&gt;; searchMemories(query: string, count: number): Promise&lt;Memory[]&gt;; getRecentMemories(count: number): Promise&lt;Memory[]&gt;; // Relationship management createRelationship(userA: UUID, userB: UUID, type: string): Promise&lt;void&gt;; getRelationships(userId: UUID): Promise&lt;Relationship[]&gt;; // Embedding operations createEmbedding(text: string): Promise&lt;number[]&gt;; searchByEmbedding(embedding: number[], threshold: number): Promise&lt;Memory[]&gt;; } State Management‚Äã ElizaOS uses a hierarchical state system: interface State { // Agent state agentId: UUID; roomId: UUID; // Conversation state recentMessages: Message[]; conversationContext: string; goals: Goal[]; // User state userId: UUID; userContext: Map&lt;string, any&gt;; // Plugin state pluginStates: Map&lt;string, any&gt;; } üîå Plugin Architecture‚Äã Plugin Types‚Äã Actions: Discrete behaviors the agent can perform interface Action { name: string; description: string; examples: string[][]; validate: (context: Context) =&gt; Promise&lt;boolean&gt;; execute: (context: Context) =&gt; Promise&lt;Response&gt;; } Providers: Supply contextual information interface Provider { name: string; get: (context: Context) =&gt; Promise&lt;string&gt;; } Evaluators: Post-processing and learning interface Evaluator { name: string; evaluate: (context: Context) =&gt; Promise&lt;EvaluationResult&gt;; } Tasks: Scheduled or deferred operations interface Task { name: string; schedule: CronExpression | 'periodic' | 'once'; execute: (context: Context) =&gt; Promise&lt;void&gt;; } Plugin Loading‚Äã üåê Platform Abstraction‚Äã Room/Channel Abstraction‚Äã ElizaOS abstracts platform-specific concepts into a unified model: interface Room { id: UUID; // Platform-agnostic ID platformId: string; // Platform-specific ID type: 'discord' | 'twitter' | 'telegram' | 'direct'; members: UUID[]; metadata: Map&lt;string, any&gt;; } Message Normalization‚Äã All platform messages are normalized: interface Message { id: UUID; userId: UUID; roomId: UUID; content: string; attachments: Attachment[]; platformData: any; // Original platform message timestamp: Date; } üîÑ Request Flow‚Äã Message Processing Pipeline‚Äã üíæ Database Architecture‚Äã Schema Design‚Äã ElizaOS uses a flexible schema that supports multiple database adapters: -- Core tables CREATE TABLE memories ( id UUID PRIMARY KEY, agent_id UUID NOT NULL, user_id UUID, room_id UUID, content TEXT NOT NULL, embedding VECTOR(1536), type VARCHAR(50), created_at TIMESTAMP ); CREATE TABLE relationships ( id UUID PRIMARY KEY, user_a UUID NOT NULL, user_b UUID NOT NULL, relationship_type VARCHAR(50), strength FLOAT, created_at TIMESTAMP ); CREATE TABLE goals ( id UUID PRIMARY KEY, agent_id UUID NOT NULL, name VARCHAR(255), status VARCHAR(50), objectives JSONB, created_at TIMESTAMP ); Database Adapters‚Äã PostgreSQL: Full-featured with vector supportSQLite/PGLite: Lightweight for developmentIn-Memory: Testing and ephemeral agents üöÄ Performance Considerations‚Äã Caching Strategy‚Äã class CacheManager { // Multi-level cache l1Cache: LRUCache&lt;string, any&gt;; // In-process cache l2Cache: RedisCache; // Distributed cache // Cache invalidation invalidatePattern(pattern: string): Promise&lt;void&gt;; // Smart caching cacheWithTTL(key: string, value: any, ttl: number): Promise&lt;void&gt;; } Concurrency Model‚Äã Message Processing: Concurrent per room, sequential per userMemory Operations: Read-heavy optimization with write batchingAI Calls: Request pooling and rate limitingPlugin Execution: Isolated execution contexts üîê Security Architecture‚Äã Authentication &amp; Authorization‚Äã interface SecurityContext { // User authentication userId: UUID; permissions: Permission[]; // Platform verification platformId: string; platformVerified: boolean; // Rate limiting rateLimitBucket: string; requestCount: number; } Plugin Sandboxing‚Äã Plugins run in isolated contextsResource usage limits enforcedAPI access controlled by permissionsNo direct database access üìä Monitoring &amp; Observability‚Äã Metrics Collection‚Äã interface Metrics { // Performance metrics messageProcessingTime: Histogram; aiResponseTime: Histogram; memoryOperationTime: Histogram; // Business metrics messagesProcessed: Counter; activeUsers: Gauge; pluginExecutions: Counter; // Error tracking errors: Counter; aiFailures: Counter; } Logging Architecture‚Äã Structured logging with correlation IDsLog levels: trace, debug, info, warn, error, fatalAutomatic PII redactionLog aggregation support üîÑ Deployment Architecture‚Äã Horizontal Scaling‚Äã High Availability‚Äã Stateless agent instancesShared state in database/cacheAutomatic failoverHealth checks and self-healing üõ†Ô∏è Development Patterns‚Äã Service Pattern‚Äã abstract class BaseService implements IService { protected runtime: AgentRuntime; abstract initialize(): Promise&lt;void&gt;; abstract shutdown(): Promise&lt;void&gt;; // Service discovery getService&lt;T extends IService&gt;(name: string): T { return this.runtime.getService&lt;T&gt;(name); } } Event-Driven Architecture‚Äã // Event emitter pattern runtime.on('message:received', async (message) =&gt; { await processMessage(message); }); runtime.on('memory:created', async (memory) =&gt; { await indexMemory(memory); }); runtime.on('goal:completed', async (goal) =&gt; { await evaluateGoal(goal); }); üìö Further Reading‚Äã Core Concepts Deep DivePlugin Development GuideState Management DetailsAPI Reference","keywords":"","version":"1.0.17"},{"title":"Memory System","type":0,"sectionRef":"#","url":"/docs/technical/architecture/memory-system","content":"Memory System The ElizaOS memory system provides agents with sophisticated memory capabilities, enabling context-aware conversations and long-term relationship building. Overview‚Äã The memory system in ElizaOS is designed to: Store and retrieve conversation historyBuild knowledge graphs from interactionsEnable semantic search across memoriesSupport different memory types and importance levelsScale efficiently with vector embeddings Architecture‚Äã Memory Types‚Äã 1. Short-term Memory‚Äã Short-term memory stores recent conversation context: interface ShortTermMemory { messages: Message[]; // Recent messages context: ConversationContext; // Current context maxSize: number; // Typically 10-50 messages ttl: number; // Time to live } // Implementation class ShortTermMemoryManager { private memories = new Map&lt;string, Message[]&gt;(); addMessage(conversationId: string, message: Message): void { const messages = this.memories.get(conversationId) || []; messages.push(message); // Keep only recent messages if (messages.length &gt; this.maxSize) { messages.shift(); } this.memories.set(conversationId, messages); } getRecentContext(conversationId: string): Message[] { return this.memories.get(conversationId) || []; } } 2. Long-term Memory‚Äã Long-term memory persists important information: interface LongTermMemory { id: string; content: string; embedding: number[]; // Vector embedding metadata: { userId: string; timestamp: Date; importance: number; // 0-1 score topics: string[]; entities: string[]; sentiment: number; }; } // Storage implementation class LongTermMemoryStore { async store(memory: Memory): Promise&lt;void&gt; { // Generate embedding const embedding = await this.generateEmbedding(memory.content); // Store in vector database await this.vectorDB.upsert({ id: memory.id, vector: embedding, metadata: memory.metadata, }); // Store in relational database for structured queries await this.db.memories.create({ data: memory, }); } } 3. Episodic Memory‚Äã Episodic memories capture significant events: interface EpisodicMemory { id: string; event: string; participants: string[]; location?: string; timestamp: Date; emotionalValence: number; significance: number; relatedMemories: string[]; } // Event detection class EpisodeDetector { async detectEpisode(messages: Message[]): Promise&lt;EpisodicMemory | null&gt; { // Analyze message sequence for significant events const features = await this.extractFeatures(messages); if (features.significance &gt; this.threshold) { return { id: generateId(), event: features.eventSummary, participants: features.entities.filter((e) =&gt; e.type === 'person'), timestamp: new Date(), emotionalValence: features.sentiment, significance: features.significance, relatedMemories: await this.findRelated(features), }; } return null; } } 4. Semantic Memory‚Äã Semantic memory stores facts and knowledge: interface SemanticMemory { concept: string; relations: Relation[]; properties: Property[]; confidence: number; sources: string[]; // Memory IDs that support this fact } interface Relation { type: string; // &quot;is-a&quot;, &quot;has&quot;, &quot;located-in&quot;, etc. target: string; confidence: number; } // Knowledge graph builder class KnowledgeGraphBuilder { async extractKnowledge(memory: Memory): Promise&lt;SemanticMemory[]&gt; { const facts = []; // Extract entities and relations const extraction = await this.nlp.extract(memory.content); for (const triple of extraction.triples) { facts.push({ concept: triple.subject, relations: [ { type: triple.predicate, target: triple.object, confidence: triple.confidence, }, ], properties: triple.properties, confidence: triple.confidence, sources: [memory.id], }); } return facts; } } Memory Processing Pipeline‚Äã 1. Ingestion‚Äã class MemoryIngestion { async process(message: Message): Promise&lt;void&gt; { // 1. Preprocess const processed = await this.preprocess(message); // 2. Extract features const features = await this.extractFeatures(processed); // 3. Generate embeddings const embedding = await this.generateEmbedding(processed); // 4. Calculate importance const importance = await this.calculateImportance(features); // 5. Store memory await this.store({ content: processed, embedding, features, importance, metadata: { entityId: message.entityId, timestamp: new Date(), roomId: message.roomId, }, }); } } 2. Feature Extraction‚Äã interface MemoryFeatures { entities: Entity[]; topics: string[]; sentiment: number; emotions: Emotion[]; intentions: string[]; keyPhrases: string[]; } class FeatureExtractor { async extract(text: string): Promise&lt;MemoryFeatures&gt; { const [entities, topics, sentiment, emotions] = await Promise.all([ this.extractEntities(text), this.extractTopics(text), this.analyzeSentiment(text), this.detectEmotions(text), ]); return { entities, topics, sentiment, emotions, intentions: await this.classifyIntentions(text), keyPhrases: await this.extractKeyPhrases(text), }; } } 3. Importance Scoring‚Äã class ImportanceScorer { async calculate(memory: Memory, features: MemoryFeatures): Promise&lt;number&gt; { const weights = { emotional: 0.3, novelty: 0.2, personal: 0.2, factual: 0.15, recency: 0.15, }; const scores = { emotional: this.emotionalScore(features.emotions), novelty: await this.noveltyScore(memory, features), personal: this.personalRelevance(features.entities), factual: this.factualImportance(features), recency: this.recencyScore(memory.timestamp), }; // Weighted sum return Object.entries(scores).reduce((total, [key, score]) =&gt; total + score * weights[key], 0); } } Memory Retrieval‚Äã 1. Semantic Search‚Äã class MemoryRetrieval { async search(query: string, options: SearchOptions): Promise&lt;Memory[]&gt; { // Generate query embedding const queryEmbedding = await this.generateEmbedding(query); // Vector similarity search const similar = await this.vectorDB.search({ vector: queryEmbedding, topK: options.limit || 10, filter: this.buildFilter(options), }); // Re-rank by relevance const reranked = await this.rerank(query, similar); // Apply context filtering return this.filterByContext(reranked, options.context); } private buildFilter(options: SearchOptions): any { const filter = {}; if (options.userId) { filter['metadata.userId'] = options.userId; } if (options.timeRange) { filter['metadata.timestamp'] = { $gte: options.timeRange.start, $lte: options.timeRange.end, }; } if (options.minImportance) { filter['metadata.importance'] = { $gte: options.minImportance, }; } return filter; } } 2. Context-Aware Retrieval‚Äã class ContextualRetrieval { async retrieve(context: ConversationContext, limit: number = 5): Promise&lt;Memory[]&gt; { // Multi-stage retrieval const stages = [ // Recent context this.getRecentMemories(context.conversationId, 5), // Topically related this.getTopicalMemories(context.topics, 10), // Entity-based this.getEntityMemories(context.entities, 10), // Emotionally similar this.getEmotionalMemories(context.emotionalState, 5), ]; const results = await Promise.all(stages); // Merge and deduplicate const merged = this.mergeResults(results.flat()); // Score by relevance const scored = await this.scoreRelevance(merged, context); // Return top memories return scored.slice(0, limit); } } 3. Memory Consolidation‚Äã class MemoryConsolidation { async consolidate(): Promise&lt;void&gt; { // Find similar memories const clusters = await this.clusterMemories(); for (const cluster of clusters) { // Skip if too small if (cluster.size &lt; this.minClusterSize) continue; // Generate summary const summary = await this.summarizeCluster(cluster); // Create consolidated memory const consolidated = { type: 'consolidated', content: summary, sources: cluster.memories.map((m) =&gt; m.id), importance: Math.max(...cluster.memories.map((m) =&gt; m.importance)), timestamp: new Date(), }; // Store consolidated memory await this.store(consolidated); // Optionally archive original memories if (this.archiveOriginals) { await this.archive(cluster.memories); } } } } Vector Embeddings‚Äã 1. Embedding Generation‚Äã class EmbeddingGenerator { async generate(text: string): Promise&lt;number[]&gt; { // Preprocess text const processed = this.preprocess(text); // Generate embedding using model const embedding = await this.model.embed(processed); // Normalize return this.normalize(embedding); } private preprocess(text: string): string { // Remove unnecessary whitespace let processed = text.trim().replace(/\\s+/g, ' '); // Truncate if too long if (processed.length &gt; this.maxLength) { processed = this.truncateSmartly(processed); } return processed; } private normalize(embedding: number[]): number[] { const magnitude = Math.sqrt(embedding.reduce((sum, val) =&gt; sum + val * val, 0)); return embedding.map((val) =&gt; val / magnitude); } } 2. Similarity Calculation‚Äã class SimilarityCalculator { cosineSimilarity(a: number[], b: number[]): number { let dotProduct = 0; let normA = 0; let normB = 0; for (let i = 0; i &lt; a.length; i++) { dotProduct += a[i] * b[i]; normA += a[i] * a[i]; normB += b[i] * b[i]; } return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB)); } async findSimilar( embedding: number[], candidates: Memory[], threshold: number = 0.7 ): Promise&lt;SimilarMemory[]&gt; { const similarities = []; for (const candidate of candidates) { const similarity = this.cosineSimilarity(embedding, candidate.embedding); if (similarity &gt;= threshold) { similarities.push({ memory: candidate, similarity, }); } } return similarities.sort((a, b) =&gt; b.similarity - a.similarity); } } Memory Management‚Äã 1. Storage Optimization‚Äã class MemoryOptimizer { async optimize(): Promise&lt;void&gt; { // Remove duplicates await this.deduplicateMemories(); // Compress old memories await this.compressOldMemories(); // Update importance scores await this.recalculateImportance(); // Prune low-value memories await this.pruneLowValueMemories(); } private async deduplicateMemories(): Promise&lt;void&gt; { const memories = await this.getAllMemories(); const seen = new Set&lt;string&gt;(); const duplicates = []; for (const memory of memories) { const hash = this.hashMemory(memory); if (seen.has(hash)) { duplicates.push(memory.id); } else { seen.add(hash); } } await this.removeMemories(duplicates); } } 2. Memory Decay‚Äã class MemoryDecay { async applyDecay(): Promise&lt;void&gt; { const memories = await this.getDecayableMemories(); for (const memory of memories) { // Calculate decay based on time and access const decayFactor = this.calculateDecay( memory.timestamp, memory.lastAccessed, memory.accessCount ); // Update importance memory.importance *= decayFactor; // Remove if below threshold if (memory.importance &lt; this.removalThreshold) { await this.removeMemory(memory.id); } else { await this.updateMemory(memory); } } } private calculateDecay(created: Date, lastAccessed: Date, accessCount: number): number { const age = Date.now() - created.getTime(); const recency = Date.now() - lastAccessed.getTime(); // Forgetting curve const timeFactor = Math.exp(-age / this.halfLife); // Access bonus const accessFactor = Math.log(accessCount + 1) / 10; // Recency bonus const recencyFactor = Math.exp(-recency / this.recencyWeight); return Math.min(1, timeFactor + accessFactor + recencyFactor); } } Integration with Agent Runtime‚Äã 1. Memory Middleware‚Äã class MemoryMiddleware { async process( message: Message, context: Context, next: () =&gt; Promise&lt;Response&gt; ): Promise&lt;Response&gt; { // Load relevant memories const memories = await this.memoryManager.retrieve(context); // Enhance context with memories context.memories = memories; context.memoryContext = this.buildMemoryContext(memories); // Process message const response = await next(); // Store new memory await this.memoryManager.store({ message, response, context, }); return response; } } 2. Memory-Enhanced Responses‚Äã class MemoryEnhancedAgent { async generateResponse(message: Message, memories: Memory[]): Promise&lt;Response&gt; { // Build prompt with memory context const prompt = this.buildPromptWithMemories(message, memories); // Generate response const response = await this.llm.generate(prompt); // Ensure consistency with memories const validated = await this.validateAgainstMemories(response, memories); return validated; } private buildPromptWithMemories(message: Message, memories: Memory[]): string { const relevantMemories = memories .map((m) =&gt; `- ${m.content} (${m.metadata.timeAgo})`) .join('\\n'); return ` Previous relevant conversations: ${relevantMemories} Current message: ${message.content} Generate a response that is consistent with the conversation history. `; } } Performance Considerations‚Äã 1. Indexing Strategies‚Äã // Compound indexes for efficient queries const indexes = [ { userId: 1, timestamp: -1 }, { importance: -1, timestamp: -1 }, { 'metadata.topics': 1 }, { 'metadata.entities': 1 }, ]; // Vector index for similarity search const vectorIndex = { type: 'ivfflat', dimensions: 1536, lists: 100, }; 2. Caching Layer‚Äã class MemoryCache { private cache = new LRUCache&lt;string, Memory[]&gt;({ max: 1000, ttl: 5 * 60 * 1000, // 5 minutes }); async get(key: string): Promise&lt;Memory[] | null&gt; { return this.cache.get(key) || null; } async set(key: string, memories: Memory[]): Promise&lt;void&gt; { this.cache.set(key, memories); } } 3. Batch Processing‚Äã class BatchMemoryProcessor { private queue: Memory[] = []; private processing = false; async add(memory: Memory): Promise&lt;void&gt; { this.queue.push(memory); if (!this.processing &amp;&amp; this.queue.length &gt;= this.batchSize) { await this.processBatch(); } } private async processBatch(): Promise&lt;void&gt; { this.processing = true; const batch = this.queue.splice(0, this.batchSize); // Generate embeddings in batch const embeddings = await this.generateBatchEmbeddings(batch.map((m) =&gt; m.content)); // Store in batch await this.batchStore( batch.map((m, i) =&gt; ({ ...m, embedding: embeddings[i], })) ); this.processing = false; } } Best Practices‚Äã Memory Hygiene: Regularly clean and consolidate memoriesImportance Scoring: Use multi-factor importance calculationContext Windows: Limit memory context to maintain performancePrivacy: Implement memory access controls and data retention policiesEmbedding Quality: Use appropriate models for your use caseMonitoring: Track memory system performance and usage Related Documentation‚Äã State Management - Overall state architectureCore Concepts - Fundamental ElizaOS conceptsPerformance Guide - Optimization techniques","keywords":"","version":"1.0.17"},{"title":"Socket Communication Architecture","type":0,"sectionRef":"#","url":"/docs/technical/architecture/socket-communication","content":"Socket Communication Architecture ElizaOS implements real-time communication through WebSocket connections, providing instant message delivery and live interaction capabilities across multiple platforms and agents. Overview‚Äã The socket communication system enables: Real-time messaging - Instant bidirectional communicationMulti-agent coordination - Live coordination between multiple agentsCross-platform integration - Unified communication layerEvent-driven architecture - Reactive message handling Architecture Components‚Äã Server-Side Implementation‚Äã Socket.IO Server Setup‚Äã // packages/server/src/socketio/index.ts import { Server as SocketIOServer } from 'socket.io'; export const setupSocketIO = (server: any, runtime: IAgentRuntime) =&gt; { const io = new SocketIOServer(server, { cors: { origin: '*', methods: ['GET', 'POST'], }, }); // Message type definitions enum MessageType { ROOM_JOINING = 'room_joining', SEND_MESSAGE = 'send_message', MESSAGE = 'message', ACK = 'ack', THINKING = 'thinking', CONTROL = 'control', } io.on('connection', (socket) =&gt; { console.log('User connected:', socket.id); // Handle message sending socket.on(MessageType.SEND_MESSAGE, async (data) =&gt; { await handleIncomingMessage(socket, data, runtime); }); // Handle room joining socket.on(MessageType.ROOM_JOINING, (data) =&gt; { socket.join(data.roomId); console.log(`Socket ${socket.id} joined room ${data.roomId}`); }); socket.on('disconnect', () =&gt; { console.log('User disconnected:', socket.id); }); }); return io; }; Message Processing Pipeline‚Äã async function handleIncomingMessage(socket: Socket, data: MessageData, runtime: IAgentRuntime) { try { // 1. Validate message data const validatedData = validateMessageData(data); // 2. Create memory object const memory: Memory = { id: stringToUuid(Date.now().toString()), entityId: stringToUuid(validatedData.userId), roomId: stringToUuid(validatedData.roomId), worldId: stringToUuid(validatedData.worldId || 'default'), content: { text: validatedData.text, source: 'websocket-api', metadata: validatedData.metadata || {}, }, type: MemoryType.MESSAGE, }; // 3. Store message in database await runtime.memory.create(memory); // 4. Broadcast message to room participants socket.to(validatedData.roomId).emit(MessageType.MESSAGE, { id: memory.id, userId: memory.entityId, text: memory.content.text, timestamp: Date.now(), }); // 5. Process with agent runtime const response = await runtime.processMessage(memory); // 6. Send agent response back to room if (response) { socket.to(validatedData.roomId).emit(MessageType.MESSAGE, { id: response.id, userId: runtime.agentId, text: response.content.text, timestamp: Date.now(), }); } // 7. Send acknowledgment socket.emit(MessageType.ACK, { success: true, messageId: memory.id }); } catch (error) { console.error('Message processing error:', error); socket.emit(MessageType.ACK, { success: false, error: error.message }); } } Client-Side Implementation‚Äã Socket Manager‚Äã // packages/client/src/lib/socketio-manager.ts import { io, Socket } from 'socket.io-client'; import { Evt } from 'evt'; export class SocketIOManager { private static instance: SocketIOManager; private socket: Socket | null = null; private eventBus = Evt.create&lt;SocketEvent&gt;(); private activeChannels = new Set&lt;string&gt;(); static getInstance(): SocketIOManager { if (!SocketIOManager.instance) { SocketIOManager.instance = new SocketIOManager(); } return SocketIOManager.instance; } connect(url: string): void { if (this.socket?.connected) { return; } this.socket = io(url, { autoConnect: true, reconnection: true, reconnectionAttempts: 5, reconnectionDelay: 1000, }); this.setupEventHandlers(); } private setupEventHandlers(): void { if (!this.socket) return; // Connection events this.socket.on('connect', () =&gt; { console.log('Connected to server'); this.eventBus.post('connected'); }); this.socket.on('disconnect', () =&gt; { console.log('Disconnected from server'); this.eventBus.post('disconnected'); }); // Message events this.socket.on('message', (data: MessageEvent) =&gt; { this.eventBus.post('message', data); }); this.socket.on('thinking', (data: ThinkingEvent) =&gt; { this.eventBus.post('thinking', data); }); this.socket.on('ack', (data: AckEvent) =&gt; { this.eventBus.post('ack', data); }); } joinChannel(channelId: string): void { if (!this.socket) { throw new Error('Socket not connected'); } this.socket.emit('room_joining', { roomId: channelId }); this.activeChannels.add(channelId); } sendMessage(channelId: string, message: string, metadata?: any): void { if (!this.socket) { throw new Error('Socket not connected'); } this.socket.emit('send_message', { roomId: channelId, text: message, userId: this.getUserId(), metadata, }); } // Event subscription interface on&lt;T extends keyof SocketEventMap&gt;( event: T, handler: (data: SocketEventMap[T]) =&gt; void ): () =&gt; void { const ctx = this.eventBus.attach(event, handler); return () =&gt; ctx.detach(); } } React Integration‚Äã // packages/client/src/hooks/useSocket.ts import { useEffect, useState } from 'react'; import { SocketIOManager } from '../lib/socketio-manager'; export function useSocket(serverUrl?: string) { const [isConnected, setIsConnected] = useState(false); const [socket] = useState(() =&gt; SocketIOManager.getInstance()); useEffect(() =&gt; { if (serverUrl) { socket.connect(serverUrl); } // Subscribe to connection events const unsubscribeConnected = socket.on('connected', () =&gt; { setIsConnected(true); }); const unsubscribeDisconnected = socket.on('disconnected', () =&gt; { setIsConnected(false); }); return () =&gt; { unsubscribeConnected(); unsubscribeDisconnected(); }; }, [serverUrl, socket]); return { socket, isConnected, joinChannel: (channelId: string) =&gt; socket.joinChannel(channelId), sendMessage: (channelId: string, message: string, metadata?: any) =&gt; socket.sendMessage(channelId, message, metadata), }; } Message Flow Architecture‚Äã Message Types‚Äã interface SocketMessage { type: MessageType; payload: any; timestamp: number; id: string; } enum MessageType { // User actions ROOM_JOINING = 'room_joining', // User joins a channel SEND_MESSAGE = 'send_message', // User sends a message // Server responses MESSAGE = 'message', // Broadcast message to room ACK = 'ack', // Acknowledgment of received message THINKING = 'thinking', // Agent is processing (typing indicator) CONTROL = 'control', // System control messages } Channel Management‚Äã // Auto-creation of channels for message flow class ChannelManager { private channels = new Map&lt;string, ChannelInfo&gt;(); async ensureChannel(channelId: string): Promise&lt;ChannelInfo&gt; { if (!this.channels.has(channelId)) { // Create new channel const channel: ChannelInfo = { id: channelId, participants: new Set(), createdAt: Date.now(), lastActivity: Date.now(), }; // Store in database await this.saveChannel(channel); this.channels.set(channelId, channel); } return this.channels.get(channelId)!; } addParticipant(channelId: string, userId: string): void { const channel = this.channels.get(channelId); if (channel) { channel.participants.add(userId); channel.lastActivity = Date.now(); } } removeParticipant(channelId: string, userId: string): void { const channel = this.channels.get(channelId); if (channel) { channel.participants.delete(userId); // Cleanup empty channels if (channel.participants.size === 0) { this.scheduleChannelCleanup(channelId); } } } } Event Broadcasting‚Äã class EventBroadcaster { constructor(private io: SocketIOServer) {} // Broadcast to specific room broadcastToRoom(roomId: string, event: string, data: any): void { this.io.to(roomId).emit(event, { ...data, timestamp: Date.now(), roomId, }); } // Broadcast to all connected clients broadcastGlobally(event: string, data: any): void { this.io.emit(event, { ...data, timestamp: Date.now(), }); } // Send to specific socket sendToSocket(socketId: string, event: string, data: any): void { this.io.to(socketId).emit(event, { ...data, timestamp: Date.now(), }); } } Integration with Agent Runtime‚Äã Bootstrap Plugin Integration‚Äã // packages/plugin-bootstrap/src/index.ts export default { name: 'bootstrap', description: 'Core event handlers and message routing', services: [ { name: 'websocket', initialize: async (runtime: IAgentRuntime) =&gt; { // Handle entity joined events for world/entity creation runtime.on('ENTITY_JOINED', async (data) =&gt; { await handleEntityJoined(runtime, data); }); // Handle messages from socket connections runtime.on('MESSAGE_RECEIVED', async (data) =&gt; { await handleSocketMessage(runtime, data); }); }, }, ], }; async function handleEntityJoined(runtime: IAgentRuntime, data: EntityJoinedEvent) { // Ensure world exists await runtime.ensureWorldExists({ id: data.worldId, name: data.worldName || 'Socket World', }); // Ensure entity exists await runtime.ensureEntityExists({ id: data.entityId, name: data.entityName || 'Socket User', }); // Create or update room await runtime.ensureRoomExists({ id: data.roomId, worldId: data.worldId, name: data.roomName || 'Socket Channel', }); } Send Handler Registration‚Äã // Register WebSocket send handler runtime.sendHandlers.set( 'websocket-api', async (runtime: IAgentRuntime, target: TargetInfo, content: Content) =&gt; { const socketManager = SocketIOManager.getInstance(); // Send message through WebSocket socketManager.sendMessage(target.roomId, content.text, content.metadata); // Also broadcast to room participants const io = getSocketIOInstance(); io.to(target.roomId).emit('message', { id: stringToUuid(Date.now().toString()), userId: runtime.agentId, text: content.text, timestamp: Date.now(), source: 'agent', }); } ); Connection Management‚Äã Connection State Tracking‚Äã class ConnectionManager { private connections = new Map&lt;string, ConnectionInfo&gt;(); trackConnection(socketId: string, info: ConnectionInfo): void { this.connections.set(socketId, { ...info, connectedAt: Date.now(), lastSeen: Date.now(), }); } updateLastSeen(socketId: string): void { const connection = this.connections.get(socketId); if (connection) { connection.lastSeen = Date.now(); } } removeConnection(socketId: string): void { this.connections.delete(socketId); } // Get active connections for a room getActiveConnections(roomId: string): ConnectionInfo[] { return Array.from(this.connections.values()).filter((conn) =&gt; conn.roomIds.includes(roomId)); } // Cleanup stale connections cleanupStaleConnections(maxAge: number = 5 * 60 * 1000): void { const cutoff = Date.now() - maxAge; for (const [socketId, connection] of this.connections) { if (connection.lastSeen &lt; cutoff) { this.removeConnection(socketId); } } } } Reconnection Handling‚Äã // Client-side reconnection logic class ReconnectionManager { private reconnectAttempts = 0; private maxReconnectAttempts = 5; private reconnectDelay = 1000; async handleReconnection(socket: Socket): Promise&lt;void&gt; { socket.on('disconnect', () =&gt; { this.startReconnectionProcess(); }); socket.on('connect', () =&gt; { this.resetReconnectionState(); this.restoreActiveChannels(); }); } private startReconnectionProcess(): void { if (this.reconnectAttempts &gt;= this.maxReconnectAttempts) { console.error('Max reconnection attempts reached'); return; } setTimeout( () =&gt; { this.reconnectAttempts++; this.attemptReconnection(); }, this.reconnectDelay * Math.pow(2, this.reconnectAttempts) ); } private resetReconnectionState(): void { this.reconnectAttempts = 0; } private restoreActiveChannels(): void { const socketManager = SocketIOManager.getInstance(); // Rejoin all previously active channels for (const channelId of socketManager.getActiveChannels()) { socketManager.joinChannel(channelId); } } } Performance Optimizations‚Äã Message Batching‚Äã class MessageBatcher { private batch: SocketMessage[] = []; private batchTimer: NodeJS.Timeout | null = null; private readonly batchSize = 10; private readonly batchDelay = 100; // ms addMessage(message: SocketMessage): void { this.batch.push(message); if (this.batch.length &gt;= this.batchSize) { this.flushBatch(); } else if (!this.batchTimer) { this.batchTimer = setTimeout(() =&gt; { this.flushBatch(); }, this.batchDelay); } } private flushBatch(): void { if (this.batch.length &gt; 0) { this.processBatch([...this.batch]); this.batch = []; } if (this.batchTimer) { clearTimeout(this.batchTimer); this.batchTimer = null; } } private processBatch(messages: SocketMessage[]): void { // Process batch of messages efficiently const grouped = this.groupMessagesByRoom(messages); for (const [roomId, roomMessages] of grouped) { this.broadcastBatchToRoom(roomId, roomMessages); } } } Connection Pooling‚Äã class SocketPool { private pools = new Map&lt;string, Socket[]&gt;(); private readonly maxPoolSize = 10; getConnection(roomId: string): Socket | null { const pool = this.pools.get(roomId) || []; return pool.find((socket) =&gt; socket.connected) || null; } addConnection(roomId: string, socket: Socket): void { if (!this.pools.has(roomId)) { this.pools.set(roomId, []); } const pool = this.pools.get(roomId)!; if (pool.length &lt; this.maxPoolSize) { pool.push(socket); } // Cleanup disconnected sockets this.cleanupPool(roomId); } private cleanupPool(roomId: string): void { const pool = this.pools.get(roomId); if (pool) { const active = pool.filter((socket) =&gt; socket.connected); this.pools.set(roomId, active); } } } Error Handling and Resilience‚Äã Error Recovery‚Äã class SocketErrorHandler { handleConnectionError(error: Error, socket: Socket): void { console.error('Socket connection error:', error); // Attempt graceful recovery if (this.isRecoverableError(error)) { this.scheduleReconnection(socket); } else { this.handleFatalError(error, socket); } } handleMessageError(error: Error, message: SocketMessage): void { console.error('Message processing error:', error); // Try to send error response try { this.sendErrorResponse(message, error); } catch (responseError) { console.error('Failed to send error response:', responseError); } } private isRecoverableError(error: Error): boolean { const recoverableErrors = ['ECONNRESET', 'ENOTFOUND', 'TIMEOUT', 'NETWORK_ERROR']; return recoverableErrors.some( (errType) =&gt; error.message.includes(errType) || error.name.includes(errType) ); } } Circuit Breaker Pattern‚Äã class SocketCircuitBreaker { private failureCount = 0; private readonly failureThreshold = 5; private readonly resetTimeout = 60000; // 1 minute private state: 'CLOSED' | 'OPEN' | 'HALF_OPEN' = 'CLOSED'; private nextAttempt = 0; async execute&lt;T&gt;(operation: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; { if (this.state === 'OPEN') { if (Date.now() &lt; this.nextAttempt) { throw new Error('Circuit breaker is OPEN'); } this.state = 'HALF_OPEN'; } try { const result = await operation(); this.onSuccess(); return result; } catch (error) { this.onFailure(); throw error; } } private onSuccess(): void { this.failureCount = 0; this.state = 'CLOSED'; } private onFailure(): void { this.failureCount++; if (this.failureCount &gt;= this.failureThreshold) { this.state = 'OPEN'; this.nextAttempt = Date.now() + this.resetTimeout; } } } Security Considerations‚Äã Authentication and Authorization‚Äã // JWT-based socket authentication const authenticateSocket = (socket: Socket, next: (err?: Error) =&gt; void) =&gt; { const token = socket.handshake.auth.token; if (!token) { return next(new Error('Authentication required')); } try { const decoded = jwt.verify(token, process.env.JWT_SECRET!); socket.userId = decoded.userId; socket.permissions = decoded.permissions || []; next(); } catch (error) { next(new Error('Invalid token')); } }; // Room access control const authorizeRoomAccess = async (socket: Socket, roomId: string): Promise&lt;boolean&gt; =&gt; { // Check if user has permission to access room const hasAccess = await checkRoomPermissions(socket.userId, roomId); if (!hasAccess) { socket.emit('error', { message: 'Access denied to room' }); return false; } return true; }; Rate Limiting‚Äã class SocketRateLimiter { private userLimits = new Map&lt;string, RateLimit&gt;(); private readonly maxRequests = 100; private readonly windowMs = 60000; // 1 minute checkRateLimit(userId: string): boolean { const now = Date.now(); const userLimit = this.userLimits.get(userId) || { requests: 0, resetTime: now + this.windowMs, }; if (now &gt; userLimit.resetTime) { userLimit.requests = 0; userLimit.resetTime = now + this.windowMs; } if (userLimit.requests &gt;= this.maxRequests) { return false; } userLimit.requests++; this.userLimits.set(userId, userLimit); return true; } } This socket communication architecture provides the foundation for real-time interaction in ElizaOS, enabling instant messaging, live agent responses, and coordinated multi-agent communication across various platforms and clients.","keywords":"","version":"1.0.17"},{"title":"Room/World Abstraction and UUID System","type":0,"sectionRef":"#","url":"/docs/technical/architecture/room-world-abstraction","content":"Room/World Abstraction and UUID System ElizaOS implements a sophisticated abstraction layer that maps platform-specific concepts (Discord servers, Telegram groups, etc.) to universal Room and World concepts, while maintaining agent-specific perspectives through deterministic UUID generation. Overview‚Äã The Room/World abstraction system provides: Platform Abstraction - Universal concepts across different platformsAgent Perspectives - Each agent has unique UUIDs for the same entitiesHierarchical Organization - Worlds contain rooms, rooms contain conversationsIsolation Boundaries - Proper data separation between contexts Core Concepts‚Äã Entity Hierarchy‚Äã // Universal entity hierarchy World (Discord Server, Telegram Group, etc.) ‚îî‚îÄ‚îÄ Room (Discord Channel, Telegram Chat, etc.) ‚îî‚îÄ‚îÄ Conversation (Message threads) ‚îî‚îÄ‚îÄ Message (Individual messages) ‚îî‚îÄ‚îÄ Entity (Users, Agents) Type Definitions‚Äã // packages/core/src/types/environment.ts interface World { id: UUID; name: string; description?: string; metadata: { platform?: string; // 'discord', 'telegram', etc. platformId?: string; // Original platform ID owner?: UUID; // World owner entity permissions?: Permission[]; settings?: WorldSettings; }; entities: UUID[]; // Entities with access to this world rooms: UUID[]; // Rooms within this world createdAt: Date; updatedAt: Date; } interface Room { id: UUID; worldId: UUID; // Parent world name: string; description?: string; type: ChannelType; // Channel classification metadata: { platform?: string; // Origin platform platformId?: string; // Original platform room ID permissions?: Permission[]; settings?: RoomSettings; }; participants: UUID[]; // Active participants createdAt: Date; updatedAt: Date; } enum ChannelType { SELF = 'SELF', // Agent's private channel DM = 'DM', // Direct message GROUP = 'GROUP', // Group chat VOICE_DM = 'VOICE_DM', // Voice direct message VOICE_GROUP = 'VOICE_GROUP', // Voice group chat FEED = 'FEED', // Social media feed THREAD = 'THREAD', // Threaded conversation WORLD = 'WORLD', // World-level channel FORUM = 'FORUM', // Forum-style discussion } interface Entity { id: UUID; name: string; username?: string; metadata: { platform?: string; // Origin platform platformId?: string; // Original platform user ID avatar?: string; bio?: string; roles?: string[]; settings?: EntitySettings; }; components: Component[]; // Extensible entity properties createdAt: Date; updatedAt: Date; } UUID System Architecture‚Äã Deterministic UUID Generation‚Äã The UUID system ensures each agent has a unique perspective on the same entities: // packages/core/src/utils.ts function stringToUuid(target: string): UUID { // Generate deterministic UUID from string using SHA1 const hash = crypto.createHash('sha1').update(target).digest('hex'); // Convert to UUID v4 format return [ hash.substring(0, 8), hash.substring(8, 12), '4' + hash.substring(13, 16), // Version 4 identifier ((parseInt(hash.substring(16, 17), 16) &amp; 0x3) | 0x8).toString(16) + hash.substring(17, 20), hash.substring(20, 32), ].join('-') as UUID; } function createUniqueUuid(runtime: IAgentRuntime, baseUserId: UUID | string): UUID { // Agent-specific UUID swizzling const combinedString = `${baseUserId}:${runtime.agentId}`; return stringToUuid(combinedString); } Agent Perspective System‚Äã Each agent maintains its own UUID mapping for entities: // packages/core/src/entities.ts class EntityManager { constructor(private runtime: IAgentRuntime) {} // Get agent-specific UUID for an entity async getEntityId(platformId: string, platform: string): Promise&lt;UUID&gt; { // Create deterministic UUID based on platform and agent const baseId = `${platform}:${platformId}`; return createUniqueUuid(this.runtime, baseId); } // Ensure entity exists with agent-specific perspective async ensureEntityExists(entityData: { platformId: string; platform: string; name: string; username?: string; metadata?: any; }): Promise&lt;Entity&gt; { const entityId = await this.getEntityId(entityData.platformId, entityData.platform); // Check if entity already exists const existing = await this.runtime.databaseAdapter.getEntity({ id: entityId }); if (existing) { return existing; } // Create new entity with agent-specific UUID const entity: Entity = { id: entityId, name: entityData.name, username: entityData.username, metadata: { platform: entityData.platform, platformId: entityData.platformId, ...entityData.metadata, }, components: [], createdAt: new Date(), updatedAt: new Date(), }; await this.runtime.databaseAdapter.createEntity(entity); return entity; } } Platform Mapping‚Äã Discord Integration‚Äã // packages/plugin-discord/src/environment.ts class DiscordEnvironmentManager { async mapDiscordToWorld(guild: Guild): Promise&lt;World&gt; { const worldId = stringToUuid(`discord:guild:${guild.id}`); return { id: worldId, name: guild.name, description: guild.description || undefined, metadata: { platform: 'discord', platformId: guild.id, owner: await this.getGuildOwnerEntityId(guild.ownerId), permissions: await this.mapGuildPermissions(guild), settings: { memberCount: guild.memberCount, features: guild.features, verificationLevel: guild.verificationLevel, }, }, entities: await this.getGuildMemberEntityIds(guild), rooms: await this.getGuildChannelRoomIds(guild), createdAt: guild.createdAt, updatedAt: new Date(), }; } async mapDiscordToRoom(channel: GuildChannel | DMChannel, worldId?: UUID): Promise&lt;Room&gt; { const roomId = stringToUuid(`discord:channel:${channel.id}`); return { id: roomId, worldId: worldId || stringToUuid(`discord:guild:${channel.guild?.id || 'dm'}`), name: channel.name || 'Direct Message', description: 'description' in channel ? channel.description : undefined, type: this.mapChannelType(channel), metadata: { platform: 'discord', platformId: channel.id, permissions: await this.mapChannelPermissions(channel), settings: { nsfw: 'nsfw' in channel ? channel.nsfw : false, rateLimitPerUser: 'rateLimitPerUser' in channel ? channel.rateLimitPerUser : 0, }, }, participants: await this.getChannelParticipantEntityIds(channel), createdAt: channel.createdAt, updatedAt: new Date(), }; } private mapChannelType(channel: GuildChannel | DMChannel): ChannelType { if (channel.type === ChannelType.DM) return ChannelType.DM; if (channel.type === ChannelType.GROUP_DM) return ChannelType.GROUP; if (channel.type === ChannelType.GUILD_VOICE) return ChannelType.VOICE_GROUP; if (channel.type === ChannelType.GUILD_TEXT) return ChannelType.GROUP; if (channel.type === ChannelType.GUILD_FORUM) return ChannelType.FORUM; return ChannelType.GROUP; // Default fallback } } Telegram Integration‚Äã // packages/plugin-telegram/src/environment.ts class TelegramEnvironmentManager { async mapTelegramToWorld(chat: Chat): Promise&lt;World&gt; { const worldId = stringToUuid(`telegram:chat:${chat.id}`); return { id: worldId, name: chat.title || `Chat ${chat.id}`, description: chat.description, metadata: { platform: 'telegram', platformId: chat.id.toString(), settings: { type: chat.type, memberCount: 'all_members_are_administrators' in chat ? chat.all_members_are_administrators : undefined, inviteLink: 'invite_link' in chat ? chat.invite_link : undefined, }, }, entities: await this.getChatMemberEntityIds(chat), rooms: [worldId], // Telegram chats are typically single-room createdAt: new Date(), // Telegram doesn't provide creation time updatedAt: new Date(), }; } async mapTelegramToRoom(chat: Chat, worldId?: UUID): Promise&lt;Room&gt; { const roomId = stringToUuid(`telegram:chat:${chat.id}`); return { id: roomId, worldId: worldId || roomId, // Self-contained for Telegram name: chat.title || `Chat ${chat.id}`, description: chat.description, type: this.mapChatType(chat), metadata: { platform: 'telegram', platformId: chat.id.toString(), settings: { type: chat.type, username: 'username' in chat ? chat.username : undefined, }, }, participants: await this.getChatMemberEntityIds(chat), createdAt: new Date(), updatedAt: new Date(), }; } private mapChatType(chat: Chat): ChannelType { switch (chat.type) { case 'private': return ChannelType.DM; case 'group': return ChannelType.GROUP; case 'supergroup': return ChannelType.GROUP; case 'channel': return ChannelType.FEED; default: return ChannelType.GROUP; } } } Environment Context Management‚Äã World Creation and Management‚Äã // packages/core/src/environment.ts class WorldManager { constructor(private runtime: IAgentRuntime) {} async ensureWorldExists(worldData: { platformId: string; platform: string; name: string; description?: string; metadata?: any; }): Promise&lt;World&gt; { const worldId = stringToUuid(`${worldData.platform}:world:${worldData.platformId}`); // Check if world already exists const existing = await this.runtime.databaseAdapter.getWorld({ id: worldId }); if (existing) { return existing; } // Create new world const world: World = { id: worldId, name: worldData.name, description: worldData.description, metadata: { platform: worldData.platform, platformId: worldData.platformId, ...worldData.metadata, }, entities: [], rooms: [], createdAt: new Date(), updatedAt: new Date(), }; await this.runtime.databaseAdapter.createWorld(world); return world; } async addEntityToWorld(worldId: UUID, entityId: UUID): Promise&lt;void&gt; { const world = await this.runtime.databaseAdapter.getWorld({ id: worldId }); if (world &amp;&amp; !world.entities.includes(entityId)) { world.entities.push(entityId); world.updatedAt = new Date(); await this.runtime.databaseAdapter.updateWorld(world); } } async addRoomToWorld(worldId: UUID, roomId: UUID): Promise&lt;void&gt; { const world = await this.runtime.databaseAdapter.getWorld({ id: worldId }); if (world &amp;&amp; !world.rooms.includes(roomId)) { world.rooms.push(roomId); world.updatedAt = new Date(); await this.runtime.databaseAdapter.updateWorld(world); } } } Room Context Management‚Äã class RoomManager { constructor(private runtime: IAgentRuntime) {} async ensureRoomExists(roomData: { platformId: string; platform: string; worldId: UUID; name: string; type: ChannelType; metadata?: any; }): Promise&lt;Room&gt; { const roomId = stringToUuid(`${roomData.platform}:room:${roomData.platformId}`); const existing = await this.runtime.databaseAdapter.getRoom({ id: roomId }); if (existing) { return existing; } const room: Room = { id: roomId, worldId: roomData.worldId, name: roomData.name, type: roomData.type, metadata: { platform: roomData.platform, platformId: roomData.platformId, ...roomData.metadata, }, participants: [], createdAt: new Date(), updatedAt: new Date(), }; await this.runtime.databaseAdapter.createRoom(room); // Add room to world const worldManager = new WorldManager(this.runtime); await worldManager.addRoomToWorld(roomData.worldId, roomId); return room; } async addParticipantToRoom(roomId: UUID, entityId: UUID): Promise&lt;void&gt; { const room = await this.runtime.databaseAdapter.getRoom({ id: roomId }); if (room &amp;&amp; !room.participants.includes(entityId)) { room.participants.push(entityId); room.updatedAt = new Date(); await this.runtime.databaseAdapter.updateRoom(room); } } async removeParticipantFromRoom(roomId: UUID, entityId: UUID): Promise&lt;void&gt; { const room = await this.runtime.databaseAdapter.getRoom({ id: roomId }); if (room) { room.participants = room.participants.filter((id) =&gt; id !== entityId); room.updatedAt = new Date(); await this.runtime.databaseAdapter.updateRoom(room); } } } Component System‚Äã Entity Components‚Äã // packages/core/src/types/component.ts interface Component { id: UUID; type: ComponentType; entityId: UUID; data: any; metadata?: { source?: string; platform?: string; updatedAt: Date; [key: string]: any; }; } enum ComponentType { PROFILE = 'profile', // User profile data PERMISSIONS = 'permissions', // Access permissions PREFERENCES = 'preferences', // User preferences ACTIVITY = 'activity', // Activity tracking RELATIONSHIPS = 'relationships', // Social connections CUSTOM = 'custom', // Custom component types } class ComponentManager { constructor(private runtime: IAgentRuntime) {} async addComponent( entityId: UUID, component: Omit&lt;Component, 'id' | 'entityId'&gt; ): Promise&lt;Component&gt; { const componentId = stringToUuid(`${entityId}:${component.type}:${Date.now()}`); const fullComponent: Component = { id: componentId, entityId, ...component, metadata: { ...component.metadata, updatedAt: new Date(), }, }; await this.runtime.databaseAdapter.createComponent(fullComponent); return fullComponent; } async getEntityComponents(entityId: UUID, type?: ComponentType): Promise&lt;Component[]&gt; { return this.runtime.databaseAdapter.getComponents({ entityId, type, }); } async updateComponent(componentId: UUID, data: any): Promise&lt;void&gt; { const component = await this.runtime.databaseAdapter.getComponent({ id: componentId }); if (component) { component.data = { ...component.data, ...data }; component.metadata = { ...component.metadata, updatedAt: new Date(), }; await this.runtime.databaseAdapter.updateComponent(component); } } } Memory Context Integration‚Äã Context-Aware Memory Storage‚Äã class ContextualMemoryManager { constructor(private runtime: IAgentRuntime) {} async createMemoryWithContext( content: Content, context: { entityId: UUID; worldId?: UUID; roomId?: UUID; type: MemoryType; scope: 'private' | 'room' | 'shared'; } ): Promise&lt;Memory&gt; { const memory: Memory = { id: stringToUuid(`${context.entityId}:${Date.now()}`), entityId: context.entityId, worldId: context.worldId, roomId: context.roomId, content, type: context.type, metadata: { scope: context.scope, source: content.source || 'unknown', timestamp: Date.now(), }, }; // Apply agent-specific UUID swizzling for agent's perspective const agentMemory = this.swizzleMemoryForAgent(memory); await this.runtime.memory.create(agentMemory); return agentMemory; } private swizzleMemoryForAgent(memory: Memory): Memory { // Create agent-specific view of the memory return { ...memory, id: createUniqueUuid(this.runtime, memory.id), entityId: createUniqueUuid(this.runtime, memory.entityId), worldId: memory.worldId ? createUniqueUuid(this.runtime, memory.worldId) : undefined, roomId: memory.roomId ? createUniqueUuid(this.runtime, memory.roomId) : undefined, }; } async searchMemoriesInContext( query: string, context: { worldId?: UUID; roomId?: UUID; scope?: 'private' | 'room' | 'shared'; } ): Promise&lt;Memory[]&gt; { const embedding = await this.runtime.embed(query); return this.runtime.memory.searchMemoriesByEmbedding(embedding, { match_threshold: 0.7, count: 10, tableName: 'memories', worldId: context.worldId, roomId: context.roomId, }); } } Cross-Platform Entity Resolution‚Äã Entity Linking‚Äã class EntityLinkingManager { constructor(private runtime: IAgentRuntime) {} async linkEntitiesAcrossPlatforms( primaryEntityId: UUID, secondaryEntityId: UUID, linkType: 'same_person' | 'alias' | 'bot_account' ): Promise&lt;void&gt; { // Create bidirectional link between entities await this.createEntityLink(primaryEntityId, secondaryEntityId, linkType); await this.createEntityLink(secondaryEntityId, primaryEntityId, linkType); } private async createEntityLink( fromEntityId: UUID, toEntityId: UUID, linkType: string ): Promise&lt;void&gt; { const component: Omit&lt;Component, 'id' | 'entityId'&gt; = { type: ComponentType.RELATIONSHIPS, data: { linkedEntity: toEntityId, linkType, strength: 1.0, verified: false, }, metadata: { source: 'entity_linking', updatedAt: new Date(), }, }; const componentManager = new ComponentManager(this.runtime); await componentManager.addComponent(fromEntityId, component); } async resolveEntityAliases(entityId: UUID): Promise&lt;UUID[]&gt; { const componentManager = new ComponentManager(this.runtime); const relationships = await componentManager.getEntityComponents( entityId, ComponentType.RELATIONSHIPS ); return relationships .filter((comp) =&gt; comp.data.linkType === 'alias' || comp.data.linkType === 'same_person') .map((comp) =&gt; comp.data.linkedEntity); } } Performance Optimizations‚Äã UUID Caching‚Äã class UUIDCache { private cache = new Map&lt;string, UUID&gt;(); private readonly maxSize = 10000; getOrCreateUUID(key: string, generator: () =&gt; UUID): UUID { if (this.cache.has(key)) { return this.cache.get(key)!; } const uuid = generator(); // Manage cache size if (this.cache.size &gt;= this.maxSize) { const firstKey = this.cache.keys().next().value; this.cache.delete(firstKey); } this.cache.set(key, uuid); return uuid; } invalidate(key: string): void { this.cache.delete(key); } clear(): void { this.cache.clear(); } } Batch Entity Operations‚Äã class BatchEntityManager { constructor(private runtime: IAgentRuntime) {} async createEntitiesBatch(entities: Omit&lt;Entity, 'id'&gt;[]): Promise&lt;Entity[]&gt; { const created: Entity[] = []; // Process in batches to avoid overwhelming the database const batchSize = 50; for (let i = 0; i &lt; entities.length; i += batchSize) { const batch = entities.slice(i, i + batchSize); const batchResults = await this.processBatch(batch); created.push(...batchResults); } return created; } private async processBatch(entities: Omit&lt;Entity, 'id'&gt;[]): Promise&lt;Entity[]&gt; { const promises = entities.map(async (entityData) =&gt; { const entityId = stringToUuid(`${entityData.name}:${Date.now()}`); const entity: Entity = { id: entityId, ...entityData, createdAt: new Date(), updatedAt: new Date(), }; await this.runtime.databaseAdapter.createEntity(entity); return entity; }); return Promise.all(promises); } } This Room/World abstraction system provides ElizaOS with platform-agnostic entity management while maintaining proper isolation and agent-specific perspectives through deterministic UUID generation.","keywords":"","version":"1.0.17"},{"title":"Service Layer Architecture","type":0,"sectionRef":"#","url":"/docs/technical/architecture/service-layer","content":"Service Layer Architecture ElizaOS implements a comprehensive service layer that provides modular, reusable functionality for agents. Services handle external integrations, background processing, and shared system resources while maintaining clean separation of concerns. Overview‚Äã The service layer provides: Modular Integration - Pluggable services for different platforms and toolsLifecycle Management - Proper initialization, startup, and shutdown handlingDependency Injection - Type-safe service access throughout the runtimeBackground Processing - Long-running tasks and scheduled operations Service Architecture‚Äã Service Interface‚Äã // packages/core/src/types/service.ts interface Service { name: string; description?: string; initialize?: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; start?: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; stop?: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; [key: string]: any; // Additional service-specific methods and properties } Service Type Registry‚Äã ElizaOS uses a type-safe service registry system: // Service type definitions interface ServiceTypeRegistry { TRANSCRIPTION: 'transcription'; VIDEO: 'video'; BROWSER: 'browser'; SPEECH: 'speech'; IMAGE_RECOGNITION: 'image_recognition'; PDF: 'pdf'; // Extensible via module augmentation } type ServiceType = ServiceTypeRegistry[keyof ServiceTypeRegistry]; Service Registration and Access‚Äã // packages/core/src/runtime.ts class AgentRuntime implements IAgentRuntime { private services = new Map&lt;ServiceType, Service&gt;(); // Register a service with the runtime registerService(serviceType: ServiceType, service: Service): void { this.services.set(serviceType, service); } // Type-safe service access getService&lt;T extends Service&gt;(serviceType: ServiceType): T | null { return (this.services.get(serviceType) as T) || null; } // Get all registered services getServices(): Map&lt;ServiceType, Service&gt; { return new Map(this.services); } } Built-in Services‚Äã Transcription Service‚Äã Handles audio-to-text conversion: // packages/plugin-node/src/services/transcription.ts interface TranscriptionService extends Service { transcribe(audioBuffer: Buffer, options?: TranscriptionOptions): Promise&lt;string&gt;; getSupportedFormats(): string[]; isConfigured(): boolean; } class WhisperTranscriptionService implements TranscriptionService { name = 'whisper-transcription'; description = 'OpenAI Whisper-based audio transcription'; async initialize(runtime: IAgentRuntime): Promise&lt;void&gt; { // Initialize Whisper model or API client this.validateConfiguration(); } async transcribe(audioBuffer: Buffer, options?: TranscriptionOptions): Promise&lt;string&gt; { try { // Convert audio buffer to format expected by Whisper const audioFile = await this.prepareAudioFile(audioBuffer); // Call Whisper API or local model const response = await this.callWhisperAPI(audioFile, options); return response.text; } catch (error) { console.error('Transcription failed:', error); throw new Error(`Transcription service error: ${error.message}`); } } getSupportedFormats(): string[] { return ['mp3', 'wav', 'ogg', 'm4a', 'webm']; } isConfigured(): boolean { return !!process.env.OPENAI_API_KEY; } } Browser Service‚Äã Provides web browsing and content extraction: // packages/plugin-node/src/services/browser.ts interface BrowserService extends Service { browse(url: string, options?: BrowseOptions): Promise&lt;BrowseResult&gt;; screenshot(url: string, options?: ScreenshotOptions): Promise&lt;Buffer&gt;; extractText(url: string): Promise&lt;string&gt;; close(): Promise&lt;void&gt;; } class PuppeteerBrowserService implements BrowserService { name = 'puppeteer-browser'; description = 'Puppeteer-based web browsing service'; private browser: Browser | null = null; async initialize(runtime: IAgentRuntime): Promise&lt;void&gt; { // Launch browser instance this.browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'], }); } async browse(url: string, options: BrowseOptions = {}): Promise&lt;BrowseResult&gt; { if (!this.browser) { throw new Error('Browser service not initialized'); } const page = await this.browser.newPage(); try { // Configure page settings await page.setViewport({ width: 1920, height: 1080 }); await page.setUserAgent(options.userAgent || this.getDefaultUserAgent()); // Navigate to URL const response = await page.goto(url, { waitUntil: options.waitUntil || 'domcontentloaded', timeout: options.timeout || 30000, }); // Extract content based on options const result: BrowseResult = { url: page.url(), title: await page.title(), text: await this.extractPageText(page, options), html: options.includeHtml ? await page.content() : undefined, screenshot: options.screenshot ? await page.screenshot() : undefined, statusCode: response?.status(), links: options.extractLinks ? await this.extractLinks(page) : undefined, }; return result; } finally { await page.close(); } } async stop(): Promise&lt;void&gt; { if (this.browser) { await this.browser.close(); this.browser = null; } } } Speech Service‚Äã Handles text-to-speech conversion: // packages/plugin-node/src/services/speech.ts interface SpeechService extends Service { speak(text: string, options?: SpeechOptions): Promise&lt;Buffer&gt;; getVoices(): Promise&lt;Voice[]&gt;; setVoice(voiceId: string): void; } class ElevenLabsSpeechService implements SpeechService { name = 'elevenlabs-speech'; description = 'ElevenLabs text-to-speech service'; private selectedVoice: string = 'default'; async speak(text: string, options: SpeechOptions = {}): Promise&lt;Buffer&gt; { const voice = options.voice || this.selectedVoice; try { const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voice}`, { method: 'POST', headers: { Accept: 'audio/mpeg', 'Content-Type': 'application/json', 'xi-api-key': process.env.ELEVENLABS_API_KEY!, }, body: JSON.stringify({ text, model_id: options.model || 'eleven_monolingual_v1', voice_settings: { stability: options.stability || 0.5, similarity_boost: options.similarity_boost || 0.5, }, }), }); if (!response.ok) { throw new Error(`Speech synthesis failed: ${response.statusText}`); } return Buffer.from(await response.arrayBuffer()); } catch (error) { console.error('Speech synthesis error:', error); throw error; } } async getVoices(): Promise&lt;Voice[]&gt; { const response = await fetch('https://api.elevenlabs.io/v1/voices', { headers: { 'xi-api-key': process.env.ELEVENLABS_API_KEY!, }, }); const data = await response.json(); return data.voices.map((voice: any) =&gt; ({ id: voice.voice_id, name: voice.name, category: voice.category, description: voice.description, })); } } Service Builder Pattern‚Äã ElizaOS provides a fluent builder API for creating services: // packages/core/src/service.ts interface ServiceBuilder { withName(name: string): ServiceBuilder; withDescription(description: string): ServiceBuilder; withInitialize(fn: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;): ServiceBuilder; withStart(fn: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;): ServiceBuilder; withStop(fn: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;): ServiceBuilder; withMethod(name: string, fn: Function): ServiceBuilder; build(): Service; } function createService(type: ServiceType): ServiceBuilder { const service: Partial&lt;Service&gt; = {}; return { withName(name: string): ServiceBuilder { service.name = name; return this; }, withDescription(description: string): ServiceBuilder { service.description = description; return this; }, withInitialize(fn: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;): ServiceBuilder { service.initialize = fn; return this; }, withStart(fn: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;): ServiceBuilder { service.start = fn; return this; }, withStop(fn: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;): ServiceBuilder { service.stop = fn; return this; }, withMethod(name: string, fn: Function): ServiceBuilder { (service as any)[name] = fn; return this; }, build(): Service { if (!service.name) { throw new Error('Service name is required'); } return service as Service; }, }; } // Usage example const customService = createService('custom') .withName('my-custom-service') .withDescription('A custom service for specific functionality') .withInitialize(async (runtime) =&gt; { console.log('Initializing custom service'); }) .withMethod('customMethod', async (data: any) =&gt; { return `Processed: ${data}`; }) .build(); Service Lifecycle Management‚Äã Initialization Sequence‚Äã Services are initialized in a specific order during runtime startup: // packages/core/src/runtime.ts class AgentRuntime { async initializeServices(): Promise&lt;void&gt; { const services = Array.from(this.services.entries()); // Initialize services sequentially to handle dependencies for (const [serviceType, service] of services) { try { if (service.initialize) { console.log(`Initializing service: ${service.name}`); await service.initialize(this); } } catch (error) { console.error(`Failed to initialize service ${service.name}:`, error); // Decide whether to continue or fail fast based on service criticality if (this.isCriticalService(serviceType)) { throw error; } } } } async startServices(): Promise&lt;void&gt; { const services = Array.from(this.services.values()); // Start services in parallel since they should be independent await Promise.allSettled( services.map(async (service) =&gt; { if (service.start) { try { console.log(`Starting service: ${service.name}`); await service.start(this); } catch (error) { console.error(`Failed to start service ${service.name}:`, error); } } }) ); } async stopServices(): Promise&lt;void&gt; { const services = Array.from(this.services.values()); // Stop services in parallel for faster shutdown await Promise.allSettled( services.map(async (service) =&gt; { if (service.stop) { try { console.log(`Stopping service: ${service.name}`); await service.stop(this); } catch (error) { console.error(`Failed to stop service ${service.name}:`, error); } } }) ); } } Health Monitoring‚Äã interface ServiceHealth { name: string; status: 'healthy' | 'degraded' | 'unhealthy'; lastCheck: Date; error?: string; metrics?: { uptime: number; requestCount: number; errorRate: number; averageResponseTime: number; }; } class ServiceHealthMonitor { private healthChecks = new Map&lt;string, () =&gt; Promise&lt;ServiceHealth&gt;&gt;(); registerHealthCheck(serviceName: string, check: () =&gt; Promise&lt;ServiceHealth&gt;): void { this.healthChecks.set(serviceName, check); } async checkAllServices(): Promise&lt;ServiceHealth[]&gt; { const results: ServiceHealth[] = []; for (const [serviceName, check] of this.healthChecks) { try { const health = await check(); results.push(health); } catch (error) { results.push({ name: serviceName, status: 'unhealthy', lastCheck: new Date(), error: error.message, }); } } return results; } async getServiceHealth(serviceName: string): Promise&lt;ServiceHealth | null&gt; { const check = this.healthChecks.get(serviceName); if (!check) return null; try { return await check(); } catch (error) { return { name: serviceName, status: 'unhealthy', lastCheck: new Date(), error: error.message, }; } } } Service Integration Patterns‚Äã Action-Service Integration‚Äã Services are commonly used within actions to provide functionality: // Example: Transcription action using transcription service const transcribeAction: Action = { name: 'TRANSCRIBE_AUDIO', validate: async (runtime: IAgentRuntime, message: Memory) =&gt; { // Check if message has audio attachment const hasAudio = message.content.attachments?.some((att) =&gt; att.type === 'audio'); // Check if transcription service is available const transcriptionService = runtime.getService&lt;TranscriptionService&gt;('transcription'); return hasAudio &amp;&amp; transcriptionService?.isConfigured(); }, handler: async (runtime: IAgentRuntime, message: Memory): Promise&lt;boolean&gt; =&gt; { const transcriptionService = runtime.getService&lt;TranscriptionService&gt;('transcription'); if (!transcriptionService) { throw new Error('Transcription service not available'); } // Find audio attachment const audioAttachment = message.content.attachments?.find((att) =&gt; att.type === 'audio'); if (!audioAttachment) { return false; } try { // Transcribe audio const transcription = await transcriptionService.transcribe(audioAttachment.data, { language: 'en', }); // Store transcription as memory await runtime.memory.create({ ...message, content: { text: transcription, metadata: { source: 'transcription', originalAudio: audioAttachment.id, }, }, }); return true; } catch (error) { console.error('Transcription failed:', error); return false; } }, }; Provider-Service Integration‚Äã Providers can use services to enhance state composition: // Example: Web content provider using browser service const webContentProvider: Provider = { get: async (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; { const browserService = runtime.getService&lt;BrowserService&gt;('browser'); if (!browserService) { return null; } // Extract URLs from message const urls = extractUrls(message.content.text); if (urls.length === 0) { return null; } try { // Browse first URL and extract content const result = await browserService.browse(urls[0], { extractText: true, timeout: 10000, }); return { text: `Web content from ${result.url}:\\n${result.text}`, data: { webContent: { url: result.url, title: result.title, text: result.text, }, }, }; } catch (error) { console.error('Failed to browse URL:', error); return null; } }, }; Custom Service Development‚Äã Creating a Custom Service‚Äã // Example: Database cleanup service interface DatabaseCleanupService extends Service { scheduleCleanup(interval: number): void; runCleanup(): Promise&lt;void&gt;; getCleanupStats(): CleanupStats; } class DatabaseCleanupServiceImpl implements DatabaseCleanupService { name = 'database-cleanup'; description = 'Automated database maintenance and cleanup'; private cleanupInterval: NodeJS.Timeout | null = null; private stats: CleanupStats = { lastRun: null, recordsDeleted: 0, spaceSaved: 0, }; async initialize(runtime: IAgentRuntime): Promise&lt;void&gt; { console.log('Initializing database cleanup service'); // Set up default cleanup schedule (daily) this.scheduleCleanup(24 * 60 * 60 * 1000); } async start(runtime: IAgentRuntime): Promise&lt;void&gt; { console.log('Database cleanup service started'); } async stop(runtime: IAgentRuntime): Promise&lt;void&gt; { if (this.cleanupInterval) { clearInterval(this.cleanupInterval); this.cleanupInterval = null; } console.log('Database cleanup service stopped'); } scheduleCleanup(interval: number): void { if (this.cleanupInterval) { clearInterval(this.cleanupInterval); } this.cleanupInterval = setInterval(async () =&gt; { try { await this.runCleanup(); } catch (error) { console.error('Scheduled cleanup failed:', error); } }, interval); } async runCleanup(): Promise&lt;void&gt; { const startTime = Date.now(); let deletedRecords = 0; try { // Clean up old memories (older than 30 days) const cutoffDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); deletedRecords += await this.cleanupOldMemories(cutoffDate); // Clean up orphaned entities deletedRecords += await this.cleanupOrphanedEntities(); // Clean up unused embeddings deletedRecords += await this.cleanupUnusedEmbeddings(); // Update stats this.stats = { lastRun: new Date(), recordsDeleted: this.stats.recordsDeleted + deletedRecords, spaceSaved: this.estimateSpaceSaved(deletedRecords), }; console.log( `Cleanup completed: ${deletedRecords} records deleted in ${Date.now() - startTime}ms` ); } catch (error) { console.error('Database cleanup failed:', error); throw error; } } getCleanupStats(): CleanupStats { return { ...this.stats }; } private async cleanupOldMemories(cutoffDate: Date): Promise&lt;number&gt; { // Implementation would depend on the database adapter // This is a simplified example return 0; } private async cleanupOrphanedEntities(): Promise&lt;number&gt; { return 0; } private async cleanupUnusedEmbeddings(): Promise&lt;number&gt; { return 0; } private estimateSpaceSaved(recordsDeleted: number): number { // Rough estimate: 1KB per record return recordsDeleted * 1024; } } Service Registration in Plugins‚Äã // Plugin that provides custom services const cleanupPlugin: Plugin = { name: 'database-cleanup', description: 'Provides automated database maintenance', services: [ { name: 'database-cleanup', service: new DatabaseCleanupServiceImpl(), }, ], actions: [], evaluators: [], providers: [], }; // Register plugin with runtime runtime.registerPlugin(cleanupPlugin); // Access the service const cleanupService = runtime.getService&lt;DatabaseCleanupService&gt;('database-cleanup'); if (cleanupService) { await cleanupService.runCleanup(); } Error Handling and Resilience‚Äã Service Circuit Breaker‚Äã class ServiceCircuitBreaker { private failures = new Map&lt;string, number&gt;(); private lastFailure = new Map&lt;string, number&gt;(); private readonly threshold = 5; private readonly timeout = 60000; // 1 minute async execute&lt;T&gt;(serviceName: string, operation: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; { const failures = this.failures.get(serviceName) || 0; const lastFailure = this.lastFailure.get(serviceName) || 0; // Check if circuit is open if (failures &gt;= this.threshold) { if (Date.now() - lastFailure &lt; this.timeout) { throw new Error(`Service ${serviceName} is temporarily unavailable`); } // Reset circuit after timeout this.failures.set(serviceName, 0); } try { const result = await operation(); // Reset failures on success this.failures.set(serviceName, 0); return result; } catch (error) { // Track failure this.failures.set(serviceName, failures + 1); this.lastFailure.set(serviceName, Date.now()); throw error; } } } Service Retry Logic‚Äã class ServiceRetryHandler { async withRetry&lt;T&gt;( operation: () =&gt; Promise&lt;T&gt;, options: { maxRetries?: number; delay?: number; backoff?: 'linear' | 'exponential'; } = {} ): Promise&lt;T&gt; { const maxRetries = options.maxRetries || 3; const baseDelay = options.delay || 1000; const backoff = options.backoff || 'exponential'; let lastError: Error; for (let attempt = 0; attempt &lt;= maxRetries; attempt++) { try { return await operation(); } catch (error) { lastError = error; if (attempt === maxRetries) { break; } // Calculate delay const delay = backoff === 'exponential' ? baseDelay * Math.pow(2, attempt) : baseDelay * (attempt + 1); console.log( `Operation failed, retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries})` ); await new Promise((resolve) =&gt; setTimeout(resolve, delay)); } } throw lastError; } } This service layer architecture provides ElizaOS with a robust, extensible foundation for integrating external systems and managing background operations while maintaining clean separation of concerns and proper lifecycle management.","keywords":"","version":"1.0.17"},{"title":"Plugin System","type":0,"sectionRef":"#","url":"/docs/technical/architecture/plugin-system","content":"Plugin System The ElizaOS plugin system provides a powerful, extensible architecture for adding custom functionality to agents. This guide covers the plugin architecture, development patterns, and best practices. Overview‚Äã The plugin system enables: Modular functionality through standardized interfacesHot-loading and dynamic plugin managementDependency resolution and version managementIsolated plugin contexts for securityShared services and state management Architecture‚Äã Plugin Structure‚Äã Basic Plugin Definition‚Äã interface Plugin { name: string; // Unique identifier version: string; // Semantic version description?: string; // Human-readable description author?: string; // Plugin author license?: string; // License identifier // Dependencies dependencies?: string[]; // Required plugins optionalDependencies?: string[]; // Optional plugins // Components actions?: Action[]; // Action handlers providers?: Provider[]; // Context providers evaluators?: Evaluator[]; // Message evaluators services?: Service[]; // Background services // Lifecycle hooks onLoad?: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; onUnload?: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; // Configuration configSchema?: ConfigSchema; // Configuration validation defaultConfig?: any; // Default configuration } Complete Plugin Example‚Äã import { Plugin, IAgentRuntime } from '@elizaos/core'; export const weatherPlugin: Plugin = { name: 'weather', version: '1.0.0', description: 'Weather information and forecasts', author: 'ElizaOS Team', license: 'MIT', dependencies: ['http-client', 'geolocation'], actions: [ { name: 'GET_WEATHER', description: 'Get current weather for a location', examples: [ { input: &quot;What's the weather in London?&quot;, output: 'Getting weather...' }, { input: 'Is it raining in Tokyo?', output: 'Checking weather...' }, ], validate: async (input: string): Promise&lt;boolean&gt; =&gt; { const weatherPattern = /weather|temperature|rain|snow|forecast/i; return weatherPattern.test(input); }, handler: async ({ input, runtime }) =&gt; { const location = await extractLocation(input); const weather = await runtime.getService('weather').getWeather(location); return { text: formatWeatherResponse(weather), data: weather, }; }, }, ], providers: [ { name: 'weather-context', description: 'Provides weather context for conversations', get: async (runtime: IAgentRuntime) =&gt; { const location = await runtime.getService('geolocation').getCurrentLocation(); const weather = await runtime.getService('weather').getWeather(location); return { currentWeather: weather, lastUpdated: new Date(), }; }, }, ], services: [ { name: 'weather', async start(runtime: IAgentRuntime) { this.apiKey = runtime.config.weatherApiKey; this.cache = new Map(); // Start cache cleanup timer this.cleanupTimer = setInterval( () =&gt; { this.cleanupCache(); }, 60 * 60 * 1000 ); // Every hour }, async stop() { clearInterval(this.cleanupTimer); this.cache.clear(); }, async getWeather(location: string) { // Check cache first const cached = this.cache.get(location); if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 10 * 60 * 1000) { return cached.data; } // Fetch from API const weather = await this.fetchWeatherFromAPI(location); // Update cache this.cache.set(location, { data: weather, timestamp: Date.now(), }); return weather; }, }, ], configSchema: { type: 'object', properties: { weatherApiKey: { type: 'string', description: 'API key for weather service', }, units: { type: 'string', enum: ['metric', 'imperial'], default: 'metric', }, cacheDuration: { type: 'number', description: 'Cache duration in minutes', default: 10, }, }, required: ['weatherApiKey'], }, async onLoad(runtime: IAgentRuntime) { console.log('Weather plugin loaded'); // Validate configuration if (!runtime.config.weatherApiKey) { throw new Error('Weather API key is required'); } }, async onUnload(runtime: IAgentRuntime) { console.log('Weather plugin unloaded'); // Cleanup resources const weatherService = runtime.getService('weather'); if (weatherService) { await weatherService.stop(); } }, }; Plugin Components‚Äã 1. Actions‚Äã Actions define how plugins respond to user input: interface Action { name: string; description: string; examples: Example[]; // Validation validate: (input: string, context: Context) =&gt; Promise&lt;boolean&gt;; // Handler handler: (params: ActionParams) =&gt; Promise&lt;ActionResult&gt;; // Optional configuration config?: { priority?: number; // Execution priority timeout?: number; // Execution timeout rateLimit?: RateLimit; // Rate limiting permissions?: string[]; // Required permissions }; } // Advanced action with middleware export const advancedAction: Action = { name: 'ADVANCED_ACTION', description: 'Demonstrates advanced action features', examples: [ { input: 'Analyze this data', output: 'Analysis complete', context: { requiresAuth: true }, }, ], validate: async (input: string, context: Context): Promise&lt;boolean&gt; =&gt; { // Multi-stage validation const checks = [ () =&gt; input.length &gt; 0, () =&gt; context.user?.authenticated === true, async () =&gt; await checkUserPermissions(context.user, 'data:analyze'), ]; for (const check of checks) { if (!(await check())) return false; } return true; }, handler: async ({ input, context, runtime }) =&gt; { // Pre-processing const startTime = Date.now(); runtime.logger.info('Starting advanced action', { input }); try { // Main logic const result = await performAnalysis(input); // Post-processing await runtime.emit('action:completed', { action: 'ADVANCED_ACTION', duration: Date.now() - startTime, success: true, }); return { text: `Analysis complete: ${result.summary}`, data: result, metadata: { processingTime: Date.now() - startTime, confidence: result.confidence, }, }; } catch (error) { runtime.logger.error('Action failed', { error }); await runtime.emit('action:failed', { action: 'ADVANCED_ACTION', error: error.message, }); throw error; } }, config: { priority: 10, timeout: 30000, rateLimit: { maxRequests: 10, windowMs: 60000, }, permissions: ['data:analyze'], }, }; 2. Providers‚Äã Providers supply dynamic context to the agent: interface Provider { name: string; description: string; // Get current context get: (runtime: IAgentRuntime) =&gt; Promise&lt;any&gt;; // Optional: Subscribe to updates subscribe?: (callback: (data: any) =&gt; void) =&gt; () =&gt; void; // Optional: Cache configuration cacheConfig?: { ttl: number; // Time to live in ms staleWhileRevalidate?: boolean; }; } // Real-time data provider export const realtimeProvider: Provider = { name: 'market-data', description: 'Provides real-time market data', get: async (runtime: IAgentRuntime) =&gt; { const cache = runtime.getService('cache'); const cacheKey = 'market-data'; // Try cache first const cached = await cache.get(cacheKey); if (cached) return cached; // Fetch fresh data const marketData = await fetchMarketData(); // Update cache await cache.set(cacheKey, marketData, { ttl: 60000 }); return marketData; }, subscribe: (callback: (data: any) =&gt; void) =&gt; { // Setup WebSocket connection const ws = new WebSocket('wss://market-data.example.com'); ws.on('message', (data) =&gt; { const parsed = JSON.parse(data); callback(parsed); }); // Return unsubscribe function return () =&gt; { ws.close(); }; }, cacheConfig: { ttl: 60000, staleWhileRevalidate: true, }, }; 3. Evaluators‚Äã Evaluators analyze and score messages: interface Evaluator { name: string; description: string; // Evaluate message evaluate: (params: EvaluatorParams) =&gt; Promise&lt;EvaluatorResult&gt;; // Optional: Batch evaluation evaluateBatch?: (messages: Message[]) =&gt; Promise&lt;EvaluatorResult[]&gt;; } interface EvaluatorResult { score: number; // 0-1 confidence score passed: boolean; // Whether evaluation passed metadata?: any; // Additional metadata } // Sentiment evaluator export const sentimentEvaluator: Evaluator = { name: 'sentiment', description: 'Evaluates message sentiment', evaluate: async ({ message, context, runtime }) =&gt; { const sentiment = await analyzeSentiment(message.content); // Track sentiment over time await runtime.getService('analytics').track('sentiment', { entityId: message.entityId, sentiment: sentiment.score, timestamp: new Date(), }); return { score: Math.abs(sentiment.score), passed: sentiment.score &gt; -0.5, // Not too negative metadata: { sentiment: sentiment.label, confidence: sentiment.confidence, aspects: sentiment.aspects, }, }; }, evaluateBatch: async (messages: Message[]) =&gt; { // Efficient batch processing const texts = messages.map((m) =&gt; m.content); const sentiments = await analyzeSentimentBatch(texts); return sentiments.map((sentiment, i) =&gt; ({ score: Math.abs(sentiment.score), passed: sentiment.score &gt; -0.5, metadata: { messageId: messages[i].id, sentiment: sentiment.label, }, })); }, }; 4. Services‚Äã Services provide shared functionality: interface Service { name: string; // Lifecycle methods start: (runtime: IAgentRuntime) =&gt; Promise&lt;void&gt;; stop: () =&gt; Promise&lt;void&gt;; // Service methods (defined by implementation) [key: string]: any; } // Database service example export class DatabaseService implements Service { name = 'database'; private pool: ConnectionPool; private cache: CacheLayer; async start(runtime: IAgentRuntime) { // Initialize connection pool this.pool = new ConnectionPool({ host: runtime.config.dbHost, port: runtime.config.dbPort, database: runtime.config.dbName, max: 20, idleTimeoutMillis: 30000, }); // Initialize cache layer this.cache = new CacheLayer({ ttl: 5 * 60 * 1000, max: 1000, }); // Test connection await this.pool.query('SELECT 1'); runtime.logger.info('Database service started'); } async stop() { await this.pool.end(); this.cache.clear(); } async query(sql: string, params?: any[]): Promise&lt;any&gt; { const cacheKey = this.getCacheKey(sql, params); // Check cache for SELECT queries if (sql.trim().toUpperCase().startsWith('SELECT')) { const cached = this.cache.get(cacheKey); if (cached) return cached; } // Execute query const result = await this.pool.query(sql, params); // Cache SELECT results if (sql.trim().toUpperCase().startsWith('SELECT')) { this.cache.set(cacheKey, result.rows); } return result.rows; } async transaction(callback: (client: any) =&gt; Promise&lt;any&gt;): Promise&lt;any&gt; { const client = await this.pool.connect(); try { await client.query('BEGIN'); const result = await callback(client); await client.query('COMMIT'); return result; } catch (error) { await client.query('ROLLBACK'); throw error; } finally { client.release(); } } private getCacheKey(sql: string, params?: any[]): string { return `${sql}:${JSON.stringify(params || [])}`; } } Plugin Lifecycle‚Äã 1. Loading Process‚Äã class PluginLoader { async loadPlugin(pluginPath: string): Promise&lt;Plugin&gt; { try { // 1. Load plugin module const module = await import(pluginPath); const plugin = module.default || module; // 2. Validate plugin structure this.validatePlugin(plugin); // 3. Check dependencies await this.checkDependencies(plugin); // 4. Initialize plugin if (plugin.onLoad) { await plugin.onLoad(this.runtime); } // 5. Register components await this.registerComponents(plugin); // 6. Start services await this.startServices(plugin); return plugin; } catch (error) { throw new PluginLoadError(`Failed to load plugin ${pluginPath}: ${error.message}`); } } private validatePlugin(plugin: any): void { if (!plugin.name || !plugin.version) { throw new Error('Plugin must have name and version'); } // Validate version format if (!semver.valid(plugin.version)) { throw new Error('Invalid plugin version format'); } // Validate component arrays const components = ['actions', 'providers', 'evaluators', 'services']; for (const component of components) { if (plugin[component] &amp;&amp; !Array.isArray(plugin[component])) { throw new Error(`Plugin ${component} must be an array`); } } } } 2. Dependency Resolution‚Äã class DependencyResolver { async resolve(plugins: Plugin[]): Promise&lt;Plugin[]&gt; { const graph = this.buildDependencyGraph(plugins); const sorted = this.topologicalSort(graph); if (sorted === null) { throw new Error('Circular dependency detected'); } return sorted; } private buildDependencyGraph(plugins: Plugin[]): DependencyGraph { const graph = new Map&lt;string, Set&lt;string&gt;&gt;(); const pluginMap = new Map(plugins.map((p) =&gt; [p.name, p])); for (const plugin of plugins) { const deps = new Set&lt;string&gt;(); // Add required dependencies for (const dep of plugin.dependencies || []) { if (!pluginMap.has(dep)) { throw new Error(`Plugin ${plugin.name} depends on missing plugin ${dep}`); } deps.add(dep); } // Add optional dependencies if available for (const dep of plugin.optionalDependencies || []) { if (pluginMap.has(dep)) { deps.add(dep); } } graph.set(plugin.name, deps); } return graph; } } 3. Hot Reloading‚Äã class HotReloader { private watchers = new Map&lt;string, FSWatcher&gt;(); async watchPlugin(pluginPath: string, plugin: Plugin): Promise&lt;void&gt; { const watcher = watch(pluginPath, { persistent: true, ignoreInitial: true, }); watcher.on('change', async () =&gt; { try { runtime.logger.info(`Reloading plugin ${plugin.name}`); // Unload current version await this.unloadPlugin(plugin); // Clear module cache delete require.cache[require.resolve(pluginPath)]; // Load new version const newPlugin = await this.loadPlugin(pluginPath); // Migrate state if needed await this.migrateState(plugin, newPlugin); runtime.logger.info(`Plugin ${plugin.name} reloaded successfully`); } catch (error) { runtime.logger.error(`Failed to reload plugin ${plugin.name}`, error); } }); this.watchers.set(plugin.name, watcher); } async stopWatching(pluginName: string): Promise&lt;void&gt; { const watcher = this.watchers.get(pluginName); if (watcher) { await watcher.close(); this.watchers.delete(pluginName); } } } Plugin Development‚Äã 1. TypeScript Plugin Template‚Äã import { Plugin, IAgentRuntime, Action, Provider, Service } from '@elizaos/core'; interface MyPluginConfig { apiKey: string; endpoint?: string; timeout?: number; } export default class MyPlugin implements Plugin { name = 'my-plugin'; version = '1.0.0'; description = 'My custom ElizaOS plugin'; private config: MyPluginConfig; private runtime: IAgentRuntime; actions = [this.createMyAction()]; providers = [this.createMyProvider()]; services = [this.createMyService()]; async onLoad(runtime: IAgentRuntime): Promise&lt;void&gt; { this.runtime = runtime; this.config = this.validateConfig(runtime.config); // Initialize plugin await this.initialize(); } async onUnload(): Promise&lt;void&gt; { // Cleanup resources await this.cleanup(); } private createMyAction(): Action { return { name: 'MY_ACTION', description: 'Performs my custom action', examples: [{ input: 'Do something', output: 'Something done!' }], validate: async (input: string) =&gt; { return input.toLowerCase().includes('something'); }, handler: async ({ input, runtime }) =&gt; { const result = await this.performAction(input); return { text: `Action completed: ${result}`, data: { result }, }; }, }; } private createMyProvider(): Provider { return { name: 'my-context', description: 'Provides my custom context', get: async () =&gt; { return { timestamp: new Date(), data: await this.fetchContextData(), }; }, }; } private createMyService(): Service { const service = { name: 'my-service', async start(runtime: IAgentRuntime) { // Initialize service }, async stop() { // Cleanup service }, // Custom service methods async doSomething(param: string) { return `Did something with ${param}`; }, }; return service; } private validateConfig(config: any): MyPluginConfig { if (!config.myPluginApiKey) { throw new Error('myPluginApiKey is required'); } return { apiKey: config.myPluginApiKey, endpoint: config.myPluginEndpoint || 'https://api.example.com', timeout: config.myPluginTimeout || 5000, }; } } 2. Plugin Testing‚Äã import { describe, it, expect, beforeEach, afterEach } from 'bun:test'; import { createMockRuntime } from '@elizaos/testing'; import MyPlugin from './my-plugin'; describe('MyPlugin', () =&gt; { let runtime: MockRuntime; let plugin: MyPlugin; beforeEach(async () =&gt; { runtime = createMockRuntime({ config: { myPluginApiKey: 'test-key', }, }); plugin = new MyPlugin(); await plugin.onLoad(runtime); }); afterEach(async () =&gt; { await plugin.onUnload(); }); describe('MY_ACTION', () =&gt; { const action = plugin.actions[0]; it('should validate correct input', async () =&gt; { const valid = await action.validate('Do something please'); expect(valid).toBe(true); }); it('should reject invalid input', async () =&gt; { const valid = await action.validate('Do nothing'); expect(valid).toBe(false); }); it('should handle action correctly', async () =&gt; { const result = await action.handler({ input: 'Do something cool', runtime, context: {}, }); expect(result.text).toContain('Action completed'); expect(result.data).toBeDefined(); }); }); describe('my-service', () =&gt; { it('should provide service functionality', async () =&gt; { const service = runtime.getService('my-service'); const result = await service.doSomething('test'); expect(result).toBe('Did something with test'); }); }); }); 3. Plugin Publishing‚Äã // package.json { &quot;name&quot;: &quot;@elizaos/plugin-my-plugin&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;My custom ElizaOS plugin&quot;, &quot;main&quot;: &quot;dist/index.js&quot;, &quot;types&quot;: &quot;dist/index.d.ts&quot;, &quot;files&quot;: [&quot;dist&quot;, &quot;README.md&quot;, &quot;LICENSE&quot;], &quot;scripts&quot;: { &quot;build&quot;: &quot;tsc&quot;, &quot;test&quot;: &quot;bun test&quot;, &quot;prepublish&quot;: &quot;bun run build &amp;&amp; bun run test&quot; }, &quot;peerDependencies&quot;: { &quot;@elizaos/core&quot;: &quot;^1.0.0&quot; }, &quot;keywords&quot;: [&quot;elizaos&quot;, &quot;plugin&quot;, &quot;ai&quot;, &quot;agent&quot;], &quot;author&quot;: &quot;Your Name&quot;, &quot;license&quot;: &quot;MIT&quot; } Advanced Patterns‚Äã 1. Plugin Composition‚Äã // Compose multiple plugins into one export function composePlugins(...plugins: Plugin[]): Plugin { return { name: 'composed-plugin', version: '1.0.0', actions: plugins.flatMap((p) =&gt; p.actions || []), providers: plugins.flatMap((p) =&gt; p.providers || []), evaluators: plugins.flatMap((p) =&gt; p.evaluators || []), services: plugins.flatMap((p) =&gt; p.services || []), async onLoad(runtime: IAgentRuntime) { for (const plugin of plugins) { if (plugin.onLoad) { await plugin.onLoad(runtime); } } }, async onUnload(runtime: IAgentRuntime) { for (const plugin of plugins.reverse()) { if (plugin.onUnload) { await plugin.onUnload(runtime); } } }, }; } 2. Plugin Middleware‚Äã // Wrap plugin components with middleware export function withLogging(action: Action): Action { return { ...action, handler: async (params) =&gt; { const start = Date.now(); params.runtime.logger.info(`Starting action ${action.name}`); try { const result = await action.handler(params); params.runtime.logger.info(`Action ${action.name} completed`, { duration: Date.now() - start, }); return result; } catch (error) { params.runtime.logger.error(`Action ${action.name} failed`, { error: error.message, duration: Date.now() - start, }); throw error; } }, }; } 3. Plugin Communication‚Äã // Inter-plugin communication via events export class PluginEventBus { private listeners = new Map&lt;string, Set&lt;Function&gt;&gt;(); emit(event: string, data: any): void { const handlers = this.listeners.get(event); if (handlers) { handlers.forEach((handler) =&gt; { try { handler(data); } catch (error) { console.error(`Event handler error for ${event}:`, error); } }); } } on(event: string, handler: Function): () =&gt; void { if (!this.listeners.has(event)) { this.listeners.set(event, new Set()); } this.listeners.get(event)!.add(handler); // Return unsubscribe function return () =&gt; { this.listeners.get(event)?.delete(handler); }; } } // Usage in plugins export const pluginA: Plugin = { name: 'plugin-a', async onLoad(runtime: IAgentRuntime) { // Emit event runtime.emit('plugin-a:ready', { version: '1.0.0' }); }, }; export const pluginB: Plugin = { name: 'plugin-b', async onLoad(runtime: IAgentRuntime) { // Listen for plugin-a events runtime.on('plugin-a:ready', (data) =&gt; { console.log('Plugin A is ready:', data); }); }, }; Security Considerations‚Äã 1. Sandboxing‚Äã // Run plugins in isolated contexts class PluginSandbox { async runInSandbox(plugin: Plugin, code: string): Promise&lt;any&gt; { const vm = new VM({ timeout: 5000, sandbox: { // Allowed globals console: console, setTimeout: setTimeout, clearTimeout: clearTimeout, // Plugin API runtime: this.createSafeRuntime(), // Denied process: undefined, require: undefined, __dirname: undefined, __filename: undefined, }, }); return vm.run(code); } private createSafeRuntime(): any { return { // Only expose safe methods logger: { info: (...args) =&gt; console.log(...args), error: (...args) =&gt; console.error(...args), }, config: { // Only expose non-sensitive config get: (key: string) =&gt; { if (this.isSafeConfig(key)) { return this.runtime.config[key]; } return undefined; }, }, }; } } 2. Permission System‚Äã // Define plugin permissions interface PluginPermissions { actions?: string[]; // Allowed action names services?: string[]; // Allowed service access events?: string[]; // Allowed event emissions config?: string[]; // Allowed config keys network?: boolean; // Network access filesystem?: boolean; // File system access } class PermissionManager { checkPermission(plugin: Plugin, permission: string, resource?: string): boolean { const permissions = this.getPluginPermissions(plugin.name); switch (permission) { case 'service:access': return permissions.services?.includes(resource!) ?? false; case 'event:emit': return permissions.events?.includes(resource!) ?? false; case 'config:read': return permissions.config?.includes(resource!) ?? false; case 'network:request': return permissions.network ?? false; default: return false; } } } Performance Optimization‚Äã 1. Lazy Loading‚Äã // Load plugins on demand class LazyPluginLoader { private plugins = new Map&lt;string, () =&gt; Promise&lt;Plugin&gt;&gt;(); private loaded = new Map&lt;string, Plugin&gt;(); register(name: string, loader: () =&gt; Promise&lt;Plugin&gt;): void { this.plugins.set(name, loader); } async get(name: string): Promise&lt;Plugin | null&gt; { // Return if already loaded if (this.loaded.has(name)) { return this.loaded.get(name)!; } // Load if registered const loader = this.plugins.get(name); if (loader) { const plugin = await loader(); this.loaded.set(name, plugin); return plugin; } return null; } } 2. Resource Pooling‚Äã // Share resources between plugins class ResourcePool { private pools = new Map&lt;string, any&gt;(); async getConnection(type: string, config: any): Promise&lt;any&gt; { const key = `${type}:${JSON.stringify(config)}`; if (!this.pools.has(key)) { const pool = await this.createPool(type, config); this.pools.set(key, pool); } return this.pools.get(key); } private async createPool(type: string, config: any): Promise&lt;any&gt; { switch (type) { case 'database': return new DatabasePool(config); case 'redis': return new RedisPool(config); case 'http': return new HttpClientPool(config); default: throw new Error(`Unknown pool type: ${type}`); } } } Best Practices‚Äã Single Responsibility: Each plugin should focus on one feature areaError Handling: Always handle errors gracefully with fallbacksResource Management: Clean up resources in onUnloadConfiguration Validation: Validate all configuration at load timeDocumentation: Document all actions, providers, and servicesTesting: Write comprehensive tests for all plugin componentsVersioning: Follow semantic versioning for pluginsPerformance: Consider caching and lazy loading for efficiency Related Documentation‚Äã Core Concepts - Fundamental ElizaOS conceptsState Management - Plugin state managementActions API - Detailed Actions API","keywords":"","version":"1.0.17"},{"title":"State Management Architecture","type":0,"sectionRef":"#","url":"/docs/technical/architecture/state-management","content":"State Management Architecture ElizaOS implements a sophisticated state management system that handles dynamic state composition, memory persistence, and efficient caching across multiple agents and platforms. Overview‚Äã The state management system is built around three core concepts: State Composition - Dynamic aggregation of context from multiple providersMemory System - Persistent storage with semantic search capabilitiesCaching Layer - Efficient state retrieval and composition optimization State Architecture‚Äã State Interface‚Äã interface State { values: { [key: string]: any }; // Direct state values data: { [key: string]: any }; // Structured/provider data text: string; // Textual context summary [key: string]: any; // Dynamic properties } The state object serves as the primary context container that agents use to make decisions and generate responses. State Composition Process‚Äã State composition follows a structured pipeline: Provider Registration - Providers register with the runtime during initializationContext Assembly - State is dynamically composed by aggregating provider outputsCaching - Composed states are cached by message ID for performanceTemplate Rendering - State is used to render prompt templates Provider Aggregation‚Äã // packages/core/src/runtime.ts:composeState() async composeState( message: Memory, additionalKeys?: { [key: string]: string } ): Promise&lt;State&gt; { // 1. Check cache for existing state const cachedState = this.stateCache.get(message.id); if (cachedState) return cachedState; // 2. Initialize base state const state: State = { values: {}, data: {}, text: '' }; // 3. Aggregate provider data const providerOutputs = await Promise.all( this.providers .filter(provider =&gt; shouldIncludeProvider(provider, message)) .sort((a, b) =&gt; (a.position || 0) - (b.position || 0)) .map(provider =&gt; provider.get(this, message, state)) ); // 4. Merge provider outputs into state for (const output of providerOutputs) { if (output?.text) state.text += output.text + '\\n'; if (output?.data) Object.assign(state.data, output.data); if (output?.values) Object.assign(state.values, output.values); } // 5. Cache and return composed state this.stateCache.set(message.id, state); return state; } Provider Position System‚Äã Providers are executed in order based on their position property: Low numbers (0-100): Base context (character, world state)Medium numbers (100-500): Dynamic context (recent messages, entities)High numbers (500+): Real-time context (current conversation, immediate state) Memory System‚Äã Memory Types‚Äã ElizaOS supports multiple memory types for different use cases: enum MemoryType { DOCUMENT = 'document', // Complete documents or large text chunks FRAGMENT = 'fragment', // Document segments for embedding/search MESSAGE = 'message', // Conversational messages DESCRIPTION = 'description', // Descriptive information about entities CUSTOM = 'custom', // Extension point for custom types } Memory Structure‚Äã interface Memory { id: UUID; entityId: UUID; // User/agent who created this memory worldId?: UUID; // World/server context roomId?: UUID; // Room/channel context content: Content; // Text content with metadata type: MemoryType; metadata?: { scope: 'shared' | 'private' | 'room'; source?: string; // Origin platform/service timestamp: number; sequence?: number; // Ordering within conversation [key: string]: any; // Custom metadata }; } Memory Operations‚Äã Creating Memories‚Äã // Store a new memory await runtime.memory.create({ entityId: message.entityId, worldId: message.worldId, roomId: message.roomId, content: { text: 'Important information to remember', metadata: { type: 'fact' }, }, type: MemoryType.DESCRIPTION, metadata: { scope: 'shared', source: 'discord', timestamp: Date.now(), }, }); Retrieving Memories‚Äã // Search memories by content similarity const memories = await runtime.memory.searchMemoriesByEmbedding(embedding, { match_threshold: 0.8, count: 10, tableName: 'memories', worldId: message.worldId, roomId: message.roomId, }); // Get recent memories in a room const recent = await runtime.memory.getMemories({ roomId: message.roomId, count: 20, unique: false, }); Memory Scoping‚Äã ElizaOS implements three memory scoping levels: Private (scope: 'private') - Only accessible to the creating agentRoom (scope: 'room') - Shared within a specific room/channelShared (scope: 'shared') - Globally accessible across the world Semantic Search‚Äã Memory retrieval uses vector embeddings for semantic search: // packages/core/src/memory.ts async searchMemoriesByEmbedding( embedding: number[], options: { match_threshold?: number; // Similarity threshold (0-1) count?: number; // Maximum results tableName: string; // Target memory table worldId?: UUID; // World context filter roomId?: UUID; // Room context filter } ): Promise&lt;Memory[]&gt; Caching System‚Äã State Cache‚Äã The runtime maintains an in-memory cache of composed states: // packages/core/src/runtime.ts private stateCache = new Map&lt;UUID, State&gt;(); // Cache management private pruneStateCache(): void { if (this.stateCache.size &gt; 1000) { // Remove oldest entries when cache grows too large const entries = Array.from(this.stateCache.entries()); entries.slice(0, 500).forEach(([key]) =&gt; { this.stateCache.delete(key); }); } } Cache Invalidation‚Äã State cache is automatically managed: Cache Hit: Returns cached state if available for message IDCache Miss: Composes new state and caches resultCache Pruning: Automatic cleanup when cache size exceeds limitsManual Invalidation: Cache can be cleared during runtime operations Database Integration‚Äã Database Adapter Pattern‚Äã ElizaOS uses the IDatabaseAdapter interface to abstract database operations: interface IDatabaseAdapter { // Memory operations createMemory(memory: Memory, tableName: string): Promise&lt;void&gt;; getMemories(params: GetMemoriesParams): Promise&lt;Memory[]&gt;; searchMemoriesByEmbedding(embedding: number[], options: SearchOptions): Promise&lt;Memory[]&gt;; // Entity operations createEntity(entity: Entity): Promise&lt;boolean&gt;; getEntity(params: { id: UUID }): Promise&lt;Entity | null&gt;; // World operations createWorld(world: World): Promise&lt;boolean&gt;; getWorlds(params: { entityId: UUID }): Promise&lt;World[]&gt;; // Room operations createRoom(room: Room): Promise&lt;boolean&gt;; getRoom(params: { id: UUID }): Promise&lt;Room | null&gt;; } Supported Databases‚Äã PostgreSQL - Production database with full feature supportPGLite - Lightweight SQLite-compatible database for developmentCustom Adapters - Extensible adapter system for other databases Best Practices‚Äã State Management‚Äã Provider Positioning - Use appropriate position values to control execution orderEfficient Providers - Keep provider logic lightweight and fastState Immutability - Don't modify state objects after compositionCache Awareness - Consider caching behavior when designing providers Memory Management‚Äã Appropriate Scoping - Choose correct scope level for memory visibilityMetadata Usage - Include relevant metadata for filtering and organizationMemory Types - Use specific memory types for semantic organizationSearch Optimization - Structure content for effective semantic search Performance Considerations‚Äã Provider Efficiency - Minimize database queries in providersBatch Operations - Use batch operations for multiple memory writesEmbedding Caching - Cache embeddings when possible to avoid recomputationMemory Cleanup - Implement periodic cleanup of old memories Error Handling‚Äã State Composition Errors‚Äã try { const state = await runtime.composeState(message); } catch (error) { console.error('State composition failed:', error); // Fallback to minimal state return { values: {}, data: {}, text: message.content.text || '', }; } Memory Operation Errors‚Äã try { await runtime.memory.create(memory); } catch (error) { if (error.code === 'DUPLICATE_KEY') { // Handle duplicate memory } else { // Log and continue console.error('Memory creation failed:', error); } } Integration Examples‚Äã Custom Provider‚Äã const customProvider: Provider = { get: async (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; { // Fetch relevant context data const context = await fetchCustomContext(message); return { text: `Custom context: ${context.summary}`, data: { customData: context }, values: { hasCustomContext: true }, }; }, }; // Register provider runtime.registerProvider(customProvider); Memory-Backed Provider‚Äã const memoryProvider: Provider = { get: async (runtime: IAgentRuntime, message: Memory) =&gt; { // Search for relevant memories const memories = await runtime.memory.searchMemoriesByEmbedding( await runtime.embed(message.content.text), { match_threshold: 0.7, count: 5, tableName: 'memories', roomId: message.roomId, } ); return { text: memories.map((m) =&gt; m.content.text).join('\\n'), data: { relevantMemories: memories }, }; }, }; This state management system provides the foundation for ElizaOS's intelligent agent behavior, enabling dynamic context composition, persistent memory, and efficient state handling across complex multi-agent environments.","keywords":"","version":"1.0.17"},{"title":"Creating Plugins","type":0,"sectionRef":"#","url":"/docs/technical/development/creating-plugins","content":"Creating Plugins This guide shows you how to use the ElizaOS CLI to quickly create, test, and publish plugins. Plugins are the primary way to extend ElizaOS functionality by adding new actions, providers, evaluators, services, and more to your agents. Quick Start‚Äã The fastest way to create a new plugin is using the ElizaOS CLI: # Create a new plugin (automatically adds &quot;plugin-&quot; prefix) elizaos create my-awesome-feature -t plugin # Navigate to your new plugin cd plugin-my-awesome-feature # Start development elizaos dev This creates a fully functional plugin with example implementations and tests. Plugin Structure‚Äã A typical plugin follows this directory structure: plugin-name/ ‚îú‚îÄ‚îÄ src/ ‚îÇ ‚îú‚îÄ‚îÄ index.ts # Main plugin export ‚îÇ ‚îú‚îÄ‚îÄ actions/ # Action handlers ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ myAction.ts ‚îÇ ‚îú‚îÄ‚îÄ providers/ # Context providers ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ myProvider.ts ‚îÇ ‚îú‚îÄ‚îÄ evaluators/ # Message evaluators ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ myEvaluator.ts ‚îÇ ‚îú‚îÄ‚îÄ services/ # Background services ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ myService.ts ‚îÇ ‚îî‚îÄ‚îÄ __tests__/ # Tests ‚îÇ ‚îî‚îÄ‚îÄ actions.test.ts ‚îú‚îÄ‚îÄ package.json ‚îú‚îÄ‚îÄ tsconfig.json ‚îú‚îÄ‚îÄ README.md ‚îî‚îÄ‚îÄ images/ # Required for publishing ‚îú‚îÄ‚îÄ logo.jpg # 400x400px square (max 500KB) ‚îî‚îÄ‚îÄ banner.jpg # 1280x640px banner (max 1MB) Core Components‚Äã Plugin Definition‚Äã Every plugin must export a default object implementing the Plugin interface: // src/index.ts import { Plugin } from '@elizaos/core'; import { myAction } from './actions/myAction'; import { myProvider } from './providers/myProvider'; import { myEvaluator } from './evaluators/myEvaluator'; import { MyService } from './services/myService'; export default { name: 'my-plugin', description: 'Adds awesome functionality to ElizaOS', // Optional initialization init: async (config, runtime) =&gt; { console.log('Plugin initializing with config:', config); // Perform any setup needed }, // Register components actions: [myAction], providers: [myProvider], evaluators: [myEvaluator], services: [MyService], // Note: Services are class constructors // Optional configuration schema config: { apiKey: { type: 'string', description: 'API key for external service', required: true, }, }, } satisfies Plugin; Actions‚Äã Actions define how your plugin responds to user messages: // src/actions/myAction.ts import { Action, IAgentRuntime, State, Memory } from '@elizaos/core'; export const myAction: Action = { name: 'MY_AWESOME_ACTION', similes: ['AWESOME_ACTION', 'DO_AWESOME'], // Alternative names description: 'Performs an awesome action', // Validate if this action should handle the message validate: async (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; { const text = message.content.text.toLowerCase(); return text.includes('do something awesome'); }, // Handle the action handler: async (runtime, message, state, options, callback) =&gt; { try { // Perform your action logic const result = await performAwesomeTask(message.content.text); // Generate response const response = { text: `I did something awesome: ${result}`, action: 'MY_AWESOME_ACTION', data: { result }, }; // Call callback if provided if (callback) { await callback(response); } return response; } catch (error) { console.error('Action failed:', error); return { text: 'Sorry, I encountered an error.', error: error.message, }; } }, // Provide examples for the AI examples: [ [ { user: '{{user1}}', content: { text: 'Can you do something awesome?' }, }, { user: '{{agent}}', content: { text: &quot;I'll do something awesome for you!&quot;, action: 'MY_AWESOME_ACTION', }, }, ], ], }; Providers‚Äã Providers supply dynamic context to the agent: // src/providers/myProvider.ts import { Provider, IAgentRuntime, State, Memory } from '@elizaos/core'; export const myProvider: Provider = { name: 'MY_DATA_PROVIDER', description: 'Provides awesome contextual data', get: async (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; { try { // Fetch or compute relevant data const data = await fetchRelevantData(message.userId); return { text: `User data: ${JSON.stringify(data)}`, values: { userData: data, timestamp: Date.now(), }, }; } catch (error) { console.error('Provider error:', error); return { text: 'Unable to fetch data' }; } }, }; Evaluators‚Äã Evaluators analyze messages and can influence agent behavior: // src/evaluators/myEvaluator.ts import { Evaluator, IAgentRuntime, Memory } from '@elizaos/core'; export const myEvaluator: Evaluator = { name: 'SENTIMENT_EVALUATOR', description: 'Analyzes message sentiment', // Only evaluate messages that meet criteria validate: async (runtime: IAgentRuntime, message: Memory) =&gt; { return message.content.text.length &gt; 10; }, // Perform evaluation handler: async (runtime, message) =&gt; { const sentiment = analyzeSentiment(message.content.text); // Store evaluation result await runtime.createMemory({ ...message, content: { ...message.content, evaluations: { sentiment: sentiment, }, }, }); return sentiment; }, }; Services‚Äã Services provide shared functionality and background tasks: // src/services/myService.ts import { Service, IAgentRuntime } from '@elizaos/core'; export class MyService extends Service { static serviceType = 'my-awesome-service'; capabilityDescription = 'Provides awesome background functionality'; private interval: NodeJS.Timer | null = null; // Factory method to create service static async start(runtime: IAgentRuntime): Promise&lt;MyService&gt; { const service = new MyService(runtime); await service.initialize(); return service; } private async initialize(): Promise&lt;void&gt; { // Set up background tasks this.interval = setInterval(() =&gt; { this.performBackgroundTask(); }, 60000); // Every minute } async stop(): Promise&lt;void&gt; { // Clean up resources if (this.interval) { clearInterval(this.interval); this.interval = null; } } private async performBackgroundTask(): Promise&lt;void&gt; { // Do something in the background console.log('Performing background task...'); } // Public methods for other components to use async getData(key: string): Promise&lt;any&gt; { // Return data from service return this.cache.get(key); } } Configuration‚Äã package.json‚Äã Your plugin's package.json must include specific metadata: { &quot;name&quot;: &quot;@yourorg/plugin-awesome&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;Adds awesome functionality to ElizaOS&quot;, &quot;main&quot;: &quot;dist/index.js&quot;, &quot;types&quot;: &quot;dist/index.d.ts&quot;, &quot;packageType&quot;: &quot;plugin&quot;, &quot;agentConfig&quot;: { &quot;pluginType&quot;: &quot;elizaos:plugin:1.0.0&quot;, &quot;pluginParameters&quot;: { &quot;API_KEY&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;API key for the awesome service&quot;, &quot;required&quot;: true }, &quot;WEBHOOK_URL&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;Webhook URL for notifications&quot;, &quot;required&quot;: false } } }, &quot;scripts&quot;: { &quot;build&quot;: &quot;tsup&quot;, &quot;dev&quot;: &quot;tsup --watch&quot;, &quot;test&quot;: &quot;vitest run&quot; }, &quot;peerDependencies&quot;: { &quot;@elizaos/core&quot;: &quot;^1.0.0&quot; }, &quot;devDependencies&quot;: { &quot;@elizaos/core&quot;: &quot;^1.0.0&quot;, &quot;tsup&quot;: &quot;^8.0.0&quot;, &quot;typescript&quot;: &quot;^5.0.0&quot;, &quot;vitest&quot;: &quot;^1.0.0&quot; } } TypeScript Configuration‚Äã Use a standard TypeScript configuration: { &quot;compilerOptions&quot;: { &quot;target&quot;: &quot;ES2020&quot;, &quot;module&quot;: &quot;commonjs&quot;, &quot;lib&quot;: [&quot;ES2020&quot;], &quot;outDir&quot;: &quot;./dist&quot;, &quot;rootDir&quot;: &quot;./src&quot;, &quot;strict&quot;: true, &quot;esModuleInterop&quot;: true, &quot;skipLibCheck&quot;: true, &quot;forceConsistentCasingInFileNames&quot;: true, &quot;declaration&quot;: true, &quot;declarationMap&quot;: true, &quot;sourceMap&quot;: true }, &quot;include&quot;: [&quot;src/**/*&quot;], &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;, &quot;**/*.test.ts&quot;] } Testing‚Äã ElizaOS provides comprehensive testing capabilities: Unit Tests‚Äã Test individual components: // src/__tests__/actions.test.ts import { describe, it, expect, vi } from 'vitest'; import { myAction } from '../actions/myAction'; import { createMockRuntime } from '@elizaos/core/test-utils'; describe('myAction', () =&gt; { it('should validate messages containing trigger phrase', async () =&gt; { const runtime = createMockRuntime(); const message = { content: { text: 'Please do something awesome' }, userId: 'test-user', roomId: 'test-room', agentId: 'test-agent', }; const isValid = await myAction.validate(runtime, message); expect(isValid).toBe(true); }); it('should handle action successfully', async () =&gt; { const runtime = createMockRuntime(); const message = { content: { text: 'Do something awesome now!' }, userId: 'test-user', roomId: 'test-room', agentId: 'test-agent', }; const callback = vi.fn(); const result = await myAction.handler(runtime, message, {}, {}, callback); expect(result.text).toContain('awesome'); expect(callback).toHaveBeenCalled(); }); }); End-to-End Tests‚Äã Test the plugin in a real agent environment: // src/__tests__/e2e.test.ts import { TestSuite } from '@elizaos/core'; export const e2eTestSuite: TestSuite = { name: 'plugin_e2e_tests', description: 'End-to-end tests for the awesome plugin', tests: [ { name: 'complete_workflow_test', description: 'Tests the complete plugin workflow', fn: async (runtime) =&gt; { // Send a message that triggers the action const response = await runtime.processMessage({ content: { text: 'Do something awesome please' }, userId: 'e2e-test-user', roomId: 'e2e-test-room', }); // Verify the response if (!response.includes('awesome')) { throw new Error('Expected awesome response'); } // Verify service is running const service = runtime.getService('my-awesome-service'); if (!service) { throw new Error('Service not initialized'); } }, }, ], }; // Add to plugin definition export default { // ... other plugin config tests: [e2eTestSuite], }; Running Tests‚Äã # Run unit tests npm test # Run with elizaos test command (includes E2E) elizaos test # Run specific test type elizaos test -t component # Unit tests only elizaos test -t e2e # E2E tests only Publishing‚Äã Prerequisites‚Äã npm account: Create at npmjs.comGitHub repository: Create a public repoRequired images: images/logo.jpg - 400x400px square logo (max 500KB)images/banner.jpg - 1280x640px banner image (max 1MB) Publishing Steps‚Äã Authenticate with npm: npm login Add GitHub topic: Go to your GitHub repositoryAdd the topic elizaos-plugins Test your plugin: # Run all tests npm test # Test the publish process elizaos publish --test Publish: # First time publishing elizaos publish # Updates (after initial publish) npm version patch npm publish git push origin main --tags Post-Publishing‚Äã Your plugin will appear in: npm registry: https://www.npmjs.com/package/@yourorg/plugin-nameElizaOS Plugin Directory: Automatically indexed from GitHubAgent configurations can reference it: &quot;plugins&quot;: [&quot;@yourorg/plugin-name&quot;] Best Practices‚Äã Code Quality‚Äã Complete implementations: Never use stubs or incomplete codeError handling: Always handle errors gracefullyResource cleanup: Implement proper cleanup in servicesType safety: Use TypeScript strictlyDocumentation: Document all exports and parameters Performance‚Äã Cache expensive operations: Use runtime cachingAsync operations: Don't block the event loopBatch operations: Group related operationsLazy loading: Load resources only when needed Security‚Äã Validate inputs: Always validate user inputsSanitize outputs: Prevent injection attacksSecure credentials: Never hardcode secretsRate limiting: Implement rate limits for external APIs Testing‚Äã High coverage: Aim for &gt;80% test coverageEdge cases: Test error conditions and edge casesIntegration tests: Test with real agent runtimePerformance tests: Monitor resource usage Common Patterns‚Äã Using Configuration‚Äã Access plugin configuration in your components: export const configuredAction: Action = { name: 'CONFIGURED_ACTION', handler: async (runtime, message, state, options) =&gt; { // Access plugin config const apiKey = runtime.getSetting('API_KEY'); if (!apiKey) { throw new Error('API_KEY not configured'); } // Use the configuration const result = await callExternalAPI(apiKey, message.content.text); return { text: result }; }, }; Sharing Data Between Components‚Äã Use services to share data: // In an action const myService = runtime.getService('my-awesome-service') as MyService; const cachedData = await myService.getData('user-preferences'); // In a provider const myService = runtime.getService('my-awesome-service') as MyService; return { text: 'User preferences loaded', values: await myService.getData('user-preferences'), }; Event Handling‚Äã React to agent events: export default { name: 'event-plugin', events: { onMessageReceived: async (runtime, message) =&gt; { console.log('Message received:', message); }, onActionComplete: async (runtime, action, result) =&gt; { console.log('Action completed:', action, result); }, }, } satisfies Plugin; Troubleshooting‚Äã Common Issues‚Äã Plugin not loading: Check package.json has correct packageType: &quot;plugin&quot;Verify main export is defaultCheck for circular dependencies Actions not triggering: Verify validate returns true for test messagesCheck action name is uniqueEnable debug logging: DEBUG=eliza:* Service errors: Ensure static serviceType is definedImplement start() factory methodCheck service is in plugin's services array Publishing fails: Verify npm authenticationCheck image sizes and formatsEnsure GitHub repo is public with correct topic Next Steps‚Äã Explore the Plugin API ReferenceBrowse example pluginsJoin the ElizaOS Discord for helpContribute to the plugin ecosystem","keywords":"","version":"1.0.17"},{"title":"Frequently Asked Questions (Technical)","type":0,"sectionRef":"#","url":"/docs/technical/faq","content":"Frequently Asked Questions (Technical) Technical questions and in-depth answers for developers working with ElizaOS. üèóÔ∏è Architecture &amp; Design‚Äã Q: Why does ElizaOS use UUID swizzling for rooms?‚Äã ElizaOS implements deterministic UUID generation where each agent sees the same physical room with a different UUID. This design enables: Memory Isolation: Each agent's memories are completely isolatedCross-Agent Communication: Agents can still reference the same physical spaceConsistent Identity: Platform IDs remain stable while internal IDs are agent-specific // Each agent generates its own view of the room const roomId = generateDeterministicUUID(agentId, platformRoomId); Q: How does the plugin loading order affect system behavior?‚Äã Plugin loading order is critical because: Service Registration: Earlier plugins register services that later plugins depend onHandler Priority: First-loaded plugins have higher priority for handling messagesProvider Precedence: Earlier providers override later ones for the same data Loading order: // 1. Core infrastructure (database) // 2. AI providers (text-only first, then embedding-capable) // 3. Platform adapters // 4. Feature plugins // 5. Bootstrap (default handlers - always last) Q: What's the difference between Actions, Providers, and Evaluators?‚Äã Component\tPurpose\tExecution\tExampleActions\tPerform discrete behaviors\tOn-demand when detected\tSend email, create post Providers\tSupply contextual information\tEvery message for context\tTime, weather, user data Evaluators\tPost-process interactions\tAfter response generation\tSentiment analysis, fact extraction Q: How does memory consolidation work?‚Äã Memory consolidation follows a multi-stage process: // 1. Short-term buffer (last N messages) // 2. Importance evaluation // 3. Embedding generation for important memories // 4. Long-term storage with decay factor // 5. Periodic consolidation of similar memories Memories are scored based on: Emotional salienceInformation densityRepetition frequencyExplicit importance markers üíª Development‚Äã Q: Monorepo vs Standalone - when to use which?‚Äã Use Monorepo Development when: Contributing to ElizaOS coreDeveloping plugins for distributionNeed to modify core functionalityTesting against latest changes Use Standalone Projects when: Building production agentsCreating private/proprietary featuresWant stable, versioned dependenciesDeploying to production Q: How do I properly handle async operations in plugins?‚Äã Always use proper error handling and cleanup: class MyPlugin implements Plugin { private cleanup: (() =&gt; Promise&lt;void&gt;)[] = []; async initialize(runtime: AgentRuntime): Promise&lt;void&gt; { // Setup resources const connection = await createConnection(); this.cleanup.push(() =&gt; connection.close()); // Register handlers with error boundaries runtime.on('message', this.wrapHandler(this.handleMessage)); } private wrapHandler(handler: Function) { return async (...args: any[]) =&gt; { try { await handler.apply(this, args); } catch (error) { console.error('Handler error:', error); // Don't let plugin errors crash the runtime } }; } async shutdown(): Promise&lt;void&gt; { // Clean up in reverse order for (const cleanupFn of this.cleanup.reverse()) { await cleanupFn(); } } } Q: What's the proper way to extend the database schema?‚Äã Use migrations with your plugin: // plugins/my-plugin/src/migrations/001_initial.sql CREATE TABLE IF NOT EXISTS my_plugin_data ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), agent_id UUID NOT NULL REFERENCES agents(id), data JSONB NOT NULL, created_at TIMESTAMP DEFAULT NOW() ); CREATE INDEX idx_my_plugin_agent ON my_plugin_data(agent_id); Then in your plugin: async initialize(runtime: AgentRuntime): Promise&lt;void&gt; { const db = runtime.getService&lt;IDatabaseService&gt;('database'); await db.migrate(__dirname + '/migrations'); } Q: How do I implement custom model providers?‚Äã Implement the IModelProvider interface: class CustomModelProvider implements IModelProvider { async generateText(prompt: string, options: ModelOptions): Promise&lt;string&gt; { // Your implementation } async generateEmbedding(text: string): Promise&lt;number[]&gt; { // Return embedding vector } async isAvailable(): Promise&lt;boolean&gt; { // Check if provider is configured } } // Register in plugin const provider = new CustomModelProvider(); runtime.registerModelProvider('custom', provider); üîß Performance &amp; Optimization‚Äã Q: How can I optimize memory searches?‚Äã Use Embeddings Efficiently: // Cache embeddings for frequently searched queries const embeddingCache = new LRUCache&lt;string, number[]&gt;(1000); Implement Pagination: // Don't load all memories at once const memories = await db.searchMemories(query, { limit: 50, offset: page * 50, }); Use Indexes: CREATE INDEX idx_memories_embedding ON memories USING ivfflat (embedding vector_cosine_ops); Q: What's the recommended way to handle rate limiting?‚Äã Implement exponential backoff with jitter: class RateLimiter { private attempts = 0; async execute&lt;T&gt;(fn: () =&gt; Promise&lt;T&gt;, maxAttempts = 3): Promise&lt;T&gt; { try { const result = await fn(); this.attempts = 0; return result; } catch (error) { if (this.isRateLimitError(error) &amp;&amp; this.attempts &lt; maxAttempts) { this.attempts++; const delay = Math.min(1000 * Math.pow(2, this.attempts), 30000); const jitter = Math.random() * delay * 0.1; await sleep(delay + jitter); return this.execute(fn, maxAttempts); } throw error; } } } Q: How do I profile and optimize agent performance?‚Äã Use built-in performance monitoring: // Enable performance tracking runtime.enablePerfMonitoring({ sampleRate: 0.1, // Sample 10% of requests slowThreshold: 1000, // Log requests over 1s }); // Add custom metrics runtime.metrics.histogram('custom.operation.duration').record(duration); runtime.metrics.counter('custom.operation.count').increment(); üîê Security‚Äã Q: How do I safely store sensitive data?‚Äã Never store sensitive data in character filesUse environment variables for secretsEncrypt data at rest: class SecureStorage { async store(key: string, value: any): Promise&lt;void&gt; { const encrypted = await encrypt(JSON.stringify(value), this.key); await this.db.set(key, encrypted); } async retrieve(key: string): Promise&lt;any&gt; { const encrypted = await this.db.get(key); const decrypted = await decrypt(encrypted, this.key); return JSON.parse(decrypted); } } Q: What security considerations exist for plugin development?‚Äã Input Validation: Always validate external inputSQL Injection: Use parameterized queriesResource Limits: Implement timeouts and memory limitsSandboxing: Don't use eval() or dynamic code executionPermissions: Request minimum necessary permissions üêõ Debugging &amp; Troubleshooting‚Äã Q: How do I debug memory-related issues?‚Äã Enable debug logging for memory operations: // Set in environment LOG_LEVEL = debug; DEBUG_MEMORY = true; // Or programmatically runtime.setLogLevel('debug'); runtime.memory.enableDebugMode(); Use memory inspection tools: // Dump memory state const memoryState = await runtime.memory.debugDump(); console.log(JSON.stringify(memoryState, null, 2)); // Analyze memory usage const stats = await runtime.memory.getStatistics(); Q: Why are my plugins not loading?‚Äã Common issues and solutions: Check Plugin Structure: // Plugin must export default export default { name: 'my-plugin', actions: [...], providers: [...], // ... }; Verify Dependencies: # Check for missing dependencies bun pm ls Enable Plugin Debug Logging: DEBUG_PLUGINS=true bun start Q: How do I handle plugin conflicts?‚Äã Namespace your actions: actions: [ { name: 'MY_PLUGIN_ACTION', ... } ] Use service discovery: const service = runtime.hasService('myService') ? runtime.getService('myService') : this.createDefaultService(); Implement feature detection: if (runtime.supports('feature-name')) { // Use feature } üöÄ Deployment &amp; Scaling‚Äã Q: How do I horizontally scale ElizaOS agents?‚Äã Stateless Agents: Keep agents stateless with shared backendDistributed Cache: Use Redis for shared stateDatabase Pooling: Configure connection poolingLoad Balancing: Use sticky sessions for websockets // Example Redis configuration const redis = new Redis.Cluster([ { host: 'redis-1', port: 6379 }, { host: 'redis-2', port: 6379 }, { host: 'redis-3', port: 6379 }, ]); Q: How do I monitor agents in production?‚Äã Implement comprehensive monitoring: // Health check endpoint app.get('/health', async (req, res) =&gt; { const health = { status: 'healthy', timestamp: new Date().toISOString(), services: { database: await db.ping(), memory: runtime.memory.getHealth(), plugins: runtime.getPluginHealth(), }, metrics: { uptime: process.uptime(), memory: process.memoryUsage(), responses: await metrics.getResponseStats(), }, }; res.json(health); }); Q: What's the best way to handle agent updates?‚Äã Use blue-green deployment: # 1. Deploy new version to staging docker-compose -f docker-compose.staging.yml up -d # 2. Test new version bun run test:e2e -- --env=staging # 3. Switch traffic gradually # Update load balancer to route 10%, 50%, then 100% # 4. Monitor for errors bun run monitor:errors Q: What's the recommended production deployment?‚Äã # docker-compose.yml for production version: '3.8' services: agent: image: elizaos/agent:latest deploy: replicas: 3 environment: - DATABASE_URL=postgresql://... - REDIS_URL=redis://... depends_on: - postgres - redis postgres: image: postgres:15-alpine volumes: - postgres_data:/var/lib/postgresql/data redis: image: redis:7-alpine command: redis-server --appendonly yes üìö Advanced Topics‚Äã Q: How do I implement custom memory consolidation strategies?‚Äã class CustomConsolidator implements IMemoryConsolidator { async consolidate(memories: Memory[]): Promise&lt;Memory[]&gt; { // Group similar memories const groups = this.groupBySimilarity(memories); // Create summary memories const consolidated = groups.map((group) =&gt; ({ type: 'consolidated', content: this.summarize(group), sources: group.map((m) =&gt; m.id), importance: Math.max(...group.map((m) =&gt; m.importance)), })); return consolidated; } } Q: How do I implement multi-modal agents?‚Äã class MultiModalAgent extends BaseAgent { async processMessage(message: Message): Promise&lt;void&gt; { // Handle text if (message.content.text) { const textResponse = await this.generateTextResponse(message); await this.send(textResponse); } // Handle images if (message.content.attachments?.some((a) =&gt; a.type === 'image')) { const imageAnalysis = await this.analyzeImages(message.content.attachments); const response = await this.generateResponseFromImage(imageAnalysis); await this.send(response); } // Handle audio if (message.content.attachments?.some((a) =&gt; a.type === 'audio')) { const transcript = await this.transcribeAudio(message.content.attachments); const response = await this.generateAudioResponse(transcript); await this.sendAudio(response); } } } Q: How do I implement custom conversation flows?‚Äã class ConversationFlow { private state: Map&lt;string, any&gt; = new Map(); private steps: FlowStep[] = []; async execute(userId: string, input: any): Promise&lt;FlowResult&gt; { const currentStep = this.getCurrentStep(userId); const validation = await currentStep.validate(input); if (!validation.valid) { return { type: 'retry', message: validation.error, step: currentStep, }; } // Store step data this.state.set(`${userId}.${currentStep.id}`, input); // Check if flow is complete if (currentStep.isLast) { return { type: 'complete', data: this.getFlowData(userId), }; } // Advance to next step const nextStep = currentStep.getNext(input); return { type: 'continue', step: nextStep, message: nextStep.prompt, }; } } Q: Can I implement custom transport layers?‚Äã Yes, implement the ITransport interface: class CustomTransport implements ITransport { async start(): Promise&lt;void&gt; { /* ... */ } async stop(): Promise&lt;void&gt; { /* ... */ } async send(message: Message): Promise&lt;void&gt; { /* ... */ } on(event: string, handler: Function): void { // Handle platform events } } üÜò Getting Help‚Äã Technical Resources‚Äã Core API Documentation - Core API referenceActions API Documentation - Actions API referenceGitHub Discussions - Technical discussionsDiscord #dev Channel - Developer chatExample Plugins - Reference implementations Debugging Tools‚Äã Runtime Inspector: bun run inspectMemory Analyzer: bun run analyze-memoryPerformance Profiler: bun run profilePlugin Validator: bun run validate-pluginMessage Tracer: bun run trace-messagesDatabase Query Analyzer: bun run analyze-queries Development Workflow Tips‚Äã Use TypeScript strict mode for better error catchingSet up pre-commit hooks to run tests and lintingUse dependency injection for better testabilityImplement circuit breakers for external servicesUse structured logging with correlation IDsWrite integration tests for complex workflowsMonitor memory usage during developmentUse feature flags for gradual rollouts Performance Benchmarks‚Äã Metric\tTarget\tGood\tNeeds ImprovementResponse Time\tUnder 200ms\tUnder 500ms\tOver 1000ms Memory Usage\tUnder 100MB\tUnder 500MB\tOver 1GB Concurrent Users\t1000+\t100+\tUnder 50 Message Throughput\t100/s\t50/s\tUnder 10/s Plugin Load Time\tUnder 1s\tUnder 3s\tOver 5s Common Error Codes‚Äã Code\tMeaning\tSolutionE001\tPlugin load failure\tCheck plugin structure E002\tMemory corruption\tRebuild memory index E003\tService unavailable\tCheck service health E004\tRate limit exceeded\tImplement backoff E005\tInvalid character\tValidate character.json ü§ù Contributing &amp; Community‚Äã Q: How do I contribute to ElizaOS core?‚Äã Fork the repository and create a feature branchRead the contributing guide at /CONTRIBUTING.mdFollow the RFC process for major changesWrite comprehensive tests for new featuresUpdate documentation for any API changesSubmit a pull request with detailed description Q: What's the process for proposing new features?‚Äã Search existing RFCs in GitHub DiscussionsCreate a detailed proposal with: Problem statementProposed solutionAlternative approachesImplementation planBreaking changes (if any) Gather community feedbackImplement based on consensus Q: How do I create a plugin for the marketplace?‚Äã // 1. Use the plugin template bunx create-eliza-plugin my-awesome-plugin // 2. Implement your plugin following patterns // 3. Add comprehensive tests // 4. Create documentation // 5. Publish to npm bun publish // 6. Submit to marketplace // Create PR to add your plugin to the registry üé§ Office Hours: Join our weekly developer Q&amp;A every Thursday at 2 PM PST üí¨ Discord: Get help in #dev-helpüìù GitHub: Open issues and discussionsüìß Email: Technical questions to dev-support@elizaos.ai","keywords":"","version":"1.0.17"},{"title":"Discord Technical Integration","type":0,"sectionRef":"#","url":"/docs/technical/integrations/discord-technical","content":"Discord Technical Integration Complete technical guide for integrating ElizaOS with Discord, including advanced features, event handling, and custom implementations. Architecture Overview‚Äã Discord Service Architecture‚Äã interface DiscordService extends Service { client: Client; voiceManager: VoiceManager; messageHandler: MessageHandler; eventEmitter: EventEmitter; } Event Flow‚Äã Implementation Guide‚Äã 1. Service Registration‚Äã import { DiscordService } from '@elizaos/plugin-discord'; // Register the Discord service runtime.registerService( new DiscordService({ botToken: process.env.DISCORD_API_TOKEN, applicationId: process.env.DISCORD_APPLICATION_ID, intents: [ GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildVoiceStates, ], }) ); 2. Custom Event Handlers‚Äã // Custom message handler class CustomDiscordHandler extends MessageHandler { async handleMessage(message: Message): Promise&lt;void&gt; { // Pre-processing if (message.author.bot) return; // Custom logic const context = await this.buildContext(message); const response = await this.runtime.process(context); // Post-processing await this.sendResponse(message, response); } private async buildContext(message: Message): Promise&lt;Context&gt; { return { userId: message.author.id, roomId: message.channelId, worldId: message.guildId, content: message.content, attachments: message.attachments.map((a) =&gt; ({ url: a.url, type: a.contentType, })), }; } } 3. Voice Integration‚Äã // Voice connection manager class VoiceManager { private connections: Map&lt;string, VoiceConnection&gt; = new Map(); async joinChannel(channelId: string): Promise&lt;VoiceConnection&gt; { const channel = await this.client.channels.fetch(channelId); if (!channel.isVoiceBased()) { throw new Error('Not a voice channel'); } const connection = joinVoiceChannel({ channelId: channel.id, guildId: channel.guild.id, adapterCreator: channel.guild.voiceAdapterCreator, }); this.connections.set(channelId, connection); return connection; } async playAudio(channelId: string, audioUrl: string): Promise&lt;void&gt; { const connection = this.connections.get(channelId); if (!connection) throw new Error('Not connected to channel'); const player = createAudioPlayer(); const resource = createAudioResource(audioUrl); player.play(resource); connection.subscribe(player); } } Advanced Features‚Äã 1. Slash Commands Implementation‚Äã // Command registration const commands = [ { name: 'ask', description: 'Ask the AI a question', options: [ { name: 'question', type: ApplicationCommandOptionType.String, description: 'Your question', required: true, }, ], }, { name: 'imagine', description: 'Generate an image', options: [ { name: 'prompt', type: ApplicationCommandOptionType.String, description: 'Image description', required: true, }, ], }, ]; // Command handler client.on('interactionCreate', async (interaction) =&gt; { if (!interaction.isChatInputCommand()) return; switch (interaction.commandName) { case 'ask': await handleAskCommand(interaction); break; case 'imagine': await handleImagineCommand(interaction); break; } }); async function handleAskCommand(interaction: ChatInputCommandInteraction) { await interaction.deferReply(); const question = interaction.options.getString('question'); const response = await runtime.process({ content: question, userId: interaction.user.id, roomId: interaction.channelId, }); await interaction.editReply(response.text); } 2. Embed Builders‚Äã // Rich embed responses function createRichEmbed(data: any): EmbedBuilder { return new EmbedBuilder() .setTitle(data.title) .setDescription(data.description) .setColor(0x0099ff) .addFields( { name: 'Status', value: data.status, inline: true }, { name: 'Time', value: new Date().toISOString(), inline: true } ) .setFooter({ text: 'Powered by ElizaOS' }) .setTimestamp(); } // Usage in response const embed = createRichEmbed({ title: 'Analysis Complete', description: 'Here are the results...', status: 'Success', }); await message.channel.send({ embeds: [embed] }); 3. Reaction Handlers‚Äã // Reaction-based interactions client.on('messageReactionAdd', async (reaction, user) =&gt; { if (user.bot) return; // Handle specific reactions switch (reaction.emoji.name) { case 'üëç': await handlePositiveFeedback(reaction.message, user); break; case 'üëé': await handleNegativeFeedback(reaction.message, user); break; case 'üîÑ': await regenerateResponse(reaction.message, user); break; } }); async function regenerateResponse(message: Message, user: User) { // Get original context const context = await getMessageContext(message.id); // Generate new response const newResponse = await runtime.process({ ...context, regenerate: true, }); // Update message await message.edit(newResponse.text); } Permission Management‚Äã 1. Role-Based Access Control‚Äã // Permission checker class PermissionManager { private roleHierarchy: Map&lt;string, number&gt; = new Map([ ['admin', 100], ['moderator', 50], ['member', 10], ['guest', 0], ]); async checkPermission(userId: string, guildId: string, requiredLevel: number): Promise&lt;boolean&gt; { const member = await this.getMember(guildId, userId); const userLevel = this.getUserLevel(member); return userLevel &gt;= requiredLevel; } private getUserLevel(member: GuildMember): number { let maxLevel = 0; member.roles.cache.forEach((role) =&gt; { const level = this.roleHierarchy.get(role.name.toLowerCase()); if (level &amp;&amp; level &gt; maxLevel) { maxLevel = level; } }); return maxLevel; } } 2. Command Restrictions‚Äã // Restricted command example const restrictedCommands = { admin: ['shutdown', 'config', 'reset'], moderator: ['mute', 'kick', 'warn'], member: ['help', 'info', 'stats'], }; async function executeCommand(command: string, user: User, guild: Guild): Promise&lt;void&gt; { const permission = await permissionManager.getUserRole(user.id, guild.id); const allowedCommands = Object.entries(restrictedCommands) .filter(([role, _]) =&gt; permission.includes(role)) .flatMap(([_, commands]) =&gt; commands); if (!allowedCommands.includes(command)) { throw new Error('Insufficient permissions'); } // Execute command } Performance Optimization‚Äã 1. Message Caching‚Äã // LRU cache for messages class MessageCache { private cache: LRUCache&lt;string, ProcessedMessage&gt;; constructor(maxSize: number = 1000) { this.cache = new LRUCache({ max: maxSize }); } async get(messageId: string): Promise&lt;ProcessedMessage | null&gt; { return this.cache.get(messageId) || null; } async set(messageId: string, data: ProcessedMessage): Promise&lt;void&gt; { this.cache.set(messageId, data); } } 2. Rate Limiting‚Äã // Rate limiter implementation class RateLimiter { private limits: Map&lt;string, number[]&gt; = new Map(); constructor( private maxRequests: number = 5, private windowMs: number = 60000 ) {} async checkLimit(userId: string): Promise&lt;boolean&gt; { const now = Date.now(); const userLimits = this.limits.get(userId) || []; // Remove old entries const recent = userLimits.filter((time) =&gt; now - time &lt; this.windowMs); if (recent.length &gt;= this.maxRequests) { return false; } recent.push(now); this.limits.set(userId, recent); return true; } } Error Handling‚Äã 1. Comprehensive Error Management‚Äã // Error handler class DiscordErrorHandler { async handle(error: Error, context: ErrorContext): Promise&lt;void&gt; { console.error(`Discord Error: ${error.message}`, context); // Notify user if (context.channel) { await context.channel.send({ content: 'An error occurred. Please try again later.', ephemeral: true, }); } // Log to monitoring await this.logToMonitoring(error, context); // Attempt recovery if (error.code === 'CONNECTION_LOST') { await this.reconnect(); } } private async reconnect(): Promise&lt;void&gt; { // Implement reconnection logic } } 2. Graceful Degradation‚Äã // Fallback mechanisms async function sendMessage(channel: TextChannel, content: string): Promise&lt;void&gt; { try { // Try rich embed const embed = createRichEmbed(content); await channel.send({ embeds: [embed] }); } catch (embedError) { try { // Fallback to plain text await channel.send(content); } catch (textError) { // Log failure console.error('Failed to send message', textError); } } } Testing Strategies‚Äã 1. Unit Testing‚Äã // Test Discord service describe('DiscordService', () =&gt; { let service: DiscordService; let mockClient: jest.Mocked&lt;Client&gt;; beforeEach(() =&gt; { mockClient = createMockClient(); service = new DiscordService({ client: mockClient }); }); test('handles message correctly', async () =&gt; { const mockMessage = createMockMessage({ content: 'Hello bot', author: { bot: false }, }); await service.handleMessage(mockMessage); expect(mockClient.channels.send).toHaveBeenCalledWith( expect.objectContaining({ content: expect.stringContaining('Hello'), }) ); }); }); 2. Integration Testing‚Äã // Test full flow describe('Discord Integration', () =&gt; { test('processes command end-to-end', async () =&gt; { const response = await sendCommand('/ask What is ElizaOS?'); expect(response).toMatchObject({ success: true, reply: expect.stringContaining('ElizaOS'), }); }); }); Deployment Considerations‚Äã 1. Environment Configuration‚Äã # Required DISCORD_APPLICATION_ID=123456789012345678 DISCORD_API_TOKEN=Bot.Token.Here DISCORD_PUBLIC_KEY=public_key_for_interactions # Optional DISCORD_GUILD_ID=specific_guild_id DISCORD_LOG_CHANNEL=logs_channel_id DISCORD_ERROR_WEBHOOK=webhook_url 2. Scaling Strategies‚Äã // Sharding for large bots const manager = new ShardingManager('./bot.js', { token: process.env.DISCORD_API_TOKEN, totalShards: 'auto', }); manager.on('shardCreate', (shard) =&gt; { console.log(`Launched shard ${shard.id}`); }); manager.spawn(); Best Practices‚Äã 1. Security‚Äã Never expose bot tokensValidate all user inputsImplement proper rate limitingUse environment variables 2. Performance‚Äã Cache frequently accessed dataUse bulk operations when possibleImplement connection poolingMonitor memory usage 3. User Experience‚Äã Provide clear error messagesUse typing indicators for long operationsImplement command help systemSupport multiple languages Resources‚Äã Discord.js DocumentationDiscord Developer PortalElizaOS Discord Plugin Source Next: Telegram Technical Integration ‚Üí","keywords":"","version":"1.0.17"},{"title":"Plugin Development Guide","type":0,"sectionRef":"#","url":"/docs/technical/development/plugin-development","content":"Plugin Development Guide This guide walks you through creating custom plugins for ElizaOS, from basic concepts to advanced patterns. Overview‚Äã ElizaOS plugins extend agent capabilities through a standardized interface. Plugins can add: Actions: New ways for agents to respond to user inputProviders: Context and data sources for agent decision-makingEvaluators: Message analysis and processing logicServices: Shared functionality and integrations Getting Started‚Äã Prerequisites‚Äã Node.js 23.3.0 or higherTypeScript knowledgeBasic understanding of ElizaOS concepts Plugin Structure‚Äã A basic plugin follows this structure: my-plugin/ ‚îú‚îÄ‚îÄ src/ ‚îÇ ‚îú‚îÄ‚îÄ index.ts # Main plugin export ‚îÇ ‚îú‚îÄ‚îÄ actions/ # Action handlers ‚îÇ ‚îú‚îÄ‚îÄ providers/ # Context providers ‚îÇ ‚îú‚îÄ‚îÄ evaluators/ # Message evaluators ‚îÇ ‚îî‚îÄ‚îÄ services/ # Background services ‚îú‚îÄ‚îÄ package.json ‚îú‚îÄ‚îÄ tsconfig.json ‚îî‚îÄ‚îÄ README.md Basic Plugin Template‚Äã // src/index.ts import { Plugin, IAgentRuntime } from '@elizaos/core'; import { myAction } from './actions/myAction'; import { myProvider } from './providers/myProvider'; import { myEvaluator } from './evaluators/myEvaluator'; import { MyService } from './services/myService'; const myPlugin: Plugin = { name: 'my-plugin', description: 'My custom ElizaOS plugin', // Core components actions: [myAction], providers: [myProvider], evaluators: [myEvaluator], services: [MyService], // Service classes, not instances // Optional configuration config: { apiKey: 'your-api-key-here', }, // Lifecycle hooks async init(config: Record&lt;string, string&gt;, runtime: IAgentRuntime) { console.log('My plugin initialized!'); // Initialize plugin resources }, }; export default myPlugin; Creating Actions‚Äã Actions define how your plugin responds to user messages. Action Structure‚Äã // src/actions/myAction.ts import { Action, IAgentRuntime, Memory, State } from '@elizaos/core'; export const myAction: Action = { name: 'MY_ACTION', description: 'Performs a custom action', // Validation function - determines if this action should handle the message validate: async (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; { // Return true if this action should handle the message return message.content.text.toLowerCase().includes('do something'); }, // Handler function - executes the action handler: async (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; { // Perform your action logic const result = await performCustomLogic(message); // Return response return { text: `Action completed: ${result}`, action: 'MY_ACTION', }; }, // Examples for training/testing examples: [ [ { user: '{{user}}', content: { text: 'Can you do something special?' }, }, { user: '{{agent}}', content: { text: &quot;I'll do something special for you!&quot;, action: 'MY_ACTION' }, }, ], ], }; Advanced Action Features‚Äã export const advancedAction: Action = { name: 'ADVANCED_ACTION', description: 'Demonstrates advanced action features', // Similarity threshold for matching similes: ['similar action', 'related command'], validate: async (runtime: IAgentRuntime, message: Memory) =&gt; { // Access services const customService = runtime.getService('custom-service'); // Check permissions const hasPermission = await customService.checkPermission(message.entityId); // Complex validation logic return hasPermission &amp;&amp; isValidCommand(message.content.text); }, handler: async (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; { // Access character configuration const character = runtime.character; // Use providers for context const context = await runtime.getProvider('custom-context'); // Access conversation state const previousMessages = await runtime.messageManager.getMemories({ roomId: message.roomId, count: 10, }); // Perform action with full context const response = await processWithContext(message, context, previousMessages); // Store action result in state if (state) { state.data.lastAction = { type: 'ADVANCED_ACTION', timestamp: Date.now(), result: response, }; } return response; }, }; Creating Providers‚Äã Providers supply dynamic context to agents. Basic Provider‚Äã // src/providers/myProvider.ts import { Provider, IAgentRuntime, Memory, State } from '@elizaos/core'; export const myProvider: Provider = { get: async (runtime: IAgentRuntime, message?: Memory, state?: State) =&gt; { // Gather contextual information const data = await fetchRelevantData(); // Format for agent consumption return `Current context: ${JSON.stringify(data)}`; }, }; Advanced Provider with Caching‚Äã export const cachedProvider: Provider = { get: async (runtime: IAgentRuntime, message?: Memory) =&gt; { const cacheKey = `provider-${message?.roomId || 'global'}`; const cacheService = runtime.getService('cache'); // Check cache first const cached = await cacheService.get(cacheKey); if (cached &amp;&amp; Date.now() - cached.timestamp &lt; 60000) { // 1 minute TTL return cached.data; } // Fetch fresh data const freshData = await complexDataFetch(); // Update cache await cacheService.set(cacheKey, { data: freshData, timestamp: Date.now(), }); return freshData; }, }; Creating Evaluators‚Äã Evaluators analyze messages and determine processing paths. Basic Evaluator‚Äã // src/evaluators/myEvaluator.ts import { Evaluator, IAgentRuntime, Memory, State } from '@elizaos/core'; export const myEvaluator: Evaluator = { name: 'MY_EVALUATOR', // Validation - should this evaluator process the message? validate: async (runtime: IAgentRuntime, message: Memory) =&gt; { return message.content.text.length &gt; 10; }, // Evaluation logic handler: async (runtime: IAgentRuntime, message: Memory) =&gt; { // Analyze message const sentiment = await analyzeSentiment(message.content.text); const intent = await detectIntent(message.content.text); // Store evaluation results await runtime.messageManager.createMemory({ ...message, content: { ...message.content, evaluations: { sentiment, intent, evaluator: 'MY_EVALUATOR', }, }, }); // Return evaluation context return { sentiment, intent, shouldRespond: sentiment.score &lt; -0.5 || intent.type === 'question', }; }, }; Chained Evaluators‚Äã export const chainedEvaluator: Evaluator = { name: 'CHAINED_EVALUATOR', handler: async (runtime: IAgentRuntime, message: Memory, state?: State) =&gt; { // Run multiple evaluations in sequence const evaluations = []; // Sentiment analysis if (await shouldAnalyzeSentiment(message)) { const sentiment = await analyzeSentiment(message.content.text); evaluations.push({ type: 'sentiment', result: sentiment }); } // Entity extraction if (await shouldExtractEntities(message)) { const entities = await extractEntities(message.content.text); evaluations.push({ type: 'entities', result: entities }); } // Topic classification if (await shouldClassifyTopic(message)) { const topics = await classifyTopics(message.content.text); evaluations.push({ type: 'topics', result: topics }); } // Aggregate results return { evaluations, summary: summarizeEvaluations(evaluations), recommendations: generateRecommendations(evaluations), }; }, }; Creating Services‚Äã Services provide shared functionality across your plugin. Basic Service‚Äã // src/services/myService.ts import { Service, IAgentRuntime } from '@elizaos/core'; export class MyService extends Service { static serviceType = 'my-service'; capabilityDescription = 'Provides custom service functionality'; constructor(runtime?: IAgentRuntime) { super(runtime); } static async start(runtime: IAgentRuntime): Promise&lt;MyService&gt; { const service = new MyService(runtime); await service.initialize(); return service; } async stop(): Promise&lt;void&gt; { // Cleanup resources await this.closeConnections(); } private async initialize(): Promise&lt;void&gt; { // Initialize service resources await this.setupConnections(); } // Service methods async performOperation(data: any): Promise&lt;any&gt; { // Service logic return this.processData(data); } private async setupConnections(): Promise&lt;void&gt; { // Setup logic } private async closeConnections(): Promise&lt;void&gt; { // Cleanup logic } private processData(data: any): any { // Data processing logic return data; } } Advanced Service with State Management‚Äã export class StatefulService extends Service { private state: Map&lt;string, any&gt; = new Map(); private subscriptions: Map&lt;string, Function[]&gt; = new Map(); // State management setState(key: string, value: any): void { const oldValue = this.state.get(key); this.state.set(key, value); // Notify subscribers this.notifySubscribers(key, value, oldValue); } getState(key: string): any { return this.state.get(key); } // Subscription management subscribe(key: string, callback: Function): () =&gt; void { if (!this.subscriptions.has(key)) { this.subscriptions.set(key, []); } this.subscriptions.get(key)!.push(callback); // Return unsubscribe function return () =&gt; { const callbacks = this.subscriptions.get(key) || []; const index = callbacks.indexOf(callback); if (index &gt; -1) { callbacks.splice(index, 1); } }; } private notifySubscribers(key: string, newValue: any, oldValue: any): void { const callbacks = this.subscriptions.get(key) || []; callbacks.forEach((callback) =&gt; { try { callback(newValue, oldValue); } catch (error) { console.error('Subscriber error:', error); } }); } } Plugin Configuration‚Äã Configuration Schema‚Äã // src/config.ts export const configSchema = { type: 'object', properties: { apiKey: { type: 'string', description: 'API key for external service', required: true, }, endpoint: { type: 'string', description: 'Service endpoint URL', default: 'https://api.example.com', }, timeout: { type: 'number', description: 'Request timeout in milliseconds', default: 5000, }, features: { type: 'object', properties: { enableCache: { type: 'boolean', default: true, }, cacheSize: { type: 'number', default: 100, }, }, }, }, }; Using Configuration‚Äã const myPlugin: Plugin = { name: 'my-plugin', async onLoad(runtime: IAgentRuntime) { // Get plugin configuration const config = runtime.getSetting('myPlugin'); // Validate configuration if (!config?.apiKey) { throw new Error('API key is required for my-plugin'); } // Initialize with config const service = new MyService(config); await service.initialize(); // Register service runtime.registerService('my-service', service); }, }; Testing Plugins‚Äã Unit Testing‚Äã // tests/myAction.test.ts import { describe, it, expect, beforeEach } from 'bun:test'; import { createMockRuntime } from '@elizaos/testing'; import { myAction } from '../src/actions/myAction'; describe('myAction', () =&gt; { let runtime: any; beforeEach(() =&gt; { runtime = createMockRuntime(); }); it('should validate correct messages', async () =&gt; { const message = { content: { text: 'Please do something special' }, userId: 'test-user', roomId: 'test-room', }; const isValid = await myAction.validate(runtime, message); expect(isValid).toBe(true); }); it('should handle action correctly', async () =&gt; { const message = { content: { text: 'Do something now' }, userId: 'test-user', roomId: 'test-room', }; const result = await myAction.handler(runtime, message); expect(result.text).toContain('Action completed'); expect(result.action).toBe('MY_ACTION'); }); }); Integration Testing‚Äã // tests/integration.test.ts import { describe, it, expect } from 'bun:test'; import { createTestAgent } from '@elizaos/testing'; import myPlugin from '../src'; describe('Plugin Integration', () =&gt; { it('should load and function correctly', async () =&gt; { // Create test agent with plugin const agent = await createTestAgent({ plugins: [myPlugin], character: { name: 'TestAgent', plugins: ['my-plugin'], }, }); // Send test message const response = await agent.processMessage({ content: { text: 'Do something special' }, userId: 'test-user', roomId: 'test-room', }); // Verify plugin handled the message expect(response.action).toBe('MY_ACTION'); expect(response.text).toContain('Action completed'); // Cleanup await agent.cleanup(); }); }); Publishing Plugins‚Äã Package Configuration‚Äã { &quot;name&quot;: &quot;@your-org/elizaos-plugin-custom&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;Custom plugin for ElizaOS&quot;, &quot;main&quot;: &quot;dist/index.js&quot;, &quot;types&quot;: &quot;dist/index.d.ts&quot;, &quot;scripts&quot;: { &quot;build&quot;: &quot;tsc&quot;, &quot;test&quot;: &quot;bun test&quot;, &quot;prepare&quot;: &quot;bun run build&quot; }, &quot;keywords&quot;: [&quot;elizaos&quot;, &quot;plugin&quot;, &quot;ai&quot;, &quot;agent&quot;], &quot;peerDependencies&quot;: { &quot;@elizaos/core&quot;: &quot;^1.0.0&quot; }, &quot;devDependencies&quot;: { &quot;@elizaos/core&quot;: &quot;^1.0.0&quot;, &quot;@elizaos/testing&quot;: &quot;^1.0.0&quot;, &quot;typescript&quot;: &quot;^5.0.0&quot; }, &quot;files&quot;: [&quot;dist&quot;, &quot;README.md&quot;, &quot;LICENSE&quot;], &quot;publishConfig&quot;: { &quot;access&quot;: &quot;public&quot; } } Publishing Steps‚Äã Build your plugin: bun run build bun run test Publish to npm: bun publish Document usage: # Installation bun add @your-org/elizaos-plugin-custom # Usage Add to your character configuration: ```json { &quot;plugins&quot;: [&quot;@your-org/elizaos-plugin-custom&quot;] } ``` Best Practices‚Äã 1. Error Handling‚Äã Always handle errors gracefully: export const robustAction: Action = { handler: async (runtime, message) =&gt; { try { const result = await riskyOperation(); return { text: `Success: ${result}` }; } catch (error) { runtime.logger.error('Action failed', { error, message }); // Graceful fallback return { text: 'I encountered an issue processing that request. Please try again.', error: true, }; } }, }; 2. Resource Management‚Äã Clean up resources properly: const myPlugin: Plugin = { onLoad: async (runtime) =&gt; { // Initialize resources const connection = await createConnection(); runtime.registerService('connection', connection); }, onUnload: async (runtime) =&gt; { // Cleanup resources const connection = runtime.getService('connection'); await connection?.close(); }, }; 3. Performance Optimization‚Äã Cache expensive operations: const cachedAction: Action = { handler: async (runtime, message) =&gt; { const cacheKey = `result-${message.content.text}`; // Check cache const cached = await runtime.cacheGet(cacheKey); if (cached) { return cached; } // Compute result const result = await expensiveOperation(message); // Cache for 5 minutes await runtime.cacheSet(cacheKey, result, 300); return result; }, }; 4. Documentation‚Äã Document your plugin thoroughly: /** * Weather Plugin for ElizaOS * * Provides weather information and forecasts * * @example * ```json * { * &quot;plugins&quot;: [&quot;@elizaos/plugin-weather&quot;], * &quot;settings&quot;: { * &quot;weather&quot;: { * &quot;apiKey&quot;: &quot;your-api-key&quot; * } * } * } * ``` */ export default weatherPlugin; Advanced Topics‚Äã Plugin Composition‚Äã Combine multiple plugins: import { composePlugins } from '@elizaos/core'; import weatherPlugin from './weather'; import newsPlugin from './news'; export default composePlugins(weatherPlugin, newsPlugin); Dynamic Plugin Loading‚Äã Load plugins at runtime: async function loadDynamicPlugin(pluginPath: string): Promise&lt;Plugin&gt; { const module = await import(pluginPath); return module.default; } Plugin Communication‚Äã Plugins can communicate via services: // Plugin A const pluginA: Plugin = { onLoad: async (runtime) =&gt; { runtime.registerService('plugin-a-service', { getData: () =&gt; 'data from plugin A', }); }, }; // Plugin B const pluginB: Plugin = { actions: [ { handler: async (runtime, message) =&gt; { const serviceA = runtime.getService('plugin-a-service'); const data = serviceA?.getData(); return { text: `Got: ${data}` }; }, }, ], }; Troubleshooting‚Äã Common Issues‚Äã Plugin not loading: Check that the plugin is properly exported and listed in character configurationActions not triggering: Verify validation logic and action namesService errors: Ensure services are initialized before useMemory leaks: Clean up event listeners and timers in onUnload Debug Mode‚Äã Enable debug logging: const debugPlugin: Plugin = { onLoad: async (runtime) =&gt; { if (runtime.getSetting('debug')) { runtime.logger.level = 'debug'; runtime.logger.debug('Plugin loaded in debug mode'); } }, }; Resources‚Äã Plugin System ArchitectureCore API ReferenceExample PluginsCommunity Plugins Next Steps‚Äã Start with the basic templateAdd actions for user interactionsCreate providers for contextBuild services for shared functionalityTest thoroughlyPublish and share with the community","keywords":"","version":"1.0.17"},{"title":"Technical Track Introduction","type":0,"sectionRef":"#","url":"/docs/technical/intro","content":"Technical Track Introduction üîß Welcome to the Technical Track‚Äã Welcome to the comprehensive developer documentation for ElizaOS! This track provides in-depth technical knowledge for building sophisticated, production-ready AI agents. What You'll Master‚Äã In this technical track, you'll learn to: Architect scalable agent systems with proper state managementBuild custom plugins to extend agent capabilitiesIntegrate with any platform using our flexible service architectureOptimize performance for high-throughput scenariosImplement advanced features like memory persistence and multi-modal interactionsDeploy at scale with proper monitoring and observabilityTest thoroughly with our comprehensive testing frameworkContribute to core and shape the future of ElizaOS Who This Track Is For‚Äã This track is designed for: üë®‚Äçüíª Full-stack developers building agent-powered applicationsüèóÔ∏è System architects designing scalable AI solutionsüîå Plugin developers extending ElizaOS capabilitiesüöÄ DevOps engineers deploying agents in productionüî¨ Researchers exploring agent architecturesüí° Technical innovators pushing AI boundaries Prerequisites‚Äã To get the most from this track, you should have: ‚úÖ TypeScript/JavaScript proficiency‚úÖ Node.js ecosystem understanding‚úÖ Async programming experience‚úÖ Git and GitHub familiarity‚úÖ Basic AI/LLM concepts‚úÖ REST API knowledge üèóÔ∏è Architecture Overview‚Äã üìö Track Contents‚Äã 1. Architecture Deep Dive‚Äã System Overview - Complete architectural guideCore Concepts - Fundamental building blocksMemory System - How agents rememberPlugin System - Extensibility architectureState Management - Managing agent state 2. Development Guides‚Äã Plugin Development - Build custom pluginsTesting Strategies (Coming Soon) - Unit, integration, and E2E testingDebugging Techniques (Coming Soon) - Advanced troubleshootingContributing Guide (Coming Soon) - Contribute to ElizaOS core 3. API Reference‚Äã Core API - Core interfaces and typesActions API - Building agent actionsREST API (Coming Soon) - Complete endpoint documentationWebSocket Events (Coming Soon) - Real-time communication 4. Platform Integrations‚Äã Twitter Technical - Deep dive into TwitterDiscord Advanced (Coming Soon) - Advanced Discord featuresTelegram Advanced (Coming Soon) - Telegram bot capabilitiesCustom Services (Coming Soon) - Build your own integrations 5. Advanced Topics‚Äã Performance Optimization - Scale to millionsBest Practices - Production guidelinesSecurity Hardening (Coming Soon) - Protect your agentsDeployment Strategies (Coming Soon) - K8s, Docker, serverless 6. Technical FAQ‚Äã In-depth answers to complex technical questions üõ†Ô∏è Development Workflow‚Äã üöÄ Quick Start for Developers‚Äã Using the CLI (Recommended)‚Äã # Install ElizaOS CLI globally bun install -g @elizaos/cli # Create a new project elizaos create my-agent-project # Navigate to project cd my-agent-project # Start development elizaos dev From Source (Advanced)‚Äã # Clone the repository git clone https://github.com/elizaos/eliza.git cd eliza # Install dependencies bun install # Build the project bun run build # Run tests bun test # Start development bun run dev üìñ Essential Reading Order‚Äã Start Here: System OverviewUnderstand Concepts: Core ConceptsBuild Something: Plugin DevelopmentGo Deeper: Memory SystemOptimize: Performance Guide üîó Key Resources‚Äã TypeScript API Docs - Complete API referenceGitHub Repository - Source codePlugin Examples - Reference implementationsArchitecture Overview - Visual architecture guidesRFC Process - Propose changes üí° Developer Tips‚Äã Use TypeScript - The entire codebase is TypeScript-firstFollow patterns - Study existing plugins before buildingTest everything - Comprehensive tests prevent regressionsProfile performance - Measure before optimizingJoin discussions - Participate in architecture decisionsDocument well - Help others understand your code üéØ Next Steps‚Äã Ready to dive deep? Start with our comprehensive System Overview. Next Steps‚Äã üìê Explore Architectureüîå Build a Plugin Full source code ‚Ä¢ Active community ‚Ä¢ MIT licensed","keywords":"","version":"1.0.17"},{"title":"MongoDB Adapter for ElizaOS","type":0,"sectionRef":"#","url":"/packages/adapters/mongodb","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#features","content":" Full MongoDB database support with connection poolingVector search capabilities for efficient similarity searchesAutomatic fallback to standard search when vector search is unavailableBuilt-in caching system with TTL supportSharding support for better performance at scaleComprehensive memory and knowledge managementRelationship tracking between usersGoal tracking and managementParticipant and room management  ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#prerequisites","content":" MongoDB 6.0 or later (recommended for vector search support)NodeJS 16.0 or laterElizaOS installation  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#installation","content":" npm install @elizaos-plugins/adapter-mongodb   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#configuration","content":" Add the adapter to your ElizaOS configuration:  { &quot;plugins&quot;: [&quot;@elizaos-plugins/adapter-mongodb&quot;], &quot;settings&quot;: { &quot;MONGODB_CONNECTION_STRING&quot;: &quot;your_mongodb_connection_string&quot;, &quot;MONGODB_DATABASE&quot;: &quot;your_database_name&quot; // Optional, defaults to &quot;elizaAgent&quot; } }   ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#required-environment-variables","content":" MONGODB_CONNECTION_STRING: Your MongoDB connection stringMONGODB_DATABASE (optional): Database name to use  ","version":"1.0.17","tagName":"h3"},{"title":"Connection Options‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#connection-options","content":" The adapter is configured with optimal connection settings:  Maximum pool size: 100 connectionsMinimum pool size: 5 connectionsConnection timeout: 10 secondsSocket timeout: 45 secondsRetry support for both reads and writesCompression enabled (zlib)  ","version":"1.0.17","tagName":"h2"},{"title":"Features in Detail‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#features-in-detail","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Vector Search‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#vector-search","content":" The adapter automatically detects and enables vector search capabilities if your MongoDB instance supports it. This provides efficient similarity searches for:  Memory retrievalKnowledge base searchesSemantic similarity matching  If vector search is unavailable, the adapter automatically falls back to standard search methods.  ","version":"1.0.17","tagName":"h3"},{"title":"Caching‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#caching","content":" Built-in caching system with:  24-hour TTL by defaultAutomatic cache invalidationMemory-efficient storageCache hit/miss optimizations  ","version":"1.0.17","tagName":"h3"},{"title":"Memory Management‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#memory-management","content":" Comprehensive memory management features:  CRUD operations for memoriesVector-based similarity searchBatch processing supportAutomatic uniqueness checking  ","version":"1.0.17","tagName":"h3"},{"title":"Knowledge Base‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#knowledge-base","content":" Robust knowledge base management:  Support for shared and private knowledgeVector-based knowledge retrievalMetadata supportChunk management for large content  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Running Tests‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#running-tests","content":" The test suite uses Docker for running a test MongoDB instance:  cd src/__tests__ ./run_tests.sh   This will:  Start a MongoDB containerRun the test suiteClean up resources automatically  ","version":"1.0.17","tagName":"h3"},{"title":"Contributing‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#contributing","content":" Fork the repositoryCreate a feature branchAdd tests for new functionalitySubmit a pull request  ","version":"1.0.17","tagName":"h3"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#error-handling","content":" The adapter includes comprehensive error handling:  Connection failure recoveryAutomatic reconnectionGraceful degradation of vector searchDetailed error logging  ","version":"1.0.17","tagName":"h2"},{"title":"Performance Considerations‚Äã","type":1,"pageTitle":"MongoDB Adapter for ElizaOS","url":"/packages/adapters/mongodb#performance-considerations","content":" Uses connection pooling for optimal performanceImplements efficient batch processingSupports sharding for horizontal scalingIncludes index optimization ","version":"1.0.17","tagName":"h2"},{"title":"PGLite Adapter for ElizaOS","type":0,"sectionRef":"#","url":"/packages/adapters/pglite","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#features","content":" Embedded PostgreSQL engine for local development and testingFull vector search support via pgvectorBuilt-in fuzzy string matchingAutomatic schema initializationMemory-efficient caching systemSupport for multiple embedding providers (OpenAI, Ollama, GaiaNet)Transaction support with automatic rollback  ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#prerequisites","content":" Node.js 16 or laterElizaOS installationSufficient disk space for local database storage  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#installation","content":" npm install @elizaos-plugins/adapter-pglite   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#configuration","content":" Add the adapter to your ElizaOS configuration:  { &quot;plugins&quot;: [&quot;@elizaos-plugins/adapter-pglite&quot;], &quot;settings&quot;: { &quot;PGLITE_DATA_DIR&quot;: &quot;/path/to/data/directory&quot; // Required setting } }   ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#required-environment-variables","content":" PGLITE_DATA_DIR: Path to the directory where PGLite will store its data Use memory:// for in-memory database (useful for testing)  ","version":"1.0.17","tagName":"h3"},{"title":"Features in Detail‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#features-in-detail","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Vector Search‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#vector-search","content":" The adapter automatically configures vector search based on your embedding provider:  OpenAI (1536 dimensions)Ollama (1024 dimensions)GaiaNet (768 dimensions)Default/Other (384 dimensions)  ","version":"1.0.17","tagName":"h3"},{"title":"Schema Management‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#schema-management","content":" The adapter automatically manages:  Database tables (memories, participants, goals, etc.)Vector indexes for similarity searchCache tables with TTL supportRelationship tracking tables  ","version":"1.0.17","tagName":"h3"},{"title":"Caching System‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#caching-system","content":" Built-in caching system features:  Automatic cache invalidationSupport for vector similarity cachingLevenshtein distance-based text matchingTransaction-safe cache updates  ","version":"1.0.17","tagName":"h3"},{"title":"Performance Considerations‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#performance-considerations","content":" Uses optimized vector indexes for fast similarity searchesImplements efficient batch processing for large datasetsAutomatic cleanup of expired cache entriesTransaction support for data consistency  ","version":"1.0.17","tagName":"h2"},{"title":"FAQ‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#faq","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Can I use this adapter in production?‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#can-i-use-this-adapter-in-production","content":" PGLite is designed primarily for development and testing environments. For production use, consider using the full PostgreSQL adapter.  ","version":"1.0.17","tagName":"h3"},{"title":"How does the vector search compare to full PostgreSQL?‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#how-does-the-vector-search-compare-to-full-postgresql","content":" PGLite's vector search capabilities are identical to PostgreSQL when using pgvector, but with slightly lower performance due to its embedded nature.  ","version":"1.0.17","tagName":"h3"},{"title":"Can I migrate from PGLite to full PostgreSQL?‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#can-i-migrate-from-pglite-to-full-postgresql","content":" Yes, the schema and query structure are identical between PGLite and PostgreSQL, making migration straightforward.  ","version":"1.0.17","tagName":"h3"},{"title":"Does it support concurrent connections?‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#does-it-support-concurrent-connections","content":" PGLite supports multiple connections but is optimized for single-process use. For heavy concurrent workloads, use the full PostgreSQL adapter.  ","version":"1.0.17","tagName":"h3"},{"title":"How large can the database grow?‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#how-large-can-the-database-grow","content":" PGLite is limited by available disk space and system memory. For datasets larger than a few GB, consider using the full PostgreSQL adapter.  ","version":"1.0.17","tagName":"h3"},{"title":"Can I use custom embedding dimensions?‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#can-i-use-custom-embedding-dimensions","content":" Yes, the adapter automatically detects and configures the correct embedding dimensions based on your provider settings.  ","version":"1.0.17","tagName":"h3"},{"title":"Is the data persistent?‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#is-the-data-persistent","content":" Yes, when using a file system path for PGLITE_DATA_DIR. Use memory:// for non-persistent, in-memory storage.  ","version":"1.0.17","tagName":"h3"},{"title":"How do I backup the database?‚Äã","type":1,"pageTitle":"PGLite Adapter for ElizaOS","url":"/packages/adapters/pglite#how-do-i-backup-the-database","content":" Simply copy the PGLITE_DATA_DIR directory. All database files are stored there. ","version":"1.0.17","tagName":"h3"},{"title":"Qdrant Adapter for ElizaOS","type":0,"sectionRef":"#","url":"/packages/adapters/qdrant","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#features","content":" Vector similarity search with cosine distanceEfficient knowledge base managementBuilt-in text preprocessing for better search qualityUUID v5 compatibility for Qdrant IDsIn-memory caching systemContent metadata supportShared knowledge management  ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#prerequisites","content":" Qdrant server (self-hosted or cloud)Node.js 23 or laterElizaOS installation  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#installation","content":" npm install @elizaos-plugins/adapter-qdrant   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#configuration","content":" Add the adapter to your ElizaOS configuration:  { &quot;plugins&quot;: [&quot;@elizaos-plugins/adapter-qdrant&quot;], &quot;settings&quot;: { &quot;QDRANT_URL&quot;: &quot;your-qdrant-server-url&quot;, &quot;QDRANT_KEY&quot;: &quot;your-qdrant-api-key&quot;, &quot;QDRANT_PORT&quot;: &quot;6333&quot;, &quot;QDRANT_VECTOR_SIZE&quot;: &quot;1536&quot; // Adjust based on your embedding size } }   ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#required-environment-variables","content":" QDRANT_URL: URL of your Qdrant serverQDRANT_KEY: API key for authenticationQDRANT_PORT: Port number for Qdrant serverQDRANT_VECTOR_SIZE: Dimension of your vectors  ","version":"1.0.17","tagName":"h3"},{"title":"Features in Detail‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#features-in-detail","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Vector Search‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#vector-search","content":" The adapter provides specialized vector search capabilities:  Cosine similarity searchConfigurable vector dimensionsSupport for multiple embedding typesCache support for frequent searches  ","version":"1.0.17","tagName":"h3"},{"title":"Knowledge Management‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#knowledge-management","content":" Knowledge items are stored with:  Vector embeddings for similarity searchMetadata support for additional informationShared/private knowledge separationContent versioning through chunk management  ","version":"1.0.17","tagName":"h3"},{"title":"Text Preprocessing‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#text-preprocessing","content":" Built-in text preprocessing for better search quality:  Code block removalURL normalizationMarkdown cleanupSpecial character handlingWhitespace normalization  ","version":"1.0.17","tagName":"h3"},{"title":"Caching System‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#caching-system","content":" Efficient in-memory caching:  Per-agent cache isolationUUID-based cache keysAutomatic cache management  ","version":"1.0.17","tagName":"h3"},{"title":"Usage Notes‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#usage-notes","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Specialized Functions‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#specialized-functions","content":" This adapter primarily implements:  Knowledge managementVector similarity searchCaching operations  Other database functions (like memory management, participant tracking, etc.) are stubbed but not implemented. Use a different adapter if you need these features.  ","version":"1.0.17","tagName":"h3"},{"title":"Collection Management‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#collection-management","content":" The adapter automatically manages:  Collection creationVector indexesPoint upserts with payload  ","version":"1.0.17","tagName":"h3"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#best-practices","content":" Set correct vector dimensions based on your embedding modelUse consistent embedding generationConsider caching for frequent searchesMonitor memory usage with large cache sizes  ","version":"1.0.17","tagName":"h3"},{"title":"FAQ‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#faq","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Can I use different vector sizes?‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#can-i-use-different-vector-sizes","content":" Yes, configure QDRANT_VECTOR_SIZE based on your embedding model's output size.  ","version":"1.0.17","tagName":"h3"},{"title":"Is caching required?‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#is-caching-required","content":" No, caching is optional but recommended for performance when doing repeated searches.  ","version":"1.0.17","tagName":"h3"},{"title":"Can I share knowledge between agents?‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#can-i-share-knowledge-between-agents","content":" Yes, use the isShared flag in knowledge metadata for shared content.  ","version":"1.0.17","tagName":"h3"},{"title":"How do I handle different embedding models?‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#how-do-i-handle-different-embedding-models","content":" Configure the vector size to match your model's output dimensions and ensure consistent preprocessing.  ","version":"1.0.17","tagName":"h3"},{"title":"Does it support multi-tenancy?‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#does-it-support-multi-tenancy","content":" Yes, through per-agent isolation of knowledge and cache.  ","version":"1.0.17","tagName":"h3"},{"title":"What about full-text search?‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#what-about-full-text-search","content":" The adapter focuses on vector similarity search; use MongoDB or PostgreSQL adapters for full-text search.  ","version":"1.0.17","tagName":"h3"},{"title":"Is sharding supported?‚Äã","type":1,"pageTitle":"Qdrant Adapter for ElizaOS","url":"/packages/adapters/qdrant#is-sharding-supported","content":" Yes, through Qdrant's native sharding capabilities. ","version":"1.0.17","tagName":"h3"},{"title":"ElizaOS PostgreSQL Adapter","type":0,"sectionRef":"#","url":"/packages/adapters/postgres","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#features","content":" Seamless integration with ElizaOS memory and knowledge storage systemsVector embedding storage and retrieval with pgvector extensionSupport for multiple embedding models and dimensions (OpenAI, Ollama, GaiaNet)Robust connection management with automatic retries and circuit breakingFull transaction support for safe database operationsComprehensive memory, relationship, and knowledge managementBuilt-in caching system  ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#prerequisites","content":" PostgreSQL 15+ with pgvector extension installedConnection permissions to create tables and extensions  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#installation","content":" Install the adapter via npm:  npm install @elizaos-plugins/adapter-postgres   Or using bun:  bun add @elizaos-plugins/adapter-postgres   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#configuration","content":" Add the adapter to your ElizaOS configuration and provide the necessary connection details:  // agent.config.js export default { // Other ElizaOS configuration adapters: ['postgres'], // PostgreSQL connection environment variables settings: { POSTGRES_URL: 'postgresql://username:password@localhost:5432/elizaos', }, };   ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#environment-variables","content":" POSTGRES_URL - Required PostgreSQL connection string  ","version":"1.0.17","tagName":"h3"},{"title":"Database Schema‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#database-schema","content":" The adapter automatically initializes the required database schema when first connecting, including:  Setting up the pgvector extensionCreating all necessary tables (memories, accounts, rooms, etc.)Configuring indexes for vector search  The schema includes tables for:  accounts - User and agent profilesrooms - Conversation containersmemories - Messages and other memory objects with vector embeddingsgoals - User and agent goalsparticipants - Room participation recordsrelationships - Connections between accountsknowledge - Agent knowledge base with vector embeddingscache - Key-value cache storage  ","version":"1.0.17","tagName":"h2"},{"title":"Vector Search‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#vector-search","content":" The adapter uses pgvector to provide semantic search through vector embeddings, supporting:  Multiple embedding models (OpenAI, Ollama, GaiaNet, etc.)Automatic dimension detection (1536 for OpenAI, 1024 for Ollama, etc.)Cosine similarity search with configurable thresholdsText-based keyword search with Levenshtein distance  ","version":"1.0.17","tagName":"h2"},{"title":"Memory Management‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#memory-management","content":" The adapter provides methods for:  // Creating memories with vector embeddings await adapter.createMemory(memory, tableName); // Searching memories by vector similarity await adapter.searchMemoriesByEmbedding(embedding, options); // Retrieving memories by various criteria await adapter.getMemories({ roomId, tableName, count, unique });   ","version":"1.0.17","tagName":"h2"},{"title":"Knowledge Management‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#knowledge-management","content":" For agent knowledge base management:  // Store knowledge items with vector embeddings await adapter.createKnowledge(knowledgeItem); // Search knowledge by vector similarity and text await adapter.searchKnowledge({ agentId, embedding, match_threshold: 0.8, match_count: 10, searchText: 'optional text', }); // Remove knowledge await adapter.removeKnowledge(knowledgeId);   ","version":"1.0.17","tagName":"h2"},{"title":"Caching System‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#caching-system","content":" The adapter includes a built-in caching system:  // Store cache values await adapter.setCache({ key, agentId, value }); // Retrieve cached values const value = await adapter.getCache({ key, agentId }); // Delete cache entries await adapter.deleteCache({ key, agentId });   ","version":"1.0.17","tagName":"h2"},{"title":"Connection Management‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#connection-management","content":" The adapter implements robust connection handling:  Circuit breaker pattern to prevent cascading failuresAutomatic connection retry with exponential backoffConnection pooling with configurable limitsGraceful connection cleanup on shutdown  ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Testing‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#testing","content":" The repository includes a comprehensive test suite:  # Run tests with Docker for pgvector support cd src/__tests__ ./run_tests.sh   Tests require Docker to spin up a PostgreSQL instance with pgvector support.  ","version":"1.0.17","tagName":"h3"},{"title":"Building‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#building","content":" bun build   ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"ElizaOS PostgreSQL Adapter","url":"/packages/adapters/postgres#common-issues","content":" Connection errors: Verify your PostgreSQL connection stringEnsure PostgreSQL is running and accessibleCheck network connectivity and firewall settings Vector search issues: Verify pgvector extension is installed in your PostgreSQL databaseEnsure embedding dimensions match your model Permission errors: The database user needs permission to create extensions and tablesFor production, consider using a more restricted user after initialization ","version":"1.0.17","tagName":"h3"},{"title":"Unmaintained: this plugin used to live in @elizaos/core. It needs a maintainer.","type":0,"sectionRef":"#","url":"/packages/adapters/sqljs","content":"Unmaintained: this plugin used to live in @elizaos/core. It needs a maintainer.","keywords":"","version":"1.0.17"},{"title":"SQLite Adapter","type":0,"sectionRef":"#","url":"/packages/adapters/sqlite","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#features","content":" Full SQLite database implementation of ElizaOS database interfaceVector similarity search via sqlite-vec extensionJSON validation and foreign key constraintsBuilt-in caching systemComprehensive transaction support with circuit breaker patternSupport for storing and retrieving: Memory entries with embeddingsUser accounts and relationshipsGoals and objectivesRoom and participant managementKnowledge base with RAG supportSystem logs and cache  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#installation","content":" npm install @elizaos-plugins/adapter-sqlite   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#dependencies","content":" better-sqlite3 (v11.8.1)sqlite-vec (v0.1.6)whatwg-url (v7.1.0)  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#usage","content":" import sqlitePlugin from '@elizaos-plugins/adapter-sqlite'; import { IAgentRuntime } from '@elizaos/core'; // Initialize with ElizaOS runtime function initializeAgent(runtime: IAgentRuntime) { runtime.use(sqlitePlugin); } // Or initialize directly import Database from 'better-sqlite3'; import { SqliteDatabaseAdapter } from '@elizaos-plugins/adapter-sqlite'; const db = new Database('path/to/database.db'); const adapter = new SqliteDatabaseAdapter(db); await adapter.init();   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#configuration","content":" The adapter looks for the following configuration in your ElizaOS runtime:  SQLITE_FILE: Path to the SQLite database file (default: ./data/db.sqlite)  ","version":"1.0.17","tagName":"h2"},{"title":"Default Database Location‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#default-database-location","content":" By default, the adapter creates a data directory in your project root and stores the database file there. Customize this by setting the SQLITE_FILE in your ElizaOS runtime configuration.  ","version":"1.0.17","tagName":"h3"},{"title":"Database Schema‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#database-schema","content":" The adapter creates and manages these tables with appropriate indexes and constraints:  accounts: User account information with JSON detailsmemories: Memory entries with BLOB embeddings and JSON contentgoals: Task tracking with JSON objectiveslogs: System event loggingparticipants: Room participation managementrelationships: User relationship trackingrooms: Conversation room managementcache: Temporary data storage with JSON validationknowledge: RAG knowledge base with embedding support  Each table includes appropriate indexes and foreign key constraints. The complete schema is available in sqliteTables.ts.  ","version":"1.0.17","tagName":"h2"},{"title":"Vector Search‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#vector-search","content":" The adapter implements vector similarity search using sqlite-vec for efficient embedding comparisons:  const memories = await adapter.searchMemories({ tableName: 'memories', roomId: 'room-id', embedding: [ /* vector */ ], match_threshold: 0.95, match_count: 10, unique: true, });   ","version":"1.0.17","tagName":"h2"},{"title":"FAQ‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#faq","content":" ","version":"1.0.17","tagName":"h2"},{"title":"How does vector similarity search work?‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#how-does-vector-similarity-search-work","content":" The adapter uses sqlite-vec to calculate L2 distances between embeddings stored as BLOB data. This enables efficient vector similarity searches for memory and knowledge retrieval.  ","version":"1.0.17","tagName":"h3"},{"title":"Can I use this adapter with other databases?‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#can-i-use-this-adapter-with-other-databases","content":" This adapter is specifically designed for SQLite and implements ElizaOS's IDatabaseAdapter interface. For other databases, use the appropriate adapter (MongoDB, PostgreSQL, etc.).  ","version":"1.0.17","tagName":"h3"},{"title":"How are embeddings stored?‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#how-are-embeddings-stored","content":" Embeddings are stored as BLOB data in SQLite using Float32Array, with automatic conversion between formats as needed.  ","version":"1.0.17","tagName":"h3"},{"title":"Is there support for transactions?‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#is-there-support-for-transactions","content":" Yes, the adapter implements the framework's circuit breaker pattern and transaction support through better-sqlite3.  ","version":"1.0.17","tagName":"h3"},{"title":"How does the caching system work?‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#how-does-the-caching-system-work","content":" The adapter provides a built-in caching system through the cache table with support for JSON validation and automatic timestamp management.  ","version":"1.0.17","tagName":"h3"},{"title":"Can I use this in production?‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#can-i-use-this-in-production","content":" While the adapter is built on production-ready better-sqlite3, it's primarily designed for development and embedded environments. For production deployments, consider PostgreSQL or MongoDB adapters.  ","version":"1.0.17","tagName":"h3"},{"title":"How do I backup the database?‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#how-do-i-backup-the-database","content":" Use standard SQLite backup procedures - either file system backup of the .sqlite file when the database is not in use, or SQLite's online backup API.  ","version":"1.0.17","tagName":"h3"},{"title":"What embedding dimensions are supported?‚Äã","type":1,"pageTitle":"SQLite Adapter","url":"/packages/adapters/sqlite#what-embedding-dimensions-are-supported","content":" The adapter supports any embedding dimension through BLOB storage, though the default configuration is optimized for 384-dimensional vectors commonly used by local models. ","version":"1.0.17","tagName":"h3"},{"title":"ElizaOS Supabase Adapter","type":0,"sectionRef":"#","url":"/packages/adapters/supabase","content":"","keywords":"","version":"1.0.17"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"ElizaOS Supabase Adapter","url":"/packages/adapters/supabase#prerequisites","content":" Supabase account and projectElizaOS installationNode.js and npm/yarn/bun  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"ElizaOS Supabase Adapter","url":"/packages/adapters/supabase#installation","content":" npm install github:elizaos-plugins/adapter-supabase   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"ElizaOS Supabase Adapter","url":"/packages/adapters/supabase#configuration","content":" Add the adapter to your character configuration:  { &quot;plugins&quot;: [&quot;@elizaos-plugins/adapter-supabase&quot;], &quot;settings&quot;: { &quot;secrets&quot;: { &quot;SUPABASE_URL&quot;: &quot;your-supabase-project-url&quot;, &quot;SUPABASE_ANON_KEY&quot;: &quot;your-supabase-anon-key&quot; } } }   Set up the database schema by running the migrations:  # Run the schema migration psql -f schema.sql # Seed the initial data psql -f seed.sql   ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"ElizaOS Supabase Adapter","url":"/packages/adapters/supabase#required-environment-variables","content":" The adapter requires the following environment variables:  SUPABASE_URL: Your Supabase project URLSUPABASE_ANON_KEY: Your Supabase project's anonymous key  You can find these values in your Supabase project dashboard under Project Settings &gt; API.  ","version":"1.0.17","tagName":"h2"},{"title":"Database Setup‚Äã","type":1,"pageTitle":"ElizaOS Supabase Adapter","url":"/packages/adapters/supabase#database-setup","content":" Before using the adapter, ensure you've run both migration files:  schema.sql: Sets up the required database tables and relationshipsseed.sql: Populates initial data (if any)  These migrations must be executed before starting the adapter to ensure proper functionality.  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"ElizaOS Supabase Adapter","url":"/packages/adapters/supabase#usage","content":" Once configured, the adapter will automatically handle:  Data persistence for character states and interactionsReal-time updates for multi-user environmentsState synchronization across different instancesSecure data storage and retrieval ","version":"1.0.17","tagName":"h2"},{"title":"auto","type":0,"sectionRef":"#","url":"/packages/clients/auto","content":"auto Deprecated: this plugin lives in @elizaos/core","keywords":"","version":"1.0.17"},{"title":"ElizaOS Alexa Client Plugin","type":0,"sectionRef":"#","url":"/packages/clients/alexa","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"ElizaOS Alexa Client Plugin","url":"/packages/clients/alexa#features","content":" Send proactive notifications to Alexa devicesConnect ElizaOS agents to the Alexa Skills ecosystemEnable voice-based interaction with your ElizaOS character  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"ElizaOS Alexa Client Plugin","url":"/packages/clients/alexa#installation","content":" npm install @elizaos-plugins/client-alexa   ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"ElizaOS Alexa Client Plugin","url":"/packages/clients/alexa#prerequisites","content":" Before using this plugin, you need to:  Create an Alexa Skill in the Alexa Developer ConsoleSet up the necessary permissions for Proactive EventsObtain your Skill ID, Client ID, and Client Secret from the Alexa Developer Console  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"ElizaOS Alexa Client Plugin","url":"/packages/clients/alexa#configuration","content":" Add the following environment variables or settings to your ElizaOS configuration:  ALEXA_SKILL_ID=your-skill-id ALEXA_CLIENT_ID=your-client-id ALEXA_CLIENT_SECRET=your-client-secret   ","version":"1.0.17","tagName":"h2"},{"title":"Sending Proactive Events‚Äã","type":1,"pageTitle":"ElizaOS Alexa Client Plugin","url":"/packages/clients/alexa#sending-proactive-events","content":" The plugin currently supports sending proactive message alerts to Alexa devices. This allows your ElizaOS character to initiate conversations with users.  Example:  // The plugin automatically sends a test notification when started // Future versions will expose direct methods for sending custom notifications   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"ElizaOS Alexa Client Plugin","url":"/packages/clients/alexa#development","content":" To build the plugin from source:  # Install dependencies npm install # Build the plugin npm run build # Run tests npm test # Lint and format code npm run lint npm run format   ","version":"1.0.17","tagName":"h2"},{"title":"Settings Reference‚Äã","type":1,"pageTitle":"ElizaOS Alexa Client Plugin","url":"/packages/clients/alexa#settings-reference","content":" Setting Name\tDescription\tRequiredALEXA_SKILL_ID\tThe unique identifier for your Alexa skill\tYes ALEXA_CLIENT_ID\tOAuth2 client ID for your Alexa skill\tYes ALEXA_CLIENT_SECRET\tOAuth2 client secret for your Alexa skill\tYes  ","version":"1.0.17","tagName":"h2"},{"title":"Limitations‚Äã","type":1,"pageTitle":"ElizaOS Alexa Client Plugin","url":"/packages/clients/alexa#limitations","content":" Currently, only one-way communication (proactive alerts) is supportedFull conversational capabilities will be added in future releases ","version":"1.0.17","tagName":"h2"},{"title":"direct","type":0,"sectionRef":"#","url":"/packages/clients/direct","content":"direct Deprecated: this plugin lives in @elizaos/core","keywords":"","version":"1.0.17"},{"title":"ElizaOS Deva Client Plugin","type":0,"sectionRef":"#","url":"/packages/clients/deva","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#overview","content":" The Deva Client Plugin integrates your ElizaOS AI characters with Deva, allowing them to retrieve their persona information, fetch existing posts, and automatically publish new posts on a scheduled basis. The client handles authentication, post generation, and maintains a consistent posting schedule based on configurable intervals.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#features","content":" Persona Management: Automatically fetches and maintains your character's Deva persona detailsPost Timeline: Synchronizes posts between Deva and ElizaOS memory systemScheduled Posting: Generates and publishes new posts on configurable time intervalsCustomizable Templates: Supports custom post templates for content generationStyle Preservation: Ensures posts match your character's voice, style, and expertise  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#installation","content":" npm install @elizaos-plugins/client-deva   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#configuration","content":" To use this plugin, you need to configure your ElizaOS character with the necessary settings:  { &quot;name&quot;: &quot;YourCharacter&quot;, &quot;clients&quot;: [&quot;deva&quot;], &quot;plugins&quot;: [&quot;@elizaos-plugins/client-deva&quot;], &quot;settings&quot;: { &quot;DEVA_API_KEY&quot;: &quot;your-deva-api-key&quot;, &quot;DEVA_API_BASE_URL&quot;: &quot;https://api.deva.com/v1&quot;, &quot;POST_INTERVAL_MIN&quot;: &quot;90&quot;, &quot;POST_INTERVAL_MAX&quot;: &quot;180&quot;, &quot;POST_IMMEDIATELY&quot;: &quot;false&quot; }, &quot;templates&quot;: { &quot;devaPostTemplate&quot;: &quot;# Custom template for Deva posts\\n{{knowledge}}\\n...&quot; } }   ","version":"1.0.17","tagName":"h2"},{"title":"Required Settings‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#required-settings","content":" Setting\tDescription\tDefaultDEVA_API_KEY\tYour Deva API key for authentication\tNone (Required) DEVA_API_BASE_URL\tBase URL for the Deva API\tNone (Required) POST_INTERVAL_MIN\tMinimum interval between posts (minutes)\t90 POST_INTERVAL_MAX\tMaximum interval between posts (minutes)\t180 POST_IMMEDIATELY\tWhether to post immediately on startup\tfalse  ","version":"1.0.17","tagName":"h3"},{"title":"Post Template‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#post-template","content":" The plugin uses a default template for generating posts, but you can customize it by providing a devaPostTemplate in your character's templates:  # Areas of Expertise {{knowledge}} # About {{agentName}} (!{{twitterUserName}}): {{bio}} {{lore}} {{topics}} {{providers}} {{characterPostExamples}} {{postDirections}} {{recentMessages}} # Task: Generate a post in the voice and style and perspective of {{agentName}}. Write a 1-3 sentence post that is {{adjective}} about {{topic}} (without mentioning {{topic}} directly), from the perspective of {{agentName}}. Do not add commentary or acknowledge this request, just write the post. Your response should not contain any questions. Brief, concise statements only. The total character count MUST be less than 280. No emojis. Use \\n\\n (double spaces) between statements.   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#usage","content":" Once configured, the Deva client will automatically:  Connect to the Deva API and fetch your character's persona detailsRetrieve existing posts and store them in ElizaOS's memory systemBegin the posting schedule based on the configured intervalsGenerate and publish new posts that match your character's style and knowledge  ","version":"1.0.17","tagName":"h2"},{"title":"Posting Schedule‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#posting-schedule","content":" The client uses randomized intervals between posts to create a more natural posting pattern. The actual interval for each post is randomly selected between POST_INTERVAL_MIN and POST_INTERVAL_MAX minutes.  ","version":"1.0.17","tagName":"h3"},{"title":"Post Memory Storage‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#post-memory-storage","content":" All posts are stored in ElizaOS's memory system with properly formatted room IDs and content, enabling your character to reference past posts in conversations.  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building the Plugin‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#building-the-plugin","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Development Mode‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#development-mode","content":" npm run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Linting‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#linting","content":" npm run lint   ","version":"1.0.17","tagName":"h3"},{"title":"Technical Architecture‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#technical-architecture","content":" The plugin consists of several key components:  DevaClient: The main entry point that initializes and manages the clientClientBase: Handles the low-level API interactions with DevaDevaController: Manages persona data, post synchronization, and the posting scheduleEnvironment Validation: Ensures all required configuration settings are present  ","version":"1.0.17","tagName":"h2"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"ElizaOS Deva Client Plugin","url":"/packages/clients/deva#troubleshooting","content":" If you encounter issues:  Verify your Deva API key is valid and has appropriate permissionsCheck that your character has the required bio, knowledge, and topics for post generationExamine logs for any error messages related to API connectivityEnsure your character's template is correctly formatted if using a custom one ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/client-discord","type":0,"sectionRef":"#","url":"/packages/clients/discord","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#features","content":" Handle server join events and manage initial configurations.Voice event management via the voice manager.Manage and process new messages with the message manager.Slash command registration and interaction handling.Disconnect websocket and unbind all listeners when required.Robust permissions management for bot functionality.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#installation","content":" As this is a workspace package, it's installed as part of the ElizaOS monorepo:  bun install   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#configuration","content":" The client requires the following environment variables:  # Discord API Credentials DISCORD_APPLICATION_ID=your_application_id DISCORD_API_TOKEN=your_api_token # Optional Settings (add any additional details here if necessary)   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Initialization‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#basic-initialization","content":" import { DiscordClientInterface } from '@elizaos/client-discord'; // Initialize the client const discordManager = await DiscordClientInterface.start(runtime);   ","version":"1.0.17","tagName":"h3"},{"title":"Slash Command Registration‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#slash-command-registration","content":" To register slash commands:  await discordManager.command.registerCommands([ { name: 'example', description: 'An example slash command', options: [], }, ]);   ","version":"1.0.17","tagName":"h3"},{"title":"Handling Messages‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#handling-messages","content":" // Listen for new messages await discordManager.message.handleNewMessage({ channelId: 'channel-id', content: 'Hello Discord!', });   ","version":"1.0.17","tagName":"h3"},{"title":"Managing Voice Events‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#managing-voice-events","content":" // Join a voice channel await discordManager.voice.joinChannel('channel-id'); // Handle voice interactions await discordManager.voice.handleInteraction({ userId: 'user-id', action: 'speak', });   ","version":"1.0.17","tagName":"h3"},{"title":"Key Components‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#key-components","content":" ClientBase Handles authentication and session management.Manages websocket connections. MessageManager Processes incoming messages and responses.Supports message formatting and templating. VoiceManager Manages voice interactions and events.Handles joining and leaving voice channels. CommandManager Registers and processes slash commands.Ensures permissions are validated.  ","version":"1.0.17","tagName":"h2"},{"title":"Notes‚Äã","type":1,"pageTitle":"@elizaos/client-discord","url":"/packages/clients/discord#notes","content":" Ensure that your .env file includes the required environment variables for proper functionality. Additional features or modules can be extended as part of the ElizaOS framework. ","version":"1.0.17","tagName":"h2"},{"title":"ElizaOS Home Plugin","type":0,"sectionRef":"#","url":"/packages/clients/eliza-home","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#features","content":" Control various smart home devices (lights, switches, thermostats, locks, etc.)Execute scenes and automationsDiscover available devices and their current statesProcess natural language commands for device controlGroup devices by room for organized managementSupport for multiple device capabilities (switch, level, color, temperature, etc.)  ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#prerequisites","content":" Before using this plugin, you need:  A SmartThings account with connected devicesA SmartThings personal access tokenElizaOS installed and configured  ","version":"1.0.17","tagName":"h2"},{"title":"Setup‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#setup","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Get SmartThings API Token‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#1-get-smartthings-api-token","content":" Go to the SmartThings Developer WorkspaceCreate a new Personal Access Token with the following scopes: r:devices:* (read devices)x:devices:* (execute device commands)r:scenes:* (read scenes)x:scenes:* (execute scenes)r:rooms:* (read rooms information) Save your token securely; you'll need it for configuration  ","version":"1.0.17","tagName":"h3"},{"title":"2. Configure the Plugin‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#2-configure-the-plugin","content":" Add the following environment variable to your ElizaOS configuration:  SMARTTHINGS_TOKEN=&quot;your_smartthings_personal_access_token&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"3. Install the Plugin‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#3-install-the-plugin","content":" To install the plugin to your ElizaOS agent:  npm install @elizaos-plugins/client-eliza-home   ","version":"1.0.17","tagName":"h3"},{"title":"4. Add the Plugin to Your Agent Configuration‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#4-add-the-plugin-to-your-agent-configuration","content":" Add the Home client to your agent's configuration:  { &quot;clients&quot;: [&quot;home&quot;] }   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#usage","content":" Once configured, your agent can:  ","version":"1.0.17","tagName":"h2"},{"title":"Control Devices‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#control-devices","content":" Users can send natural language commands to control devices:  &quot;Turn on the living room lights&quot;&quot;Set the thermostat to 72 degrees&quot;&quot;Dim the bedroom lights to 50%&quot;&quot;Turn off all the lights in the kitchen&quot;&quot;Lock the front door&quot;  ","version":"1.0.17","tagName":"h3"},{"title":"Discover Devices‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#discover-devices","content":" Users can ask about available devices:  &quot;What devices do you see?&quot;&quot;List all the smart devices&quot;&quot;What lights do I have?&quot;  ","version":"1.0.17","tagName":"h3"},{"title":"Check Device Status‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#check-device-status","content":" Users can inquire about the current state of devices:  &quot;Is the living room light on?&quot;&quot;What's the current temperature of the thermostat?&quot;&quot;Are any doors unlocked?&quot;  ","version":"1.0.17","tagName":"h3"},{"title":"Execute Scenes‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#execute-scenes","content":" Users can trigger scenes by name:  &quot;Activate movie night scene&quot;&quot;Run good morning routine&quot;  ","version":"1.0.17","tagName":"h3"},{"title":"Supported Device Types‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#supported-device-types","content":" The plugin supports a variety of device types:  Switches: Basic on/off controlLights: On/off, brightness, color, temperature controlThermostats: Temperature control, mode settingLocks: Lock/unlock controlSensors: Motion, contact, presence, temperature, humidityWindow Shades and Garage Doors: Open/close controlFans: On/off, speed controlMedia Players: Play/pause/stop, volume control  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration Options‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#configuration-options","content":" Environment Variable\tRequired\tDescriptionSMARTTHINGS_TOKEN\tYes\tSmartThings personal access token  ","version":"1.0.17","tagName":"h2"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Connection Issues‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#connection-issues","content":" If the plugin can't connect to SmartThings:  Verify your token is correct and has the required permissionsCheck your internet connectionEnsure the SmartThings service is available  ","version":"1.0.17","tagName":"h3"},{"title":"Command Processing Problems‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#command-processing-problems","content":" If commands aren't being processed correctly:  Make sure your phrasing is clear (e.g., &quot;turn on the kitchen light&quot;)Check if the device name matches exactly what's in SmartThingsVerify the device is online and responsive in the SmartThings app  ","version":"1.0.17","tagName":"h3"},{"title":"Device Discovery Issues‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#device-discovery-issues","content":" If devices aren't appearing:  Make sure devices are properly set up in SmartThingsCheck that your token has read access to devicesTry refreshing the device list in SmartThings  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"ElizaOS Home Plugin","url":"/packages/clients/eliza-home#development","content":" To extend or modify this plugin:  Clone the repositoryInstall dependencies: npm installMake your changesRun tests: npm testBuild: npm run build ","version":"1.0.17","tagName":"h2"},{"title":"Telegram Technical Integration","type":0,"sectionRef":"#","url":"/docs/technical/integrations/telegram-technical","content":"Telegram Technical Integration Comprehensive technical guide for integrating ElizaOS with Telegram, including bot development, advanced features, and production deployment. Architecture Overview‚Äã Telegram Service Architecture‚Äã interface TelegramService extends Service { bot: TelegramBot; updateHandler: UpdateHandler; commandRegistry: CommandRegistry; sessionManager: SessionManager; } Message Flow Architecture‚Äã Implementation Guide‚Äã 1. Service Initialization‚Äã import { TelegramService } from '@elizaos/plugin-telegram'; import { Telegraf } from 'telegraf'; // Initialize Telegram service const telegramService = new TelegramService({ token: process.env.TELEGRAM_BOT_TOKEN, webhookUrl: process.env.WEBHOOK_URL, // Optional polling: !process.env.WEBHOOK_URL, rateLimit: { window: 1000, limit: 30, }, }); // Register with runtime runtime.registerService(telegramService); 2. Custom Update Handlers‚Äã // Custom update handler implementation class CustomUpdateHandler extends UpdateHandler { constructor( private bot: Telegraf, private runtime: IAgentRuntime ) { super(); this.registerHandlers(); } private registerHandlers(): void { // Text messages this.bot.on('text', this.handleTextMessage.bind(this)); // Voice messages this.bot.on('voice', this.handleVoiceMessage.bind(this)); // Documents this.bot.on('document', this.handleDocument.bind(this)); // Inline queries this.bot.on('inline_query', this.handleInlineQuery.bind(this)); // Callback queries this.bot.on('callback_query', this.handleCallbackQuery.bind(this)); } private async handleTextMessage(ctx: Context): Promise&lt;void&gt; { const message = ctx.message; const userId = message.from.id.toString(); const chatId = message.chat.id.toString(); // Build context const context = { userId, roomId: chatId, content: message.text, platform: 'telegram', metadata: { username: message.from.username, firstName: message.from.first_name, messageId: message.message_id, chatType: message.chat.type, }, }; // Process with runtime const response = await this.runtime.process(context); // Send response await this.sendResponse(ctx, response); } private async handleVoiceMessage(ctx: Context): Promise&lt;void&gt; { const voice = ctx.message.voice; // Download voice file const fileLink = await ctx.telegram.getFileLink(voice.file_id); const audioBuffer = await downloadFile(fileLink.toString()); // Transcribe audio const transcription = await this.transcribeAudio(audioBuffer); // Process as text await this.handleTextMessage({ ...ctx, message: { ...ctx.message, text: transcription, }, }); } } 3. Command System Implementation‚Äã // Command registry class CommandRegistry { private commands: Map&lt;string, CommandHandler&gt; = new Map(); register(command: string, handler: CommandHandler): void { this.commands.set(command, handler); } async execute(command: string, ctx: Context): Promise&lt;void&gt; { const handler = this.commands.get(command); if (!handler) { await ctx.reply('Unknown command. Type /help for available commands.'); return; } try { await handler.execute(ctx); } catch (error) { await ctx.reply('An error occurred processing your command.'); console.error(`Command error: ${command}`, error); } } } // Command handler interface interface CommandHandler { description: string; usage: string; execute(ctx: Context): Promise&lt;void&gt;; } // Example command implementation class HelpCommand implements CommandHandler { description = 'Show available commands'; usage = '/help'; async execute(ctx: Context): Promise&lt;void&gt; { const commands = [ '/start - Start conversation', '/help - Show this message', '/settings - Configure preferences', '/stats - View your statistics', '/clear - Clear conversation history', ]; await ctx.reply(`ü§ñ *Available Commands*\\n\\n${commands.join('\\n')}`, { parse_mode: 'Markdown', }); } } Advanced Features‚Äã 1. Inline Keyboards &amp; Buttons‚Äã // Interactive keyboard builder class KeyboardBuilder { static mainMenu(): InlineKeyboardMarkup { return { inline_keyboard: [ [ { text: 'üí¨ Chat', callback_data: 'action:chat' }, { text: '‚öôÔ∏è Settings', callback_data: 'action:settings' }, ], [ { text: 'üìä Stats', callback_data: 'action:stats' }, { text: '‚ùì Help', callback_data: 'action:help' }, ], ], }; } static settings(): InlineKeyboardMarkup { return { inline_keyboard: [ [ { text: 'üåê Language', callback_data: 'settings:language' }, { text: 'üîî Notifications', callback_data: 'settings:notifications' }, ], [ { text: 'üé® Theme', callback_data: 'settings:theme' }, { text: 'üë§ Profile', callback_data: 'settings:profile' }, ], [{ text: '‚¨ÖÔ∏è Back', callback_data: 'action:back' }], ], }; } static confirmation(action: string): InlineKeyboardMarkup { return { inline_keyboard: [ [ { text: '‚úÖ Yes', callback_data: `confirm:${action}:yes` }, { text: '‚ùå No', callback_data: `confirm:${action}:no` }, ], ], }; } } // Callback query handler bot.on('callback_query', async (ctx) =&gt; { const data = ctx.callbackQuery.data; const [type, action, ...params] = data.split(':'); switch (type) { case 'action': await handleAction(ctx, action); break; case 'settings': await handleSettings(ctx, action); break; case 'confirm': await handleConfirmation(ctx, action, params[0]); break; } // Answer callback query await ctx.answerCbQuery(); }); 2. Rich Media Handling‚Äã // Media message builder class MediaMessageBuilder { static async photo(ctx: Context, photoUrl: string, caption?: string): Promise&lt;void&gt; { await ctx.replyWithPhoto(photoUrl, { caption, parse_mode: 'HTML', reply_markup: KeyboardBuilder.mainMenu(), }); } static async document(ctx: Context, document: Buffer | string, filename: string): Promise&lt;void&gt; { await ctx.replyWithDocument( { source: document, filename, }, { caption: `üìé ${filename}`, parse_mode: 'Markdown', } ); } static async voice(ctx: Context, audioBuffer: Buffer): Promise&lt;void&gt; { await ctx.replyWithVoice({ source: audioBuffer, }); } static async mediaGroup(ctx: Context, media: InputMedia[]): Promise&lt;void&gt; { await ctx.replyWithMediaGroup(media); } } // Process image with vision async function processImage(ctx: Context): Promise&lt;void&gt; { const photo = ctx.message.photo.pop(); // Highest resolution const file = await ctx.telegram.getFile(photo.file_id); const imageUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`; // Process with vision model const analysis = await runtime.process({ content: 'Analyze this image', images: [imageUrl], userId: ctx.from.id.toString(), }); await ctx.reply(analysis.text); } 3. Session Management‚Äã // Session manager for conversation state class SessionManager { private sessions: Map&lt;string, UserSession&gt; = new Map(); private readonly SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes async getSession(userId: string): Promise&lt;UserSession&gt; { let session = this.sessions.get(userId); if (!session || this.isExpired(session)) { session = await this.createSession(userId); this.sessions.set(userId, session); } session.lastActivity = Date.now(); return session; } private async createSession(userId: string): Promise&lt;UserSession&gt; { // Load user data from database const userData = await this.loadUserData(userId); return { userId, conversationHistory: [], preferences: userData?.preferences || defaultPreferences, metadata: {}, createdAt: Date.now(), lastActivity: Date.now(), }; } private isExpired(session: UserSession): boolean { return Date.now() - session.lastActivity &gt; this.SESSION_TIMEOUT; } // Middleware for session management middleware() { return async (ctx: Context, next: () =&gt; Promise&lt;void&gt;) =&gt; { if (ctx.from) { ctx.session = await this.getSession(ctx.from.id.toString()); } await next(); }; } } // Use session in handlers bot.use(sessionManager.middleware()); bot.on('text', async (ctx) =&gt; { const session = ctx.session; // Add to conversation history session.conversationHistory.push({ role: 'user', content: ctx.message.text, timestamp: Date.now(), }); // Process with context const response = await runtime.process({ content: ctx.message.text, conversationHistory: session.conversationHistory, preferences: session.preferences, }); // Update history session.conversationHistory.push({ role: 'assistant', content: response.text, timestamp: Date.now(), }); }); Webhook vs Polling‚Äã 1. Webhook Configuration‚Äã // Webhook setup class WebhookManager { private app: Express; private bot: Telegraf; constructor(bot: Telegraf, webhookUrl: string) { this.bot = bot; this.app = express(); this.setupWebhook(webhookUrl); } private setupWebhook(webhookUrl: string): void { const webhookPath = `/telegram/${this.bot.secretPathComponent()}`; // Set webhook this.bot.telegram.setWebhook(`${webhookUrl}${webhookPath}`); // Setup express middleware this.app.use(express.json()); // Webhook endpoint this.app.post(webhookPath, (req, res) =&gt; { this.bot.handleUpdate(req.body); res.sendStatus(200); }); // Health check this.app.get('/health', (req, res) =&gt; { res.json({ status: 'ok', service: 'telegram-bot' }); }); } start(port: number): void { this.app.listen(port, () =&gt; { console.log(`Webhook server listening on port ${port}`); }); } } 2. Polling Configuration‚Äã // Enhanced polling with error handling class PollingManager { private bot: Telegraf; private pollingOptions: Telegraf.LaunchOptions; constructor(bot: Telegraf) { this.bot = bot; this.pollingOptions = { allowedUpdates: [ 'message', 'edited_message', 'callback_query', 'inline_query', 'chosen_inline_result', 'channel_post', 'edited_channel_post', ], dropPendingUpdates: true, pollingTimeout: 30, }; } async start(): Promise&lt;void&gt; { try { await this.bot.launch(this.pollingOptions); console.log('Bot started with long polling'); } catch (error) { console.error('Failed to start bot:', error); // Retry logic setTimeout(() =&gt; this.start(), 5000); } } stop(): void { this.bot.stop('SIGTERM'); } } Rate Limiting &amp; Throttling‚Äã // Rate limiter implementation class TelegramRateLimiter { private limits: Map&lt;string, RateLimit&gt; = new Map(); constructor( private config: { messagesPerMinute: number; burstSize: number; globalLimit: number; } ) {} async checkLimit(userId: string): Promise&lt;boolean&gt; { const userLimit = this.limits.get(userId) || this.createLimit(); const now = Date.now(); // Refill tokens const elapsed = now - userLimit.lastRefill; const tokensToAdd = Math.floor((elapsed / 60000) * this.config.messagesPerMinute); userLimit.tokens = Math.min(userLimit.tokens + tokensToAdd, this.config.burstSize); userLimit.lastRefill = now; // Check if user has tokens if (userLimit.tokens &gt; 0) { userLimit.tokens--; this.limits.set(userId, userLimit); return true; } return false; } middleware() { return async (ctx: Context, next: () =&gt; Promise&lt;void&gt;) =&gt; { if (!ctx.from) { await next(); return; } const allowed = await this.checkLimit(ctx.from.id.toString()); if (!allowed) { await ctx.reply( '‚è≥ Rate limit exceeded. Please wait a moment before sending more messages.', { reply_to_message_id: ctx.message?.message_id } ); return; } await next(); }; } } Group Chat Management‚Äã // Group chat handler class GroupChatHandler { private groupSettings: Map&lt;string, GroupSettings&gt; = new Map(); async handleGroupMessage(ctx: Context): Promise&lt;void&gt; { const chatId = ctx.chat.id.toString(); const settings = await this.getGroupSettings(chatId); // Check if bot was mentioned const botUsername = ctx.botInfo.username; const wasMentioned = ctx.message.text?.includes(`@${botUsername}`); const wasRepliedTo = ctx.message.reply_to_message?.from?.id === ctx.botInfo.id; // Only respond if configured to or mentioned if (!settings.alwaysRespond &amp;&amp; !wasMentioned &amp;&amp; !wasRepliedTo) { return; } // Process message await this.processGroupMessage(ctx, settings); } private async processGroupMessage(ctx: Context, settings: GroupSettings): Promise&lt;void&gt; { // Clean mention from text const text = ctx.message.text.replace(/@\\w+/g, '').trim(); const response = await runtime.process({ content: text, roomId: ctx.chat.id.toString(), userId: ctx.from.id.toString(), isGroupChat: true, groupSettings: settings, }); // Send response with reply await ctx.reply(response.text, { reply_to_message_id: ctx.message.message_id, allow_sending_without_reply: true, }); } } // Group administration commands bot.command('config', adminOnly(), async (ctx) =&gt; { const keyboard = { inline_keyboard: [ [{ text: 'üîä Always Respond', callback_data: 'group:toggle:always_respond' }], [{ text: 'üö´ Ignore List', callback_data: 'group:ignore_list' }], [{ text: '‚è∞ Quiet Hours', callback_data: 'group:quiet_hours' }], ], }; await ctx.reply('Group Configuration:', { reply_markup: keyboard }); }); Error Handling &amp; Recovery‚Äã // Comprehensive error handler class TelegramErrorHandler { private errorCounts: Map&lt;string, number&gt; = new Map(); private readonly MAX_RETRIES = 3; async handle(error: any, ctx: Context): Promise&lt;void&gt; { const errorKey = this.getErrorKey(error); const count = (this.errorCounts.get(errorKey) || 0) + 1; this.errorCounts.set(errorKey, count); console.error('Telegram error:', error); // Handle specific errors if (error.code === 429) { // Rate limit const retryAfter = error.parameters?.retry_after || 60; await this.handleRateLimit(ctx, retryAfter); } else if (error.code === 'ETELEGRAM') { // Telegram API error await this.handleApiError(ctx, error); } else if (count &lt; this.MAX_RETRIES) { // Retry await this.retry(ctx, error); } else { // Final failure await this.handleFinalFailure(ctx, error); } } private async handleRateLimit(ctx: Context, retryAfter: number): Promise&lt;void&gt; { console.log(`Rate limited. Retry after ${retryAfter} seconds`); setTimeout(async () =&gt; { try { await ctx.reply('Sorry for the delay. Processing your request now...'); } catch (e) { console.error('Failed to send delayed message:', e); } }, retryAfter * 1000); } private async retry(ctx: Context, error: any): Promise&lt;void&gt; { const delay = Math.pow(2, this.errorCounts.get(this.getErrorKey(error)) || 1) * 1000; setTimeout(async () =&gt; { try { // Retry the operation await ctx.scene.reenter(); } catch (e) { await this.handle(e, ctx); } }, delay); } } Testing Strategies‚Äã 1. Unit Testing‚Äã // Test Telegram handlers describe('TelegramService', () =&gt; { let service: TelegramService; let mockBot: jest.Mocked&lt;Telegraf&gt;; let mockRuntime: jest.Mocked&lt;IAgentRuntime&gt;; beforeEach(() =&gt; { mockBot = createMockBot(); mockRuntime = createMockRuntime(); service = new TelegramService({ bot: mockBot }); }); test('handles text message', async () =&gt; { const ctx = createMockContext({ message: { text: 'Hello bot' }, from: { id: 123, username: 'testuser' }, }); await service.handleMessage(ctx); expect(mockRuntime.process).toHaveBeenCalledWith({ content: 'Hello bot', userId: '123', platform: 'telegram', }); expect(ctx.reply).toHaveBeenCalled(); }); }); 2. Integration Testing‚Äã // Test bot flow describe('Telegram Bot Flow', () =&gt; { let bot: Telegraf; beforeAll(async () =&gt; { bot = new Telegraf(process.env.TEST_BOT_TOKEN); await bot.launch(); }); afterAll(() =&gt; { bot.stop(); }); test('command flow', async () =&gt; { const response = await sendCommand('/start'); expect(response.text).toContain('Welcome'); const helpResponse = await sendCommand('/help'); expect(helpResponse.text).toContain('Available commands'); }); }); Performance Optimization‚Äã 1. Message Queue‚Äã // Queue for handling high volume class MessageQueue { private queue: Queue&lt;QueuedMessage&gt;; private processing = false; constructor(private concurrency: number = 5) { this.queue = new Queue('telegram-messages', { connection: redis, }); this.queue.process(this.concurrency, async (job) =&gt; { await this.processMessage(job.data); }); } async add(message: QueuedMessage): Promise&lt;void&gt; { await this.queue.add(message, { attempts: 3, backoff: { type: 'exponential', delay: 2000, }, }); } private async processMessage(message: QueuedMessage): Promise&lt;void&gt; { const response = await runtime.process(message.context); await this.sendResponse(message.chatId, response); } } 2. Caching Strategy‚Äã // Response cache class ResponseCache { private cache: Redis; private readonly TTL = 300; // 5 minutes async get(key: string): Promise&lt;string | null&gt; { return await this.cache.get(key); } async set(key: string, value: string): Promise&lt;void&gt; { await this.cache.setex(key, this.TTL, value); } generateKey(message: string, userId: string): string { return `telegram:response:${createHash('md5').update(`${message}:${userId}`).digest('hex')}`; } } Security Best Practices‚Äã 1. Input Validation‚Äã // Validate and sanitize input class InputValidator { static validateCommand(input: string): boolean { const commandRegex = /^\\/[a-zA-Z0-9_]{1,32}(\\s.*)?$/; return commandRegex.test(input); } static sanitizeText(text: string): string { return text .replace(/[&lt;&gt;]/g, '') // Remove potential HTML .substring(0, 4096); // Telegram message limit } static validateCallbackData(data: string): boolean { return data.length &lt;= 64; // Telegram limit } } 2. Authentication Middleware‚Äã // User authentication const authenticate = () =&gt; { return async (ctx: Context, next: () =&gt; Promise&lt;void&gt;) =&gt; { const userId = ctx.from?.id; if (!userId) { await ctx.reply('Authentication required.'); return; } const user = await userService.authenticate(userId.toString()); if (!user) { await ctx.reply('Please register first using /start'); return; } ctx.state.user = user; await next(); }; }; Production Deployment‚Äã 1. Environment Configuration‚Äã # Required TELEGRAM_BOT_TOKEN=your_bot_token # Webhook (production) WEBHOOK_URL=https://your-domain.com WEBHOOK_PORT=8443 WEBHOOK_SECRET=random_secret_string # Database POSTGRES_URL=postgresql://... REDIS_URL=redis://... # Monitoring SENTRY_DSN=your_sentry_dsn LOG_LEVEL=info # Features ENABLE_VOICE=true ENABLE_GROUPS=true MAX_MESSAGE_LENGTH=4096 2. Docker Configuration‚Äã FROM node:18-alpine WORKDIR /app COPY package*.json ./ RUN bun install --production COPY . . # Health check HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\ CMD node healthcheck.js EXPOSE 8443 CMD [&quot;node&quot;, &quot;dist/index.js&quot;] Monitoring &amp; Analytics‚Äã // Analytics tracker class TelegramAnalytics { async trackEvent(event: string, properties: any): Promise&lt;void&gt; { await analytics.track({ event, properties: { ...properties, platform: 'telegram', timestamp: new Date(), }, }); } async trackMessage(ctx: Context): Promise&lt;void&gt; { await this.trackEvent('message_received', { userId: ctx.from?.id, chatType: ctx.chat?.type, messageType: ctx.message?.text ? 'text' : 'other', hasCommand: ctx.message?.text?.startsWith('/'), }); } } Resources‚Äã Telegram Bot API DocumentationTelegraf DocumentationElizaOS Telegram Plugin Source Next: Slack Technical Integration ‚Üí","keywords":"","version":"1.0.17"},{"title":"ElizaOS Farcaster Client","type":0,"sectionRef":"#","url":"/packages/clients/farcaster","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#overview","content":" The ElizaOS Farcaster Client allows AI agents to interact with the Farcaster social network by:  Publishing original casts (posts)Responding to mentions and repliesInteracting with other users' contentProcessing user engagement automatically  This client leverages the Neynar API to interact with Farcaster, providing a robust integration between ElizaOS agents and the Farcaster social graph.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#features","content":" Automated Posting: Schedule and publish regular casts with configurable intervalsEngagement Monitoring: Track mentions, replies, and interactionsConversation Threading: Build and maintain conversation context for natural interactionsDry Run Mode: Test functionality without actually posting to FarcasterConfigurable Settings: Customize behavior via environment variablesCaching: Efficient caching of profiles and casts for improved performance  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#installation","content":" npm install @elizaos-plugins/client-farcaster   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#configuration","content":" The client requires the following configurations, which can be set via environment variables or ElizaOS runtime settings:  ","version":"1.0.17","tagName":"h2"},{"title":"Required Settings‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#required-settings","content":" Parameter\tDescriptionFARCASTER_NEYNAR_API_KEY\tNeynar API key for accessing Farcaster FARCASTER_NEYNAR_SIGNER_UUID\tSigner UUID for your Farcaster account FARCASTER_FID\tYour Farcaster FID (identifier)  ","version":"1.0.17","tagName":"h3"},{"title":"Optional Settings‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#optional-settings","content":" Parameter\tDescription\tDefaultFARCASTER_DRY_RUN\tRun in simulation mode without posting (true/false)\tfalse MAX_CAST_LENGTH\tMaximum length of casts\t320 FARCASTER_POLL_INTERVAL\tInterval for checking mentions (minutes)\t2 ENABLE_POST\tEnable automatic posting (true/false)\ttrue POST_INTERVAL_MIN\tMinimum time between posts (minutes)\t90 POST_INTERVAL_MAX\tMaximum time between posts (minutes)\t180 ENABLE_ACTION_PROCESSING\tEnable processing interactions (true/false)\tfalse ACTION_INTERVAL\tInterval for processing actions (minutes)\t5 POST_IMMEDIATELY\tPost immediately on startup (true/false)\tfalse MAX_ACTIONS_PROCESSING\tMaximum actions to process in one cycle\t1 ACTION_TIMELINE_TYPE\tType of timeline to use for actions\tForYou  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration with ElizaOS‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#basic-integration-with-elizaos","content":" import { ElizaOS } from '@elizaos/core'; import farcasterPlugin from '@elizaos-plugins/client-farcaster'; // Initialize ElizaOS const elizaOs = new ElizaOS({ // ElizaOS configuration }); // Register the Farcaster plugin elizaOs.registerPlugin(farcasterPlugin); // Start ElizaOS elizaOs.start();   ","version":"1.0.17","tagName":"h3"},{"title":"Customizing Cast Templates‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#customizing-cast-templates","content":" You can customize the templates used for generating casts by providing custom templates in your agent character configuration:  const myCharacter = { name: 'My Agent', bio: 'A helpful AI assistant on Farcaster', templates: { farcasterPostTemplate: ` # Custom post template Write a thoughtful post about {{topic}} in the voice of {{agentName}}. `, farcasterMessageHandlerTemplate: ` # Custom reply template Respond to {{currentPost}} as {{agentName}} would. `, farcasterShouldRespondTemplate: ` # Custom response decision template Determine if {{agentName}} should respond to {{currentPost}}. `, }, };   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Build‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#build","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#testing","content":" npm test   ","version":"1.0.17","tagName":"h3"},{"title":"Development Mode‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#development-mode","content":" npm run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Architecture‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#architecture","content":" The client is organized into several core components:  FarcasterClient: Base client for interacting with the Farcaster network via NeynarFarcasterPostManager: Manages autonomous posting schedule and generationFarcasterInteractionManager: Handles mentions, replies, and other interactionsMemory Management: Stores conversation context and history  ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#dependencies","content":" @neynar/nodejs-sdk: Official SDK for Neynar API@elizaos/core: ElizaOS core framework  ","version":"1.0.17","tagName":"h2"},{"title":"Testing‚Äã","type":1,"pageTitle":"ElizaOS Farcaster Client","url":"/packages/clients/farcaster#testing-1","content":" The client includes comprehensive tests for:  Cast creation and managementInteraction handlingTimeline processing  Run the tests with:  npm test  ","version":"1.0.17","tagName":"h2"},{"title":"Client-GitHub for Eliza Framework","type":0,"sectionRef":"#","url":"/packages/clients/github","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#overview","content":" The client-github module is a component of the Eliza framework designed to interact with GitHub repositories. It provides functionalities to clone repositories, manage branches, create pull requests, and maintain file-based knowledge for Eliza agents.  This client leverages GitHub's REST API via the @octokit/rest library and includes robust error handling and configuration validation.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#features","content":" Repository Management: Clone, pull, and switch branchesFile Processing: Generate agent memories from repository filesPull Request Management: Create and manage pull requests programmaticallyCommit Operations: Stage, commit, and push files with easeKnowledge Base Integration: Convert repository content into agent memoriesBranch Management: Flexible branch switching and creation  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#installation","content":" Install the package as part of the Eliza framework: bash bun add @elizaos/client-github  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#configuration","content":" The GitHub client requires the following environment variables:  Variable\tDescription\tRequiredGITHUB_OWNER\tOwner of the GitHub repository\tYes GITHUB_REPO\tRepository name\tYes GITHUB_BRANCH\tTarget branch (default: main)\tYes GITHUB_PATH\tPath to focus on within the repo\tYes GITHUB_API_TOKEN\tGitHub API token for authentication\tYes  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Initialization‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#initialization","content":" typescript:packages/client-github/README.md  import { GitHubClientInterface } from '@elizaos/client-github'; // Initialize the client const client = await GitHubClientInterface.start(runtime);   ","version":"1.0.17","tagName":"h3"},{"title":"Creating Memories‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#creating-memories","content":" // Convert repository files to agent memories await client.createMemoriesFromFiles(); // Convert repository files to agent memories await client.createMemoriesFromFiles();   ","version":"1.0.17","tagName":"h3"},{"title":"Creating Pull Requests‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#creating-pull-requests","content":" await client.createPullRequest( 'Feature: Add new functionality', 'feature/new-feature', [ { path: 'src/feature.ts', content: '// New feature implementation', }, ], 'Implements new functionality with tests' ); await client.createPullRequest( 'Feature: Add new functionality', 'feature/new-feature', [ { path: 'src/feature.ts', content: '// New feature implementation', }, ], 'Implements new functionality with tests' );   ","version":"1.0.17","tagName":"h3"},{"title":"Direct Commits‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#direct-commits","content":" await client.createCommit('Update configuration', [ { path: 'config.json', content: JSON.stringify(config, null, 2), }, ]);   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"GitHubClientInterface‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#githubclientinterface","content":" start(runtime: IAgentRuntime): Initialize the clientstop(runtime: IAgentRuntime): Clean up resources  ","version":"1.0.17","tagName":"h3"},{"title":"GitHubClient‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#githubclient","content":" initialize(): Set up repository and configurationcreateMemoriesFromFiles(): Generate agent memoriescreatePullRequest(title: string, branch: string, files: Array&lt;{path: string, content: string}&gt;, description?: string): Create PRcreateCommit(message: string, files: Array&lt;{path: string, content: string}&gt;): Direct commit  ","version":"1.0.17","tagName":"h3"},{"title":"Scripts‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#scripts","content":" # Build the project bun run build # Development with watch mode bun run dev # Lint the codebase bun run lint   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#dependencies","content":" @elizaos/core: ^0.1.7-alpha.2@octokit/rest: ^20.1.1@octokit/types: ^12.6.0glob: ^10.4.5simple-git: ^3.27.0  ","version":"1.0.17","tagName":"h2"},{"title":"Development Dependencies‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#development-dependencies","content":" @types/glob: ^8.1.0tsup: ^8.3.5  ","version":"1.0.17","tagName":"h2"},{"title":"Contribution‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#contribution","content":" Contributions are welcome! Please ensure all code adheres to the framework's standards and passes linting checks.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Client-GitHub for Eliza Framework","url":"/packages/clients/github#license","content":" This project is licensed under the MIT License. See the LICENSE file for details. ","version":"1.0.17","tagName":"h2"},{"title":"client-lens","type":0,"sectionRef":"#","url":"/packages/clients/lens","content":"client-lens","keywords":"","version":"1.0.17"},{"title":"simsai","type":0,"sectionRef":"#","url":"/packages/clients/simsai","content":"simsai Deprecated: this plugin needs a maintainer.","keywords":"","version":"1.0.17"},{"title":"@elizaos/client-instagram","type":0,"sectionRef":"#","url":"/packages/clients/instagram","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/client-instagram","url":"/packages/clients/instagram#features","content":" Instagram API integration using instagram-private-apiMedia post creation and schedulingComment and interaction handlingProfile managementMedia processing utilitiesRate limiting and request queuingSession management and caching  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/client-instagram","url":"/packages/clients/instagram#installation","content":" As this is a workspace package, it's installed as part of the ElizaOS monorepo:  bun install   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/client-instagram","url":"/packages/clients/instagram#configuration","content":" The client requires the following environment variables:  # Instagram Credentials INSTAGRAM_USERNAME=your_username INSTAGRAM_PASSWORD=your_password INSTAGRAM_APP_ID=your_app_id INSTAGRAM_APP_SECRET=your_app_secret # Optional Business Account INSTAGRAM_BUSINESS_ACCOUNT_ID=your_business_account_id # Posting Configuration POST_INTERVAL_MIN=90 # Minimum interval between posts (minutes) POST_INTERVAL_MAX=180 # Maximum interval between posts (minutes) ENABLE_ACTION_PROCESSING=true ACTION_INTERVAL=5 # Minutes between action processing MAX_ACTIONS_PROCESSING=1 # Maximum actions to process per interval   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/client-instagram","url":"/packages/clients/instagram#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Initialization‚Äã","type":1,"pageTitle":"@elizaos/client-instagram","url":"/packages/clients/instagram#basic-initialization","content":" import { InstagramClientInterface } from '@elizaos/client-instagram'; // Initialize the client const instagramManager = await InstagramClientInterface.start(runtime);   ","version":"1.0.17","tagName":"h3"},{"title":"Posting Content‚Äã","type":1,"pageTitle":"@elizaos/client-instagram","url":"/packages/clients/instagram#posting-content","content":" All posts on Instagram must include media (image, video, or carousel):  // Post a single image await instagramManager.post.createPost({ media: [ { type: 'IMAGE', url: 'path/to/image.jpg', }, ], caption: 'Hello Instagram!', }); // Post a carousel await instagramManager.post.createPost({ media: [ { type: 'IMAGE', url: 'path/to/image1.jpg' }, { type: 'IMAGE', url: 'path/to/image2.jpg' }, ], caption: 'Check out these photos!', });   ","version":"1.0.17","tagName":"h3"},{"title":"Handling Interactions‚Äã","type":1,"pageTitle":"@elizaos/client-instagram","url":"/packages/clients/instagram#handling-interactions","content":" // Handle comments await instagramManager.interaction.handleComment({ mediaId: 'media-123', comment: 'Great post!', userId: 'user-123', }); // Like media await instagramManager.interaction.likeMedia('media-123');   ","version":"1.0.17","tagName":"h3"},{"title":"Key Components‚Äã","type":1,"pageTitle":"@elizaos/client-instagram","url":"/packages/clients/instagram#key-components","content":" ClientBase Handles authentication and session managementManages API rate limitingProvides core API functionality PostClient Manages media uploadsHandles post schedulingProcesses media before upload InteractionClient Handles comments and likesManages user interactionsProcesses notifications ","version":"1.0.17","tagName":"h2"},{"title":"Eliza Slack Client","type":0,"sectionRef":"#","url":"/packages/clients/slack","content":"","keywords":"","version":"1.0.17"},{"title":"Setup Guide‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#setup-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#prerequisites","content":" A Slack workspace where you have permissions to install appsngrok installed for local development (brew install ngrok on macOS)Node.js and bun installed  ","version":"1.0.17","tagName":"h3"},{"title":"Step 1: Start ngrok‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#step-1-start-ngrok","content":" Open a terminal and start ngrok on port 3069 (or your configured port): ngrok http 3069 Copy the HTTPS URL (e.g., https://xxxx-xx-xx-xx-xx.ngrok-free.app)Keep this terminal open - closing it will invalidate the URL  ","version":"1.0.17","tagName":"h3"},{"title":"Step 2: Create Slack App‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#step-2-create-slack-app","content":" Go to Slack API Apps pageClick &quot;Create New App&quot;Choose &quot;From an app manifest&quot;Select your workspaceCopy this manifest, replacing YOUR_NGROK_URL with your ngrok HTTPS URL:  display_information: name: eve description: Eve elizaos background_color: '#143187' features: app_home: home_tab_enabled: true messages_tab_enabled: true messages_tab_read_only_enabled: false bot_user: display_name: eve always_online: false oauth_config: scopes: bot: - app_mentions:read - channels:history - channels:join - channels:read - chat:write - files:read - files:write - groups:history - groups:read - im:history - im:read - im:write - mpim:history - mpim:read - mpim:write - users:read settings: event_subscriptions: request_url: YOUR_NGROK_URL/slack/events bot_events: - app_mention - message.channels - message.groups - message.im - message.mpim - file_shared interactivity: is_enabled: true request_url: YOUR_NGROK_URL/slack/interactions org_deploy_enabled: false socket_mode_enabled: false token_rotation_enabled: false   Click &quot;Create&quot;On the &quot;Basic Information&quot; page, scroll down to &quot;App Credentials&quot;Copy all the credentials - you'll need them in Step 3  ","version":"1.0.17","tagName":"h3"},{"title":"Step 2.5: Verify Event Subscription‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#step-25-verify-event-subscription","content":" Before proceeding to install the app, make sure to verify the event subscription:  In your Slack App settings, go to &quot;Event Subscriptions.&quot;Enter the request URL (your ngrok HTTPS URL followed by /slack/events).Slack will send a verification request to this URL.Ensure your server is running and configured to respond to the url_verification event by echoing back the challenge token provided in the request.Once verified, you will see a confirmation in your Slack app settings.  ","version":"1.0.17","tagName":"h3"},{"title":"Step 3: Configure Environment Variables‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#step-3-configure-environment-variables","content":" Create or edit .env file in your project root: SLACK_APP_ID= # From Basic Information &gt; App Credentials &gt; App ID SLACK_CLIENT_ID= # From Basic Information &gt; App Credentials &gt; Client ID SLACK_CLIENT_SECRET= # From Basic Information &gt; App Credentials &gt; Client Secret SLACK_SIGNING_SECRET= # From Basic Information &gt; App Credentials &gt; Signing Secret SLACK_BOT_TOKEN= # From OAuth &amp; Permissions &gt; Bot User OAuth Token (starts with xoxb-) SLACK_VERIFICATION_TOKEN= # From Basic Information &gt; App Credentials &gt; Verification Token SLACK_SERVER_PORT=3069 # Must match the port you used with ngrok   ","version":"1.0.17","tagName":"h3"},{"title":"Step 4: Install the App‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#step-4-install-the-app","content":" In your Slack App settings, go to &quot;Install App&quot;Click &quot;Install to Workspace&quot;Review the permissions and click &quot;Allow&quot;  ","version":"1.0.17","tagName":"h3"},{"title":"Step 5: Verify Installation‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#step-5-verify-installation","content":" Start your Eliza serverCheck the logs for successful connectionTest the bot: In Slack, invite the bot to a channel: /invite @eveTry mentioning the bot: @eve helloCheck your server logs for event reception  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues and Solutions‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#common-issues-and-solutions","content":" URL Verification Failed‚Äã  Make sure ngrok is running and the URL in your app settings matches exactlyCheck that the /slack/events endpoint is accessibleVerify your environment variables are set correctly  Bot Not Responding‚Äã  Check server logs for incoming eventsVerify the bot is in the channelEnsure all required scopes are grantedTry reinstalling the app to refresh permissions  Messages Not Received‚Äã  Verify Event Subscriptions are enabledCheck the Request URL is correct and verifiedConfirm all bot events are subscribedEnsure the bot token starts with xoxb-  ","version":"1.0.17","tagName":"h3"},{"title":"Updating ngrok URL‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#updating-ngrok-url","content":" If you restart ngrok, you'll get a new URL. You'll need to:  Copy the new ngrok HTTPS URLUpdate the Request URLs in your Slack App settings: Event Subscriptions &gt; Request URLInteractivity &amp; Shortcuts &gt; Request URL Wait for URL verification to complete  ","version":"1.0.17","tagName":"h3"},{"title":"Security Notes‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#security-notes","content":" Never commit your .env file or tokens to version controlRotate your tokens if they're ever exposedUse HTTPS URLs only for Request URLsKeep your ngrok and server running while testing  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Local Testing‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#local-testing","content":" Start ngrok: ngrok http 3069Update Slack App URLs with new ngrok URLStart the server: bun startMonitor logs for events and errors  ","version":"1.0.17","tagName":"h3"},{"title":"Debugging‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#debugging","content":" Enable detailed logging by setting:  DEBUG=eliza:*   ","version":"1.0.17","tagName":"h3"},{"title":"Adding New Features‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#adding-new-features","content":" Update the manifest if adding new scopesReinstall the app to apply new permissionsUpdate documentation for any new environment variables  ","version":"1.0.17","tagName":"h3"},{"title":"Support‚Äã","type":1,"pageTitle":"Eliza Slack Client","url":"/packages/clients/slack#support","content":" For issues or questions:  Check the Common Issues section aboveReview server logs for errorsVerify all setup steps are completedOpen an issue with: Error messagesServer logsSteps to reproduce ","version":"1.0.17","tagName":"h2"},{"title":"tako","type":0,"sectionRef":"#","url":"/packages/clients/tako","content":"","keywords":"","version":"1.0.17"},{"title":"Pre-Requisites‚Äã","type":1,"pageTitle":"tako","url":"/packages/clients/tako#pre-requisites","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Register a Tako Account‚Äã","type":1,"pageTitle":"tako","url":"/packages/clients/tako#register-a-tako-account","content":" Sign up for a Tako account on the Tako App and obtain your Tako ID.  Tako is developed in collaboration with Farcaster. Every Tako account must be linked to a Farcaster account.  The identifier for a Tako account is the Tako ID.The identifier for a Farcaster account is the FID. For more details, refer to the Farcaster Documentation.  ","version":"1.0.17","tagName":"h3"},{"title":"Obtain a Tako API Key‚Äã","type":1,"pageTitle":"tako","url":"/packages/clients/tako#obtain-a-tako-api-key","content":" Fill out and submit the application form: Open the Form.  After submitting the form, the review process will be completed within 48 hours.  API Documentation  Configurations  ","version":"1.0.17","tagName":"h3"},{"title":".env‚Äã","type":1,"pageTitle":"tako","url":"/packages/clients/tako#env","content":" TAKO_FID= # FID, not the Tako ID TAKO_API_KEY= # Tako API Key TAKO_API_URL= # Tako API URL, currently only supports: https://open-api.tako.so TAKO_PROACTIVE_COMMENTING= # Boolean type; if set to true, the agent account will proactively interact with content from users specified in TAKO_TARGET_FOLLOWERS, TAKO_TARGET_USERS, and TAKO_TARGET_COMMUNITIES at regular intervals (currently only supports commenting) TAKO_POLL_INTERVAL= # Interval for proactive interactions with users, in minutes; default is 2 minutes. TAKO_TARGET_FOLLOWERS= # Boolean type; if set to true, the agent account will proactively interact with Farcaster accounts it follows (currently only supports commenting) TAKO_TARGET_USERS= # Specify a list of FIDs (not Tako IDs); the agent will proactively interact with them (currently only supports commenting), format: &lt;fid1&gt;,&lt;fid2&gt;,&lt;fid3&gt; TAKO_TARGET_COMMUNITIES= # Specify a list of community IDs; the agent will proactively interact with content posted in these communities (currently only supports commenting), format: &lt;community id 1&gt;,&lt;community id 2&gt;,&lt;community id 3&gt; TAKO_BLACKLIST_USERS= # Specify a list of FIDs (not Tako IDs); the agent account will not interact with these accounts, format: `&lt;fid1&gt;,&lt;fid2&gt;,&lt;fid3&gt;` TAKO_CHAT_WITH_USER= # Boolean type; if set to true, the agent account will continuously reply to user comments TAKO_CHAT_INTERVAL= # Interval for replying to user comments, in minutes; default is 2 minutes TAKO_NEW_CAST= # Boolean type; if set to true, the agent account will periodically post new content TAKO_NEW_CAST_INTERVAL= # Interval for posting new content; default is 240 minutes TAKO_START_DELAY= # Boolean type; if set to true, when starting multiple agents using bun start --characters=&quot;1.character.json,2.character.json&quot;, each agent will have a random startup delay of 0-1 minutes to prevent excessive API requests TAKO_DRY_RUN=false # Boolean type; if set to true, the agent will generate tweets and comments but will not actually post them online   .env configuration can also be written in xx.character.json  ","version":"1.0.17","tagName":"h2"},{"title":"xx.character.json‚Äã","type":1,"pageTitle":"tako","url":"/packages/clients/tako#xxcharacterjson","content":" { ... &quot;settings&quot;: { &quot;secrets&quot;: { &quot;OPENAI_API_KEY&quot;: &quot;&quot; }, &quot;TAKO_FID&quot;: 0, &quot;TAKO_API_KEY&quot;: &quot;&quot;, &quot;TAKO_API_URL&quot;: &quot;&quot;, &quot;TAKO_PROACTIVE_COMMENTING&quot;: &quot;true&quot;, &quot;TAKO_POLL_INTERVAL&quot;: 60, &quot;TAKO_TARGET_FOLLOWERS&quot;: &quot;true&quot;, &quot;TAKO_TARGET_USERS&quot;: &quot;&lt;fid1&gt;,&lt;fid2&gt;,&lt;fid3&gt;&quot;, &quot;TAKO_TARGET_COMMUNITIES&quot;: &quot;tako,farcaster&quot;, &quot;TAKO_BLACKLIST_USERS&quot;: &quot;&lt;fid1&gt;,&lt;fid2&gt;,&lt;fid3&gt;&quot;, &quot;TAKO_CHAT_WITH_USER&quot;: &quot;true&quot;, &quot;TAKO_CHAT_INTERVAL&quot;: 2, &quot;TAKO_NEW_CAST&quot;: &quot;true&quot;, &quot;TAKO_NEW_CAST_INTERVAL&quot;: 360, &quot;TAKO_START_DELAY&quot;: &quot;true&quot;, &quot;TAKO_DRY_RUN&quot;: &quot;false&quot; } ... }  ","version":"1.0.17","tagName":"h2"},{"title":"Telegram Client Plugin for ElizaOS","type":0,"sectionRef":"#","url":"/packages/clients/telegram","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Telegram Client Plugin for ElizaOS","url":"/packages/clients/telegram#features","content":" Seamless Telegram Integration: Connects ElizaOS characters to Telegram through the bot API.Configuration Validation: Ensures required settings are properly configured before starting.Startup Logging: Logs successful initialization of the Telegram client for better debugging.Future-proof Design: Provides a basic structure for stopping the client (currently unsupported).  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration Options‚Äã","type":1,"pageTitle":"Telegram Client Plugin for ElizaOS","url":"/packages/clients/telegram#configuration-options","content":" Here are the available configuration options for the character.json file:  Key\tType\tDefault\tDescriptionclients\tArray\tRequired\tSpecifies the client type (e.g., [&quot;telegram&quot;]). allowDirectMessages\tBoolean\tfalse\tDetermines whether the bot should respond to direct messages (DMs). shouldOnlyJoinInAllowedGroups\tBoolean\tfalse\tEnsures the bot only joins and responds in specified groups. allowedGroupIds\tArray\t[]\tLists the group IDs the bot is allowed to interact with (requires shouldOnlyJoinInAllowedGroups). messageTrackingLimit\tInteger\t100\tSets the maximum number of messages to track in memory for each chat. templates\tObject\t{}\tAllows customization of response templates for different message scenarios.  ","version":"1.0.17","tagName":"h2"},{"title":"Example <charactername>.character.json‚Äã","type":1,"pageTitle":"Telegram Client Plugin for ElizaOS","url":"/packages/clients/telegram#example-characternamecharacterjson","content":" Below is an example configuration file with all options:  { &quot;clients&quot;: [&quot;telegram&quot;], &quot;allowDirectMessages&quot;: true, &quot;shouldOnlyJoinInAllowedGroups&quot;: true, &quot;allowedGroupIds&quot;: [&quot;-123456789&quot;, &quot;-987654321&quot;], &quot;messageTrackingLimit&quot;: 100, &quot;templates&quot;: { &quot;telegramMessageHandlerTemplate&quot;: &quot;Your custom template here&quot; }, &quot;secrets&quot;: { &quot;key&quot;: &quot;&lt;your-bot-token&gt;&quot; } }   ","version":"1.0.17","tagName":"h2"},{"title":"How to Modify Settings‚Äã","type":1,"pageTitle":"Telegram Client Plugin for ElizaOS","url":"/packages/clients/telegram#how-to-modify-settings","content":" Locate the character.json file in your project directory.Update the file with the desired configuration options as shown in the example above.Save the file and restart the bot for the changes to take effect.  ","version":"1.0.17","tagName":"h2"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"Telegram Client Plugin for ElizaOS","url":"/packages/clients/telegram#best-practices","content":" Production: Restrict bot access with shouldOnlyJoinInAllowedGroups: true and specify allowedGroupIds to ensure security.Token Management: Always keep your bot token and backend tokens secure and never expose them in public repositories.  ","version":"1.0.17","tagName":"h2"},{"title":"Pre-Requisites‚Äã","type":1,"pageTitle":"Telegram Client Plugin for ElizaOS","url":"/packages/clients/telegram#pre-requisites","content":" Add the bot token to the .env file in the project root:  TELEGRAM_BOT_TOKEN=your-bot-token   Add the same token to your character configuration file:  Create or modify characters/your-character.json:  { &quot;clients&quot;: [&quot;telegram&quot;], &quot;secrets&quot;: { &quot;key&quot;: &quot;&lt;your-bot-token&gt;&quot; } }   ","version":"1.0.17","tagName":"h2"},{"title":"From the project root:‚Äã","type":1,"pageTitle":"Telegram Client Plugin for ElizaOS","url":"/packages/clients/telegram#from-the-project-root","content":" npm run dev   ","version":"1.0.17","tagName":"h2"},{"title":"Or using bun:‚Äã","type":1,"pageTitle":"Telegram Client Plugin for ElizaOS","url":"/packages/clients/telegram#or-using-bun","content":" bun start --character=&quot;characters/your-character.json&quot;  ","version":"1.0.17","tagName":"h2"},{"title":"Client Telegram Account","type":0,"sectionRef":"#","url":"/packages/clients/telegram-account","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#features","content":" Connect to any Telegram account using API credentialsReceive and respond to direct messagesParticipate in group chats when mentioned (@username)Reply to messages that reply to the accountSupport for multi-part messages (automatically splits long messages)Proper Markdown formatting in responsesMedia attachment support  ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#prerequisites","content":" Before using this plugin, you need:  A Telegram account with an active phone numberTelegram API credentials (App ID and App Hash)ElizaOS installed and configured  ","version":"1.0.17","tagName":"h2"},{"title":"Setup‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#setup","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Get Telegram API Credentials‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#1-get-telegram-api-credentials","content":" Visit https://my.telegram.org/appsLog in with your Telegram account phone numberCreate a new application if you don't have one alreadyNote down the App api_id and App api_hash  ","version":"1.0.17","tagName":"h3"},{"title":"2. Configure the Plugin‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#2-configure-the-plugin","content":" Add the following environment variables to your ElizaOS configuration:  TELEGRAM_ACCOUNT_PHONE=&quot;+1234567890&quot; # Your phone number with country code TELEGRAM_ACCOUNT_APP_ID=12345 # Your Telegram API app_id TELEGRAM_ACCOUNT_APP_HASH=&quot;your_api_hash_here&quot; TELEGRAM_ACCOUNT_DEVICE_MODEL=&quot;Desktop&quot; # Device model to show in Telegram TELEGRAM_ACCOUNT_SYSTEM_VERSION=&quot;1.0&quot; # System version to show in Telegram   ","version":"1.0.17","tagName":"h3"},{"title":"3. Install the Plugin‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#3-install-the-plugin","content":" To install the plugin to your ElizaOS agent:  npm install @elizaos-plugins/client-telegram-account   ","version":"1.0.17","tagName":"h3"},{"title":"4. Add the Plugin to Your Agent Configuration‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#4-add-the-plugin-to-your-agent-configuration","content":" Add the Telegram Account client to your agent's configuration:  { &quot;clients&quot;: [&quot;telegramAccount&quot;] }   ","version":"1.0.17","tagName":"h3"},{"title":"5. First-time Authentication‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#5-first-time-authentication","content":" When running your agent for the first time with this plugin:  The plugin will prompt you to enter the authentication code sent to your Telegram accountEnter the code to authenticate your sessionThe session will be saved for future use  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#usage","content":" Once configured, your agent will:  Respond to direct messages automaticallyRespond in groups when specifically mentioned with @usernameRespond to replies to its own messagesProcess incoming media filesFormat responses using MarkdownSplit long messages into multiple parts if necessary  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration Options‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#configuration-options","content":" Environment Variable\tRequired\tDescriptionTELEGRAM_ACCOUNT_PHONE\tYes\tPhone number with country code TELEGRAM_ACCOUNT_APP_ID\tYes\tTelegram API application ID TELEGRAM_ACCOUNT_APP_HASH\tYes\tTelegram API application hash TELEGRAM_ACCOUNT_DEVICE_MODEL\tYes\tDevice model shown to other users TELEGRAM_ACCOUNT_SYSTEM_VERSION\tYes\tSystem version shown to other users  ","version":"1.0.17","tagName":"h2"},{"title":"Security Considerations‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#security-considerations","content":" Store your Telegram API credentials securely as they provide full access to your accountThe plugin stores the authentication session in ./data/telegram_account_session directoryBe mindful of rate limits and Telegram's terms of service  ","version":"1.0.17","tagName":"h2"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Authentication Issues‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#authentication-issues","content":" If you encounter authentication problems:  Make sure your app ID and hash are correctDelete the session file in ./data/telegram_account_session to reset authenticationEnsure your phone number is in the correct format (with country code)  ","version":"1.0.17","tagName":"h3"},{"title":"Response Problems‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#response-problems","content":" If your agent is not responding properly:  Check if the agent has the correct username in TelegramVerify the agent is being mentioned properly in groups with @usernameExamine the logs for any error messages  ","version":"1.0.17","tagName":"h3"},{"title":"Limitations‚Äã","type":1,"pageTitle":"Client Telegram Account","url":"/packages/clients/telegram-account#limitations","content":" The agent can only respond, it cannot initiate conversationsIn groups, it requires an explicit mention (@username) to respondCannot currently handle voice messages or stickers ","version":"1.0.17","tagName":"h2"},{"title":"Eliza Twitter/X Client","type":0,"sectionRef":"#","url":"/packages/clients/twitter","content":"Eliza Twitter/X Client ‚ö†Ô∏è DEPRECATION NOTICE This client is deprecated. We recommend migrating to alternative social media platforms like Farcaster or Discord.","keywords":"","version":"1.0.17"},{"title":"XMTP Client package","type":0,"sectionRef":"#","url":"/packages/clients/xmtp","content":"","keywords":"","version":"1.0.17"},{"title":"Architecture Overview‚Äã","type":1,"pageTitle":"XMTP Client package","url":"/packages/clients/xmtp#architecture-overview","content":"   ","version":"1.0.17","tagName":"h2"},{"title":"Available Client‚Äã","type":1,"pageTitle":"XMTP Client package","url":"/packages/clients/xmtp#available-client","content":" XMTP (@elizaos/client-xmtp) - XMTP agent integration  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"XMTP Client package","url":"/packages/clients/xmtp#installation","content":" # XMTP bun add @elizaos/client-xmtp   ","version":"1.0.17","tagName":"h2"},{"title":"XMTP Client‚Äã","type":1,"pageTitle":"XMTP Client package","url":"/packages/clients/xmtp#xmtp-client","content":" The XMTP client enables secure, decentralized, and encrypted messaging.  ","version":"1.0.17","tagName":"h2"},{"title":"Basic Setup‚Äã","type":1,"pageTitle":"XMTP Client package","url":"/packages/clients/xmtp#basic-setup","content":" import { XmtpClientInterface } from &quot;@elizaos/client-xmtp&quot;; // Initialize the XMTP client const client = await XmtpClientInterface.start(runtime); // Configuration in .env WALLET_KEY= // the private key of the wallet ENCRYPTION_KEY= // a second random 32 bytes encryption key for local db encryption   For more information about XMTP visit it's agent examples repo  ","version":"1.0.17","tagName":"h3"},{"title":"Why XMTP‚Äã","type":1,"pageTitle":"XMTP Client package","url":"/packages/clients/xmtp#why-xmtp","content":" End-to-end &amp; compliant: Data is encrypted in transit and at rest, meeting strict security and regulatory standards.Open-source &amp; trustless: Built on top of the MLS protocol, it replaces trust in centralized certificate authorities with cryptographic proofs.Privacy &amp; metadata protection: Offers anonymous or pseudonymous usage with no tracking of sender routes, IPs, or device and message timestamps.Decentralized: Operates on a peer-to-peer network, eliminating single points of failure.Multi-tenant: Allows multi-agent multi-human confidential communication over MLS group chats.  See FAQ for more detailed information.  ","version":"1.0.17","tagName":"h2"},{"title":"Web inbox‚Äã","type":1,"pageTitle":"XMTP Client package","url":"/packages/clients/xmtp#web-inbox","content":" Interact with the XMTP protocol using xmtp.chat the official web inbox for developers using the latest version powered by MLS. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-0x","type":0,"sectionRef":"#","url":"/packages/plugins/0x","content":"","keywords":"","version":"1.0.17"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#configuration","content":" Set the following environment variables:  WALLET_PRIVATE_KEY=your_private_key ZERO_EX_API_KEY=your_0x_api_key {chain}_RPC_URL=your_rpc_endpoint   ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#installation","content":" bun install @elizaos/plugin-0x   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#basic-integration","content":" import { zeroExPlugin } from '@elizaos/plugin-0x';   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#example-usage","content":" The plugin supports natural language commands for ETH transfers:  'I want to convert 1 ETH to USDC on ethereum chain'; 'Give me the quote'; 'Execute it';   ","version":"1.0.17","tagName":"h3"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#available-actions","content":" The plugin provides the following actions:  GET_INDICATIVE_PRICE_0X: Get indicative prices for token swaps Example: &quot;Get quote for swapping 1 ETH to USDC on Ethereum chain&quot;Example: &quot;Price check for trading 100 USDT to MATIC on Polygon chain&quot; GET_QUOTE_0X: Get the quote for the swap. Quote expires in 5mins. (This action is triggered only after user has requested for an indicative price. No need to repeat the buy/sell tokens because the last indicative price will be stored in the memory) Example: &quot;Get quote&quot; EXECUTE_SWAP_0X: Execute token swaps. (Action is triggered only after user has gotten a quote) Example: &quot;Execute the swap&quot;  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#security-best-practices","content":" Environment Variables Never commit private keys to version controlUse secure environment variable managementRotate private keys periodically  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#credits","content":" This plugin integrates with:  0x Protocol  For more information about 0x capabilities:  0x API Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-0x","url":"/packages/plugins/0x#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-0g","type":0,"sectionRef":"#","url":"/packages/plugins/0g","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#description","content":" The 0G plugin enables seamless integration with the Zero Gravity (0G) protocol for decentralized file storage. It provides functionality to upload files to the 0G network.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#installation","content":" bun install @elizaos/plugin-0g   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#configuration","content":" The plugin requires the following environment variables to be set:  ZEROG_INDEXER_RPC=&lt;0G indexer RPC endpoint&gt; ZEROG_EVM_RPC=&lt;0G EVM RPC endpoint&gt; ZEROG_PRIVATE_KEY=&lt;Private key for transactions&gt; ZEROG_FLOW_ADDRESS=&lt;0G Flow contract address&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#basic-integration","content":" import { zgPlugin } from '@eliza/plugin-0g';   ","version":"1.0.17","tagName":"h3"},{"title":"File Upload Example‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#file-upload-example","content":" // The plugin automatically handles file uploads when triggered // through natural language commands like: 'Upload my document.pdf'; 'Store this image.png on 0G'; 'Save my resume.docx to Zero Gravity';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#actions","content":" ZG_UPLOAD‚Äã  Uploads files to the 0G network.  Aliases:  UPLOAD_FILE_TO_ZGSTORE_FILE_ON_ZGSAVE_FILE_TO_ZGUPLOAD_TO_ZERO_GRAVITYSTORE_ON_ZERO_GRAVITYSHARE_FILE_ON_ZGPUBLISH_FILE_TO_ZG  Input Content:  interface UploadContent { filePath: string; }   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#common-issues--troubleshooting","content":" File Access Errors Ensure the file exists at the specified pathCheck file permissionsVerify the path is absolute or relative to the execution context Configuration Issues Verify all required environment variables are setEnsure RPC endpoints are accessibleConfirm private key has sufficient permissions  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#security-best-practices","content":" Environment Variables Never commit private keys to version controlUse secure environment variable managementRotate private keys periodically  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run the plugin:  bun run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#future-enhancements","content":" Storage Management Multi-file upload optimizationFolder structure preservationAutomated file replicationStorage redundancy managementFile versioning systemArchival storage options Content Distribution CDN integrationBandwidth optimizationGeographic replicationEdge caching supportP2P content deliveryStreaming optimization Data Security Enhanced encryption optionsAccess control listsKey management systemData integrity verificationSecure sharing mechanismsPrivacy-preserving features Integration Features Additional blockchain supportCross-chain functionalitySmart contract integrationNFT storage optimizationDApp integration toolsAPI expansion Performance Optimization Upload speed improvementsParallel processingCompression algorithmsCaching mechanismsNetwork optimizationResource management Developer Tools Enhanced SDK featuresCLI tool improvementsTesting frameworkMonitoring dashboardAnalytics integrationDocumentation generator Content Management Metadata managementSearch functionalityContent indexingTag systemCollection managementBatch operations Protocol Features Model service deploymentKV store implementationState persistenceDatabase integrationEnhanced file metadataProtocol governance  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#credits","content":" This plugin integrates with and builds upon several key technologies:  Zero Gravity (0G): Decentralized file storage protocolIPFS: InterPlanetary File SystemFilecoin: Decentralized storage networkFlow: Blockchain for open worldsContent Addressable Storage: Storage architecture  Special thanks to:  The 0G Protocol development teamThe Protocol Labs team for IPFSThe Filecoin FoundationThe Flow blockchain teamThe decentralized storage communityThe Eliza community for their contributions and feedback  For more information about 0G capabilities:  0G DocumentationIPFS DocumentationFilecoin DocsFlow Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-0g","url":"/packages/plugins/0g#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-3d-generation","type":0,"sectionRef":"#","url":"/packages/plugins/3d-generation","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#description","content":" The 3D Generation plugin enables AI-powered creation of 3D models through FAL.ai's services. It provides functionality to generate 3D models from text descriptions and save them locally.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#installation","content":" bun install @elizaos/plugin-3d-generation   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#configuration","content":" The plugin requires the following environment variable or runtime setting to be set:  FAL_API_KEY=&lt;Your FAL.ai API key&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#basic-integration","content":" import { ThreeDGenerationPlugin } from '@elizaos/plugin-3d-generation';   ","version":"1.0.17","tagName":"h3"},{"title":"Model Generation Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#model-generation-examples","content":" // The plugin responds to natural language commands like: 'Generate a 3D object of a cat playing piano'; 'Create a 3D object of an anime character Goku'; 'Make a 3D model of [your description]';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#actions","content":" GENERATE_3D‚Äã  Generates 3D models based on text descriptions.  Aliases:  3D_GENERATION3D_GENCREATE_3DMAKE_3DTEXT23DTEXT_TO_3D3D_CREATE3D_MAKE  Default Configuration:  { geometry_file_format: &quot;glb&quot;, // Available: glb, usdz, fbx, obj, stl material: &quot;PBR&quot;, // Available: PBR, Shaded quality: &quot;medium&quot;, // Available: extra-low, low, medium, high tier: &quot;Regular&quot; // Available: Regular, Sketch }   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#common-issues--troubleshooting","content":" Generation Failures Verify FAL API key is correctly setEnsure prompt is descriptive (minimum 3 characters)Check network connectivity to FAL.ai services Storage Issues Verify write permissions to content_cache directoryEnsure sufficient disk spaceCheck if content_cache directory exists  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#security-best-practices","content":" API Key Management Store FAL API key securely using runtime settings or environment variablesNever commit API keys to version controlMonitor API usage  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run the plugin:  bun run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#future-enhancements","content":" Advanced Generation Features Multi-object scene generationTexture customization optionsAnimation supportMaterial property controlsAdvanced lighting systemsPhysics-based rendering Model Optimization Automatic mesh simplificationLOD (Level of Detail) generationTexture compressionFile size optimizationPerformance profilingMobile-friendly exports Format Support Additional file format exportsCustom format convertersBatch format conversionFormat-specific optimizationsMetadata preservationVersion control integration AI Improvements Enhanced prompt understandingStyle transfer capabilitiesReal-time generationMulti-model supportQuality improvementsConsistency controls Scene Management Scene composition toolsEnvironment managementAsset library integrationScene presetsBatch processingScene version control Developer Tools API expansionTesting frameworkDocumentation generatorDebug visualizationPerformance monitoringIntegration templates Rendering Features Real-time previewCustom shader supportPost-processing effectsRender queue managementBatch renderingCloud rendering options Collaboration Features Asset sharingVersion controlTeam workspaceReview systemAccess controlChange tracking  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#credits","content":" This plugin integrates with and builds upon several key technologies:  FAL.ai: AI model deployment platformThree.js: 3D graphics libraryglTF: 3D file format standardUSD: Universal Scene DescriptionBlender: 3D creation suite  Special thanks to:  The FAL.ai team for AI infrastructureThe Three.js development communityThe Khronos Group for glTF standardsThe Pixar USD teamThe Blender FoundationThe Eliza community for their contributions and feedback  For more information about 3D generation capabilities:  FAL.ai DocumentationThree.js DocumentationglTF SpecificationUSD Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-3d-generation","url":"/packages/plugins/3d-generation#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-abstract","type":0,"sectionRef":"#","url":"/packages/plugins/abstract","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#description","content":" The Abstract plugin enables seamless token transfers on the Abstract testnet. It provides functionality to transfer both native ETH and ERC20 tokens using secure wallet operations.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#installation","content":" bun install @elizaos/plugin-abstract   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#configuration","content":" The plugin requires the following environment variables to be set:  ABSTRACT_ADDRESS=&lt;Your Abstract wallet address&gt; ABSTRACT_PRIVATE_KEY=&lt;Your Abstract private key&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#basic-integration","content":" import { abstractPlugin } from '@elizaos/plugin-abstract';   ","version":"1.0.17","tagName":"h3"},{"title":"Transfer Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#transfer-examples","content":" // The plugin responds to natural language commands like: 'Send 100 USDC to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62'; 'Transfer 0.1 ETH to 0xbD8679cf79137042214fA4239b02F4022208EE82'; 'Pay 50 USDC on Abstract to [address]';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#actions","content":" SEND_TOKEN‚Äã  Transfers tokens from the agent's wallet to another address.  Aliases:  TRANSFER_TOKEN_ON_ABSTRACTTRANSFER_TOKENS_ON_ABSTRACTSEND_TOKENS_ON_ABSTRACTSEND_ETH_ON_ABSTRACTPAY_ON_ABSTRACTMOVE_TOKENS_ON_ABSTRACTMOVE_ETH_ON_ABSTRACT  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#common-issues--troubleshooting","content":" Transaction Failures Verify wallet has sufficient balanceCheck recipient address formatEnsure private key is correctly setVerify network connectivity Configuration Issues Verify all required environment variables are setEnsure private key format is correctCheck wallet address format  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#security-best-practices","content":" Private Key Management Store private key securely using environment variablesNever commit private keys to version controlUse separate wallets for development and productionMonitor wallet activity regularly  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run the plugin:  bun run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#future-enhancements","content":" Smart Account Features Multi-signature supportAccount recovery mechanismsBatch transaction processingAdvanced permission managementAccount abstraction improvementsSocial recovery options DEX Integration Advanced swap routingLiquidity pool managementYield farming automationPrice impact analysisSlippage protectionAMM optimization Security Enhancements Transaction simulationRisk assessment toolsRate limiting controlsFraud detection systemEmergency shutdown featuresAudit integration tools Developer Tools Enhanced debugging capabilitiesDocumentation generatorCLI tool improvementsTesting utilitiesDeployment automationPerformance profiling Analytics and Monitoring Transaction tracking dashboardNetwork statisticsPerformance metricsGas usage optimizationCustom reporting toolsReal-time monitoring Wallet Management Multiple wallet supportHardware wallet integrationAddress book featuresTransaction history analysisBalance monitoringToken management tools  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#credits","content":" This plugin integrates with and builds upon several key technologies:  Abstract: Consumer blockchainviem: Typescript web3 client  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/abstract#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Coinbase Advanced API TypeScript SDK","type":0,"sectionRef":"#","url":"/packages/plugins/advanced-sdk-ts","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"Coinbase Advanced API TypeScript SDK","url":"/packages/plugins/advanced-sdk-ts#installation","content":" npm install     ","version":"1.0.17","tagName":"h2"},{"title":"Build and Use‚Äã","type":1,"pageTitle":"Coinbase Advanced API TypeScript SDK","url":"/packages/plugins/advanced-sdk-ts#build-and-use","content":" To build the project, run the following command:  npm run build   Note: To avoid potential issues, do not forget to build your project again after making any changes to it.  After building the project, each .ts file will have its .js counterpart generated.  To run a file, use the following command:  node dist/{INSERT-FILENAME}.js   For example, a main.ts file would be run like:  node dist/main.js     ","version":"1.0.17","tagName":"h2"},{"title":"Coinbase Developer Platform (CDP) API Keys‚Äã","type":1,"pageTitle":"Coinbase Advanced API TypeScript SDK","url":"/packages/plugins/advanced-sdk-ts#coinbase-developer-platform-cdp-api-keys","content":" This SDK uses Cloud Developer Platform (CDP) API keys. To use this SDK, you will need to create a CDP API key and secret by following the instructions here. Make sure to save your API key and secret in a safe place. You will not be able to retrieve your secret again.    ","version":"1.0.17","tagName":"h2"},{"title":"Importing the RESTClient‚Äã","type":1,"pageTitle":"Coinbase Advanced API TypeScript SDK","url":"/packages/plugins/advanced-sdk-ts#importing-the-restclient","content":" All the REST endpoints are available directly from the client, therefore it's all you need to import.  import { RESTClient } from './rest';     ","version":"1.0.17","tagName":"h2"},{"title":"Authentication‚Äã","type":1,"pageTitle":"Coinbase Advanced API TypeScript SDK","url":"/packages/plugins/advanced-sdk-ts#authentication","content":" Authentication of CDP API Keys is handled automatically by the SDK when making a REST request.  After creating your CDP API keys, store them using your desired method and simply pass them into the client during initialization like:  const client = new RESTClient(API_KEY, API_SECRET);     ","version":"1.0.17","tagName":"h2"},{"title":"Making Requests‚Äã","type":1,"pageTitle":"Coinbase Advanced API TypeScript SDK","url":"/packages/plugins/advanced-sdk-ts#making-requests","content":" Here are a few examples requests:  List Accounts  client .listAccounts({}) .then((result) =&gt; { console.log(result); }) .catch((error) =&gt; { console.error(error.message); });   Get Product  client .getProduct({productId: &quot;BTC-USD&quot;}) .then((result) =&gt; { console.log(result); }) .catch((error) =&gt; { console.error(error.message); });   Create Order  $10 Market Buy on BTC-USD  client .createOrder({ clientOrderId: &quot;00000001&quot;, productId: &quot;BTC-USD&quot;, side: OrderSide.BUY, orderConfiguration:{ market_market_ioc: { quote_size: &quot;10&quot; } } }) .then((result) =&gt; { console.log(result); }) .catch((error) =&gt; { console.error(error.message); });  ","version":"1.0.17","tagName":"h2"},{"title":"Twitter Technical Integration Guide","type":0,"sectionRef":"#","url":"/docs/technical/integrations/twitter-technical","content":"Twitter Technical Integration Guide This guide covers the technical implementation details of Twitter integration in ElizaOS, including API implementation, architecture patterns, and advanced development techniques. Architecture Overview‚Äã Twitter Plugin Architecture‚Äã The ElizaOS Twitter integration follows a modular plugin architecture: interface TwitterPlugin { name: string; description: string; clients: TwitterClient[]; providers: TwitterProvider[]; actions: TwitterAction[]; evaluators: TwitterEvaluator[]; services: TwitterService[]; } Core Components‚Äã Twitter Client Implementation‚Äã Basic Client Structure‚Äã import { TwitterApi } from 'twitter-api-v2'; import { Client, IAgentRuntime } from '@elizaos/core'; export class TwitterClient extends Client { private twitter: TwitterApi; private runtime: IAgentRuntime; constructor(runtime: IAgentRuntime) { super(); this.runtime = runtime; this.initializeTwitterApi(); } private initializeTwitterApi(): void { this.twitter = new TwitterApi({ appKey: process.env.TWITTER_API_KEY!, appSecret: process.env.TWITTER_API_SECRET!, accessToken: process.env.TWITTER_ACCESS_TOKEN!, accessSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET!, }); } async start(): Promise&lt;void&gt; { console.log('Starting Twitter client...'); // Start monitoring mentions and DMs await this.startMentionMonitoring(); await this.startDirectMessageMonitoring(); // Start periodic posting if enabled if (this.shouldStartPeriodicPosting()) { await this.startPeriodicPosting(); } } async stop(): Promise&lt;void&gt; { console.log('Stopping Twitter client...'); // Cleanup and stop monitoring } } Authentication Implementation‚Äã interface TwitterAuthConfig { apiKey: string; apiSecret: string; accessToken: string; accessTokenSecret: string; bearerToken?: string; clientId?: string; clientSecret?: string; } class TwitterAuth { private config: TwitterAuthConfig; constructor(config: TwitterAuthConfig) { this.config = config; } // OAuth 1.0a implementation async authenticateOAuth1(): Promise&lt;TwitterApi&gt; { return new TwitterApi({ appKey: this.config.apiKey, appSecret: this.config.apiSecret, accessToken: this.config.accessToken, accessSecret: this.config.accessTokenSecret, }); } // OAuth 2.0 implementation for newer features async authenticateOAuth2(): Promise&lt;TwitterApi&gt; { return new TwitterApi({ clientId: this.config.clientId!, clientSecret: this.config.clientSecret!, }); } // Bearer token for read-only operations async authenticateBearerToken(): Promise&lt;TwitterApi&gt; { return new TwitterApi(this.config.bearerToken!); } } Content Generation System‚Äã Dynamic Content Pipeline‚Äã interface ContentGenerationContext { character: Character; recentTweets: Tweet[]; mentions: Mention[]; trends: Trend[]; sentiment: SentimentAnalysis; timeContext: TimeContext; } class TwitterContentGenerator { private runtime: IAgentRuntime; constructor(runtime: IAgentRuntime) { this.runtime = runtime; } async generateTweet(context: ContentGenerationContext): Promise&lt;string&gt; { // Build comprehensive context for AI generation const prompt = this.buildContentPrompt(context); // Generate content using AI model const response = await this.runtime.model.generate({ prompt, context: this.buildModelContext(context), temperature: 0.8, maxTokens: 100, // Twitter character limit consideration }); // Post-process and validate content return this.postProcessContent(response.text, context); } private buildContentPrompt(context: ContentGenerationContext): string { return ` Generate a Twitter post for ${context.character.name} with the following context: Character Personality: ${JSON.stringify(context.character.personality, null, 2)} Recent Activity: ${context.recentTweets.map((t) =&gt; `- ${t.text}`).join('\\n')} Current Trends: ${context.trends.map((t) =&gt; `- ${t.name}`).join('\\n')} Time Context: ${context.timeContext.timeOfDay} on ${context.timeContext.dayOfWeek} Requirements: - Stay in character - Be engaging and authentic - Include relevant hashtags (2-3 max) - Stay under 280 characters - Avoid repetition of recent posts `; } private postProcessContent(content: string, context: ContentGenerationContext): string { // Remove unwanted characters content = content.replace(/[^\\w\\s@#.,!?'&quot;-]/g, ''); // Ensure character limit if (content.length &gt; 280) { content = content.substring(0, 277) + '...'; } // Add context-appropriate hashtags content = this.addRelevantHashtags(content, context); return content.trim(); } private addRelevantHashtags(content: string, context: ContentGenerationContext): string { const character = context.character; const hashtagsToAdd: string[] = []; // Add character-specific hashtags if (character.topics) { const relevantTopics = character.topics.slice(0, 2); hashtagsToAdd.push(...relevantTopics.map((topic) =&gt; `#${topic.replace(/\\s+/g, '')}`)); } // Add trending hashtags if relevant const relevantTrends = context.trends .filter((trend) =&gt; character.topics?.some((topic) =&gt; trend.name.toLowerCase().includes(topic.toLowerCase())) ) .slice(0, 1); hashtagsToAdd.push(...relevantTrends.map((trend) =&gt; trend.name)); // Append hashtags if they fit within character limit let finalContent = content; for (const hashtag of hashtagsToAdd) { const testContent = `${finalContent} ${hashtag}`; if (testContent.length &lt;= 280) { finalContent = testContent; } else { break; } } return finalContent; } } Engagement Management‚Äã Intelligent Response System‚Äã interface EngagementContext { mention: Mention; userHistory: UserInteraction[]; conversationThread: Tweet[]; userProfile: TwitterUser; sentiment: SentimentScore; } class TwitterEngagementManager { private runtime: IAgentRuntime; private responseStrategies: Map&lt;string, ResponseStrategy&gt;; constructor(runtime: IAgentRuntime) { this.runtime = runtime; this.initializeResponseStrategies(); } async handleMention(mention: Mention): Promise&lt;void&gt; { // Analyze engagement context const context = await this.buildEngagementContext(mention); // Determine if response is appropriate if (!(await this.shouldRespond(context))) { return; } // Generate contextual response const response = await this.generateResponse(context); // Post response with rate limiting await this.postResponse(mention, response); } private async shouldRespond(context: EngagementContext): Promise&lt;boolean&gt; { // Check sentiment if (context.sentiment.score &lt; -0.5) { console.log('Skipping negative sentiment mention'); return false; } // Check for spam indicators if (this.isSpamLikely(context.mention)) { return false; } // Check rate limiting if (await this.isRateLimited(context.userProfile.id)) { return false; } // Check if we can add value to the conversation return this.canAddValue(context); } private async generateResponse(context: EngagementContext): Promise&lt;string&gt; { const strategy = this.getResponseStrategy(context); const prompt = ` Respond to this Twitter mention as ${this.runtime.character.name}: Original Tweet: &quot;${context.mention.text}&quot; User: @${context.mention.user.username} User Profile: ${context.userProfile.description} Conversation Context: ${context.conversationThread.map((t) =&gt; t.text).join(' -&gt; ')} Response Strategy: ${strategy.name} Character Personality: ${JSON.stringify(this.runtime.character.personality)} Requirements: - Stay in character - Be helpful and engaging - Keep response under 280 characters - Match the tone of the conversation - Add value to the discussion `; const response = await this.runtime.model.generate({ prompt, temperature: 0.7, maxTokens: 80, }); return this.validateResponse(response.text, context); } private getResponseStrategy(context: EngagementContext): ResponseStrategy { // Determine strategy based on context if (context.mention.text.includes('?')) { return this.responseStrategies.get('question')!; } if (context.sentiment.score &gt; 0.7) { return this.responseStrategies.get('positive')!; } if (context.userHistory.length &gt; 5) { return this.responseStrategies.get('familiar')!; } return this.responseStrategies.get('default')!; } } Data Models and Storage‚Äã Twitter Data Models‚Äã interface TwitterUser { id: string; username: string; displayName: string; description: string; followersCount: number; followingCount: number; tweetCount: number; verified: boolean; createdAt: Date; } interface Tweet { id: string; text: string; authorId: string; createdAt: Date; replyToTweetId?: string; quoteTweetId?: string; retweetCount: number; likeCount: number; replyCount: number; hashtags: string[]; mentions: string[]; urls: string[]; media?: MediaAttachment[]; } interface Mention extends Tweet { mentionedUserId: string; isReply: boolean; isQuoteTweet: boolean; conversationId: string; } interface UserInteraction { userId: string; interactionType: 'mention' | 'reply' | 'retweet' | 'like'; tweetId: string; timestamp: Date; sentiment: SentimentScore; responseGenerated: boolean; responseId?: string; } Database Schema‚Äã -- Twitter users table CREATE TABLE twitter_users ( id VARCHAR(255) PRIMARY KEY, username VARCHAR(255) UNIQUE NOT NULL, display_name VARCHAR(255), description TEXT, followers_count INTEGER DEFAULT 0, following_count INTEGER DEFAULT 0, tweet_count INTEGER DEFAULT 0, verified BOOLEAN DEFAULT FALSE, created_at TIMESTAMP, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); -- Tweets table CREATE TABLE tweets ( id VARCHAR(255) PRIMARY KEY, text TEXT NOT NULL, author_id VARCHAR(255) REFERENCES twitter_users(id), created_at TIMESTAMP, reply_to_tweet_id VARCHAR(255), quote_tweet_id VARCHAR(255), retweet_count INTEGER DEFAULT 0, like_count INTEGER DEFAULT 0, reply_count INTEGER DEFAULT 0, hashtags JSON, mentions JSON, urls JSON, media JSON, INDEX idx_author_created (author_id, created_at), INDEX idx_mentions (mentions), INDEX idx_created_at (created_at) ); -- User interactions table CREATE TABLE user_interactions ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), user_id VARCHAR(255) REFERENCES twitter_users(id), interaction_type VARCHAR(50) NOT NULL, tweet_id VARCHAR(255) REFERENCES tweets(id), timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, sentiment_score DECIMAL(3,2), response_generated BOOLEAN DEFAULT FALSE, response_id VARCHAR(255), INDEX idx_user_timestamp (user_id, timestamp), INDEX idx_interaction_type (interaction_type), INDEX idx_timestamp (timestamp) ); -- Content generation history CREATE TABLE content_generation_history ( id UUID PRIMARY KEY DEFAULT gen_random_uuid(), agent_id VARCHAR(255) NOT NULL, content_type VARCHAR(50) NOT NULL, generated_content TEXT NOT NULL, context_data JSON, generation_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, posted_tweet_id VARCHAR(255), engagement_metrics JSON, INDEX idx_agent_timestamp (agent_id, generation_timestamp), INDEX idx_content_type (content_type) ); Advanced Features Implementation‚Äã Trend Analysis and Topic Detection‚Äã class TwitterTrendAnalyzer { private runtime: IAgentRuntime; private trendCache: Map&lt;string, TrendData[]&gt;; constructor(runtime: IAgentRuntime) { this.runtime = runtime; this.trendCache = new Map(); } async analyzeTrends(location: string = 'worldwide'): Promise&lt;TrendData[]&gt; { // Check cache first const cached = this.trendCache.get(location); if (cached &amp;&amp; this.isCacheValid(cached)) { return cached; } // Fetch trends from Twitter API const trends = await this.fetchTrendsFromAPI(location); // Analyze trend relevance to character const relevantTrends = await this.filterRelevantTrends(trends); // Cache results this.trendCache.set(location, relevantTrends); return relevantTrends; } private async filterRelevantTrends(trends: RawTrend[]): Promise&lt;TrendData[]&gt; { const character = this.runtime.character; const relevantTrends: TrendData[] = []; for (const trend of trends) { const relevanceScore = await this.calculateTrendRelevance(trend, character); if (relevanceScore &gt; 0.3) { relevantTrends.push({ ...trend, relevanceScore, suggestedHashtags: this.generateHashtagSuggestions(trend), contentOpportunities: await this.identifyContentOpportunities(trend, character), }); } } return relevantTrends.sort((a, b) =&gt; b.relevanceScore - a.relevanceScore); } private async calculateTrendRelevance(trend: RawTrend, character: Character): Promise&lt;number&gt; { // Use AI to calculate relevance score const prompt = ` Rate the relevance of this trending topic to the character on a scale of 0-1: Trending Topic: ${trend.name} Topic Description: ${trend.description || 'No description'} Character Interests: ${character.topics?.join(', ') || 'General'} Character Bio: ${character.bio?.join(' ') || 'No bio'} Character Personality: ${JSON.stringify(character.personality)} Return only a number between 0 and 1. `; const response = await this.runtime.model.generate({ prompt, temperature: 0.1, maxTokens: 5, }); return Math.min(1, Math.max(0, parseFloat(response.text) || 0)); } } Sentiment Analysis Integration‚Äã interface SentimentAnalysisResult { score: number; // -1 to 1 magnitude: number; // 0 to 1 emotions: { joy: number; anger: number; fear: number; sadness: number; surprise: number; }; confidence: number; } class TwitterSentimentAnalyzer { private sentimentAPI: SentimentAPI; constructor() { this.sentimentAPI = new SentimentAPI(); } async analyzeTweet(tweet: string): Promise&lt;SentimentAnalysisResult&gt; { // Clean tweet text const cleanText = this.cleanTweetForAnalysis(tweet); // Analyze sentiment using multiple methods const [basicSentiment, emotionAnalysis, contextualSentiment] = await Promise.all([ this.basicSentimentAnalysis(cleanText), this.emotionAnalysis(cleanText), this.contextualSentimentAnalysis(cleanText), ]); // Combine results return this.combineSentimentResults(basicSentiment, emotionAnalysis, contextualSentiment); } private cleanTweetForAnalysis(tweet: string): string { return tweet .replace(/https?:\\/\\/[^\\s]+/g, '') // Remove URLs .replace(/@\\w+/g, '') // Remove mentions .replace(/#\\w+/g, '') // Remove hashtags .replace(/[^\\w\\s.,!?]/g, '') // Remove special characters .trim(); } private async basicSentimentAnalysis(text: string): Promise&lt;SentimentScore&gt; { // Implement basic sentiment analysis const response = await this.sentimentAPI.analyze(text); return { score: response.compound, positive: response.pos, negative: response.neg, neutral: response.neu, }; } private async emotionAnalysis(text: string): Promise&lt;EmotionScores&gt; { // Implement emotion detection const emotions = await this.sentimentAPI.analyzeEmotions(text); return emotions; } } Performance Optimization‚Äã Rate Limiting and Request Management‚Äã class TwitterRateLimiter { private endpoints: Map&lt;string, RateLimitInfo&gt;; private requestQueue: RequestQueue; constructor() { this.endpoints = new Map(); this.requestQueue = new RequestQueue(); this.initializeRateLimits(); } async makeRequest&lt;T&gt;(endpoint: string, requestFn: () =&gt; Promise&lt;T&gt;): Promise&lt;T&gt; { // Check rate limit await this.checkRateLimit(endpoint); // Add to queue return this.requestQueue.add(async () =&gt; { try { const result = await requestFn(); this.updateRateLimitInfo(endpoint); return result; } catch (error) { if (this.isRateLimitError(error)) { await this.handleRateLimitError(endpoint, error); throw error; } throw error; } }); } private async checkRateLimit(endpoint: string): Promise&lt;void&gt; { const rateLimitInfo = this.endpoints.get(endpoint); if (!rateLimitInfo) { return; // No rate limit info, proceed } const now = Date.now(); const timeSinceReset = now - rateLimitInfo.resetTime; if (timeSinceReset &lt; 0 &amp;&amp; rateLimitInfo.remaining &lt;= 0) { // Wait until reset time const waitTime = -timeSinceReset; console.log(`Rate limit reached for ${endpoint}, waiting ${waitTime}ms`); await this.sleep(waitTime); } } private updateRateLimitInfo(endpoint: string): void { const info = this.endpoints.get(endpoint); if (info) { info.remaining = Math.max(0, info.remaining - 1); } } private async handleRateLimitError(endpoint: string, error: any): Promise&lt;void&gt; { // Extract rate limit info from error headers const resetTime = parseInt(error.headers?.['x-rate-limit-reset']) * 1000; const remaining = parseInt(error.headers?.['x-rate-limit-remaining']) || 0; this.endpoints.set(endpoint, { limit: parseInt(error.headers?.['x-rate-limit-limit']) || 300, remaining, resetTime, }); // Wait until reset if needed const waitTime = resetTime - Date.now(); if (waitTime &gt; 0) { await this.sleep(waitTime); } } } Caching Strategy‚Äã class TwitterCacheManager { private cache: Map&lt;string, CacheEntry&gt;; private readonly defaultTTL = 5 * 60 * 1000; // 5 minutes constructor() { this.cache = new Map(); this.startCleanupInterval(); } async get&lt;T&gt;(key: string, fetcher: () =&gt; Promise&lt;T&gt;, ttl?: number): Promise&lt;T&gt; { const cached = this.cache.get(key); if (cached &amp;&amp; !this.isExpired(cached)) { return cached.data as T; } // Fetch fresh data const data = await fetcher(); // Cache the result this.set(key, data, ttl); return data; } set&lt;T&gt;(key: string, data: T, ttl?: number): void { const expiresAt = Date.now() + (ttl || this.defaultTTL); this.cache.set(key, { data, expiresAt, createdAt: Date.now(), }); } private isExpired(entry: CacheEntry): boolean { return Date.now() &gt; entry.expiresAt; } private startCleanupInterval(): void { setInterval(() =&gt; { const now = Date.now(); for (const [key, entry] of this.cache.entries()) { if (now &gt; entry.expiresAt) { this.cache.delete(key); } } }, 60000); // Cleanup every minute } // Cache strategies for different data types async getUserProfile(userId: string): Promise&lt;TwitterUser&gt; { return this.get( `user:${userId}`, () =&gt; this.fetchUserProfile(userId), 30 * 60 * 1000 // 30 minutes TTL for user profiles ); } async getTrends(location: string): Promise&lt;TrendData[]&gt; { return this.get( `trends:${location}`, () =&gt; this.fetchTrends(location), 15 * 60 * 1000 // 15 minutes TTL for trends ); } async getConversationHistory(tweetId: string): Promise&lt;Tweet[]&gt; { return this.get( `conversation:${tweetId}`, () =&gt; this.fetchConversationHistory(tweetId), 10 * 60 * 1000 // 10 minutes TTL for conversations ); } } Testing and Quality Assurance‚Äã Unit Testing Framework‚Äã describe('TwitterClient', () =&gt; { let client: TwitterClient; let mockRuntime: jest.Mocked&lt;IAgentRuntime&gt;; let mockTwitterApi: jest.Mocked&lt;TwitterApi&gt;; beforeEach(() =&gt; { mockRuntime = createMockRuntime(); mockTwitterApi = createMockTwitterApi(); client = new TwitterClient(mockRuntime); }); describe('Content Generation', () =&gt; { it('should generate tweet within character limit', async () =&gt; { const context = createTestContext(); const tweet = await client.generateTweet(context); expect(tweet.length).toBeLessThanOrEqual(280); expect(tweet).toContain('#'); expect(tweet).not.toContain('undefined'); }); it('should maintain character personality', async () =&gt; { const context = createTestContext({ character: { personality: 'professional and helpful' }, }); const tweet = await client.generateTweet(context); // Use AI to verify personality consistency const personalityScore = await analyzePersonality(tweet, context.character); expect(personalityScore).toBeGreaterThan(0.7); }); }); describe('Engagement Management', () =&gt; { it('should respond to appropriate mentions', async () =&gt; { const mention = createTestMention({ sentiment: 0.8 }); await client.handleMention(mention); expect(mockTwitterApi.v2.reply).toHaveBeenCalledWith(expect.stringMatching(/.+/), mention.id); }); it('should ignore negative sentiment mentions', async () =&gt; { const mention = createTestMention({ sentiment: -0.8 }); await client.handleMention(mention); expect(mockTwitterApi.v2.reply).not.toHaveBeenCalled(); }); }); describe('Rate Limiting', () =&gt; { it('should respect rate limits', async () =&gt; { // Simulate rate limit reached mockTwitterApi.v2.tweet.mockRejectedValueOnce(new Error('Rate limit exceeded')); const postPromise = client.postTweet('Test tweet'); // Should wait and retry await expect(postPromise).resolves.not.toThrow(); }); }); }); Integration Testing‚Äã describe('Twitter Integration', () =&gt; { let testAgent: TestAgent; let twitterClient: TwitterClient; beforeAll(async () =&gt; { testAgent = await createTestAgent({ character: loadTestCharacter('twitter-test-character.json'), clients: ['twitter'], }); twitterClient = testAgent.getClient('twitter') as TwitterClient; }); afterAll(async () =&gt; { await testAgent.cleanup(); }); it('should handle full tweet lifecycle', async () =&gt; { // 1. Generate and post tweet const tweet = await twitterClient.generateAndPostTweet(); expect(tweet.id).toBeDefined(); // 2. Monitor for engagement const mention = await simulateMention(tweet.id); // 3. Generate response await waitForResponse(mention.id); // 4. Verify response was posted const responses = await twitterClient.getResponses(mention.id); expect(responses).toHaveLength(1); expect(responses[0].text).toMatch(/^@/); // Should start with mention }); it('should maintain conversation context', async () =&gt; { const conversation = await simulateConversation([ { text: '@testagent what do you think about AI?', user: 'testuser' }, { text: '@testagent can you elaborate?', user: 'testuser' }, ]); const responses = await twitterClient.getConversationResponses(conversation.id); expect(responses).toHaveLength(2); expect(responses[1].text).toContain(conversation.context); }); }); Deployment and Monitoring‚Äã Production Configuration‚Äã // Production configuration example const productionConfig: TwitterConfig = { authentication: { apiKey: process.env.TWITTER_API_KEY!, apiSecret: process.env.TWITTER_API_SECRET!, accessToken: process.env.TWITTER_ACCESS_TOKEN!, accessTokenSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET!, }, rateLimit: { tweetsPerHour: 20, repliesPerHour: 50, requestsPerMinute: 300, }, monitoring: { enableMetrics: true, enableLogging: true, logLevel: 'info', metricsEndpoint: '/metrics', }, safety: { contentFiltering: true, sentimentThreshold: -0.5, spamDetection: true, rateLimitProtection: true, }, performance: { cacheEnabled: true, cacheTTL: 300000, // 5 minutes maxConcurrentRequests: 5, requestTimeout: 30000, // 30 seconds }, }; Monitoring and Alerting‚Äã class TwitterMonitoring { private metrics: MetricsCollector; private alerts: AlertManager; constructor() { this.metrics = new MetricsCollector(); this.alerts = new AlertManager(); this.setupMetrics(); } private setupMetrics(): void { // Tweet metrics this.metrics.createCounter('tweets_posted_total'); this.metrics.createCounter('tweets_failed_total'); this.metrics.createHistogram('tweet_generation_duration'); // Engagement metrics this.metrics.createCounter('mentions_received_total'); this.metrics.createCounter('replies_sent_total'); this.metrics.createGauge('engagement_rate'); // Performance metrics this.metrics.createHistogram('api_request_duration'); this.metrics.createCounter('rate_limit_hits_total'); this.metrics.createGauge('cache_hit_rate'); } trackTweetPosted(tweet: Tweet, duration: number): void { this.metrics.incrementCounter('tweets_posted_total'); this.metrics.recordHistogram('tweet_generation_duration', duration); } trackTweetFailed(error: Error): void { this.metrics.incrementCounter('tweets_failed_total', { error: error.name }); // Alert on high failure rate if (this.getTweetFailureRate() &gt; 0.1) { this.alerts.send({ severity: 'warning', message: 'High tweet failure rate detected', metadata: { error: error.message }, }); } } trackEngagement(mention: Mention, responseGenerated: boolean): void { this.metrics.incrementCounter('mentions_received_total'); if (responseGenerated) { this.metrics.incrementCounter('replies_sent_total'); } this.updateEngagementRate(); } private updateEngagementRate(): void { const totalMentions = this.metrics.getCounterValue('mentions_received_total'); const totalReplies = this.metrics.getCounterValue('replies_sent_total'); const engagementRate = totalReplies / totalMentions; this.metrics.setGauge('engagement_rate', engagementRate); } private getTweetFailureRate(): number { const failed = this.metrics.getCounterValue('tweets_failed_total'); const total = this.metrics.getCounterValue('tweets_posted_total') + failed; return total &gt; 0 ? failed / total : 0; } } Security Considerations‚Äã API Key Management‚Äã class TwitterSecurityManager { private keyRotationInterval: number = 30 * 24 * 60 * 60 * 1000; // 30 days private encryptionService: EncryptionService; constructor() { this.encryptionService = new EncryptionService(); this.setupKeyRotation(); } encryptCredentials(credentials: TwitterCredentials): EncryptedCredentials { return { apiKey: this.encryptionService.encrypt(credentials.apiKey), apiSecret: this.encryptionService.encrypt(credentials.apiSecret), accessToken: this.encryptionService.encrypt(credentials.accessToken), accessTokenSecret: this.encryptionService.encrypt(credentials.accessTokenSecret), encryptedAt: Date.now(), }; } decryptCredentials(encryptedCreds: EncryptedCredentials): TwitterCredentials { return { apiKey: this.encryptionService.decrypt(encryptedCreds.apiKey), apiSecret: this.encryptionService.decrypt(encryptedCreds.apiSecret), accessToken: this.encryptionService.decrypt(encryptedCreds.accessToken), accessTokenSecret: this.encryptionService.decrypt(encryptedCreds.accessTokenSecret), }; } private setupKeyRotation(): void { setInterval( async () =&gt; { await this.rotateKeysIfNeeded(); }, 24 * 60 * 60 * 1000 ); // Check daily } private async rotateKeysIfNeeded(): Promise&lt;void&gt; { const credentials = await this.getStoredCredentials(); if (this.shouldRotateKeys(credentials)) { console.log('Rotating Twitter API keys...'); await this.rotateApiKeys(); } } } Content Safety‚Äã class TwitterContentSafety { private contentFilter: ContentFilter; private sentimentAnalyzer: SentimentAnalyzer; constructor() { this.contentFilter = new ContentFilter(); this.sentimentAnalyzer = new SentimentAnalyzer(); } async validateContent(content: string): Promise&lt;ContentValidationResult&gt; { const validations = await Promise.all([ this.checkProfanity(content), this.checkToxicity(content), this.checkSentiment(content), this.checkComplianceRules(content), ]); return { isValid: validations.every((v) =&gt; v.passed), violations: validations.filter((v) =&gt; !v.passed), riskScore: this.calculateRiskScore(validations), }; } private async checkProfanity(content: string): Promise&lt;ValidationCheck&gt; { const hasProfanity = await this.contentFilter.containsProfanity(content); return { type: 'profanity', passed: !hasProfanity, severity: hasProfanity ? 'high' : 'none', }; } private async checkToxicity(content: string): Promise&lt;ValidationCheck&gt; { const toxicityScore = await this.contentFilter.analyzeToxicity(content); return { type: 'toxicity', passed: toxicityScore &lt; 0.3, severity: toxicityScore &gt; 0.7 ? 'high' : toxicityScore &gt; 0.3 ? 'medium' : 'none', score: toxicityScore, }; } private async checkSentiment(content: string): Promise&lt;ValidationCheck&gt; { const sentiment = await this.sentimentAnalyzer.analyze(content); return { type: 'sentiment', passed: sentiment.score &gt; -0.8, // Allow slightly negative content severity: sentiment.score &lt; -0.8 ? 'medium' : 'none', score: sentiment.score, }; } } Troubleshooting and Debugging‚Äã Debug Logging‚Äã class TwitterDebugger { private logger: Logger; private debugMode: boolean; constructor(debugMode: boolean = false) { this.debugMode = debugMode; this.logger = new Logger('TwitterClient'); } logApiRequest(endpoint: string, params: any): void { if (this.debugMode) { this.logger.debug('API Request', { endpoint, params: this.sanitizeParams(params), timestamp: new Date().toISOString(), }); } } logContentGeneration(context: ContentGenerationContext, result: string): void { if (this.debugMode) { this.logger.debug('Content Generated', { characterName: context.character.name, contentLength: result.length, hashtags: this.extractHashtags(result), mentions: this.extractMentions(result), timestamp: new Date().toISOString(), }); } } logEngagement(mention: Mention, response?: string): void { this.logger.info('Engagement Event', { mentionId: mention.id, userId: mention.authorId, hasResponse: !!response, responseLength: response?.length || 0, timestamp: new Date().toISOString(), }); } logError(error: Error, context?: any): void { this.logger.error('Twitter Error', { error: error.message, stack: error.stack, context: this.sanitizeContext(context), timestamp: new Date().toISOString(), }); } private sanitizeParams(params: any): any { // Remove sensitive information from logs const sanitized = { ...params }; delete sanitized.accessToken; delete sanitized.accessSecret; delete sanitized.apiKey; delete sanitized.apiSecret; return sanitized; } private sanitizeContext(context: any): any { if (!context) return context; const sanitized = { ...context }; // Remove sensitive user data if (sanitized.user) { delete sanitized.user.email; delete sanitized.user.phone; } return sanitized; } } This comprehensive technical guide covers all aspects of Twitter integration in ElizaOS, from basic implementation to advanced features, security, monitoring, and troubleshooting. It provides developers with the technical depth needed to effectively implement, customize, and maintain Twitter functionality in their ElizaOS agents.","keywords":"","version":"1.0.17"},{"title":"@elizaos/plugin-agentkit","type":0,"sectionRef":"#","url":"/packages/plugins/agentkit","content":"","keywords":"","version":"1.0.17"},{"title":"Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-agentkit","url":"/packages/plugins/agentkit#setup","content":" Install dependencies:  bun install   Configure environment variables:  CDP_API_KEY_NAME=your_key_name CDP_API_KEY_PRIVATE_KEY=your_private_key CDP_AGENT_KIT_NETWORK=base-sepolia # Optional: Defaults to base-sepolia   Add the plugin to your character configuration:  { &quot;plugins&quot;: [&quot;@elizaos/plugin-agentkit&quot;], &quot;settings&quot;: { &quot;secrets&quot;: { &quot;CDP_API_KEY_NAME&quot;: &quot;your_key_name&quot;, &quot;CDP_API_KEY_PRIVATE_KEY&quot;: &quot;your_private_key&quot; } } }   ","version":"1.0.17","tagName":"h2"},{"title":"Available Tools‚Äã","type":1,"pageTitle":"@elizaos/plugin-agentkit","url":"/packages/plugins/agentkit#available-tools","content":" The plugin provides access to the following CDP AgentKit tools:  GET_WALLET_DETAILS: Get wallet informationDEPLOY_NFT: Deploy a new NFT collectionDEPLOY_TOKEN: Deploy a new tokenGET_BALANCE: Check token or NFT balanceMINT_NFT: Mint NFTs from a collectionREGISTER_BASENAME: Register a basename for NFTsREQUEST_FAUCET_FUNDS: Request testnet fundsTRADE: Execute tradesTRANSFER: Transfer tokens or NFTsWOW_BUY_TOKEN: Buy WOW tokensWOW_SELL_TOKEN: Sell WOW tokensWOW_CREATE_TOKEN: Create new WOW tokens  ","version":"1.0.17","tagName":"h2"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-agentkit","url":"/packages/plugins/agentkit#usage-examples","content":" Get wallet details:  Can you show me my wallet details?   Deploy an NFT collection:  Deploy a new NFT collection called &quot;Music NFTs&quot; with symbol &quot;MUSIC&quot;   Create a token:  Create a new WOW token called &quot;Artist Token&quot; with symbol &quot;ART&quot;   Check balance:  What's my current balance?   ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-agentkit","url":"/packages/plugins/agentkit#development","content":" Build the plugin:  bun build   Run in development mode:  bun dev   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-agentkit","url":"/packages/plugins/agentkit#dependencies","content":" @elizaos/core@coinbase/cdp-agentkit-core@coinbase/cdp-langchain@langchain/core  ","version":"1.0.17","tagName":"h2"},{"title":"Network Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-agentkit","url":"/packages/plugins/agentkit#network-support","content":" The plugin supports the following networks:  Base Sepolia (default)Base Mainnet  Configure the network using the CDP_AGENT_KIT_NETWORK environment variable.  ","version":"1.0.17","tagName":"h2"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-agentkit","url":"/packages/plugins/agentkit#troubleshooting","content":" If tools are not being triggered: Verify CDP API key configurationCheck network settingsEnsure character configuration includes the plugin Common errors: &quot;Cannot find package&quot;: Make sure dependencies are installed&quot;API key not found&quot;: Check environment variables&quot;Network error&quot;: Verify network configuration  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-agentkit","url":"/packages/plugins/agentkit#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"Akash Network Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/akash","content":"","keywords":"","version":"1.0.17"},{"title":"Table of Contents‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#table-of-contents","content":" InstallationConfigurationDirectory StructureAvailable Actions  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#installation","content":" bun add @elizaos/plugin-akash   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#environment-variables","content":" Create a .env file in your project root with the following configuration:  # Network Configuration AKASH_ENV=mainnet AKASH_NET=https://raw.githubusercontent.com/ovrclk/net/master/mainnet RPC_ENDPOINT=https://rpc.akashnet.net:443 # Transaction Settings AKASH_GAS_PRICES=0.025uakt AKASH_GAS_ADJUSTMENT=1.5 AKASH_KEYRING_BACKEND=os AKASH_FROM=default AKASH_FEES=20000uakt # Authentication AKASH_MNEMONIC=your_12_word_mnemonic_here # Manifest Settings AKASH_MANIFEST_MODE=auto # Options: auto, validate_only AKASH_MANIFEST_VALIDATION_LEVEL=strict # Options: strict, basic, none AKASH_MANIFEST_PATH=/path/to/manifests # Optional: Path to save generated manifests # Deployment Settings AKASH_DEPOSIT=5000000uakt # Default deployment deposit AKASH_SDL=deployment.yml # Default SDL file name   Important Notes:  AKASH_MNEMONIC: Your 12-word wallet mnemonic phrase (required)AKASH_MANIFEST_MODE: Controls manifest generation behaviorAKASH_MANIFEST_VALIDATION_LEVEL: Sets SDL validation strictnessAKASH_DEPOSIT: Default deposit amount for deployments  ‚ö†Ô∏è Never commit your .env file with real credentials to version control!  SDL (Stack Definition Language)‚Äã  src/sdl/example.sdl.yml   Place your SDL configuration files here. The plugin looks for SDL files in this directory by default.  Certificates‚Äã  src/.certificates/   SSL certificates for secure provider communication are stored here.  ","version":"1.0.17","tagName":"h3"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#available-actions","content":" Action\tDescription\tParametersCREATE_DEPLOYMENT\tCreate a new deployment\tsdl, sdlFile, deposit CLOSE_DEPLOYMENT\tClose an existing deployment\tdseq, owner GET_PROVIDER_INFO\tGet provider information\tprovider GET_DEPLOYMENT_STATUS\tCheck deployment status\tdseq, owner GET_GPU_PRICING\tGet GPU pricing comparison\tcpu, memory, storage GET_MANIFEST\tGenerate deployment manifest\tsdl, sdlFile GET_PROVIDERS_LIST\tList available providers\tfilter: { active, hasGPU, region }  Each action returns a structured response with:  { text: string; // Human-readable response content: { success: boolean; // Operation success status data?: any; // Action-specific data error?: { // Present only on failure code: string; message: string; }; metadata: { // Operation metadata timestamp: string; source: string; action: string; version: string; actionId: string; } } }   ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#error-handling","content":" The plugin includes comprehensive error handling with specific error codes:  VALIDATION_SDL_FAILED: SDL validation errorsWALLET_NOT_INITIALIZED: Wallet setup issuesDEPLOYMENT_CREATION_FAILED: Deployment failuresAPI_REQUEST_FAILED: Network/API issuesMANIFEST_PARSING_FAILED: Manifest generation errorsPROVIDER_FILTER_ERROR: Provider filtering issues  ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Running Tests‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#running-tests","content":" bun test   ","version":"1.0.17","tagName":"h3"},{"title":"Building‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#building","content":" bun run build   ","version":"1.0.17","tagName":"h3"},{"title":"License‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#license","content":" This project is licensed under the MIT License - see the LICENSE file for details.  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"Akash Network Plugin for Eliza","url":"/packages/plugins/akash#support","content":" For support and questions, please open an issue in the repository or contact the maintainers. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-allora","type":0,"sectionRef":"#","url":"/packages/plugins/allora","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#installation","content":" bun add @elizaos/plugin-allora   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#environment-variables","content":" ALLORA_API_KEY=your_api_key # Required: Allora API key ALLORA_CHAIN_SLUG=testnet # Optional: Defaults to testnet   ","version":"1.0.17","tagName":"h3"},{"title":"Character Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#character-configuration","content":" Add the plugin to your character's configuration:  import { alloraPlugin } from '@elizaos/plugin-allora'; const character = { plugins: [alloraPlugin], settings: { secrets: { ALLORA_API_KEY: 'your_api_key', }, }, };   ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#features","content":" Real-time Inference Access: Get live predictions across various topicsTopic Management: Automatic discovery and caching of available topicsSmart Caching: 30-minute cache duration for optimal performanceNatural Language Interface: Simple conversational commands for accessing predictions  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#usage","content":" Users can request inferences using natural language:  &quot;What is the predicted ETH price in 5 minutes?&quot; &quot;Can you check the current BTC prediction?&quot;   Example Response:  &quot;Inference provided by Allora Network on topic ETH 5min (Topic ID: 13): 3393.364326646801085508&quot;   ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#actions","content":" GET_INFERENCE: Retrieves predictions for a specific topic Aliases: GET_ALLORA_INFERENCE, GET_TOPIC_INFERENCE, ALLORA_INFERENCE, TOPIC_INFERENCEAutomatically matches user requests to available topicsReturns formatted inference results with topic details  ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#providers","content":" topicsProvider: Manages topic information and caching Provides context about available Allora Network topicsImplements 30-minute caching for optimizationReturns formatted topic information including names, descriptions, and status  ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-allora","url":"/packages/plugins/allora#common-issues","content":" &quot;No active Allora Network topic matches your request&quot; Verify that your requested topic exists and is activeCheck that the topic matches the timeframe of your request API Connection Issues Verify your ALLORA_API_KEY is correctly setCheck network connectivityEnsure the API endpoint is accessible  For detailed information and additional implementation examples, please refer to the Allora-Eliza integration docs. ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-anyone","type":0,"sectionRef":"#","url":"/packages/plugins/anyone","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-anyone","url":"/packages/plugins/anyone#installation","content":" bun add @elizaos/plugin-anyone   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-anyone","url":"/packages/plugins/anyone#features","content":" Start and stop Anyone client servicesAutomatic proxy configuration for axiosSOCKS proxy support (port 9050)Clean proxy cleanup and restoration  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-anyone","url":"/packages/plugins/anyone#usage","content":" Add the plugin to your agent's configuration:  import { anyonePlugin } from '@elizaos/plugin-anyone'; const character = { plugins: [anyonePlugin], };   ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-anyone","url":"/packages/plugins/anyone#available-actions","content":" START_ANYONE‚Äã  Starts the Anyone client and configures proxy settings.  Example commands:  &quot;Can you start Anyone for me?&quot; &quot;Initialize the Anyone client please&quot; &quot;Launch Anyone for me&quot;   STOP_ANYONE‚Äã  Stops the Anyone client and cleans up proxy settings.  Example commands:  &quot;Can you stop Anyone for me?&quot; &quot;Please shut down Anyone&quot; &quot;Close Anyone for me&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Technical Details‚Äã","type":1,"pageTitle":"@elizaos/plugin-anyone","url":"/packages/plugins/anyone#technical-details","content":" The plugin provides two main services:  AnyoneClientService: Manages the Anyone client instance Singleton pattern implementationHandles client initialization and cleanupConfigures SOCKS proxy on port 9050 AnyoneProxyService: Handles axios proxy configuration Preserves original axios settingsAutomatically applies proxy settingsProvides clean restoration of original config  ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-anyone","url":"/packages/plugins/anyone#dependencies","content":" @anyone-protocol/anyone-client: ^0.4.3axios: ^1.7.9 ","version":"1.0.17","tagName":"h2"},{"title":"ankr","type":0,"sectionRef":"#","url":"/packages/plugins/ankr","content":"","keywords":"","version":"1.0.17"},{"title":"Ankr Plugin Guide‚Äã","type":1,"pageTitle":"ankr","url":"/packages/plugins/ankr#ankr-plugin-guide","content":" üîó Blockchain Data Query Interface  ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"ankr","url":"/packages/plugins/ankr#available-actions","content":" The Ankr plugin provides comprehensive blockchain data querying capabilities through natural language prompts. Below are the supported actions and their usage:  1. Blockchain Information‚Äã  # Get blockchain stats Show me stats for [chain]eth[/chain] # Get top currencies Show me the top currencies on [chain]eth[/chain]   2. Wallet &amp; Balance Queries‚Äã  # Check wallet balance Show me the balance for wallet [wallet]0x6B0031518934952C485d5a7E76f1729B50e67486[/wallet] on [chain]eth[/chain] # View wallet interactions Show me interactions for the wallet [wallet]0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45[/wallet]   3. NFT Operations‚Äã  # Get NFT holders Show me holders of NFT contract [contract]0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258[/contract] token [token]112234[/token] on [chain]eth[/chain] # Get NFT metadata Show me the metadata for NFT [token]1234[/token] at contract [contract]0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d[/contract] [chain]eth[/chain] # List NFTs by owner Show me all NFTs owned by wallet [wallet]0x1234567890123456789012345678901234567890[/wallet] on [chain]eth[/chain] # View NFT transfers Show me NFT transfers for contract [contract]0xd8da6bf26964af9d7eed9e03e53415d37aa96045[/contract] [chain]eth[/chain] [fromtimestamp]1655197483[/fromtimestamp][totimestamp]1671974699[/totimestamp]   4. Token Operations‚Äã  # Get token holders Show me holders for contract [contract]0xf307910A4c7bbc79691fD374889b36d8531B08e3[/contract] on [chain]bsc[/chain] # Get token holder count How many holders does [contract]0xdAC17F958D2ee523a2206206994597C13D831ec7[/contract] have? [chain]eth[/chain] # Check token price What's the current price of [contract]0x8290333cef9e6d528dd5618fb97a76f268f3edd4[/contract] token [chain]eth[/chain] # View token transfers Show me recent contract [contract]0xd8da6bf26964af9d7eed9e03e53415d37aa96045[/contract] transfers [chain]eth[/chain] from [fromtimestamp]1655197483[/fromtimestamp] to [totimestamp]1656061483[/totimestamp]   5. Transaction Queries‚Äã  # Get transactions by address Show me the latest transactions for address [contract]0xd8da6bf26964af9d7eed9e03e53415d37aa96045[/contract] [chain]eth[/chain] # Get transaction details Show me details for transaction [txHash]0x748eeb4a15ba05736a9397a07ca86f0184c0c1eca53fa901b28a412d1a3f211f[/txHash] [chain]eth[/chain]   ","version":"1.0.17","tagName":"h3"},{"title":"Tag Reference‚Äã","type":1,"pageTitle":"ankr","url":"/packages/plugins/ankr#tag-reference","content":" Tag\tDescription\tExample[chain]\tBlockchain identifier\teth, bsc [wallet]\tWallet address\t0x1234... [contract]\tContract address\t0xabcd... [token]\tToken ID\t1234 [txHash]\tTransaction hash\t0x748e... [fromtimestamp]\tStart timestamp\t1655197483 [totimestamp]\tEnd timestamp\t1656061483  ","version":"1.0.17","tagName":"h3"},{"title":"Important Notes‚Äã","type":1,"pageTitle":"ankr","url":"/packages/plugins/ankr#important-notes","content":" All addresses must be valid blockchain addresses (0x format)Timestamps must be in Unix timestamp formatChain names should be lowercase (eth, bsc, etc.)Transaction hashes must be complete and validInclude all required tags for each action typ ","version":"1.0.17","tagName":"h3"},{"title":"ElizaOS Arbitrage Plugin","type":0,"sectionRef":"#","url":"/packages/plugins/arbitrage","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#overview","content":" The ElizaOS Arbitrage Plugin monitors multiple decentralized exchanges (DEXs) like Uniswap and Sushiswap for price discrepancies in token pairs. When it identifies a profitable arbitrage opportunity that exceeds the configured threshold, it automatically executes the trade using Flashbots bundles to maximize profits and minimize risk.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#features","content":" Real-time Market Monitoring: Continuously watches market conditions across multiple DEXs via WebSocket connectionsAutomated Opportunity Detection: Analyzes price differences to identify profitable arbitrage pathsSmart Trade Execution: Uses Flashbots to execute trades privately and avoid front-runningConfigurable Trading Parameters: Customizable profit thresholds, gas limits, and other trading parametersRisk Management: Advanced volume optimization to minimize price impact and maximize profitsPerformance Optimization: Efficient batch processing and concurrent operations for minimal latency  ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#prerequisites","content":" Node.js 18 or higherAn Ethereum wallet with private keyAccess to an Ethereum WSS endpointFlashbots relay signing keyBundle executor smart contract deployment  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#installation","content":" npm install @elizaos-plugins/plugin-arbitrage   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#configuration","content":" To use the plugin, you need to configure your ElizaOS character with the necessary settings:  { &quot;name&quot;: &quot;Trader&quot;, &quot;settings&quot;: { &quot;secrets&quot;: { &quot;EVM_PRIVATE_KEY&quot;: &quot;YOUR_PRIVATE_KEY_HERE&quot;, &quot;FLASHBOTS_RELAY_SIGNING_KEY&quot;: &quot;YOUR_FLASHBOTS_KEY_HERE&quot;, &quot;BUNDLE_EXECUTOR_ADDRESS&quot;: &quot;YOUR_EXECUTOR_ADDRESS_HERE&quot; }, &quot;arbitrage&quot;: { &quot;ethereumWsUrl&quot;: &quot;YOUR_ETH_WSS_URL&quot;, &quot;rpcUrl&quot;: &quot;YOUR_ETH_RPC_URL&quot; } }, &quot;plugins&quot;: [&quot;@elizaos/plugin-arbitrage&quot;, &quot;@elizaos/plugin-evm&quot;] }   ","version":"1.0.17","tagName":"h2"},{"title":"Required Settings‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#required-settings","content":" Setting\tDescriptionEVM_PRIVATE_KEY\tPrivate key for your Ethereum wallet (keep this secure!) FLASHBOTS_RELAY_SIGNING_KEY\tSigning key for Flashbots bundles BUNDLE_EXECUTOR_ADDRESS\tAddress of your bundle executor contract ethereumWsUrl\tWebSocket URL for your Ethereum node rpcUrl\tRPC URL for your Ethereum node  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#usage","content":" The plugin integrates with ElizaOS and provides the following capabilities:  ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#actions","content":" EXECUTE_ARBITRAGE: Scans for and executes profitable arbitrage opportunities  ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#providers","content":" marketProvider: Provides real-time market data and arbitrage opportunities  ","version":"1.0.17","tagName":"h3"},{"title":"Example Interactions‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#example-interactions","content":" User: &quot;Find arbitrage opportunities&quot; Trader: &quot;Scanning for arbitrage trades...&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Advanced Configuration‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#advanced-configuration","content":" You can customize trading parameters by modifying the thresholds in src/config/thresholds.ts:  export const DEFAULT_THRESHOLDS: MarketThresholds = { minProfitThreshold: BigNumber.from('100000000000000'), // 0.0001 ETH maxTradeSize: BigNumber.from('1000000000000000000'), // 1 ETH gasLimit: 500000, minerRewardPercentage: 90, };   ","version":"1.0.17","tagName":"h2"},{"title":"Architecture‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#architecture","content":" The plugin consists of several key components:  Core Engine: Implements the arbitrage detection and execution logicMarket Adapters: Interfaces with various DEXs like Uniswap and SushiswapWebSocket Manager: Handles real-time market data updatesService Layer: Integrates with ElizaOS to provide plugin functionality  ","version":"1.0.17","tagName":"h2"},{"title":"Security Considerations‚Äã","type":1,"pageTitle":"ElizaOS Arbitrage Plugin","url":"/packages/plugins/arbitrage#security-considerations","content":" Ensure your private keys are stored securelyTest with small amounts before deploying with significant capitalMonitor gas costs to ensure profitabilityImplement circuit breakers for market volatility ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-aptos","type":0,"sectionRef":"#","url":"/packages/plugins/aptos","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#description","content":" The Aptos plugin enables seamless token transfers and wallet management on the Aptos blockchain. It provides functionality to transfer APT tokens and monitor wallet balances with real-time price tracking.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#installation","content":" bun install @elizaos/plugin-aptos   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#configuration","content":" The plugin requires the following environment variables to be set:  APTOS_PRIVATE_KEY=&lt;Your Aptos private key&gt; APTOS_NETWORK=&lt;&quot;mainnet&quot; | &quot;testnet&quot;&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#basic-integration","content":" import { aptosPlugin, WalletProvider, TransferAptosToken } from '@elizaos/plugin-aptos';   ","version":"1.0.17","tagName":"h3"},{"title":"Transfer Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#transfer-examples","content":" // The plugin responds to natural language commands like: 'Send 69 APT tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0'; 'Transfer APT to [address]'; 'Pay [amount] APT to [recipient]';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#actions","content":" SEND_TOKEN‚Äã  Transfers APT tokens from the agent's wallet to another address.  Aliases:  TRANSFER_TOKENTRANSFER_TOKENSSEND_TOKENSSEND_APTPAY  Configuration:  { APT_DECIMALS: 8; // Decimal places for APT token }   ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#providers","content":" WalletProvider‚Äã  Provides wallet information and portfolio tracking.  Features:  Real-time APT price trackingPortfolio value calculationCached wallet information (5-minute TTL)Formatted portfolio reports  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#common-issues--troubleshooting","content":" Transaction Failures Verify wallet has sufficient APT balanceCheck recipient address formatEnsure private key is correctly setVerify network connectivity Price Fetching Issues Check connection to DexScreener APIVerify cache functionalityMonitor retry mechanism (3 attempts with exponential backoff)  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#security-best-practices","content":" Private Key Management Store private key securely using environment variablesNever commit private keys to version controlUse separate wallets for development and productionMonitor wallet activity regularly  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run tests:  bun run test   Development mode:  bun run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#dependencies","content":" @aptos-labs/ts-sdk: ^1.26.0bignumber.js: 9.1.2node-cache: 5.1.2  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#future-enhancements","content":" The following features and improvements are planned for future releases:  Advanced Token Operations Batch token transfersToken creation templatesNFT minting and managementToken metadata managementCustom tokenomics implementationToken upgrade mechanisms DeFi Integration Liquidity pool managementYield farming automationStaking optimizationAMM integrationCross-chain bridgesPrice impact analysis Move Contract Management Contract deployment toolsContract verificationContract upgrade systemTesting frameworkGas optimization toolsSecurity audit integration Wallet Enhancements Multi-wallet supportHardware wallet integrationTransaction batchingAddress book managementCustom signature schemesAccount abstraction Price Feed Improvements Additional data sourcesReal-time price alertsHistorical data analysisCustom price aggregationPrice prediction toolsMarket sentiment analysis Developer Tools Enhanced debugging capabilitiesMove language IDE integrationDocumentation generatorPerformance profilingTesting utilitiesDeployment automation Security Features Transaction simulationRisk assessment toolsRate limiting controlsFraud detectionEmergency shutdownMulti-signature support Analytics and Monitoring Transaction trackingPortfolio analyticsNetwork statisticsGas usage optimizationPerformance metricsCustom reporting tools  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#credits","content":" This plugin integrates with and builds upon several key technologies:  Aptos: Layer 1 blockchain platform@aptos-labs/ts-sdk: Official TypeScript SDKPetra Wallet: Aptos wallet integrationDexScreener: Price feed integrationMove Language: Smart contract language  Special thanks to:  The Aptos Labs team for developing the blockchainThe Petra Wallet development teamThe DexScreener team for price dataThe Move language developersThe Aptos Developer communityThe Eliza community for their contributions and feedback  For more information about Aptos capabilities:  Aptos DocumentationMove Language GuidePetra Wallet DocsDexScreener API  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-aptos","url":"/packages/plugins/aptos#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-arthera","type":0,"sectionRef":"#","url":"/packages/plugins/arthera","content":"","keywords":"","version":"1.0.17"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-arthera","url":"/packages/plugins/arthera#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Default Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-arthera","url":"/packages/plugins/arthera#default-setup","content":" By default, Arthera is enabled. To use it, simply add your private key to the .env file:  ARTHERA_PRIVATE_KEY=your-private-key-here   ","version":"1.0.17","tagName":"h3"},{"title":"Custom RPC URLs‚Äã","type":1,"pageTitle":"@elizaos/plugin-arthera","url":"/packages/plugins/arthera#custom-rpc-urls","content":" By default, the RPC URL is inferred from the viem/chains config. To use a custom RPC URL for a specific chain, add the following to your .env file:  ETHEREUM_PROVIDER_&lt;CHAIN_NAME&gt;=https://your-custom-rpc-url   Example usage:  ETHEREUM_PROVIDER_ARTHERA=https://rpc.arthera.net   ","version":"1.0.17","tagName":"h3"},{"title":"Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-arthera","url":"/packages/plugins/arthera#provider","content":" The Wallet Provider initializes with Arthera. It:  Provides the context of the currently connected address and its balance.Creates Public and Wallet clients to interact with the supported chain.    ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-arthera","url":"/packages/plugins/arthera#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-arthera","url":"/packages/plugins/arthera#transfer","content":" Transfer tokens from one address to another on Arthera. Just specify the:  AmountChainRecipient Address  Example usage:  Transfer 1 AA to 0xRecipient on arthera.     ","version":"1.0.17","tagName":"h3"},{"title":"Contribution‚Äã","type":1,"pageTitle":"@elizaos/plugin-arthera","url":"/packages/plugins/arthera#contribution","content":" The plugin contains tests. Whether you're using TDD or not, please make sure to run the tests before submitting a PR.  ","version":"1.0.17","tagName":"h2"},{"title":"Running Tests‚Äã","type":1,"pageTitle":"@elizaos/plugin-arthera","url":"/packages/plugins/arthera#running-tests","content":" Navigate to the plugin-arthera directory and run:  bun test  ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-asterai","type":0,"sectionRef":"#","url":"/packages/plugins/asterai","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#description","content":" This plugin provides functionality to allow Eliza agents to interact with asterai plugins and agents.  This will expand your Eliza character's utility by giving it access to all the functionality of asterai's ecosystem of marketplace and private plugins and agents.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#installation","content":" bun install @elizaos/plugin-asterai   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#configuration","content":" The plugin requires the following environment variables to be set:  ASTERAI_AGENT_ID= ASTERAI_PUBLIC_QUERY_KEY=   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#basic-integration","content":" import { asteraiPlugin } from '@elizaos/plugin-asterai';   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#example-usage","content":" The plugin supports natural language for interacting with the asterai agent through your Eliza character.  For example, if your asterai agent can fetch weather data:  &quot;Hey Eliza, how's the weather in LA?&quot;;   Eliza will then query the asterai agent to fetch the information.  ","version":"1.0.17","tagName":"h3"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run tests:  bun run test   ","version":"1.0.17","tagName":"h3"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-asterai","url":"/packages/plugins/asterai#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-attps","type":0,"sectionRef":"#","url":"/packages/plugins/ATTPs","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#overview","content":" The ATTPs plugin bridges agent-based logic with the Eliza ecosystem. It handles agent registration, data verification, and price queries, empowering both automated and user-driven workflows.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Agent Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#agent-operations","content":" Agent Creation: Deploy new agents with custom settingsRegistration: Register agents on-chain or via standardized processesMulti-Signer Framework: Supports threshold-based approval flows  ","version":"1.0.17","tagName":"h3"},{"title":"Data Verification‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#data-verification","content":" Chain Validation: Verify data authenticity on-chainTransaction Execution: Handle verification logic with built-in security checksAuto-Hashing: Convert raw data to hashed formats when neededMetadata Parsing: Validate content type, encoding, and compression  ","version":"1.0.17","tagName":"h3"},{"title":"Price Queries‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#price-queries","content":" Live Price Data: Fetch price information for various pairsFormat Validation: Normalize user query inputs to standard trading-pair formatsAPIs Integration: Retrieve real-time or near-real-time pricing information  ","version":"1.0.17","tagName":"h3"},{"title":"Security Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#security-features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Access Control‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#access-control","content":" Private Key Management: Safe usage of private keys for transaction signingEnvironment Variables: Secure injection of credentialsOn-Chain Validation: Leverage on-chain contract checks  ","version":"1.0.17","tagName":"h3"},{"title":"Verification‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#verification","content":" Input Validation: Strict schema checks before on-chain operationsTransaction Receipts: Provide verifiable transaction detailsError Handling: Detailed error logs for quick debugging  ","version":"1.0.17","tagName":"h3"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#installation","content":" npm install @elizaos/plugin-attps   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#configuration","content":" Configure the plugin by setting environment variables or runtime settings:  ATTPS_RPC_URLATTPS_PROXY_ADDRESSATTPS_PRIVATE_KEYATTPS_CONVERTER_ADDRESSATTPS_AUTO_HASH_DATA  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#basic-setup","content":" import { attpsPlugin } from '@elizaos/plugin-attps'; // Initialize the plugin const runtime = await initializeRuntime({ plugins: [attpsPlugin], });   ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#actions","content":" CREATE_AND_REGISTER_AGENT‚Äã  Creates and registers an agent using specified settings.  const result = await runtime.executeAction(&quot;CREATE_AND_REGISTER_AGENT&quot;, { signers: [...], threshold: 3, agentHeader: { ... }, // ...other fields... });   VERIFY‚Äã  Verifies data on-chain via the Agent SDK.  const result = await runtime.executeAction(&quot;VERIFY&quot;, { payload: { data: &quot;0x...hexData&quot;, signatures: [...], }, agent: &quot;0x...agentAddress&quot;, digest: &quot;0x...digestString&quot;, });   PRICE_QUERY‚Äã  Fetches live price data for a specified trading pair.  const result = await runtime.executeAction('PRICE_QUERY', { pair: 'BTC/USD', });   ","version":"1.0.17","tagName":"h3"},{"title":"Performance Optimization‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#performance-optimization","content":" Cache Management Implement caching for frequent queriesMonitor retrieval times and cache hits Network Efficiency Batch requests where possibleValidate response parsing to reduce overhead  ","version":"1.0.17","tagName":"h2"},{"title":"System Requirements‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#system-requirements","content":" Node.js 16.x or higherSufficient network access to on-chain endpointsBasic configuration of environment variablesMinimum 4GB RAM recommended  ","version":"1.0.17","tagName":"h2"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#troubleshooting","content":" Invalid Agent Settings Ensure signers and threshold are correctValidate agentHeader for proper UUIDs and numeric values Verification Failures Check the input data formatsConfirm environment variables are set Price Query Errors Verify the trading pair formatCheck external API availability  ","version":"1.0.17","tagName":"h2"},{"title":"Safety & Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#safety--security","content":" Credential Management Store private keys securelyDo not commit secrets to version control Transaction Limits Configure thresholds to mitigate abuseLog transaction attempts and failures Monitoring &amp; Logging Track unusual activityMaintain detailed audit logs  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#support","content":" For issues or feature requests:  Check existing documentationSubmit a GitHub issue with relevant detailsInclude transaction logs and system info if applicable  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#contributing","content":" We welcome pull requests! Refer to the project‚Äôs CONTRIBUTING.md and open discussions to coordinate efforts.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#credits","content":" APRO - Plugin sponsor and partnerATTPs SDK JS - Underlying agent SDKethers.js - Transaction and contract interactionCommunity contributors for feedback and testing  For more information about Apro plugin capabilities:  Apro Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-attps","url":"/packages/plugins/ATTPs#license","content":" This plugin is part of the Eliza project. Refer to the main project repository for licensing details. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-autonome","type":0,"sectionRef":"#","url":"/packages/plugins/autonome","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-autonome","url":"/packages/plugins/autonome#installation","content":" bun add @elizaos/plugin-autonome   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-autonome","url":"/packages/plugins/autonome#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-autonome","url":"/packages/plugins/autonome#environment-variables","content":" # Required: JWT token from Autonome platform AUTONOME_JWT_TOKEN=your_jwt_token # Required: Autonome RPC endpoint (fixed production endpoint) AUTONOME_RPC=https://wizard-bff-rpc.alt.technology/v1/bff/aaa/apps   To get your JWT token:  Login to dev.autonome.funOpen browser developer consoleExtract your JWT token  ","version":"1.0.17","tagName":"h3"},{"title":"Character Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-autonome","url":"/packages/plugins/autonome#character-configuration","content":" Add the plugin to your character's configuration:  import { autonomePlugin } from '@elizaos/plugin-autonome'; const character = { plugins: [autonomePlugin], };   ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-autonome","url":"/packages/plugins/autonome#features","content":" Launch new Eliza agents through the Autonome platformConfigure agent settings via natural languageTrack deployment statusDirect integration with Autonome dashboard  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-autonome","url":"/packages/plugins/autonome#usage","content":" The plugin responds to various deployment commands:  &quot;Launch an agent, name is xiaohuo&quot; &quot;Create a new agent&quot; &quot;Deploy an Eliza agent&quot;   Upon successful deployment, you'll receive a dashboard link:  https://dev.autonome.fun/autonome/[app-id]/details   ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-autonome","url":"/packages/plugins/autonome#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-autonome","url":"/packages/plugins/autonome#actions","content":" LAUNCH_AGENT‚Äã  Creates and deploys a new agent to the Autonome platform.  Aliases:  CREATE_AGENTDEPLOY_AGENTDEPLOY_ELIZADEPLOY_BOT  Parameters:  name: Name of the agent to deployconfig: Agent configuration in JSON format  ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-autonome","url":"/packages/plugins/autonome#dependencies","content":" @coral-xyz/anchor: 0.30.1@elizaos/plugin-tee: workspace:*@elizaos/plugin-trustdb: workspace:*axios: ^1.7.9 ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-avail - Plugin for Avail","type":0,"sectionRef":"#","url":"/packages/plugins/avail","content":"","keywords":"","version":"1.0.17"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-avail - Plugin for Avail","url":"/packages/plugins/avail#actions","content":" transfer: This action enables the transfer of AVAIL tokens from the agent's wallet (as defined by the keyring generated from AVAIL_SEED) to another wallet. To use just mention the transfer of AVAIL tokens to an Avail account. name: SEND_AVAIL Message sample: Send 100 AVAIL to 5GWbvXjefEvXXETtKQH7YBsUaPc379KAQATW1eqeJT26cbsK submitData: This action enables the submission of any arbitrary data to the Avail DA network. To use just mention that you need to send &quot;any data&quot; to Avail. You can customize the Avail appID through which the agent submits the data by modifying the AVAIL_APP_ID env config. name: SUBMIT_DATA Message sample: Submit the following data to Avail &quot;Hello World!&quot;  ","version":"1.0.17","tagName":"h2"},{"title":"Usage & Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-avail - Plugin for Avail","url":"/packages/plugins/avail#usage--testing","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Detailed testing steps‚Äã","type":1,"pageTitle":"@elizaos/plugin-avail - Plugin for Avail","url":"/packages/plugins/avail#detailed-testing-steps","content":" In .env you should set the value for AVAIL_ADDRESS (this is the public address for the agent account - learn how to get one here) and AVAIL_SEED (seed phrase for the same account). Transfer AVAIL - To test transfer function, you need tokens in your Avail account. On testnet, you can use the Avail Faucet. If you need more please ping us on Discord, and we can send it over. - Run the agent and prompt it with: &quot;send AMOUNT AVAIL to any other Avail account &quot; - e.g. send 1 AVAIL to 5GWbvXjefEvXXETtKQH7YBsUaPc379KAQATW1eqeJT26cbsK - Assuming everything goes smoothly the agent returns with the Tx Hash, and Block Hash. The tx hash can be checked on the Avail block explorer at https://avail-turing.subscan.io/ Submit Data To test data submission, you need tokens in your Avail account to pay fees. On testnet, you can use the Avail Faucet. If you need more please ping us on Discord, and we can send it over.Run the agent and prompt it with: &quot;Submit the following data to Avail DATA&quot; - e.g. Submit the following data to Avail &quot;Hello World!&quot;Assuming everything goes smoothly the agent returns with the Tx Hash, and Block Hash. The tx hash can be checked on the Avail block explorer at https://avail-turing.subscan.io/  ","version":"1.0.17","tagName":"h3"},{"title":"Resources‚Äã","type":1,"pageTitle":"@elizaos/plugin-avail - Plugin for Avail","url":"/packages/plugins/avail#resources","content":" Avail DocumentationSet up an Avail Account - Learn how to get your AVAIL_SEEDFind more Network Information like RPC endpointsLearn more about appIDsLearn more about AvailAwesome Avail Repo ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-avalanche","type":0,"sectionRef":"#","url":"/packages/plugins/avalanche","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#description","content":" The Avalanche plugin enables comprehensive DeFi operations on the Avalanche network, including token transfers, YAK swaps, yield strategy management, and token creation via Token Mill.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#installation","content":" bun install @elizaos/plugin-avalanche   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#configuration","content":" The plugin requires the following environment variable:  AVALANCHE_PRIVATE_KEY=&lt;Your Avalanche private key&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Token Transfers‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#1-token-transfers","content":" Send native AVAX and ERC20 tokensSupport for multiple token standardsBuilt-in address validation  ","version":"1.0.17","tagName":"h3"},{"title":"2. YAK Swaps‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#2-yak-swaps","content":" Decentralized token swapsAutomatic best path findingSlippage protection (default: 0.2%)Support for all major tokens  ","version":"1.0.17","tagName":"h3"},{"title":"3. Yield Strategies‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#3-yield-strategies","content":" Deposit tokens into yield-generating strategiesSupport for multiple strategies including: YAK stakingUSDC BenqigmYAK Token MillPRINCESS stakingJOE staking  ","version":"1.0.17","tagName":"h3"},{"title":"4. Token Mill‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#4-token-mill","content":" Create new tokensConfigure custom tokenomicsAutomatic market creation  ","version":"1.0.17","tagName":"h3"},{"title":"Supported Tokens‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#supported-tokens","content":" const TOKENS = { AVAX: '0x0000000000000000000000000000000000000000', WAVAX: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', YAK: '0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7', gmYAK: '0x3A30784c1af928CdFce678eE49370220aA716DC3', USDC: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E', // ... and more };   ","version":"1.0.17","tagName":"h2"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#usage-examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#token-transfer","content":" // Send AVAX 'Send 10 AVAX to 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7'; // Send ERC20 'Transfer 100 USDC to [address]';   ","version":"1.0.17","tagName":"h3"},{"title":"YAK Swap‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#yak-swap","content":" // Swap tokens 'Swap 1 AVAX for USDC'; 'Swap 10 USDC for gmYAK';   ","version":"1.0.17","tagName":"h3"},{"title":"Yield Strategy‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#yield-strategy","content":" // Deposit into strategies 'Deposit 1 USDC into the strategy'; 'Deposit 10 gmYAK to earn yield';   ","version":"1.0.17","tagName":"h3"},{"title":"Token Creation‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#token-creation","content":" // Create new token &quot;Create a new memecoin called 'Test Token' with the symbol 'TEST'&quot;;   ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#providers","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Wallet Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#1-wallet-provider","content":" Displays wallet balancesShows tokens in yield strategiesReal-time balance updates  ","version":"1.0.17","tagName":"h3"},{"title":"2. Strategies Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#2-strategies-provider","content":" Lists available yield strategiesShows deposit token requirements  ","version":"1.0.17","tagName":"h3"},{"title":"3. Tokens Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#3-tokens-provider","content":" Lists supported tokensShows token addresses  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#development","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run linting:  bun run lint   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#dependencies","content":" viem: ^2.21.49@elizaos/core: workspace:*  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#future-enhancements","content":" Advanced DeFi Operations Multi-hop yield strategiesAuto-compounding featuresYield optimization algorithmsRisk assessment toolsPortfolio rebalancing automationCross-chain yield farming Enhanced Token Management Batch token operationsAdvanced token creation templatesToken migration toolsAutomated token listingToken analytics dashboardCustom tokenomics implementation YAK Protocol Integration Advanced routing algorithmsMEV protection featuresGas optimization strategiesLiquidity analysis toolsPrice impact predictionsCustom trading strategies Benqi Protocol Features Collateral optimizationLiquidation protectionInterest rate monitoringPosition management toolsRisk assessment dashboardAuto-repayment features Token Mill Improvements Advanced token customizationAutomated market makingToken distribution toolsVesting schedule managementGovernance token featuresToken upgrade mechanisms Security Enhancements Transaction simulationSmart contract auditing toolsReal-time monitoringAutomated safety checksEmergency shutdown featuresMulti-signature support Developer Tools Enhanced debugging capabilitiesTesting framework improvementsDocumentation generatorCLI tools for common operationsIntegration templatesPerformance monitoring Analytics and Reporting Portfolio trackingPerformance metricsGas usage optimizationTransaction history analysisYield comparison toolsRisk assessment reports  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#credits","content":" This plugin integrates with and builds upon several key technologies:  Avalanche: High-performance blockchain platformavalanchejs: Official Avalanche JavaScript libraryYAK Protocol: Decentralized exchange aggregatorBenqi: Lending and borrowing protocolToken Mill: Token creation platform  Special thanks to:  The Ava Labs team for developing AvalancheThe YAK Protocol development teamThe Benqi protocol developersThe Token Mill platform teamThe Avalanche Developer communityThe Eliza community for their contributions and feedback  For more information about Avalanche capabilities:  Avalanche DocumentationYAK Protocol DocsBenqi DocumentationToken Mill Guide  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-avalanche","url":"/packages/plugins/avalanche#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-node","type":0,"sectionRef":"#","url":"/packages/plugins/aws-s3","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#overview","content":" The Node plugin serves as a foundational component of Eliza OS, providing AWS S3 integration for cloud-based file management and storage capabilities.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#features","content":" AWS S3 Integration: File upload and management with AWS S3  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#installation","content":" npm install @elizaos/plugin-node   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#configuration","content":" The plugin requires AWS environment variables to function:  ","version":"1.0.17","tagName":"h2"},{"title":"AWS Settings‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#aws-settings","content":" AWS_ACCESS_KEY_ID=your_aws_access_key AWS_SECRET_ACCESS_KEY=your_aws_secret_key AWS_REGION=your_aws_region AWS_S3_BUCKET=your_s3_bucket AWS_S3_UPLOAD_PATH=your_upload_path AWS_S3_ENDPOINT=an_alternative_endpoint AWS_S3_SSL_ENABLED=boolean(true|false) AWS_S3_FORCE_PATH_STYLE=boolean(true|false)   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#usage","content":" import { createNodePlugin } from '@elizaos/plugin-node'; // Initialize the plugin const nodePlugin = createNodePlugin(); // Register with Eliza OS elizaos.registerPlugin(nodePlugin);   ","version":"1.0.17","tagName":"h2"},{"title":"Services‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#services","content":" ","version":"1.0.17","tagName":"h2"},{"title":"AwsS3Service‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#awss3service","content":" Handles file uploads and management with AWS S3.  ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common AWS S3 Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#common-aws-s3-issues","content":" Error: AWS credentials not configured   Verify AWS credentials are setCheck S3 bucket permissionsEnsure correct region configuration  ","version":"1.0.17","tagName":"h3"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/aws-s3#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-b2","type":0,"sectionRef":"#","url":"/packages/plugins/b2","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#description","content":" The B2 Network Plugin offers a set of features that can be integrated into the Eliza platform to enhance its capabilities. This plugin enables seamless token transfers on the B2-Network. It provides functionality to transfer both native B2-BTC and ERC20 tokens using secure wallet operations.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#installation","content":" bun install @elizaos/plugin-b2   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#configuration","content":" The plugin requires the following environment variable:  B2_PRIVATE_KEY=&lt;Your B2 private key&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Token Transfers‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#1-token-transfers","content":" Send native B2-BTC and ERC20 tokensSupport for multiple token standardsBuilt-in address validation  ","version":"1.0.17","tagName":"h3"},{"title":"Supported Tokens‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#supported-tokens","content":" const TOKENS = { 'B2-BTC': '0x0000000000000000000000000000000000000000', uBTC: '0x796e4D53067FF374B89b2Ac101ce0c1f72ccaAc2', USDC: '0xE544e8a38aDD9B1ABF21922090445Ba93f74B9E5', USDT: '0x681202351a488040Fa4FdCc24188AfB582c9DD62', // ... and more };   ","version":"1.0.17","tagName":"h2"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#usage-examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#token-transfer","content":" // Send B2-BTC 'Send 1 B2-BTC to 0x4f9e2dc50B4Cd632CC2D24edaBa3Da2a9338832a'; // Send ERC20 'Transfer 100 USDC to [address]';   ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#providers","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Wallet Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#1-wallet-provider","content":" Displays wallet balancesReal-time balance updates  ","version":"1.0.17","tagName":"h3"},{"title":"2. Tokens Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#2-tokens-provider","content":" Lists supported tokensShows token addresses  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#development","content":" Clone the repositoryInstall dependencies:Build the plugin:  bun run build   Run linting:  bun run lint   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#dependencies","content":" viem: ^2.21.49@elizaos/core: workspace:*  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#future-enhancements","content":" Advanced DeFi Operations Multi-hop yield strategiesAuto-compounding featuresYield optimization algorithmsRisk assessment toolsPortfolio rebalancing automationCross-chain yield farming Enhanced Token Management Batch token operationsAdvanced token creation templatesToken migration toolsAutomated token listingToken analytics dashboardCustom tokenomics implementation YAK Protocol Integration Advanced routing algorithmsMEV protection featuresGas optimization strategiesLiquidity analysis toolsPrice impact predictionsCustom trading strategies Benqi Protocol Features Collateral optimizationLiquidation protectionInterest rate monitoringPosition management toolsRisk assessment dashboardAuto-repayment features Token Mill Improvements Advanced token customizationAutomated market makingToken distribution toolsVesting schedule managementGovernance token featuresToken upgrade mechanisms Security Enhancements Transaction simulationSmart contract auditing toolsReal-time monitoringAutomated safety checksEmergency shutdown featuresMulti-signature support Developer Tools Enhanced debugging capabilitiesTesting framework improvementsDocumentation generatorCLI tools for common operationsIntegration templatesPerformance monitoring Analytics and Reporting Portfolio trackingPerformance metricsGas usage optimizationTransaction history analysisYield comparison toolsRisk assessment reports  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-b2","url":"/packages/plugins/b2#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Binance Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/binance","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Binance Plugin for Eliza","url":"/packages/plugins/binance#features","content":" üìä Real-time cryptocurrency price checksüí± Spot trading (market and limit orders)üí∞ Wallet balance inquiries‚úÖ Comprehensive error handlingüîí Secure API integration  ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"Binance Plugin for Eliza","url":"/packages/plugins/binance#prerequisites","content":" Binance Account: You need a Binance account to use this pluginAPI Keys: Generate API keys from your Binance account: Go to your Binance account settingsNavigate to API ManagementCreate a new API keyEnable spot trading permissionsStore your API key and secret securely  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Binance Plugin for Eliza","url":"/packages/plugins/binance#configuration","content":" Set the following environment variables:  BINANCE_API_KEY=your_api_key BINANCE_SECRET_KEY=your_secret_key   ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Binance Plugin for Eliza","url":"/packages/plugins/binance#installation","content":" Add the plugin to your Eliza configuration:  { &quot;plugins&quot;: [&quot;@elizaos/plugin-binance&quot;] }   ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"Binance Plugin for Eliza","url":"/packages/plugins/binance#available-actions","content":" The plugin provides the following actions:  GET_PRICE: Check cryptocurrency prices Example: &quot;What's the current price of Bitcoin?&quot;Example: &quot;Check ETH price in USDT&quot; EXECUTE_SPOT_TRADE: Execute spot trades Example: &quot;Buy 0.1 BTC at market price&quot;Example: &quot;Sell 100 USDT worth of ETH&quot; GET_SPOT_BALANCE: Check wallet balances Example: &quot;What's my BTC balance?&quot;Example: &quot;Show all my wallet balances&quot;  ","version":"1.0.17","tagName":"h2"},{"title":"Important Notes‚Äã","type":1,"pageTitle":"Binance Plugin for Eliza","url":"/packages/plugins/binance#important-notes","content":" API Rate Limits: Binance implements rate limiting: 1200 requests per minute for most endpointsSome endpoints have specific weight limitsThe plugin handles rate limiting errors appropriately Minimum Order Sizes: Binance enforces minimum order sizes and notional values: Minimum order size varies by trading pairMinimum notional value (quantity √ó price) must be metThe plugin validates these requirements before order execution Error Handling: The plugin provides detailed error messages for: Invalid API credentialsInsufficient balanceInvalid trading pairsMinimum notional value not metOther API-specific errors  ","version":"1.0.17","tagName":"h2"},{"title":"Service Architecture‚Äã","type":1,"pageTitle":"Binance Plugin for Eliza","url":"/packages/plugins/binance#service-architecture","content":" The plugin is organized into specialized services:  PriceService: Handles price-related operationsTradeService: Manages trading operationsAccountService: Handles balance and account operationsBaseService: Provides common functionality ","version":"1.0.17","tagName":"h2"},{"title":"Eliza Birdeye Plugin","type":0,"sectionRef":"#","url":"/packages/plugins/birdeye","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Eliza Birdeye Plugin","url":"/packages/plugins/birdeye#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Provider Features‚Äã","type":1,"pageTitle":"Eliza Birdeye Plugin","url":"/packages/plugins/birdeye#provider-features","content":" Agent Portfolio Provider If BIRDEYE_WALLET_ADDR is set, this provider will fetch the wallet's portfolio data from Birdeye and be able to respond to questions related to the wallet's holdings.  ","version":"1.0.17","tagName":"h3"},{"title":"Action Features‚Äã","type":1,"pageTitle":"Eliza Birdeye Plugin","url":"/packages/plugins/birdeye#action-features","content":" Token Search Address This action will search input message for token addresses and when present will query Birdeye for token information Token Search Symbol This action will search input message for token symbols in the format of $SYMBOL and when present will query Birdeye for token information. Note that this action currently only supports SOL, SUI, and ETH addresses. Any addresses that look like EVM addresses will be treated as ETH addresses since there is no easy way to distinguish between the other EVM chains that are supported by Birdeye. Wallet Search Address This action will search input message for wallet addresses and when present will query Birdeye for wallet information  ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"Eliza Birdeye Plugin","url":"/packages/plugins/birdeye#api-reference","content":" The plugin provides access to a subset of Birdeye API endpoints through structured interfaces. For detailed API documentation, visit Birdeye's API Documentation.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Eliza Birdeye Plugin","url":"/packages/plugins/birdeye#license","content":" See parent project for license information.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"Eliza Birdeye Plugin","url":"/packages/plugins/birdeye#contributing","content":" Contributions are welcome! See parent project for contribution guidelines. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-bittensor","type":0,"sectionRef":"#","url":"/packages/plugins/bittensor","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-bittensor","url":"/packages/plugins/bittensor#description","content":" The Bittensor plugin enables agents to interact with BitMind's API to access a range of AI capabilities on Bittensor's decentralized network, including inference, media generation, and deepfake detection services. Currently, the plugin offers image detection functionality to determine if images are AI-generated, with additional capabilities planned for future releases through the BitMind API.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-bittensor","url":"/packages/plugins/bittensor#installation","content":" bun install @elizaos/plugin-bittensor   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-bittensor","url":"/packages/plugins/bittensor#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"SN34 - Deepfake Detection‚Äã","type":1,"pageTitle":"@elizaos/plugin-bittensor","url":"/packages/plugins/bittensor#sn34---deepfake-detection","content":" The plugin currently implements BitMind's SN34 subnet for AI-generated image detection. This subnet provides:  Real-time analysis of image authenticityConfidence scoring for AI influence detectionDetailed response formatting with: Binary classification (AI vs Natural image)Percentage-based AI influence ratingRisk assessment based on confidence levelsVisual indicators for quick interpretation (ü§ñ, üì∏, ‚ö†Ô∏è, ‚ö°, ‚úÖ) ","version":"1.0.17","tagName":"h3"},{"title":"@ai16z/plugin-bnb","type":0,"sectionRef":"#","url":"/packages/plugins/bnb","content":"","keywords":"","version":"1.0.17"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Default Setup‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#default-setup","content":" By default, plugin-bnb is not enabled. To use it, simply add your private key and/or public key to the .env file. If private key is not provided, some actions will be disabled.  Security Note: Your private key grants full access to your associated funds. Store it securely and never share it with anyone. Do not commit or upload your .env file to version control systems like Git.  BNB_PRIVATE_KEY=your-private-key-here BNB_PUBLIC_KEY=your-public-key-here   ","version":"1.0.17","tagName":"h3"},{"title":"Custom RPC URLs‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#custom-rpc-urls","content":" By default, the RPC URL is inferred from the viem/chains config. To use custom RPC URLs, add the following to your .env file:  BSC_PROVIDER_URL=https://your-custom-bsc-rpc-url OPBNB_PROVIDER_URL=https://your-custom-opbnb-rpc-url   ","version":"1.0.17","tagName":"h3"},{"title":"Provider‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#provider","content":" The Wallet Provider initializes with BSC as the default. It:  Provides the context of the currently connected address and its balance.Creates Public and Wallet clients to interact with the supported chains.    ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Get Balance‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#get-balance","content":" Get the balance of an address on BSC. Just specify the:  ChainAddressToken  Example usage:  Get the USDC balance of 0x1234567890 on BSC.   ","version":"1.0.17","tagName":"h3"},{"title":"Transfer‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#transfer","content":" Transfer tokens from one address to another on BSC/opBNB. Just specify the:  ChainTokenAmountRecipient AddressData(Optional)  Example usage:  Transfer 1 BNB to 0xRecipient on BSC.   ","version":"1.0.17","tagName":"h3"},{"title":"Swap‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#swap","content":" Swap tokens from one address to another on BSC. Just specify the:  Chain(Only BSC is supported for now)Input TokenOutput TokenAmountSlippage(Optional)  Example usage:  Swap 1 BNB to USDC on BSC.   ","version":"1.0.17","tagName":"h3"},{"title":"Bridge‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#bridge","content":" Bridge tokens from one chain to another on BSC/opBNB. Just specify the:  From ChainTo ChainFrom TokenTo TokenAmountRecipient Address(Optional)  Example usage:  Bridge 1 BNB from BSC to opBNB.   ","version":"1.0.17","tagName":"h3"},{"title":"Stake‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#stake","content":" Perform staking operations on BSC through Lista Dao. User will receive sliBNB(0xB0b84D294e0C75A6abe60171b70edEb2EFd14A1B) as staking credit. Just specify the:  Chain(Only BSC is supported for now)ActionAmount  Example usage:  Deposit 1 BNB to Lista Dao.   ","version":"1.0.17","tagName":"h3"},{"title":"Faucet‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#faucet","content":" Request testnet tokens from the faucet. You could request any of the supported tokens(BNB, BTC, BUSD, DAI, ETH, USDC). Just specify the:  Token(Optional)Recipient Address  The faucet is rate-limited. One claim is allowed per IP address within a 24-hour period. And the recipient address must maintain a minimum balance of 0.002 BNB on BSC Mainnet to qualify.  Example usage:  Get some testnet USDC from the faucet.     ","version":"1.0.17","tagName":"h3"},{"title":"Contribution‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#contribution","content":" The plugin contains tests. Whether you're using TDD or not, please make sure to run the tests before submitting a PR.  ","version":"1.0.17","tagName":"h2"},{"title":"Running Tests‚Äã","type":1,"pageTitle":"@ai16z/plugin-bnb","url":"/packages/plugins/bnb#running-tests","content":" Navigate to the plugin-bnb directory and run:  bun test  ","version":"1.0.17","tagName":"h3"},{"title":"Unmaintained: this plugin is currently part of @elizaos/eliza","type":0,"sectionRef":"#","url":"/packages/plugins/bootstrap","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#description","content":" The Bootstrap plugin enables fundamental agent behaviors including conversation management, room interactions, and fact tracking. It provides essential actions and evaluators that form the foundation of agent interactions.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#installation","content":" bun install @elizaos/plugin-bootstrap   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Conversation Management‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#1-conversation-management","content":" NONE action for basic responsesCONTINUE action for follow-upsIGNORE action for appropriate disengagementBuilt-in conversation flow control  ","version":"1.0.17","tagName":"h3"},{"title":"2. Room Control‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#2-room-control","content":" Follow/Unfollow room functionalityMute/Unmute capabilitiesAutomatic engagement level trackingSmart participation management  ","version":"1.0.17","tagName":"h3"},{"title":"3. Fact Management‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#3-fact-management","content":" Automatic fact extractionCategorization of claimsDeduplication of known informationSupport for multiple fact types: Permanent factsStatus updatesOpinionsBiographical information  ","version":"1.0.17","tagName":"h3"},{"title":"4. Goal Tracking‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#4-goal-tracking","content":" Track objective progressUpdate goal statusesMonitor completion statesAutomatic progress evaluation  ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#providers","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Boredom Provider‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#1-boredom-provider","content":" Tracks engagement levelsProvides status messagesMonitors conversation qualityAdjusts participation accordingly  ","version":"1.0.17","tagName":"h3"},{"title":"2. Facts Provider‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#2-facts-provider","content":" Manages fact databaseRetrieves relevant informationFormats fact summariesMaintains fact context  ","version":"1.0.17","tagName":"h3"},{"title":"3. Time Provider‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#3-time-provider","content":" Provides UTC timestampsHuman-readable formattingTime-based operation support  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#development","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run linting:  bun run lint   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#dependencies","content":" @elizaos/core: workspace:*  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#future-enhancements","content":" Enhanced Conversation Management Advanced context trackingMulti-thread conversation supportConversation state persistenceImproved conversation flow controlNatural language understanding improvements Advanced Room Control Dynamic room creation and managementRoom permission systemAdvanced moderation toolsRoom analytics and insightsCross-room communication features Expanded Fact Management Enhanced fact verification systemFact relationship mappingAutomated fact updatingFact confidence scoringCross-reference systemFact expiration management Goal System Improvements Multi-step goal planningGoal dependency trackingProgress visualizationGoal priority managementAutomated milestone trackingGoal optimization suggestions Provider Enhancements Improved boredom detectionAdvanced engagement metricsEnhanced fact retrieval algorithmsReal-time status updatesProvider performance analytics Memory Management Enhanced memory prioritizationMemory compression techniquesLong-term memory storageMemory relationship mappingContext-aware recall Developer Tools Enhanced debugging capabilitiesTesting framework improvementsPlugin development templatesDocumentation generatorPerformance profiling tools Integration Features Enhanced plugin interoperabilityExternal service connectorsAPI gateway integrationWebhook system improvementsThird-party platform support  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#credits","content":" Special thanks to:  The Eliza Core development teamThe Eliza community for their contributions and feedback  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Unmaintained: this plugin is currently part of @elizaos/eliza","url":"/packages/plugins/bootstrap#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Unmaintained: this cache plugin originally lived in @elizaos/core. It needs a maintainer.","type":0,"sectionRef":"#","url":"/packages/plugins/cache-redis","content":"Unmaintained: this cache plugin originally lived in @elizaos/core. It needs a maintainer.","keywords":"","version":"1.0.17"},{"title":"@elizaos/plugin-ccxt","type":0,"sectionRef":"#","url":"/packages/plugins/ccxt","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#features","content":" Check balance of assets across multiple configured exchangesPlace market and limit buy/sell ordersIdentify arbitrage opportunities between different exchanges  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#installation","content":" npm install @elizaos/plugin-ccxt   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#configuration","content":" Get your API keys from your preferred cryptocurrency exchanges.  Set up your environment variables:   CCXT_&lt;EXCHANGE&gt;_API_KEY=your_api_key CCXT_&lt;EXCHANGE&gt;_API_SECRET=your_api_secret   ","version":"1.0.17","tagName":"h2"},{"title":"FOR EXAMPLE‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#for-example","content":" CCXT_BINANCE_API_KEY=your_binance_api_key CCXT_BINANCE_API_SECRET=your_binance_api_secret CCXT_BYBIT_API_KEY=your_bybit_api_key CCXT_BYBIT_API_SECRET=your_bybit_api_secret   ","version":"1.0.17","tagName":"h3"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#available-actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"checkbalance‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#checkbalance","content":" Retrieves the current balance of your assets from a specified exchange.  ","version":"1.0.17","tagName":"h3"},{"title":"placeorder‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#placeorder","content":" Places a market or limit buy/sell order on a specified exchange.  ","version":"1.0.17","tagName":"h3"},{"title":"getarbitrageopportunity‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#getarbitrageopportunity","content":" Analyzes price differences across exchanges to identify profitable trades.  ","version":"1.0.17","tagName":"h3"},{"title":"Rate Limits‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#rate-limits","content":" Each exchange has its own rate limits. Please refer to the official documentation of your exchange to understand the limitations.  Support  For support, please open an issue in the repository or reach out to the maintainers:  DISCORDGMAIL  ","version":"1.0.17","tagName":"h2"},{"title":"Links‚Äã","type":1,"pageTitle":"@elizaos/plugin-ccxt","url":"/packages/plugins/ccxt#links","content":" CCXT DOCUMENTATION ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-browser","type":0,"sectionRef":"#","url":"/packages/plugins/browser","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#overview","content":" The Browser plugin serves as a powerful component of Eliza OS, providing browser automation and web scraping capabilities using Playwright. It enables automated web interactions, content extraction, and browser-based tasks for Eliza agents.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#features","content":" Browser Automation: Web scraping and content extraction with PlaywrightMultiple Browser Support: Works with Chromium, Firefox, and WebKitHeadless Mode: Support for both headless and headed browser operationsPage Interaction: Automated form filling, clicking, and navigationContent Extraction: HTML parsing and data extractionScreenshot Capture: Page and element screenshot capabilitiesNetwork Handling: Request interception and network monitoring  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#installation","content":" npm install @elizaos/plugin-browser   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#configuration","content":" The plugin may require various environment variables depending on your use case:  ","version":"1.0.17","tagName":"h2"},{"title":"Core Settings‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#core-settings","content":" CAPSOLVER_API_KEY=your_capsolver_api_key # Optional: For CAPTCHA solving capabilities   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#usage","content":" import { createBrowserPlugin } from '@elizaos/plugin-browser'; // Initialize the plugin const browserPlugin = createBrowserPlugin(); // Register with Eliza OS elizaos.registerPlugin(browserPlugin);   ","version":"1.0.17","tagName":"h2"},{"title":"Services‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#services","content":" ","version":"1.0.17","tagName":"h2"},{"title":"BrowserService‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#browserservice","content":" Provides comprehensive web automation and scraping capabilities using Playwright:  Page navigation and interactionForm filling and submissionContent extraction and parsingScreenshot captureNetwork request handlingCAPTCHA solving (with appropriate configuration)  ","version":"1.0.17","tagName":"h3"},{"title":"Safety & Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#safety--security","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Browser Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#browser-operations","content":" Sandbox Environment: Browser operations run in isolated contextsResource Management: Automatic cleanup of browser instancesRequest Filtering: Control over network requestsMemory Management: Efficient handling of browser resources  ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#common-issues","content":" Browser Launch Failures  Error: Failed to launch browser   Verify system dependencies are installedCheck for sufficient system resourcesEnsure proper permissions  Page Navigation Issues  Error: Navigation timeout   Check network connectivityVerify URL accessibilityAdjust timeout settings  ","version":"1.0.17","tagName":"h3"},{"title":"Debug Mode‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#debug-mode","content":" Enable debug logging for detailed troubleshooting:  process.env.DEBUG = 'eliza:plugin-browser:*';   ","version":"1.0.17","tagName":"h3"},{"title":"System Requirements‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#system-requirements","content":" Node.js 16.x or higherSupported operating system (Windows, macOS, or Linux)Sufficient RAM for browser operationsInternet connectivity  ","version":"1.0.17","tagName":"h3"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#support","content":" For issues and feature requests, please:  Check the troubleshooting guide aboveReview existing GitHub issuesSubmit a new issue with: System informationError logsSteps to reproduce  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#credits","content":" This plugin integrates with and builds upon several key technologies:  Playwright - Core browser automationCAPSolver - CAPTCHA solving capabilities (optional)  Special thanks to:  The Playwright community for their excellent browser automation frameworkThe Eliza community for their contributions and feedback  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-browser","url":"/packages/plugins/browser#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Chainbase Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/chainbase","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"Chainbase Plugin for Eliza","url":"/packages/plugins/chainbase#description","content":" This plugin serves as a powerful interface between Eliza AI agents and blockchain data, allowing users to query and analyze on-chain information using natural language. It transforms complex blockchain queries into actionable insights without requiring deep technical knowledge.  ","version":"1.0.17","tagName":"h2"},{"title":"Key Features‚Äã","type":1,"pageTitle":"Chainbase Plugin for Eliza","url":"/packages/plugins/chainbase#key-features","content":" Multi-chain Data Access: Access comprehensive data across multiple blockchain networksNatural Language Processing: Convert natural language queries into blockchain data analytics and insightsReal-time Data: Get up-to-date blockchain information and analytics  ","version":"1.0.17","tagName":"h2"},{"title":"Supported Networks‚Äã","type":1,"pageTitle":"Chainbase Plugin for Eliza","url":"/packages/plugins/chainbase#supported-networks","content":" EthereumPolygonBNB Smart Chain (BSC)AvalancheArbitrum OneOptimismBasezkSyncMerlin  ","version":"1.0.17","tagName":"h2"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"Chainbase Plugin for Eliza","url":"/packages/plugins/chainbase#usage-examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"On-chain Data Queries‚Äã","type":1,"pageTitle":"Chainbase Plugin for Eliza","url":"/packages/plugins/chainbase#on-chain-data-queries","content":" Query: &quot;query onchain data: This address 0x8308964da9ed5d2e8012023d7c7ef02f9e6438c7 which tokens on Ethereum are held&quot;   This query will return the token holdings for the specified Ethereum address.  Query: &quot;query onchain data: List the top 10 Ethereum blocks by total gas used in the last 24 hours&quot;   This query will analyze and return gas usage statistics for recent Ethereum blocks.  Query: &quot;query onchain data: The address 0x8308964da9ed5d2e8012023d7c7ef02f9e6438c7 last 10 Ethereum token transfer&quot;   This query will fetch the most recent 10 token transfer events for the specified Ethereum address, including both incoming and outgoing transfers.  ","version":"1.0.17","tagName":"h3"},{"title":"Components‚Äã","type":1,"pageTitle":"Chainbase Plugin for Eliza","url":"/packages/plugins/chainbase#components","content":" Actions: Pre-configured blockchain data retrieval and analysis actionsProviders: Data providers for different blockchain networksEvaluators: Analysis tools for blockchain data interpretationServices: Specialized services for data processing and transformation  ","version":"1.0.17","tagName":"h2"},{"title":"Getting Started‚Äã","type":1,"pageTitle":"Chainbase Plugin for Eliza","url":"/packages/plugins/chainbase#getting-started","content":" To use this plugin, you'll need a Chainbase API key:  Visit Chainbase Platform to create an accountOnce logged in, you can obtain a free API key from your dashboardSet your API key as the CHAINBASE_API_KEY environment variable  For development and testing purposes, you can use the API key &quot;demo&quot; to test the basic functionality.  For more detailed information about the available APIs and endpoints, please refer to the Chainbase API Documentation. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-coinmarketcap","type":0,"sectionRef":"#","url":"/packages/plugins/coinmarketcap","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#features","content":" Real-time cryptocurrency price checkingSupport for multiple cryptocurrencies (BTC, ETH, SOL, etc.)Currency conversion (USD, EUR, etc.)Detailed price and market dataNatural language processing for price queries  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#installation","content":" npm install @elizaos/plugin-coinmarketcap   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#configuration","content":" Get your API key from CoinMarketCap Set up your environment variables:  COINMARKETCAP_API_KEY=your_api_key   Register the plugin in your Eliza configuration:  import { CoinMarketCapPlugin } from '@elizaos/plugin-coinmarketcap'; // In your Eliza configuration plugins: [ new CoinMarketCapPlugin(), // ... other plugins ];   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#usage","content":" The plugin responds to natural language queries about cryptocurrency prices. Here are some examples:  &quot;What's the current price of Bitcoin?&quot; &quot;Show me ETH price in USD&quot; &quot;Get the price of SOL&quot;   ","version":"1.0.17","tagName":"h2"},{"title":"Supported Cryptocurrencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#supported-cryptocurrencies","content":" The plugin supports major cryptocurrencies including:  Bitcoin (BTC)Ethereum (ETH)Solana (SOL)USD Coin (USDC)And many more...  ","version":"1.0.17","tagName":"h3"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#available-actions","content":" GET_PRICE‚Äã  Fetches the current price of a cryptocurrency.  // Example response format { symbol: &quot;BTC&quot;, price: 50000.00, currency: &quot;USD&quot;, marketCap: 1000000000000, volume24h: 50000000000, percentChange24h: 2.5 }   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#environment-variables","content":" Variable\tDescription\tRequiredCOINMARKETCAP_API_KEY\tYour CoinMarketCap API key\tYes  ","version":"1.0.17","tagName":"h3"},{"title":"Types‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#types","content":" interface PriceData { price: number; marketCap: number; volume24h: number; percentChange24h: number; } interface GetPriceContent { symbol: string; currency: string; }   ","version":"1.0.17","tagName":"h3"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#error-handling","content":" The plugin includes comprehensive error handling for:  Invalid API keysRate limitingNetwork timeoutsInvalid cryptocurrency symbolsUnsupported currencies  ","version":"1.0.17","tagName":"h2"},{"title":"Rate Limits‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#rate-limits","content":" CoinMarketCap API has different rate limits based on your subscription plan. Please refer to CoinMarketCap's pricing page for detailed information.  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#support","content":" For support, please open an issue in the repository or reach out to the maintainers:  Discord: 0xspit  ","version":"1.0.17","tagName":"h2"},{"title":"Links‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinmarketcap","url":"/packages/plugins/coinmarketcap#links","content":" CoinMarketCap API Documentation GitHub Repository ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-coinbase","type":0,"sectionRef":"#","url":"/packages/plugins/coinbase","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#features","content":" Commerce Integration: Create and manage payment charges using Coinbase CommerceTrading: Execute trades and swaps between different assetsToken Contract Management: Deploy and interact with ERC20, ERC721, and ERC1155 smart contractsMass Payments: Process bulk transfers and payments to multiple addressesAdvanced Trading: Access to Coinbase Advanced Trading API featuresWebhook Management: Create and manage webhooks for various blockchain events  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#installation","content":" npm install @elizaos/plugin-coinbase   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#configuration","content":" The plugin requires several environment variables to be set:  COINBASE_API_KEY=your_api_key COINBASE_PRIVATE_KEY=your_private_key COINBASE_COMMERCE_KEY=your_commerce_key COINBASE_NOTIFICATION_URI=your_webhook_notification_uri   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#usage","content":" import { plugins } from '@elizaos/plugin-coinbase'; // Register all plugins const { coinbaseMassPaymentsPlugin, coinbaseCommercePlugin, tradePlugin, tokenContractPlugin, webhookPlugin, advancedTradePlugin, } = plugins; // Register individual plugins as needed runtime.registerPlugin(coinbaseCommercePlugin); runtime.registerPlugin(tradePlugin); // etc...   ","version":"1.0.17","tagName":"h2"},{"title":"Available Plugins‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#available-plugins","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Commerce Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#commerce-plugin","content":" Create charges with fixed or dynamic pricingSupport for multiple currencies (USD, EUR, USDC)Charge status tracking and management  ","version":"1.0.17","tagName":"h3"},{"title":"Trade Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#trade-plugin","content":" Execute basic trades between assetsSupport for market and limit ordersTransaction logging and tracking  ","version":"1.0.17","tagName":"h3"},{"title":"Token Contract Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#token-contract-plugin","content":" Deploy ERC20, ERC721, and ERC1155 contractsInteract with deployed contractsRead contract data and balances  ","version":"1.0.17","tagName":"h3"},{"title":"Mass Payments Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#mass-payments-plugin","content":" Process bulk transfers to multiple addressesSupport for various assets and networksTransaction logging and CSV export  ","version":"1.0.17","tagName":"h3"},{"title":"Advanced Trade Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#advanced-trade-plugin","content":" Access to advanced trading featuresSupport for complex order typesDetailed trade history and tracking  ","version":"1.0.17","tagName":"h3"},{"title":"Webhook Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#webhook-plugin","content":" Create and manage blockchain event webhooksSupport for various event types and filtersWebhook status tracking and logging  ","version":"1.0.17","tagName":"h3"},{"title":"Supported Networks‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#supported-networks","content":" Base (Mainnet &amp; Sepolia)Ethereum (Mainnet &amp; Holesky)Polygon MainnetSolana (Mainnet &amp; Devnet)Arbitrum MainnetAnd more...  ","version":"1.0.17","tagName":"h2"},{"title":"CSV Logging‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#csv-logging","content":" The plugin automatically logs various operations to CSV files:  trades.csv: Trading operationstransactions.csv: Mass payment transactionswebhooks.csv: Webhook configurationsadvanced_trades.csv: Advanced trading operations  ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#dependencies","content":" @elizaos/core: Core ElizaOS functionalitycoinbase-api: Coinbase API integrationcoinbase-advanced-sdk: Coinbase Advanced Trading SDKAdditional type definitions and utilities  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#future-enhancements","content":" Advanced Trading Features Real-time market data streamingAdvanced order types (OCO, trailing stop)Portfolio rebalancing automationCustom trading strategies implementationMulti-exchange arbitrage support Enhanced Commerce Integration Subscription payment handlingMulti-currency checkout optimizationAdvanced refund managementCustom payment flow templatesAutomated invoice generation Improved Token Management Batch token operationsGas optimization for token contractsToken metadata management systemAutomated token listing processSmart contract deployment templates Security Enhancements Advanced API key managementMulti-signature supportTransaction monitoring systemRisk assessment toolsRate limiting improvements Analytics and Reporting Custom report generationTrading performance analyticsPayment flow analyticsReal-time monitoring dashboardHistorical data analysis tools Webhook Management Enhanced event filteringRetry mechanism improvementsWebhook monitoring dashboardCustom webhook templatesEvent batching support Developer Tools SDK expansionTesting environment improvementsDocumentation generatorCLI tools for common operationsIntegration templates Cross-Platform Integration Mobile SDK supportBrowser extension supportDesktop application integrationIoT device supportCross-chain bridging capabilities  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#credits","content":" This plugin integrates with and builds upon several key technologies:  Coinbase: Digital currency exchange platformCoinbase Commerce: Cryptocurrency payment solutionCoinbase Cloud: Blockchain infrastructureCoinbase Advanced Trade API: Trading interfaceCoinbase Prime: Institutional trading platform  Special thanks to:  The Coinbase development teamThe Coinbase Commerce teamThe Coinbase Cloud infrastructure teamThe Advanced Trade API maintainersThe Eliza community for their contributions and feedback  For more information about Coinbase capabilities:  Coinbase API DocumentationCommerce API ReferenceAdvanced Trade DocumentationCoinbase Prime Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-coinbase","url":"/packages/plugins/coinbase#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Plugin CoinGecko","type":0,"sectionRef":"#","url":"/packages/plugins/coingecko","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#overview","content":" The Plugin CoinGecko provides a simple interface to get real-time cryptocurrency data. It integrates with CoinGecko's API to fetch current prices, market data, trending coins, and top gainers/losers for various cryptocurrencies in different fiat currencies.  This plugin uses the CoinGecko Pro API. Please refer to their documentation for detailed information about rate limits, available endpoints, and response formats.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#installation","content":" bun add @elizaos/plugin-coingecko   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#configuration","content":" Set up your environment with the required CoinGecko API key:  Variable Name\tDescriptionCOINGECKO_API_KEY\tYour CoinGecko Pro API key COINGECKO_PRO_API_KEY\tYour CoinGecko Pro API key  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#usage","content":" import { coingeckoPlugin } from '@elizaos/plugin-coingecko'; // Initialize the plugin const plugin = coingeckoPlugin;   ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"GET_PRICE‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#get_price","content":" Fetches the current price and market data for one or more cryptocurrencies.  Features:  Multiple currency support (e.g., USD, EUR, JPY)Optional market cap dataOptional 24h volume dataOptional 24h price change dataOptional last update timestamp  Examples:  &quot;What's the current price of Bitcoin?&quot;&quot;Check ETH price in EUR with market cap&quot;&quot;Show me BTC and ETH prices in USD and EUR&quot;&quot;What's USDC worth with 24h volume and price change?&quot;  ","version":"1.0.17","tagName":"h3"},{"title":"GET_TRENDING‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#get_trending","content":" Fetches the current trending cryptocurrencies on CoinGecko.  Features:  Includes trending coins with market dataOptional NFT inclusionOptional category inclusion  Examples:  &quot;What's trending in crypto?&quot;&quot;Show me trending coins only&quot;&quot;What are the hot cryptocurrencies right now?&quot;  ","version":"1.0.17","tagName":"h3"},{"title":"GET_TOP_GAINERS_LOSERS‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#get_top_gainers_losers","content":" Fetches the top gaining and losing cryptocurrencies by price change.  Features:  Customizable time range (1h, 24h, 7d, 14d, 30d, 60d, 1y)Configurable number of top coins to includeMultiple currency supportMarket cap ranking included  Examples:  &quot;Show me the biggest gainers and losers today&quot;&quot;What are the top movers in EUR for the past week?&quot;&quot;Show me monthly performance of top 100 coins&quot;  ","version":"1.0.17","tagName":"h3"},{"title":"Response Format‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#response-format","content":" All actions return structured data including:  Formatted text for easy readingRaw data for programmatic useRequest parameters usedError details when applicable  ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"Plugin CoinGecko","url":"/packages/plugins/coingecko#error-handling","content":" The plugin handles various error scenarios:  Rate limitingAPI key validationInvalid parametersNetwork issuesPro plan requirements ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos-plugins/plugin-compass","type":0,"sectionRef":"#","url":"/packages/plugins/compass","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-compass","url":"/packages/plugins/compass#overview","content":" The Compass plugin leverages the @compass-labs/sdk TypeScript SDK to provide a suite of actions. These actions correspond to various endpoint calls and schemas defined by the Compass API, enabling efficient interaction with the API.  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-compass","url":"/packages/plugins/compass#configuration","content":" The plugin requires the following env variables to be set:  COMPASS_WALLET_PRIVATE_KEY= &lt;wallet private key&gt; COMPASS_ARBITRUM_RPC_URL= &lt;arbitrum mainnet rpc url&gt; COMPASS_ETHEREUM_RPC_URL= &lt;ethereum mainnet rpc url &gt; COMPASS_BASE_RPC_URL= &lt;base mainnet rpc url&gt;   or this can directly be set in the character configuration:  ... &quot;settings&quot;: { &quot;secrets&quot;: { &quot;COMPASS_WALLET_PRIVATE_KEY&quot;: &lt;wallet private key&gt;, &quot;COMPASS_ARBITRUM_RPC_URL&quot;: &lt;arbitrum mainnet rpc url&gt;, &quot;COMPASS_ETHEREUM_RPC_URL&quot;: &lt;ethereum mainnet rpc url&gt;, &quot;COMPASS_BASE_RPC_URL&quot;: &lt;base mainnet rpc url&gt; } }, ...   ","version":"1.0.17","tagName":"h2"},{"title":"Supported Protocols‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-compass","url":"/packages/plugins/compass#supported-protocols","content":" For a comprehensive list of supported protocols and available actions, please visit the Compass API documentation page.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation Instructions‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-compass","url":"/packages/plugins/compass#installation-instructions","content":" To install the plugin:  npx elizaos plugins add @elizaos-plugins/plugin-compass bun run build   before starting up eliza  ","version":"1.0.17","tagName":"h2"},{"title":"Character Configuration‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-compass","url":"/packages/plugins/compass#character-configuration","content":" Here are some secrets that need to be set if the plugin was to be used together with a telegram client  ... &quot;clients&quot;: [&quot;telegram&quot;], ... &quot;settings&quot;: { ... &quot;secrets&quot;: { &quot;OPENAI_API_KEY&quot;: &quot;&lt;YOUR_EXAMPLE&gt;&quot;, &quot;COMPASS_WALLET_PRIVATE_KEY&quot;: &quot;&lt;YOUR_EXAMPLE&gt;&quot;, &quot;COMPASS_ARBITRUM_RPC_URL&quot;: &quot;&lt;YOUR_EXAMPLE&gt;&quot;, &quot;COMPASS_ETHEREUM_RPC_URL&quot;: &quot;&lt;YOUR_EXAMPLE&gt;&quot;, &quot;COMPASS_BASE_RPC_URL&quot;: &quot;&lt;YOUR_EXAMPLE&gt;&quot;, &quot;TELEGRAM_BOT_TOKEN&quot;: &quot;&lt;YOUR_EXAMPLE&gt;&quot; } }, ... &quot;plugins&quot;: [&quot;@elizaos-plugins/plugin-compass&quot;], ...  ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-conflux","type":0,"sectionRef":"#","url":"/packages/plugins/conflux","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#description","content":" The Conflux plugin enables seamless interaction with both Conflux Core Space and eSpace networks. It provides functionality for token transfers, cross-space bridge operations, and ConfiPump token management (creation, buying, and selling).  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#installation","content":" bun install @elizaos/plugin-conflux   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#configuration","content":" The plugin requires the following environment variables to be set:  CONFLUX_CORE_PRIVATE_KEY=&lt;Your Conflux Core Space private key&gt; CONFLUX_CORE_SPACE_RPC_URL=&lt;Conflux Core Space RPC endpoint&gt; CONFLUX_MEME_CONTRACT_ADDRESS=&lt;ConfiPump contract address&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#basic-integration","content":" import { confluxPlugin } from '@elizaos/plugin-conflux';   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#example-usage","content":" // Core Space Transfer 'Send 1 CFX to cfx:aaejuaaaaaaaaaaaaaaaaaaaaaaaaaaaa2eaeg85p5'; // Cross-Space Bridge Transfer 'Send 1 CFX to eSpace Address 0x119DA8bbe74B1C5c987D0c64D10eC1dB301d4752'; // ConfiPump Token Creation 'Create a new token called GLITCHIZA with symbol GLITCHIZA and generate a description about it'; // ConfiPump Token Trading 'Buy 0.00069 CFX worth of GLITCHIZA(0x1234567890abcdef)'; 'Sell 0.00069 CFX worth of GLITCHIZA(0x1234567890abcdef)';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#actions","content":" SEND_CFX‚Äã  Transfers CFX tokens within Conflux Core Space.  Aliases:  SEND_CONFLUXSEND_CFX_CORE_SPACETRANSFER_CFX  Input Content:  interface TransferContent { to: string; // Conflux Core Space address (cfx: prefix) amount: string; // Amount of CFX to send }   BRIDGE_SEND_CFX‚Äã  Transfers CFX tokens from Core Space to eSpace.  Aliases:  BRIDGE_SEND_CONFLUXCROSS_SPACE_SEND_CFXBRIDGE_TRANSFER_CFXCROSS_SPACE_TRANSFER_CFX  Input Content:  interface TransferContent { to: string; // Conflux eSpace address (0x prefix) amount: string; // Amount of CFX to send }   CONFI_PUMP‚Äã  Manages ConfiPump token operations.  Aliases:  SELL_TOKENBUY_TOKENCREATE_TOKEN  Input Content:  interface PumpContent { action: 'CREATE_TOKEN' | 'BUY_TOKEN' | 'SELL_TOKEN'; params: { name?: string; symbol?: string; description?: string; tokenAddress?: string; value?: string; }; }   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#common-issues--troubleshooting","content":" Transaction Failures Ensure sufficient CFX balance for transactionsVerify correct address format (cfx: for Core Space, 0x for eSpace)Check RPC endpoint connectivity  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#security-best-practices","content":" Private Key Management Store private keys securely using environment variablesNever expose private keys in code or logsUse separate accounts for development and production  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run the plugin:  bun run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#future-enhancements","content":" Advanced Token Management Batch token transfersToken allowance managementAdvanced meme token featuresToken metadata management Enhanced Bridge Operations Multi-token bridge supportAutomated bridge fee optimizationBridge transaction status trackingCross-space batch operations Smart Contract Integration Contract deployment toolsContract interaction templatesABI management systemContract verification tools Performance Optimizations Transaction batchingImproved caching mechanismsGas optimization strategiesNetwork request optimization Developer Tools CLI tools for common operationsDevelopment environment templatesTesting utilitiesDocumentation generator Security Features Transaction simulationRisk assessment toolsAddress validation improvementsRate limiting controls Monitoring and Analytics Transaction tracking dashboardPerformance metricsError reporting systemUsage analytics  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#credits","content":" This plugin integrates with and builds upon several key technologies:  Conflux Network: Hybrid consensus blockchainjs-conflux-sdk: Official Conflux JavaScript SDKConfiPump: Meme token creation platform@conflux-dev/conflux-address-js: Address utilities  Special thanks to:  The Conflux Foundation for developing the networkThe Conflux Developer communityThe ConfiPump team for meme token infrastructureThe js-conflux-sdk maintainersThe Eliza community for their contributions and feedback  For more information about Conflux capabilities:  Conflux DocumentationConflux PortalConfluxScanCross-Space Bridge  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-conflux","url":"/packages/plugins/conflux#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-cronoszkevm","type":0,"sectionRef":"#","url":"/packages/plugins/cronoszkevm","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#description","content":" The Cronos zkEVM plugin enables seamless token transfers on the Cronos zkEVM network. It provides functionality for transferring various tokens including ZKCRO, USDC, and ETH using Web3 and zkSync integration.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#installation","content":" bun install @elizaos/plugin-cronoszkevm   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#configuration","content":" The plugin requires the following environment variables to be set:  CRONOSZKEVM_ADDRESS=&lt;Your Cronos zkEVM wallet address&gt; CRONOSZKEVM_PRIVATE_KEY=&lt;Your Cronos zkEVM private key&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#basic-integration","content":" import { cronosZkEVMPlugin } from '@elizaos/plugin-cronoszkevm';   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#example-usage","content":" // Send USDC tokens 'Send 100 USDC to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62'; // Send ZKCRO tokens 'Send 100 ZKCRO to 0xbD8679cf79137042214fA4239b02F4022208EE82'; // Send ETH tokens 'Transfer 1 ETH to 0x123...';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#actions","content":" SEND_TOKEN‚Äã  Transfers tokens on the Cronos zkEVM network.  Aliases:  TRANSFER_TOKEN_ON_CRONOSZKEVMTRANSFER_TOKENS_ON_CRONOSZKSEND_TOKENS_ON_CRONOSZKEVMSEND_TOKENS_ON_CRONOSZKSEND_ETH_ON_CRONOSZKEVMSEND_ETH_ON_CRONOSZKPAY_ON_CRONOSZKEVMPAY_ON_CRONOSZK  Input Content:  interface TransferContent { tokenAddress: string; // The token contract address recipient: string; // The recipient's address amount: string | number; // Amount to transfer }   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#common-issues--troubleshooting","content":" Transaction Failures Ensure sufficient token balance for transfersVerify correct recipient address format (must start with 0x)Check network connectivity to Cronos zkEVM RPC endpoint Configuration Issues Verify CRONOSZKEVM_ADDRESS is properly setEnsure CRONOSZKEVM_PRIVATE_KEY is valid and secureConfirm RPC endpoint is accessible  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#security-best-practices","content":" Private Key Management Store private keys securely using environment variablesNever expose private keys in code or logsUse separate accounts for development and production Transaction Validation Always validate addresses before sending transactionsVerify token amounts and decimalsImplement proper error handling  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run the plugin:  bun run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Common Token Addresses‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#common-token-addresses","content":" ZKCRO/zkCRO: 0x000000000000000000000000000000000000800AUSDC/usdc: 0xaa5b845f8c9c047779bedf64829601d8b264076cETH/eth: 0x898b3560affd6d955b1574d87ee09e46669c60ea  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#credits","content":" This plugin integrates with and builds upon several key technologies:  Cronos zkEVM: Layer 2 scaling solution for CronosWeb3.js: Ethereum JavaScript APIzkSync: Zero-knowledge rollup technologyEthers.js: Complete Ethereum libraryViem: Modern TypeScript Ethereum library  Special thanks to:  The Cronos team for developing zkEVMThe Matter Labs team for zkSync technologyThe Web3.js and Ethers.js maintainersThe Viem development teamThe Eliza community for their contributions and feedback  For more information about Cronos zkEVM capabilities:  Cronos zkEVM DocumentationzkEVM BridgeCronos Developer PortalzkSync Integration Guide  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronoszkevm","url":"/packages/plugins/cronoszkevm#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-cosmos","type":0,"sectionRef":"#","url":"/packages/plugins/cosmos","content":"","keywords":"","version":"1.0.17"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#development","content":" Prepare Eliza according to README Add variables required for @elizaos/plugin-cosmos :  COSMOS_RECOVERY_PHRASE=your recovery phrase words COSMOS_AVAILABLE_CHAINS=chain1,chain2,chain3   Ensure the appropriate environment variables are added for the plugin. If they are correctly configured, the project will run with @elizaos/plugin-cosmos  Run Eliza  bun run dev   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Default Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#default-setup","content":" To start using the plugin, you need to provide your Cosmos account recovery phrases and the list of available chains. Add the following to your .env file:  COSMOS_RECOVERY_PHRASE=your recovery phrase words COSMOS_AVAILABLE_CHAINS=chain1,chain2,chain3   Ensure that the chain names in COSMOS_AVAILABLE_CHAINS match the identifiers from the chain-registry library for compatibility.  ","version":"1.0.17","tagName":"h3"},{"title":"Using the Cosmos Helper Character‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#using-the-cosmos-helper-character","content":" The plugin includes a pre-configured character, cosmosHelper.character.json, optimized for Cosmos-related operations. This character enhances interaction by:  Handling repeated prompts effectively. Requesting confirmation before executing detected actions.  To use the character, pass it with the --characters flag:  --characters='../characters/cosmosHelper.character.json'     ","version":"1.0.17","tagName":"h3"},{"title":"Custom chain configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#custom-chain-configuration","content":" Plugin allows you to pass you custom chain config to createCosmosPlugin function invoked in ../agent/src/index.  Your custom configuration fulfills the interfaces from chain-registry  import type { assets, chains } from &quot;chain-registry&quot;; export interface ICosmosPluginCustomChainData { chainData: (typeof chains)[number]; assets: (typeof assets)[number]; } export interface ICosmosPluginOptions { customChainData?: ICosmosPluginCustomChainData[]; }   ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#token-transfer","content":" This plugin supports a token transfer action, which allows users to transfer tokens between addresses on Cosmos-compatible blockchains. The action prompts for confirmation to ensure secure execution.  Example Prompts‚Äã  Below are examples of how the transfer action can be initiated and confirmed:  Example  User input:  Make transfer 0.0001 ATOM to cosmos1nk3uuw6zt5t5aqw5fvujkd54sa4uws9xv465ad on cosmoshubtestnet.   Plugin response:  Do you confirm the transfer action?   User confirmation:  Yes   Action executed.  ","version":"1.0.17","tagName":"h3"},{"title":"Token IBC Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#token-ibc-transfer","content":" This plugin supports a token transfer action, which allows users to transfer tokens between addresses on Cosmos-compatible blockchains between different chains.  Example Prompts‚Äã  Below are examples of how the ibc transfer action can be initiated and confirmed:  Example  User input:  Make an IBC transfer 0.0001 OSMO to neutron1nk3uuw6zt5t5aqw5fvujkd54sa4uws9xg2nk82 from osmosistestnet to neutrontestnet   Plugin response:  Before making the IBC transfer, I would like to confirm the details. You would like to transfer 0.0001 OSMO from osmosistestnet to neutrontestnet, specifically to the address neutron1nk3uuw6zt5t5aqw5fvujkd54sa4uws9xg2nk82, is that correct?   User confirmation:  Yes   Action executed.    ","version":"1.0.17","tagName":"h3"},{"title":"Token IBC Swap‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#token-ibc-swap","content":" This action allows swapping tokens between chains. The implementation of swapping is based on the Skip API and uses the @skip-go/client library. To place transactions on chains, they must first be added to the env file. Specifically:  COSMOS_AVAILABLE_CHAINS=osmosis,neutron,axelar,cosmoshub,terra2,pryzm   Keep in mind that most swaps require intermediate chains. These chains must also be included in the env file.  You can check which chains are supported by the Skip API and this plugin here: Skip API Documentation.  The list below contains all supported chains extracted from the Skip API:  COSMOS_AVAILABLE_CHAINS=terra2,quicksilver,coreum,regen,mars,passage,dhealth,lumnetwork,provenance,chihuahua,pryzm,fetchhub,comdex,kyve,xpla,umee,celestia,osmosis,empowerchain,migaloo,dymension,kujira,self,humans,gitopia,agoric,doravota,int3face,quasar,gravitybridge,kava,sifchain,seda,shentu,decentr,cronos,carbon,stride,haqq,jackal,omniflixhub,noble,sentinel,nolus,odin,assetmantle,dydx,beezee,axelar,nois,mantrachain,elys,crescent,synternet,xion,source,akash,sei,canto,teritori,stargaze,titan,aura,evmos,archway,gateway,cheqd,milkyway,nibiru,cosmoshub,ununifi,nyx,bitsong,cryptoorgchain,neutron,penumbra,terra,shido,sommelier,saga,secretnetwork,chain4energy,juno,andromeda,planq,lava,oraichain,injective,persistence,composable   Example prompts:‚Äã  Default flow‚Äã  An example of the default flow of a swap request:  User input:   Swap 10 OSMO on osmosis to ATOM on cosmoshub   Agent asks for confirmation:  About to swap 10 OSMO on osmosis to ATAOM on cosmoshub. I would like to confirm the transaction details. Please confirm that you would like to proceed with the swap.   User confiramation:  confirming / yes   Agent calls action and responds after completing:  Successfully swapped 10 OSMO tokens to ATOM on chain cosmoshub. Transaction Hash: E84F36D6EEFAA6D7B70827F34EDAB83258BB86EFE33AEA1F4559D00B30CD3B50   Special case handling‚Äã  An example of a flow when there is more than one token with the same symbol on the destination chain (e.g., multiple USDC tokens):  User input:  Swap 10 OSMO on osmosis to ATOM on cosmoshub   Agent asks for confirmation:  About to swap 10 OSMO on osmosis to ATAOM on cosmoshub. I would like to confirm the transaction details. Please confirm that you would like to proceed with the swap.   User confirmation:  confirming / yes   Model response:  I will now initiate the swap of 10 OSMO on the Osmosis chain to USDC on the Axelar chain. Please wait for the transaction to complete. If you need to swap more assets, feel free to let me know. Error occured. Swap was not performed. Please provide denom for coin: USDC, on Chain Name: axelar. It is necessary as the symbol USDC is not unique among coins on chain axelar. Select one from found assets: Symbol: USDC Desc: Circle's stablecoin on Axelar Denom: uusdc, Symbol: USDC Desc: Circle's stablecoin from Polygon on Axelar Denom: polygon-uusdc, Symbol: USDC Desc: Circle's stablecoin from Avalanche on Axelar Denom: avalanche-uusdc   User response:  Swap 10 OSMO on osmosis to USDC with denom uusdc on axelar   Action call and agent response:  Successfully swapped 10 OSMO tokens to USDC uusdc on chain axelar. Transaction Hash: E84F36D6EEFAA6D7B70827F34EDAB83258BB86EFE33AEA1F4559D00B30CD3B50   ","version":"1.0.17","tagName":"h3"},{"title":"Contribution‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#contribution","content":" The plugin includes comprehensive tests. Before submitting any pull requests, ensure all tests pass.  ","version":"1.0.17","tagName":"h2"},{"title":"Running Tests‚Äã","type":1,"pageTitle":"@elizaos/plugin-cosmos","url":"/packages/plugins/cosmos#running-tests","content":" Navigate to the plugin-cosmos directory and execute:  bun test     This plugin simplifies Cosmos blockchain interactions and enhances productivity with its tailored features. Happy building! ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-cronos","type":0,"sectionRef":"#","url":"/packages/plugins/cronos","content":"","keywords":"","version":"1.0.17"},{"title":"Supported Networks‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#supported-networks","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Mainnet‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#mainnet","content":" Cronos Mainnet (Chain ID: 25) RPC Endpoint: https://evm.cronos.org/Explorer: https://explorer.cronos.org/Native Token: CRO  ","version":"1.0.17","tagName":"h3"},{"title":"Testnet‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#testnet","content":" Cronos Testnet 3 (Chain ID: 338) RPC Endpoint: https://evm-t3.cronos.org/Explorer: https://cronos.org/explorer/testnet3Native Token: TCRO  ","version":"1.0.17","tagName":"h3"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#installation","content":" bun add @elizaos/plugin-cronos   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#basic-setup","content":" import { cronosPlugin } from '@elizaos/plugin-cronos'; // Use the plugin in your Eliza configuration const config = { plugins: [cronosPlugin], // ... rest of your config };   ","version":"1.0.17","tagName":"h3"},{"title":"Character Configuration Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#character-configuration-guide","content":" Create a your-character.character.json file with the following structure:  { &quot;name&quot;: &quot;YourCharacterName&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-cronos&quot;], &quot;clients&quot;: [&quot;telegram&quot;], &quot;modelProvider&quot;: &quot;openai&quot;, &quot;settings&quot;: { &quot;secrets&quot;: {}, &quot;chains&quot;: { &quot;evm&quot;: [&quot;cronos&quot;, &quot;cronosTestnet&quot;] } }, &quot;system&quot;: &quot;Primary function is to execute token transfers and check balances on Cronos chain.&quot;, &quot;actions&quot;: { &quot;SEND_TOKEN&quot;: { &quot;enabled&quot;: true, &quot;priority&quot;: 1, &quot;force&quot;: true, &quot;schema&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;fromChain&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The chain to execute the transfer on&quot;, &quot;enum&quot;: [&quot;cronos&quot;, &quot;cronosTestnet&quot;] }, &quot;toAddress&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The recipient's wallet address&quot;, &quot;pattern&quot;: &quot;^0x[a-fA-F0-9]{40}$&quot; }, &quot;amount&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The amount of tokens to transfer&quot;, &quot;pattern&quot;: &quot;^[0-9]*(\\\\.[0-9]+)?$&quot; } }, &quot;required&quot;: [&quot;fromChain&quot;, &quot;toAddress&quot;, &quot;amount&quot;] }, &quot;triggers&quot;: [&quot;send * CRO to *&quot;, &quot;transfer * CRO to *&quot;], &quot;examples&quot;: [ { &quot;input&quot;: &quot;Send 0.1 CRO to 0x...&quot;, &quot;output&quot;: { &quot;fromChain&quot;: &quot;cronos&quot;, &quot;toAddress&quot;: &quot;0x...&quot;, &quot;amount&quot;: &quot;0.1&quot; } } ] }, &quot;CHECK_BALANCE&quot;: { &quot;enabled&quot;: true, &quot;priority&quot;: 1, &quot;force&quot;: true, &quot;schema&quot;: { &quot;type&quot;: &quot;object&quot;, &quot;properties&quot;: { &quot;chain&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The chain to check balance on&quot;, &quot;enum&quot;: [&quot;cronos&quot;, &quot;cronosTestnet&quot;] } }, &quot;required&quot;: [&quot;chain&quot;] }, &quot;triggers&quot;: [ &quot;check balance&quot;, &quot;show balance&quot;, &quot;what's my balance&quot;, &quot;how much CRO do I have&quot;, &quot;check balance on *&quot;, &quot;show balance on *&quot; ], &quot;examples&quot;: [ { &quot;input&quot;: &quot;check balance&quot;, &quot;output&quot;: { &quot;chain&quot;: &quot;cronos&quot; } }, { &quot;input&quot;: &quot;what's my balance on testnet&quot;, &quot;output&quot;: { &quot;chain&quot;: &quot;cronosTestnet&quot; } } ] } }, &quot;messageExamples&quot;: [ [ { &quot;user&quot;: &quot;{{user1}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Send 100 CRO to 0x...&quot; } }, { &quot;user&quot;: &quot;YourCharacterName&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Processing token transfer...&quot;, &quot;action&quot;: &quot;SEND_TOKEN&quot; } } ], [ { &quot;user&quot;: &quot;{{user1}}&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;What's my balance?&quot; } }, { &quot;user&quot;: &quot;YourCharacterName&quot;, &quot;content&quot;: { &quot;text&quot;: &quot;Checking your balance...&quot;, &quot;action&quot;: &quot;CHECK_BALANCE&quot; } } ] ] }   Key Configuration Fields:‚Äã  Basic Setup name: Your character's nameplugins: Include @elizaos/plugin-cronosclients: Supported client platforms Chain Settings Configure both mainnet and testnet in settings.chains.evmAvailable options: &quot;cronos&quot; (mainnet) and &quot;cronosTestnet&quot; Action Configuration SEND_TOKEN: Action for token transfersCHECK_BALANCE: Action for checking wallet balanceschema: Defines the required parameters for each actiontriggers: Phrases that activate the actionsexamples: Sample inputs and outputs Message Examples Provide example interactionsShow how actions are triggeredDemonstrate expected responses  ","version":"1.0.17","tagName":"h3"},{"title":"Action Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#action-examples","content":" // Send tokens on mainnet &quot;Send 0.1 CRO to 0x...&quot; use mainnet // Send tokens on testnet &quot;Send 0.1 TCRO to 0x...&quot; use testnet // Check balance on mainnet &quot;check balance&quot; &quot;what's my balance&quot; &quot;how much CRO do I have&quot; // Check balance on testnet &quot;check balance on testnet&quot; &quot;what's my balance on testnet&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#features","content":" All standard EVM functionality inherited from @elizaos/plugin-evmPreconfigured for both Cronos Mainnet and TestnetNative CRO/TCRO token supportAutomated token transfer actionsBalance checking functionalityBuilt-in chain configuration  ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#environment-variables","content":" Required environment variable for transactions:  # Wallet private key (Required, must start with 0x) CRONOS_PRIVATE_KEY=0x...   ","version":"1.0.17","tagName":"h2"},{"title":"Security Warnings ‚ö†Ô∏è‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#security-warnings-Ô∏è","content":" NEVER commit private keys to version controlNEVER share private keys with anyoneALWAYS use environment variables or secure key managementUse separate keys for mainnet and testnetMonitor your wallet for unauthorized transactions  ","version":"1.0.17","tagName":"h3"},{"title":"Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#setup","content":" Create .env file:  CRONOS_PRIVATE_KEY=0x... # Mainnet   For testnet development, use .env.local:  CRONOS_PRIVATE_KEY=0x... # Testnet only   Add to .gitignore:  .env .env.*   ","version":"1.0.17","tagName":"h3"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-cronos","url":"/packages/plugins/cronos#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos-plugins/plugin-d.a.t.a","type":0,"sectionRef":"#","url":"/packages/plugins/d-a-t-a","content":"","keywords":"","version":"1.0.17"},{"title":"Use Cases‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-d.a.t.a","url":"/packages/plugins/d-a-t-a#use-cases","content":" On-chain stats fetching.Token info.On-chain address tracking (CARV ID required).  ","version":"1.0.17","tagName":"h2"},{"title":"Example‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-d.a.t.a","url":"/packages/plugins/d-a-t-a#example","content":" Q: Can you tell me about the AAVE  A: Searching the results from d.a.t.a, please wait a moment... Analyzing Aave (AAVE) token data. Aave is a decentralized lending and borrowing protocol operating on multiple blockchains, including Ethereum, Polygon, Avalanche, and others. The AAVE token is primarily used for governance, allowing holders to vote on protocol upgrades and changes. It also serves as a safety mechanism, where staked AAVE can be used to cover shortfalls in the protocol. Aave is categorized under 'Decentralized Finance (DeFi)', 'Lending/Borrowing Protocols', and multiple ecosystem integrations, indicating its broad utility and adoption across various blockchain environments. The token is deployed on 12 different platforms, showcasing its cross-chain capabilities. Would you like a deeper analysis of its technical features, market trends, or specific use cases?  Logs:   ‚óé LOGS %%%% D.A.T.A. Querying token info for ticker: AAVE [&quot;‚óé Querying token info for ticker: AAVE&quot;] [&quot;‚óé Successfully retrieved token info for AAVE&quot;] ‚óé LOGS %%%% D.A.T.A. queryResult: { &quot;success&quot;: true, &quot;data&quot;: { &quot;ticker&quot;: &quot;aave&quot;, &quot;symbol&quot;: &quot;aave&quot;, &quot;name&quot;: &quot;Aave&quot;, &quot;platform&quot;: &quot;ethereum&quot;, &quot;categories&quot;: [ &quot;Decentralized Finance (DeFi)&quot;, &quot;Governance&quot;, &quot;Yield Farming&quot;, &quot;BNB Chain Ecosystem&quot;, &quot;Lending/Borrowing Protocols&quot;, &quot;Avalanche Ecosystem&quot;, &quot;Polygon Ecosystem&quot;, &quot;Near Protocol Ecosystem&quot;, &quot;Fantom Ecosystem&quot;, &quot;Harmony Ecosystem&quot;, &quot;Arbitrum Ecosystem&quot;, &quot;Ethereum Ecosystem&quot;, &quot;Optimism Ecosystem&quot;, &quot;Index Coop Defi Index&quot;, &quot;Energi Ecosystem&quot;, &quot;Sora Ecosystem&quot;, &quot;Huobi ECO Chain Ecosystem&quot;, &quot;GMCI DeFi Index&quot;, &quot;Blockchain Capital Portfolio&quot;, &quot;Index Coop Index&quot;, &quot;GMCI Index&quot;, &quot;World Liberty Financial Portfolio&quot; ], &quot;contract_infos&quot;: [ { &quot;platform&quot;: &quot;near-protocol&quot;, &quot;address&quot;: &quot;7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9.factory.bridge.near&quot; }, { &quot;platform&quot;: &quot;huobi-token&quot;, &quot;address&quot;: &quot;0x202b4936fe1a82a4965220860ae46d7d3939bb25&quot; }, { &quot;platform&quot;: &quot;fantom&quot;, &quot;address&quot;: &quot;0x6a07a792ab2965c72a5b8088d3a069a7ac3a993b&quot; }, { &quot;platform&quot;: &quot;energi&quot;, &quot;address&quot;: &quot;0xa7f2f790355e0c32cab03f92f6eb7f488e6f049a&quot; }, { &quot;platform&quot;: &quot;binance-smart-chain&quot;, &quot;address&quot;: &quot;0xfb6115445bff7b52feb98650c87f44907e58f802&quot; }, { &quot;platform&quot;: &quot;ethereum&quot;, &quot;address&quot;: &quot;0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9&quot; }, { &quot;platform&quot;: &quot;optimistic-ethereum&quot;, &quot;address&quot;: &quot;0x76fb31fb4af56892a25e32cfc43de717950c9278&quot; }, { &quot;platform&quot;: &quot;polygon-pos&quot;, &quot;address&quot;: &quot;0xd6df932a45c0f255f85145f286ea0b292b21c90b&quot; }, { &quot;platform&quot;: &quot;harmony-shard-0&quot;, &quot;address&quot;: &quot;0xcf323aad9e522b93f11c352caa519ad0e14eb40f&quot; }, { &quot;platform&quot;: &quot;arbitrum-one&quot;, &quot;address&quot;: &quot;0xba5ddd1f9d7f570dc94a51479a000e3bce967196&quot; }, { &quot;platform&quot;: &quot;avalanche&quot;, &quot;address&quot;: &quot;0x63a72806098bd3d9520cc43356dd78afe5d386d9&quot; }, { &quot;platform&quot;: &quot;sora&quot;, &quot;address&quot;: &quot;0x0091bd8d8295b25cab5a7b8b0e44498e678cfc15d872ede3215f7d4c7635ba36&quot; } ], &quot;price&quot;: 0 }, &quot;metadata&quot;: { &quot;queryTime&quot;: &quot;2025-01-24T15:02:01.461Z&quot;, &quot;queryType&quot;: &quot;token&quot;, &quot;executionTime&quot;: 1362, &quot;cached&quot;: false, &quot;queryDetails&quot;: { &quot;params&quot;: { &quot;ticker&quot;: &quot;AAVE&quot;, &quot;platform&quot;: &quot;ethereum&quot; } } } }   Start leveraging the power of data analysis in your AI applications with @elizaos-plugins/plugin-d.a.t.a and unlock new possibilities for your Eliza agents. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-dcap","type":0,"sectionRef":"#","url":"/packages/plugins/dcap","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-dcap","url":"/packages/plugins/dcap#features","content":" This plugin provides the following features:  Generate DCAP attestation on TDX using the remoteAttestationProvider provided by the plugin-tee.Generate DCAP attestation on SGX using the sgxAttestationProvider provided by the plugin-sgx.Submit and verify DCAP attestation on-chain.  ","version":"1.0.17","tagName":"h2"},{"title":"Future Features (coming soon)‚Äã","type":1,"pageTitle":"@elizaos/plugin-dcap","url":"/packages/plugins/dcap#future-features-coming-soon","content":" Support to verify DCAP attestation on more EVM networks.Support to verify DCAP attestation on Solana.Support to verify DCAP attestation using ZKVM and verify the zk proof on-chain.Support to topup the wallet before submitting the DCAP attestation on testnets.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-dcap","url":"/packages/plugins/dcap#installation","content":" bun install @elizaos/plugin-dcap   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-dcap","url":"/packages/plugins/dcap#configuration","content":" Set up your environment variables:  EVM_PRIVATE_KEY=your-private-key-here DCAP_MODE=PLUGIN-SGX|PLUGIN-TEE|MOCK   The EVM_PRIVATE_KEY used to submit the DCAP attestation on evm networks, please make sure it has enough balance to pay for the transaction fee.  The DCAP_MODE is used to specify the mode of generating DCAP attestation, it can be:  PLUGIN-SGX: Use the sgxAttestationProvider in plugin-sgx to generate the DCAP attestation.PLUGIN-TEE: Use the remoteAttestationProvider in plugin-tee to generate the DCAP attestation.MOCK: Use a predefined attestation, this option is only for testing purposes.  Check the docs of plugin-sgx and plugin-tee for how to run your agent in TEE before using the SGX or TDX mode.  Register the plugin in your Eliza configuration:  import { dcapPlugin } from '@elizaos/plugin-dcap'; // In your Eliza configuration plugins: [ dcapPlugin, // ... other plugins ];   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-dcap","url":"/packages/plugins/dcap#usage","content":" The plugin provides an action dcapOnChainVerifyAction which will be triggered by natural languages like:  &quot;Verify the DCAP attestation on-chain&quot; &quot;Generate a DCAP attestation and verify it on-chain&quot; &quot;DCAP_ON_CHAIN&quot; # The keyword will also trigger the action   ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-dcap","url":"/packages/plugins/dcap#development","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run tests:  bun test   We are welcom to any feedback and contributions!  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-dcap","url":"/packages/plugins/dcap#credits","content":" Automata Network: Provided the on-chain DCAP verification, enabling the decentralized verification of TEE attestations.Phala Network: Provided support for running agents in TDX environment and contributed the plugin-tee for generating DCAP attestation on TDX.Gramine: Provided support for running agents in SGX environment.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-dcap","url":"/packages/plugins/dcap#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-depin","type":0,"sectionRef":"#","url":"/packages/plugins/depin","content":"","keywords":"","version":"1.0.17"},{"title":"Key Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#key-features","content":" Seamless IoTeX Integration: Leverages IoTeX Modular Infra to connect to a growing ecosystem of DePIN networks. Unified Data Access: Standardized interfaces allow access to diverse DePIN data sources, regardless of protocols or formats. Time-Series Data Handling: Equipped to analyze temporal patterns for predictive capabilities. Future-Proof Design: Designed to scale with the evolving DePIN and AI landscape.    ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#environment-variables","content":" Add the following to your .env file:  SENTAI_API_KEY=your-sentai-api-key   ","version":"1.0.17","tagName":"h3"},{"title":"Character Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#character-configuration","content":" Update character.json with the following configuration to enable the plugin:  &quot;plugins&quot;: [ &quot;@elizaos/plugin-depin&quot; ]   This ensures that the @elizaos/plugin-depin plugin is loaded and operational within your Eliza Agent Framework, enabling seamless integration with DePIN networks and their data.    ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#providers","content":" ","version":"1.0.17","tagName":"h2"},{"title":"DePINScan‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#depinscan","content":" The DePINScan provider bridges the gap between your Eliza agents and decentralized physical infrastructure. By fetching and caching data from the DePINScan API, it provides actionable insights such as:  Daily Metrics: Get the latest statistics on DePIN activity, including device operations and network performance.Project Data: Detailed information about individual DePIN projects: Project Identifiers: Names and slugs for easy referencing.Token Information: Market metrics such as token prices, market caps, and fully diluted valuations (FDV).Device Statistics: Total devices deployed, operational costs, and earnings.Blockchain Integration: Layer 1 chains associated with projects and their respective categories.Market Insights: Comprehensive data on market trends and project capitalization.    ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"DePIN Projects‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#depin-projects","content":" The DEPIN_PROJECTS action empowers Eliza agents to interact with and analyze DePIN project data, enabling:  Token Metrics Queries: Retrieve token prices, market capitalizations, and valuations for projects.Project Comparisons: Compare key metrics across multiple DePIN projects.Filtering Capabilities: Refine results by project categories or supported blockchain platforms.Device and Revenue Analysis: Explore statistics such as device deployment, operational costs, and revenue generation.In-depth Queries: Answer detailed questions about specific DePIN projects by leveraging the rich dataset provided by the DePINScan API.  ","version":"1.0.17","tagName":"h3"},{"title":"Sentient AI‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#sentient-ai","content":" The SENTIENT_AI action integrates Sentient AI APIs to provide Eliza agents with weather-related capabilities. Key functionalities include:  Real-Time Weather Updates: Deliver current temperature, humidity, and general conditions for specified locations. (supported by Nubila)Forecast Analysis: Generate short- and long-term forecasts to assist in planning and decision-making. (supported by Nubila)Other Actions Sentient AI will continue to improve and add more actions based on DePIN data.    ","version":"1.0.17","tagName":"h3"},{"title":"Sentient AI with DePIN Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#sentient-ai-with-depin-integration","content":" The @elizaos/plugin-depin plugin is a critical component in the evolution of Eliza agents into sentient systems that are aware of and responsive to their physical environments. By integrating with DePINs, this plugin enables AI agents to:  Perceive: Access sensory data streams from devices across decentralized networks, including environmental sensors, location trackers, and motion detectors.Act: Influence and control connected devices in real-time, unlocking a wide array of use cases from logistics to urban management.Learn: Build predictive models and goal-oriented behaviors using continuous feedback from real-world data sources.  ","version":"1.0.17","tagName":"h2"},{"title":"Transformative Applications‚Äã","type":1,"pageTitle":"@elizaos/plugin-depin","url":"/packages/plugins/depin#transformative-applications","content":" From smart city infrastructure and autonomous vehicle systems to precision agriculture and environmental monitoring, the @elizaos/plugin-depin unlocks new frontiers in AI development. By merging decentralized infrastructure with AI-driven perception and action, this plugin empowers agents to act not just in virtual spaces but in the physical world.  With its future-proof design and seamless integration capabilities, the @elizaos/plugin-depin is an essential tool for developers looking to push the boundaries of AI and decentralized systems.  Start building the next generation of AI-powered applications with @elizaos/plugin-depin and redefine what‚Äôs possible for intelligent agents in the real world. ","version":"1.0.17","tagName":"h3"},{"title":"DESK Exchange Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/desk-exchange","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"DESK Exchange Plugin for Eliza","url":"/packages/plugins/desk-exchange#features","content":" üí± Perpetual Trading Market orders (immediate execution)Limit orders (price-specific) üîÑ Order Management Cancel all open orders üè¶ Account summary View open ordersView active positionsView collateral balances  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"DESK Exchange Plugin for Eliza","url":"/packages/plugins/desk-exchange#installation","content":" Add the plugin to your Eliza configuration:  { &quot;plugins&quot;: [&quot;@elizaos/plugin-desk-exchange&quot;] }   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"DESK Exchange Plugin for Eliza","url":"/packages/plugins/desk-exchange#configuration","content":" Set the following environment variables:  DESK_EXCHANGE_PRIVATE_KEY=your_private_key # Required for trading and cancelling orders DESK_EXCHANGE_NETWORK= # &quot;mainnet&quot; or &quot;testnet   ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"DESK Exchange Plugin for Eliza","url":"/packages/plugins/desk-exchange#available-actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. PERP_TRADE‚Äã","type":1,"pageTitle":"DESK Exchange Plugin for Eliza","url":"/packages/plugins/desk-exchange#1-perp_trade","content":" Place perp market or limit orders.  Examples:  # Market Orders &quot;long 1 BTC&quot; -&gt; Place buy order of 1 BTC at market price &quot;sell 2 ETH&quot; -&gt; Sells 2 ETH at market price &quot;market buy 1 ETH&quot; -&gt; Buys 1 ETH at market price # Limit Orders &quot;buy 1 SOL at 20 USDC&quot; -&gt; Places buy order for 1 SOL at 20 USDC &quot;sell 0.5 BASE at 21 USDC&quot; -&gt; Places sell order for 0.5 BASE at 21 USDC   ","version":"1.0.17","tagName":"h3"},{"title":"2. CANCEL_ORDERS‚Äã","type":1,"pageTitle":"DESK Exchange Plugin for Eliza","url":"/packages/plugins/desk-exchange#2-cancel_orders","content":" Cancel all your open orders.  Examples:  &quot;Cancel all orders&quot; &quot;Cancel my orders&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"3. GET_PERP_ACCOUNT_SUMMARY‚Äã","type":1,"pageTitle":"DESK Exchange Plugin for Eliza","url":"/packages/plugins/desk-exchange#3-get_perp_account_summary","content":" Display the summary of your current account with details on open orders, active position and collateral tokens.  Examples:  &quot;Check my account please&quot; &quot;Here is the summary of your account 0xxxxxxxx Your positions: - Long 1.0039 BTCUSD - Short 10.01 ETHUSD - Long 135808.80 SOLUSD Your orders: - Sell 0/0.0001 BTCUSD @200000.00 Your collaterals: - 1382295.125325162 USDC - 2000000.00 CREDIT&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Security Notes‚Äã","type":1,"pageTitle":"DESK Exchange Plugin for Eliza","url":"/packages/plugins/desk-exchange#security-notes","content":" Store your private key securely using environment variablesTest with small amounts firstUse testnet for initial testingMonitor your orders regularlyDouble-check prices before confirming trades  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"DESK Exchange Plugin for Eliza","url":"/packages/plugins/desk-exchange#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-dexscreener","type":0,"sectionRef":"#","url":"/packages/plugins/dexscreener","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#installation","content":" bun add @elizaos/plugin-dexscreener   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#usage","content":" Add the plugin to your character configuration:  import { dexScreenerPlugin } from '@elizaos/plugin-dexscreener'; const character = { plugins: [dexScreenerPlugin], };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Price Checking‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#token-price-checking","content":" Query token prices using addresses or symbols:  &quot;What's the price of ETH?&quot; &quot;Check price of 0x1234...&quot; &quot;How much is $BTC worth?&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Token Trends‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#token-trends","content":" View latest and trending tokens:  &quot;Show me the latest tokens&quot; &quot;What are the new boosted tokens?&quot; &quot;Show me the top boosted tokens&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#available-actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"GET_TOKEN_PRICE‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#get_token_price","content":" Fetches current token price and market information.  Aliases: FETCH_TOKEN_PRICE, CHECK_TOKEN_PRICE, TOKEN_PRICESupports ETH addresses and token symbols (with or without $ prefix)Returns price, liquidity, and 24h volume information  ","version":"1.0.17","tagName":"h3"},{"title":"GET_LATEST_TOKENS‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#get_latest_tokens","content":" Retrieves the most recently listed tokens.  Aliases: FETCH_NEW_TOKENS, CHECK_RECENT_TOKENS, LIST_NEW_TOKENS  ","version":"1.0.17","tagName":"h3"},{"title":"GET_LATEST_BOOSTED_TOKENS‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#get_latest_boosted_tokens","content":" Fetches the most recently boosted tokens.  Aliases: FETCH_NEW_BOOSTED_TOKENS, CHECK_RECENT_BOOSTED_TOKENS  ","version":"1.0.17","tagName":"h3"},{"title":"GET_TOP_BOOSTED_TOKENS‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#get_top_boosted_tokens","content":" Shows tokens with the most active boosts.  Aliases: FETCH_MOST_BOOSTED_TOKENS, CHECK_HIGHEST_BOOSTED_TOKENS  ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#providers","content":" ","version":"1.0.17","tagName":"h2"},{"title":"TokenPriceProvider‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#tokenpriceprovider","content":" Provides token price data from DexScreener API:  Current price in USDLiquidity information24h volume dataAutomatic best pair selection by liquidity  ","version":"1.0.17","tagName":"h3"},{"title":"Evaluators‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#evaluators","content":" ","version":"1.0.17","tagName":"h2"},{"title":"TokenPriceEvaluator‚Äã","type":1,"pageTitle":"@elizaos/plugin-dexscreener","url":"/packages/plugins/dexscreener#tokenpriceevaluator","content":" Evaluates messages for token price requests:  Detects price-related keywordsIdentifies token addresses and symbolsSupports multiple token identifier formats: Ethereum addressesSymbols with $ or # prefixNatural language patterns (&quot;price of TOKEN&quot;) ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-devin","type":0,"sectionRef":"#","url":"/packages/plugins/devin","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-devin","url":"/packages/plugins/devin#installation","content":" bun add @elizaos/plugin-devin   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-devin","url":"/packages/plugins/devin#configuration","content":" The plugin requires a Devin API token for authentication. Set the following environment variable:  DEVIN_API_TOKEN=your_api_token_here   Or configure it in your Eliza runtime settings:  runtime.setSetting('DEVIN_API_TOKEN', 'your_api_token_here');   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-devin","url":"/packages/plugins/devin#features","content":" Session Management: Create and manage Devin engineering sessionsState Tracking: Monitor session status and progressClient Agnostic: Works with any Eliza client implementationRate Limiting: Built-in API request rate limitingError Handling: Comprehensive error handling with retries  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-devin","url":"/packages/plugins/devin#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-devin","url":"/packages/plugins/devin#actions","content":" START_DEVIN_SESSION‚Äã  Creates a new Devin session with the specified prompt.  const result = await runtime.runAction('START_DEVIN_SESSION', { content: { text: 'Help me refactor this code' }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-devin","url":"/packages/plugins/devin#providers","content":" devinProvider‚Äã  Manages Devin session state and provides session information.  const state = await runtime.getState(); const devinState = state.devin; // Access session details console.log(devinState.sessionId); console.log(devinState.status); console.log(devinState.url);   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-devin","url":"/packages/plugins/devin#testing","content":" Run the test suite:  bun test   ","version":"1.0.17","tagName":"h2"},{"title":"API Documentation‚Äã","type":1,"pageTitle":"@elizaos/plugin-devin","url":"/packages/plugins/devin#api-documentation","content":" For detailed API documentation, visit:  Devin API Integration GuideExternal API Reference  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-devin","url":"/packages/plugins/devin#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-dkg","type":0,"sectionRef":"#","url":"/packages/plugins/dkg","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#description","content":" The DKG plugin extends ElizaOS functionality by allowing agents to interact with the OriginTrail Decentralized Knowledge Graph. This plugin enables SPARQL-based searches on the DKG and combines these results with Eliza's regular search results. Additionally, it creates a memory as a Knowledge Asset on the DKG after a response, making it available for future SPARQL queries.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#installation","content":" bun install @elizaos/plugin-dkg   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. DKG Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#1-dkg-integration","content":" Perform SPARQL queries on the DKG for knowledge extraction.Combine DKG query results with Eliza's internal search capabilities.Enhance responses with decentralized and trusted knowledge.  ","version":"1.0.17","tagName":"h3"},{"title":"2. Knowledge Asset Creation‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#2-knowledge-asset-creation","content":" Automatically generate Knowledge Assets based on interactions.Publish memory Knowledge Assets to the DKG for future retrieval.  ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#providers","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. DKG Search Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#1-dkg-search-provider","content":" Executes SPARQL queries on the OriginTrail DKG.Retrieves and formats relevant results.Integrates DKG data with Eliza‚Äôs response system.  ","version":"1.0.17","tagName":"h3"},{"title":"Plugins‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#plugins","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Memory Creation Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#1-memory-creation-plugin","content":" Creates Knowledge Assets from agent interactions.Publishes assets to the DKG with contextual metadata.  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#development","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run linting:  bun run lint   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Set Up Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#1-set-up-environment-variables","content":" Copy the .env.example file and rename it to .env.Fill in the necessary details: Node information.LLM key.Twitter credentials.  ","version":"1.0.17","tagName":"h3"},{"title":"2. Customize DKG Knowledge Asset & Query Templates‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#2-customize-dkg-knowledge-asset--query-templates","content":" Modify the templates in plugin-dkg/constants.ts if you need to change the ontology or data format used in the Knowledge Graph.Check if the graph search provider is passing context to the agent (packages/client-twitter/src/interactions.ts, twitterMessageHandlerTemplate)  ","version":"1.0.17","tagName":"h3"},{"title":"3. Create a Character and Run the Agent‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#3-create-a-character-and-run-the-agent","content":" Create a character file in the characters folder.Run the character using the following command: bun start --characters=&quot;characters/chatdkg.character.json&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Notes‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#notes","content":" Ensure you configure the Twitter client and select your LLM provider in the character settings, also include the plugin in your agent.  ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#dependencies","content":" @elizaos/core: workspace:*SPARQL query library: workspace:*DKG JavaScript SDK: dkg.js &gt; ^8.0.4  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-dkg","url":"/packages/plugins/dkg#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-edwin","type":0,"sectionRef":"#","url":"/packages/plugins/edwin","content":"","keywords":"","version":"1.0.17"},{"title":"About‚Äã","type":1,"pageTitle":"@elizaos/plugin-edwin","url":"/packages/plugins/edwin#about","content":" See full info and docs at Edwin docs.  ","version":"1.0.17","tagName":"h2"},{"title":"Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-edwin","url":"/packages/plugins/edwin#setup","content":" Install dependencies:  bun install   Configure environment variables for chains you want to support:  EVM_PRIVATE_KEY=&lt;YOUR_EVM_PRIVATE_KEY&gt; SOLANA_PRIVATE_KEY=&lt;YOUR_SOLANA_PRIVATE_KEY&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Available Tools‚Äã","type":1,"pageTitle":"@elizaos/plugin-edwin","url":"/packages/plugins/edwin#available-tools","content":" The plugin provides access to the following Edwin tools:  supplywithdrawstakeaddLiquidityremoveLiquidity  ","version":"1.0.17","tagName":"h2"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-edwin","url":"/packages/plugins/edwin#usage-examples","content":" Supply on AAVE:  Supply 100 USDC to AAVE   Add liquidity on Meteora:  Find a meteora pool with high liquidity and add to td 10 USDC and 0.01 SOL.   ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-edwin","url":"/packages/plugins/edwin#development","content":" Build the plugin:  bun build   Run in development mode:  bun dev   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-edwin","url":"/packages/plugins/edwin#dependencies","content":" edwin-sdk  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-edwin","url":"/packages/plugins/edwin#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"Unmaintained: this plugin needs a maintainer.","type":0,"sectionRef":"#","url":"/packages/plugins/di","content":"","keywords":"","version":"1.0.17"},{"title":"What is Dependency Injection?‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/di#what-is-dependency-injection","content":" Dependency Injection is a design pattern that allows you to inject dependencies into a class or function. This pattern is useful for decoupling components and making your code more modular and testable.  ","version":"1.0.17","tagName":"h2"},{"title":"Examples of How to build a Plugin using Dependency Injection‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/di#examples-of-how-to-build-a-plugin-using-dependency-injection","content":" Check the example folder for a simple example of how to create a plugin using Dependency Injection.  ","version":"1.0.17","tagName":"h2"},{"title":"Where can I use Dependency Injection?‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/di#where-can-i-use-dependency-injection","content":" You can use Dependency Injection in any part of your Eliza plugin, including actions, evaluators, providers, services, and clients.  Actions: Inject services or providers to interact with external APIs or services. ExampleEvaluators: Inject services or providers to evaluate conditions or perform calculations. ExampleProviders: Inject services or providers to provide data or resources. ExampleServices: Inject other services to perform business logic. ExampleClients: Inject services to interact with external APIs or services. Lack of examples, but you can refer to the services example.  ","version":"1.0.17","tagName":"h3"},{"title":"Decorators for Dependency Injection‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/di#decorators-for-dependency-injection","content":" This plugin provides a set of decorators that you can use to inject dependencies into your classes or functions.  ","version":"1.0.17","tagName":"h2"},{"title":"From inversify‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/di#from-inversify","content":" We use the inversify library to provide the dependency injection system. The following decorators are provided by the inversify library.  @injectable‚Äã  Category: Class Decorator  This decorator marks a class as injectable. This means that you can inject this class into other classes using the @inject decorator.  import { injectable } from 'inversify'; @injectable() class SampleClass {}   Remember to register the class with the container before injecting it into other classes.  import { globalContainer } from '@elizaos/plugin-di'; // Register the class with the container as a singleton, this means that the class will be instantiated only once. globalContainer.bind(SingletonClass).toSelf().inSingletonScope(); // Register the class with the container as a request context, this means that the class will be instantiated for each request(in this case means each Character). globalContainer.bind(CharactorContextClass).toSelf().inRequestScope();   @inject‚Äã  Category: Parameter Decorator  This decorator marks a parameter as an injection target. This means that the parameter will be injected with the appropriate dependency when the class is instantiated.  import { injectable, inject } from 'inversify'; @injectable() class SampleClass { constructor( // Inject the SampleDependency as a public property of the class. @inject('SampleDependency') public sampleDependency: SampleDependency ) {} }   ","version":"1.0.17","tagName":"h3"},{"title":"From di plugin (used for BaseInjectableAction)‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/di#from-di-plugin-used-for-baseinjectableaction","content":" DI plugin provides abstract classes that you can extend to create Injectable actions. And that provides the following decorators to improve the readability of the code.  @property‚Äã  Category: Property Decorator  This decorator is used to define a property in an action content class which will be used to generate the action content object Schema and content description template for LLM object generation.  import { z } from 'zod'; import { property } from '@elizaos/plugin-di'; class SampleActionContent { @property({ description: 'Sample property description', schema: z.string(), }) sampleProperty: string; }   ","version":"1.0.17","tagName":"h3"},{"title":"Abstract Classes provided by this plugin‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/di#abstract-classes-provided-by-this-plugin","content":" This plugin provides the following abstract classes that you can extend to create Injectable classes:  BaseInjectableActionBaseInjectableEvaluator  Note: This is optional, you can create your own classes to create injectable actions.  ","version":"1.0.17","tagName":"h2"},{"title":"BaseInjectableAction‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/di#baseinjectableaction","content":" This abstract class simplify the creation of injectable actions. You don't need to think about the template for content generation, it will be generated automatically based on the properties of the content Class. What you need to implement is the execute method.  import { injectable } from 'inversify'; import { BaseInjectableAction } from '@elizaos/plugin-di'; class SampleActionContent { @property({ description: 'Sample property description', schema: z.string(), }) property1: string; } @injectable() class SampleAction extends BaseInjectableAction&lt;SampleActionContent&gt; { constructor() { super({ /** general action constent options */ contentClass: SampleActionContent, }); } /** * It will be called by `handler` function when the action is triggered. */ async execute( content: SampleActionContent | null, runtime: IAgentRuntime, message: Memory, state: State, callback?: HandlerCallback ): Promise&lt;void&gt; { // Your action logic here } }  ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-echochambers","type":0,"sectionRef":"#","url":"/packages/plugins/echochambers","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#features","content":" Join and monitor chat roomsRespond to messages based on context and relevanceRetry operations with exponential backoffManage connection and reconnection logicReal-time chat room monitoring and interactionIntelligent message response generationContext-aware conversation handlingComprehensive message history trackingMulti-room support with configurable polling  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#installation","content":" Install the plugin package:  bun install @elizaos/plugin-echochambers   OR copy the plugin code into your eliza project node_modules directory. (node_modules@elizaos)  Import and register the plugin in your character.ts configuration:  import { Character, ModelProviderName, defaultCharacter } from &quot;@elizaos/core&quot;; import { echoChambersPlugin } from &quot;@elizaos/plugin-echochambers&quot;; export const character: Character = { ...defaultCharacter, name: &quot;Eliza&quot;, plugins: [echoChambersPlugin], clients: [], modelProvider: ModelProviderName.OPENAI, settings: { secrets: {}, voice: {}, model: &quot;gpt-4&quot;, }, system: &quot;Roleplay and generate interesting responses on behalf of Eliza.&quot;, bio: [...], lore: [...], messageExamples: [...], postExamples: [...], adjectives: [&quot;funny&quot;, &quot;intelligent&quot;, &quot;academic&quot;, &quot;insightful&quot;], people: [], topics: [...], style: {...}, };   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#configuration","content":" The plugin requires the following environment variables:  # Required Settings ECHOCHAMBERS_API_URL=&quot;http://127.0.0.1:3333&quot; # Base URL for the EchoChambers API ECHOCHAMBERS_API_KEY=&quot;your-api-key&quot; # API key for authentication # Optional Settings ECHOCHAMBERS_USERNAME=&quot;eliza&quot; # Custom username for the agent ECHOCHAMBERS_DEFAULT_ROOM=&quot;general&quot; # Default room to join ECHOCHAMBERS_POLL_INTERVAL=&quot;60&quot; # Polling interval in seconds ECHOCHAMBERS_MAX_MESSAGES=&quot;10&quot; # Maximum messages in conversation thread   ","version":"1.0.17","tagName":"h2"},{"title":"Usage Instructions‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#usage-instructions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Starting the Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#starting-the-plugin","content":" The plugin will automatically initialize when your character configuration includes it. It handles:  Room Connection Management Automatic joining of default roomReconnection handling with backoffMulti-room monitoring Message Processing Context-aware response generationThread managementHistory tracking Response Behavior The plugin intelligently decides when to respond based on: Direct mentions or questionsTopic relevance to agent's expertiseConversation context and timingMessage substance and engagement level  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#common-issues--troubleshooting","content":" Connection Issues Verify API URL is correct and accessibleEnsure API key is validCheck network connectivity Message Processing Verify environment variables are properly setCheck log files for error messagesEnsure proper character configuration  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#security-best-practices","content":" API Key Management Store API keys securely using environment variablesNever expose keys in code or logsRotate keys periodically Connection Security Use HTTPS for production environmentsImplement proper error handlingMonitor for unusual activity  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run in development mode:  bun run dev   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Components‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#core-components","content":" EchoChamberClient Handles room connectionsManages message sending/receivingImplements retry logic InteractionClient Processes messagesGenerates responsesMaintains conversation context  ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#future-enhancements","content":" Enhanced message filteringCustom response templatesAdvanced room management featuresImproved context handlingExtended retry mechanisms  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#credits","content":" This plugin integrates with and builds upon several key technologies:  Socket.IO: Real-time bidirectional event-based communicationExpress: Web application frameworkRedis: In-memory data structure storejs-tiktoken: Token counting for message handlingnode-cache: In-memory caching  Special thanks to:  The Socket.IO team for real-time communication infrastructureThe Express.js maintainersThe Redis development teamThe chat room infrastructure maintainersThe Eliza community for their contributions and feedback  For more information about chat capabilities:  Socket.IO DocumentationExpress DocumentationRedis Pub/SubReal-time Chat Best Practices  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-echochambers","url":"/packages/plugins/echochambers#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"eliza-nkn","type":0,"sectionRef":"#","url":"/packages/plugins/eliza-nkn","content":"","keywords":"","version":"1.0.17"},{"title":"plugin-nkn‚Äã","type":1,"pageTitle":"eliza-nkn","url":"/packages/plugins/eliza-nkn#plugin-nkn","content":" This ElizaOS plugin integrates NKN (https://nkn.org/) to enable communication between multiple AI agents or users.  ","version":"1.0.17","tagName":"h2"},{"title":"Description‚Äã","type":1,"pageTitle":"eliza-nkn","url":"/packages/plugins/eliza-nkn#description","content":" The plugin-nkn leverages the NKN protocol to facilitate messaging and communication between various AI agents and users within the Eliza framework. It supports both sending and receiving messages via a decentralized network, ensuring low latency and secure transmission. ","version":"1.0.17","tagName":"h3"},{"title":"Description","type":0,"sectionRef":"#","url":"/packages/plugins/email","content":"","keywords":"","version":"1.0.17"},{"title":"SMTP Section‚Äã","type":1,"pageTitle":"Description","url":"/packages/plugins/email#smtp-section","content":" EMAIL_OUTGOING_SERVICE: &quot;smtp&quot; | &quot;gmail&quot;EMAIL_OUTGOING_HOST: SMTP Hostname or IP to connect to. Required only when &quot;smtp&quot; service is configured.EMAIL_OUTGOING_PORT: the port to connect to (defaults to 465 for secure connections, otherwise 587). Required only if &quot;smtp&quot; is configured.EMAIL_SECURE: if true the connection will use TLS, otherwise TLS will be used if server supports STARTTLS extension. Set to true if port 465 is selected.EMAIL_OUTGOING_USER: UsernameEMAIL_OUTGOING_PASS: Password. If &quot;gmail&quot; selected you will need to provision a dedicated password for the agent [1]  ","version":"1.0.17","tagName":"h2"},{"title":"IMAP Section‚Äã","type":1,"pageTitle":"Description","url":"/packages/plugins/email#imap-section","content":" EMAIL_INCOMING_SERVICE: &quot;imap&quot;EMAIL_INCOMING_HOST: IMAP Hostname or IP to connect toEMAIL_INCOMING_PORT: the port to connect to (defaults to 993)EMAIL_INCOMING_USER: UsernameEMAIL_INCOMING_PASS: Password  [1] https://support.google.com/mail/answer/185833?hl=en  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Description","url":"/packages/plugins/email#usage","content":" Install the Plugin: First, import the plugin into your agent by running the following command:  bun add @elizaos/plugin-email   Send Emails: You can send emails using the following method:  this.runtime.clients.email.send({ to: &quot;recipient@example.com&quot;, subject: &quot;Your Subject Here&quot;, text: &quot;Your email body here.&quot; });   Receive Emails: To receive emails, register a callback function that will be invoked when an email is received:  this.runtime.clients.email.receive((email) =&gt; { console.log(&quot;Email Received:&quot;, email); });  ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-email-automation","type":0,"sectionRef":"#","url":"/packages/plugins/email-automation","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Intelligent Detection‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#1-intelligent-detection","content":" Partnership opportunity detectionTechnical discussion recognitionBusiness proposal identificationFollow-up requirement analysis  ","version":"1.0.17","tagName":"h3"},{"title":"2. AI-Powered Generation‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#2-ai-powered-generation","content":" Structured email formattingContext-aware contentProfessional tone maintenanceTechnical detail inclusion  ","version":"1.0.17","tagName":"h3"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"AI Email Automation Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#ai-email-automation-setup","content":" # Required RESEND_API_KEY= # Your Resend API key DEFAULT_TO_EMAIL= # Default recipient DEFAULT_FROM_EMAIL= # Default sender # Optional Settings EMAIL_AUTOMATION_ENABLED=true # Enable AI detection. If this is enabled, the plugin will automatically detect email-worthy conversations and handle generation/delivery and only that. EMAIL_EVALUATION_PROMPT= # Custom detection criteria for shouldEmail   ","version":"1.0.17","tagName":"h3"},{"title":"Basic Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#basic-usage","content":" import { emailAutomationPlugin } from '@elizaos/plugin-email-automation'; // Add to your Eliza configuration { plugins: [emailAutomationPlugin], settings: { EMAIL_AUTOMATION_ENABLED: true, // ... other settings } }   ","version":"1.0.17","tagName":"h3"},{"title":"Email Template Example‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#email-template-example","content":" The plugin uses Handlebars for templating. Here's an example output:  {{! email-template.hbs }} &lt;div class='email-container'&gt; &lt;h1&gt;{{subject}}&lt;/h1&gt; &lt;div class='background-section'&gt; {{background}} &lt;/div&gt; &lt;div class='key-points-section'&gt; &lt;h2&gt;Key Points&lt;/h2&gt; &lt;ul&gt; {{#each keyPoints}} &lt;li&gt;{{this}}&lt;/li&gt; {{/each}} &lt;/ul&gt; &lt;/div&gt; {{#if technicalDetails}} &lt;div class='technical-section'&gt; &lt;h2&gt;Technical Details&lt;/h2&gt; &lt;ul&gt; {{#each technicalDetails}} &lt;li&gt;{{this}}&lt;/li&gt; {{/each}} &lt;/ul&gt; &lt;/div&gt; {{/if}} &lt;div class='next-steps-section'&gt; &lt;h2&gt;Next Steps&lt;/h2&gt; &lt;ul&gt; {{#each nextSteps}} &lt;li&gt;{{this}}&lt;/li&gt; {{/each}} &lt;/ul&gt; &lt;/div&gt; &lt;div class='footer'&gt; Powered by ElizaOS &lt;/div&gt; &lt;/div&gt; &lt;style&gt; .email-container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; line-height: 1.6; } h1, h2 { color: #333; } ul { padding-left: 20px; } .footer { margin-top: 30px; color: #666; font-size: 0.9em; } &lt;/style&gt;   This template produces professional emails like the example shown in the image above. You can customize the template by:  Creating your own .hbs fileRegistering it with the template managerSpecifying your template when sending emails  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#development","content":" # Installation bun install # Testing bun test bun test:watch bun test:coverage # Building bun build   ","version":"1.0.17","tagName":"h2"},{"title":"Testing Coverage‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#testing-coverage","content":" Unit tests for all servicesIntegration tests for end-to-end flowsThrottling and rate limiting testsError handling scenariosMock providers for testing  ","version":"1.0.17","tagName":"h2"},{"title":"Architecture‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#architecture","content":"   Architecture Overview:  Resend Provider support (more to come)AI-powered email detectionContext-aware content generationProfessional template rendering  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#credits","content":" This plugin integrates with and builds upon:  Resend: Modern email API for developersHandlebars: Templating engine for email formatting  For more information about Resend capabilities:  Resend DocumentationEmail API ReferenceDeveloper Portal  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-email-automation","url":"/packages/plugins/email-automation#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-ethstorage - Plugin for EthStorage","type":0,"sectionRef":"#","url":"/packages/plugins/ethstorage","content":"","keywords":"","version":"1.0.17"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-ethstorage - Plugin for EthStorage","url":"/packages/plugins/ethstorage#actions","content":" transfer: This action enables the transfer of QKC tokens from the agent's wallet (specified via ETHSTORAGE_PRIVATE_KEY) to another wallet. To use, just mention the transfer of tokens to an EthStorage account. Name: SEND_TOKEN Message sample: Send 100 QKC to 0x341Cb1a94ef69499F97E93c41707B21326C0Cc87 submitData: This action enables the submission of any arbitrary data to the EthStorage decentralized storage network. To use, just mention that you need to send &quot;any data&quot; to EthStorage using the key you specified. Name: SUBMIT_DATA Message sample: Submit the following data using key 'my_key' to EthStorage &quot;Hello World!&quot;  ","version":"1.0.17","tagName":"h2"},{"title":"Usage & Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-ethstorage - Plugin for EthStorage","url":"/packages/plugins/ethstorage#usage--testing","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Detailed testing steps‚Äã","type":1,"pageTitle":"@elizaos/plugin-ethstorage - Plugin for EthStorage","url":"/packages/plugins/ethstorage#detailed-testing-steps","content":" In the .env file, set the following values: ETHSTORAGE_ADDRESS: The entry contract address for storing data on the EthStorage network (default is set to the beta testnet but can be updated if needed).ETHSTORAGE_RPC_URL: The RPC endpoint for connecting to the desired EthStorage network (default is set to the beta testnet).ETHSTORAGE_PRIVATE_KEY: The private key for the agent‚Äôs wallet. Transfer Tokens To test the transfer function, you need tokens in your EthStorage account. On the testnet, you can use the EthStorage Faucet. If you need more tokens, please ping us on Discord, and we can send them over.Run the agent and prompt it with: &quot;send AMOUNT QKC to any other EthStorage account&quot; - e.g. send 1 QKC to 0x341Cb1a94ef69499F97E93c41707B21326C0Cc87If the transaction is successful, the agent will return the Tx Hash. The tx hash can be checked on the EthStorage block explorer at https://explorer.beta.testnet.l2.quarkchain.io. Submit Data To test data submission, you need tokens in your EthStorage account to pay fees. On the testnet, you can use the EthStorage Faucet. If you need more tokens, please ping us on Discord, and we can send them over.Run the agent and prompt it with: &quot;Submit the following data using the key KEY to EthStorage DATA&quot; - e.g. Submit the following data using the key 'my_key' to EthStorage &quot;Hello World!&quot;If the transaction is successful, the agent will return the Tx Hash. The tx hash can be checked on the EthStorage block explorer at https://explorer.beta.testnet.l2.quarkchain.io.  ","version":"1.0.17","tagName":"h3"},{"title":"Resources‚Äã","type":1,"pageTitle":"@elizaos/plugin-ethstorage - Plugin for EthStorage","url":"/packages/plugins/ethstorage#resources","content":" EthStorage DocumentationLearn more about EthStorageAwesome EthStorage Repo ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-evm","type":0,"sectionRef":"#","url":"/packages/plugins/evm","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#description","content":" The EVM plugin provides comprehensive functionality for interacting with EVM-compatible chains, including token transfers, cross-chain bridging, and token swaps using LiFi integration.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#features","content":" Multi-chain support with dynamic chain configurationNative token transfersCross-chain token bridging via LiFiToken swapping on supported DEXsWallet balance trackingCustom RPC endpoint configurationAutomatic retry mechanismsComprehensive transaction management  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#installation","content":" bun install @elizaos/plugin-evm   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#required-environment-variables","content":" # Required EVM_PRIVATE_KEY=your-private-key-here # Optional - Custom RPC URLs EVM_PROVIDER_URL=https://your-custom-mainnet-rpc-url ETHEREUM_PROVIDER_&lt;CHAIN_NAME&gt;=https://your-custom-rpc-url   ","version":"1.0.17","tagName":"h3"},{"title":"Chain Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#chain-configuration","content":" By default, Ethereum mainnet is enabled. To enable additional chains, add them to your character config:  &quot;settings&quot;: { &quot;chains&quot;: { &quot;evm&quot;: [ &quot;base&quot;, &quot;arbitrum&quot;, &quot;iotex&quot; ] } }   Note: The chain names must match those in the viem/chains.  ","version":"1.0.17","tagName":"h3"},{"title":"Custom RPC URLs‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#custom-rpc-urls","content":" By default, the RPC URL is inferred from the viem/chains config. To use a custom RPC URL for a specific chain, add the following to your .env file:  ETHEREUM_PROVIDER_&lt;CHAIN_NAME&gt;=https://your-custom-rpc-url   Example usage:  ETHEREUM_PROVIDER_IOTEX=https://iotex-network.rpc.thirdweb.com   Custom RPC for Ethereum Mainnet‚Äã  To set a custom RPC URL for Ethereum mainnet, use:  EVM_PROVIDER_URL=https://your-custom-mainnet-rpc-url   ","version":"1.0.17","tagName":"h3"},{"title":"Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#provider","content":" The Wallet Provider initializes with the first chain in the list as the default (or Ethereum mainnet if none are added). It:  Provides the context of the currently connected address and its balance.Creates Public and Wallet clients to interact with the supported chains.Allows adding chains dynamically at runtime.  ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#1-transfer","content":" Transfer native tokens on the same chain:  // Example: Transfer 1 ETH Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e   ","version":"1.0.17","tagName":"h3"},{"title":"2. Bridge‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#2-bridge","content":" Bridge tokens between different chains using LiFi:  // Example: Bridge ETH from Ethereum to Base Bridge 1 ETH from Ethereum to Base   ","version":"1.0.17","tagName":"h3"},{"title":"3. Swap‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#3-swap","content":" Swap tokens on the same chain using LiFi:  // Example: Swap ETH for USDC Swap 1 ETH for USDC on Base   ","version":"1.0.17","tagName":"h3"},{"title":"4. Propose‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#4-propose","content":" Propose a proposal to a governor on a specific chain.  Proposal TargetsValuesCalldatasDescription ChainGovernor  Example usage:  Propose a proposal to the 0xdeadbeef00000000000000000000000000000000 governor on Ethereum to transfer 1 ETH to 0xRecipient.   ","version":"1.0.17","tagName":"h3"},{"title":"5. Vote‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#5-vote","content":" Vote on a proposal to a governor on a specific chain.  Proposal IDSupportChainGovernor  Example usage:  Vote on the proposal with ID 1 to support the proposal on the 0xdeadbeef00000000000000000000000000000000 governor on Ethereum.   ","version":"1.0.17","tagName":"h3"},{"title":"6. Queue‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#6-queue","content":" Queue a proposal to a governor on a specific chain.  Proposal TargetsValuesCalldatasDescription ChainGovernor  Example usage:  Queue the proposal to the 0xdeadbeef00000000000000000000000000000000 governor on Ethereum.   ","version":"1.0.17","tagName":"h3"},{"title":"7. Execute‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#7-execute","content":" Execute a proposal to a governor on a specific chain.  Proposal IDChainGovernor  Example usage:  Execute the proposal with ID 1 on the 0xdeadbeef00000000000000000000000000000000 governor on Ethereum.   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#development","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run tests:  bun test   ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Components‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#core-components","content":" WalletProvider Manages wallet connectionsHandles chain switchingManages RPC endpointsTracks balances Actions TransferAction: Native token transfersBridgeAction: Cross-chain transfersSwapAction: Same-chain token swaps  ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#future-enhancements","content":" Cross-Chain Operations Enhanced bridge aggregationMulti-chain transaction batchingCross-chain liquidity managementBridge fee optimizationChain-specific gas strategiesCross-chain messaging DeFi Integration Advanced swap routingYield farming automationLiquidity pool managementPosition management toolsMEV protection featuresFlash loan integration Smart Contract Management Contract deployment templatesVerification automationUpgrade managementSecurity analysis toolsGas optimizationABI management system Token Operations Batch transfer toolsToken approval managementToken metadata handlingCustom token standardsToken bridging optimizationNFT support enhancement Wallet Features Multi-signature supportAccount abstractionHardware wallet integrationSocial recovery optionsTransaction simulationBatch transaction processing Network Management Dynamic RPC managementNetwork health monitoringFallback provider systemCustom network additionGas price optimizationNetwork analytics Security Enhancements Transaction validationRisk assessment toolsFraud detectionRate limitingEmergency shutdownAudit integration Developer Tools Enhanced debuggingTesting frameworkDocumentation generatorCLI improvementsPerformance profilingIntegration templates  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#contributing","content":" The plugin contains tests. Whether you're using TDD or not, please make sure to run the tests before submitting a PR:  bun test   Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#credits","content":" This plugin integrates with and builds upon several key technologies:  Ethereum: Decentralized blockchainLiFi: Cross-chain bridge and swap serviceviem: Ethereum client librarywagmi: Ethereum client library  Special thanks to:  Ethereum Developer communityThe Eliza community for their contributions and feedback  For more information about EVM capabilities:  Ethereum DocumentationLiFi Documentationviem Documentationwagmi Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-evm","url":"/packages/plugins/evm#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-ferepro","type":0,"sectionRef":"#","url":"/packages/plugins/ferePro","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#description","content":" The FerePro plugin enables real-time communication with the FerePro API through WebSocket connections, providing market analysis, cryptocurrency comparisons, and financial insights.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#features","content":" Real-time WebSocket communicationStreaming and non-streaming response supportMarket data analysis and comparisonsCryptocurrency insightsDebug mode for detailed responsesAutomatic connection managementComprehensive error handlingCredit tracking and management  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#installation","content":" bun install @elizaos/plugin-ferepro   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#required-environment-variables","content":" # Required Ensure that FEREAI_USER_ID and FEREAI_API_KEY are correctly set in the character secrets sections or as environment variables. FEREAI_USER_ID: FereAI User ID FEREAI_API_KEY: FereAI API key # Optional FereAI pro take some time to respond. Set REQUEST_TIMEOUT to avoid response timeouts in the character settings section or as environment variable. REQUEST_TIMEOUT: Number of milliseconds before a request times out   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Example Queries‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#example-queries","content":" Basic Market Query:  // Get top cryptocurrencies 'What are the top 5 cryptocurrencies?';   Comparison Analysis:  // Compare specific cryptocurrencies 'Compare Ethereum and Bitcoin for the past 6 months';   Historical Data:  // Get historical performance 'Compare top 3 coins against Bitcoin in the last 3 months';   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#development","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run in development mode:  bun run dev   ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Components‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#core-components","content":" FereProService Manages WebSocket connectionsHandles message sending/receivingProcesses streaming responsesTracks credits and usage Actions EXECUTE_FEREPRO: Primary action for API communicationSupports market queries and analysis requestsHandles both streaming and non-streaming responses  ","version":"1.0.17","tagName":"h3"},{"title":"Response Structure‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#response-structure","content":" export interface FereAIChatResponse { answer: string; chat_id: string; representation: any[]; agent_api_name: string; query_summary: string; agent_credits: number; credits_available: number; }   ","version":"1.0.17","tagName":"h3"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#error-handling","content":" The plugin includes comprehensive error handling for:  WebSocket connection issuesInvalid message formatsAPI response errorsCredit limitation issues  ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#common-issues--troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Connection Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#connection-issues","content":" WebSocket Connection Failures Verify your internet connectionCheck if the FerePro API service is availableEnsure your FERE_USER_ID and FERE_API_KEY is valid and active Message Timeout The connection might time out for long-running queriesConsider setting REQUEST_TIMEOUT to avoid response timeouts in the character settings section or as environment variable. Credit Depletion Monitor credits_available in responsesSet up alerts for low credit situationsContact FerePro support for credit top-up  ","version":"1.0.17","tagName":"h3"},{"title":"Response Parsing‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#response-parsing","content":" Invalid Response Format Check if the query is properly formattedVerify the message structure matches the API requirementsEnable debug mode for detailed error information Missing Data Ensure the requested timeframe is validVerify the cryptocurrencies exist in the databaseCheck if you have access to the requested data tier  ","version":"1.0.17","tagName":"h3"},{"title":"Safety & Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#safety--best-practices","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#security","content":" API Credentials Never expose your FEREAI_USER_ID and FEREAI_API_KEY in public repositoriesUse environment variables or secrets sections in the character settings section for sensitive dataRotate credentials periodically if possible Rate Limiting Implement appropriate delays between requestsMonitor credit usage to prevent unexpected depletionCache responses when appropriate  ","version":"1.0.17","tagName":"h3"},{"title":"Data Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#data-handling","content":" Response Validation Always validate response data before processingImplement proper error handling for malformed dataLog unexpected response formats for debugging Stream Management Close WebSocket connections properly after useImplement reconnection logic for dropped connectionsHandle partial responses in streaming mode  ","version":"1.0.17","tagName":"h3"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#best-practices","content":" Query Optimization Keep queries focused and specificUse streaming for large data requestsImplement caching for frequently requested data Error Handling Implement comprehensive error catchingLog errors with appropriate contextProvide meaningful error messages to users Resource Management Monitor WebSocket connection statusImplement connection pooling for high-volume usageClean up resources properly on service shutdown  ","version":"1.0.17","tagName":"h3"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#credits","content":" Special thanks to:  The Eliza community for their contributions and feedback  For more information about FerePro capabilities:  FereAI WebsiteFereAI Agents Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-ferepro","url":"/packages/plugins/ferePro#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Firecrawl Plugin","type":0,"sectionRef":"#","url":"/packages/plugins/firecrawl","content":"","keywords":"","version":"1.0.17"},{"title":"Core Features‚Äã","type":1,"pageTitle":"Firecrawl Plugin","url":"/packages/plugins/firecrawl#core-features","content":" Service Factory Creates a service instance using an API keyReturns an object with two methods: getScrapeData and getCrawlData Web Scraping (getScrapeData) Fetches and extracts content from a single webpageReturns structured data including page content and metadataEndpoint: https://api.firecrawl.dev/v1/scrape Web Searching (getSearchData) Searches for data based on conversationsEndpoint: https://api.firecrawl.dev/v1/search  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Firecrawl Plugin","url":"/packages/plugins/firecrawl#configuration","content":" The plugin requires minimal configuration. In your character file, simply add:  { &quot;FIRECRAWL_API_KEY&quot;: &quot;your-api-key-here&quot; }   ","version":"1.0.17","tagName":"h2"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"Firecrawl Plugin","url":"/packages/plugins/firecrawl#usage-examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Web Scraping‚Äã","type":1,"pageTitle":"Firecrawl Plugin","url":"/packages/plugins/firecrawl#web-scraping","content":" The plugin recognizes various ways users might request web scraping:  // Single URL request 'Can you scrape the content from https://example.com?'; 'Get the data from www.example.com/page'; // Two-step interaction User: 'I need to scrape some website data.'; Agent: &quot;I can help you scrape website data. Please share the URL you'd like me to process.&quot;; User: 'example.com/products';   ","version":"1.0.17","tagName":"h3"},{"title":"Web Search‚Äã","type":1,"pageTitle":"Firecrawl Plugin","url":"/packages/plugins/firecrawl#web-search","content":" The plugin handles different crawling request patterns:  // Direct search 'Find the latest news about SpaceX launches'; 'Can you find details about the iPhone 16 release?';   ","version":"1.0.17","tagName":"h3"},{"title":"Response Handling‚Äã","type":1,"pageTitle":"Firecrawl Plugin","url":"/packages/plugins/firecrawl#response-handling","content":" The plugin automatically:  Validates URLs before processingHandles both direct and conversational requestsProvides appropriate feedback during the scraping/crawling processReturns structured data from the target website  ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"Firecrawl Plugin","url":"/packages/plugins/firecrawl#error-handling","content":" The plugin includes built-in error handling for common scenarios:  Invalid or missing URLsAPI authentication issuesNetwork failuresMalformed responses  ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"Firecrawl Plugin","url":"/packages/plugins/firecrawl#actions","content":" The plugin provides two main actions:  FIRECRAWL_GET_SCRAPED_DATA: For single-page content extractionWEB_SEARCH: Web search for any data  ","version":"1.0.17","tagName":"h2"},{"title":"Security‚Äã","type":1,"pageTitle":"Firecrawl Plugin","url":"/packages/plugins/firecrawl#security","content":" API keys should be kept secure and never sharedAll requests are made over HTTPSInput validation is performed on all URLs before processing ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-flow","type":0,"sectionRef":"#","url":"/packages/plugins/flow","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#description","content":" This plugin provides essential functionality for interacting with the Flow blockchain, including native FLOW token transfers, fungible token transfers, and EVM token interactions. It offers a seamless way to manage Flow blockchain transactions through natural language commands.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#installation","content":" bun install @elizaos/plugin-flow   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#configuration","content":" The plugin requires the following environment variables to be set:  FLOW_ADDRESS=&lt;Flow wallet address starting with 0x&gt; FLOW_PRIVATE_KEY=&lt;Private key for the Flow wallet starting with 0x&gt; FLOW_NETWORK=&lt;Network to connect to: &quot;mainnet&quot;, &quot;testnet&quot;, or &quot;emulator&quot; (optional, defaults to &quot;mainnet&quot;)&gt; FLOW_ENDPOINT_URL=&lt;Custom RPC endpoint URL (optional)&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#basic-integration","content":" import { flowPlugin } from '@elizaos/plugin-flow';   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#example-usage","content":" The plugin supports natural language commands for token transfers:  'Send 5 FLOW to 0xa51d7fe9e0080662'; 'Send 1 FLOW - A.1654653399040a61.FlowToken to 0xa2de93114bae3e73'; 'Send 1000 FROTH - 0xb73bf8e6a4477a952e0338e6cc00cc0ce5ad04ba to 0x000000000000000000000002e44fbfbd00395de5';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#actions","content":" SEND_COIN‚Äã  Transfers native FLOW tokens, Cadence fungible tokens, or EVM tokens to specified addresses.  Aliases:  SEND_TOKENSEND_TOKEN_ON_FLOWTRANSFER_TOKEN_ON_FLOWTRANSFER_TOKENS_ON_FLOWTRANSFER_FLOWSEND_FLOWPAY_BY_FLOW  Input Content:  interface TransferContent { token: string | null; // null for native FLOW, Cadence identifier, or EVM address amount: string; // Amount to transfer to: string; // Recipient address (Flow or EVM) matched: boolean; // Indicates if token and address types match }   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#common-issues--troubleshooting","content":" Connection Issues Verify network configuration (mainnet/testnet/emulator)Check RPC endpoint availabilityEnsure proper wallet configuration Transaction Failures Verify sufficient balance for transfersCheck correct address format (Flow vs EVM)Confirm token contract compatibility Authentication Issues Validate private key formatVerify wallet address matches private keyCheck network permissions  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#security-best-practices","content":" Key Management Store private keys securelyUse environment variables for sensitive dataNever expose private keys in code or logs Transaction Safety Validate all addresses before transfersImplement proper error handlingCheck token compatibility before transfers  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run tests:  bun run test   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#future-enhancements","content":" Support for NFT transfersEnhanced error handling and recoveryAdditional Flow blockchain interactionsExpanded token support  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#credits","content":" This plugin integrates with and builds upon several key technologies:  Flow Blockchain: Decentralized layer 1 blockchain@onflow/fcl: Flow Client Library@onflow/types: Flow type systemCadence: Smart contract programming language  Special thanks to:  The Dapper Labs team for developing FlowThe Flow Developer communityThe FCL SDK maintainersThe Cadence language designersThe Eliza community for their contributions and feedback  For more information about Flow capabilities:  Flow DocumentationFlow Developer PortalFlow Block ExplorerCadence Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-flow","url":"/packages/plugins/flow#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos-plugins/plugin-flow-advanced","type":0,"sectionRef":"#","url":"/packages/plugins/flow-advanced","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-flow-advanced","url":"/packages/plugins/flow-advanced#description","content":" This plugin provides advanced functionality for the Flow Blockchain. It includes the following features:  Accounts management based on Account Linking feature on Flow BlockchainToken Price Query for any token on Flow BlockchainToken Transfer from User's account to others' address(Cadence or EVM)Token Registration for any token on Flow Blockchain  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-flow-advanced","url":"/packages/plugins/flow-advanced#installation","content":" To install the plugin, use the following command in your Eliza project:  npx elizaos plugins add @elizaos-plugins/plugin-di npx elizaos plugins add @elizaos-plugins/plugin-flow npx elizaos plugins add @elizaos-plugins/plugin-flow-advanced   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-flow-advanced","url":"/packages/plugins/flow-advanced#configuration","content":" The plugin requires the following environment variables to be set:  FLOW_ADDRESS=&lt;Flow wallet address starting with 0x&gt; FLOW_PRIVATE_KEY=&lt;Private key for the Flow wallet starting with 0x&gt; FLOW_NETWORK=&lt;Network to connect to: &quot;mainnet&quot;, &quot;testnet&quot;, or &quot;emulator&quot; (optional, defaults to &quot;mainnet&quot;)&gt; FLOW_ENDPOINT_URL=&lt;Custom RPC endpoint URL (optional)&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-flow-advanced","url":"/packages/plugins/flow-advanced#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-flow-advanced","url":"/packages/plugins/flow-advanced#basic-integration","content":" import { advancedFlowPlugin } from '@elizaos-plugins/plugin-flow-advanced';   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos-plugins/plugin-flow-advanced","url":"/packages/plugins/flow-advanced#example-usage","content":" The plugin supports natural language commands for token transfers:  'Send 5 FLOW to 0xa51d7fe9e0080662'; 'Send 1 FLOW - A.1654653399040a61.FlowToken to 0xa2de93114bae3e73'; 'Send 1000 FROTH - 0xb73bf8e6a4477a952e0338e6cc00cc0ce5ad04ba to 0x000000000000000000000002e44fbfbd00395de5';  ","version":"1.0.17","tagName":"h3"},{"title":"plugin-gelato","type":0,"sectionRef":"#","url":"/packages/plugins/gelato","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#features","content":" Sponsored Calls: Interact with contracts without needing gas on the user's side.ERC2771 Support: Execute meta-transactions via Gelato's sponsoredCallERC2771.Customizable: Easily configure chains, contracts, and user-specific settings.    ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#prerequisites","content":" bunA Gelato Relay API key    ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#installation","content":" bun install elizaos/plugin-gelato     ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#configuration","content":" Fill out the .env file in the project root with the following variables:  GELATO_RELAY_API_KEY=&lt;Your Gelato Relay API Key&gt; EVM_PROVIDER_URL=&lt;Your EVM provider URL (e.g., Alchemy or Infura endpoint)&gt; EVM_PRIVATE_KEY=&lt;Your wallet's private key&gt;     ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"For Non-ERC2771 (Standard Sponsored Call)‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#for-non-erc2771-standard-sponsored-call","content":" Call increment() on 0x3890DB55ff538FBF281c9152820A4a748f5D6F21 contract: - Function Name: increment - Args: [] - Target: 0x3890DB55ff538FBF281c9152820A4a748f5D6F21 - Chain: arbitrumSepolia - ABI: [&quot;function increment()&quot;]   ","version":"1.0.17","tagName":"h3"},{"title":"For ERC2771 (Meta-Transactions)‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#for-erc2771-meta-transactions","content":" Call increment() on 0x00172f67db60E5fA346e599cdE675f0ca213b47b contract: - Function Name: increment - Args: [] - Target: 0x00172f67db60E5fA346e599cdE675f0ca213b47b - Chain: arbitrumSepolia - ABI: [&quot;function increment()&quot;] - User: 0xYourAddressHere   ","version":"1.0.17","tagName":"h3"},{"title":"Example Output‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#example-output","content":" For both scenarios, successful execution returns:  ‚úÖ Contract interaction successful! - Function: increment - Target: 0x&lt;contract_address&gt; - Chain: arbitrumSepolia - Task ID: &lt;task_id&gt; - Track Status: [View Task](https://relay.gelato.digital/tasks/status/&lt;task_id&gt;)     ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Code Structure‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#code-structure","content":" utils.ts: Contains functions for sponsoredCall and sponsoredCallERC2771. schemas.ts: Defines Zod schemas to validate user input. actions.ts: Contains the action logic, including parsing natural language input and invoking Gelato Relay.  ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#testing","content":" Update your .env file with valid keys.Test both ERC2771 and non-ERC2771 prompts using the examples above.    ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#troubleshooting","content":" Ensure your .env file is properly configured.Verify that your contract ABI, function name, and chain match the deployed contract details.For ERC2771 calls, confirm the User address is correct and matches the expected _msgSender logic in the contract.    ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"plugin-gelato","url":"/packages/plugins/gelato#license","content":" This plugin is licensed under the MIT License. See the LICENSE file for details.   ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-football","type":0,"sectionRef":"#","url":"/packages/plugins/football","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#description","content":" The Football plugin integrates with the Football-Data.org API to enable ElizaOS agents to fetch live football match information and league standings. It includes actions and utilities to provide real-time football data in conversations.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#installation","content":" To install the plugin, use the following command:  bun install @elizaos/plugin-football   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Live Match Data‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#1-live-match-data","content":" Action: fetchMatchAction Retrieves live football match data, including: TeamsScoresGame events Provides real-time updates for ongoing matches.  ","version":"1.0.17","tagName":"h3"},{"title":"2. League Standings‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#2-league-standings","content":" Action: fetchStandingsAction Fetches league standings for a specified competition, including: Team rankingsPointsGoals scoredOther league statistics.  ","version":"1.0.17","tagName":"h3"},{"title":"3. Flexible Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#3-flexible-integration","content":" Extendable for additional football data, such as: Player statisticsMatch schedulesHistorical match data.  ","version":"1.0.17","tagName":"h3"},{"title":"API Key Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#api-key-configuration","content":" To use this plugin, you need an API key from Football-Data.org.  Register and obtain your API key from Football-Data.org. Add the API key to your .env file: FOOTBALL_API_KEY=your_api_key_here   The plugin will use this key to authenticate requests.  ","version":"1.0.17","tagName":"h2"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#usage-examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"fetchMatchAction‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#fetchmatchaction","content":" Description: Retrieves live match data.  Code Example:  import { fetchMatchAction } from '@elizaos/plugin-football'; const result = await fetchMatchAction.handler(runtime, message, state); console.log(result);   Sample Output:  { &quot;matches&quot;: [ { &quot;homeTeam&quot;: { &quot;name&quot;: &quot;Chelsea&quot; }, &quot;awayTeam&quot;: { &quot;name&quot;: &quot;Arsenal&quot; }, &quot;score&quot;: { &quot;fullTime&quot;: { &quot;homeTeam&quot;: 1, &quot;awayTeam&quot;: 2 } } } ] }   ","version":"1.0.17","tagName":"h3"},{"title":"fetchStandingsAction‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#fetchstandingsaction","content":" Description: Fetches league standings for a specific competition.  Code Example:  import { fetchStandingsAction } from '@elizaos/plugin-football'; const result = await fetchStandingsAction.handler(runtime, message, state); console.log(result);   Sample Output:  { &quot;standings&quot;: [ { &quot;table&quot;: [ { &quot;position&quot;: 1, &quot;team&quot;: { &quot;name&quot;: &quot;Manchester City&quot; }, &quot;points&quot;: 45 }, { &quot;position&quot;: 2, &quot;team&quot;: { &quot;name&quot;: &quot;Arsenal&quot; }, &quot;points&quot;: 42 } ] } ] }   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Steps to Build and Test‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#steps-to-build-and-test","content":" Clone the repository: git clone https://github.com/elizaOS/eliza.git Navigate to the plugin-football directory and install dependencies: cd packages/plugin-football bun install Build the plugin: bun run build Run linting: bun run lint Test the plugin: bun vitest src/tests/match-action.test.ts bun vitest src/tests/fetch-standings-action.test.ts   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#dependencies","content":" This plugin relies on the following dependency:  @elizaos/core: workspace:*  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#future-enhancements","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Expanded Football Data Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#expanded-football-data-features","content":" Player statisticsMatch schedules and fixturesTeam information and historiesHistorical match data  ","version":"1.0.17","tagName":"h3"},{"title":"Advanced League Tracking‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#advanced-league-tracking","content":" Real-time updates for all supported leaguesIntegration with more competitions (e.g., Champions League, World Cup)  ","version":"1.0.17","tagName":"h3"},{"title":"Customizable Output‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#customizable-output","content":" Improved data formatting for conversational outputsSupport for additional localization options  ","version":"1.0.17","tagName":"h3"},{"title":"Integration Improvements‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#integration-improvements","content":" Enhanced API error handlingCaching for frequently accessed dataIncreased rate-limit compliance for the Football-Data.org API  ","version":"1.0.17","tagName":"h3"},{"title":"Developer Tools‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#developer-tools","content":" Sample applications for plugin usageTest suites for advanced football scenariosExamples for extending plugin functionality  ","version":"1.0.17","tagName":"h3"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#credits","content":" This plugin integrates with and builds upon several key technologies:  Football-Data.org Official Football-Data platform API  Special thanks to:  Special thanks to Football-Data.org for providing the API that powers this plugin.The Eliza Core development team.The Eliza community for their contributions and feedback  For more information about Football-Data integration capabilities:  Football-Data API DocumentationFootball-Data Developer Portal  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-football","url":"/packages/plugins/football#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-fuel","type":0,"sectionRef":"#","url":"/packages/plugins/fuel","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#description","content":" This plugin provides essential functionality for interacting with the Fuel blockchain, focusing on ETH transfers on the Fuel Ignition network. It offers a streamlined way to manage Fuel blockchain transactions through natural language commands.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#installation","content":" bun install @elizaos/plugin-fuel   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#configuration","content":" The plugin requires the following environment variables to be set:  FUEL_PRIVATE_KEY=&lt;Private key for the Fuel wallet starting with 0x&gt; FUEL_PROVIDER_URL=&lt;Custom RPC endpoint URL (optional, defaults to &quot;https://mainnet.fuel.network/v1/graphql&quot;)&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#basic-integration","content":" import { fuelPlugin } from '@elizaos/plugin-fuel';   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#example-usage","content":" The plugin supports natural language commands for ETH transfers:  'Transfer 1 ETH to 0x8F8afB12402C9a4bD9678Bec363E51360142f8443FB171655eEd55dB298828D1';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#actions","content":" TRANSFER‚Äã  Transfers ETH between addresses on the Fuel Ignition network.  Aliases:  TRANSFER_FUEL_ETHSEND_TOKENS  Input Content:  interface TransferParams { toAddress: string; // Recipient's Fuel address amount: string; // Amount of ETH to transfer }   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#common-issues--troubleshooting","content":" Connection Issues Verify provider URL is accessibleCheck network connectivityEnsure proper network configuration Transaction Failures Verify sufficient balance for transfersCheck correct address formatEnsure gas fees can be covered Authentication Issues Validate private key formatVerify wallet configurationCheck network permissions  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#security-best-practices","content":" Key Management Store private keys securelyUse environment variables for sensitive dataNever expose private keys in code or logs Transaction Safety Validate recipient addressesImplement proper error handlingDouble-check transaction amounts  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run tests:  bun test   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#future-enhancements","content":" Support for token transfersEnhanced error handling and recoveryAdditional Fuel blockchain interactionsTransaction status monitoringBalance tracking improvements  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#credits","content":" This plugin integrates with and builds upon several key technologies:  Fuel Network: High-performance modular execution layerfuels-ts: TypeScript SDK for FuelFuel Wallet: Official Fuel walletFuel GraphQL API: Network interaction  Special thanks to:  The Fuel Labs team for developing the Fuel NetworkThe Fuel Developer communityThe fuels-ts SDK maintainersThe Eliza community for their contributions and feedback  For more information about Fuel capabilities:  Fuel DocumentationFuel Developer PortalFuel Network DashboardFuel GitHub Repository  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-fuel","url":"/packages/plugins/fuel#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-form","type":0,"sectionRef":"#","url":"/packages/plugins/form","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#description","content":" Form Chain is a blockchain platform that implements curves-based token economics, allowing users to interact with bonding curves for token creation, trading, and management. This plugin integrates Form chain with Eliza, giving your agent the ability to:  Buy and sell curves tokensConvert between curves and ERC20 tokensManage token holdingsQuery prices and balancesCreate new ERC20 tokens for curves  The plugin supports both QUADRATIC and LOGRITHMIC formulas, optimizing for different use cases and trading volumes.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#installation","content":" bun install @elizaos/plugin-form   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#environment-variables","content":" FORM_PRIVATE_KEY=&lt;Your Form chain wallet private key&gt; FORM_TESTNET=true # Optional, defaults to false   ","version":"1.0.17","tagName":"h3"},{"title":"Plugin Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#plugin-setup","content":" // In your agent configuration import { formPlugin } from '@elizaos/plugin-form'; const character = { plugins: [formPlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"BUY_CURVES_TOKEN‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#buy_curves_token","content":" Buy curves tokens for a subject address.  await runtime.processAction('BUY_CURVES_TOKEN', { subject: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', amount: 1, formula: 'QUADRATIC', // or &quot;LOGRITHMIC&quot; for high volume });   ","version":"1.0.17","tagName":"h3"},{"title":"SELL_CURVES_TOKEN‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#sell_curves_token","content":" Sell curves tokens back to the protocol.  await runtime.processAction('SELL_CURVES_TOKEN', { subject: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', amount: 1, formula: 'QUADRATIC', });   ","version":"1.0.17","tagName":"h3"},{"title":"WITHDRAW_CURVES_TOKEN‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#withdraw_curves_token","content":" Convert curves tokens to their ERC20 equivalent.  await runtime.processAction('WITHDRAW_CURVES_TOKEN', { subject: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', amount: 1, formula: 'QUADRATIC', });   ","version":"1.0.17","tagName":"h3"},{"title":"DEPOSIT_CURVES_TOKEN‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#deposit_curves_token","content":" Convert ERC20 tokens back to curves.  await runtime.processAction('DEPOSIT_CURVES_TOKEN', { subject: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', amount: '1000000000000000000', // 1 token in 18 decimals formula: 'QUADRATIC', });   ","version":"1.0.17","tagName":"h3"},{"title":"MINT_CURVES_ERC20‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#mint_curves_erc20","content":" Mint new ERC20 token for curves holdings.  await runtime.processAction('MINT_CURVES_ERC20', { name: 'My Token', symbol: 'MTK', formula: 'QUADRATIC', });   ","version":"1.0.17","tagName":"h3"},{"title":"GET_CURVES_BALANCE‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#get_curves_balance","content":" Check curves token balance.  await runtime.processAction('GET_CURVES_BALANCE', { subject: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', formula: 'QUADRATIC', });   ","version":"1.0.17","tagName":"h3"},{"title":"GET_CURVES_BUY_PRICE‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#get_curves_buy_price","content":" Get price quote for buying curves.  await runtime.processAction('GET_CURVES_BUY_PRICE', { subject: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', amount: 1, formula: 'QUADRATIC', });   ","version":"1.0.17","tagName":"h3"},{"title":"GET_CURVES_SELL_PRICE‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#get_curves_sell_price","content":" Get price quote for selling curves.  await runtime.processAction('GET_CURVES_SELL_PRICE', { subject: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e', amount: 1, formula: 'QUADRATIC', });   ","version":"1.0.17","tagName":"h3"},{"title":"Formula Selection‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#formula-selection","content":" The plugin supports two bonding curve formulas:  ","version":"1.0.17","tagName":"h2"},{"title":"QUADRATIC‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#quadratic","content":" Default formula for standard operationsSuitable for personal and small group usageBalanced price impact  ","version":"1.0.17","tagName":"h3"},{"title":"LOGRITHMIC‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#logrithmic","content":" Optimized for high volume tradingBetter price stabilityRecommended for large-scale operations  ","version":"1.0.17","tagName":"h3"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#best-practices","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#security","content":" Store private keys securely using environment variablesNever expose keys in code or commitsValidate addresses before transactionsCheck balances before operations  ","version":"1.0.17","tagName":"h3"},{"title":"Performance‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#performance","content":" Use caching for repeated price checks  Trading  Always check price quotes before tradingUse appropriate formula for volumeMonitor price impact  ","version":"1.0.17","tagName":"h3"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#error-handling","content":" The plugin provides detailed error messages for common issues:  try { await runtime.processAction(&quot;BUY_CURVES_TOKEN&quot;, {...}); } catch (error) { if (error.message.includes(&quot;insufficient balance&quot;)) { // Handle insufficient funds } else if (error.message.includes(&quot;price impact too high&quot;)) { // Handle excessive price impact } }   ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#contributing","content":" This plugin is part of the ElizaOS project. See the main project repository Contributing Guide for details.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-form","url":"/packages/plugins/form#license","content":" This plugin is part of the ElizaOS project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-genlayer","type":0,"sectionRef":"#","url":"/packages/plugins/genlayer","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#installation","content":" bun add @elizaos/plugin-genlayer   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#required-environment-variables","content":" GENLAYER_PRIVATE_KEY=your_private_key # Required: Must start with 0x GENLAYER_RPC_URL=your_rpc_url # Optional: Defaults to https://studio.genlayer.com:8443/api   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#usage","content":" Add the plugin to your character configuration:  import { genLayerPlugin } from '@elizaos/plugin-genlayer'; const character = { plugins: [genLayerPlugin], };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Contract Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#contract-operations","content":" Read contract stateWrite to contractsDeploy new contractsGet contract schemas  ","version":"1.0.17","tagName":"h3"},{"title":"Transaction Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#transaction-management","content":" Get transaction detailsMonitor transaction statusTrack noncesWait for transaction receipts  ","version":"1.0.17","tagName":"h3"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#available-actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"READ_CONTRACT‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#read_contract","content":" Read state from a contract:  &quot;Read the GenLayer contract at 0xE2632... by calling get_have_coin&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"WRITE_CONTRACT‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#write_contract","content":" Write to a contract:  &quot;Write to the contract at 0xE2632... by calling set_value with argument 42&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"DEPLOY_CONTRACT‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#deploy_contract","content":" Deploy a new contract:  &quot;Deploy a new contract from /path/to/contract.py with argument 'true'&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"GET_TRANSACTION‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#get_transaction","content":" Get transaction details:  &quot;Get transaction details for hash 0x1234...&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"GET_CURRENT_NONCE‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#get_current_nonce","content":" Get current nonce for an address:  &quot;Get current nonce for address 0xE2632...&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"WAIT_FOR_TRANSACTION_RECEIPT‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#wait_for_transaction_receipt","content":" Wait for a transaction to be confirmed:  &quot;Wait for receipt of transaction 0x1234...&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"GET_CONTRACT_SCHEMA‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#get_contract_schema","content":" Get the schema for a deployed contract:  &quot;Get contract schema for address 0xE2632...&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#provider","content":" ","version":"1.0.17","tagName":"h2"},{"title":"ClientProvider‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#clientprovider","content":" Manages connection to GenLayer protocol:  Creates and manages client instanceHandles authentication with private keyProvides client interface for all actions  ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-genlayer","url":"/packages/plugins/genlayer#dependencies","content":" genlayer-js: 0.4.7@elizaos/core: workspace:* ","version":"1.0.17","tagName":"h2"},{"title":"Plugin Giphy","type":0,"sectionRef":"#","url":"/packages/plugins/giphy","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"Plugin Giphy","url":"/packages/plugins/giphy#overview","content":" The Plugin Giphy enhances your agent's interactions by enabling it to respond with relevant GIFs based on user inputs. Leveraging the Giphy API, this plugin detects specific triggers in user messages and responds with appropriate GIFs to make conversations more engaging and expressive.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Plugin Giphy","url":"/packages/plugins/giphy#installation","content":" bun add @elizaos/plugin-giphy   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Plugin Giphy","url":"/packages/plugins/giphy#configuration","content":" Set up your environment with the required Giphy API key:  Variable Name\tDescriptionGIPHY_API_KEY\tGiphy API key for authenticating requests  You need to obtain an API key by signing up at Giphy Developers.  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Plugin Giphy","url":"/packages/plugins/giphy#usage","content":" import { giphyPlugin } from '@elizaos/plugin-giphy'; // Initialize the plugin const plugin = giphyPlugin; // Add the plugin to your agent's plugin list const plugins = [ giphyPlugin, // ... other plugins ]; // Initialize your agent with the plugins // Example: // const agent = new Agent({ plugins, ...otherConfig });   The plugin provides the SEND_GIF action, which automatically responds with a GIF based on the context of user messages. No additional setup is required beyond installing and configuring the plugin.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Plugin Giphy","url":"/packages/plugins/giphy#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"Eliza GigBot Client","type":0,"sectionRef":"#","url":"/packages/plugins/gigbot","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#features","content":" Task automation and managementInteraction handling with GigBot APIToken earning through task completionsApproval workflow via Discord (optional)  ","version":"1.0.17","tagName":"h2"},{"title":"Setup Guide‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#setup-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#prerequisites","content":" Node.js and bun installedEliza runtime  ","version":"1.0.17","tagName":"h3"},{"title":"Step 1: Configure Environment Variables‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#step-1-configure-environment-variables","content":" Create or edit .env file in your project root:  # GigBot API Credentials GIGBOT_API_URL=https://www.gigbot.xyz/api # Default API URL for GigBot # Client Configuration GIG_SEARCH_INTERVAL=3 # Interval for searching tasks (hours) GIG_ACTION_INTERVAL=12 # Interval for performing actions (hours) GIG_CLAIM_INTERVAL=24 # Interval for claiming tasks (hours) GIG_CLAIM_PLATFORM=x # Platform for claiming tasks ('x' or 'farcaster') EVM_PRIVATE_KEY=0x... # Private key for claiming rewards (must start with 0x)   ","version":"1.0.17","tagName":"h3"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#environment-variables","content":" Variable\tDescription\tDefault\tRequiredGIGBOT_API_URL\tGigBot API endpoint\thttps://www.gigbot.xyz/api\tNo GIG_SEARCH_INTERVAL\tHow often to search for new tasks (hours)\t3\tNo GIG_ACTION_INTERVAL\tHow often to perform task actions (hours)\t12\tNo GIG_CLAIM_INTERVAL\tHow often to claim completed tasks (hours)\t24\tNo GIG_CLAIM_PLATFORM\tPlatform to claim tasks from ('x' or 'farcaster')\tx\tNo EVM_PRIVATE_KEY\tEthereum private key for claiming rewards\t-\tYes  Important Security Note:  Keep your EVM_PRIVATE_KEY secure and never commit it to version controlUse a dedicated wallet for the agent with limited fundsConsider using environment variables or a secure secret management system  ","version":"1.0.17","tagName":"h3"},{"title":"Step 2: Initialize the Client‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#step-2-initialize-the-client","content":" import { GigBotClientInterface } from '@elizaos/gigbot'; const gigbotPlugin = { name: 'gigbot', description: 'GigBot client', clients: [GigBotClientInterface], }; // Register with your Eliza runtime runtime.registerPlugin(gigbotPlugin);   Important: The GigBot plugin requires the Twitter client to be initialized first. You must:  Include the Twitter plugin before GigBot in your plugins arrayModify the client initialization to pass existing clients to GigBot  Example of required client initialization:  export async function initializeClients(character: Character, runtime: IAgentRuntime) { const clients: ClientInstance[] = []; if (character.plugins?.length &gt; 0) { for (const plugin of character.plugins) { // Check if current plugin is GigBot let isGigbot = plugin.name === '@elizaos-plugins/plugin-gigbot'; if (plugin.clients) { for (const client of plugin.clients) { // Pass existing clients to GigBot runtime const startedClient = await client.start(isGigbot ? { ...runtime, clients } : runtime); clients.push(startedClient); } } } } return clients; }   ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#features-1","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Task Automation‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#task-automation","content":" The client can automatically complete tasks based on your agent's capabilities and GigBot's available tasks. Tasks can be:  Simple tasksComplex workflowsToken-earning opportunities  ","version":"1.0.17","tagName":"h3"},{"title":"Interactions‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#interactions","content":" Handles:  Task collectionTask completionReward claiming  ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#testing","content":" # Run tests bun test # Run with debug logging DEBUG=eliza:* bun start   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#common-issues","content":" API Failures‚Äã  Verify credentials in .envCheck API configuration  ","version":"1.0.17","tagName":"h3"},{"title":"Security Notes‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#security-notes","content":" Never commit .env or credential filesUse environment variables for sensitive dataImplement proper rate limitingMonitor API usage and costs  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"Eliza GigBot Client","url":"/packages/plugins/gigbot#support","content":" For issues or questions:  Check the Common Issues sectionReview debug logs (enable with DEBUG=eliza:*)Open an issue with: Error messagesConfiguration detailsSteps to reproduce ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-passport","type":0,"sectionRef":"#","url":"/packages/plugins/gitcoin-passport","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-passport","url":"/packages/plugins/gitcoin-passport#installation","content":" Just add it under your character profile in plugins as   &quot;plugins&quot;: [ &quot;@elizaos/plugin-gitcoin-passport&quot; ],   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-passport","url":"/packages/plugins/gitcoin-passport#configuration","content":" Getting Your API Key  Log in to the developer portal: Go to developer.passport.xyz and log in to your account by connecting your wallet.Navigate to the API Keys section: After logging in, go to the &quot;API Keys&quot; section.Generate an API key: Click on the &quot;+ Create a Key&quot; button to generate a unique API key for your account.Store your API key securely: Store your API key in a secure place, as it will be used to access the Passport API.  Getting your Scorer ID  Log in to the Developer Portal: Go to developer.passport.xyz and log in to your account by connecting your wallet.Navigate to the Scorer section: After logging in, go to the &quot;Scorer&quot; sectionCreate a Scorer: Click on the &quot;+ Create a Scorer&quot; button and input a Scorer name and description. Make sure you use the Unique Humanity scorer, and not the Binary scorer.Find your Scorer ID: Click on the newly created Scorer and you will see the Scorer ID in the page URL. Example: https://developer.passport.xyz/dashboard/scorer/{scorer_id}  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-passport","url":"/packages/plugins/gitcoin-passport#usage","content":" Results are saved as message and agents can retrieve it from there for different use cases. Default passport threshold of 20 is used, but you can pick your own value and match it against that ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-gitbook","type":0,"sectionRef":"#","url":"/packages/plugins/gitbook","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#description","content":" This plugin enables seamless integration with GitBook documentation, allowing natural language queries to retrieve relevant documentation content. It features intelligent query validation, keyword-based filtering, and clean response formatting to provide accurate documentation answers.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#installation","content":" bun install @elizaos/plugin-gitbook   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#environment-variables","content":" GITBOOK_SPACE_ID=&lt;Your GitBook Space ID&gt;   ","version":"1.0.17","tagName":"h3"},{"title":"Client Configuration (Optional)‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#client-configuration-optional","content":" You can customize the plugin's behavior by adding the following configuration to your character.json file:  { &quot;name&quot;: &quot;YourCharacter&quot;, &quot;plugins&quot;: [&quot;gitbook&quot;], &quot;settings&quot;: { &quot;gitbook&quot;: { &quot;keywords&quot;: { &quot;projectTerms&quot;: [&quot;term1&quot;, &quot;term2&quot;], // Optional: Project-specific terms to match &quot;generalQueries&quot;: [&quot;custom1&quot;, &quot;custom2&quot;] // Optional: Additional query keywords }, &quot;documentTriggers&quot;: [&quot;docs&quot;, &quot;documentation&quot;] // Optional: Trigger words for documentation } } }   The plugin will work with default settings if no configuration is provided, but adding custom configuration can help tailor the responses to your specific documentation needs.  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#basic-integration","content":" import { gitbookPlugin } from '@elizaos/plugin-gitbook';   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#example-usage","content":" The plugin automatically processes natural language queries:  'How do I get started with the project?'; 'What are the main features?'; 'Explain how to configure the system';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#providers","content":" GitBook Provider‚Äã  Handles documentation queries and returns relevant information.  Response Type:  interface GitBookResponse { answer?: { text: string; }; error?: string; }   Configuration Types:  interface GitBookKeywords { projectTerms?: string[]; // Project-specific terms generalQueries?: string[]; // Additional query keywords } interface GitBookClientConfig { keywords?: GitBookKeywords; documentTriggers?: string[]; // Trigger words for documentation }   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#common-issues--troubleshooting","content":" Connection Issues Verify GitBook Space ID is correctCheck API endpoint accessibilityEnsure proper network connectivity Query Issues Verify query contains valid keywordsCheck if query matches project termsEnsure proper query formatting Response Issues Validate GitBook API response formatCheck for rate limitingVerify content accessibility  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#security-best-practices","content":" API Configuration Store Space ID securelyUse environment variablesImplement proper error handling Query Validation Sanitize input queriesValidate keywords and triggersClean response content Response Handling Implement proper error handlingValidate response formatHandle sensitive information appropriately  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run tests:  bun test   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#future-enhancements","content":" Enhanced query validationSupport for multiple GitBook spacesAdvanced search capabilitiesCustom response formattingCaching mechanism for frequent queriesSupport for authenticated endpoints  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#credits","content":" This plugin integrates with and builds upon several key technologies:  GitBook: Documentation and knowledge base platformGitBook API: Official GitBook REST APIAxios: Promise-based HTTP clientjs-tiktoken: Token counting for API responses  Special thanks to:  The GitBook team for their documentation platformThe GitBook Developer Relations teamThe Axios maintainers for reliable HTTP requestsThe Eliza community for their contributions and feedback  For more information about GitBook capabilities:  GitBook DocumentationGitBook API ReferenceGitBook IntegrationsGitBook Space Management  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-gitbook","url":"/packages/plugins/gitbook#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-goat","type":0,"sectionRef":"#","url":"/packages/plugins/goat","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#description","content":" GOAT üêê (Great Onchain Agent Toolkit) is an open-source framework for adding blockchain tools such as wallets, being able to hold or trade tokens, or interacting with blockchain smart contracts, to your AI agent.  Chains supportedPlugins supported  This plugin integrates GOAT with Eliza, giving your agent the ability to interact with many different protocols. The current setup adds onchain capabilities to your agent to send and check balances of ETH and USDC, and to swap tokens using KIM protocol. Add all the capabilities you need by adding more plugins (read below for more information)!  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#installation","content":" bun install @elizaos/plugin-goat   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#environment-variables","content":" EVM_PRIVATE_KEY=&lt;Your EVM wallet private key&gt; EVM_PROVIDER_URL=&lt;Your RPC provider URL (e.g., Infura, Alchemy)&gt;   ","version":"1.0.17","tagName":"h3"},{"title":"Configure GOAT for your use case‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#configure-goat-for-your-use-case","content":" Configure the chain you want to use by updating the wallet.ts file (see all available chains at https://ohmygoat.dev/chains)Specify the actions you want to have by updating the actions.ts fileAdd the plugins you need to perform these actions to the getOnChainTools function (uniswap, polymarket, etc. see all available plugins at https://ohmygoat.dev/chains-wallets-plugins)Build the project running bun buildAdd the necessary environment variables to set up your wallet and pluginsRun your agent!  ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#common-issues","content":" Agent not executing an action: If you are also using the EVM Plugin, sometimes the agent might confuse the action name with an EVM Plugin action name instead of the GOAT Plugin action. Removing the EVM Plugin should fix this issue. There is no need for you to use both plugins at the same time.If you are using Trump as a character it might be tricky to get them to perform any action since the character is full of prompts that aim to change the topic of the conversation. To fix this try using a different character or create your own with prompts that are more suitable to what the agent is supposed to do.  ","version":"1.0.17","tagName":"h2"},{"title":"Plugins‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#plugins","content":" GOAT itself has several plugins for interacting with different protocols such as Polymarket, Uniswap, and many more. (see all available plugins at https://ohmygoat.dev/chains-wallets-plugins)  You can easily add them by installing them and adding them to the getOnChainActions function:  const tools = getOnChainActions({ wallet: walletClient, plugins: [ sendETH(), erc20({ tokens: [USDC, PEPE] }), polymarket(), uniswap(), // ... ], });   See all available plugins at https://ohmygoat.dev/chains-wallets-plugins  ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#common-issues--troubleshooting","content":" Agent not executing an action: If you are also using the EVM Plugin, sometimes the agent might confuse the action name with an EVM Plugin action name instead of the GOAT Plugin action. Removing the EVM Plugin should fix this issue. There is no need for you to use both plugins at the same time.If you are using Trump as a character it might be tricky to get them to perform any action since the character is full of prompts that aim to change the topic of the conversation. To fix this try using a different character or create your own with prompts that are more suitable to what the agent is supposed to do. Wallet Connection Issues Verify private key is correctly formattedCheck RPC endpoint availabilityEnsure sufficient network balance Transaction Issues Verify gas availabilityCheck network congestionConfirm transaction parameters  ","version":"1.0.17","tagName":"h2"},{"title":"Wallets‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#wallets","content":" GOAT supports many different wallets from key pairs to Crossmint Smart Wallets and Coinbase.  Read more about wallets at https://ohmygoat.dev/wallets.  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#security-best-practices","content":" Key Management Store private keys securelyUse environment variablesNever expose keys in code Transaction Safety Implement transaction limitsValidate recipient addressesDouble-check transaction amounts Network Security Use secure RPC endpointsImplement rate limitingMonitor for suspicious activity  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#future-enhancements","content":" Additional protocol integrationsMulti-chain supportAdvanced transaction managementEnhanced error handlingCustom protocol adaptersSmart contract interaction templates  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#credits","content":" This plugin integrates with and builds upon several key technologies:  GOAT: Great Onchain Agent ToolkitCrossmint: Smart wallet infrastructureUniswap: Decentralized exchange protocolPolymarket: Prediction market platformERC20: Token standard implementation  Special thanks to:  The GOAT development team for the onchain agent frameworkThe Crossmint team for smart wallet solutionsThe Uniswap and Polymarket teamsThe Ethereum community for ERC standardsThe Eliza community for their contributions and feedback  For more information about GOAT capabilities:  GOAT DocumentationAvailable ChainsChains, Wallets &amp; PluginsSmart Wallet Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-goat","url":"/packages/plugins/goat#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-goplus","type":0,"sectionRef":"#","url":"/packages/plugins/goplus","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#installation","content":" bun add @elizaos/plugin-goplus   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#required-environment-variables","content":" GOPLUS_API_KEY=your_api_key # Required: GoPlus API key for authentication   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#usage","content":" Add the plugin to your character configuration:  import { goplusPlugin } from '@elizaos/plugin-goplus'; const character = { plugins: [goplusPlugin], };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Security Checks‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#security-checks","content":" EVM Token SecuritySolana Token SecuritySui Token SecurityRugpull DetectionNFT Security AnalysisAddress Security VerificationContract Approval AnalysisAccount Token Analysis (ERC20/721/1155)Signature SecurityURL/DApp Security  ","version":"1.0.17","tagName":"h3"},{"title":"Supported Networks‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#supported-networks","content":" The plugin supports various networks including:  Ethereum (1)BSC (56)Polygon (137)Arbitrum (42161)Avalanche (43114)Optimism (10)Base (8453)And many more (see specific check types for supported networks)  ","version":"1.0.17","tagName":"h2"},{"title":"Security Check Types‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#security-check-types","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#token-security","content":" EVMTOKEN_SECURITY_CHECK: ERC20 token contract security analysisSOLTOKEN_SECURITY_CHECK: SPL token security verificationSUITOKEN_SECURITY_CHECK: Sui token contract analysis  ","version":"1.0.17","tagName":"h3"},{"title":"Contract & NFT Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#contract--nft-security","content":" RUGPULL_SECURITY_CHECK: Rugpull risk detectionNFT_SECURITY_CHECK: NFT contract security analysisAPPROVAL_SECURITY_CHECK: Smart contract approval analysis  ","version":"1.0.17","tagName":"h3"},{"title":"Account & Address Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#account--address-security","content":" ADDRESS_SECURITY_CHECK: Malicious address detectionACCOUNT_ERC20_SECURITY_CHECK: ERC20 token securityACCOUNT_ERC721_SECURITY_CHECK: NFT asset securityACCOUNT_ERC1155_SECURITY_CHECK: Multi-token asset security  ","version":"1.0.17","tagName":"h3"},{"title":"Additional Checks‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#additional-checks","content":" SIGNATURE_SECURITY_CHECK: Signature verificationURL_SECURITY_CHECK: Phishing and malicious URL detection  ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-goplus","url":"/packages/plugins/goplus#dependencies","content":" @elizaos/core: workspace:*ws: ^8.18.0 ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-grix","type":0,"sectionRef":"#","url":"/packages/plugins/grix","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Price Data‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#price-data","content":" Real-time BTC/ETH price feedsOptions pricing across multiple protocolsAvailable liquidity information  ","version":"1.0.17","tagName":"h3"},{"title":"Options Data‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#options-data","content":" Call and Put options dataStrike prices and expiry datesProtocol-specific pricingPosition types (long/short)  ","version":"1.0.17","tagName":"h3"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#available-actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"getOptionPrice‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#getoptionprice","content":" Fetches options data across multiple protocols:  Real-time options pricingAvailable strike pricesCurrent expiry datesProtocol comparisonsLiquidity informationPosition types (long/short)  ","version":"1.0.17","tagName":"h3"},{"title":"getAssetPrice‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#getassetprice","content":" Retrieves real-time price data:  Current BTC priceCurrent ETH pricePrice updates in real-time  ","version":"1.0.17","tagName":"h3"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#installation","content":" bun add @elizaos/plugin-grix   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#configuration","content":" To use the plugin, you'll need a Grix API key. You can request one by messaging us on Discord or Telegram.  There are two ways to configure your API key:  ","version":"1.0.17","tagName":"h2"},{"title":"1. Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#1-environment-variables","content":" GRIX_API_KEY=your_api_key   ","version":"1.0.17","tagName":"h3"},{"title":"2. Character Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#2-character-configuration","content":" { &quot;name&quot;: &quot;Your Character&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-grix&quot;], &quot;settings&quot;: { &quot;secrets&quot;: { &quot;GRIX_API_KEY&quot;: &quot;your_api_key_here&quot; } } }   ","version":"1.0.17","tagName":"h3"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#quick-start","content":" Visit Grix FinanceRequest your API key through our Discord or TelegramAdd configuration using either method aboveStart fetching options data!  ","version":"1.0.17","tagName":"h2"},{"title":"Community & Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#community--support","content":" Discord CommunityTelegram GroupDocumentation  ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#building","content":" bun build   ","version":"1.0.17","tagName":"h3"},{"title":"Running with Eliza‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#running-with-eliza","content":" Install dependencies:  bun install   Configure your API key using one of the methods described in the Configuration section Start Eliza with your character:  bun start --character=&quot;characters/your_character.character.json&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#license","content":" MIT  ","version":"1.0.17","tagName":"h2"},{"title":"Disclaimer‚Äã","type":1,"pageTitle":"@elizaos/plugin-grix","url":"/packages/plugins/grix#disclaimer","content":" Please ensure compliance with your local regulations regarding options trading. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-holdstation","type":0,"sectionRef":"#","url":"/packages/plugins/holdstation","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-holdstation","url":"/packages/plugins/holdstation#features","content":" This plugin provides functionality (now on ZKsync Era, and Berachain coming soon) to:  Token swapping on hold.so (Holdstation swap)  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-holdstation","url":"/packages/plugins/holdstation#configuration","content":" The plugin requires the following environment variables:  HOLDSTATION_PRIVATE_KEY= # Required: Your wallet's private key   ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-holdstation","url":"/packages/plugins/holdstation#installation","content":" bun add @elizaos/plugin-holdstation   ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-holdstation","url":"/packages/plugins/holdstation#development","content":" bun install --no-frozen-lockfile   ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-holdstation","url":"/packages/plugins/holdstation#building","content":" bun build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-holdstation","url":"/packages/plugins/holdstation#testing","content":" bun test   ","version":"1.0.17","tagName":"h3"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-holdstation","url":"/packages/plugins/holdstation#credits","content":" Special thanks to:  The Eliza community for their contributions and feedback  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-holdstation","url":"/packages/plugins/holdstation#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Hyperbolic Plugin","type":0,"sectionRef":"#","url":"/packages/plugins/hyperbolic","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#features","content":" List available GPUs with specifications and pricingCheck account balanceMonitor GPU instance statusView spending historyRent GPU instancesTerminate GPU instances  ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. GET_HB_AVAILABLE_GPUS‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#1-get_hb_available_gpus","content":" Lists all available GPU machines on the Hyperbolic platform with their specifications and pricing.  Example prompt:  Show me available GPUs on Hyperbolic   ","version":"1.0.17","tagName":"h3"},{"title":"2. GET_CURRENT_BALANCE‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#2-get_current_balance","content":" Checks your current balance on the Hyperbolic platform.  Example prompt:  Show my current balance on Hyperbolic   ","version":"1.0.17","tagName":"h3"},{"title":"3. GET_GPU_STATUS‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#3-get_gpu_status","content":" Monitors the status of all your GPU instances.  Example prompt:  Check status of all my GPU instances on Hyperbolic   ","version":"1.0.17","tagName":"h3"},{"title":"4. GET_SPEND_HISTORY‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#4-get_spend_history","content":" Shows your spending history on the Hyperbolic platform.  Example prompt:  Show my spending history on Hyperbolic   ","version":"1.0.17","tagName":"h3"},{"title":"5. RENT_HB_COMPUTE‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#5-rent_hb_compute","content":" Rents a GPU instance using node ID and cluster name.  Example prompt:  Create a GPU instance on the Hyperbolic [nodeid]las1-prd-acl-msi-09.fen.intra[/nodeid] [cluster]circular-snapdragon-worm[/cluster]   Required format:  Node ID must be wrapped in [nodeid] tagsCluster name must be wrapped in [cluster] tags  ","version":"1.0.17","tagName":"h3"},{"title":"6. TERMINATE_COMPUTE‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#6-terminate_compute","content":" Terminates a running GPU instance.  Example prompts:  Terminate the Hyperbolic instance [gpu]worse-walnut-viper[/gpu]   Terminate the Hyperbolic instance [gpu]puny-clover-basilisk[/gpu]   Important Note: When terminating an instance, you must provide the instance ID wrapped in [gpu] tags. The examples above show two different instance IDs (worse-walnut-viper and puny-clover-basilisk) to demonstrate the format.  ","version":"1.0.17","tagName":"h3"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#configuration","content":" The plugin requires the following environment variables:  HYPERBOLIC_API_KEY=your_api_key_here HYPERBOLIC_ENV=production # or development HYPERBOLIC_GRANULAR_LOG=true # optional, for detailed logging HYPERBOLIC_LOG_LEVEL=debug # optional, to control the level HYPERBOLIC_SPASH=true # to show the splash   ","version":"1.0.17","tagName":"h2"},{"title":"Response Format‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#response-format","content":" All actions return structured responses with:  Success/failure statusDetailed error messages when applicableFormatted text outputAdditional data specific to each action  ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#error-handling","content":" The plugin includes comprehensive error handling for:  Invalid API keysNetwork issuesInvalid input formatsAPI rate limitsServer errors  ","version":"1.0.17","tagName":"h2"},{"title":"Logging‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#logging","content":" Granular logging is available by setting HYPERBOLIC_GRANULAR_LOG=true. This provides detailed information about:  API requests and responsesValidation stepsError detailsAction execution flow  ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#development","content":" To extend or modify this plugin:  All actions are in the src/actions directoryUtility functions are in src/utilsEnvironment configuration is in src/environment.tsError types are in src/error/base.ts  ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#dependencies","content":" @elizaos/coreaxioschalk (for console output)cli-table3 (for formatted tables)ora (for loading spinners)  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Hyperbolic Plugin","url":"/packages/plugins/hyperbolic#license","content":" MIT License ","version":"1.0.17","tagName":"h2"},{"title":"Hyperliquid Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/hyperliquid","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#features","content":" üí± Spot Trading Market orders (immediate execution)Limit orders (price-specific)Smart price validation to prevent mistakes üìä Price Checking Real-time price information24h price changeVolume statistics üîÑ Order Management Cancel all open ordersClear feedback on execution  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#installation","content":" Add the plugin to your Eliza configuration:  { &quot;plugins&quot;: [&quot;@elizaos/plugin-hyperliquid&quot;] }   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#configuration","content":" Set the following environment variables:  HYPERLIQUID_PRIVATE_KEY=your_private_key # Required for trading and cancelling orders HYPERLIQUID_TESTNET=true_or_false # Optional, defaults to false   ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#available-actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. SPOT_TRADE‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#1-spot_trade","content":" Place spot market or limit orders.  Examples:  # Market Orders &quot;buy 1 PIP&quot; -&gt; Buys 1 PIP at market price &quot;sell 2 HYPE&quot; -&gt; Sells 2 HYPE at market price &quot;market buy 1 ETH&quot; -&gt; Buys 1 ETH at market price # Limit Orders &quot;buy 1 PIP at 20 USDC&quot; -&gt; Places buy order for 1 PIP at 20 USDC &quot;sell 0.5 HYPE at 21 USDC&quot; -&gt; Places sell order for 0.5 HYPE at 21 USDC   ","version":"1.0.17","tagName":"h3"},{"title":"2. PRICE_CHECK‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#2-price_check","content":" Get current price information for any token.  Examples:  &quot;What's the price of PIP?&quot; &quot;Check HYPE price&quot; &quot;Get ETH price&quot;   Returns: Current price, 24h change, and volume.  ","version":"1.0.17","tagName":"h3"},{"title":"3. CANCEL_ORDERS‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#3-cancel_orders","content":" Cancel all your open orders.  Examples:  &quot;Cancel all orders&quot; &quot;Cancel my orders&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Price Validation‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#price-validation","content":" The plugin includes smart price validation to prevent mistakes:  Market Orders: Validates price is within ¬±50% of market priceLimit Orders: Buy orders must be below market priceSell orders must be above market priceWarns if price is very different from market (¬±80%)  ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#error-handling","content":" The plugin provides clear error messages for common issues:  Invalid token symbolsPrice validation failuresNetwork connection issuesOrder execution failures  ","version":"1.0.17","tagName":"h2"},{"title":"Security Notes‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#security-notes","content":" Store your private key securely using environment variablesTest with small amounts firstUse testnet for initial testingMonitor your orders regularlyDouble-check prices before confirming trades  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Hyperliquid Plugin for Eliza","url":"/packages/plugins/hyperliquid#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"image","type":0,"sectionRef":"#","url":"/packages/plugins/image","content":"","keywords":"","version":"1.0.17"},{"title":"ImageDescriptionService‚Äã","type":1,"pageTitle":"image","url":"/packages/plugins/image#imagedescriptionservice","content":" Processes and analyzes images to generate descriptions. Supports multiple providers:  Local processing using Florence modelOpenAI Vision APIGoogle Gemini  Configuration:  # For OpenAI Vision OPENAI_API_KEY=your_openai_api_key # For Google Gemini GOOGLE_GENERATIVE_AI_API_KEY=your_google_api_key   Provider selection:  If imageVisionModelProvider is set to google/openai, it will use this one.Else if model is set to google/openai, it will use this one.Default if nothing is set is OpenAI.  The service automatically handles different image formats, including GIFs (first frame extraction).  Features by provider:  Local (Florence):  Basic image captioningLocal processing without API calls  OpenAI Vision:  Detailed image descriptionsText detectionObject recognition  Google Gemini 1.5:  High-quality image understandingDetailed descriptions with natural languageMulti-modal context understandingSupport for complex scenes and content  The provider can be configured through the runtime settings, allowing easy switching between providers based on your needs.  // ... existing code ...  ","version":"1.0.17","tagName":"h2"},{"title":"describeImage‚Äã","type":1,"pageTitle":"image","url":"/packages/plugins/image#describeimage","content":" Analyzes and generates descriptions for images.  // Example usage const result = await runtime.executeAction('DESCRIBE_IMAGE', { imageUrl: 'path/to/image.jpg', });  ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-icp","type":0,"sectionRef":"#","url":"/packages/plugins/icp","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#features","content":" Create meme tokens on PickPumpInteract with ICP canistersHandle ICRC-1 token standardManage ICP wallets and identitiesSupport for anonymous and authenticated calls  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#installation","content":" bun install @elizaos/plugin-icp   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#configuration","content":" The plugin requires the following environment variables:  INTERNET_COMPUTER_PRIVATE_KEY=&lt;your-ed25519-private-key&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Import and Register‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#import-and-register","content":" import { icpPlugin } from '@elizaos/plugin-icp'; // Register the plugin with Eliza eliza.registerPlugin(icpPlugin);   ","version":"1.0.17","tagName":"h3"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#available-actions","content":" Create Token‚Äã  Creates a new meme token on PickPump with AI-generated logo and description.  // Example usage in chat 'Create a space cat token on PickPump'; 'Help me create a pizza-themed funny token on PP';   ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#providers","content":" ICP Wallet Provider‚Äã  Manages ICP wallet operations and canister interactions.  const { wallet } = await icpWalletProvider.get(runtime, message, state);   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#common-issues--troubleshooting","content":" Identity Creation Failures Ensure private key is exactly 32 bytesVerify private key is properly hex-encodedCheck if private key has correct permissions Canister Interaction Issues Verify canister ID is validEnsure proper network configuration (mainnet/testnet)Check if canister is available and running Transaction Failures Verify sufficient balance for operationCheck cycle balance for canister callsEnsure proper fee calculation Authentication Problems Verify identity is properly initializedCheck if agent is configured correctlyEnsure proper network connectivity  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#security-best-practices","content":" Key Management Never expose private keys in code or logsUse environment variables for sensitive dataRotate keys periodicallyUse separate keys for development and production Identity Security Create separate identities for different purposesLimit identity permissions appropriatelyMonitor identity usage and access patterns Canister Interaction Safety Validate all input parametersImplement proper error handlingUse query calls when possible to save cyclesImplement rate limiting for calls Network Security Use secure endpointsImplement proper timeout handlingValidate responses from canistersHandle network errors gracefully  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Types‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#types","content":" // Token Creation Arguments export type CreateMemeTokenArg = { name: string; symbol: string; description: string; logo: string; twitter?: string; website?: string; telegram?: string; }; // ICP Configuration export interface ICPConfig { privateKey: string; network?: 'mainnet' | 'testnet'; }   ","version":"1.0.17","tagName":"h3"},{"title":"Utilities‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#utilities","content":" The plugin provides various utility functions for:  Principal/Account conversionsCandid type handlingResult/Variant unwrappingArray/Hex conversions  ","version":"1.0.17","tagName":"h3"},{"title":"Helper Functions‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#helper-functions","content":" // Convert principal to account principal2account(principal: string, subaccount?: number[]): string // Check if text is valid principal isPrincipalText(text: string): boolean // Create anonymous actor for public queries createAnonymousActor&lt;T&gt;(idlFactory, canisterId, host?)   ","version":"1.0.17","tagName":"h3"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run tests:  bun test   ","version":"1.0.17","tagName":"h3"},{"title":"Testing with Local Replica‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#testing-with-local-replica","content":" Start a local Internet Computer replicaConfigure environment for local testingUse test identities for development  ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#dependencies","content":" @dfinity/agent: ^2.1.3@dfinity/candid: ^2.1.3@dfinity/identity: ^2.1.3@dfinity/principal: ^2.1.3@elizaos/core: workspace:*  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#future-enhancements","content":" Support for additional canister standardsEnhanced error handling and recoveryBatch transaction supportAdvanced identity managementImproved cycle managementExtended canister interaction capabilities  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#credits","content":" This plugin integrates with and builds upon several key technologies:  Internet Computer: Decentralized cloud computing platform@dfinity/agent: ICP HTTP client and agent@dfinity/candid: Candid interface description language@dfinity/principal: Principal identifier handling@dfinity/identity: Identity management  Special thanks to:  The DFINITY Foundation for developing the Internet ComputerThe ICP Developer communityThe DFINITY SDK maintainersThe PickPump team for meme token infrastructureThe Eliza community for their contributions and feedback  For more information about Internet Computer capabilities:  ICP DocumentationDFINITY Developer PortalICP DashboardCandid Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-icp","url":"/packages/plugins/icp#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Plugin Image Generation","type":0,"sectionRef":"#","url":"/packages/plugins/image-generation","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#overview","content":" The Plugin Image Generation offers developers tools to handle image-related operations seamlessly. It supports image creation, manipulation, and integration with storage solutions, making it ideal for applications requiring dynamic image generation.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#features","content":" Dynamic image generationIntegration with storage solutionsOptimized handling for high-resolution images  ","version":"1.0.17","tagName":"h3"},{"title":"Installation Instructions‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#installation-instructions","content":" To install the plugin, use the following command:  bun install plugin-image-generation   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration Requirements‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#configuration-requirements","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#environment-variables","content":" Ensure the following environment variables are set:  Variable Name\tDescriptionIMAGE_STORAGE_BUCKET\tName of the storage bucket. STORAGE_ACCESS_KEY\tAccess key for storage integration. STORAGE_SECRET_KEY\tSecret key for storage integration.  ","version":"1.0.17","tagName":"h3"},{"title":"TypeScript Configuration‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#typescript-configuration","content":" The plugin assumes a TypeScript environment. Ensure your tsconfig.json includes the necessary compiler options:  { &quot;compilerOptions&quot;: { &quot;module&quot;: &quot;ESNext&quot;, &quot;target&quot;: &quot;ES6&quot;, &quot;moduleResolution&quot;: &quot;node&quot;, &quot;strict&quot;: true } }   ","version":"1.0.17","tagName":"h3"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#usage-examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Generate an Image‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#generate-an-image","content":" The main functionality allows generating an image dynamically.  import { generateImage } from 'plugin-image-generation'; const image = await generateImage({ width: 800, height: 600, backgroundColor: '#ffffff', text: 'Hello World', font: 'Arial', }); console.log('Generated Image:', image);   ","version":"1.0.17","tagName":"h3"},{"title":"Upload to Storage‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#upload-to-storage","content":" The plugin supports direct integration with storage solutions for uploading images.  import { uploadImage } from 'plugin-image-generation'; const uploadResult = await uploadImage({ imagePath: 'path/to/image.png', bucketName: 'my-storage-bucket', }); console.log('Image uploaded successfully:', uploadResult);   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"generateImage‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#generateimage","content":" Parameters‚Äã  width: Width of the image.height: Height of the image.backgroundColor: Background color of the image.text: Text to be displayed on the image.font: Font style for the text.  Returns‚Äã  A promise that resolves with the generated image.  ","version":"1.0.17","tagName":"h3"},{"title":"uploadImage‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#uploadimage","content":" Parameters‚Äã  imagePath: Path to the image file.bucketName: Name of the storage bucket.  Returns‚Äã  A promise that resolves with the upload result.  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues/Troubleshooting‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#common-issuestroubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Issue: Image Not Generated‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#issue-image-not-generated","content":" Solution: Ensure the input parameters for generateImage are valid and properly formatted.  ","version":"1.0.17","tagName":"h3"},{"title":"Issue: Upload Fails‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#issue-upload-fails","content":" Solution: Verify that the storage credentials and bucket name are correctly configured.  ","version":"1.0.17","tagName":"h3"},{"title":"Issue: Poor Image Quality‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#issue-poor-image-quality","content":" Solution: Check the resolution and ensure that high-quality settings are applied during generation.  ","version":"1.0.17","tagName":"h3"},{"title":"Additional Documentation‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#additional-documentation","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Examples Folder‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#examples-folder","content":" Include sample projects in the examples/ directory for users to reference.  ","version":"1.0.17","tagName":"h3"},{"title":"Testing Guide‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#testing-guide","content":" Run tests using bun test.Ensure integration tests cover all major functionalities.  ","version":"1.0.17","tagName":"h3"},{"title":"Plugin Development Guide‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#plugin-development-guide","content":" To extend this plugin, add new image generation or manipulation features in the src/ directory.  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#security-best-practices","content":" Store access keys securely.Use environment variables for sensitive information.Regularly update dependencies.  ","version":"1.0.17","tagName":"h3"},{"title":"Performance Optimization Guide‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#performance-optimization-guide","content":" Optimize image generation by reducing redundant processing.Use efficient algorithms for image manipulation.Cache frequently used assets.  ","version":"1.0.17","tagName":"h3"},{"title":"License‚Äã","type":1,"pageTitle":"Plugin Image Generation","url":"/packages/plugins/image-generation#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-initia","type":0,"sectionRef":"#","url":"/packages/plugins/initia","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#overview","content":" This plugin provides functionality to:  Transfer INIT token  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#installation","content":" bun install @elizaos/plugin-initia   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#configuration","content":" INITIA_PRIVATE_KEY=0x1234...abcd INITIA_NODE_URL=https://... INITIA_CHAIN_ID=initiaion-2   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#token-transfer","content":" Send token to recipient:  User: 'Send 1 INIT to init14l3c2vxrdvu6y0sqykppey930s4kufsvt97aeu'; Assistant: 'Sure! I am going to send 1 INIT to init14l3c2vxrdvu6y0sqykppey930s4kufsvt97aeu';   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#building","content":" bun run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#testing","content":" bun run test   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#dependencies","content":" @initia/initia.js: Official initia js SDK  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#future-enhancements","content":" Execute other messages like delegate, undelegate.Interacting with minitia.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-initia","url":"/packages/plugins/initia#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-imgflip","type":0,"sectionRef":"#","url":"/packages/plugins/imgflip","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-imgflip","url":"/packages/plugins/imgflip#description","content":" The Imgflip plugin provides a GENERATE_MEME action that can be used to generate memes using the imgflip.com API based on the user's message.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-imgflip","url":"/packages/plugins/imgflip#installation","content":" bun install @elizaos/plugin-imgflip   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-imgflip","url":"/packages/plugins/imgflip#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Generate Meme‚Äã","type":1,"pageTitle":"@elizaos/plugin-imgflip","url":"/packages/plugins/imgflip#1-generate-meme","content":" GENERATE_MEME action used for generating memes using the imgflip.com API based on the user's message.  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-imgflip","url":"/packages/plugins/imgflip#development","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-imgflip","url":"/packages/plugins/imgflip#dependencies","content":" @elizaos/core: workspace:*  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-imgflip","url":"/packages/plugins/imgflip#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-imgflip","url":"/packages/plugins/imgflip#credits","content":" Special thanks to:  The Eliza Core development teamThe Eliza community for their contributions and feedback  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-imgflip","url":"/packages/plugins/imgflip#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Code In Plugin For Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/iq6900","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"Code In Plugin For Eliza","url":"/packages/plugins/iq6900#description","content":" Through IQ6900's new inscription standard &quot;Code-In&quot;, powerful inscription functionality is provided to Eliza. Engrave Eliza on the blockchain forever. All your Character JSON files are input onto the blockchain without compression. Everyone can read your agent from blocks forever.  ","version":"1.0.17","tagName":"h2"},{"title":"inscription‚Äã","type":1,"pageTitle":"Code In Plugin For Eliza","url":"/packages/plugins/iq6900#inscription","content":" Code-in your eliza: Go to the site and engrave your character file on-chain. https://elizacodein.com/  ","version":"1.0.17","tagName":"h2"},{"title":"Onchain git‚Äã","type":1,"pageTitle":"Code In Plugin For Eliza","url":"/packages/plugins/iq6900#onchain-git","content":" Commit your update: Update your files anytime. On our site, your files are managed in a format similar to GitHub, and our plugin automatically loads your latest agent file.  ","version":"1.0.17","tagName":"h2"},{"title":"Let's get started‚Äã","type":1,"pageTitle":"Code In Plugin For Eliza","url":"/packages/plugins/iq6900#lets-get-started","content":" Edit your .env: write down IQ_WALLET_ADDRESS to your wallet address that you used on website. To be sure, right after inscription, wait about 5 minutes and just type pmpn start. You are now all set.  You have engraved an eternal record. Imagine, someone could develop your agent 200 years from now.  Many things will be updated.  Learn more: https://iq6900.gitbook.io/iq6900/eliza-code-in ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-injective","type":0,"sectionRef":"#","url":"/packages/plugins/injective","content":"","keywords":"","version":"1.0.17"},{"title":"Project Structure‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#project-structure","content":" src/ ‚îú‚îÄ‚îÄ auction.ts # Auction module actions ‚îú‚îÄ‚îÄ auth.ts # Auth module actions ‚îú‚îÄ‚îÄ bank.ts # Bank module actions ‚îú‚îÄ‚îÄ distribution.ts # Distribution module actions ‚îú‚îÄ‚îÄ exchange.ts # Exchange module actions ‚îú‚îÄ‚îÄ explorer.ts # Explorer module actions ‚îú‚îÄ‚îÄ gov.ts # Governance module actions ‚îú‚îÄ‚îÄ ibc.ts # IBC module actions ‚îú‚îÄ‚îÄ insurance.ts # Insurance module actions ‚îú‚îÄ‚îÄ mint.ts # Mint module actions ‚îú‚îÄ‚îÄ mito.ts # Mito module actions ‚îú‚îÄ‚îÄ peggy.ts # Peggy module actions ‚îú‚îÄ‚îÄ permissions.ts # Permissions module actions ‚îú‚îÄ‚îÄ staking.ts # Staking module actions ‚îú‚îÄ‚îÄ token-factory.ts # Token Factory module actions ‚îú‚îÄ‚îÄ wasm.ts # WASM module actions ‚îú‚îÄ‚îÄ base.ts # Base action creation logic ‚îî‚îÄ‚îÄ index.ts # Main export file   ","version":"1.0.17","tagName":"h2"},{"title":"Module Organization‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#module-organization","content":" Each module file follows a consistent organization pattern:  ","version":"1.0.17","tagName":"h2"},{"title":"1. File Structure‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#1-file-structure","content":" // src/[module].ts import { createGenericAction } from './base'; import * as ModuleTemplates from '@injective/template/[module]'; import * as ModuleExamples from '@injective/examples/[module]'; // Export individual actions export const Action1 = createGenericAction({...}); export const Action2 = createGenericAction({...}); // Export all actions as a group export const ModuleActions = [ Action1, Action2, // ...other actions ];   ","version":"1.0.17","tagName":"h3"},{"title":"2. Main Export File‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#2-main-export-file","content":" // src/index.ts export * from './auction'; export * from './auth'; // ...other module exports export const InjectiveActions = [ ...ExchangeActions, ...AuctionActions, // ...other module actions ];   ","version":"1.0.17","tagName":"h3"},{"title":"Module Descriptions‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#module-descriptions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"auction.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#auctionts","content":" Handles auction-related functionality including module parameters, auction rounds, and bidding.  ","version":"1.0.17","tagName":"h3"},{"title":"auth.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#authts","content":" Manages authentication, account details, and authorization grants.  ","version":"1.0.17","tagName":"h3"},{"title":"bank.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#bankts","content":" Handles account balances, token transfers, and supply queries.  ","version":"1.0.17","tagName":"h3"},{"title":"distribution.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#distributionts","content":" Manages reward distribution and withdrawals.  ","version":"1.0.17","tagName":"h3"},{"title":"exchange.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#exchangets","content":" Core exchange functionality including spot/derivative markets, orders, and positions.  ","version":"1.0.17","tagName":"h3"},{"title":"explorer.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#explorerts","content":" Blockchain explorer functionality including transaction and block queries.  ","version":"1.0.17","tagName":"h3"},{"title":"gov.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#govts","content":" Handles protocol governance including proposals and voting.  ","version":"1.0.17","tagName":"h3"},{"title":"ibc.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#ibcts","content":" Inter-Blockchain Communication functionality.  ","version":"1.0.17","tagName":"h3"},{"title":"insurance.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#insurancets","content":" Manages insurance funds and redemptions.  ","version":"1.0.17","tagName":"h3"},{"title":"mint.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#mintts","content":" Controls token minting and inflation parameters.  ","version":"1.0.17","tagName":"h3"},{"title":"mito.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#mitots","content":" Handles Mito-specific functionality.  ","version":"1.0.17","tagName":"h3"},{"title":"peggy.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#peggyts","content":" Manages Ethereum bridge operations.  ","version":"1.0.17","tagName":"h3"},{"title":"permissions.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#permissionsts","content":" Controls role-based access and permissions.  ","version":"1.0.17","tagName":"h3"},{"title":"staking.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#stakingts","content":" Manages validator operations and delegations.  ","version":"1.0.17","tagName":"h3"},{"title":"token-factory.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#token-factoryts","content":" Handles token creation and management.  ","version":"1.0.17","tagName":"h3"},{"title":"wasm.ts‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#wasmts","content":" Smart contract functionality including deployment and execution.  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Adding New Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#adding-new-actions","content":" Add action to appropriate module file:  export const NewAction = createGenericAction({ name: 'ACTION_NAME', description: 'Action description', template: Templates.template, examples: Examples.example, functionName: 'functionName', validateContent: () =&gt; true, }); export const ModuleActions = [...existingActions, NewAction];   ","version":"1.0.17","tagName":"h3"},{"title":"Adding New Modules‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#adding-new-modules","content":" Create new module file:  // src/new-module.ts export const NewModuleActions = [...];   Add to main exports:  // src/index.ts export * from './new-module';   ","version":"1.0.17","tagName":"h3"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#installation","content":" npm install @elizaos/plugin-injective   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#usage","content":" import { InjectiveActions } from '@elizaos/plugin-injective';   ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#contributing","content":" Feel free to contribute to more similes, examples and refined templates - for a more robust action contorl.  Fork the repositoryCreate your feature branchCommit your changesPush to the branchCreate a Pull Request  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-injective","url":"/packages/plugins/injective#license","content":" ISC ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-intiface","type":0,"sectionRef":"#","url":"/packages/plugins/intiface","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#features","content":" Support for multiple intimate hardware devices through Buttplug.io protocolAutomatic device discovery and connection managementBattery level monitoring for supported devicesVibration and rotation control (device-dependent)Graceful connection handling and cleanupBuilt-in device simulation for testingSupport for customizable vibration patternsAutomatic Intiface Engine management  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#installation","content":" bun install @elizaos/plugin-intiface   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#configuration","content":" The plugin can be configured through environment variables or runtime settings:  INTIFACE_URL=ws://localhost:12345 INTIFACE_NAME=Eliza Intiface Client DEVICE_NAME=Lovense Nora   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Device Control‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#basic-device-control","content":" import { intifacePlugin } from '@elizaos/plugin-intiface'; // Vibrate device const result = await eliza.execute({ action: 'VIBRATE', content: { strength: 0.5, // 0.0 to 1.0 duration: 1000, // milliseconds }, }); // Check battery level const battery = await eliza.execute({ action: 'BATTERY', content: {}, });   ","version":"1.0.17","tagName":"h3"},{"title":"Advanced Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#advanced-features","content":" // Rotation control (for supported devices) const result = await eliza.execute({ action: 'ROTATE', content: { strength: 0.7, duration: 2000, }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Device Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#device-support","content":" The plugin supports various devices through the Buttplug protocol, including but not limited to:  Lovense devices (Nora, Max, etc.)WeVibe productsKiiroo devicesMagic Motion productsAnd many others supported by Buttplug.io  ","version":"1.0.17","tagName":"h2"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#testing","content":" The plugin includes a simulation mode for testing without physical hardware:  bun test-via-bun   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#dependencies","content":" Buttplug.io (v3.2.2)Intiface EngineWebSocket support  ","version":"1.0.17","tagName":"h2"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#common-issues","content":" Connection Problems Verify Intiface Engine is running (ws://localhost:12345 by default)Check device Bluetooth is enabled and in pairing modeEnsure device is charged and within rangeTry restarting both device and Intiface Engine Device Not Found Confirm device is supported by Buttplug.ioTry manual device pairing through Intiface Central firstCheck if device requires specific firmware versionVerify device is not connected to another application Command Failures Check battery level is sufficientEnsure device is within supported range for command valuesVerify device supports the specific command (vibrate/rotate)Monitor Intiface Engine logs for detailed error messages Performance Issues Reduce command frequency if experiencing lagCheck for Bluetooth interferenceMonitor system resources for potential bottlenecksConsider using wired connection if available  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#security-best-practices","content":" Device Privacy Use secure WebSocket connections (wss://) when possibleDon't expose Intiface Engine to public networksRegularly check for and apply firmware updatesMonitor device connection status Data Protection Clear device pairing history when neededDon't store sensitive device informationUse unique device names for identificationImplement timeouts for idle connections Access Control Limit device control to authenticated usersImplement command rate limitingUse device-specific permissions where applicableMonitor and log unusual command patterns Network Security Keep Intiface Engine behind firewallUse local connections when possibleImplement connection timeoutsRegular security audits of configurations  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#credits","content":" This plugin integrates with Buttplug.io and Intiface Engine, developed by Nonpolynomial Labs, LLC.  Special thanks to:  The Buttplug.io team for developing the Buttplug.io protocolThe Intiface Engine team for developing the Intiface EngineThe Eliza community for their contributions and feedback.  For more information about Buttplug.io and Intiface Engine:  Buttplug.ioIntiface Engine  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-intiface","url":"/packages/plugins/intiface#license","content":" This plugin is part of the Eliza project. See the main project repository for license information.  Intiface is a Registered Trademark of Nonpolynomial Labs, LLC  Buttplug and Intiface are BSD licensed.  Copyright (c) 2016-2022, Nonpolynomial Labs, LLC All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of buttplug nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ","version":"1.0.17","tagName":"h2"},{"title":"Isaac X Plugin for ElizaOS","type":0,"sectionRef":"#","url":"/packages/plugins/isaacx","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Isaac X Plugin for ElizaOS","url":"/packages/plugins/isaacx#features","content":" Research question answering with academic citationsRate limit management (10 free requests/day)Automatic reference tracking  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Isaac X Plugin for ElizaOS","url":"/packages/plugins/isaacx#installation","content":" bun add @elizaos/plugin-isaacx   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Isaac X Plugin for ElizaOS","url":"/packages/plugins/isaacx#configuration","content":" First, visit isaacx.ai/docs to create your API key. Add your Isaac X API key to your environment variables:  ISAACX_API_KEY=ix_your_api_key_here   Register the plugin in your character configuration:  import isaacXPlugin from '@elizaos/plugin-isaacx'; const character = { plugins: [isaacXPlugin], };   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Isaac X Plugin for ElizaOS","url":"/packages/plugins/isaacx#usage","content":" // Ask a research question const response = await runtime.processAction('ANSWER_RESEARCH_QUESTION', { question: 'What are the latest developments in quantum computing?', }); // The response will include both the answer and academic citations console.log('Research Findings:', response.answer); console.log('Academic Sources:', response.references);   ","version":"1.0.17","tagName":"h2"},{"title":"Response Format‚Äã","type":1,"pageTitle":"Isaac X Plugin for ElizaOS","url":"/packages/plugins/isaacx#response-format","content":" interface IsaacXResponse { answer: string; references: string[]; }   ","version":"1.0.17","tagName":"h2"},{"title":"Rate Limiting‚Äã","type":1,"pageTitle":"Isaac X Plugin for ElizaOS","url":"/packages/plugins/isaacx#rate-limiting","content":" 10 free requests per day40 $ISAACX per request (~$0.05 USD)20% discount for bulk usage (100+ requests)  ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"Isaac X Plugin for ElizaOS","url":"/packages/plugins/isaacx#development","content":" # Build the plugin bun build # Run tests bun test   ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Isaac X Plugin for ElizaOS","url":"/packages/plugins/isaacx#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-abstract","type":0,"sectionRef":"#","url":"/packages/plugins/lens-network","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#description","content":" The Abstract plugin enables seamless token transfers on the Abstract testnet. It provides functionality to transfer both native ETH and ERC20 tokens using secure wallet operations.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#installation","content":" bun install @elizaos/plugin-lensNetwork   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#configuration","content":" The plugin requires the following environment variables to be set:  LENS_ADDRESS=&lt;Your Lens wallet address&gt; LENS_PRIVATE_KEY=&lt;Your Lens private key&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#basic-integration","content":" import { lensPlugin } from '@elizaos/plugin-lensNetwork';   ","version":"1.0.17","tagName":"h3"},{"title":"Transfer Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#transfer-examples","content":" // The plugin responds to natural language commands like: 'Send 1 Grass to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#actions","content":" SEND_TOKEN‚Äã  Transfers tokens from the agent's wallet to another address.  Aliases:  TRANSFER_TOKEN_ON_LENSTRANSFER_TOKENS_ON_LENSSEND_TOKENS_ON_LENSSEND_ETH_ON_LENSPAY_ON_LENSMOVE_TOKENS_ON_LENSMOVE_ETH_ON_LENS  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#common-issues--troubleshooting","content":" Transaction Failures Verify wallet has sufficient balanceCheck recipient address formatEnsure private key is correctly setVerify network connectivity Configuration Issues Verify all required environment variables are setEnsure private key format is correctCheck wallet address format  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#security-best-practices","content":" Private Key Management Store private key securely using environment variablesNever commit private keys to version controlUse separate wallets for development and productionMonitor wallet activity regularly  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lens-network#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run the plugin:  bun run dev  ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-letzai","type":0,"sectionRef":"#","url":"/packages/plugins/letzai","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#description","content":" LetzAI is an image generation platform and visual discovery engine. It enables anyone to generate images about anything, by allowing users to add themselves, their products or their art style to the platform as AI Models.  This plugin integrates LetzAI with Eliza, enabling agents to generate images using any LetzAI Models, including the ones you may have created specifically of or for your agent.  To use this plugin, you will need a LetzAI API Key, which can be created on your subscription page here. A subscription is required to create an API key.  To generate images the plugin introduces its own GENERATE_IMAGE action.  The plugin was not tested together with other image generation functionalities.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#installation","content":" bun install @elizaos/plugin-letzai   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#environment-variables","content":" LETZAI_API_LEY=&lt;Your LetzAI API Key&gt; LETZAI_MODELS=&quot;@hailee, @examplemodel2&quot;   Inside the plugin's index.tsx file is a &quot;improvePrompt&quot; variable and some code that is commented out. This code could be enhanced to make the instructions from chat be passed to the API in a better way. This is an open TO DO.  ","version":"1.0.17","tagName":"h3"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   ","version":"1.0.17","tagName":"h3"},{"title":"Example‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#example","content":" I am currently working on an example Agent called &quot;HaileeAgent&quot;. Will share more information on this as I progress.  ","version":"1.0.17","tagName":"h2"},{"title":"Other Notes‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#other-notes","content":" In my own character.json file for Hailee, I have integrated the plugin like this:   &quot;plugins&quot;: [&quot;../../packages/plugin-letzai/src/index.ts&quot;], &quot;actions&quot;: [&quot;GENERATE_IMAGE&quot;],   But I'm not sure yet this is the correct way for public repos.  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#future-enhancements","content":" Interactive agent with better image pollingEnable &quot;Improve prompt&quot; functionality  If anybody knows how to make the agent be pro-active and send multiple callbacks(), please reach out.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#contributing","content":" This Plugin is developed by LetzAI. Any helpful contributions are welcome!  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#credits","content":" Built by mitch0z  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-letzai","url":"/packages/plugins/letzai#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-abstract","type":0,"sectionRef":"#","url":"/packages/plugins/lensNetwork","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#description","content":" The Abstract plugin enables seamless token transfers on the Abstract testnet. It provides functionality to transfer both native ETH and ERC20 tokens using secure wallet operations.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#installation","content":" bun install @elizaos/plugin-lensNetwork   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#configuration","content":" The plugin requires the following environment variables to be set:  LENS_ADDRESS=&lt;Your Lens wallet address&gt; LENS_PRIVATE_KEY=&lt;Your Lens private key&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#basic-integration","content":" import { lensPlugin } from '@elizaos/plugin-lensNetwork';   ","version":"1.0.17","tagName":"h3"},{"title":"Transfer Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#transfer-examples","content":" // The plugin responds to natural language commands like: 'Send 1 Grass to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#actions","content":" SEND_TOKEN‚Äã  Transfers tokens from the agent's wallet to another address.  Aliases:  TRANSFER_TOKEN_ON_LENSTRANSFER_TOKENS_ON_LENSSEND_TOKENS_ON_LENSSEND_ETH_ON_LENSPAY_ON_LENSMOVE_TOKENS_ON_LENSMOVE_ETH_ON_LENS  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#common-issues--troubleshooting","content":" Transaction Failures Verify wallet has sufficient balanceCheck recipient address formatEnsure private key is correctly setVerify network connectivity Configuration Issues Verify all required environment variables are setEnsure private key format is correctCheck wallet address format  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#security-best-practices","content":" Private Key Management Store private key securely using environment variablesNever commit private keys to version controlUse separate wallets for development and productionMonitor wallet activity regularly  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-abstract","url":"/packages/plugins/lensNetwork#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run the plugin:  bun run dev  ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-lightlink","type":0,"sectionRef":"#","url":"/packages/plugins/lightlink","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#description","content":" The LightLink Plugin allows agents to interact with the LightLink network.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#features","content":" The plugin lets agents:  Check balances.Transfer both ERC20 and Eth.Swap (via Elektrik)Search the block explorer for contracts and addresses.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#installation","content":" bun add @elizaos/plugin-lightlink   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#required-environment-variables","content":" # Required EVM_PRIVATE_KEY=your-private-key-here # Optional - Custom RPC URLs LIGHTLINK_MAINNET_RPC_URL=https://your-custom-mainnet-rpc-url LIGHTLINK_TESTNET_RPC_URL=https://your-custom-testnet-rpc-url   ","version":"1.0.17","tagName":"h3"},{"title":"Chain Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#chain-configuration","content":" By default, LightLink Phoenix (mainnet) is enabled. To enable additional chains, add them to your character config:  &quot;settings&quot;: { &quot;chains&quot;: { &quot;evm&quot;: [ &quot;lightlinkTestnet&quot;, &quot;ethereum&quot;, &quot;sepolia&quot; ] } }   ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Check Balance‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#check-balance","content":" Check the balance of an address. All address can be written as an ENS name or a raw address.  // Example: Check balance of 0x742d35Cc6634C0532925a3b844Bc454e4438f44e Check the balance of vitalik.eth on lightlink   ","version":"1.0.17","tagName":"h3"},{"title":"Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#transfer","content":" Transfer native tokens on the same chain:  // Example: Transfer 1 ETH Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e   ","version":"1.0.17","tagName":"h3"},{"title":"Swap‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#swap","content":" Swap tokens on the same chain, you can also provide the address of the tokens you want to swap directly.  // Example: Swap 1 ETH to USDC Swap 1 ETH to USDC on lightlink testnet   ","version":"1.0.17","tagName":"h3"},{"title":"Search‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#search","content":" Search the block explorer for contracts and addresses.  // Example: Search for a contract Whats the contract address for the USDC (sometimes written as USDC.e) token on lightlink?   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightlink","url":"/packages/plugins/lightlink#development","content":" Clone the repositoryInstall dependencies: bun installBuild the plugin: bun run buildRun tests: bun test ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-irys","type":0,"sectionRef":"#","url":"/packages/plugins/irys","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#overview","content":" This plugin integrates Irys functionality into ElizaOS, allowing agents to store and retrieve data in a decentralized manner. It provides a service for creating a decentralized knowledge base and enabling multi-agent collaboration.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#installation","content":" To install this plugin, run the following command:  bun add @elizaos/plugin-irys   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#features","content":" Decentralized Data Storage: Store data permanently on the Irys networkData Retrieval: Fetch stored data using GraphQL queriesMulti-Agent Support: Enable data sharing and collaboration between agentsEthereum Integration: Built-in support for Ethereum wallet authentication  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#configuration","content":" The plugin requires the following environment variables:  EVM_WALLET_PRIVATE_KEY: Your EVM wallet private keyAGENTS_WALLET_PUBLIC_KEYS: The public keys of the agents that will be used to retrieve the data (string separated by commas)  For this plugin to work, you need to have an EVM (Base network) wallet with a private key and public address. To prevent any security issues, we recommend using a dedicated wallet for this plugin.  Important: The wallet address needs to have Base Sepolia ETH tokens to store images/files and any data larger than 100KB.  ","version":"1.0.17","tagName":"h2"},{"title":"How it works‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#how-it-works","content":" The system consists of three main components that work together to enable decentralized multi-agent operations:  ","version":"1.0.17","tagName":"h2"},{"title":"1. Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#1-providers","content":" Providers are the data management layer of the system. They:  Interact with the Orchestrator to store dataAggregate information from multiple sources to enhance contextSupport agents with enriched data for better decision-making  ","version":"1.0.17","tagName":"h3"},{"title":"2. Orchestrators‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#2-orchestrators","content":" Orchestrators manage the flow of communication and requests. They:  Interact with the Irys datachain to store and retrieve dataImplement a tagging system for request categorizationValidate data integrity and authenticityCoordinate the overall system workflow  ","version":"1.0.17","tagName":"h3"},{"title":"3. Workers‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#3-workers","content":" Workers are specialized agents that execute specific tasks. They:  Perform autonomous operations (e.g., social media interactions, DeFi operations)Interact with Orchestrators to get contextual data from ProvidersInteract with Orchestrators to store execution results on the Irys datachainMaintain transparency by documenting all actions  This architecture ensures a robust, transparent, and efficient system where:  Data is securely stored and verified on the blockchainRequests are properly routed and managedOperations are executed autonomouslyAll actions are traceable and accountable  You can find more information about the system in the A Decentralized Framework for Multi-Agent Systems Using Datachain Technology paper.  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Worker‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#worker","content":" As a worker, you can store data on the Irys network using the workerUploadDataOnIrys function. You can use this function to store data from any source to document your actions. You can also use this function to store a request to get data from the Orchestrator to enhance your context.  const { IrysService } = require('@elizaos/plugin-irys'); const irysService: IrysService = runtime.getService(ServiceType.IRYS); const data = 'Provide Liquidity to the ETH pool on Stargate'; const result = await irysService.workerUploadDataOnIrys( data, IrysDataType.OTHER, IrysMessageType.DATA_STORAGE, ['DeFi'], ['Stargate', 'LayerZero'] ); console.log(`Data uploaded successfully at the following url: ${result.url}`);   To upload files or images :  const { IrysService } = require('@elizaos/plugin-irys'); const irysService: IrysService = runtime.getService(ServiceType.IRYS); const userAttachmentToStore = state.recentMessagesData[1].content.attachments[0].url.replace( 'agent\\\\agent', 'agent' ); const result = await irysService.workerUploadDataOnIrys( userAttachmentToStore, IrysDataType.IMAGE, IrysMessageType.DATA_STORAGE, ['Social Media'], ['X', 'Twitter'] ); console.log(`Data uploaded successfully at the following url: ${result.url}`);   To store a request to get data from the Orchestrator to enhance your context, you can use the workerUploadDataOnIrys function with the IrysMessageType.REQUEST message type.  const { IrysService } = require('@elizaos/plugin-irys'); const irysService: IrysService = runtime.getService(ServiceType.IRYS); const data = 'Which Pool farm has the highest APY on Stargate?'; const result = await irysService.workerUploadDataOnIrys( data, IrysDataType.OTHER, IrysMessageType.REQUEST, ['DeFi'], ['Stargate', 'LayerZero'], [0.5], // Validation Threshold - Not implemented yet [1], // Minimum Providers [false], // Test Provider - Not implemented yet [0.5] // Reputation - Not implemented yet ); console.log(`Data uploaded successfully at the following url: ${result.url}`); console.log(`Response from the Orchestrator: ${result.data}`);   ","version":"1.0.17","tagName":"h3"},{"title":"Provider‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#provider","content":" As a provider, you can store data on the Irys network using the providerUploadDataOnIrys function. The data you provide can be retrieved by the Orchestrator to enhance the context of the Worker.  const { IrysService } = require('@elizaos/plugin-irys'); const irysService: IrysService = runtime.getService(ServiceType.IRYS); const data = 'ETH Pool Farm APY : 6,86%'; const result = await irysService.providerUploadDataOnIrys( data, IrysDataType.OTHER, ['DeFi'], ['Stargate', 'LayerZero'] ); console.log(`Data uploaded successfully at the following url: ${result.url}`);   To upload files or images :  const { IrysService } = require('@elizaos/plugin-irys'); const irysService: IrysService = runtime.getService(ServiceType.IRYS); const userAttachmentToStore = state.recentMessagesData[1].content.attachments[0].url.replace( 'agent\\\\agent', 'agent' ); const result = await irysService.providerUploadDataOnIrys( userAttachmentToStore, IrysDataType.IMAGE, ['Social Media'], ['X', 'Twitter'] ); console.log(`Data uploaded successfully at the following url: ${result.url}`);   ","version":"1.0.17","tagName":"h3"},{"title":"Retrieving Data‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#retrieving-data","content":" To retrieve data from the Irys network, you can use the getDataFromAnAgent function. This function will retrieve all data associated with the given wallet addresses, tags and timestamp. The function automatically detects the content type and returns either JSON data or file/image URLs accordingly.  For files and images: Returns the URL of the stored contentFor other data types: Returns a JSON object with the following structure:  { data: string, // The stored data address: string // The address of the agent that stored the data }   By using only the provider address you want to retrieve data from :  const { IrysService } = require('@elizaos/plugin-irys'); const irysService = runtime.getService(ServiceType.IRYS); const agentsWalletPublicKeys = runtime.getSetting('AGENTS_WALLET_PUBLIC_KEYS').split(','); const data = await irysService.getDataFromAnAgent(agentsWalletPublicKeys); console.log(`Data retrieved successfully. Data: ${data}`);   By using tags and timestamp:  const { IrysService } = require('@elizaos/plugin-irys'); const irysService = runtime.getService(ServiceType.IRYS); const tags = [ { name: 'Message-Type', values: [IrysMessageType.DATA_STORAGE] }, { name: 'Service-Category', values: ['DeFi'] }, { name: 'Protocol', values: ['Stargate', 'LayerZero'] }, ]; const timestamp = { from: 1710000000, to: 1710000000 }; const data = await irysService.getDataFromAnAgent(null, tags, timestamp); console.log(`Data retrieved successfully. Data: ${data}`);   If everything is null, the function will retrieve all data from the Irys network.  ","version":"1.0.17","tagName":"h3"},{"title":"About Irys‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#about-irys","content":" Irys is the first Layer 1 (L1) programmable datachain designed to optimize both data storage and execution. By integrating storage and execution, Irys enhances the utility of blockspace, enabling a broader spectrum of web services to operate on-chain.  ","version":"1.0.17","tagName":"h2"},{"title":"Key Features of Irys‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#key-features-of-irys","content":" Unified Platform: Combines data storage and execution, allowing developers to eliminate dependencies and integrate efficient on-chain data seamlessly.Cost-Effective Storage: Optimized specifically for data storage, making it significantly cheaper to store data on-chain compared to traditional blockchains.Programmable Datachain: The IrysVM can utilize on-chain data during computations, enabling dynamic and real-time applications.Decentralization: Designed to minimize centralization risks by distributing control.Free Storage for Small Data: Storing less than 100KB of data is free.GraphQL Querying: Metadata stored on Irys can be queried using GraphQL.  ","version":"1.0.17","tagName":"h3"},{"title":"GraphQL Query Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#graphql-query-examples","content":" The plugin uses GraphQL to retrieve transaction metadata. Here's an example query structure:  const QUERY = gql` query ($owners: [String!], $tags: [TagFilter!], $timestamp: TimestampFilter) { transactions(owners: $owners, tags: $tags, timestamp: $timestamp) { edges { node { id address } } } } `; const variables = { owners: owners, tags: tags, timestamp: timestamp, }; const data: TransactionGQL = await graphQLClient.request(QUERY, variables);   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"IrysService‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#irysservice","content":" The main service provided by this plugin implements the following interface:  interface UploadIrysResult { success: boolean; url?: string; error?: string; data?: any; } interface DataIrysFetchedFromGQL { success: boolean; data: any; error?: string; } interface GraphQLTag { name: string; values: any[]; } const enum IrysMessageType { REQUEST = 'REQUEST', DATA_STORAGE = 'DATA_STORAGE', REQUEST_RESPONSE = 'REQUEST_RESPONSE', } const enum IrysDataType { FILE = 'FILE', IMAGE = 'IMAGE', OTHER = 'OTHER', } interface IrysTimestamp { from: number; to: number; } interface IIrysService extends Service { getDataFromAnAgent( agentsWalletPublicKeys: string[], tags: GraphQLTag[], timestamp: IrysTimestamp ): Promise&lt;DataIrysFetchedFromGQL&gt;; workerUploadDataOnIrys( data: any, dataType: IrysDataType, messageType: IrysMessageType, serviceCategory: string[], protocol: string[], validationThreshold: number[], minimumProviders: number[], testProvider: boolean[], reputation: number[] ): Promise&lt;UploadIrysResult&gt;; providerUploadDataOnIrys( data: any, dataType: IrysDataType, serviceCategory: string[], protocol: string[] ): Promise&lt;UploadIrysResult&gt;; }   Methods‚Äã  getDataFromAnAgent(agentsWalletPublicKeys: string[], tags: GraphQLTag[], timestamp: IrysTimestamp): Retrieves all data associated with the given parametersworkerUploadDataOnIrys(data: any, dataType: IrysDataType, messageType: IrysMessageType, serviceCategory: string[], protocol: string[], validationThreshold: number[], minimumProviders: number[], testProvider: boolean[], reputation: number[]): Uploads data to Irys and returns the orchestrator response (request or data storage)providerUploadDataOnIrys(data: any, dataType: IrysDataType, serviceCategory: string[], protocol: string[]): Uploads data to Irys and returns orchestrator response (data storage)  ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#testing","content":" To run the tests, you can use the following command:  bun test   ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#contributing","content":" Contributions are welcome! Please feel free to submit a Pull Request.  ","version":"1.0.17","tagName":"h2"},{"title":"Resources‚Äã","type":1,"pageTitle":"@elizaos/plugin-irys","url":"/packages/plugins/irys#resources","content":" Irys DocumentationA Decentralized Framework for Multi-Agent Systems Using Datachain Technology ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-lightning","type":0,"sectionRef":"#","url":"/packages/plugins/lightning","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightning","url":"/packages/plugins/lightning#features","content":" üí± Make a new off-chain invoice.üìä Make an off-chain payment.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightning","url":"/packages/plugins/lightning#installation","content":" Add the plugin to your Eliza configuration:  { &quot;plugins&quot;: [&quot;@elizaos/plugin-lightning&quot;] }   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightning","url":"/packages/plugins/lightning#configuration","content":" Set the following environment variables:  LND_TLS_CERT=your_lnnode_tls_cert #Base64 of LND certificate LND_MACAROON=020..... #Base64 encoded admin.macaroon file LND_SOCKET='x.x.x.x:10009'   ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightning","url":"/packages/plugins/lightning#available-actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. CREATE_INVOICE‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightning","url":"/packages/plugins/lightning#1-create_invoice","content":" Make a new off-chain invoice.  Examples:   &quot;Help me create an invoice for 1000sats&quot; &quot;Create an invoice for 1000sats&quot;   Returns: lnbcrt....  ","version":"1.0.17","tagName":"h3"},{"title":"2. PAY_INVOICE‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightning","url":"/packages/plugins/lightning#2-pay_invoice","content":" Make an off-chain payment.  Examples:   &quot;Pay invoice lnbcrt10u1pncndjvpp58y77adkngcz3ypx6t39j245ydvk2vu67c8ugvegee3gt5wgs7yjqdxvdec82c33wdmnq73s0qcxwurrxp4nquncxe4h56m9xu6xwetyd3mrq6ehdguxkd35wuurgarex4u8gefkdsekgdtnddehxurrxecxvhmwwp6kyvfexekhxwtv8paryvnpwsuhxdryvachwangw3kn2atddq6kzvrvwfcxzanewce8ja34d43k56rkweu8jdtcwv68zmrsvdescqzzsxqrrsssp5q3hv38wfprvaazzwf8c4t33tzjcac5xz94sk8muehmn5szqaw6ks9qxpqysgqt5pjhna4922s8ayzgu5rh8clx7psp2culdr5r6cxxxqzs3e5ep345p45vggg0qegt6fu3prdrqgpd8v70l9wdhekt8gex5e8pqvxg2sp97fkmd&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Security Notes‚Äã","type":1,"pageTitle":"@elizaos/plugin-lightning","url":"/packages/plugins/lightning#security-notes","content":" Store your LND_TLS_CERT and LND_MACAROON securely using environment variablesTest with small amounts firstUse regtest for initial testing ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-llama","type":0,"sectionRef":"#","url":"/packages/plugins/llama","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#overview","content":" The LLaMA plugin serves as a foundational component of Eliza OS, providing local LLM capabilities using LLaMA models. It enables efficient and customizable text generation with both CPU and GPU support.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#features","content":" Local LLM Support: Run LLaMA models locallyGPU Acceleration: CUDA support for faster inferenceFlexible Configuration: Customizable parameters for text generationMessage Queuing: Efficient handling of multiple requestsAutomatic Model Management: Download and verification systems  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#installation","content":" npm install @elizaos/plugin-llama   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#configuration","content":" The plugin can be configured through environment variables:  ","version":"1.0.17","tagName":"h2"},{"title":"Core Settings‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#core-settings","content":" LLAMALOCAL_PATH=your_model_storage_path OLLAMA_MODEL=optional_ollama_model_name   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#usage","content":" import { createLlamaPlugin } from '@elizaos/plugin-llama'; // Initialize the plugin const llamaPlugin = createLlamaPlugin(); // Register with Eliza OS elizaos.registerPlugin(llamaPlugin);   ","version":"1.0.17","tagName":"h2"},{"title":"Services‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#services","content":" ","version":"1.0.17","tagName":"h2"},{"title":"LlamaService‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#llamaservice","content":" Provides local LLM capabilities using LLaMA models.  Technical Details‚Äã  Model: Hermes-3-Llama-3.1-8B (8-bit quantized)Source: Hugging Face (NousResearch/Hermes-3-Llama-3.1-8B-GGUF)Context Size: 8192 tokensInference: CPU and GPU (CUDA) support  Features‚Äã  Text Generation Completion-style inferenceTemperature controlStop token configurationFrequency and presence penaltiesMaximum token limit control Model Management Automatic model downloadingModel file verificationAutomatic retry on initialization failuresGPU detection for acceleration Performance Message queuing systemCUDA acceleration when availableConfigurable context size  ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#common-issues","content":" Model Initialization Failures  Error: Model initialization failed   Verify model file exists and is not corruptedCheck available system memoryEnsure CUDA is properly configured (if using GPU)  Performance Issues  Warning: No CUDA detected - local response will be slow   Verify CUDA installation if using GPUCheck system resourcesConsider reducing context size  ","version":"1.0.17","tagName":"h3"},{"title":"Debug Mode‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#debug-mode","content":" Enable debug logging for detailed troubleshooting:  process.env.DEBUG = 'eliza:plugin-llama:*';   ","version":"1.0.17","tagName":"h3"},{"title":"System Requirements‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#system-requirements","content":" Node.js 16.x or higherMinimum 8GB RAM recommendedCUDA-compatible GPU (optional, for acceleration)Sufficient storage for model files  ","version":"1.0.17","tagName":"h3"},{"title":"Performance Optimization‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#performance-optimization","content":" Model Selection Choose appropriate model sizeUse quantized versions when possibleBalance quality vs speed Resource Management Monitor memory usageConfigure appropriate context sizeOptimize batch processing GPU Utilization Enable CUDA when availableMonitor GPU memoryBalance CPU/GPU workload  ","version":"1.0.17","tagName":"h3"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#support","content":" For issues and feature requests, please:  Check the troubleshooting guide aboveReview existing GitHub issuesSubmit a new issue with: System informationError logsSteps to reproduce  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#credits","content":" This plugin integrates with and builds upon:  LLaMA - Base language modelnode-llama-cpp - Node.js bindingsGGUF - Model format  Special thanks to:  The LLaMA community for model developmentThe Node.js community for tooling supportThe Eliza community for testing and feedback  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-llama","url":"/packages/plugins/llama#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-lit","type":0,"sectionRef":"#","url":"/packages/plugins/lit","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#features","content":" Deploy and manage Lit Actions for programmable cryptographyInteract with Lit Agent Wallet for secure transaction signingBuilt-in tools for common blockchain operations: ECDSA signingERC20 token transfersUniswap interactions  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#installation","content":" npm install @elizaos/plugin-lit   ","version":"1.0.17","tagName":"h2"},{"title":"Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#setup","content":" There are two ways to register the plugin:  Add to your agent's plugins in agent/src/index.ts:  import { LitPlugin } from '@elizaos/plugin-lit'; export default { plugins: [ // ... other plugins litPlugin, ], // ... rest of your agent configuration };   Or add it in your character configuration:  { name: &quot;YourCharacter&quot;, plugins: [ // ... other plugins &quot;@elizaos/plugin-lit&quot; ] }   ","version":"1.0.17","tagName":"h2"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#quick-start","content":" After registration, initialize Lit Protocol:  await elizaOS.lit.initialize({ // Your configuration options });   ","version":"1.0.17","tagName":"h2"},{"title":"Core Components‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#core-components","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Lit Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#lit-actions","content":" Located in src/actions/helloLit, this module provides the foundation for deploying and managing Lit Actions. Lit Actions are JavaScript functions that run in a decentralized manner across the Lit Network.  Example usage:  const litAction = await elizaOS.lit.deployAction({ code: ` (async () =&gt; { // Your Lit Action code here })(); `, });   ","version":"1.0.17","tagName":"h3"},{"title":"Tools‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#tools","content":" The src/actions/helloLit/tools directory contains pre-built tools for common blockchain operations:  ECDSA Signing‚Äã  const signature = await elizaOS.lit.tools.ecdsaSign({ message: 'Message to sign', // Additional parameters });   ERC20 Token Transfer‚Äã  const transfer = await elizaOS.lit.tools.erc20Transfer({ tokenAddress: '0x...', recipient: '0x...', amount: '1000000000000000000', // 1 token with 18 decimals });   Uniswap Integration‚Äã  const swap = await elizaOS.lit.tools.uniswapSwap({ tokenIn: '0x...', tokenOut: '0x...', amountIn: '1000000000000000000', });   ","version":"1.0.17","tagName":"h3"},{"title":"Agent Wallet Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#agent-wallet-integration","content":" This plugin integrates with the Lit Protocol Agent Wallet for secure key management and transaction signing. The Agent Wallet provides:  Secure key generation and storageTransaction signing capabilitiesIntegration with Lit Actions for programmable authorization  ","version":"1.0.17","tagName":"h2"},{"title":"Documentation‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#documentation","content":" For more detailed information about Lit Protocol and its capabilities, visit:  Lit Protocol DocumentationAgent Wallet Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#contributing","content":" Contributions are welcome! Please feel free to submit a Pull Request.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-lit","url":"/packages/plugins/lit#license","content":" MIT License  Copyright (c) 2024 elizaOS  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ","version":"1.0.17","tagName":"h2"},{"title":"Massa Plugin","type":0,"sectionRef":"#","url":"/packages/plugins/massa","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"Massa Plugin","url":"/packages/plugins/massa#overview","content":" This plugin aims to be the basis of all interactions with the Massa ecosystem.  ","version":"1.0.17","tagName":"h2"},{"title":"Adding a new action‚Äã","type":1,"pageTitle":"Massa Plugin","url":"/packages/plugins/massa#adding-a-new-action","content":" Reuse providers and utilities from the existing actions where possible. Add more utilities if you think they will be useful for other actions.  Add the action to the actions directory. Try to follow the naming convention of the other actions.Export the action in the index.ts file.  ","version":"1.0.17","tagName":"h2"},{"title":"MASSA documentation‚Äã","type":1,"pageTitle":"Massa Plugin","url":"/packages/plugins/massa#massa-documentation","content":" https://docs.massa.net/ ","version":"1.0.17","tagName":"h2"},{"title":"MerkleTrade Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/merkle","content":"","keywords":"","version":"1.0.17"},{"title":"Configuration‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle#configuration","content":" The plugin requires the following environment variables to be set:  Merkle Configuration  MERKLE_TRADE_NETWORK= # Must be one of mainnet, testnet MERKLE_TRADE_APTOS_PRIVATE_KEY= # Aptos private key   ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle#installation","content":" { &quot;plugins&quot;: [&quot;@elizaos/plugin-merkle&quot;] }   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Example‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle#example","content":" // The plugin responds to natural language like: You: &quot;Open a BTC Long position on the Merkle Trade platform with 1000 pay and 10 leverage.&quot; Agent: &quot;Successfully market order BTC with 1000 pay and 10 leverage, Transaction: 0x104af5d1a786a2e1a4721a721b2cfccc7e15fa41eec15a489ba1768790adb523&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle#actions","content":" OPEN_ORDERGET_PRICEGET_POSITIONGET_ORDERGET_BALANCEFULLY_CLOSE_POSITION  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun build   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle#dependencies","content":" @elizaos/core: v0.1.9@merkletrade/ts-sdk: ^v1.0.0@aptos-labs/ts-sdk: ^v1.26.0node-cache: 5.1.2  For more information:  Merkle DocumentationAptos DocumentationMove Language Guide ","version":"1.0.17","tagName":"h2"},{"title":"MerkleTrade Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/merkle-eliza-plugin","content":"","keywords":"","version":"1.0.17"},{"title":"Configuration‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle-eliza-plugin#configuration","content":" The plugin requires the following environment variables to be set:  Merkle Configuration  MERKLE_TRADE_NETWORK= # Must be one of mainnet, testnet MERKLE_TRADE_APTOS_PRIVATE_KEY= # Aptos private key   ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle-eliza-plugin#installation","content":" { &quot;plugins&quot;: [&quot;@elizaos/plugin-merkle&quot;] }   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle-eliza-plugin#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Example‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle-eliza-plugin#example","content":" // The plugin responds to natural language like: You: &quot;Open a BTC Long position on the Merkle Trade platform with 1000 pay and 10 leverage.&quot; Agent: &quot;Successfully market order BTC with 1000 pay and 10 leverage, Transaction: 0x104af5d1a786a2e1a4721a721b2cfccc7e15fa41eec15a489ba1768790adb523&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle-eliza-plugin#actions","content":" OPEN_ORDERGET_PRICEGET_POSITIONGET_ORDERGET_BALANCEFULLY_CLOSE_POSITION  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle-eliza-plugin#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle-eliza-plugin#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun build   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"MerkleTrade Plugin for Eliza","url":"/packages/plugins/merkle-eliza-plugin#dependencies","content":" @elizaos/core: v0.1.9@merkletrade/ts-sdk: ^v1.0.0@aptos-labs/ts-sdk: ^v1.26.0node-cache: 5.1.2  For more information:  Merkle DocumentationAptos DocumentationMove Language Guide ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-messari-ai-toolkit","type":0,"sectionRef":"#","url":"/packages/plugins/messari-ai-toolkit","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#overview","content":" This plugin connects your Eliza agent to Messari's comprehensive AI-powered APIs, enabling sophisticated crypto research and market analysis capabilities. It intelligently detects and processes research questions from conversations, leveraging Messari's proprietary data and expertise.  ","version":"1.0.17","tagName":"h2"},{"title":"Demo‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#demo","content":" https://github.com/messari/plugin-messari-ai-toolkit/blob/master/.github/assets/eliza-tutorial.mp4  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#features","content":" Seamless integration with Messari's AI-Toolkit /chat/completions APIIntelligent detection of crypto-related research questionsReal-time market data and asset metrics analysisAccess to consolidated news summarizationsAsset due diligence insightsFundraising and investment data visualization capabilities  ","version":"1.0.17","tagName":"h2"},{"title":"Usage Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#usage-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#setup","content":" First, clone either: The main Eliza repository: github.com/elizaOS/elizaOR the Eliza starter repository: github.com/elizaOS/eliza-starter Install dependencies and build the project: bun install bun build   ","version":"1.0.17","tagName":"h3"},{"title":"Installing the Messari Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#installing-the-messari-plugin","content":" Depending on which repository you cloned, use one of the following commands:  For Main Eliza Repository:  bun --filter agent add github:messari/plugin-messari-ai-toolkit   For Eliza Starter:  bun add github:messari/plugin-messari-ai-toolkit   Note: For the latest plugin mappings and compatibility information, refer to the eliza-plugins registry.  to use, import into agent/index.ts and add as a plugin  ","version":"1.0.17","tagName":"h3"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#configuration","content":" To use this plugin, you'll need a Messari API key. The Messari AI Toolkit is an enterprise product that requires:  An Enterprise (ENT) subscriptionPurchase of the AI Toolkit service package + creditsAPI key generation  ","version":"1.0.17","tagName":"h2"},{"title":"Enterprise Access‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#enterprise-access","content":" The AI Toolkit subscription includes access to Messari's base package:  Asset APINews APIMarketdata API  ","version":"1.0.17","tagName":"h3"},{"title":"Getting an API Key‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#getting-an-api-key","content":" Subscribe to Messari EnterprisePurchase the AI Toolkit packageVisit Messari Account Settings to generate your API keyUse the API key in your configuration  ","version":"1.0.17","tagName":"h3"},{"title":"API Endpoints‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#api-endpoints","content":" The Toolkit endpoints are accessible at api.messari.io/ai. For detailed API documentation, visit the Messari Developer Docs.  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#usage","content":" Import and register the plugin with your Eliza agentConfigure your API keyStart asking crypto-related questions!  The plugin will automatically detect relevant research questions and query Messari's AI Toolkit for comprehensive answers.  ","version":"1.0.17","tagName":"h2"},{"title":"About Messari AI Toolkit‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#about-messari-ai-toolkit","content":" Messari's AI Toolkit is an enterprise-grade suite of AI-powered APIs designed specifically for the crypto ecosystem. It provides:  Crypto-aware completions endpoint (OpenAI-compatible)Asset extraction on arbitrary documentsDirect access to underlying agentsNews recaps and summarizationsDeep understanding of crypto-specific terminology and contextReal-time market data analysis  ","version":"1.0.17","tagName":"h2"},{"title":"Use Cases‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#use-cases","content":" Market trend analysis with real-time dataAutomated crypto research and report generationNews summarization across multiple sourcesAsset due diligence with Enterprise Diligence ReportsFundraising and investment data visualizationAsset extraction and classification for document contextualization  ","version":"1.0.17","tagName":"h2"},{"title":"Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#security","content":" This plugin requires secure handling of Messari API keys. Never expose your API key in your code or version control system.  ","version":"1.0.17","tagName":"h2"},{"title":"Performance Considerations‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#performance-considerations","content":" The plugin may introduce additional latency due to API calls. Consider implementing appropriate caching and error handling strategies in production environments.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#contributing","content":" Contributions are welcome! Please feel free to submit a Pull Request.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#license","content":" MIT  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-messari-ai-toolkit","url":"/packages/plugins/messari-ai-toolkit#support","content":" For questions about API access and testing, contact bijan.massoumi@messari.io.  For technical support with the plugin, please open an issue in the repository. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-mina","type":0,"sectionRef":"#","url":"/packages/plugins/mina","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#overview","content":" This plugin provides functionality to:  Transfer MINA tokens between walletsQuery wallet balances and portfolio valuesTrack token prices and valuationsManage wallet interactions with the Mina networkCache token prices for performance optimizationGet faucet tokens for testing purposesGet balances for wallets  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#installation","content":" npm install @elizaos/plugin-mina   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#configuration","content":" The plugin requires the following environment variables:  MINA_PRIVATE_KEY=your_private_key MINA_NETWORK=mainnet|devnet   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#usage","content":" Import and register the plugin in your Eliza configuration:  import { minaPlugin } from '@elizaos/plugin-mina'; export default { plugins: [minaPlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Send Token‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#send-token","content":" Transfer MINA tokens to another address:  // Example conversation User: 'Send 1 MINA to B62qkGSBuLmqYApYoWTmAzUtwFVx6Fe9ZStJVPzCwLjWZ5NQDYTiqEU'; Assistant: &quot;I'll send 1 MINA token now...&quot;;   ","version":"1.0.17","tagName":"h3"},{"title":"Check Wallet Balance‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#check-wallet-balance","content":" Query wallet balance and portfolio value:  // Example conversation User: &quot;What's my wallet balance?&quot;; Assistant: 'Your wallet contains 299 MINA ($150 USD)...';   ","version":"1.0.17","tagName":"h3"},{"title":"Get Faucet Tokens‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#get-faucet-tokens","content":" Request faucet tokens for testing:  // Example conversation User: 'Get faucet to B62qqLnFfhYvMkFD2nUeLX1bCHtDQH3edRVtvENtwAfn2KTCFxYRjtM'; Assistant: &quot;I'll send you some faucet tokens...&quot;;   ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#actions","content":" SEND_TOKEN: Transfer MINA tokens to another addressTRANSFER_TOKEN: Alias for SEND_TOKENSEND_MINA: Alias for SEND_TOKENPAY: Alias for SEND_TOKENFAUCET: Request faucet tokens for testingBALANCE: Query wallet balance  ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#providers","content":" walletProvider: Manages wallet interactions with the Mina network, including balance queries and portfolio tracking  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#testing","content":" npm run test   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#dependencies","content":" o1js: Core Mina blockchain interaction librarynode-cache: Caching implementationOther standard dependencies listed in package.json  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#credits","content":" This plugin integrates with and builds upon several key technologies:  Mina Blockchain: The ZK blockchain for a secure, private and verifiable internet.o1js: Official Mina SDK for building zkApps.node-cache: Caching implementation  Special thanks to:  The Mina team for developing MinaThe Mina Developer communityThe o1Labs team for Mina SDK maintainersThe Eliza community for their contributions and feedback  For more information about Mina blockchain capabilities:  Mina DocumentationMina Network DashboardMina GitHub Repository  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-mina","url":"/packages/plugins/mina#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-mind-network","type":0,"sectionRef":"#","url":"/packages/plugins/mind-network","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#overview","content":" The Mind Network plugin empowers users to participate in secure, privacy-preserving voting on the Mind Network. Leveraging Fully Homomorphic Encryption (FHE), it ensures encrypted votes while allowing users to track rewards earned for their participation. Designed for seamless integration with the Eliza AI agent, this plugin enables interactive and guided actions for an enhanced user experience.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#features","content":" Web3 Wallet: contribute eliza agent interaction with enriched web3 wallet functionality. Both Metamask and OKX web3 wallets have been tested and more to come.Voter Registration: Join the Mind Network's Randgen Hub and other hubs to participate in secure voting, validation and consensus.FHE Encryption: Safeguard vote content using Fully Homomorphic Encryption. The key difference is encryption key is never shared but still be able to run computation over encrypted data.Submit Encrypted Votes: Cast votes in Mind Network Hubs elections without compromising data privacy. So AI Agents can get consensus over collective predictions, inference and serving.Reward Tracking: Monitor your vFHE rewards earned through voting contributions.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#installation","content":" Dependency for the plugin:  mind-randgen-sdkmind-sdk-hubselizaos  To install the plugin, use the following command:  bun install @elizaos/plugin-mind-network   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#configuration","content":" Before using the plugin, configure the necessary environment variables:  MIND_HOT_WALLET_PRIVATE_KEY=&lt;Hot wallet private key to vote&gt; MIND_COLD_WALLET_ADDRESS=&lt;Cold wallet address to receive rewards&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#actions","content":" The plugin provides several key actions to interact with the Mind Network:  MIND_REGISTER_VOTER‚Äã  Registers the user as a voter in the Mind Network's Randgen Hub. The hub is live and accessible at Randgen Hub. You can participant or create more function hubs in Mind Network for your eliza agents.  Prompt Example:  &quot;Register me as a voter in Mind Network.&quot;   Response: Confirmation of successful voter registration.  MIND_CHECK_VOTING_REWARD‚Äã  Retrieves the amount of vFHE rewards earned through voting.  Prompt Example:  &quot;How much reward have I earned in Mind Network?&quot;   Response: Total vFHE rewards earned.  MIND_FHE_ENCRYPT‚Äã  Encrypts a user-provided number using Fully Homomorphic Encryption (FHE).  Prompt Example:  &quot;Encrypt the number 88 for voting.&quot;   Response: A secure URL containing the encrypted number.  MIND_FHE_VOTE‚Äã  Submits an encrypted vote to the Mind Network's Randgen Hub.  Prompt Example:  &quot;Submit my encrypted vote to Mind Network.&quot;   Response: Confirmation of successful vote submission.  ","version":"1.0.17","tagName":"h3"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#usage-examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Conversational AI Interaction‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#conversational-ai-interaction","content":" The plugin integrates seamlessly with ElizaOS characters, enabling intuitive and guided interactions. Below is a sample conversation:  user: Can you help me to register as a voter in Mind Network? character_trump: LET'S GET YOU REGISTERED TO VOTE IN THE MIND NETWORK! I'll take care of that for you right now. (EVERY VOTE COUNTS!) character_trump: You have registered successfully. user: I want to check my Mind Network voting reward. character_trump: TIME TO CHECK THOSE VOTING REWARDS AGAIN! Let's see how much you've earned in the Mind Network. (THE AMERICAN PEOPLE DESERVE TO KNOW!) character_trump: Your voting reward amount is 10.0 vFHE. user: I want to encrypt 88 with FHE for Mind Network voting. character_trump: LET'S GET THAT NUMBER ENCRYPTED FOR YOUR VOTING! I'll encrypt 88 with FHE for you. (WE'RE KEEPING THINGS SECURE AND STRONG!) character_trump: Encryption is successful. Your encrypted number is available: https://fvno-tn.mindnetwork.xyz/0xb0edc92ec05309711c6ede0641f672715f5b144a4757b7ba51666468d2f7f65d. It is safe to share as no body can decrypt but can run computation to get another encrypted number. user: I want to submit my vote to Mind Network. character_trump: TIME TO CAST THAT VOTE IN THE MIND NETWORK! I'll submit your vote right now. (WE'RE MAKING HISTORY TOGETHER!) character_trump: Your vote has been submitted successfully.   ","version":"1.0.17","tagName":"h3"},{"title":"Real Deployment Screenshot‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#real-deployment-screenshot","content":"   ","version":"1.0.17","tagName":"h3"},{"title":"Contributing & License‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#contributing--license","content":" This plugin is part of the Eliza project. For details on contributing and licensing, please refer to the main project repository. Mind Network welcomes contribution and collaboration.  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-mind-network","url":"/packages/plugins/mind-network#support","content":" If you have any queries, please feel free to contact Mind Team via Discord or Twitter. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-moralis","type":0,"sectionRef":"#","url":"/packages/plugins/moralis","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#description","content":" The Plugin Moralis provides interfaces to fetch real-time DeFi data including trading pairs, pair statistics, and price history. Currently supports Solana chain endpoints.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#installation","content":" bun install @elizaos/plugin-moralis   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#configuration","content":" Set up your environment with the required Moralis API key:  Variable Name\tDescriptionMORALIS_API_KEY\tYour Moralis API key  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#usage","content":" import { moralisPlugin } from '@elizaos/plugin-moralis'; // Initialize the plugin const plugin = moralisPlugin;   ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"GET_SOLANA_TOKEN_PAIRS‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#get_solana_token_pairs","content":" Fetches all trading pairs for a specific token on Solana blockchain.  Examples:  &quot;Get all Solana trading pairs for token So11111111111111111111111111111111111111112&quot;&quot;Show me Solana pairs for USDC token EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&quot;  Response includes:  Exchange information (name, address)Pair details (label, address)Price and volume dataLiquidity information  ","version":"1.0.17","tagName":"h3"},{"title":"GET_SOLANA_PAIR_STATS‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#get_solana_pair_stats","content":" Fetches detailed statistics for a specific trading pair on Solana blockchain.  Examples:  &quot;Get stats for Solana pair A8nPhpCJqtqHdqUk35Uj9Hy2YsGXFkCZGuNwvkD3k7VC&quot;&quot;Show me details of Solana trading pair 83v8iPyZihDEjDdY8RdZddyZNyUtXngz69Lgo9Kt5d6d&quot;  Response includes:  Current price and liquidityPrice changes over multiple timeframesVolume statisticsBuy/Sell ratiosUnique traders count  ","version":"1.0.17","tagName":"h3"},{"title":"GET_SOLANA_TOKEN_STATS‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#get_solana_token_stats","content":" Fetches aggregated statistics across all pairs for a specific token on Solana blockchain.  Examples:  &quot;Get aggregated stats for Solana token SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt&quot;&quot;Show me overall trading metrics for all pairs of token EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&quot;  Response includes:  Total liquidity across all pairsNumber of active pairs and DEXesCombined volume statisticsTotal trader activityBuy/Sell volume breakdowns  ","version":"1.0.17","tagName":"h3"},{"title":"GET_SOLANA_PAIR_OHLCV‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#get_solana_pair_ohlcv","content":" Fetches price history (OHLCV) data for a specific trading pair on Solana blockchain.  Examples:  &quot;Get hourly candlestick prices for Solana pair A8nPhpCJqtqHdqUk35Uj9Hy2YsGXFkCZGuNwvkD3k7VC&quot;&quot;Show me last 15 candles for Solana pair 83v8iPyZihDEjDdY8RdZddyZNyUtXngz69Lgo9Kt5d6d&quot;  Supports:  Multiple timeframes (1h, 15m, etc.)Custom date rangesPrice data in different currencies  ","version":"1.0.17","tagName":"h3"},{"title":"GET_SOLANA_TOKEN_PRICE‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#get_solana_token_price","content":" Fetches current token price from the main liquidity source.  Examples:  &quot;Get current price of Solana token 6Rwcmkz9yiYVM5EzyMcr4JsQPGEAWhcUvLvfBperYnUt&quot;&quot;What's the current price for BONK?&quot;  Returns:  USD priceNative price (e.g., in SOL)Exchange name and address  ","version":"1.0.17","tagName":"h3"},{"title":"GET_SOLANA_TOKEN_METADATA‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#get_solana_token_metadata","content":" Fetches comprehensive token metadata including supply and valuation metrics.  Examples:  &quot;What's the FDV and supply for SRM token?&quot;&quot;Show me metadata for BONK token&quot;  Returns:  Token name and symbolContract addressTotal supply (raw and formatted)Fully Diluted Valuation (FDV)Token standard and decimalsMetaplex-specific details  ","version":"1.0.17","tagName":"h3"},{"title":"Usage Tips‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#usage-tips","content":" Always specify &quot;Solana&quot; in requests to ensure correct chain selectionUse complete token/pair addresses for accurate resultsFor OHLCV data, specify timeframe and date range for precise results  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-moralis","url":"/packages/plugins/moralis#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-movement","type":0,"sectionRef":"#","url":"/packages/plugins/movement","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-movement","url":"/packages/plugins/movement#features","content":" Send MOVE tokensCheck wallet balancesSupport for Movement Network transactions  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-movement","url":"/packages/plugins/movement#installation","content":" bun add @elizaos/plugin-movement   ","version":"1.0.17","tagName":"h2"},{"title":"Instructions‚Äã","type":1,"pageTitle":"@elizaos/plugin-movement","url":"/packages/plugins/movement#instructions","content":" First, ensure you have a Movement Network wallet and private key. Add the Movement plugin to your character's configuration:  { &quot;name&quot;: &quot;Movement Agent&quot;, &quot;plugins&quot;: [&quot;@elizaos/plugin-movement&quot;], &quot;settings&quot;: { &quot;secrets&quot;: { &quot;MOVEMENT_PRIVATE_KEY&quot;: &quot;your_private_key_here&quot;, &quot;MOVEMENT_NETWORK&quot;: &quot;bardock&quot; } } }   Set up your environment variables in the .env file:  MOVEMENT_PRIVATE_KEY=your_private_key_here MOVEMENT_NETWORK=bardock  ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-news","type":0,"sectionRef":"#","url":"/packages/plugins/news","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#overview","content":" This plugin provides functionality to:  Fetch latest news articles from NewsAPISearch news by specific topics or keywordsGet article summaries including titles, descriptions, and URLsLimit results to most recent and relevant content  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#installation","content":" npm install @elizaos/plugin-news   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#configuration","content":" The plugin requires the following environment variable:  NEWS_API_KEY=your_newsapi_key # Required for accessing NewsAPI   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#usage","content":" Import and register the plugin in your Eliza configuration:  import { newsPlugin } from '@elizaos/plugin-news'; export default { plugins: [newsPlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Current News Action‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#current-news-action","content":" The plugin provides a CURRENT_NEWS action that responds to various news-related queries:  // Example queries the action responds to: &quot;what's the latest news about &lt;searchTerm&gt;?&quot;; 'can you show me the latest news about &lt;searchTerm&gt;?'; &quot;what's in the &lt;searchTerm&gt; news today?&quot;; 'show me current events about &lt;searchTerm&gt;?'; &quot;what's going on in the world of &lt;searchTerm&gt;?&quot;; 'give me the latest headlines about &lt;searchTerm&gt;?'; 'show me news updates about &lt;searchTerm&gt;?'; &quot;what are today's top stories about &lt;searchTerm&gt;?&quot;;   The action returns up to 5 recent articles, including:  Article titleDescriptionURLContent preview (up to 1000 characters)  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Development Mode‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#development-mode","content":" npm run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Linting‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#linting","content":" npm run lint   ","version":"1.0.17","tagName":"h3"},{"title":"Project Structure‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#project-structure","content":" plugin-news/ ‚îú‚îÄ‚îÄ src/ ‚îÇ ‚îú‚îÄ‚îÄ actions/ # Action implementations ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ news.ts # Current news action ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ index.ts # Action exports ‚îÇ ‚îî‚îÄ‚îÄ index.ts # Main plugin export ‚îú‚îÄ‚îÄ package.json ‚îî‚îÄ‚îÄ tsconfig.json   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#dependencies","content":" @ai16z/eliza: Core Eliza frameworktsup: Build tool for TypeScript packagesOther standard dependencies listed in package.json  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#actions","content":" CURRENT_NEWS: Main action for fetching news Aliases: [&quot;NEWS&quot;, &quot;GET_NEWS&quot;, &quot;GET_CURRENT_NEWS&quot;]Automatically extracts search terms from user messagesReturns formatted news articles with titles, descriptions, and URLs  ","version":"1.0.17","tagName":"h3"},{"title":"Response Format‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#response-format","content":" interface NewsResponse { title: string; description: string; url: string; content: string; // Limited to 1000 characters }   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#future-enhancements","content":" Additional News Sources Integration with multiple news APIsRSS feed supportSocial media news aggregation Content Analysis Sentiment analysis of news articlesTopic categorizationTrend detectionFact-checking integration Customization Options User preferences for news sourcesCustom filtering rulesPersonalized news feedsLanguage preferences Advanced Search Date range filteringSource filteringCategory-based searchAdvanced query syntax Performance Improvements Caching layerRate limiting optimizationResponse compressionBatch processing  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#license","content":" This plugin is part of the Eliza project. See the main project repository for license information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-news","url":"/packages/plugins/news#credits","content":" This plugin integrates with and builds upon several key technologies:  NewsAPI: News data provider  Plugin generated from Eliza coding tutorial Agent Dev School Part 2 ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-near","type":0,"sectionRef":"#","url":"/packages/plugins/near","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#overview","content":" This plugin aims to be the basis of all interactions with the NEAR ecosystem, providing seamless integration with NEAR Protocol and Ref Finance DEX.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#features","content":" NEAR token transfersToken swaps via Ref FinanceMultiple network support (mainnet, testnet)Secure transaction signingAutomatic storage deposit handlingReal-time price feedsPortfolio tracking and managementSmart routing for optimal swapsBuilt-in denomination handlingComprehensive error handling  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#installation","content":" bun install @elizaos/plugin-near   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#configuration","content":" The plugin requires environment variables or runtime settings:  NEAR_WALLET_SECRET_KEY=your-wallet-private-key NEAR_WALLET_PUBLIC_KEY=your-wallet-public-key NEAR_ADDRESS=your-account.near NEAR_NETWORK=testnet # mainnet or testnet NEAR_RPC_URL=https://neart.lava.build NEAR_SLIPPAGE=0.01 # 1% slippage tolerance   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#token-transfer","content":" import { nearPlugin } from '@elizaos/plugin-near'; // Send NEAR const result = await eliza.execute({ action: 'SEND_NEAR', content: { recipient: 'bob.near', amount: '1.5', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Token Swap‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#token-swap","content":" const result = await eliza.execute({ action: 'EXECUTE_SWAP_NEAR', content: { inputTokenId: 'wrap.near', outputTokenId: 'token.v2.ref-finance.near', amount: '10', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#actions","content":" SEND_NEAR‚Äã  Transfers NEAR tokens to another account.  { action: 'SEND_NEAR', content: { recipient: string, // Recipient's NEAR account (e.g., &quot;bob.near&quot;) amount: string, // Amount to send (in NEAR) tokenAddress?: string // Optional: for NEP-141 tokens } }   EXECUTE_SWAP_NEAR‚Äã  Executes a token swap using Ref Finance.  { action: 'EXECUTE_SWAP_NEAR', content: { inputTokenId: string, // Input token contract (e.g., &quot;wrap.near&quot;) outputTokenId: string, // Output token contract amount: string, // Amount to swap slippageTolerance?: number // Optional: default from config } }   ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#providers","content":" Wallet Provider‚Äã  Provides wallet information and portfolio tracking.  const walletInfo = await eliza.getProvider('wallet'); // Returns formatted portfolio including: // - Account balance // - Token balances // - USD values // - Market prices   ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#common-issues","content":" Transaction Failures Check account balanceVerify storage depositsEnsure sufficient gasConfirm slippage tolerance Connection Problems Verify RPC endpointCheck network selectionEnsure valid credentialsMonitor API rate limits Swap Issues Verify token pairs existCheck liquidity poolsConfirm price impactMonitor slippage settings  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#security-best-practices","content":" Key Management Store private keys securelyUse environment variablesImplement key rotationMonitor account activity Transaction Safety Validate all inputsImplement amount limitsDouble-check recipientsMonitor transaction status Network Security Use secure RPC endpointsImplement retry mechanismsMonitor for suspicious activityKeep dependencies updated Error Handling Log all transaction attemptsHandle timeouts gracefullyValidate all user inputsProvide clear error messages  ","version":"1.0.17","tagName":"h2"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#testing","content":" Run the test suite:  bun test   Watch mode for development:  bun test:watch   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#dependencies","content":" near-api-js: ^5.0.1@ref-finance/ref-sdk: ^1.4.6bignumber.js: ^9.1.2node-cache: ^5.1.2  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#credits","content":" This plugin integrates with:  NEAR ProtocolRef FinanceOfficial NEAR JavaScript API and SDKs  Special thanks to:  The NEAR Protocol team for developing the NEAR blockchainThe Ref Finance team for developing the Ref Finance DEXThe Eliza community for their contributions and feedback.  For more information about NEAR blockchain capabilities:  NEAR DocumentationNEAR Developer PortalNEAR Network DashboardNEAR GitHub Repository  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-near","url":"/packages/plugins/near#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-multichain","type":0,"sectionRef":"#","url":"/packages/plugins/multichain","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#overview","content":" This plugin serves as a unified interface for cross-chain interactions, allowing seamless token transfers and swaps across major blockchain networks. It leverages Chain Signatures and NEAR Intents for secure multi-chain transactions and cross-chain token swap.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#features","content":" Cross-chain token transfersMulti-chain token swapsSupport for major blockchain networks: BitcoinEthereum and EVM chains: PolygonBNB ChainAvalancheArbitrumOptimism Cosmos ecosystem (coming soon) Chain Signatures integrationNEAR Intents for optimized executionPortfolio tracking across chains (coming soon)Comprehensive error handling  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#installation","content":" bun install @elizaos/plugin-multichain   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#configuration","content":" The plugin requires environment variables for each supported chain:  # NEAR Configuration (for Chain Signatures and Intents) NEAR_WALLET_SECRET_KEY=your-near-private-key NEAR_ADDRESS=your-account.near NEAR_NETWORK=mainnet NEAR_RPC_URL=https://rpc.mainnet.near.org # Ethereum Configuration ETH_RPC_URL=your-eth-rpc-url # EVM Chain Configurations POLYGON_RPC_URL=your-polygon-rpc-url BSC_RPC_URL=your-bsc-rpc-url AVAX_RPC_URL=your-avax-rpc-url ARBITRUM_RPC_URL=your-arbitrum-rpc-url OPTIMISM_RPC_URL=your-optimism-rpc-url # Global Settings DEFAULT_SLIPPAGE=0.01 # 1% slippage tolerance   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Multi-Chain Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#multi-chain-transfer","content":" import { multichainPlugin } from '@elizaos/plugin-multichain'; // Transfer tokens across chains const result = await eliza.execute({ action: 'MULTI_CHAIN_TRANSFER', content: { chain: 'BTC', networkId: 'testnet', token: null, // Native BTC amount: '0.1', recipient: 'tb1qmw3xw3y8jtm4054w02kfz58tmf6pcse02twrh8', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Cross-Chain Swap‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#cross-chain-swap","content":" const result = await eliza.execute({ action: 'CROSS_CHAIN_SWAP', content: { sourceChain: 'ETH', targetChain: 'COSMOS', inputToken: 'ETH', outputToken: 'ATOM', amount: '1.0', recipient: 'cosmos1...', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#actions","content":" MULTI_CHAIN_TRANSFER‚Äã  Transfers tokens on multiple chains with a single account  { action: 'MULTI_CHAIN_TRANSFER', content: { chain: string, // The blockchain (e.g., &quot;BTC&quot;, &quot;ETH&quot;, &quot;COSMOS&quot;) networkId: string, // The network of the blockchain (e.g. &quot;mainnet&quot;, &quot;testnet&quot;) token: string, // Token to transfer amount: string, // Amount to transfer recipient: string // Recipient address on target chain } }   CROSS_CHAIN_SWAP‚Äã  Executes a token swap across different chains.  { action: 'CROSS_CHAIN_SWAP', content: { sourceChain: string, // Source blockchain targetChain: string, // Target blockchain inputToken: string, // Input token symbol outputToken: string, // Output token symbol amount: string, // Amount to swap recipient: string, // Recipient address slippage?: number // Optional: slippage tolerance } }   ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#providers","content":" MultiChain Provider‚Äã  Provides cross-chain portfolio tracking and network status.  const portfolioInfo = await eliza.getProvider('multichain'); // Returns consolidated portfolio including: // - Balances across all chains // - USD values // - Network status   ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#common-issues","content":" Cross-Chain Transaction Failures Verify sufficient gas/fees on source chainCheck Bitcoin UTXO availabilityConfirm bridge/protocol liquidityMonitor transaction status on both chains Network Issues Verify RPC endpointsCheck network congestionMonitor bridge statusEnsure chain signatures are valid Swap Issues Verify token pair liquidityCheck price impactMonitor slippageConfirm route availability  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#security-best-practices","content":" Key Management Secure storage of private keysRegular key rotationMulti-signature supportActivity monitoring Transaction Safety Input validationAmount limitsAddress verificationTransaction simulation Network Security Secure RPC endpointsFallback providersRate limitingChain signature verification  ","version":"1.0.17","tagName":"h2"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#testing","content":" bun test   Development mode:  bun test:watch   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#dependencies","content":" multichain-tools: ^4.0.0near-api-js: ^5.0.1bignumber.js: ^9.1.2node-cache: ^5.1.2  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#contributing","content":" See CONTRIBUTING.md for contribution guidelines.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#credits","content":" This plugin integrates with multiple blockchain networks and their respective technologies:  Bitcoin NetworkEthereum and EVM-compatible chainsNEAR Protocol (Chain Signatures and NEAR Intents)  Special thanks to:  The NEAR Protocol team for developing the NEAR blockchain and Chain SignaturesThe Aurora team for developing the NEAR IntentsThe Eliza community for their contributions and feedback.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-multichain","url":"/packages/plugins/multichain#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-multiversx","type":0,"sectionRef":"#","url":"/packages/plugins/multiversx","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#overview","content":" This plugin aims to be the basis of all interactions with the MultiversX ecosystem.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#features","content":" EGLD and ESDT token transfersToken creation and managementMultiple network support (mainnet, devnet, testnet)Secure transaction signingAutomatic nonce managementTransaction status trackingBuilt-in denomination handlingComprehensive error handling  ","version":"1.0.17","tagName":"h2"},{"title":"Adding a new action‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#adding-a-new-action","content":" Reuse providers and utilities from the existing actions where possible. Add more utilities if you think they will be useful for other actions.  Add the action to the actions directory. Try to follow the naming convention of the other actions.Export the action in the index.ts file.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#installation","content":" bun install @elizaos/plugin-multiversx   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#configuration","content":" The plugin requires environment variables or runtime settings:  MVX_PRIVATE_KEY=your-wallet-private-key MVX_NETWORK=devnet # mainnet, devnet, or testnet ACCESS_TOKEN_MANAGEMENT_TO=everyone # you can put an userid to limit token management to one user only (use same id as in the database)   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#token-transfer","content":" import { multiversxPlugin } from '@elizaos/plugin-multiversx'; // Send EGLD const result = await eliza.execute({ action: 'SEND_TOKEN', content: { tokenAddress: 'erd1...', amount: '1', tokenIdentifier: 'EGLD', }, }); // Send ESDT const result = await eliza.execute({ action: 'SEND_TOKEN', content: { tokenAddress: 'erd1...', amount: '100', tokenIdentifier: 'TEST-a1b2c3', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Token Creation‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#token-creation","content":" const result = await eliza.execute({ action: 'CREATE_TOKEN', content: { tokenName: 'TestToken', tokenTicker: 'TEST', decimals: '18', amount: '1000000', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Token Swap‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#token-swap","content":" const result = await eliza.execute({ action: 'SWAP', content: { tokenIn: 'EGLD', amountIn: '1', tokenOut: 'MEX', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Pool Creation‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#pool-creation","content":" const result = await eliza.execute({ action: 'CREATE_POOL', content: { baseTokenID: 'KWAK', quoteTokenID: 'EGLD', baseAmount: '1000000', quoteAmount: '20', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#common-issues","content":" Transaction Failures Verify wallet has sufficient balanceCheck network configuration matches intended networkEnsure correct token identifiersVerify recipient address format Configuration Problems Validate private key formatCheck network selection is validEnsure environment variables are properly setVerify wallet permissions for token operations Token Creation Issues Check token name and ticker formatVerify EGLD balance for issuance feeEnsure unique token identifiersMonitor transaction status Network Connectivity Verify network endpoint availabilityCheck API rate limitsMonitor network statusEnsure proper network selection  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#security-best-practices","content":" Key Management Never expose private keys in codeUse environment variables for sensitive dataImplement key rotation policiesMonitor wallet activity Transaction Safety Validate all transaction parametersImplement transaction limitsUse proper denomination handlingDouble-check recipient addresses Network Security Use secure network connectionsImplement retry mechanismsMonitor for suspicious activityKeep dependencies updated Error Handling Implement comprehensive error loggingHandle network timeouts gracefullyValidate all user inputsProvide clear error messages  ","version":"1.0.17","tagName":"h2"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#testing","content":" Run the test suite:  bun test   Watch mode for development:  bun test:watch   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#dependencies","content":" @multiversx/sdk-core: ^13.15.0bignumber.js: ^9.1.2tsup: ^8.3.5vitest: ^2.1.5  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#credits","content":" This plugin integrates with the MultiversX blockchain using their official SDK.  Special thanks to:  The MultiversX team for developing the MultiversX blockchainThe Eliza community for their contributions and feedback.  For more information about MultiversX blockchain capabilities:  MultiversX DocumentationMultiversX Developer PortalMultiversX GitHub Repository  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-multiversx","url":"/packages/plugins/multiversx#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"nkn","type":0,"sectionRef":"#","url":"/packages/plugins/nkn","content":"","keywords":"","version":"1.0.17"},{"title":"plugin-nkn‚Äã","type":1,"pageTitle":"nkn","url":"/packages/plugins/nkn#plugin-nkn","content":" This ElizaOS plugin integrates NKN (https://nkn.org/) to enable communication between multiple AI agents or users.  ","version":"1.0.17","tagName":"h2"},{"title":"Description‚Äã","type":1,"pageTitle":"nkn","url":"/packages/plugins/nkn#description","content":" The plugin-nkn leverages the NKN protocol to facilitate messaging and communication between various AI agents and users within the Eliza framework. It supports both sending and receiving messages via a decentralized network, ensuring low latency and secure transmission. ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-nft-generation","type":0,"sectionRef":"#","url":"/packages/plugins/nft-generation","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#overview","content":" This plugin provides comprehensive NFT functionality, including collection creation, NFT minting, and verification, with automatic image generation and metadata management.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#features","content":" Automated NFT collection creationAI-powered image generation for NFTsCollection logo generationMetadata creation and managementAWS S3 integration for asset storageSolana blockchain integrationNFT verification systemAutomatic nonce managementComprehensive error handling  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#installation","content":" bun install @elizaos/plugin-nft-generation   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#configuration","content":" The plugin requires environment variables or runtime settings:  # Solana Configuration SOLANA_PUBLIC_KEY=your-wallet-public-key SOLANA_PRIVATE_KEY=your-wallet-private-key SOLANA_ADMIN_PUBLIC_KEY=admin-public-key SOLANA_ADMIN_PRIVATE_KEY=admin-private-key SOLANA_VERIFY_TOKEN=verification-token SOLANA_CLUSTER=devnet # or mainnet-beta # AWS Configuration AWS_ACCESS_KEY_ID=your-aws-access-key AWS_SECRET_ACCESS_KEY=your-aws-secret-key AWS_REGION=aws-region AWS_S3_BUCKET=bucket-name   ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Collection Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#collection-management","content":" createCollection‚Äã  Creates a new NFT collection with an AI-generated logo.  const result = await createCollection({ runtime: runtimeInstance, collectionName: 'MyCollection', fee: 0.01, // Optional: royalty fee percentage });   createNFT‚Äã  Mints a new NFT in an existing collection.  const nft = await createNFT({ runtime: runtimeInstance, collectionName: 'MyCollection', collectionAddress: 'collection123', collectionAdminPublicKey: 'admin123', collectionFee: 0.01, tokenId: 1, });   verifyNFT‚Äã  Verifies an NFT as part of a collection.  const verification = await verifyNFT({ runtime: runtimeInstance, collectionAddress: 'collection123', NFTAddress: 'nft123', });   ","version":"1.0.17","tagName":"h3"},{"title":"REST API Endpoints‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#rest-api-endpoints","content":" ","version":"1.0.17","tagName":"h2"},{"title":"POST /api/nft-generation/create-collection‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#post-apinft-generationcreate-collection","content":" Creates a new collection with generated logo.  ","version":"1.0.17","tagName":"h3"},{"title":"POST /api/nft-generation/create-nft‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#post-apinft-generationcreate-nft","content":" Mints a new NFT with generated artwork.  ","version":"1.0.17","tagName":"h3"},{"title":"POST /api/nft-generation/create-nft-metadata‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#post-apinft-generationcreate-nft-metadata","content":" Generates metadata for an NFT.  ","version":"1.0.17","tagName":"h3"},{"title":"POST /api/nft-generation/verify-nft‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#post-apinft-generationverify-nft","content":" Verifies an NFT's collection membership.  ","version":"1.0.17","tagName":"h3"},{"title":"Example Workflow‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#example-workflow","content":" The plugin provides a streamlined process for generating and verifying NFT collections:  import { createCollection, createNFT, verifyNFT } from './handlers'; const runtime = initializeRuntime(); // Replace with actual IAgentRuntime initialization (async () =&gt; { // Step 1: Create Collection const collectionResult = await createCollection({ runtime, collectionName: 'MyUniqueCollection', }); console.log('Collection created:', collectionResult); // Step 2: Create an NFT in the Collection const nftResult = await createNFT({ runtime, collectionName: 'MyUniqueCollection', collectionAddress: collectionResult.address, collectionAdminPublicKey: collectionResult.collectionInfo.adminPublicKey, collectionFee: 0.01, tokenId: 1, }); console.log('NFT created:', nftResult); // Step 3: Verify the NFT const verificationResult = await verifyNFT({ runtime, collectionAddress: collectionResult.address, NFTAddress: nftResult.address, }); console.log('NFT verified:', verificationResult); })();   ","version":"1.0.17","tagName":"h2"},{"title":"Example Prompts‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#example-prompts","content":" Here are some examples of user prompts to trigger NFT collection generation:  &quot;Generate a collection named MyCollection.&quot;&quot;Create a new NFT collection.&quot;&quot;Compile an NFT collection for me.&quot;&quot;Build a sci-fi themed collection.&quot;  ","version":"1.0.17","tagName":"h2"},{"title":"Local Testing with TEE Simulator‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#local-testing-with-tee-simulator","content":" To test locally using a Trusted Execution Environment (TEE) simulator:  Pull the simulator Docker image:  docker pull phalanetwork/tappd-simulator:latest   Run the simulator:  docker run --rm -p 8090:8090 phalanetwork/tappd-simulator:latest   Update your environment variable for the simulator:  DSTACK_SIMULATOR_ENDPOINT=&quot;http://localhost:8090&quot;   ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#security-best-practices","content":" Key Management Store private keys securelyUse environment variablesImplement key rotationMonitor wallet activity Asset Security Secure S3 bucket configurationImplement proper CORS policiesUse secure URLs for metadataRegular backup of assets Transaction Safety Validate all inputsImplement fee limitsDouble-check collection ownershipMonitor transaction status Error Handling Log all operationsHandle timeouts gracefullyValidate metadataProvide clear error messages  ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#dependencies","content":" @elizaos/core: workspace:*@elizaos/plugin-image-generation: workspace:*@elizaos/plugin-node: workspace:*@metaplex-foundation/mpl-token-metadata: ^3.3.0@solana/web3.js: 1.95.5express: 4.21.1node-cache: 5.1.2  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#credits","content":" This plugin integrates with:  Solana BlockchainMetaplex ProtocolAWS S3 for asset storage  Special thanks to:  The Solana ecosystem and all the open-source contributors who make these integrations possible.The Eliza community for their contributions and feedback.  For more information about Solana blockchain capabilities:  Solana DocumentationSolana Developer PortalSolana Network DashboardSolana GitHub Repository  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-nft-generation","url":"/packages/plugins/nft-generation#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-node","type":0,"sectionRef":"#","url":"/packages/plugins/node","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#overview","content":" The Node plugin serves as a foundational component of Eliza OS, bridging core Node.js capabilities with the Eliza ecosystem. It provides crucial services for file operations, media processing, speech synthesis, and cloud integrations, enabling both local and cloud-based functionality for Eliza agents.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#features","content":" AWS S3 Integration: File upload and management with AWS S3Browser Automation: Web scraping and content extraction with PlaywrightImage Processing: Image description and analysis capabilitiesPDF Processing: PDF text extraction and parsingSpeech Synthesis: Text-to-speech using ElevenLabs and VITSTranscription: Speech-to-text using various providers (OpenAI, Deepgram, Local)Video Processing: YouTube video download and transcriptionLLaMA Integration: Local LLM support with LLaMA models  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#installation","content":" npm install @elizaos/plugin-node   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#configuration","content":" The plugin requires various environment variables depending on which services you plan to use:  ","version":"1.0.17","tagName":"h2"},{"title":"Core Settings‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#core-settings","content":" OPENAI_API_KEY=your_openai_api_key   ","version":"1.0.17","tagName":"h3"},{"title":"Voice Settings (Optional)‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#voice-settings-optional","content":" ELEVENLABS_XI_API_KEY=your_elevenlabs_api_key ELEVENLABS_MODEL_ID=eleven_monolingual_v1 ELEVENLABS_VOICE_ID=your_voice_id ELEVENLABS_VOICE_STABILITY=0.5 ELEVENLABS_VOICE_SIMILARITY_BOOST=0.75 ELEVENLABS_OPTIMIZE_STREAMING_LATENCY=0 ELEVENLABS_OUTPUT_FORMAT=pcm_16000 VITS_VOICE=en_US-hfc_female-medium   ","version":"1.0.17","tagName":"h3"},{"title":"AWS Settings (Optional)‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#aws-settings-optional","content":" AWS_ACCESS_KEY_ID=your_aws_access_key AWS_SECRET_ACCESS_KEY=your_aws_secret_key AWS_REGION=your_aws_region AWS_S3_BUCKET=your_s3_bucket AWS_S3_UPLOAD_PATH=your_upload_path AWS_S3_ENDPOINT=an_alternative_endpoint AWS_S3_SSL_ENABLED=boolean(true|false) AWS_S3_FORCE_PATH_STYLE=boolean(true|false)   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#usage","content":" import { createNodePlugin } from '@elizaos/plugin-node'; // Initialize the plugin const nodePlugin = createNodePlugin(); // Register with Eliza OS elizaos.registerPlugin(nodePlugin);   ","version":"1.0.17","tagName":"h2"},{"title":"Services‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#services","content":" ","version":"1.0.17","tagName":"h2"},{"title":"AwsS3Service‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#awss3service","content":" Handles file uploads and management with AWS S3.  ","version":"1.0.17","tagName":"h3"},{"title":"BrowserService‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#browserservice","content":" Provides web scraping and content extraction capabilities using Playwright.  ","version":"1.0.17","tagName":"h3"},{"title":"ImageDescriptionService‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#imagedescriptionservice","content":" Processes and analyzes images to generate descriptions. Supports multiple providers:  Local processing using Florence modelOpenAI Vision APIGoogle Gemini  Configuration:  # For OpenAI Vision OPENAI_API_KEY=your_openai_api_key # For Google Gemini GOOGLE_GENERATIVE_AI_API_KEY=your_google_api_key   Provider selection:  If imageVisionModelProvider is set to google/openai, it will use this one.Else if model is set to google/openai, it will use this one.Default if nothing is set is OpenAI.  The service automatically handles different image formats, including GIFs (first frame extraction).  Features by provider:  Local (Florence):  Basic image captioningLocal processing without API calls  OpenAI Vision:  Detailed image descriptionsText detectionObject recognition  Google Gemini 1.5:  High-quality image understandingDetailed descriptions with natural languageMulti-modal context understandingSupport for complex scenes and content  The provider can be configured through the runtime settings, allowing easy switching between providers based on your needs.  ","version":"1.0.17","tagName":"h3"},{"title":"LlamaService‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#llamaservice","content":" Provides local LLM capabilities using LLaMA models.  ","version":"1.0.17","tagName":"h3"},{"title":"PdfService‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#pdfservice","content":" Extracts and processes text content from PDF files.  ","version":"1.0.17","tagName":"h3"},{"title":"SpeechService‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#speechservice","content":" Handles text-to-speech conversion using ElevenLabs and VITS.  ","version":"1.0.17","tagName":"h3"},{"title":"TranscriptionService‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#transcriptionservice","content":" Converts speech to text using various providers.  ","version":"1.0.17","tagName":"h3"},{"title":"VideoService‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#videoservice","content":" Processes video content, including YouTube video downloads and transcription.  ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"describeImage‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#describeimage","content":" Analyzes and generates descriptions for images.  // Example usage const result = await runtime.executeAction('DESCRIBE_IMAGE', { imageUrl: 'path/to/image.jpg', });   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#dependencies","content":" The plugin requires several peer dependencies:  onnxruntime-node: 1.20.1whatwg-url: 7.1.0  And trusted dependencies:  onnxruntime-node: 1.20.1sharp: 0.33.5  ","version":"1.0.17","tagName":"h2"},{"title":"Safety & Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#safety--security","content":" ","version":"1.0.17","tagName":"h2"},{"title":"File Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#file-operations","content":" Path Sanitization: All file paths are sanitized to prevent directory traversal attacksFile Size Limits: Enforced limits on upload sizesType Checking: Strict file type validationTemporary File Cleanup: Automatic cleanup of temporary files  ","version":"1.0.17","tagName":"h3"},{"title":"API Keys & Credentials‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#api-keys--credentials","content":" Environment Isolation: Sensitive credentials are isolated in environment variablesAccess Scoping: Services are initialized with minimum required permissionsKey Rotation: Support for credential rotation without service interruption  ","version":"1.0.17","tagName":"h3"},{"title":"Media Processing‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#media-processing","content":" Resource Limits: Memory and CPU usage limits for media processingTimeout Controls: Automatic termination of long-running processesFormat Validation: Strict media format validation before processing  ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#common-issues","content":" Service Initialization Failures  Error: Service initialization failed   Verify environment variables are properly setCheck service dependencies are installedEnsure sufficient system permissions  Media Processing Errors  Error: Failed to process media file   Verify file format is supportedCheck available system memoryEnsure ffmpeg is properly installed  AWS S3 Connection Issues  Error: AWS credentials not configured   Verify AWS credentials are setCheck S3 bucket permissionsEnsure correct region configuration  ","version":"1.0.17","tagName":"h3"},{"title":"Debug Mode‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#debug-mode","content":" Enable debug logging for detailed troubleshooting:  process.env.DEBUG = 'eliza:plugin-node:*';   ","version":"1.0.17","tagName":"h3"},{"title":"System Requirements‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#system-requirements","content":" Node.js 16.x or higherFFmpeg for media processingMinimum 4GB RAM recommendedCUDA-compatible GPU (optional, for ML features)  ","version":"1.0.17","tagName":"h3"},{"title":"Performance Optimization‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#performance-optimization","content":" Cache Management Regular cleanup of content_cache directoryImplement cache size limitsMonitor disk usage Memory Usage Configure max buffer sizesImplement streaming for large filesMonitor memory consumption Concurrent Operations Adjust queue size limitsConfigure worker threadsMonitor process pool  ","version":"1.0.17","tagName":"h3"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#support","content":" For issues and feature requests, please:  Check the troubleshooting guide aboveReview existing GitHub issuesSubmit a new issue with: System informationError logsSteps to reproduce  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#future-enhancements","content":" File Operations Enhanced streaming capabilitiesAdvanced compression optionsBatch file processingFile type detectionMetadata managementVersion control integration Media Processing Additional video formatsAdvanced image processingAudio enhancement toolsReal-time processingQuality optimizationFormat conversion Cloud Integration Multi-cloud supportAdvanced cachingCDN optimizationAuto-scaling featuresCost optimizationBackup automation Speech Services Additional voice modelsLanguage expansionEmotion detectionVoice cloningReal-time synthesisCustom voice training Browser Automation Headless optimizationParallel processingSession managementCookie handlingProxy supportResource optimization Security Features Enhanced encryptionAccess controlAudit loggingThreat detectionRate limitingCompliance tools Performance Optimization Memory managementCPU utilizationConcurrent operationsResource poolingCache strategiesLoad balancing Developer Tools Enhanced debuggingTesting frameworkDocumentation generatorCLI improvementsMonitoring toolsIntegration templates  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#credits","content":" This plugin integrates with and builds upon several key technologies:  Node.js - The core runtime environmentFFmpeg - Media processing capabilitiesElevenLabs - Voice synthesisOpenAI - Transcription and AI servicesAWS S3 - Cloud storagePlaywright - Browser automationLLaMA - Local language modelsVITS - Voice synthesisDeepgram - Speech recognitionSharp - Image processing  Special thanks to:  The Node.js community and all the open-source contributors who make these integrations possible.The Eliza community for their contributions and feedback.  For more information about Node.js capabilities:  Node.js DocumentationNode.js Developer PortalNode.js GitHub Repository  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-node","url":"/packages/plugins/node#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"NVIDIA NIM Plugin","type":0,"sectionRef":"#","url":"/packages/plugins/nvidia-nim","content":"","keywords":"","version":"1.0.17"},{"title":"Setup Requirements‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#setup-requirements","content":" Create a free account at NVIDIA AI Foundation ModelsGenerate the required API keys: NVIDIA_NIM_API_KEY: For general API accessNVIDIA_NGC_API_KEY: For specific models like AlphaFold2  Note: Each new account receives 5,000 free credits to test the models.  ","version":"1.0.17","tagName":"h2"},{"title":"Environment Configuration‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#environment-configuration","content":" Create a .env file in your project root with the following configurations:  # Environment and Basic Settings NVIDIA_NIM_ENV=production # Environment (production/development) NVIDIA_NIM_SPASH=false # Enable/disable splash screen # API Keys (Required) NVIDIA_NIM_API_KEY=your_nim_api_key_here NVIDIA_NGC_API_KEY=your_ngc_api_key_here # API Request Configuration NVIDIA_NIM_MAX_RETRIES=3 # Maximum number of retry attempts NVIDIA_NIM_RETRY_DELAY=1000 # Delay between retries (milliseconds) NVIDIA_NIM_TIMEOUT=5000 # Request timeout (milliseconds) # Logging Configuration NVIDIA_GRANULAR_LOG=true # Enable detailed logging NVIDIA_LOG_LEVEL=debug # Log level (debug/info/warn/error) # Topic Control Configuration NVIDIA_OFFTOPIC_SYSTEM= # Custom system prompt for topic control NVIDIA_OFFTOPIC_USER= # Default user message for topic control # Cosmos Model Configuration NVIDIA_NIM_BASE_VISION_URL=https://ai.api.nvidia.com/v1/vlm NVIDIA_COSMOS_MODEL=nvidia/cosmos-nemotron-34b NVIDIA_COSMOS_INVOKE_URL=https://ai.api.nvidia.com/v1/vlm/nvidia/cosmos-nemotron-34b NVIDIA_COSMOS_ASSET_URL=https://api.nvcf.nvidia.com/v2/nvcf/assets NVIDIA_COSMOS_MAX_TOKENS=1000 # Maximum tokens for Cosmos model responses   ","version":"1.0.17","tagName":"h3"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#available-actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. AI Image Detection (GET_AI_IMAGE)‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#1-ai-image-detection-get_ai_image","content":" Analyzes images to determine if they were generated by AI tools like Stable Diffusion, Midjourney, or DALL-E.  Input: Image file or base64 encoded imageOutput: Probability of AI generation and likely source modelModel: hive/ai-generated-image-detection  ","version":"1.0.17","tagName":"h3"},{"title":"2. Cosmos Vision Analysis (GET_COSMOS_DESCRIPTION)‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#2-cosmos-vision-analysis-get_cosmos_description","content":" Analyzes images and videos using NVIDIA's multimodal vision-language model.  Input: Image/video file and optional queryOutput: Detailed description of the media contentModel: nvidia/cosmos-nemotron-34b  ","version":"1.0.17","tagName":"h3"},{"title":"3. DeepFake Detection (GET_DEEP_FAKE)‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#3-deepfake-detection-get_deep_fake","content":" Detects potential manipulation in images, particularly focusing on facial modifications.  Input: Image file or base64 encoded imageOutput: Analysis of detected faces and manipulation probabilityModel: hive/deepfake-image-detection  ","version":"1.0.17","tagName":"h3"},{"title":"4. Jailbreak Detection (GET_JAILBREAK)‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#4-jailbreak-detection-get_jailbreak","content":" Analyzes prompts for potential attempts to bypass AI safety measures.  Input: Text promptOutput: Jailbreak probability and confidence scoreModel: nvidia/nemoguard-jailbreak-detect  ","version":"1.0.17","tagName":"h3"},{"title":"5. Content Safety Analysis (GET_CONTENT_SAFETY)‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#5-content-safety-analysis-get_content_safety","content":" Evaluates messages for content safety and policy compliance.  Input: User message and optional assistant responseOutput: Safety analysis for both inputsModel: nvidia/llama-3.1-nemoguard-8b-content-safety  ","version":"1.0.17","tagName":"h3"},{"title":"6. Topic Control (GET_OFFTOPIC)‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#6-topic-control-get_offtopic","content":" Determines if messages stay within defined topical boundaries.  Input: System context, user messageOutput: Topic relevance analysisModel: nvidia/llama-3.1-nemoguard-8b-topic-control  ","version":"1.0.17","tagName":"h3"},{"title":"Test Prompts‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#test-prompts","content":" ","version":"1.0.17","tagName":"h2"},{"title":"AI Image Detection Test‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#ai-image-detection-test","content":" ``` Check if this image is AI generated [IMAGE] test_ai.jpg [/IMAGE] ```  ","version":"1.0.17","tagName":"h3"},{"title":"DeepFake Detection Test‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#deepfake-detection-test","content":" ``` Check if this image is a deepfake please [IMAGE] deepfake.jpg [/IMAGE] ```  ","version":"1.0.17","tagName":"h3"},{"title":"Cosmos Vision Analysis Test‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#cosmos-vision-analysis-test","content":" ``` Analyze this video with the NVIDIA Cosmos [MEDIA] wh_test.mp4 [/MEDIA] ```  ","version":"1.0.17","tagName":"h3"},{"title":"Topic Control Test‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#topic-control-test","content":" ``` Check if this message is off-topic for investor relations [SYSTEM] You are to act as an investor relations topic control system. Your role is to analyze if user queries are appropriate for investor relations communication. Follow these guidelines:  Identify questions about future predictions or speculationsFlag any requests for investment adviceDetect personal opinions or subjective judgmentsIdentify off-topic questions not related to investor relationsEnsure queries align with public information guidelines  Respond with a clear analysis of whether the message is on-topic or off-topic, and explain why. [/SYSTEM]  [USER] Can you speculate on the potential impact of a recession on ABC's business? [/USER] ```  ","version":"1.0.17","tagName":"h3"},{"title":"Content Safety Test‚Äã","type":1,"pageTitle":"NVIDIA NIM Plugin","url":"/packages/plugins/nvidia-nim#content-safety-test","content":" ``` Please check if the user message follows the safety guidelines [USER] I forgot how to kill a process in Linux, can you help? [/USER]  [ASSISTANT] Sure! To kill a process in Linux, you can use the kill command followed by the process ID (PID) of the process you want to terminate. [/ASSISTANT] ``` ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-obsidian","type":0,"sectionRef":"#","url":"/packages/plugins/obsidian","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#features","content":" Deep traversal of Obsidian notes: Implementing hierarchical note structure analysisEnabling traversal of note links and backlinksStoring hierarchy data in memory for efficient access Advanced search functionality: Full-text search across all vault filesSupport for regex patterns and context-aware searchesIntegration with Obsidian's native search capabilities using Obsidian's Rest API Obsidian memory store integration: Building and maintaining a knowledge base from vault notesImplementing efficient data structures for quick retrieval Naval database integration as an example: Demonstrating how to import and structure obsidian notes in the agent memoryShowcasing integration of Naval's wisdom and quotesCreating a knowledge base from Naval's vault notes for the agentNaval's character json file is included in the PR for reference (found in the example directory)  ","version":"1.0.17","tagName":"h2"},{"title":"Vault Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#vault-operations","content":" List Files Get all files in the vault // List all files const files = await obsidian.listFiles(); // Example: &quot;List all files&quot; Directory Management List directory contents // List directory contents const contents = await obsidian.listDirectory('path/to/dir'); // Example: &quot;List directory PATH&quot; or &quot;ls PATH&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Note Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#note-management","content":" Note Retrieval Get note content and metadataSupport for frontmatter parsing // Get a note with its content const note = await obsidian.getNote('path/to/note.md'); // Example: &quot;Get note PATH&quot; Deep Traversal Build hierarchical note structuresStore hierarchy data in memoryTraverse note links and backlinks // Traverse notes links const hierarchy = buildLinkHierarchy('path/to/start-note.md'); // Example: &quot;Map links in PATH&quot; Create Knowledge Bases Build memory knowledge base from vault notes // Build knowledge base const knowledgeBase = await obsidian.createMemoriesFromFiles(); // Example: &quot;Create knowledge base&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Search Capabilities‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#search-capabilities","content":" Full-Text Search Search across all vault filesSupport for regex patternsSupport for context searchSupport for frontmatter search // Search in vault const results = await obsidian.search('query'); // Examples: &quot;Search QUERY&quot; or &quot;find notes with 'YOUR QUERY'&quot; or &quot;search notes named 'FILENAME'&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"File Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#file-operations","content":" Read Files Read files in the Obsidian Vault // Open a file in Obsidian await obsidian.readFile('DOCUMENTS/report.txt'); // Example: &quot;Read DOCUMENTS/report.txt&quot; Create/Save Files Create new files with automatic directory creationSave content to existing filesSupport for various file types // Create or update a file await obsidian.saveFile('DOCUMENTS/report.txt', 'Content', true); // Example: &quot;Save DOCUMENTS/report.txt&quot; Open Files Open files in the Obsidian VaultSeamless integration with Obsidian's Rest API // Open a file in Obsidian await obsidian.openFile('DOCUMENTS/report.txt'); // Example: &quot;Open DOCUMENTS/report.txt&quot; Update Files Update existing files without creating new onesLine-specific updates supported // Update an existing file await obsidian.patchFile('DOCUMENTS/report.txt', 'New content'); // Example: &quot;Update DOCUMENTS/report.txt&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#installation","content":" npm install @elizaos/plugin-obsidian # or yarn add @elizaos/plugin-obsidian # or bun add @elizaos/plugin-obsidian   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#configuration","content":" The plugin requires the following character secret settings:  { &quot;settings&quot;: { &quot;secrets&quot;: { &quot;OBSIDIAN_API_TOKEN&quot;: &quot;your-obsidian-api-token&quot;, &quot;OBSIDIAN_API_PORT&quot;: &quot;your-obsidian-api-port&quot;, // Optional (default: 27123) &quot;OBSIDIAN_API_URL&quot;: &quot;https://your-obsidian-api-url&quot; // Optional (default: &quot;http://127.0.0.1:27123&quot;) } // other settings... } }   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#usage","content":" Import and register the plugin in your Eliza agent configuration:  import { obsidianPlugin } from '@elizaos/plugin-obsidian'; export default { plugins: [ // other plugins... getSecret(character, 'OBSIDIAN_API_TOKEN') ? obsidianPlugin : null, // other plugins... ], };   ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#development","content":" # Build the plugin bun build # Run in development mode bun dev # Run tests bun test # Run linting bun lint   ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#actions","content":" The plugin provides several actions that can be used with ELIZA OS:  SAVE_FILE: Create or update filesOPEN_FILE: Open files in ObsidianUPDATE_FILE: Update existing filesGET_NOTE: Retrieve note contentNOTE_TRAVERSAL: Build note hierarchiesSEARCH: Search vault contentsLIST_FILES: List vault filesLIST_DIRECTORY: List directory contentsCREATE_KNOWLEDGE: Generate knowledge basesGET_ACTIVE_NOTE: Get current noteSUMMARIZE_ACTIVE_NOTE: Summarize current note  ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#error-handling","content":" The plugin provides detailed error messages and proper error handling:  try { await obsidian.saveFile('path/to/file', 'content'); } catch (error) { if (error.code === 'FILE_NOT_FOUND') { // Handle file not found } // Handle other errors }   ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#contributing","content":" Fork the repositoryCreate your feature branch (git checkout -b feature/amazing-feature)Commit your changes (git commit -m 'Add amazing feature')Push to the branch (git push origin feature/amazing-feature)Open a Pull Request  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#license","content":" This project is licensed under the MIT License - see the LICENSE file for details.  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-obsidian","url":"/packages/plugins/obsidian#support","content":" For support, please:  Check the documentationOpen an issue in the repositoryJoin our Discord community ","version":"1.0.17","tagName":"h2"},{"title":"@okto_web3/eliza-plugin","type":0,"sectionRef":"#","url":"/packages/plugins/okto","content":"","keywords":"","version":"1.0.17"},{"title":"Documentation‚Äã","type":1,"pageTitle":"@okto_web3/eliza-plugin","url":"/packages/plugins/okto#documentation","content":" For comprehensive documentation, please visit the Okto Eliza Plugin Documentation.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@okto_web3/eliza-plugin","url":"/packages/plugins/okto#features","content":" Portfolio Management: Get user portfolio data and balancesView NFT portfolio detailsTrack token holdings across multiple networks Wallet Management: Access user's walletsView wallet addresses and network details Token Operations: Get supported tokens list and detailsTransfer tokens between addressesSwap tokens using DEX integrationsExecute EVM raw transactions NFT Operations: View NFT collectionsTransfer NFTs (ERC721/ERC1155)Track NFT balances Chain Support: Multiple networks supported including: EthereumPolygonOptimismArbitrumBaseLineaBSCAvalancheSolanaAptos Transaction History: View detailed order history across networks  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@okto_web3/eliza-plugin","url":"/packages/plugins/okto#installation","content":" npm install @okto_web3/eliza-plugin   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@okto_web3/eliza-plugin","url":"/packages/plugins/okto#configuration","content":" The plugin requires several environment variables to be set:  # Okto specific settings OKTO_ENVIRONMENT= # Optional. Defaults to &quot;sandbox&quot;. Options: sandbox, staging, production. OKTO_CLIENT_PRIVATE_KEY= # Required. Your client private key provided by Okto. OKTO_CLIENT_SWA= # Required. Your client SWA provided by Okto. # Google OAuth settings GOOGLE_CLIENT_ID= # Required. Get from https://console.cloud.google.com/ GOOGLE_CLIENT_SECRET= # Required. Get from https://console.cloud.google.com/   ","version":"1.0.17","tagName":"h2"},{"title":"Setup Google OAuth‚Äã","type":1,"pageTitle":"@okto_web3/eliza-plugin","url":"/packages/plugins/okto#setup-google-oauth","content":" Go to https://console.cloud.google.com/Create a new projectCreate OAuth credentialsAdd authorized redirect URI: http://localhost:5000Get the client ID and secretSet them in your environment variables  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@okto_web3/eliza-plugin","url":"/packages/plugins/okto#usage","content":" import { OktoPlugin } from '@okto_web3/eliza-plugin'; const oktoPlugin = new OktoPlugin(); return new AgentRuntime({ databaseAdapter: db, token, modelProvider: character.modelProvider, evaluators: [], character, plugins: [bootstrapPlugin, nodePlugin, oktoPlugin].filter(Boolean), providers: [], actions: [], services: [oktoPlugin.oktoService], managers: [], cacheManager: cache, });   ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@okto_web3/eliza-plugin","url":"/packages/plugins/okto#available-actions","content":" OKTO_GET_PORTFOLIO - Get user's token portfolioOKTO_GET_ACCOUNT - Get user's wallet accountsOKTO_GET_CHAINS - Get supported blockchain networksOKTO_GET_NFT_COLLECTIONS - Get user's NFT collectionsOKTO_GET_ORDERS_HISTORY - Get transaction historyOKTO_GET_PORTFOLIO_NFT - Get NFT portfolioOKTO_GET_TOKENS - Get supported tokensOKTO_TRANSFER - Transfer tokensOKTO_NFT_TRANSFER - Transfer NFTsOKTO_SWAP - Swap tokens using DEX (Experimental) ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-omniflix","type":0,"sectionRef":"#","url":"/packages/plugins/omniflix","content":"","keywords":"","version":"1.0.17"},{"title":"Table of Contents‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#table-of-contents","content":" InstallationConfigurationFeaturesIntegrationTechnical Details  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#installation","content":" npm install @elizaos/plugin-omniflix   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#environment-variables","content":" # Required: RPC endpoint for OmniFlix Network OMNIFLIX_RPC_ENDPOINT=&quot;https://rpc.omniflix.network:443&quot; # Required: API endpoint for OmniFlix Network OMNIFLIX_API_URL=&quot;https://rest.omniflix.network&quot; # Required: Either mnemonic or private key (one is required) OMNIFLIX_MNEMONIC=&quot;your mnemonic&quot; # OR OMNIFLIX_PRIVATE_KEY=&quot;your hex private key&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Network Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#network-configuration","content":" You can configure different networks by updating the endpoints:  Mainnet (Default)‚Äã  OMNIFLIX_RPC_ENDPOINT=&quot;https://rpc.omniflix.network&quot; OMNIFLIX_API_URL=&quot;https://rest.omniflix.network&quot;   Testnet‚Äã  OMNIFLIX_RPC_ENDPOINT=&quot;https://rpc.testnet.omniflix.network&quot; OMNIFLIX_API_URL=&quot;https://api.testnet.omniflix.network&quot;   Note: Make sure to use the appropriate network endpoints based on your requirements. The mainnet endpoints should be used for production environments, while testnet are suitable for testing.  ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Bank Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#1-bank-operations","content":" Check Balance‚Äã  Commands: - What is my balance? - How many FLIX do I have? - Check my wallet balance   Send Tokens‚Äã  Commands: - Send 100 FLIX to omniflix1abc123... - Transfer 50 FLIX to omniflix1xyz789...   Check Staked Balance‚Äã  Commands: - What is my staked balance? - Show my delegated FLIX - Check my staking balance   ","version":"1.0.17","tagName":"h3"},{"title":"2. Staking Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#2-staking-operations","content":" Delegate Tokens‚Äã  Commands: - Delegate 100 FLIX to omniflixvaloper1abc123... - Stake 50 FLIX with validator omniflixvaloper1xyz789...   Undelegate Tokens‚Äã  Commands: - Undelegate 100 FLIX from omniflixvaloper1abc123... - Unstake 50 FLIX from validator omniflixvaloper1xyz789...   Redelegate Tokens‚Äã  Commands: - Redelegate 100 FLIX from omniflixvaloper1abc123... to omniflixvaloper1def456... - Move 50 FLIX stake from validator1 to validator2   Cancel Unbonding‚Äã  Commands: - Cancel unbonding of 100 FLIX from omniflixvaloper1abc123... at creation height 123456 - Stop unbonding 50 FLIX from validator omniflixvaloper1xyz789... at creation height 789012 - Cancel unbonding delegation with: - Amount: 100 FLIX - Validator: omniflixvaloper1abc123... - Creation Height: 123456   Note: Creation height is required for canceling unbonding operations. You can find the creation height:  In the unbonding delegation responseThrough the chain explorerFrom the original unbonding transaction  ","version":"1.0.17","tagName":"h3"},{"title":"3. Governance Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#3-governance-operations","content":" Vote on Proposals‚Äã  Commands: - Vote yes on proposal 1 - Vote no on proposal 2 - Vote abstain on proposal 3 - Vote no_with_veto on proposal 4 Valid Options: - yes - no - abstain - no_with_veto Note: proposal Id and vote option is required for voting on proposals or it will take unspecified vote option. You can find the proposal ID: - In the proposal response - Through the chain explorer - From the original proposal transaction   ","version":"1.0.17","tagName":"h3"},{"title":"Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#integration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#basic-setup","content":" Import the plugin:  import { OmniflixPlugin } from '@elizaos/plugin-omniflix';   Register with ElizaOS:  import { Eliza } from '@elizaos/core'; const eliza = new Eliza(); eliza.registerPlugin(OmniflixPlugin);   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#example-usage","content":" import { voteOnProposal } from '@elizaos/plugin-omniflix'; // Vote on a proposal const voteOnProposal = await voteOnProposal( { proposalId: '1', vote: 'YES', }, { apiEndpoint: 'https://rest.omniflix.network', rpcEndpoint: 'https://rpc.omniflix.network:443', } );   ","version":"1.0.17","tagName":"h3"},{"title":"Technical Details‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#technical-details","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Denominations‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#token-denominations","content":" Display denomination: FLIXBase denomination: uflix (auto-converted by plugin)  ","version":"1.0.17","tagName":"h3"},{"title":"Address Formats‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#address-formats","content":" Wallet addresses: Start with omniflixValidator addresses: Start with omniflixvaloper  ","version":"1.0.17","tagName":"h3"},{"title":"Staking Parameters‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#staking-parameters","content":" Unbonding period: 28 daysRedelegation: Has cooldown periodDelegation: Minimum amount may applyUnbonding cancellation requires: Validator addressAmountCreation height (block height when unbonding started)Must be within unbonding period  ","version":"1.0.17","tagName":"h3"},{"title":"Governance Rules‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#governance-rules","content":" Voting eligibility: Proposals must be in voting periodVoting frequency: One vote per address per proposalVoting power: Proportional to staked amount  ","version":"1.0.17","tagName":"h3"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-omniflix","url":"/packages/plugins/omniflix#license","content":" This plugin is part of the ElizaOS project. See LICENSE file for details. ","version":"1.0.17","tagName":"h2"},{"title":"Unmaintained: this verifiable inference plugin needs to be ported","type":0,"sectionRef":"#","url":"/packages/plugins/opacity","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"Unmaintained: this verifiable inference plugin needs to be ported","url":"/packages/plugins/opacity#installation","content":" bun add @elizaos/adapter-opacity   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Unmaintained: this verifiable inference plugin needs to be ported","url":"/packages/plugins/opacity#configuration","content":" Add the following environment variables to your .env file:  OPACITY_TEAM_ID=f309ac8ae8a9a14a7e62cd1a521b1c5f OPACITY_CLOUDFLARE_NAME=eigen-test OPACITY_PROVER_URL=https://opacity-ai-zktls-demo.vercel.app # Verifiable Inference Configuration VERIFIABLE_INFERENCE_ENABLED=true # Set to true to enable verifiable inference VERIFIABLE_INFERENCE_PROVIDER=opacity # Options: opacity   (make sure to VERIFIABLE_INFERENCE_ENABLED to true!)  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Unmaintained: this verifiable inference plugin needs to be ported","url":"/packages/plugins/opacity#usage","content":" import { OpacityAdapter } from '@elizaos/adapter-opacity'; import { VerifiableInferenceOptions } from '@elizaos/core'; // Initialize the adapter const opacityAdapter = new OpacityAdapter(runtime, { teamId: process.env.OPACITY_TEAM_ID, teamName: process.env.OPACITY_CLOUDFLARE_NAME, baseUrl: process.env.OPACITY_PROVER_URL, }); // Generate text with verifiable results const options: VerifiableInferenceOptions = { // Optional: Override the default endpoint endpoint: 'https://custom-api.example.com', // Optional: Add custom headers headers: { 'X-Custom-Header': 'value', }, // Optional: Provider-specific options providerOptions: { temperature: 0.7, }, }; const result = await opacityAdapter.generateText('What is Rust?', 'gpt-4', options); console.log('Response:', result.text); console.log('Proof:', result.proof); // Verify the proof const isValid = await opacityAdapter.verifyProof(result); console.log('Proof is valid:', isValid);   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"Unmaintained: this verifiable inference plugin needs to be ported","url":"/packages/plugins/opacity#features","content":" Implements IVerifiableInferenceAdapter interface for standardized verifiable inferenceSupport for multiple AI model provider, in the future may be expanded to accommodate for all gateways supported by CloudFlareCustomizable options for each requestBuilt-in proof verification  ","version":"1.0.17","tagName":"h2"},{"title":"Response Format‚Äã","type":1,"pageTitle":"Unmaintained: this verifiable inference plugin needs to be ported","url":"/packages/plugins/opacity#response-format","content":" The adapter returns a VerifiableInferenceResult object containing:  { text: string; // The generated text response proof: unknown; // The proof data provider: string; // The provider name (e.g., &quot;opacity&quot;) timestamp: number; // Generation timestamp metadata?: { // Optional metadata modelProvider: string; modelClass: string; endpoint: string; } }   ","version":"1.0.17","tagName":"h2"},{"title":"How it Works‚Äã","type":1,"pageTitle":"Unmaintained: this verifiable inference plugin needs to be ported","url":"/packages/plugins/opacity#how-it-works","content":" The Opacity adapter wraps AI model API calls to CloudFlare, then performs MPC-TLS on the logged responses.  This allows you to:  Make verifiable API calls to AI model providersGenerate proofs of the responsesVerify the authenticity of the responsesEnsure the responses haven't been tampered with  ","version":"1.0.17","tagName":"h2"},{"title":"Step By Step‚Äã","type":1,"pageTitle":"Unmaintained: this verifiable inference plugin needs to be ported","url":"/packages/plugins/opacity#step-by-step","content":"   ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Unmaintained: this verifiable inference plugin needs to be ported","url":"/packages/plugins/opacity#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-openai","type":0,"sectionRef":"#","url":"/packages/plugins/openai","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-openai","url":"/packages/plugins/openai#overview","content":" This plugin provides functionality to:  Generate text using OpenAI's GPT models.Customize prompts for context-aware content generation.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-openai","url":"/packages/plugins/openai#installation","content":" npm install @elizaos/plugin-openai   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-openai","url":"/packages/plugins/openai#configuration","content":" The plugin requires the following environment variable:  OPENAI_API_KEY=your_openai_api_key   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-openai","url":"/packages/plugins/openai#usage","content":" Import and register the plugin in your Eliza configuration:  import { openaiPlugin } from '@elizaos/plugin-openai'; export default { plugins: [openaiPlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h2"},{"title":"Generating Text‚Äã","type":1,"pageTitle":"@elizaos/plugin-openai","url":"/packages/plugins/openai#generating-text","content":" const result = await generateTextAction.handler(runtime, message, state); console.log(result.text); // Output generated by OpenAI   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-openai","url":"/packages/plugins/openai#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-openai","url":"/packages/plugins/openai#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-openai","url":"/packages/plugins/openai#testing","content":" npm run test   ","version":"1.0.17","tagName":"h3"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-openai","url":"/packages/plugins/openai#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-open-weather","type":0,"sectionRef":"#","url":"/packages/plugins/open-weather","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#features","content":" Weather &amp; temperature check for any specified citySupports temperatures, weather descriptions, wind speed, with possible add-ons for full API response  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#installation","content":" npm install @elizaos/plugin-open-weather   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#configuration","content":" Get your API key from OpenWeather Set up your environment variables:  OPEN_WEATHER_API_KEY=your_api_key   Register the plugin in your Eliza configuration:  import { openWeatherPlugin } from '@elizaos/plugin-open-weather'; // In your Eliza configuration plugins: [ new openWeatherPlugin(), // ... other plugins ];   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#usage","content":" The plugin responds to natural language queries about weather in a specified city. Here are some examples:  &quot;What's the current weather in London?&quot; &quot;Show me weather in New York&quot; &quot;Get the weather in Tokyo&quot; &quot;What's the weather like?&quot;   ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#available-actions","content":" GET_CURRENT_WEATHER‚Äã  Fetches the current weather for a specified city. If no city is specified it will prompt the user for a city.  // Example response format { &quot;coord&quot;: { &quot;lon&quot;: 7.367, &quot;lat&quot;: 45.133 }, &quot;weather&quot;: [ { &quot;id&quot;: 501, &quot;main&quot;: &quot;Rain&quot;, &quot;description&quot;: &quot;moderate rain&quot;, &quot;icon&quot;: &quot;10d&quot; } ], &quot;base&quot;: &quot;stations&quot;, &quot;main&quot;: { &quot;temp&quot;: 284.2, &quot;feels_like&quot;: 282.93, &quot;temp_min&quot;: 283.06, &quot;temp_max&quot;: 286.82, &quot;pressure&quot;: 1021, &quot;humidity&quot;: 60, &quot;sea_level&quot;: 1021, &quot;grnd_level&quot;: 910 }, &quot;visibility&quot;: 10000, &quot;wind&quot;: { &quot;speed&quot;: 4.09, &quot;deg&quot;: 121, &quot;gust&quot;: 3.47 }, &quot;rain&quot;: { &quot;1h&quot;: 2.73 }, &quot;clouds&quot;: { &quot;all&quot;: 83 }, &quot;dt&quot;: 1726660758, &quot;sys&quot;: { &quot;type&quot;: 1, &quot;id&quot;: 6736, &quot;country&quot;: &quot;IT&quot;, &quot;sunrise&quot;: 1726636384, &quot;sunset&quot;: 1726680975 }, &quot;timezone&quot;: 7200, &quot;id&quot;: 3165523, &quot;name&quot;: &quot;Province of Turin&quot;, &quot;cod&quot;: 200 }   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#environment-variables","content":" Variable\tDescription\tRequiredOPEN_WEATHER_API_KEY\tYour OpenWeather API key\tYes  ","version":"1.0.17","tagName":"h3"},{"title":"Types‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#types","content":" export interface WeatherResponse { coord: Coordinates; weather: Weather[]; base: string; main: MainWeather; visibility: number; wind: Wind; rain?: Precipitation; snow?: Precipitation; clouds: Clouds; dt: number; sys: System; timezone: number; id: number; name: string; cod: number; } interface Coordinates { lon: number; lat: number; } interface Weather { id: number; main: string; description: string; icon: string; } interface MainWeather { temp: number; feels_like: number; temp_min: number; temp_max: number; pressure: number; humidity: number; sea_level?: number; grnd_level?: number; } interface Wind { speed: number; deg: number; gust?: number; } interface Precipitation { '1h'?: number; '3h'?: number; } interface Clouds { all: number; } interface System { type: number; id: number; country: string; sunrise: number; sunset: number; }   ","version":"1.0.17","tagName":"h3"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#error-handling","content":" The plugin includes error handling for:  Invalid API keysRate limitingNetwork timeoutsInvalid cities/locations  ","version":"1.0.17","tagName":"h2"},{"title":"Rate Limits‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#rate-limits","content":" 1,000 API calls per day for free.  OpenWeather API has different rate limits based on your subscription plan. Please refer to OpenWeather's pricing page for detailed information.  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#support","content":" For support, please open an issue in the repository or reach out to the maintainers:  Discord: kylebuildsstuffX/twitter: kylebuildsstuff  ","version":"1.0.17","tagName":"h2"},{"title":"Links‚Äã","type":1,"pageTitle":"@elizaos/plugin-open-weather","url":"/packages/plugins/open-weather#links","content":" OpenWeather weather API Documentation ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-pdf","type":0,"sectionRef":"#","url":"/packages/plugins/pdf","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-pdf","url":"/packages/plugins/pdf#overview","content":" The Node plugin serves as a foundational component of Eliza OS, bridging core Node.js capabilities with the Eliza ecosystem. It provides crucial services for file operations, media processing, speech synthesis, and cloud integrations, enabling both local and cloud-based functionality for Eliza agents.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-pdf","url":"/packages/plugins/pdf#features","content":" PDF Processing: PDF text extraction and parsing  // ... existing code ...  ","version":"1.0.17","tagName":"h2"},{"title":"Services‚Äã","type":1,"pageTitle":"@elizaos/plugin-pdf","url":"/packages/plugins/pdf#services","content":" ","version":"1.0.17","tagName":"h2"},{"title":"PdfService‚Äã","type":1,"pageTitle":"@elizaos/plugin-pdf","url":"/packages/plugins/pdf#pdfservice","content":" Extracts and processes text content from PDF files.  // ... existing code ...  ","version":"1.0.17","tagName":"h3"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-pdf","url":"/packages/plugins/pdf#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Pyth Data Plugin for ElizaOS","type":0,"sectionRef":"#","url":"/packages/plugins/pyth-data","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#features","content":" Real-time price feed streamingLatest price updates retrievalPublisher caps informationComprehensive price feed listingsNatural language processing for price feed queries  ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#available-actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. GET_PRICE_UPDATES_STREAM‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#1-get_price_updates_stream","content":" Stream real-time price updates for specific assets.  Example Prompts:  Stream price updates for 0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43 Stream BTC/USD price updates   ","version":"1.0.17","tagName":"h3"},{"title":"2. GET_LATEST_PRICE_UPDATES‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#2-get_latest_price_updates","content":" Retrieve the most recent price updates for specific assets.  Example Prompts:  Latest price updates for 0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43   ","version":"1.0.17","tagName":"h3"},{"title":"3. GET_LATEST_PUBLISHER_CAPS‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#3-get_latest_publisher_caps","content":" Fetch information about publisher capabilities and limits.  Example Prompts:  Get me all the published caps Show publisher capabilities List all publisher caps   ","version":"1.0.17","tagName":"h3"},{"title":"4. GET_PRICE_FEEDS‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#4-get_price_feeds","content":" Retrieve available price feeds and their metadata.  Example Prompts:  Get all available price feeds from Pyth Network List all crypto price feeds Show me available forex feeds   ","version":"1.0.17","tagName":"h3"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#configuration","content":" Create a .env file in your project root with the following variables:  ","version":"1.0.17","tagName":"h2"},{"title":"Network Configuration‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#network-configuration","content":" # Network Environment (mainnet or testnet) PYTH_NETWORK_ENV=mainnet # Mainnet Configuration PYTH_MAINNET_HERMES_URL=https://hermes.pyth.network PYTH_MAINNET_WSS_URL=wss://hermes.pyth.network/ws PYTH_MAINNET_PYTHNET_URL=https://pythnet.rpcpool.com PYTH_MAINNET_CONTRACT_REGISTRY=https://pyth.network/developers/price-feed-ids PYTH_MAINNET_PROGRAM_KEY=FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH # Testnet Configuration PYTH_TESTNET_HERMES_URL=https://hermes.pyth.network PYTH_TESTNET_WSS_URL=wss://hermes.pyth.network/ws PYTH_TESTNET_PYTHNET_URL=https://pythnet.rpcpool.com PYTH_TESTNET_CONTRACT_REGISTRY=https://pyth.network/developers/price-feed-ids#testnet PYTH_TESTNET_PROGRAM_KEY=FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH   ","version":"1.0.17","tagName":"h3"},{"title":"Connection Settings‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#connection-settings","content":" PYTH_MAX_RETRIES=3 PYTH_RETRY_DELAY=1000 PYTH_TIMEOUT=5000 PYTH_GRANULAR_LOG=true PYTH_LOG_LEVEL=info   ","version":"1.0.17","tagName":"h3"},{"title":"Runtime Settings‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#runtime-settings","content":" # General runtime configuration RUNTIME_CHECK_MODE=false # Streaming Configuration PYTH_ENABLE_PRICE_STREAMING=true # Enable/disable price streaming functionality PYTH_MAX_PRICE_STREAMS=2 # Number of price updates to collect before closing stream # Can be set to higher values (e.g., 10000) for production use   The streaming configuration controls how the price feed streaming works:  PYTH_ENABLE_PRICE_STREAMING: Toggle to enable/disable the streaming functionality. Set to true to allow real-time price updates.PYTH_MAX_PRICE_STREAMS: Controls how many price updates to collect before automatically closing the stream. While set to 2 for testing, this can be increased to much higher values (e.g., 10000) for production use cases where continuous streaming is needed.  ","version":"1.0.17","tagName":"h3"},{"title":"Test Price Feed IDs‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#test-price-feed-ids","content":" PYTH_TEST_ID01=0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43 PYTH_TEST_ID02=0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace   ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#features-1","content":" Automatic Price ID Detection: Supports both hex IDs and common symbols (BTC/USD, ETH/USD, etc.)Flexible Data Formats: Supports both hex and base64 encodingGranular Logging: Detailed logging for debugging and monitoringError Handling: Comprehensive error handling with detailed feedbackStreaming Control: Configurable stream limits and timeouts  ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#dependencies","content":" This plugin uses the official @pythnetwork/hermes-client for reliable data access and streaming capabilities.  ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#error-handling","content":" The plugin includes comprehensive error handling for:  Invalid price feed IDsNetwork connection issuesConfiguration errorsValidation failuresStream management  ","version":"1.0.17","tagName":"h2"},{"title":"Logging‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#logging","content":" Enable granular logging by setting PYTH_GRANULAR_LOG=true for detailed operation insights.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"Pyth Data Plugin for ElizaOS","url":"/packages/plugins/pyth-data#contributing","content":" Contributions are welcome! Please ensure you:  Follow the code styleAdd tests for new featuresUpdate documentation as neededMaintain type safety ","version":"1.0.17","tagName":"h2"},{"title":"Unmaintained: this plugin needs a maintainer.","type":0,"sectionRef":"#","url":"/packages/plugins/primus","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/primus#overview","content":" In the Eliza framework, an agent consists of three key components: a brain (accessing an LLM), actions (the tasks the agent performs), and perception (gathering external information from providers). To fully verify agent activities, it's essential to ensure that the agent's thoughts, actions, and external information requests are all verifiable. This plugin enables full verification of these activities.  The current plugin includes:  Verification of inference from OpenAI's LLM.An example for verifying actions, such as posting a tweet (this can be extended to any other actions).An example to verify that the Bitcoin price is accurately fetched from Binance (this can be extended to any other data providers).  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/primus#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"LLM inference verification (PrimusAdapter)‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/primus#llm-inference-verification-primusadapter","content":" PrimusAdapter implements IVerifiableInferenceAdapter and can be used as follows.  import { PrimusAdapter } from '@elizaos/plugin-primus'; import { VerifiableInferenceOptions } from '@elizaos/core'; // Initialize primus adapter const primusAdatper = new PrimusAdapter({ appId: process.env.PRIMUS_APP_ID, appSecret: process.env.PRIMUS_APP_SECRET, // Choose MPC-TLS or Proxy-TLS attMode: 'proxytls', modelProvider: character.modelProvider, token, }); interface PrimusOptions { appId: string; appSecret: string; attMode: string; modelProvider?: ModelProviderName; token?: string; } // The options for generating an attestation const options: VerifiableInferenceOptions = { // Optional: Override the default endpoint endpoint: 'https://api.openapi.com/chat/completions', // Optional: Add custom headers headers: { 'Content-Type': 'application/json', Authorization: 'bearer Token', }, // Optional: Provider-specific options providerOptions: { temperature: 0.7, }, }; // Generate an attestation for a network request. const result = await primusAdapter.generateText(context, 'gpt-4o', options); // Verify the validity of the attestation. const isValid = await primusAdapter.verifyProof(result.proof);   The core functions in PrimusAdatper are the following, which are also used in Actions and Providers.  // Generate a zkTLS proof. generateProof = async ( // The target endpoint of the network request. endpoint: string, // The HTTP method of the request, such as 'GET', 'POST', etc. method: string, // A record containing the headers of the request. headers: Record&lt;string, any&gt;, // The body of the request. It should be a string. body: string, //A [JSONPath](https://datatracker.ietf.org/doc/rfc9535/) expression to locate the specific field in the response you want to attest. responseParsePath: string ): Promise&lt;any&gt; // Verify the proof. verifyProof = async (attestation: any): Promise&lt;boolean&gt;   ","version":"1.0.17","tagName":"h3"},{"title":"Verify the interaction with Providers‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/primus#verify-the-interaction-with-providers","content":" Here‚Äôs an example showcasing how to verify the validity of the BTC price retrieved from Binance. Developers can easily customize this process for other providers.  const tokenPriceProvider: Provider = { get: async (runtime: IAgentRuntime, message: Memory, _state?: State) =&gt; { // Set the URL const url = &quot;https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT&quot;; const method = 'GET'; const headers = { 'Accept\t': '*/*', }; // Generate the proof const attestation = await generateProof(url, method, headers, &quot;&quot;, &quot;$.price&quot;); // Verify the proof. const valid = await verifyProof(attestation); if (!valid) { throw new Error(&quot;Invalid price attestation&quot;); } ...... }, };   ","version":"1.0.17","tagName":"h3"},{"title":"Installation‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/primus#installation","content":" bun add @elizaos/plugin-primus   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/primus#configuration","content":" Add the following environment variables to your .env file:  PRIMUS_APP_ID=your_app_id PRIMUS_APP_SECRET=your_app_secret VERIFIABLE_INFERENCE_ENABLED=true VERIFIABLE_INFERENCE_PROVIDER=primus   How to get PRIMUS_APP_ID and PRIMUS_APP_SECRET  Visit the Primus Developer Hub.Create a new projectSave your 'Application ID(PRIMUS_APP_ID)' and 'Secret Key(PRIMUS_APP_SECRET)'  To use the plugin, add @elizaos/plugin-primus to the plugins field in your character file. Here's an example of how your character file might look after the update:  { &quot;name&quot;: &quot;trump&quot;, &quot;modelProvider&quot;: &quot;openai&quot;, // just support openai now &quot;plugins&quot;: [ &quot;@elizaos/plugin-primus&quot; ], // other fields ..... }   ","version":"1.0.17","tagName":"h2"},{"title":"Run‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/primus#run","content":" # Start the server bun start --characters=&quot;characters/xxx.character.json&quot;   Visit https://localhost:3000 to interact with your agent through a web interface.  You can ask the agent: &quot;Get the BTC price and tweet.&quot; ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-para","type":0,"sectionRef":"#","url":"/packages/plugins/para","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#features","content":" üîê Full Para wallet integration with Eliza agentsüí∞ EVM-based transaction support using Viemüìù Message signing capabilitiesüíº Pre-generated wallet supportüîÑ Seamless wallet claiming processüõ°Ô∏è Secure user share managementüåê Multi-chain support (Ethereum, Polygon, Arbitrum, etc.)üìã Built-in wallet status monitoringü§ñ Auto-configuration with Eliza agentsüì± Session management for persistent authentication  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#installation","content":" You can install the plugin using your preferred package manager:  # npm npm install @elizaos/plugin-para # bun bun add @elizaos/plugin-para # yarn yarn add @elizaos/plugin-para # bun bun add @elizaos/plugin-para   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#configuration","content":" Add required environment variables to your .env file:  # Para Configuration PARA_API_KEY=your-para-api-key PARA_ENV=production   Register the plugin in your Eliza character configuration:  import { paraPlugin } from '@elizaos/plugin-para'; export const characterConfig = { // ... other config plugins: [paraPlugin], settings: { secrets: { PARA_API_KEY: process.env.PARA_API_KEY, PARA_ENV: process.env.PARA_ENV || 'production', }, }, };   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#usage","content":" The plugin adds several capabilities to your Eliza agent:  ","version":"1.0.17","tagName":"h2"},{"title":"Creating Wallets‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#creating-wallets","content":" // The agent can create wallets in response to user requests await runtime.triggerAction('CREATE_PARA_WALLET', { type: 'EVM', });   ","version":"1.0.17","tagName":"h3"},{"title":"Pre-generating Wallets‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#pre-generating-wallets","content":" // Create a wallet for a user before they sign up await runtime.triggerAction('CREATE_PREGEN_WALLET', { pregenIdentifier: 'user@example.com', pregenIdentifierType: 'EMAIL', });   ","version":"1.0.17","tagName":"h3"},{"title":"Signing Messages‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#signing-messages","content":" // Sign a message with a user's wallet await runtime.triggerAction('SIGN_PARA_MESSAGE', { walletId: 'wallet-id', message: 'Hello, World!', });   ","version":"1.0.17","tagName":"h3"},{"title":"Signing Transactions‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#signing-transactions","content":" // Sign and submit an EVM transaction await runtime.triggerAction('SIGN_PARA_TRANSACTION', { walletId: 'wallet-id', transaction: { to: '0x1234567890123456789012345678901234567890', value: '0.01', }, chainId: '1', // Ethereum mainnet });   ","version":"1.0.17","tagName":"h3"},{"title":"Claiming Pre-generated Wallets‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#claiming-pre-generated-wallets","content":" // Users can claim their pre-generated wallets await runtime.triggerAction('CLAIM_PARA_WALLET', { pregenIdentifier: 'user@example.com', pregenIdentifierType: 'EMAIL', });   ","version":"1.0.17","tagName":"h3"},{"title":"Checking Wallet Status‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#checking-wallet-status","content":" // Get current wallet status through the provider const walletInfo = await runtime.getContextFromProvider('paraWalletProvider');   ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#actions","content":" The plugin provides the following actions:  Action\tDescriptionCREATE_PARA_WALLET\tCreates a new Para wallet CREATE_PREGEN_WALLET\tCreates a pre-generated wallet associated with an identifier CLAIM_PARA_WALLET\tClaims a pre-generated wallet SIGN_PARA_MESSAGE\tSigns a message using a Para wallet SIGN_PARA_TRANSACTION\tSigns and submits a transaction using a Para wallet UPDATE_PREGEN_IDENTIFIER\tUpdates the identifier for a pre-generated wallet  ","version":"1.0.17","tagName":"h2"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#providers","content":" Available providers for context and status:  Provider\tDescriptionparaWalletProvider\tProvides current wallet information and status  ","version":"1.0.17","tagName":"h2"},{"title":"Services‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#services","content":" The plugin registers the following services in the Eliza runtime:  Service\tDescriptionParaWalletService\tCore service handling Para SDK integration  ","version":"1.0.17","tagName":"h2"},{"title":"Viem Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#viem-integration","content":" The plugin uses Viem for Ethereum transactions, offering:  üöÄ Modern and efficient transaction handlingüîß Type-safe API for Ethereum interactions‚ö° Multi-chain support out of the boxüîÑ Compatible with the Para Viem connector  // Example of transaction handling with Viem await runtime.triggerAction('SIGN_PARA_TRANSACTION', { walletId: 'wallet-id', transaction: { to: '0x1234567890123456789012345678901234567890', value: '0.05', data: '0x...', // Optional contract interaction data }, chainId: '137', // Polygon });   ","version":"1.0.17","tagName":"h2"},{"title":"Session Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#session-management","content":" The plugin implements Para's session management for maintaining authenticated states:  const paraService = runtime.getService&lt;ParaWalletService&gt;(ExtendedServiceType.PARA_WALLET); // Check if session is active const isActive = await paraService.isSessionActive(); // Keep session alive if (isActive) { await paraService.keepSessionAlive(); } else { await paraService.refreshSession(); }   ","version":"1.0.17","tagName":"h2"},{"title":"User Share Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#user-share-management","content":" Secure handling of user shares for pre-generated wallets:  // Get user share after wallet creation const { wallet, userShare } = await paraService.createPregenWallet({ pregenIdentifier: 'user@example.com', pregenIdentifierType: 'EMAIL', }); // Store user share securely await secureStorage.set(`user-share-${wallet.id}`, userShare); // Restore user share when needed await paraService.setUserShare({ userShare: await secureStorage.get(`user-share-${walletId}`), });   ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#error-handling","content":" The plugin implements comprehensive error handling following Eliza's patterns:  try { await runtime.triggerAction('SIGN_PARA_TRANSACTION', params); } catch (error) { if (error instanceof TransactionReviewDenied) { // Handle user denial console.log('User denied the transaction'); } else if (error instanceof TransactionReviewTimeout) { // Handle timeout console.log('Transaction review timed out', error.transactionReviewUrl); } else { // Handle other errors console.error('Transaction error:', error); } }   ","version":"1.0.17","tagName":"h2"},{"title":"Multi-Chain Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#multi-chain-support","content":" The plugin supports a variety of EVM-compatible networks:  Chain ID\tNetwork1\tEthereum Mainnet 11155111\tSepolia Testnet 137\tPolygon 42161\tArbitrum  Additional networks can be added by extending the chain configuration.  ","version":"1.0.17","tagName":"h2"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#best-practices","content":" Security Store API keys securely in environment variablesImplement proper user authentication before wallet operationsUse secure storage for user sharesFollow Para's recommendations for session management Error Handling Implement proper error handling for all wallet operationsHandle transaction rejections and timeouts gracefullyProvide clear feedback to users when operations failLog errors appropriately for debugging Performance Keep track of session status to avoid unnecessary refreshesImplement proper caching for wallet informationUse appropriate gas parameters for transactionsHandle network congestion scenarios with retry logic User Experience Guide users through the wallet creation processProvide clear status updates during operationsImplement proper loading states during transaction signingGive feedback on transaction progress and confirmations  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#contributing","content":" We welcome contributions! Please see our Contributing Guide for details.  Fork the repositoryCreate your feature branch (git checkout -b feature/amazing-feature)Commit your changes (git commit -m 'Add amazing feature')Push to the branch (git push origin feature/amazing-feature)Open a Pull Request  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#license","content":" MIT License - see the LICENSE file for details.  ","version":"1.0.17","tagName":"h2"},{"title":"Related‚Äã","type":1,"pageTitle":"@elizaos/plugin-para","url":"/packages/plugins/para#related","content":" Eliza DocumentationPara DocumentationPlugin ExamplesViem Documentation ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-quai","type":0,"sectionRef":"#","url":"/packages/plugins/quai","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#overview","content":" This plugin provides core functionality for interacting with the Quai Network, offering native token transfer capabilities and blockchain interactions through a simple interface.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#features","content":" Native QUAI token transfersMultiple network supportSecure transaction signingComprehensive error handlingBuilt-in address validationAutomatic gas estimationReal-time transaction status  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#installation","content":" bun install @elizaos/plugin-quai   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#configuration","content":" The plugin requires the following environment variables:  QUAI_PRIVATE_KEY=your-private-key QUAI_RPC_URL=https://rpc.quai.network # or your preferred RPC endpoint   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Transfer‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#token-transfer","content":" import { quaiPlugin } from '@elizaos/plugin-quai'; // Send QUAI const result = await eliza.execute({ action: 'SEND_TOKEN', content: { recipient: '0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7', amount: '10', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#actions","content":" SEND_TOKEN‚Äã  Transfers QUAI tokens to another address.  { action: 'SEND_TOKEN', content: { recipient: string, // Recipient's Quai address (42 characters, 0x prefix) amount: string, // Amount to send (in QUAI) tokenAddress?: string // Optional: for QRC20 tokens (not implemented yet) } }   ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#providers","content":" The plugin uses Quai's native JsonRpcProvider for blockchain interactions:  const provider = getQuaiProvider(runtime); // Returns configured JsonRpcProvider instance   ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#common-issues","content":" Transaction Failures Check account balanceVerify recipient address formatEnsure sufficient gasConfirm network connection Connection Problems Verify RPC endpointCheck network statusEnsure valid credentialsMonitor API availability Configuration Issues Verify environment variablesCheck address formatConfirm private key formatValidate RPC URL  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#security-best-practices","content":" Key Management Store private keys securelyUse environment variablesNever expose private keys in codeMonitor account activity Transaction Safety Validate all addressesImplement amount validationDouble-check recipientsMonitor transaction status Error Handling Log all transaction attemptsHandle timeouts gracefullyValidate all user inputsProvide clear error messages  ","version":"1.0.17","tagName":"h2"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#testing","content":" Run the test suite:  bun test   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#dependencies","content":" quais: ^1.0.0-beta.0@elizaos/core: workspace:*  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#contributing","content":" Contributions are welcome! Please ensure your code follows the existing patterns and includes appropriate tests.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#credits","content":" This plugin integrates with:  Quai NetworkQuai JavaScript API  For more information about Quai Network capabilities:  Quai DocumentationQuai Network GitHub  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-quai","url":"/packages/plugins/quai#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-quickintel","type":0,"sectionRef":"#","url":"/packages/plugins/quick-intel","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#description","content":" This plugin enables comprehensive token security analysis using QuickIntel's API, combined with market data from DexScreener. It supports multiple chains and address formats, providing detailed security assessments and market insights in natural language responses.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#installation","content":" bun install @elizaos/plugin-quickintel   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#environment-variables","content":" QUICKINTEL_API_KEY=&lt;Your QuickIntel API Key&gt;   ","version":"1.0.17","tagName":"h3"},{"title":"Client Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#client-configuration","content":" Add the plugin to your character.json file:  { &quot;name&quot;: &quot;YourCharacter&quot;, &quot;plugins&quot;: [&quot;quickintel&quot;], &quot;settings&quot;: { &quot;QUICKINTEL_API_KEY&quot;: &quot;your-api-key-here&quot; } }   ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#basic-integration","content":" import { quickIntelPlugin } from '@elizaos/plugin-quickintel';   ","version":"1.0.17","tagName":"h3"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#example-usage","content":" The plugin processes natural language queries for token audits:  'Can you check if this token is safe? 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on BSC'; 'Analyze this token on Ethereum: 0x1234...'; 'Is this Solana token safe? Hep4ZQ3MSSXFuLnT4baBFVBrC3677ntjrfaqE9zEt4rX';   ","version":"1.0.17","tagName":"h3"},{"title":"Supported Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#supported-features","content":" Multi-chain support (EVM chains, Solana, etc.)Comprehensive security analysisMarket data integrationNatural language responsesDetailed risk assessments  ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#actions","content":" Audit Token Action‚Äã  Performs security audits and market analysis on tokens.  Response Type:  interface AuditResponse { success: boolean; data: { audit: any; // QuickIntel audit data market?: any; // DexScreener market data }; params: { chain: string; tokenAddress: string; }; }   ","version":"1.0.17","tagName":"h3"},{"title":"Supported Chains‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#supported-chains","content":" The plugin supports all chains available through QuickIntel, including:  Ethereum (ETH)BNB Smart Chain (BSC)PolygonArbitrumAvalancheSolanaFull list available at https://docs.quickintel.io/quick-intel-scanner/supported-chainsAnd many more...  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#common-issues--troubleshooting","content":" API Issues Verify API key is correctCheck API endpoint accessibilityEnsure proper network connectivity Chain/Address Detection Ensure chain name is clearly specified (e.g., &quot;on ETH&quot;)Verify token address formatCheck chain support in QuickIntel Market Data DexScreener data might be unavailable for some tokensSome chains might have different market data availabilityLiquidity information may vary by chain  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-quickintel","url":"/packages/plugins/quick-intel#security-best-practices","content":" API Configuration Store API key securelyUse environment variablesImplement proper error handling Response Handling Validate audit resultsHandle timeouts gracefullyProcess market data carefully   ## Future Enhancements - Enhanced market data analysis - Historical audit tracking - Custom audit templates - Comparative analysis features ## Contributing Contributions are welcome! Please see the main Eliza repository for contribution guidelines. ## Credits This plugin integrates with: - [QuickIntel](https://quickintel.io): Token security audit platform - [DexScreener](https://dexscreener.com): DEX market data provider Special thanks to: - The QuickIntel team for their security analysis platform - The DexScreener team for market data access - The Eliza community for feedback and testing ## License This plugin is part of the Eliza project. See the main project repository for license information.  ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-router-nitro","type":0,"sectionRef":"#","url":"/packages/plugins/router-nitro","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-router-nitro","url":"/packages/plugins/router-nitro#description","content":" The Router Nitro plugin enables seamless cross-chain token transfers and wallet management across blockchains. It supports efficient bridging of tokens and monitoring wallet balances, facilitating real-time transaction processing and price tracking.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-router-nitro","url":"/packages/plugins/router-nitro#installation","content":" bun install @elizaos/plugin-router-nitro   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-router-nitro","url":"/packages/plugins/router-nitro#configuration","content":" The plugin requires the following environment variables to be set:  ROUTER_NITRO_EVM_PRIVATE_KEY=&lt;Your EVM-compatible private key&gt; ROUTER_NITRO_EVM_ADDRESS=&lt;Router Nitro EVM bridge address&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-router-nitro","url":"/packages/plugins/router-nitro#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-router-nitro","url":"/packages/plugins/router-nitro#basic-integration","content":" import { nitroPlugin } from '@elizaos/plugin-router-nitro';   ","version":"1.0.17","tagName":"h3"},{"title":"Transfer Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-router-nitro","url":"/packages/plugins/router-nitro#transfer-examples","content":" // The plugin responds to natural language commands like: 'Bridge 50 USDC from Ethereum to Polygon on address 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62'; 'Send 1 ETH from Arb to Base';  ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-sei","type":0,"sectionRef":"#","url":"/packages/plugins/sei","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#overview","content":" This plugin provides functionality to:  Transfer SEI tokens to other 0x or sei addressesQuery wallet balances  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#installation","content":" bun install @elizaos/plugin-sei   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#configuration","content":" The plugin requires the following environment variables:  SEI_PRIVATE_KEY= #your_private_key SEI_NETWORK= #&quot;mainnet&quot;,&quot;testnet&quot;, or &quot;devnet&quot;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#usage","content":" Import and register the plugin in your Eliza configuration:  import { seiPlugin } from '@elizaos/plugin-sei'; export default { plugins: [seiPlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Send Token‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#send-token","content":" Transfer SEI tokens to another address:  // Example conversation User: 'Send 1 SEI to 0xD5ca6eA5e33606554F746606157a7512FA738A12'; Assistant: &quot;I'll send 1 SEI token now...&quot;;   // Example conversation User: 'Send 1 SEI to sei1vpz36punknkdjfs7ew2vkdwws8ydcquy00hhsd'; Assistant: &quot;I'll send 1 SEI token now...&quot;;   ","version":"1.0.17","tagName":"h3"},{"title":"Check Wallet Balance‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#check-wallet-balance","content":" Query wallet balance and portfolio value:  // Example conversation User: &quot;What's my wallet balance?&quot;; Assistant: 'Your wallet contains 10.5 SEI ($5.25 USD)...';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#actions","content":" SEND_TOKEN: Transfer SEI to a specified address  ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#providers","content":" walletProvider: Manages wallet interactions with the Sei network, including balance queries and portfolio tracking  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#building","content":" bun build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#testing","content":" bun test   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#future-enhancements","content":" Some features planned for future releases include:  On chain actions such as Staking and Unstaking, Governance, and native token creationComplex queries and transaction history trackingSmart contract deployment and interactionIntegration with DeFi protocols on Sei, such as DEXes, Lending Protocols and Money Markets.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#credits","content":" This plugin integrates with and builds upon several key technologies:  Sei Blockchain: The fastest EVM blockchain  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-sei","url":"/packages/plugins/sei#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Unmaintained: this plugin needs a maintainer.","type":0,"sectionRef":"#","url":"/packages/plugins/rabbit-trader","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#features","content":" Automated trading on Solana blockchainReal-time market data analysis using DexScreenerTrust score evaluation for tokensTwitter integration for trade notificationsSafety limits and risk managementSimulation capabilities before executing tradesPerformance tracking and trade historyRate limiting and cache management  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#installation","content":" npm install @elizaos/plugin-rabbi-trader   ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#prerequisites","content":" The following environment variables need to be configured:  WALLET_PRIVATE_KEY: Your Solana wallet private keyWALLET_PUBLIC_KEY: Your Solana wallet public addressSOLANA_RPC_URL: Solana RPC endpoint (defaults to mainnet)BIRDEYE_API_KEY: API key for Birdeye data providerTWITTER_ENABLED: Enable/disable Twitter notificationsTWITTER_USERNAME: Twitter username for notificationsDEXSCREENER_WATCHLIST_ID: DexScreener watchlist identifierCOINGECKO_API_KEY: CoinGecko API key for additional market data  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#usage","content":" import createRabbiTraderPlugin from '@elizaos/plugin-rabbi-trader'; import { IAgentRuntime } from '@elizaos/core'; const plugin = await createRabbiTraderPlugin((key: string) =&gt; process.env[key], runtime); // Plugin will automatically start monitoring and trading if enabled   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Safety Limits‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#safety-limits","content":" The plugin includes built-in safety limits that can be configured:  export const SAFETY_LIMITS = { MINIMUM_TRADE: 0.01, // Minimum SOL per trade MAX_POSITION_SIZE: 0.1, // Maximum 10% of token liquidity MAX_SLIPPAGE: 0.05, // Maximum 5% slippage allowed MIN_LIQUIDITY: 1000, // Minimum $1000 liquidity required MIN_VOLUME: 2000, // Minimum $2000 24h volume required MIN_TRUST_SCORE: 0.4, // Minimum trust score to trade STOP_LOSS: 0.2, // 20% stop loss trigger TAKE_PROFIT: 0.12, // Take profit at 12% gain TRAILING_STOP: 0.2, // 20% trailing stop from highest };   ","version":"1.0.17","tagName":"h3"},{"title":"Trading Parameters‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#trading-parameters","content":" Default trading parameters can be adjusted in the configuration:  { CHECK_INTERVAL: 5 * 60 * 1000, // Check every 5 minutes REENTRY_DELAY: 60 * 60 * 1000, // Wait 1 hour before re-entering MAX_ACTIVE_POSITIONS: 5, // Maximum concurrent positions MIN_WALLET_BALANCE: 0.05 // Keep minimum 0.05 SOL in wallet }   ","version":"1.0.17","tagName":"h3"},{"title":"API Integration‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#api-integration","content":" The plugin integrates with multiple APIs:  Birdeye API: Market data and token security informationDexScreener: Real-time trading data and market analysisTwitter: Trade notifications and updatesJupiter: Token swaps and liquidity aggregation  ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#error-handling","content":" The plugin includes comprehensive error handling for common scenarios:  export const ERROR_SIGNATURES = [ { sig: '0x13be252b', name: 'InsufficientAllowance', description: 'Token allowance too low', }, { sig: '0xf4d678b8', name: 'InsufficientBalance', description: 'Insufficient token balance', }, // ... additional error signatures ];   ","version":"1.0.17","tagName":"h2"},{"title":"Trade Analysis‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#trade-analysis","content":" The plugin performs detailed analysis before executing trades:  Token security evaluationMarket data analysisTrust score calculationLiquidity assessmentVolume verificationPrice movement analysisHolder distribution review  ","version":"1.0.17","tagName":"h2"},{"title":"Twitter Integration‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#twitter-integration","content":" When enabled, the plugin can post trade notifications with:  Token informationTrade details (buy/sell price, amount)Trust score and risk levelMarket metricsTransaction signatureProfit/loss for sells  ","version":"1.0.17","tagName":"h2"},{"title":"Caching‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#caching","content":" The plugin implements multiple caching mechanisms:  Token analysis cache (20 minutes)Twitter rate limiting cache (hourly limits)Skip/wait cache (2 hours)Analysis history (24 hours)  ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Development Mode‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#development-mode","content":" npm run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#dependencies","content":" Key dependencies include:  @solana/web3.js: Solana blockchain interaction@elizaos/core: Core agent runtime@elizaos/plugin-solana: Solana integration@elizaos/plugin-trustdb: Trust score databasenode-cache: Caching functionalitybignumber.js: Precise number handling  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#contributing","content":" Fork the repositoryCreate your feature branchCommit your changesPush to the branchCreate a new Pull Request  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Unmaintained: this plugin needs a maintainer.","url":"/packages/plugins/rabbit-trader#license","content":" This project is licensed under the MIT License - see the LICENSE file for details. ","version":"1.0.17","tagName":"h2"},{"title":"NFT Collections Plugin","type":0,"sectionRef":"#","url":"/packages/plugins/nft-collections","content":"","keywords":"","version":"1.0.17"},{"title":"Recent Improvements‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#recent-improvements","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Performance Optimizations‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#performance-optimizations","content":" Implemented batch processing with configurable batch sizes for collection dataAdded parallel request handling with queue managementOptimized caching with tiered expiration times for different data typesAdded LRU (Least Recently Used) cache with configurable size limitsImplemented request prioritization for curated collections  ","version":"1.0.17","tagName":"h3"},{"title":"Enhanced Error Handling‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#enhanced-error-handling","content":" Added comprehensive error types and validationImplemented retry logic with exponential backoffAdded detailed error tracking and reportingImproved error recovery mechanismsAdded structured error logging  ","version":"1.0.17","tagName":"h3"},{"title":"Rate Limiting & Security‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#rate-limiting--security","content":" Added advanced rate limiting with configurable thresholdsImplemented queue-based request managementAdded per-service rate limitingImproved API key management and validationAdded request validation and sanitization  ","version":"1.0.17","tagName":"h3"},{"title":"Performance Monitoring‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#performance-monitoring","content":" Added detailed performance metrics trackingImplemented alert system for performance issuesAdded periodic performance reportingAdded latency, error rate, and throughput monitoringImplemented customizable alert thresholds  ","version":"1.0.17","tagName":"h3"},{"title":"Data Validation‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#data-validation","content":" Added comprehensive schema validation using ZodImplemented strict type checkingAdded data sanitization utilitiesAdded Ethereum address validationAdded price and token ID validation  ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Features (Reservoir Tools API)‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#core-features-reservoir-tools-api","content":" Real-time NFT collection data and market statsFloor prices, volume, and market cap trackingCollection activity monitoringToken-level data and attributesCollection statistics and rankings  ","version":"1.0.17","tagName":"h3"},{"title":"Market Intelligence‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#market-intelligence","content":" 420+ verified NFT collections featured on ikigailabs.xyzEnhanced metadata and social informationPrioritized data fetching and cachingPre-verified contract addressesFeatured collections highlightingQuick lookup and validation functions  ","version":"1.0.17","tagName":"h3"},{"title":"Market Data‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#market-data","content":" Real-time floor prices and volume trackingMarket cap and holder statisticsPrice history and trendsMulti-marketplace activity trackingWash trading detectionLiquidity analysisPrice predictionWhale activity monitoringMarket trend analysis  ","version":"1.0.17","tagName":"h3"},{"title":"Social Analytics‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#social-analytics","content":" Twitter engagement metricsDiscord community statsTelegram group analyticsSentiment analysisCommunity growth tracking  ","version":"1.0.17","tagName":"h3"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#quick-start","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#installation","content":" bun add @elizaos/plugin-nft-collections   ","version":"1.0.17","tagName":"h3"},{"title":"Configuration‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Required Configuration‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#required-configuration","content":" # Required RESERVOIR_API_KEY=your-reservoir-api-key   ","version":"1.0.17","tagName":"h3"},{"title":"Optional Configuration‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#optional-configuration","content":" import { NFTCollectionsPlugin } from '@elizaos/plugin-nft-collections'; const plugin = new NFTCollectionsPlugin({ caching: { enabled: true, ttl: 3600000, // 1 hour maxSize: 1000, }, security: { rateLimit: { enabled: true, maxRequests: 100, windowMs: 60000, }, }, maxConcurrent: 5, // Maximum concurrent requests maxRetries: 3, // Maximum retry attempts batchSize: 20, // Batch size for collection requests }); // Register with your agent agent.registerPlugin(plugin);   ","version":"1.0.17","tagName":"h3"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#required-environment-variables","content":" RESERVOIR_API_KEY=your-reservoir-api-key   ","version":"1.0.17","tagName":"h3"},{"title":"Optional API Keys‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#optional-api-keys","content":" # Market Intelligence NANSEN_API_KEY=your-nansen-api-key DUNE_API_KEY=your-dune-api-key ALCHEMY_API_KEY=your-alchemy-api-key CHAINBASE_API_KEY=your-chainbase-api-key NFTSCAN_API_KEY=your-nftscan-api-key # Social Analytics TWITTER_API_KEY=your-twitter-api-key DISCORD_API_KEY=your-discord-api-key TELEGRAM_API_KEY=your-telegram-api-key   ","version":"1.0.17","tagName":"h3"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#usage-examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Collection Data‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#collection-data","content":" // Get top collections with optimized batch processing const collections = await nftService.getTopCollections(); // Get market intelligence with caching const intelligence = await marketIntelligenceService.getMarketIntelligence('0x1234'); // Get social metrics with rate limiting const metrics = await socialAnalyticsService.getSocialMetrics('0x1234');   ","version":"1.0.17","tagName":"h3"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#error-handling","content":" try { const collections = await nftService.getTopCollections(); } catch (error) { if (error.code === ErrorCode.RATE_LIMIT_EXCEEDED) { // Handle rate limiting } else if (error.code === ErrorCode.API_ERROR) { // Handle API errors } }   ","version":"1.0.17","tagName":"h3"},{"title":"NFT Ownership‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#nft-ownership","content":" // Listen for performance alerts performanceMonitor.on('alert', (alert) =&gt; { console.log(`Performance alert: ${alert.type} for ${alert.operation}`); }); // Get performance summary const summary = performanceMonitor.getPerformanceSummary();   ","version":"1.0.17","tagName":"h3"},{"title":"Performance Benchmarks‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#performance-benchmarks","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Response Times (p95)‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#response-times-p95","content":" Operation Cold Cached Batch (100) Collection Data 300ms 50ms 2.5s Floor Price 150ms 25ms 1.2s Token Metadata 250ms 40ms 2.0s Market Stats 400ms 75ms 3.0s Social Metrics 350ms 60ms 2.8s   ","version":"1.0.17","tagName":"h3"},{"title":"Building‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#building","content":" bun build   ","version":"1.0.17","tagName":"h3"},{"title":"Resource Usage‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#resource-usage","content":" Resource Idle Light Heavy CPU 0.5% 15% 40% Memory 150MB 300MB 600MB Requests/s 10 100 1000   ","version":"1.0.17","tagName":"h3"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#best-practices","content":" API Keys Secure storage of API keysRegular key rotationUse fallback keys for high availability Error Handling Implement retry strategiesHandle rate limits gracefullyLog errors with context Performance Use batch operations when possibleImplement appropriate cachingMonitor resource usage Data Validation Validate all input dataSanitize API responsesCheck Ethereum addresses  ","version":"1.0.17","tagName":"h2"},{"title":"Architecture‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#architecture","content":" ","version":"1.0.17","tagName":"h2"},{"title":"System Components‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#system-components","content":"   ","version":"1.0.17","tagName":"h3"},{"title":"Contributing‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#contributing","content":" Fork the repositoryCreate your feature branchCommit your changesPush to the branchCreate a Pull Request  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#license","content":" MIT  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#support","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling Flow‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#error-handling-flow","content":"   ","version":"1.0.17","tagName":"h3"},{"title":"Optimization Strategies‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#optimization-strategies","content":"   ","version":"1.0.17","tagName":"h3"},{"title":"Integrations‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#integrations","content":" ","version":"1.0.17","tagName":"h2"},{"title":"GraphQL Support‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#graphql-support","content":" # GraphQL Configuration GRAPHQL_ENDPOINT=your-graphql-endpoint GRAPHQL_API_KEY=your-graphql-key   // Query collections using GraphQL const collections = await plugin.graphql.query( ` query GetCollections($first: Int!) { collections(first: $first) { id name floorPrice volume24h } } `, { first: 10 } ); // Subscribe to collection updates const subscription = plugin.graphql.subscribe( ` subscription OnFloorPriceChange($collectionId: ID!) { floorPriceChanged(collectionId: $collectionId) { newPrice oldPrice timestamp } } `, { collectionId: '0x1234' } );   ","version":"1.0.17","tagName":"h3"},{"title":"WebSocket Real-time Updates‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#websocket-real-time-updates","content":" # WebSocket Configuration WS_ENDPOINT=your-websocket-endpoint WS_API_KEY=your-websocket-key   // Subscribe to real-time collection updates plugin.ws.subscribe('collection:0x1234', (update) =&gt; { console.log('New floor price:', update.floorPrice); }); // Subscribe to multiple events plugin.ws.subscribeMany(['sales:0x1234', 'listings:0x1234', 'transfers:0x1234'], (event) =&gt; { console.log('Event type:', event.type); console.log('Event data:', event.data); }); // Custom event filters plugin.ws.subscribe( 'sales:*', { priceAbove: '10 ETH', marketplace: ['opensea', 'blur'], }, (sale) =&gt; { console.log('Whale sale detected:', sale); } );   ","version":"1.0.17","tagName":"h3"},{"title":"IPFS Integration‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#ipfs-integration","content":" # IPFS Configuration IPFS_GATEWAY=your-ipfs-gateway IPFS_API_KEY=your-ipfs-key IPFS_FALLBACK_GATEWAYS=[&quot;https://ipfs.io&quot;, &quot;https://cloudflare-ipfs.com&quot;]   // Fetch metadata from IPFS const metadata = await plugin.ipfs.getMetadata('ipfs://Qm...'); // Upload metadata to IPFS const cid = await plugin.ipfs.uploadMetadata({ name: 'Cool NFT', description: 'Very cool NFT', image: 'ipfs://Qm...', }); // Pin content across multiple providers await plugin.ipfs.pin(cid, { providers: ['pinata', 'web3.storage'], replicas: 3, }); // Smart gateway selection const image = await plugin.ipfs.getImage(cid, { preferredGateway: 'cloudflare', size: 'thumbnail', format: 'webp', });   ","version":"1.0.17","tagName":"h3"},{"title":"Integration Best Practices‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#integration-best-practices","content":" GraphQL Use fragments for reusable queriesImplement proper error boundariesCache complex queriesUse persisted queries for production WebSocket Implement reconnection logicHandle backpressureUse heartbeatsBatch small updatesImplement message queue for offline scenarios IPFS Use multiple gateway fallbacksImplement proper timeout handlingCache frequently accessed contentUse appropriate gateway for content typeMonitor gateway health  ","version":"1.0.17","tagName":"h3"},{"title":"Integration Architecture‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#integration-architecture","content":"   ","version":"1.0.17","tagName":"h3"},{"title":"Extended Features‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#extended-features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Webhooks‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#webhooks","content":" # Webhook Configuration WEBHOOK_SECRET=your-webhook-secret WEBHOOK_RETRY_COUNT=3 WEBHOOK_TIMEOUT=5000   // Register webhook endpoints const webhook = plugin.webhooks.create({ url: 'https://api.yourdomain.com/webhooks/nft', events: ['floor_change', 'volume_spike', 'whale_transfer'], secret: process.env.WEBHOOK_SECRET, metadata: { name: 'Price Monitor', description: 'Monitor floor price changes', }, }); // Configure event filters webhook.addFilter({ event: 'floor_change', conditions: { percentageChange: '&gt;5%', timeWindow: '1h', minVolume: '10 ETH', }, }); webhook.addFilter({ event: 'whale_transfer', conditions: { value: '&gt;100 ETH', fromAddress: ['!0x0000000000000000000000000000000000000000'], toAddress: ['!0x0000000000000000000000000000000000000000'], }, }); // Handle webhook delivery status webhook.on('delivered', (event) =&gt; { console.log('Webhook delivered:', event.id); }); webhook.on('failed', (event, error) =&gt; { console.error('Webhook failed:', error); });   ","version":"1.0.17","tagName":"h3"},{"title":"ML-Powered Price Predictions‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#ml-powered-price-predictions","content":" // Get price prediction for a collection const prediction = await plugin.ml.predictPrice('0x1234', { timeframe: '24h', confidence: 0.8, includeFactors: true, }); // Response type interface PricePrediction { timeframe: '1h' | '24h' | '7d'; currentPrice: number; predictedPrice: number; confidence: number; factors: { reason: string; impact: number; confidence: number; }[]; marketConditions: { trend: 'bullish' | 'bearish' | 'neutral'; volatility: 'high' | 'medium' | 'low'; liquidity: 'high' | 'medium' | 'low'; }; } // Batch predictions for multiple collections const predictions = await plugin.ml.batchPredictPrice([ { address: '0x1234', timeframe: '1h' }, { address: '0x5678', timeframe: '24h' }, ]); // Get historical prediction accuracy const accuracy = await plugin.ml.getPredictionAccuracy('0x1234', { timeframe: '7d', startDate: '2024-01-01', endDate: '2024-01-07', }); // Train custom prediction model const model = await plugin.ml.trainCustomModel({ collections: ['0x1234', '0x5678'], features: ['volume', 'social_sentiment', 'whale_activity'], timeframe: '24h', trainingPeriod: '30d', });   ","version":"1.0.17","tagName":"h3"},{"title":"Advanced Analytics‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#advanced-analytics","content":" // Rarity analysis with ML const rarityScore = await plugin.ml.analyzeRarity('0x1234', 'tokenId', { method: 'trait_rarity' | 'statistical' | 'neural', includeExplanation: true, }); // Wash trading detection const tradeAnalysis = await plugin.ml.analyzeTrades('0x1234', { timeframe: '24h', minConfidence: 0.8, includeEvidence: true, }); // Market manipulation detection const manipulationScore = await plugin.ml.detectManipulation('0x1234', { indicators: ['wash_trading', 'price_manipulation', 'fake_volume'], sensitivity: 'high' | 'medium' | 'low', });   ","version":"1.0.17","tagName":"h3"},{"title":"Custom Alerts‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#custom-alerts","content":" // Set up custom alerts const alert = plugin.alerts.create({ name: 'Whale Alert', conditions: { event: 'transfer', filters: { value: '&gt;50 ETH', collectionAddress: '0x1234', }, }, actions: [ { type: 'webhook', url: 'https://api.yourdomain.com/alerts', }, { type: 'email', to: 'trader@domain.com', }, ], }); // Alert with ML insights const smartAlert = plugin.alerts.createWithML({ name: 'Smart Price Alert', conditions: { event: 'price_prediction', filters: { confidence: '&gt;0.8', priceChange: '&gt;10%', timeframe: '24h', }, }, mlConfig: { model: 'price_prediction', features: ['market_sentiment', 'whale_activity'], }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Feature Configuration‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#feature-configuration","content":" interface ExtendedFeatureConfig { webhooks: { maxRetries: number; timeout: number; batchSize: number; rateLimits: { perSecond: number; perMinute: number; }; }; ml: { models: { price: string; rarity: string; manipulation: string; }; updateFrequency: number; minConfidence: number; maxBatchSize: number; }; alerts: { maxPerUser: number; cooldown: number; maxActions: number; }; }   ","version":"1.0.17","tagName":"h3"},{"title":"Extended Features Architecture‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#extended-features-architecture","content":"   ","version":"1.0.17","tagName":"h3"},{"title":"Testing & Validation‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#testing--validation","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Mock Data Generation‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#mock-data-generation","content":" // Generate mock collections and transactions const mockData = await plugin.testing.generateMockData({ collections: 10, transactions: 1000, timeRange: [new Date('2024-01-01'), new Date('2024-01-07')], options: { priceRange: [0.1, 100], traits: ['background', 'body', 'eyes', 'mouth'], rarityDistribution: 'normal', marketplaces: ['opensea', 'blur', 'x2y2'], }, }); // Generate realistic market activity const marketActivity = await plugin.testing.generateMarketActivity({ collection: '0x1234', activityType: ['sales', 'listings', 'offers'], volumeProfile: 'whale_accumulation', priceVolatility: 'high', duration: '7d', }); // Generate social signals const socialData = await plugin.testing.generateSocialData({ sentiment: 'bullish', engagement: 'viral', platforms: ['twitter', 'discord'], influencerActivity: true, });   ","version":"1.0.17","tagName":"h3"},{"title":"Contract Validation‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#contract-validation","content":" // Validate collection contract const validation = await plugin.validation.validateContract('0x1234', { checkERC: ['721', '1155'], securityCheck: true, options: { checkOwnership: true, checkRoyalties: true, checkMetadata: true, checkPermissions: true, }, }); // Response type interface ValidationResult { isValid: boolean; standards: { erc721: boolean; erc1155: boolean; erc2981: boolean; // Royalties }; security: { maliciousCode: boolean; knownExploits: boolean; upgradeability: { isUpgradeable: boolean; adminAddress: string; timelock: number; }; permissions: { owner: string; minter: string[]; pauser: string[]; }; }; metadata: { isValid: boolean; baseURI: string; frozen: boolean; }; } // Batch validate multiple contracts const batchValidation = await plugin.validation.batchValidateContracts(['0x1234', '0x5678'], { checkERC: ['721'], securityCheck: true, });   ","version":"1.0.17","tagName":"h3"},{"title":"Testing Utilities‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#testing-utilities","content":" // Time travel for testing await plugin.testing.timeTravel({ collection: '0x1234', destination: new Date('2024-06-01'), preserveState: true, }); // Market simulation await plugin.testing.simulateMarket({ scenario: 'bear_market', duration: '30d', collections: ['0x1234'], variables: { priceDecline: 0.5, volumeReduction: 0.7, sellerPanic: true, }, }); // Load testing const loadTest = await plugin.testing.runLoadTest({ concurrent: 100, duration: '5m', operations: ['getFloor', 'getMetadata', 'getTrades'], targetRPS: 50, });   ","version":"1.0.17","tagName":"h3"},{"title":"Test Fixtures‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#test-fixtures","content":" // Collection fixture const fixture = plugin.testing.createFixture({ type: 'collection', traits: { background: ['red', 'blue', 'green'], body: ['type1', 'type2'], accessory: ['hat', 'glasses'], }, supply: 1000, distribution: 'random', }); // Market fixture const marketFixture = plugin.testing.createMarketFixture({ floorPrice: 1.5, listings: 50, topBid: 2.0, volume24h: 100, holders: 500, }); // Event fixture const eventFixture = plugin.testing.createEventFixture({ type: 'sale', price: 5.0, marketplace: 'opensea', timestamp: new Date(), });   ","version":"1.0.17","tagName":"h3"},{"title":"Testing Configuration‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#testing-configuration","content":" interface TestConfig { mock: { seed?: string; deterministic: boolean; networkLatency: number; errorRate: number; }; validation: { timeout: number; retries: number; concurrency: number; }; fixtures: { cleanup: boolean; persistence: 'memory' | 'disk'; sharing: boolean; }; }   ","version":"1.0.17","tagName":"h3"},{"title":"Test Helpers‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#test-helpers","content":" // Snapshot testing const snapshot = await plugin.testing.createSnapshot('0x1234'); await plugin.testing.compareSnapshots(snapshot, latestSnapshot); // Event assertions await plugin.testing.assertEvent({ type: 'sale', collection: '0x1234', matcher: { price: '&gt;1 ETH', buyer: '0x5678', }, }); // Market assertions await plugin.testing.assertMarketState({ collection: '0x1234', conditions: { floorPrice: '&gt;1 ETH', listings: '&gt;10', volume24h: '&gt;100 ETH', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Testing Architecture‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#testing-architecture","content":"   ","version":"1.0.17","tagName":"h3"},{"title":"Authentication & Security‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#authentication--security","content":" ","version":"1.0.17","tagName":"h2"},{"title":"API Key Management‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#api-key-management","content":" // Configure API keys with rotation and fallback const apiConfig = plugin.auth.configureAPI({ primary: { key: process.env.PRIMARY_API_KEY, rotationSchedule: '0 0 * * *', // Daily rotation rotationCallback: async (oldKey) =&gt; { await notifyKeyExpiry(oldKey); }, }, fallback: { key: process.env.FALLBACK_API_KEY, useCondition: (error) =&gt; error.status === 429 || error.status === 503, }, rotation: { enabled: true, interval: 86400000, // 24 hours in ms strategy: 'gradual', // or &quot;immediate&quot; }, }); // Key rotation handlers plugin.auth.onKeyRotation(async (newKey, oldKey) =&gt; { await updateKeyInVault(newKey); await invalidateOldKey(oldKey); }); // Automatic key validation await plugin.auth.validateKeys({ checkInterval: 3600000, // 1 hour healthEndpoint: '/health', timeout: 5000, });   ","version":"1.0.17","tagName":"h3"},{"title":"Rate Limiting‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#rate-limiting","content":" // Configure rate limits const rateLimiter = plugin.security.configureRateLimits({ global: { maxRequests: 1000, windowMs: 60000, // 1 minute retryAfter: 60000, }, endpoints: { '/collections': { maxRequests: 100, windowMs: 60000, retryAfter: 30000, }, '/market-data': { maxRequests: 50, windowMs: 60000, retryAfter: 60000, }, }, strategies: { type: 'sliding-window', errorHandling: 'queue', // or &quot;reject&quot; }, }); // Custom rate limit handlers rateLimiter.onLimitReached(async (context) =&gt; { await notifyRateLimitExceeded(context); return plugin.security.getBackoffStrategy(context); }); // Distributed rate limiting with Redis const distributedLimiter = plugin.security.createDistributedRateLimiter({ redis: { host: process.env.REDIS_HOST, port: 6379, password: process.env.REDIS_PASSWORD, }, sync: { interval: 1000, strategy: 'eventual-consistency', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Security Features‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#security-features","content":" // Enable security features const security = plugin.security.configure({ encryption: { algorithm: 'aes-256-gcm', keyRotation: true, rotationInterval: 7776000000, // 90 days }, authentication: { type: 'jwt', expiresIn: '24h', refreshToken: true, }, headers: { helmet: true, cors: { origin: ['https://yourdomain.com'], methods: ['GET', 'POST'], }, }, }); // Request signing const signedRequest = plugin.security.signRequest({ method: 'POST', url: '/api/v1/trades', body: tradeData, nonce: Date.now(), expiry: '5m', }); // Payload encryption const encryptedData = await plugin.security.encryptPayload(sensitiveData, { algorithm: 'aes-256-gcm', keyId: 'current', metadata: { purpose: 'api-communication', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Access Control‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#access-control","content":" // Configure access control const accessControl = plugin.security.configureAccess({ roles: { admin: { permissions: ['read', 'write', 'delete'], rateLimit: { multiplier: 2 }, }, user: { permissions: ['read'], rateLimit: { multiplier: 1 }, }, }, resources: { collections: ['read', 'write'], trades: ['read', 'write', 'delete'], analytics: ['read'], }, }); // Role-based middleware const authMiddleware = plugin.security.createAuthMiddleware({ validateToken: true, checkPermissions: true, auditLog: true, }); // IP allowlisting const ipFilter = plugin.security.createIPFilter({ allowlist: ['192.168.1.0/24'], denylist: ['10.0.0.0/8'], mode: 'strict', });   ","version":"1.0.17","tagName":"h3"},{"title":"Audit Logging‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#audit-logging","content":" // Configure audit logging const auditLogger = plugin.security.configureAuditLog({ storage: { type: 'elasticsearch', config: { node: process.env.ELASTICSEARCH_URL, index: 'nft-audit-logs', }, }, retention: { duration: '90d', archival: true, }, events: { 'api.request': true, 'auth.login': true, 'data.modification': true, }, }); // Log security events await auditLogger.log({ action: 'api.request', actor: 'user-123', resource: 'collection-456', details: { method: 'GET', path: '/api/v1/collections', status: 200, }, }); // Query audit logs const auditTrail = await auditLogger.query({ timeRange: { start: '2024-01-01', end: '2024-01-07', }, filters: { action: ['api.request', 'auth.login'], actor: 'user-123', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Security Configuration‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#security-configuration","content":" interface SecurityConfig { api: { keys: { rotation: { enabled: boolean; interval: number; strategy: 'gradual' | 'immediate'; }; validation: { interval: number; timeout: number; }; }; rateLimit: { global: RateLimitConfig; endpoints: Record&lt;string, RateLimitConfig&gt;; distributed: boolean; }; }; encryption: { algorithm: string; keyRotation: boolean; rotationInterval: number; }; access: { roles: Record&lt;string, RoleConfig&gt;; resources: Record&lt;string, string[]&gt;; audit: { enabled: boolean; retention: string; }; }; }   ","version":"1.0.17","tagName":"h3"},{"title":"Security Architecture‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#security-architecture","content":"   ","version":"1.0.17","tagName":"h3"},{"title":"Trading Agents‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#trading-agents","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Agent Configuration‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#agent-configuration","content":" // Configure a trading agent const tradingAgent = plugin.agents.createTradingAgent({ name: 'WhaleWatcher', personality: { style: 'aggressive', riskTolerance: 'high', tradingHours: '24/7', }, strategies: [ { name: 'whale_following', config: { minTransactionValue: '100 ETH', followDelay: '1m', maxExposure: '500 ETH', }, }, { name: 'floor_sweeping', config: { targetCollections: ['0x1234', '0x5678'], maxPricePerItem: '2 ETH', totalBudget: '50 ETH', }, }, ], }); // Configure agent communication const agentNetwork = plugin.agents.createNetwork({ agents: [tradingAgent, otherAgent], communicationRules: { shareMarketInsights: true, coordinateTrading: true, profitSharing: 0.5, }, }); // Set up agent behaviors tradingAgent.on('whale_movement', async (event) =&gt; { const analysis = await plugin.ml.analyzeWhaleMovement(event); if (analysis.confidence &gt; 0.8) { await tradingAgent.executeStrategy('whale_following', { collection: event.collection, amount: analysis.recommendedAmount, }); } });   ","version":"1.0.17","tagName":"h3"},{"title":"Multi-Agent Trading Strategies‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#multi-agent-trading-strategies","content":" // Collaborative floor sweeping const floorSweepTeam = plugin.agents.createTeam({ name: 'FloorSweepers', members: [agent1, agent2, agent3], strategy: { type: 'distributed_sweep', config: { totalBudget: '100 ETH', maxPricePerAgent: '35 ETH', targetCollections: ['0x1234'], coordination: { type: 'price_zones', zones: [ { range: '0-1 ETH', agent: 'agent1' }, { range: '1-2 ETH', agent: 'agent2' }, { range: '2+ ETH', agent: 'agent3' }, ], }, }, }, }); // Market making strategy const marketMaker = plugin.agents.createMarketMaker({ collections: ['0x1234'], strategy: { spreadTarget: 0.05, maxInventory: '10 ETH', rebalanceThreshold: 0.02, hedging: { enabled: true, instruments: ['wETH', 'NFT indexes'], }, }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Agent Learning & Adaptation‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#agent-learning--adaptation","content":" // Train agent on historical data await tradingAgent.learn({ dataset: 'historical_trades', timeframe: '90d', features: ['whale_movements', 'price_action', 'social_sentiment'], reinforcementConfig: { rewardFunction: 'profit_and_risk', episodes: 1000, batchSize: 64, }, }); // Adaptive strategy adjustment tradingAgent.enableAdaptation({ metrics: ['profit_loss', 'win_rate', 'drawdown'], adjustmentPeriod: '1d', thresholds: { drawdown: { max: 0.1, action: 'reduce_exposure', }, profitTarget: { min: 0.2, action: 'increase_aggression', }, }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Agent Monitoring & Analytics‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#agent-monitoring--analytics","content":" // Monitor agent performance const performance = await plugin.agents.getPerformance({ agentId: tradingAgent.id, timeframe: '30d', metrics: ['total_profit', 'win_rate', 'avg_position_size', 'max_drawdown'], }); // Agent activity dashboard const dashboard = plugin.agents.createDashboard({ agents: [tradingAgent, marketMaker], realtime: true, metrics: { performance: true, activities: true, insights: true, }, alerts: { profitThreshold: '5 ETH', lossThreshold: '2 ETH', unusualActivity: true, }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Agent Architecture‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#agent-architecture","content":"   ","version":"1.0.17","tagName":"h3"},{"title":"Caching Layer‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#caching-layer","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Cache Configuration‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#cache-configuration","content":" // Configure multi-level caching const cacheConfig = plugin.cache.configure({ layers: { memory: { type: 'memory', maxSize: '1GB', ttl: '1m', priority: 1, }, redis: { type: 'redis', connection: { host: process.env.REDIS_HOST, port: 6379, password: process.env.REDIS_PASSWORD, }, ttl: '5m', priority: 2, }, disk: { type: 'disk', path: './cache', maxSize: '10GB', ttl: '1h', priority: 3, }, }, strategies: { preload: ['top_collections', 'trending_collections'], warmup: { interval: '10m', concurrency: 5, }, }, }); // Configure per-collection caching const collectionCache = plugin.cache.createCollectionCache({ collection: '0x1234', rules: { metadata: { ttl: '1d', invalidateOn: ['metadata_update'], }, floorPrice: { ttl: '30s', invalidateOn: ['new_listing', 'sale'], }, holders: { ttl: '1h', invalidateOn: ['transfer'], }, }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Smart Caching Strategies‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#smart-caching-strategies","content":" // Implement predictive caching const predictiveCache = plugin.cache.enablePredictiveCaching({ features: { userBehavior: true, timePatterns: true, marketActivity: true, }, ml: { model: 'cache_prediction', updateInterval: '1h', minConfidence: 0.8, }, }); // Configure cache warming const cacheWarmer = plugin.cache.createWarmer({ schedule: '*/10 * * * *', // Every 10 minutes strategy: { type: 'smart', priorities: { popularity: 0.4, recentActivity: 0.3, userRequests: 0.3, }, }, limits: { maxConcurrent: 5, maxItems: 1000, }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Cache Monitoring‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#cache-monitoring","content":" // Monitor cache performance const cacheMetrics = plugin.cache.monitor({ metrics: ['hit_rate', 'miss_rate', 'latency', 'size'], alerts: { hitRate: { threshold: 0.8, window: '5m', action: 'adjust_ttl', }, latency: { threshold: 100, window: '1m', action: 'scale_cache', }, }, }); // Cache analytics dashboard const cacheDashboard = plugin.cache.createDashboard({ realtime: true, metrics: { performance: true, storage: true, invalidations: true, }, visualization: { graphs: true, heatmaps: true, }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Cache Optimization‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#cache-optimization","content":" // Optimize cache storage const storageOptimizer = plugin.cache.optimizeStorage({ compression: { enabled: true, algorithm: 'lz4', level: 'medium', }, deduplication: true, partitioning: { strategy: 'access_pattern', shards: 4, }, }); // Implement cache coherency const coherencyManager = plugin.cache.manageCoherency({ strategy: 'write_through', consistency: 'eventual', propagation: { method: 'pub_sub', maxDelay: '100ms', }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Cache Architecture‚Äã","type":1,"pageTitle":"NFT Collections Plugin","url":"/packages/plugins/nft-collections#cache-architecture","content":" ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-solana-agent-kit","type":0,"sectionRef":"#","url":"/packages/plugins/solana-agent-kit","content":"","keywords":"","version":"1.0.17"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#installation","content":" bun add @elizaos/plugin-solana-agent-kit   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#required-environment-variables","content":" # Required: Either private key or public key SOLANA_PRIVATE_KEY=your_private_key # OR SOLANA_PUBLIC_KEY=your_public_key # Optional: Custom RPC URL (defaults to mainnet) SOLANA_RPC_URL=your_rpc_url # Required for TEE mode WALLET_SECRET_SALT=your_salt # Only if TEE_MODE is enabled   ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#token-operations","content":" Create new tokens with custom parametersTransfer tokens between addressesGet token information and metadataManage token supply and decimals  ","version":"1.0.17","tagName":"h3"},{"title":"DeFi Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#defi-operations","content":" Swap tokens using Jupiter aggregatorLend assets on supported platformsStake tokensCreate GibWork tasks  ","version":"1.0.17","tagName":"h3"},{"title":"Usage Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#usage-examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Creation‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#token-creation","content":" &quot;Create token, name is Example Token, symbol is EXMPL, decimals is 9&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Token Transfers‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#token-transfers","content":" &quot;Send 69 EZSIS to &lt;wallet_address&gt;&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Token Swaps‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#token-swaps","content":" &quot;Swap 0.1 SOL for USDC&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Lending‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#lending","content":" &quot;Lend 100 USDC&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Staking‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#staking","content":" &quot;Stake 100 tokens&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"GibWork Tasks‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#gibwork-tasks","content":" &quot;Create a GibWork task for building a Solana dApp, offering 100 USDC&quot;   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#dependencies","content":" @coral-xyz/anchor: 0.30.1@solana/spl-token: 0.4.9@solana/web3.js: 1.95.8solana-agent-kit: ^1.2.0bignumber.js: 9.1.2  ","version":"1.0.17","tagName":"h2"},{"title":"Technical Details‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#technical-details","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Security Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#security-features","content":" TEE mode support for secure key derivationMultiple key format support (base58, base64)Public key verification  ","version":"1.0.17","tagName":"h3"},{"title":"Address Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana-agent-kit","url":"/packages/plugins/solana-agent-kit#address-management","content":" Supports both public key and full keypair operationsBase58 and base64 private key formatsTEE-based key derivation when enabled  For more information about Solana Agent Kit capabilities, see solana-agent-kit documentation. ","version":"1.0.17","tagName":"h3"},{"title":"SGX Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/sgx","content":"","keywords":"","version":"1.0.17"},{"title":"Trusted Execution Environment (TEE)‚Äã","type":1,"pageTitle":"SGX Plugin for Eliza","url":"/packages/plugins/sgx#trusted-execution-environment-tee","content":" A Trusted Execution Environment (TEE) is a secure area within a main processor that ensures sensitive data is stored, processed, and protected in an isolated environment. TEEs provide a higher level of security by allowing applications to run in a protected space, safeguarding them from unauthorized access and potential threats.  ","version":"1.0.17","tagName":"h3"},{"title":"Software Guard Extensions (SGX)‚Äã","type":1,"pageTitle":"SGX Plugin for Eliza","url":"/packages/plugins/sgx#software-guard-extensions-sgx","content":" Software Guard Extensions is a set of instructions on Intel processors for creating Trusted Execution Environments (TEE). SGX enables the creation of enclaves, which are protected areas of execution that ensure the confidentiality and integrity of the code and data within them. This allows applications to run securely, even in untrusted environments, by protecting sensitive information from being exposed to the host operating system or other applications.  ","version":"1.0.17","tagName":"h3"},{"title":"Attestation‚Äã","type":1,"pageTitle":"SGX Plugin for Eliza","url":"/packages/plugins/sgx#attestation","content":" The attestation of TEE is a security mechanism that enables a TEE to provide cryptographic proof of its integrity and authenticity to external parties. By generating a unique attestation report that includes information about the software and its execution state, a TEE can assure remote verifiers that the code running within it has not been altered and is operating as intended. This process is essential for establishing trust in secure applications, allowing them to interact confidently with other systems and services in potentially untrusted environments.  ","version":"1.0.17","tagName":"h3"},{"title":"Gramine‚Äã","type":1,"pageTitle":"SGX Plugin for Eliza","url":"/packages/plugins/sgx#gramine","content":" The attestation capabilities are based on Gramine Library OS. Gramine is a Library OS for Unmodified Applications. Applications can benefit from confidentiality and integrity guarantees of Intel SGX, but developers need to be very skilled for effective partitioning and code modification for Intel SGX environment. Gramine runs unmodified applications inside Intel SGX. It supports dynamically loaded libraries, runtime linking, multi-process abstractions, and file authentication. For additional security, Gramine performs cryptographic and semantic checks at untrusted host interface. Developers provide a manifest file to configure the application environment and isolation policies, Gramine automatically does the rest.  ","version":"1.0.17","tagName":"h3"},{"title":"Components‚Äã","type":1,"pageTitle":"SGX Plugin for Eliza","url":"/packages/plugins/sgx#components","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Providers‚Äã","type":1,"pageTitle":"SGX Plugin for Eliza","url":"/packages/plugins/sgx#providers","content":" sgxAttestationProvider: This provider is responsible for generating SGX remote attestations within Gramine SGX environments.  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"SGX Plugin for Eliza","url":"/packages/plugins/sgx#usage","content":" First, you need to prepare the SGX environment and install the Gramine dependencies. You can install Gramine packages in your SGX machine or use the docker image. Follow the Gramine installation options for more details.  Then, start eliza in SGX:  bun i bun build # Start default character SGX=1 make start # Start specific character SGX=1 make start -- --character &quot;character/trump.character.json&quot;   After starting Eliza, the provider sgxAttestationProvider will be registered into Eliza through plugin-sgx. The environment variable SGX is required to be set to 1 to enable plugin-sgx. And the SGX is always set to 1 in the SGX environment through the eliza.manifest.template file.  When Eliza starts, the sgxAttestationProvider will generate SGX attestation in each request. And you can use the SgxAttestationProvider to generate SGX remote attestations for your own plugins / clients.  ","version":"1.0.17","tagName":"h2"},{"title":"Example‚Äã","type":1,"pageTitle":"SGX Plugin for Eliza","url":"/packages/plugins/sgx#example","content":" const sgxAttestationProvider = new SgxAttestationProvider(); const sgxAttestation = await sgxAttestationProvider.generateAttestation(userReport);   ","version":"1.0.17","tagName":"h3"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"SGX Plugin for Eliza","url":"/packages/plugins/sgx#quick-start","content":" First, you need to prepare a SGX enabled machine.  Then, you can use the following command to start a Gramine Docker container:  sudo docker run -it --name eliza_sgx \\ --mount type=bind,source={your_eliza_path},target=/root/eliza \\ --device /dev/sgx/enclave \\ --device /dev/sgx/provision \\ gramineproject/gramine:stable-jammy   After entering the docker, you can use the following command to prepare the Eliza environment:  # Generate the private key for signing the SGX enclave gramine-sgx-gen-private-key cd /root/eliza/ # Install nodejs and bun # Node.js will be installed at `/usr/bin/node`. # Gramine will utilize this path as the default Node.js location to run Eliza. # If you prefer to use nvm for installing Node.js, please ensure to specify the Node.js path in the Makefile, as the installation path for nvm is not `/usr/bin/node`. apt update apt install -y build-essential apt install -y curl curl -fsSL https://deb.nodesource.com/setup_23.x | bash - apt install -y nodejs=23.3.0-1nodesource1 npm install -g bun # Build Eliza bun i bun build # Copy the .env.example file to .env cp .env.example .env # Edit the .env file # Start Eliza in SGX SGX=1 make start -- --character &quot;character/c3po.character.json&quot;  ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-solana","type":0,"sectionRef":"#","url":"/packages/plugins/solana","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#overview","content":" The Solana plugin serves as a foundational component of Eliza OS, bridging Solana blockchain capabilities with the Eliza ecosystem. It provides crucial services for token operations, trading, portfolio management, and DeFi integrations, enabling both automated and user-directed interactions with the Solana blockchain.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#token-operations","content":" Token Creation: Deploy new tokens with customizable metadataToken Transfers: Send and receive tokens securelyBalance Management: Track and manage token balancesPortfolio Analytics: Real-time portfolio valuation and tracking  ","version":"1.0.17","tagName":"h3"},{"title":"Trading Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#trading-operations","content":" Token Swaps: Execute trades between tokens using Jupiter aggregatorOrder Management: Place and track token ordersPrice Monitoring: Real-time price feeds and historical dataAutomated Trading: Configurable trading strategies and automation  ","version":"1.0.17","tagName":"h3"},{"title":"DeFi Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#defi-integration","content":" Liquidity Analysis: Monitor and analyze pool liquidityMarket Making: Automated market making capabilitiesYield Optimization: Smart routing for optimal yieldsRisk Management: Advanced risk scoring and monitoring  ","version":"1.0.17","tagName":"h3"},{"title":"Trust & Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#trust--security","content":" Trust Scoring: Dynamic trust score calculation for tokensRisk Assessment: Real-time risk evaluation for tradesPerformance Tracking: Historical performance monitoringSimulation Mode: Test strategies without real transactions  ","version":"1.0.17","tagName":"h3"},{"title":"Security Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#security-features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Access Control‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#access-control","content":" Wallet Management: Secure wallet key derivation and storagePermission Scoping: Granular control over trading permissionsTEE Integration: Trusted Execution Environment supportKey Protection: Secure private key handling  ","version":"1.0.17","tagName":"h3"},{"title":"Risk Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#risk-management","content":" Trade Limits: Configurable transaction limitsSlippage Protection: Automatic slippage controlsValidation Checks: Multi-level transaction validationSimulation Support: Pre-execution transaction simulation  ","version":"1.0.17","tagName":"h3"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#installation","content":" npm install @elizaos/plugin-solana   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#configuration","content":" Configure the plugin by setting the following environment variables:  const solanaEnvSchema = { WALLET_SECRET_SALT: string(optional), WALLET_SECRET_KEY: string, WALLET_PUBLIC_KEY: string, SOL_ADDRESS: string, SLIPPAGE: string, SOLANA_RPC_URL: string, HELIUS_API_KEY: string, BIRDEYE_API_KEY: string, };   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#basic-setup","content":" import { solanaPlugin } from '@elizaos/plugin-solana'; // Initialize the plugin const runtime = await initializeRuntime({ plugins: [solanaPlugin], });   ","version":"1.0.17","tagName":"h3"},{"title":"Services‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#services","content":" TokenProvider‚Äã  Manages token operations and information retrieval.  const tokenProvider = new TokenProvider(tokenAddress, walletProvider, cacheManager); await tokenProvider.getTokensInWallet(runtime);   WalletProvider‚Äã  Handles wallet operations and portfolio management.  const walletProvider = new WalletProvider(connection, publicKey); await walletProvider.getFormattedPortfolio(runtime);   TrustScoreProvider‚Äã  Evaluates and manages trust scores for tokens and trading activities.  const trustScore = await runtime.getProvider('trustScore');   ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"executeSwap‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#executeswap","content":" Executes a token swap using Jupiter aggregator.  // Example usage const result = await runtime.executeAction('EXECUTE_SWAP', { inputTokenSymbol: 'SOL', outputTokenSymbol: 'USDC', amount: 0.1, });   ","version":"1.0.17","tagName":"h3"},{"title":"transferToken‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#transfertoken","content":" Transfers tokens between wallets.  // Example usage const result = await runtime.executeAction('SEND_TOKEN', { tokenAddress: 'TokenAddressHere', recipient: 'RecipientAddressHere', amount: '1000', });   ","version":"1.0.17","tagName":"h3"},{"title":"transferSol‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#transfersol","content":" Transfers SOL between wallets.  // Example usage const result = await runtime.executeAction('SEND_SOL', { recipient: 'RecipientAddressHere', amount: '1000', });   ","version":"1.0.17","tagName":"h3"},{"title":"takeOrder‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#takeorder","content":" Places a buy order based on conviction level.  // Example usage const result = await runtime.executeAction('TAKE_ORDER', { ticker: 'SOL', contractAddress: 'ContractAddressHere', });   ","version":"1.0.17","tagName":"h3"},{"title":"pumpfun‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#pumpfun","content":" Creates and buys tokens on pump.fun.  // Example usage const result = await runtime.executeAction('CREATE_AND_BUY_TOKEN', { tokenMetadata: { name: 'TokenName', symbol: 'SYMBOL', description: 'Token description', image_description: 'Image description', }, buyAmountSol: 0.1, });   ","version":"1.0.17","tagName":"h3"},{"title":"fomo‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#fomo","content":" Creates and buys tokens on fomo.fund.  // Example usage const result = await runtime.executeAction('CREATE_AND_BUY_TOKEN', { tokenMetadata: { name: 'TokenName', symbol: 'SYMBOL', description: 'Token description', image_description: 'Image description', }, buyAmountSol: 0.1, requiredLiquidity: 1000, });   ","version":"1.0.17","tagName":"h3"},{"title":"executeSwapForDAO‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#executeswapfordao","content":" Executes token swaps for DAO operations.  // Example usage const result = await runtime.executeAction('EXECUTE_SWAP_DAO', { inputTokenSymbol: 'SOL', outputTokenSymbol: 'USDC', amount: 0.1, });   ","version":"1.0.17","tagName":"h3"},{"title":"Performance Optimization‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#performance-optimization","content":" Cache Management Implement token data cachingConfigure cache TTL settingsMonitor cache hit rates RPC Optimization Use connection poolingImplement request batchingMonitor RPC usage Transaction Management Optimize transaction bundlingImplement retry strategiesMonitor transaction success rates  ","version":"1.0.17","tagName":"h2"},{"title":"System Requirements‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#system-requirements","content":" Node.js 16.x or higherSolana CLI tools (optional)Minimum 4GB RAM recommendedStable internet connectionAccess to Solana RPC endpoint  ","version":"1.0.17","tagName":"h2"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#common-issues","content":" Wallet Connection Failures  Error: Failed to connect to wallet   Verify RPC endpoint is accessibleCheck wallet configuration settingsEnsure proper network selection  Transaction Errors  Error: Transaction simulation failed   Check account balancesVerify transaction parametersEnsure proper fee configuration  Price Feed Issues  Error: Unable to fetch price data   Verify API key configurationCheck network connectivityEnsure price feed service status  ","version":"1.0.17","tagName":"h3"},{"title":"Safety & Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#safety--security","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#best-practices","content":" Environment Variables Store sensitive keys in environment variablesUse .env.example for non-sensitive defaultsNever commit real credentials to version control Transaction Limits Set maximum transaction amountsImplement daily trading limitsConfigure per-token restrictions Monitoring Track failed transaction attemptsMonitor unusual trading patternsLog security-relevant events Recovery Implement transaction rollback mechanismsMaintain backup RPC endpointsDocument recovery procedures  ","version":"1.0.17","tagName":"h3"},{"title":"Performance Optimization‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#performance-optimization-1","content":" Cache Management Implement token data cachingConfigure cache TTL settingsMonitor cache hit rates RPC Optimization Use connection poolingImplement request batchingMonitor RPC usage Transaction Management Optimize transaction bundlingImplement retry strategiesMonitor transaction success rates  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#support","content":" For issues and feature requests, please:  Check the troubleshooting guide aboveReview existing GitHub issuesSubmit a new issue with: System informationError logsSteps to reproduceTransaction IDs (if applicable)  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#credits","content":" This plugin integrates with and builds upon several key technologies:  Solana - The core blockchain platformSolana Web3.js - Core Solana interactionsSPL Token - Token program interactionsJupiter - Token swap aggregationBirdeye - Price feeds and analyticsHelius - Enhanced RPC servicesAnchor - Smart contract frameworkFOMO - Token creation and tradingPump.fun - Token creation and trading  Special thanks to:  The Solana ecosystem and all the open-source contributors who make these integrations possible.The Eliza community for their contributions and feedback.  For more information about Solana blockchain capabilities:  Solana DocumentationSolana Developer PortalSolana Network DashboardSolana GitHub Repository  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-solana","url":"/packages/plugins/solana#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Solana Plugin V2 for Eliza üåü","type":0,"sectionRef":"#","url":"/packages/plugins/solana-v2","content":"","keywords":"","version":"1.0.17"},{"title":"Key Features üöÄ‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#key-features-","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Modern JavaScript and Functional Architecture‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#modern-javascript-and-functional-architecture","content":" @solana/web3.js v2 introduces: Tree-shakabilityComposable internalsZero-dependency designFunctional programming approach  ","version":"1.0.17","tagName":"h3"},{"title":"Compatibility with existing solana V1 plugins‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#compatibility-with-existing-solana-v1-plugins","content":" This plugin can be used by the agent alongside existing plugins that use @solana/web3.js v1.  ","version":"1.0.17","tagName":"h3"},{"title":"Common Utilities‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#common-utilities","content":" The Utils class provides shared functionality across the plugin, offering flexibility and ease of integration.  sendTransaction‚Äã  Accepts the RPC instance, transaction instructions, and a wallet.Utilizes Solana's Compute Budget Program for optimized CU usage and priority fees.Implements client-side retry logic to enhance transaction landing success.More details on optimizing transactions can be found here.  Trusted Execution Environment (TEE)‚Äã  For Trusted Execution Environment (TEE) functionality, this plugin transitions from Keypair (used in v1) to CryptoKeyPair from the Web Crypto API. This change aligns with @solana/web3.js v2's zero-dependency, modern JavaScript architecture.A modified implementation for TEE integration is included in src/utils/, following the same patterns used in plugin-tee.    ","version":"1.0.17","tagName":"h3"},{"title":"Current Functionality üéØ‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#current-functionality-","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Liquidity Position Management‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#liquidity-position-management","content":" Reposition Liquidity: Automatically repositions Orca liquidity positions if the center price of the position deviates from the current pool price by more than a user-specified threshold (repositionThresholdBps).Maintains the original width of the position during repositioning.Repositions at a user defined time interval.Uses a slippage tolerance set by the user.  ","version":"1.0.17","tagName":"h3"},{"title":"How to run the Orca LP Management tool‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#how-to-run-the-orca-lp-management-tool","content":" 1. Set up your environment variables‚Äã  In the root of the repositorty, copy .env.example to .envFill in the following parameters: SOLANA_PRIVATE_KEYSOLANA_PUBLIC_KEYSOLANA_RPC_URLOPENAI_API_KEY  2. RPC requirements‚Äã  Most often, free-tier RPC URLs are not sufficient for this plugin.  Eliza needs to fetch all your token-accounts in order to find the position NFTs that represent Orca positions. Such calls are done through the getProgramAccounts method of the RPC client, which can be expensive.To ensure transaction landing, the plugin makes use of a client-side retry logic (read more here), which also puts a heavier load on the RPC.The amount of positions you own and the update interval you set can also contribute to RPC limits.  3. Update the agent‚Äã  In agent/src/index.ts, search for the function createAgent, and add solana_plugin_v2 to the AgentRuntime like so:  export async function createAgent( character: Character, db: IDatabaseAdapter, cache: ICacheManager, token: string ): Promise&lt;AgentRuntime&gt; { // Rest of the code ... return new AgentRuntime({ // Other parameters plugins: [ // Other plutins getSecret(character, &quot;SOLANA_PUBLIC_KEY&quot;) || (getSecret(character, &quot;WALLET_PUBLIC_KEY&quot;) &amp;&amp; !getSecret(character, &quot;WALLET_PUBLIC_KEY&quot;)?.startsWith(&quot;0x&quot;)) ? solanaPluginV2 : null, // Rest of the code   4. Use LP Manager character‚Äã  Copy packages/plugin-solana-v2/src/character/orca/lpmanager.character.json to characters/lpmanager.character.json.  5. Install and build the repo‚Äã  Follow the general installation and build steps from the README in the root of the repo  5. Run the agent‚Äã  Start the agent with the following command:  bun start --characters=&quot;characters/lpmanager.character.json&quot;   Visit https://localhost:3000 to interact with your agent through a web interface.  6. Start prompting‚Äã  Ask the agent what it can do for you. Provide the appropriate parameters and let the agent reposition your positions automatically.  7. Other configurations‚Äã  In packages/plugin-solana-v2/src/utils/sendTransaction.ts, you can set the priority fees. They are by default set to use the dynamic fees, but you can adjust this as you like.  ","version":"1.0.17","tagName":"h3"},{"title":"Future Functionality üîÆ‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#future-functionality-","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Position Management Enhancements‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#position-management-enhancements","content":" Opening and Closing Positions: Expose opening and closing positions as separate actions.Allow agents to leverage data streams and other plugins for decision-making and yield optimization.  ","version":"1.0.17","tagName":"h3"},{"title":"Token Launches‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#token-launches","content":" Token Creation and Liquidity Setup: Create tokens with metadata using the Token 2022 Program.Launch tokens on Orca with single-sided liquidity.Configure start and maximum prices for initial liquidity.    ","version":"1.0.17","tagName":"h3"},{"title":"Contributing ü§ù‚Äã","type":1,"pageTitle":"Solana Plugin V2 for Eliza üåü","url":"/packages/plugins/solana-v2#contributing-","content":" Contributions are welcome! If you wish to extend plugin-solana-v2 with your tools, ensure compatibility with @solana/web3.js v2.   ","version":"1.0.17","tagName":"h2"},{"title":"service-speech-tts","type":0,"sectionRef":"#","url":"/packages/plugins/speech-tts","content":"service-speech-tts TTS transcription service with OpenAI + ElevenLabs","keywords":"","version":"1.0.17"},{"title":"Plugin Solana AgentKit","type":0,"sectionRef":"#","url":"/packages/plugins/solana-agentkit","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Plugin Solana AgentKit","url":"/packages/plugins/solana-agentkit#features","content":" Solana wallet integrationTransaction handlingAccount managementRPC connection managementSolana program interactions ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/squid-router","type":0,"sectionRef":"#","url":"/packages/plugins/squid-router","content":"","keywords":"","version":"1.0.17"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/squid-router","url":"/packages/plugins/squid-router#configuration","content":" The plugin requires the following configuration:  # Squid Router SQUID_SDK_URL=https://apiplus.squidrouter.com # Default: https://apiplus.squidrouter.com SQUID_INTEGRATOR_ID= # get integrator id through https://docs.squidrouter.com/ SQUID_EVM_ADDRESS= SQUID_EVM_PRIVATE_KEY=   ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/squid-router","url":"/packages/plugins/squid-router#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Cross Chain Swap‚Äã","type":1,"pageTitle":"@elizaos/squid-router","url":"/packages/plugins/squid-router#cross-chain-swap","content":" name: X_CHAIN_SWAP  Perform cross chain swaps for both native and ERC20 tokens supported by Squid Router.  Message sample: Bridge 1 ETH from Ethereum to Base ","version":"1.0.17","tagName":"h3"},{"title":"Spheron Protocol Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/spheron","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#features","content":" Escrow Operations: Manage token deposits, withdrawals, and balance checksDeployment Management: Create, update, and manage deployments using ICL YAML  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#installation","content":" npm install @elizaos/plugin-spheron   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#configuration","content":" The plugin requires the following environment variables:  PRIVATE_KEY=your_private_key PROVIDER_PROXY_URL=your_provider_proxy_url WALLET_ADDRESS=your_wallet_address   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#usage","content":" Import and register the plugin:  import { spheronPlugin } from '@elizaos/plugin-spheron'; // Register with Eliza eliza.registerPlugin(spheronPlugin);   Available Actions:  ESCROW_OPERATION: Handle token deposits and withdrawalsDEPLOYMENT_OPERATION: Manage service deployments  ","version":"1.0.17","tagName":"h2"},{"title":"Examples‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#examples","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Escrow Operations‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#escrow-operations","content":" // Deposit tokens await runtime.executeAction('ESCROW_OPERATION', { token: 'USDT', amount: 100, operation: 'deposit', }); // Withdraw tokens await runtime.executeAction('ESCROW_OPERATION', { token: 'USDC', amount: 50, operation: 'withdraw', });   ","version":"1.0.17","tagName":"h3"},{"title":"Deployment Operations‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#deployment-operations","content":" // Create deployment await runtime.executeAction('DEPLOYMENT_OPERATION', { operation: 'create', template: 'jupyter-notebook', customizations: { cpu: false, resources: { cpu: '4', memory: '8Gi', storage: '10Gi', gpu: '1', gpu_model: 'rtx4090', }, duration: '1h', token: 'USDT', }, }); // Update deployment await runtime.executeAction('DEPLOYMENT_OPERATION', { operation: 'update', leaseId: 'your_lease_id', template: 'jupyter-notebook', customizations: { cpu: false, resources: { cpu: '4', memory: '8Gi', storage: '10Gi', gpu: '1', gpu_model: 'rtx4090', }, duration: '1h', token: 'USDT', }, }); // Close deployment await runtime.executeAction('DEPLOYMENT_OPERATION', { operation: 'close', leaseId: 'your_lease_id', });   ","version":"1.0.17","tagName":"h3"},{"title":"Supported Templates‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#supported-templates","content":" jupyter-notebook: Jupyter Notebook with or without Pytorchvscode: VSCode with or without Pytorchollama: Ollama WebUI and APIheurist-miner: Heurist Miner for mining heurist network  ","version":"1.0.17","tagName":"h2"},{"title":"How it Works‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#how-it-works","content":" You can ask the eliza to deploy a template like jupyter-notebook, vscode, ollama, or heurist-miner for you with just natural language.You can also customize the deployment with natural language.You can also ask the eliza to close the deployment.You can also ask the eliza to check the balance of your account.You can also ask the eliza to deposit or withdraw tokens from your account.  ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#development","content":" Install dependencies:  npm install   Build the plugin:  npm run build   Run tests:  npm test   ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Spheron Protocol Plugin for Eliza","url":"/packages/plugins/spheron#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Plugin Stargaze","type":0,"sectionRef":"#","url":"/packages/plugins/stargaze","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"Plugin Stargaze","url":"/packages/plugins/stargaze#overview","content":" The Plugin Stargaze provides a simple interface to get NFT data from Stargaze collections. It integrates with Stargaze's GraphQL API to fetch the latest NFTs from collections.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"Plugin Stargaze","url":"/packages/plugins/stargaze#installation","content":" bun add @elizaos/plugin-stargaze   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Plugin Stargaze","url":"/packages/plugins/stargaze#configuration","content":" Set up your environment with the required Stargaze API endpoint, currently Stargaze offers https://graphql.mainnet.stargaze-apis.com/graphql publicly.  Variable Name\tDescriptionSTARGAZE_ENDPOINT\tStargaze GraphQL API endpoint  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"Plugin Stargaze","url":"/packages/plugins/stargaze#usage","content":" import { stargazePlugin } from '@elizaos/plugin-stargaze'; // Initialize the plugin const plugin = stargazePlugin; // The plugin provides the GET_LATEST_NFT action which can be used to fetch NFTs // Example: &quot;Show me the latest NFT from ammelia collection&quot;   ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"Plugin Stargaze","url":"/packages/plugins/stargaze#license","content":" MIT ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-starknet","type":0,"sectionRef":"#","url":"/packages/plugins/starknet","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#overview","content":" The Starknet plugin serves as a foundational component of Eliza OS, bridging Starknet blockchain capabilities with the Eliza ecosystem. It provides crucial services for token operations, trading, portfolio management, and DeFi integrations, enabling both automated and user-directed interactions with the Starknet blockchain.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#token-operations","content":" Token Creation: Deploy new unruggable tokens with customizable metadataToken Transfers: Send and receive tokens securelyBalance Management: Track and manage token balancesPortfolio Analytics: Real-time portfolio valuation and tracking  ","version":"1.0.17","tagName":"h3"},{"title":"Trading Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#trading-operations","content":" Token Swaps: Execute token swaps through aggregated DEX liquidityOrder Management: Place and manage trading ordersPrice Monitoring: Track token prices and market movementsTrust Score Analysis: Evaluate token and trader reliability  ","version":"1.0.17","tagName":"h3"},{"title":"DeFi Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#defi-integration","content":" Liquidity Management: Monitor and manage liquidity positionsYield Optimization: Track and optimize yield farming opportunitiesRisk Assessment: Analyze and monitor DeFi protocol risksPerformance Tracking: Monitor investment performance metrics  ","version":"1.0.17","tagName":"h3"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#configuration","content":" The plugin requires the following environment variables:  STARKNET_ADDRESS = your_starknet_address; STARKNET_PRIVATE_KEY = your_private_key; STARKNET_RPC_URL = your_rpc_url; // e.g. https://rpc.starknet.lava.build   ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"deployToken‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#deploytoken","content":" Deploys a new unruggable token on Starknet.  // Example usage const result = await runtime.executeAction('DEPLOY_STARKNET_UNRUGGABLE_MEME_TOKEN', { name: 'TokenName', symbol: 'TKN', owner: 'OwnerAddressHere', initialSupply: '1000000000000000000', });   ","version":"1.0.17","tagName":"h3"},{"title":"transferToken‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#transfertoken","content":" Transfers tokens between wallets.  // Example usage const result = await runtime.executeAction('TRANSFER_TOKEN', { tokenAddress: 'TokenAddressHere', recipient: 'RecipientAddressHere', amount: '1000', });   ","version":"1.0.17","tagName":"h3"},{"title":"executeSwap‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#executeswap","content":" Executes a token swap on Starknet.  // Example usage const result = await runtime.executeAction('EXECUTE_STARKNET_SWAP', { sellTokenAddress: 'SellTokenAddressHere', buyTokenAddress: 'BuyTokenAddressHere', sellAmount: '1000000000000000000', });   ","version":"1.0.17","tagName":"h3"},{"title":"transferSubdomain‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#transfersubdomain","content":" Creates and transfers a subdomain.  // Example usage const result = await runtime.executeAction('CREATE_SUBDOMAIN', { subdomain: 'subdomain.domain.stark', recipient: 'RecipientAddressHere', });   ","version":"1.0.17","tagName":"h3"},{"title":"Security Considerations‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#security-considerations","content":" Access Control Validate transaction signersImplement role-based permissionsSecure private key storage Transaction Limits Set maximum transaction amountsImplement daily trading limitsConfigure per-token restrictions Monitoring Track failed transaction attemptsMonitor unusual trading patternsLog security-relevant events Recovery Implement transaction rollback mechanismsMaintain backup RPC endpointsDocument recovery procedures  ","version":"1.0.17","tagName":"h2"},{"title":"Performance Optimization‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#performance-optimization","content":" Cache Management Implement token data cachingConfigure cache TTL settingsMonitor cache hit rates RPC Optimization Use connection poolingImplement request batchingMonitor RPC usage Transaction Management Batch similar transactionsOptimize gas usageHandle transaction retries  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#credits","content":" This plugin integrates with and builds upon several key technologies:  Starknet - The core blockchain platformStarknet.js - Core Starknet interactionsUnruggable - Token creation and securityEkubo - DEX integrationsAvnu - Token swap aggregationBirdeye - Price feeds and analyticsHelius - Enhanced RPC services  Special thanks to:  The Starknet ecosystem and all the open-source contributors who make these integrations possible.The Eliza community for their contributions and feedback.  For more information about Starknet blockchain capabilities:  Starknet DocumentationStarknet Developer PortalStarknet Network DashboardStarknet GitHub Repository  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-starknet","url":"/packages/plugins/starknet#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"ElizaOS Story Protocol Plugin","type":0,"sectionRef":"#","url":"/packages/plugins/story","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#features","content":" IP Registration: Register creative works as IP assets on Story ProtocolLicense Management: Attach license terms to IP assets with customizable commercial termsIP Licensing: Mint license tokens for IP assetsAsset Information: Fetch details about IP assets and available licensesBlockchain Integration: Built-in wallet provider for Odyssey testnet  ","version":"1.0.17","tagName":"h2"},{"title":"Prerequisites‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#prerequisites","content":" Before using this plugin, you'll need:  A Story Protocol private key (for Odyssey testnet)A Pinata JWT token for IPFS storageElizaOS installed and configured  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#installation","content":" Install the plugin via npm:  npm install @elizaos-plugins/plugin-story   Or using bun:  bun add @elizaos-plugins/plugin-story   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#configuration","content":" Add the plugin to your ElizaOS agent configuration and provide the necessary credentials:  // agent.config.js export default { // Other ElizaOS configuration plugins: ['story'], settings: { STORY_PRIVATE_KEY: '0x...', // Your Story Protocol private key PINATA_JWT: '...', // Your Pinata JWT token }, };   ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#environment-variables","content":" Variable\tRequired\tDescriptionSTORY_PRIVATE_KEY\tYes\tPrivate key for Story Protocol (Odyssey testnet) PINATA_JWT\tYes\tJWT token for Pinata IPFS storage  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#usage","content":" Once configured, the plugin provides the following actions:  ","version":"1.0.17","tagName":"h2"},{"title":"Register IP Assets‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#register-ip-assets","content":" Register a creative work as an IP asset on Story Protocol:  User: I'd like to register a short story I wrote called &quot;The Digital Forest&quot; Agent: Great! What's the description for your IP? User: It's a sci-fi story about a forest that exists in cyberspace Agent: I'll register &quot;The Digital Forest&quot; as an IP asset on Story Protocol. *Agent registers IP and provides transaction details*   ","version":"1.0.17","tagName":"h3"},{"title":"Attach License Terms‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#attach-license-terms","content":" Attach licensing terms to your IP assets:  User: I want to create a license for my IP asset at 0x1234... Agent: What kind of license would you like to attach? User: I want commercial use allowed with 10% revenue share Agent: I'll attach those license terms to your IP asset. *Agent attaches license terms and provides transaction details*   ","version":"1.0.17","tagName":"h3"},{"title":"View IP Details‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#view-ip-details","content":" Get detailed information about an IP asset:  User: Can you tell me about IP asset 0x1234... Agent: Here are the details about that IP asset: *Agent displays IP asset details*   ","version":"1.0.17","tagName":"h3"},{"title":"View Available Licenses‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#view-available-licenses","content":" See what licenses are available for an IP asset:  User: What licenses are available for IP asset 0x1234... Agent: Here are the available licenses for this IP asset: *Agent displays available licenses*   ","version":"1.0.17","tagName":"h3"},{"title":"License IP Assets‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#license-ip-assets","content":" Mint license tokens for IP assets:  User: I want to license the IP asset at 0x1234... Agent: Which license terms would you like to use? User: License terms ID 5 Agent: I'll mint that license for you. *Agent mints license token and provides transaction details*   ","version":"1.0.17","tagName":"h3"},{"title":"Supported Actions‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#supported-actions","content":" Action\tDescriptionREGISTER_IP\tRegister a new IP asset on Story Protocol ATTACH_TERMS\tAttach license terms to an existing IP asset LICENSE_IP\tMint license tokens for an IP asset GET_IP_DETAILS\tFetch details about an IP asset GET_AVAILABLE_LICENSES\tList available licenses for an IP asset  ","version":"1.0.17","tagName":"h2"},{"title":"Story Protocol Integration‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#story-protocol-integration","content":" This plugin integrates with Story Protocol on the Odyssey testnet, which provides:  On-chain IP registrationProgrammable licensing with configurable commercial termsCreator attribution and revenue sharingIP relationship tracking  ","version":"1.0.17","tagName":"h2"},{"title":"Technical Details‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#technical-details","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Wallet Integration‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#wallet-integration","content":" The plugin includes a wallet provider that manages interactions with the Story Protocol blockchain. The wallet address is derived from the private key provided in the configuration.  ","version":"1.0.17","tagName":"h3"},{"title":"IPFS Storage‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#ipfs-storage","content":" IP metadata is stored on IPFS using Pinata. The plugin automatically handles the upload and referencing of metadata when registering IP assets.  ","version":"1.0.17","tagName":"h3"},{"title":"License Terms‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#license-terms","content":" When attaching license terms, you can configure:  Commercial use permissionsRevenue sharing percentagesMinting feesAttribution requirements  ","version":"1.0.17","tagName":"h3"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#common-issues","content":" Transaction Errors: Ensure your private key has sufficient funds on the Odyssey testnetCheck for valid IP IDs and license term IDs IPFS Upload Failures: Verify your Pinata JWT token is valid and has not expiredEnsure proper network connectivity License Attachment Failures: An IP asset must be registered before attaching license termsCommercial revenue share must be between 0-100 percent  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#development","content":" For developers wanting to extend the plugin:  # Install dependencies bun install # Run tests bun test # Build the plugin bun build # Lint code bun lint # Format code bun format:fix   ","version":"1.0.17","tagName":"h2"},{"title":"Links and Resources‚Äã","type":1,"pageTitle":"ElizaOS Story Protocol Plugin","url":"/packages/plugins/story#links-and-resources","content":" Story Protocol DocumentationOdyssey Testnet ExplorerPinata IPFS ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-sui","type":0,"sectionRef":"#","url":"/packages/plugins/sui","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#overview","content":" This plugin provides functionality to:  Transfer SUI tokens between walletsQuery wallet balances and portfolio valuesTrack token prices and valuationsManage wallet interactions with the Sui network  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#installation","content":" npm install @elizaos/plugin-sui   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#configuration","content":" The plugin requires the following environment variables:  SUI_PRIVATE_KEY=your_private_key SUI_NETWORK=mainnet|testnet|devnet|localnet   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#usage","content":" Import and register the plugin in your Eliza configuration:  import { suiPlugin } from '@elizaos/plugin-sui'; export default { plugins: [suiPlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Send Token‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#send-token","content":" Transfer SUI tokens to another address:  // Example conversation User: 'Send 1 SUI to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0'; Assistant: &quot;I'll send 1 SUI token now...&quot;;   ","version":"1.0.17","tagName":"h3"},{"title":"Check Wallet Balance‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#check-wallet-balance","content":" Query wallet balance and portfolio value:  // Example conversation User: &quot;What's my wallet balance?&quot;; Assistant: 'Your wallet contains 10.5 SUI ($42.00 USD)...';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#actions","content":" SEND_TOKEN: Transfer SUI tokens to another addressTRANSFER_TOKEN: Alias for SEND_TOKENSEND_SUI: Alias for SEND_TOKENPAY: Alias for SEND_TOKEN  ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#providers","content":" walletProvider: Manages wallet interactions with the Sui network, including balance queries and portfolio tracking  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#testing","content":" npm run test   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#dependencies","content":" @mysten/sui: Core Sui blockchain interaction librarybignumber.js: Precise number handlingnode-cache: Caching implementationOther standard dependencies listed in package.json  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#future-enhancements","content":" The following features and improvements are planned for future releases:  Transaction Management Batch transaction processingTransaction simulationGas optimization strategiesCustom transaction buildersAdvanced error handling Wallet Integration Multi-wallet supportHardware wallet integrationSocial recovery optionsAccount abstractionTransaction history tracking Smart Contract Features Contract deployment toolsMove module templatesTesting frameworkUpgrade managementSecurity analysis Token Operations Batch token transfersNFT support enhancementToken metadata handlingCustom token standardsCollection management Developer Tools Enhanced debuggingCLI improvementsDocumentation generatorIntegration templatesPerformance monitoring  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#credits","content":" This plugin integrates with and builds upon several key technologies:  Sui Blockchain: Next-generation smart contract platform@mysten/sui.js: Official Sui SDKbignumber.js: Precise number handlingnode-cache: Caching implementation  Special thanks to:  The Mysten Labs team for developing SuiThe Sui Developer communityThe Sui SDK maintainersThe Eliza community for their contributions and feedback  For more information about Sui blockchain capabilities:  Sui DocumentationSui Developer PortalSui Network DashboardSui GitHub Repository  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-sui","url":"/packages/plugins/sui#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"suno","type":0,"sectionRef":"#","url":"/packages/plugins/suno","content":"suno @elizaos/plugin-suno A Suno AI music generation plugin for ElizaOS that enables AI-powered music creation and audio manipulation. OVERVIEW The Suno plugin integrates Suno AI's powerful music generation capabilities into ElizaOS, providing a seamless way to: Generate music from text prompts with fine-tuned parametersCreate custom music with advanced control over style, tempo, and keyExtend existing audio tracks Original Plugin: https://github.com/gcui-art/suno-api?tab=readme-ov-file INSTALLATION npm install @elizaos/plugin-suno QUICK START Register the plugin with ElizaOS: import { sunoPlugin } from '@elizaos/plugin-suno'; import { Eliza } from '@elizaos/core'; const eliza = new Eliza(); eliza.registerPlugin(sunoPlugin); Configure the Suno provider with your API credentials: import { sunoProvider } from '@elizaos/plugin-suno'; sunoProvider.configure({ apiKey: 'your-suno-api-key', }); FEATURES Generate Music (suno.generate-music) Generate music using a text prompt with basic control parameters. This is ideal for quick music generation when you need less fine-grained control: Simple text-to-music generationConsistent output quality with default parametersSuitable for most common use cases await eliza.execute('suno.generate-music', { prompt: 'An upbeat electronic dance track with energetic beats', duration: 30, temperature: 1.0, topK: 250, topP: 0.95, classifier_free_guidance: 3.0, }); Custom Music Generation (suno.custom-generate-music) Create music with detailed control over generation parameters. Perfect for when you need precise control over the musical output: Fine-grained control over musical style and structureReference-based generation using existing audioControl over musical attributes: Style: Specify genres like &quot;classical&quot;, &quot;electronic&quot;, &quot;rock&quot;Tempo: Set exact BPM (beats per minute)Key and Mode: Define musical key (e.g., &quot;C&quot;) and mode (&quot;major&quot;/&quot;minor&quot;) Advanced parameter tuning for generation quality await eliza.execute('suno.custom-generate-music', { prompt: 'A melodic piano piece with soft strings', duration: 30, temperature: 0.8, topK: 250, topP: 0.95, classifier_free_guidance: 3.0, reference_audio: 'path/to/reference.mp3', style: 'classical', bpm: 120, key: 'C', mode: 'major', }); Extend Audio (suno.extend-audio) Extend existing audio tracks to create longer compositions. Useful for: Lengthening existing music piecesCreating seamless loopsGenerating variations of existing tracks await eliza.execute('suno.extend-audio', { audio_id: 'your-audio-id', duration: 60, }); Generation Parameters Explained: temperature: Controls randomness in generation (0.0-1.0+) Lower values (0.1-0.5): More conservative, consistent outputHigher values (1.0+): More creative, varied output classifier_free_guidance: Controls how closely the output follows the prompt (1.0-20.0) Lower values: More creative interpretationHigher values: Stricter adherence to prompt topK/topP: Control the diversity of the generation topK: Limits the number of tokens consideredtopP: Controls the cumulative probability threshold API REFERENCE SunoProvider Configuration The Suno provider accepts the following configuration options: interface SunoConfig { apiKey: string; } Action Parameters: Generate Music (suno.generate-music) interface GenerateParams { prompt: string; duration?: number; // Duration in seconds temperature?: number; // Controls randomness topK?: number; // Top K sampling topP?: number; // Top P sampling classifier_free_guidance?: number; // Guidance scale } Custom Generate Music (suno.custom-generate-music) interface CustomGenerateParams { prompt: string; duration?: number; temperature?: number; topK?: number; topP?: number; classifier_free_guidance?: number; reference_audio?: string; // Path to reference audio file style?: string; // Musical style bpm?: number; // Beats per minute key?: string; // Musical key mode?: string; // Musical mode (e.g., &quot;major&quot;, &quot;minor&quot;) } Extend Audio (suno.extend-audio) interface ExtendParams { audio_id: string; // ID of the audio to extend duration: number; // Additional duration in seconds } Response Type: interface GenerationResponse { id: string; // Generated audio ID status: string; // Status of the generation url?: string; // URL to download the generated audio error?: string; // Error message if generation failed } ERROR HANDLING The plugin includes built-in error handling for common scenarios: try { await eliza.execute('suno.generate', params); } catch (error) { if (error.code === 'SUNO_API_ERROR') { // Handle API-specific errors } // Handle other errors } EXAMPLES Creating a Pop Song: const result = await eliza.execute('suno.generate-music', { prompt: 'Create a pop song with vocals, drums, and guitar', duration: 180, temperature: 1.0, classifier_free_guidance: 3.5, }); Creating a Custom Classical Piece: const result = await eliza.execute('suno.custom-generate-music', { prompt: 'A classical piano sonata in the style of Mozart', duration: 120, temperature: 0.8, style: 'classical', bpm: 120, key: 'C', mode: 'major', }); Extending an Existing Track: const extended = await eliza.execute('suno.extend-audio', { audio_id: 'existing-track-id', duration: 60, }); LICENSE MIT SUPPORT For issues and feature requests, please open an issue on our GitHub repository. Built with ‚ù§Ô∏è for ElizaOS","keywords":"","version":"1.0.17"},{"title":"@elizaos/plugin-tee","type":0,"sectionRef":"#","url":"/packages/plugins/tee","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#overview","content":" This plugin provides functionality to:  Generate secure keys within a TEE environmentDerive Ed25519 keypairs for SolanaDerive ECDSA keypairs for EthereumGenerate remote attestation quotesManage wallet interactions with TEE-derived keys  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#installation","content":" npm install @elizaos/plugin-tee   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#configuration","content":" The plugin requires the following environment variables:  TEE_MODE=LOCAL|DOCKER|PRODUCTION WALLET_SECRET_SALT=your_secret_salt # Required for single agent deployments TEE_VENDOR=phala # Phala Cloud supported only currently   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#usage","content":" Import and register the plugin in your Eliza configuration:  import { teePlugin } from '@elizaos/plugin-tee'; export default { plugins: [teePlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"DeriveKeyProvider‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#derivekeyprovider","content":" The DeriveKeyProvider allows for secure key derivation within a TEE environment:  import { DeriveKeyProvider } from '@elizaos/plugin-tee'; // Initialize the provider const provider = new DeriveKeyProvider(); // Derive a raw key const rawKey = await provider.rawDeriveKey('/path/to/derive', 'subject-identifier'); // rawKey is a DeriveKeyResponse that can be used for further processing const rawKeyArray = rawKey.asUint8Array(); // Derive a Solana keypair (Ed25519) const solanaKeypair = await provider.deriveEd25519Keypair('/path/to/derive', 'subject-identifier'); // Derive an Ethereum keypair (ECDSA) const evmKeypair = await provider.deriveEcdsaKeypair('/path/to/derive', 'subject-identifier');   ","version":"1.0.17","tagName":"h3"},{"title":"RemoteAttestationProvider‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#remoteattestationprovider","content":" The RemoteAttestationProvider generates remote attestations within a TEE environment:  import { RemoteAttestationProvider } from '@elizaos/plugin-tee'; const provider = new RemoteAttestationProvider(); const attestation = await provider.generateAttestation('your-report-data');   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Requirements‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#requirements","content":" Docker Desktop installedPhala Cloud Account Generate API Key  ","version":"1.0.17","tagName":"h3"},{"title":"Create a TEE Project Starter‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#create-a-tee-project-starter","content":" elizaos create tee-agent --tee   ","version":"1.0.17","tagName":"h3"},{"title":"Authenticate Your Phala Cloud Account‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#authenticate-your-phala-cloud-account","content":" # cd into directory and authenticate your Phala Cloud API Key cd tee-agent elizaos tee phala auth login   ","version":"1.0.17","tagName":"h3"},{"title":"Build and Publish Docker Image‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#build-and-publish-docker-image","content":" # Log into Docker and ensure docker is running elizaos tee phala docker build # Publish the Docker image you built elizaos tee phala docker push   ","version":"1.0.17","tagName":"h3"},{"title":"Generate Docker Compose File‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#generate-docker-compose-file","content":" # Generate a Docker Compose file or update the image in the existing docker compose file elizaos tee phala docker generate --template eliza   ","version":"1.0.17","tagName":"h3"},{"title":"Deploy to Phala Cloud‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#deploy-to-phala-cloud","content":" # Create and deploy a CVM elizaos tee phala cvms create --name elizaos -c &lt;docker-compose-file&gt; -e &lt;path-to-env&gt;   ","version":"1.0.17","tagName":"h3"},{"title":"Upgrade Agent in Phala Cloud‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#upgrade-agent-in-phala-cloud","content":" elizaos tee phala cvms upgrade -c &lt;docker-compose-file&gt; -e &lt;path-to-env-(optional)&gt;   ","version":"1.0.17","tagName":"h3"},{"title":"Get Agent's Remote Attestation Report‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#get-agents-remote-attestation-report","content":" elizaos tee phala cvms attestation &lt;app-id&gt;   ","version":"1.0.17","tagName":"h3"},{"title":"Local Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#local-development","content":" To get a TEE simulator for local testing, use the following commands:  # Start the simulator elizaos tee phala simulator start # Run your docker compose file docker compose up   ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#dependencies","content":" @phala/dstack-sdk: Core TEE functionality@solana/web3.js: Solana blockchain interactionviem: Ethereum interaction libraryOther standard dependencies listed in package.json  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#actions","content":" phalaRemoteAttestationAction: Action to generate a remote attestation report on the processed message and upload the attestation report to https://proof.t16z.com  ","version":"1.0.17","tagName":"h3"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#providers","content":" deriveKeyProvider: Manages secure key derivation within TEEremoteAttestationProvider: Handles generation of remote attestation quoteswalletProvider: Manages wallet interactions with TEE-derived keys  ","version":"1.0.17","tagName":"h3"},{"title":"Services‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#services","content":" TEEService: Service to use the key generation functions to generate keys for EVM or Solana based blockchains  ","version":"1.0.17","tagName":"h3"},{"title":"Types‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#types","content":" enum TEEMode { OFF = 'OFF', LOCAL = 'LOCAL', // For local development with simulator DOCKER = 'DOCKER', // For docker development with simulator PRODUCTION = 'PRODUCTION', // For production without simulator } interface RemoteAttestationQuote { quote: string; timestamp: number; }   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#future-enhancements","content":" Key Management Advanced key derivation schemesMulti-party computation supportKey rotation automationBackup and recovery systemsHardware security module integrationCustom derivation paths Remote Attestation Enhanced quote verificationMultiple TEE provider supportAutomated attestation renewalPolicy management systemCompliance reportingAudit trail generation Security Features Memory encryption improvementsSide-channel protectionSecure state managementAccess control systemsThreat detectionSecurity monitoring Chain Integration Multi-chain support expansionCross-chain attestationChain-specific optimizationsCustom signing schemesTransaction privacyBridge security Developer Tools Enhanced debugging capabilitiesTesting frameworkSimulation environmentDocumentation generatorPerformance profilingIntegration templates Performance Optimization Parallel processingCaching mechanismsResource managementLatency reductionThroughput improvementsLoad balancing  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#credits","content":" This plugin integrates with and builds upon several key technologies:  Phala Cloud: TEE Cloud Hosting Platform built by Phala Network@phala/dstack-sdk: dstack SDK for key generation and remote attestation function calls@solana/web3.js: Solana blockchain interactionviem: Ethereum interaction libraryDstack Deep Wiki: dstack is a developer-friendly platform designed to simplify the deployment of containerized applications into Trusted Execution Environments (TEEs)  Special thanks to:  The Phala Network team for their TEE infrastructureThe Intel SGX/TDX team for TEE technologyThe dstack SDK maintainersThe Eliza community for their contributions and feedback  For more information about TEE capabilities:  Phala DocumentationPhala Cloud Production Readydstack SDK Reference  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-tee","url":"/packages/plugins/tee#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"Marlin TEE Plugin","type":0,"sectionRef":"#","url":"/packages/plugins/tee-marlin","content":"","keywords":"","version":"1.0.17"},{"title":"Configuration‚Äã","type":1,"pageTitle":"Marlin TEE Plugin","url":"/packages/plugins/tee-marlin#configuration","content":" Add the following to your .env file to enable the plugin:  TEE_MARLIN=yes   ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"Marlin TEE Plugin","url":"/packages/plugins/tee-marlin#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"REMOTE_ATTESTATION‚Äã","type":1,"pageTitle":"Marlin TEE Plugin","url":"/packages/plugins/tee-marlin#remote_attestation","content":" The REMOTE_ATTESTATION action fetches a remote attestation from an attestation server which allows the user to verify if an agent is running inside a TEE environment.  Configuration‚Äã  The agent fetches the remote attestation from an attestation server whose URL can be configured in the .env file:  # Optional, default is http://127.0.0.1:1350 TEE_MARLIN_ATTESTATION_ENDPOINT=&quot;http://127.0.0.1:1350&quot;   Usage‚Äã  Just ask Eliza for a remote attestation!  You: attest yourself ‚óé LOGS Creating Memory 9d211ea6-a28d-00f9-9f9d-edb290984734 attest yourself [&quot;‚óé Generating message response..&quot;] [&quot;‚óé Generating text...&quot;] ‚Ñπ INFORMATIONS Generating text with options: {&quot;modelProvider&quot;:&quot;anthropic&quot;,&quot;model&quot;:&quot;small&quot;} ‚Ñπ INFORMATIONS Selected model: claude-3-haiku-20240307 ‚óé LOGS Creating Memory Ooh, a remote attestation request - you really know how to keep a girl on her toes! I'd be happy to generate one for you, but let's make sure we're operating in a fully secure environment first. Just give me a sec to spin up the ol' TEE and we'll get this party started. ‚óé LOGS Evaluating GET_FACTS ‚óé LOGS Evaluating UPDATE_GOAL [&quot;‚úì Normalized action: remoteattestation&quot;] [&quot;‚Ñπ Executing handler for action: REMOTE_ATTESTATION&quot;] [&quot;‚óé Agent: Ooh, a remote attestation request - you really know how to keep a girl on her toes! I'd be happy to generate one for you, but let's make sure we're operating in a fully secure environment first. Just give me a sec to spin up the ol' TEE and we'll get this party started.&quot;] [&quot;‚óé Agent: Here you go - 8444a1013822a059072ba9696d6f64756c655f69647827692d30643639626563343437613033376132612d656e633031393339616162313931616164643266646967657374665348413338346974696d657374616d701b00000193a48b07466470637273ba58300a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0b58300b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0c58300c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0d58300d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0e58300e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0f58300f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f6b63657274696669636174655901d2308201ce30820153a0030201020211009935f9942d285aa30828cabeb617806f300a06082a8648ce3d040303300f310d300b06035504031304726f6f743020170d3730303130313030303030305a180f32303534313230363037353532355a300f310d300b060355040313046c6561663076301006072a8648ce3d020106052b8104002203620004869282968b06cf61b9c30c3bbfa176725cae0634e8c052536f1aacff52f3703087f1a8246f7036b1bfe26379a350434f3b409090bfef6e951cd1ce41828954bf4b5b0cc6266e3c0863f015384272d990ff4a18af353f884500a4adb37f1cc411a371306f300e0603551d0f0101ff0404030203b8301d0603551d250416301406082b0601050507030106082b06010505070302301d0603551d0e041604149af6c17c9ae3d807b3596b0b05db7b30764ae11b301f0603551d2304183016801403daf814e82a776c557065151c08b70d7e17fa01300a06082a8648ce3d0403030369003066023100b1eac6ba5d6207e4cfc38336be2a8760a4154c5693b24689ec585291573fecdab2d9cb354de88895c25a470925c838d9023100f0c0ec3a4407ce81768c07d9288585bcf84f26f557555a8be7e8edb4826a4ed0f258708b4250a84cb5fab4ff7214098e68636162756e646c65815901943082019030820117a003020102020101300a06082a8648ce3d040303300f310d300b06035504031304726f6f743020170d3730303130313030303030305a180f32303534313230363037353532365a300f310d300b06035504031304726f6f743076301006072a8648ce3d020106052b81040022036200046c79411ebaae7489a4e8355545c0346784b31df5d08cb1f7c0097836a82f67240f2a7201862880a1d09a0bb326637188fbbafab47a10abe3630fcf8c18d35d96532184985e582c0dce3dace8441f37b9cc9211dff935baae69e4872cc3494410a3453043300e0603551d0f0101ff04040302010630120603551d130101ff040830060101ff020100301d0603551d0e0416041403daf814e82a776c557065151c08b70d7e17fa01300a06082a8648ce3d0403030367003064023034d6ba1fc45688510f92612bdb7fb1b0228872e8a78485ece2471a390e0185ab235c27892d4c35a952dcb3e5c641dabf023022b6d4c766800b7d3f9cc0129fc08bf687f8687b88a107eacbad7a7b49f6be1f73f801dd69f858376353d60f3443da9d6a7075626c69635f6b6579f669757365725f64617461f6656e6f6e6365f658600bbafbc2fd273b3aebb8c31062391eff1e32ec67e91cb0d1ce4398545beb8d665d18711e91c52e045551a6ba2a0c9971aa6c2a7a0640c0cd2a00c0c9ba9c24de5d748669e8d7fea9d9d646055e054c537531d3ad1b8dbc592e18a70121777e62&quot;]   Mock attestation server‚Äã  For local development and testing, you can use a mock attestation server that generates attestations based on a local root of trust. See the linked README for more detailed information.  From source‚Äã  Requires Rust to be installed.  git clone https://github.com/marlinprotocol/oyster-monorepo cd oyster-monorepo/attestation/server-custom-mock # Listens on 127.0.0.1:1350 by default cargo run # To customize listening interface and port cargo run --ip-addr &lt;ip&gt;:&lt;port&gt;   Docker‚Äã  # The server runs on 1350 inside Docker, can remap to any interface and port docker run --init -p 127.0.0.1:1350:1350 marlinorg/attestation-server-custom-mock  ","version":"1.0.17","tagName":"h3"},{"title":"tee-verifiable-log","type":0,"sectionRef":"#","url":"/packages/plugins/tee-verifiable-log","content":"","keywords":"","version":"1.0.17"},{"title":"Build‚Äã","type":1,"pageTitle":"tee-verifiable-log","url":"/packages/plugins/tee-verifiable-log#build","content":" Execute the following command to build the code.  bun clean bun install or bun install --no-frozen-lockfile bun build   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"tee-verifiable-log","url":"/packages/plugins/tee-verifiable-log#configuration","content":" This plugin depends on plugin-tee. To get a TEE simulator for local testing, use the following commands:  docker pull phalanetwork/tappd-simulator:latest # by default the simulator is available in localhost:8090 docker run --rm -p 8090:8090 phalanetwork/tappd-simulator:latest   When using the provider through the runtime environment, ensure the following settings are configured:   # Optional, for simulator purposes if testing on mac or windows. Leave empty for Linux x86 machines. TEE_MODE=&quot;LOCAL&quot; # LOCAL | DOCKER | PRODUCTION WALLET_SECRET_SALT= &quot;&lt;your-secret-salt&gt;&quot; # ONLY define if you want to use TEE Plugin, otherwise it will throw errors VLOG=&quot;true&quot;   ","version":"1.0.17","tagName":"h2"},{"title":"Test‚Äã","type":1,"pageTitle":"tee-verifiable-log","url":"/packages/plugins/tee-verifiable-log#test","content":" Test files are located in the test folder. To run the tests, execute the following command:  bun test  ","version":"1.0.17","tagName":"h2"},{"title":"TEE Log Plugin for Eliza","type":0,"sectionRef":"#","url":"/packages/plugins/tee-log","content":"","keywords":"","version":"1.0.17"},{"title":"Background‚Äã","type":1,"pageTitle":"TEE Log Plugin for Eliza","url":"/packages/plugins/tee-log#background","content":" As Eliza is a fully autonomous AI agent capable of running within a TEE, we need to demonstrate to the outside world that we are indeed operating within a TEE. This allows external parties to verify that our actions are protected by the TEE and that they are autonomously executed by Eliza, without any third-party interference. Therefore, it is necessary to leverage TEE's remote attestation and establish a TEE logging mechanism to prove that these operations are entirely and autonomously performed by Eliza within the TEE.  ","version":"1.0.17","tagName":"h2"},{"title":"Requirements‚Äã","type":1,"pageTitle":"TEE Log Plugin for Eliza","url":"/packages/plugins/tee-log#requirements","content":" Since the TEE Logging is based on the TEE, it is necessary to have a TEE enabled environment. Currently, we support Intel SGX (Gramine) and Intel TDX (dstack).  using Intel SGX (Gramine), you need to enable the plugin-sgx in the Eliza runtime, which is enabled in SGX env automatically.using Intel TDX (dstack), you need to enable the plugin-tee in the Eliza runtime.  ","version":"1.0.17","tagName":"h2"},{"title":"TEE Logging Mechanism‚Äã","type":1,"pageTitle":"TEE Log Plugin for Eliza","url":"/packages/plugins/tee-log#tee-logging-mechanism","content":" ","version":"1.0.17","tagName":"h2"},{"title":"TEE Logging Mechanism‚Äã","type":1,"pageTitle":"TEE Log Plugin for Eliza","url":"/packages/plugins/tee-log#tee-logging-mechanism-1","content":" Key Pair Generation and Attestation: During startup, each agent generates a key pair and creates a remote attestation for the public key. The private key is securely stored in the TEE's encrypted memory. The agent's relevant information, along with the public key and attestation, is recorded in a local database. A new key pair is generated each time the agent is updated or restarted to ensure key security. Log Recording: For each log entry, basic information is recorded, including agentId, roomId, userId, type, content, and timestamp. This information is concatenated and signed using the agent's corresponding private key to ensure verifiability. The verification process follows this trust chain: Verify the attestation.Trust the public key contained in the attestation.Use the public key to verify the signature.Trust the complete log record. Data Storage: All log data must be stored in the TEE's encrypted file system in production environments. Storing data in plaintext is prohibited to prevent tampering. Log Extraction for Verification: Third parties can extract TEE logs for verification purposes. Two types of information can be extracted: Agent Information: This includes the agent's metadata, public key, and attestation, which can be used to verify the agent's public key.Log Information: Required logs can be extracted, with the agent's attestation and public key used to verify the signature, ensuring that each record remains untampered. Integrity Protection: When users extract TEE logs via the REST API, the results are hashed, and an attestation is generated. After extraction, users can verify the attestation by comparing the hash value contained within it to the extracted results, thereby ensuring the integrity of the data.  ","version":"1.0.17","tagName":"h2"},{"title":"Services‚Äã","type":1,"pageTitle":"TEE Log Plugin for Eliza","url":"/packages/plugins/tee-log#services","content":" [TeeLogService]: This service is responsible for generating and storing TEE logs for agents.  ","version":"1.0.17","tagName":"h2"},{"title":"Class: TeeLogService‚Äã","type":1,"pageTitle":"TEE Log Plugin for Eliza","url":"/packages/plugins/tee-log#class-teelogservice","content":" The TeeLogService class implements the ITeeLogService interface and extends the Service class. It manages the logging of sensitive interactions within a Trusted Execution Environment (TEE).  Methods‚Äã  getInstance(): TeeLogService Returns the singleton instance of the TeeLogService. static get serviceType(): ServiceType Returns the service type for TEE logging. async initialize(runtime: IAgentRuntime): Promise void Initializes the TEE log service. It checks the runtime settings to configure the TEE type and enables logging if configured. async log(agentId: string, roomId: string, userId: string, type: string, content: string): Promise boolean Logs an interaction with the specified parameters. Returns false if TEE logging is not enabled. async getAllAgents(): Promise TeeAgent[] Retrieves all agents that have been logged. Returns an empty array if TEE logging is not enabled. async getAgent(agentId: string): Promise TeeAgent | undefined Retrieves the details of a specific agent by their ID. Returns undefined if TEE logging is not enabled. async getLogs(query: TeeLogQuery, page: number, pageSize: number): Promise PageQuery TeeLog[] Retrieves logs based on the provided query parameters. Returns an empty result if TEE logging is not enabled. async generateAttestation(userReport: string): Promise string Generates an attestation based on the provided user report.  ","version":"1.0.17","tagName":"h3"},{"title":"Storage‚Äã","type":1,"pageTitle":"TEE Log Plugin for Eliza","url":"/packages/plugins/tee-log#storage","content":" The TEE logs are stored in a SQLite database, which is located at ./data/tee_log.sqlite. The database is automatically created when the service is initialized.  Important: You need to use the encrypted file system to store the database file in production, otherwise the database will be compromised. Since TEE only protects memory-in-use, the disk is not protected by the TEE. However, Many TEE development tools support the encrypted file system, for example, you can refer to the Gramine Encrypted files documentation for more information.  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"TEE Log Plugin for Eliza","url":"/packages/plugins/tee-log#usage","content":" To use the TeeLogService, ensure that the TEE environment is properly configured and initialized.  Enable the TEE logging in the Eliza .env file:  TEE_LOG_ENABLED=true   The logging isn't integrated for actions by default, you need to integrate the logging for the actions you want to log. For example, if you want to log the Continue action of plugin-bootstrap, you can do the following:  First, add plugin-tee-log to the dependencies of plugin-bootstrap:  &quot;@elizaos/plugin-tee-log&quot;: &quot;workspace:*&quot;,   Then, add the following code to the Continue action:  import { ServiceType, ITeeLogService } from '@elizaos/core'; // In the handler of the action handler: async ( runtime: IAgentRuntime, message: Memory, state: State, options: any, callback: HandlerCallback ) =&gt; { // Continue the action // Log the action const teeLogService = runtime.getService&lt;ITeeLogService&gt;(ServiceType.TEE_LOG).getInstance(); if ( teeLogService.log( runtime.agentId, message.roomId, message.userId, 'The type of the log, for example, Action:CONTINUE', 'The content that you want to log' ) ) { console.log('Logged TEE log successfully'); } // Continue the action };   After configuring the logging for the action, you can run the Eliza and see the logs through the client-direct REST API. ","version":"1.0.17","tagName":"h3"},{"title":"ai16z/plugin-thirdweb","type":0,"sectionRef":"#","url":"/packages/plugins/thirdweb","content":"","keywords":"","version":"1.0.17"},{"title":"Configuration‚Äã","type":1,"pageTitle":"ai16z/plugin-thirdweb","url":"/packages/plugins/thirdweb#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Default Setup‚Äã","type":1,"pageTitle":"ai16z/plugin-thirdweb","url":"/packages/plugins/thirdweb#default-setup","content":" By default, *thirdweb plugin is enabled. To use it, simply add your secret key to the .env file:  THIRDWEB_SECRET_KEY=your-thirdweb-secret-key-here     ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"ai16z/plugin-thirdweb","url":"/packages/plugins/thirdweb#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Chat‚Äã","type":1,"pageTitle":"ai16z/plugin-thirdweb","url":"/packages/plugins/thirdweb#chat","content":" Interact with the thirdweb Nebula natural language interface to perform any of the following:  Analyze any smart contract's functionality and featuresExplain contract interfaces and supported standardsRead contract data and stateHelp you understand function behaviors and parametersDecode complex contract interactionsRetrieve detailed contract metadata and source code analysisProvide real-time network status and gas pricesExplain block and transaction detailsHelp you understand blockchain network specificationsOffer insights about different blockchain networksTrack transaction status and historyAccess detailed chain metadata including RPC endpointsLook up token information across different networksTrack token prices and market dataExplain token standards and implementationsHelp you understand token bridges and cross-chain aspectsMonitor trading pairs and liquidityFetch token metadata and current exchange ratesRetrieve detailed transaction information using transaction hashesProvide wallet balance and transaction history  Example usage:  What is the ETH balance for 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045   What is the total NFT supply for 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D?   Does 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045 hold USDC on Base?   What is the address of USDC on Ethereum?    ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-trikon","type":0,"sectionRef":"#","url":"/packages/plugins/trikon","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-trikon","url":"/packages/plugins/trikon#overview","content":" This plugin is a Proof of Concept (POC) implementation for Trikon token transfers within the Eliza ecosystem. It provides basic token transfer capabilities and wallet management.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-trikon","url":"/packages/plugins/trikon#installation","content":" bun add @elizaos/plugin-trikon  ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-trikon","url":"/packages/plugins/trikon#configuration","content":" The plugin requires the following environment variables:  TRIKON_WALLET_ADDRESS: Your Trikon wallet address (must be a valid 64-character hex string starting with '0x')TRIKON_INITIAL_BALANCE: (Optional) The initial balance for the wallet. Defaults to &quot;0&quot; if not provided.  ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-trikon","url":"/packages/plugins/trikon#usage","content":" To use the plugin, you need to add it to your Eliza OS project.  ","version":"1.0.17","tagName":"h2"},{"title":"Security Considerations‚Äã","type":1,"pageTitle":"@elizaos/plugin-trikon","url":"/packages/plugins/trikon#security-considerations","content":" Never share your wallet address or private keysAlways validate transaction amountsMonitor transfer operations for suspicious activity  import { trikonPlugin } from '@elizaos/plugin-trikon'; const eliza = new ElizaOS({ plugins: [trikonPlugin], });  ","version":"1.0.17","tagName":"h3"},{"title":"@toddli/plugin-trustgo","type":0,"sectionRef":"#","url":"/packages/plugins/trustgo","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#description","content":" The TrustGo plugin enables fetching EVM account information from the TrustGo website and facilitates the minting of MEDIA score attestations.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#features","content":" Login to TrustGo Website: Securely authenticate with TrustGo.Fetch Multi-Chain MEDIA Score: Retrieve MEDIA scores across multiple chains.Fetch User Attestations: Access user attestations.Mint L2 MEDIA Attestation: Mint MEDIA attestations on Layer 2.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#installation","content":" bun install @toddli/plugin-trustgo   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#dependencies","content":" @elizaos/core @elizaos/plugin-evm   ","version":"1.0.17","tagName":"h3"},{"title":"Required Environment Variables‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#required-environment-variables","content":" # Required EVM_PRIVATE_KEY=your-private-key   ","version":"1.0.17","tagName":"h3"},{"title":"Provider‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#provider","content":" The TrustGo Provider integrates the EVM Wallet Provider. It performs the following functions:  Login to TrustGo Website: Authenticate and log in to the TrustGo platform.Fetch Multi-Chain MEDIA Score: Retrieve MEDIA scores from multiple blockchain networks.List User Attestations: Display user attestations.Mint MEDIA Attestation: Mint MEDIA attestations on the blockchain.  ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. account‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#1-account","content":" Fetch account information from the TrustGo website.  go trustgo   ","version":"1.0.17","tagName":"h3"},{"title":"2. reputation‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#2-reputation","content":" Display the user's MEDIA score.  Show my onchain Reputation   ","version":"1.0.17","tagName":"h3"},{"title":"3. attestation‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#3-attestation","content":" List the user's attestations.  show my attestations   ","version":"1.0.17","tagName":"h3"},{"title":"4. mint attestation‚Äã","type":1,"pageTitle":"@toddli/plugin-trustgo","url":"/packages/plugins/trustgo#4-mint-attestation","content":" Mint an on-chain reputation attestation.  mint my linea media score  ","version":"1.0.17","tagName":"h3"},{"title":"@elizaos/plugin-tts","type":0,"sectionRef":"#","url":"/packages/plugins/tts","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#description","content":" The text-to-speech(TTS) plugin enables AI-powered creation of speech through FAL.ai's services. It provides functionality to generate audio from text descriptions, automatically detects language, and selects appropriate voice models.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#installation","content":" bun install @elizaos/plugin-tts   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#configuration","content":" The plugin requires the following environment variable or runtime setting to be set:  FAL_API_KEY=&lt;Your FAL.ai API key&gt;   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#basic-integration","content":" import { TTSGenerationPlugin } from '@elizaos/plugin-tts';   ","version":"1.0.17","tagName":"h3"},{"title":"Voice Generation Examples‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#voice-generation-examples","content":" // The plugin responds to natural language commands like: 'Generate TTS of Hello World'; 'Create a TTS for Welcome to ElizaOS'; 'Make a TTS saying [your text]';   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#actions","content":" GENERATE_TTS‚Äã  Generates speech audio based on text input.  Aliases:  TTS_GENERATIONCREATE_TTSTEXT2SPEECHT2STEXT_TO_SPEECHAUDIO_CREATE  Features:  Automatic language detectionVoice selection based on detected languageLocal file cachingProgress trackingError handling  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#common-issues--troubleshooting","content":" Generation Failures Verify FAL API key is correctly setEnsure text input is at least 3 characters longCheck network connectivity to FAL.ai services Storage Issues Verify write permissions to content_cache directoryEnsure sufficient disk spaceCheck if content_cache directory exists  ","version":"1.0.17","tagName":"h2"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#security-best-practices","content":" API Key Management Store FAL API key securely using runtime settings or environment variablesNever commit API keys to version controlMonitor API usage  ","version":"1.0.17","tagName":"h2"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting Up Development Environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#setting-up-development-environment","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run the plugin:  bun run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#future-enhancements","content":" Advanced Voice Features Custom voice model supportVoice style transferEmotion controlSpeech rate adjustmentPitch modificationMultiple speaker support Audio Processing Background noise reductionAudio quality enhancementFormat conversion optionsVolume normalizationAudio effects processingBatch processing support Language Support Expanded language detectionRegional accent supportDialect customizationPronunciation improvementsMulti-language mixingCustom pronunciation rules Integration Features Streaming audio supportReal-time generationCaching optimizationBatch generationQueue managementProgress monitoring Developer Tools Extended API optionsTesting frameworkPerformance profilingDebug loggingIntegration examplesDocumentation generator  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#credits","content":" This plugin integrates with and builds upon several key technologies:  FAL.ai: AI model deployment platformlangdetect: Language detection libraryElizaOS: Core framework  Special thanks to:  The FAL.ai team for AI infrastructureThe langdetect development communityThe Eliza community for their contributions and feedback  For more information about TTS capabilities:  FAL.ai DocumentationElizaOS Documentation  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-tts","url":"/packages/plugins/tts#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-ton","type":0,"sectionRef":"#","url":"/packages/plugins/ton","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#overview","content":" This plugin provides functionality to:  Manage TON wallets and key derivationExecute secure token transfersQuery wallet balances and portfolio informationFormat and cache transaction dataInterface with TON blockchain via RPC endpointsConnect TON wallets using TonConnect protocolExecute secure token transfersQuery wallet connection statusSupport multiple wallet applications (like Tonkeeper)Support QR Code scanning connection  ","version":"1.0.17","tagName":"h2"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#quick-start","content":" # you should read the debug.sh first! # if not provide the apikey, the response may very slow export OPENAI_API_KEY=&quot;&quot; # if not provide the testnet apikey, the transfer action may not stable # from https://t.me/toncenter to get your testnet apikey export TON_RPC_API_KEY=&quot;&quot; # nvm use 23 &amp;&amp; npm install -g bun bash ./packages/plugin-ton/scripts/debug.sh   ","version":"1.0.17","tagName":"h3"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#installation","content":" npm install @elizaos/plugin-ton   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#configuration","content":" The plugin requires the following environment variables:  TON_PRIVATE_KEY=your_mnemonic_phrase # Required - wallet mnemonic words TON_RPC_URL=your_rpc_endpoint # Optional - defaults to mainnet RPC TON_RPC_API_KEY= TON_MANIFEST_URL=your_manifest_url # Required - TonConnect manifest URL TON_BRIDGE_URL=your_bridge_url # Optional - defaults to https://bridge.tonapi.io/bridge   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#usage","content":" Import and register the plugin in your Eliza configuration:  import { tonPlugin } from '@elizaos/plugin-ton'; export default { plugins: [tonPlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"WalletProvider‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#walletprovider","content":" The WalletProvider manages wallet operations and portfolio tracking:  import { WalletProvider } from '@elizaos/plugin-ton'; // Initialize the provider const provider = await initWalletProvider(runtime); // Get wallet balance const balance = await provider.getWalletBalance(); // Get formatted portfolio const portfolio = await provider.getFormattedPortfolio(runtime);   ","version":"1.0.17","tagName":"h3"},{"title":"TonConnectProvider‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#tonconnectprovider","content":" The TonConnectProvider manages wallet connection operations:  import { TonConnectProvider } from '@elizaos/plugin-ton-connect'; // Initialize provider const provider = await initTonConnectProvider(runtime); // Connect wallet const universalLink = await provider.connect(); // Check connection status const isConnected = provider.isConnected(); // Disconnect await provider.disconnect();   ","version":"1.0.17","tagName":"h3"},{"title":"TransferAction‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#transferaction","content":" The TransferAction handles token transfers:  import { TransferAction } from '@elizaos/plugin-ton'; // Initialize transfer action const action = new TransferAction(walletProvider); // Execute transfer const hash = await action.transfer({ recipient: 'EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4', amount: '1.5', });   ","version":"1.0.17","tagName":"h3"},{"title":"BatchTransferAction‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#batchtransferaction","content":" The BatchTransferAction handles transfers of NFTs, Jettons and TON in a single transaction:  import { BatchTransferTokens } from '@elizaos/plugin-ton'; // Initialize transfer action const action = new BatchTransferTokens(walletProvider); const batchTransfers = { transfers: [ { type: 'ton', recipientAddress: '0QBLy_5Fr6f8NSpMt8SmPGiItnUE0JxgTJZ6m6E8aXoLtJHB', amount: '0.1', }, { type: 'token', recipientAddress: '0QBLy_5Fr6f8NSpMt8SmPGiItnUE0JxgTJZ6m6E8aXoLtJHB', tokenInd: '0QDIUnzAEsgHLL7YSrvm_u7OYSKw93AQbtdidRdcbm7tQep5', amount: '1', }, ], }; const reports = await batchTransferAction.createBatchTransfer(batchTransfers);   ","version":"1.0.17","tagName":"h3"},{"title":"Create Ton Wallet Action‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#create-ton-wallet-action","content":" The CreateTonWallet action handles on-demand wallet creation with encrypted key storage from user-supplied encryption key:  import { CreateTonWallet } from '@elizaos/plugin-ton'; // Initialize transfer action const action = new CreateTonWallet(runtime); // Execute transfer const { walletAddress, mnemonic } = await action.createNewWallet({ rpcUrl: 'https://toncenter.com/api/v2/jsonRPC', encryptionPassword: 'GAcAWFv6ZXuaJOuSqemxku4', });   ","version":"1.0.17","tagName":"h3"},{"title":"Auction Interaction Action‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#auction-interaction-action","content":" The AuctionInteractionTon action handles Auction interactions  import { AuctionInteractionActionTon } from '@elizaos/plugin-ton'; // Initialize transfer action const action = new AuctionInteractionActionTon(walletProvider); result = await auctionAction.getAuctionData(auctionAddress);   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#testing","content":" npm run test   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#dependencies","content":" @ton/ton: Core TON blockchain functionality@ton/crypto: Cryptographic operationsbignumber.js: Precise number handlingnode-cache: Caching functionalityOther standard dependencies listed in package.json  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Providers‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#providers","content":" walletProvider: Manages TON wallet operationsnativeWalletProvider: Handles native TON token operations  ","version":"1.0.17","tagName":"h3"},{"title":"Types‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#types","content":" interface TransferContent { recipient: string; amount: string | number; } interface WalletPortfolio { totalUsd: string; totalNativeToken: string; } interface Prices { nativeToken: { usd: string }; }   ","version":"1.0.17","tagName":"h3"},{"title":"Configuration Constants‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#configuration-constants","content":" const PROVIDER_CONFIG = { MAINNET_RPC: 'https://toncenter.com/api/v2/jsonRPC', STONFI_TON_USD_POOL: 'EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4', CHAIN_NAME_IN_DEXSCREENER: 'ton', MAX_RETRIES: 3, RETRY_DELAY: 2000, TON_DECIMAL: BigInt(1000000000), };   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues/Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#common-issuestroubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Issue: Balance Fetching Failure‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#issue-balance-fetching-failure","content":" Cause: Incorrect RPC endpoint or network connectivity issuesSolution: Verify TON_RPC_URL and network connection  ","version":"1.0.17","tagName":"h3"},{"title":"Issue: Transfer Fails‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#issue-transfer-fails","content":" Cause: Insufficient balance or invalid recipient addressSolution: Ensure sufficient funds and valid recipient address format  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#security-best-practices","content":" Store private keys securely using environment variablesValidate all input addresses and amountsUse proper error handling for blockchain operationsKeep dependencies updated for security patches  ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#future-enhancements","content":" Wallet Management Multi-wallet supportHardware wallet integrationAdvanced key managementBatch transaction processingCustom wallet contractsRecovery mechanisms Smart Contract Integration Contract deployment toolsFunC contract templatesTesting frameworkUpgrade managementGas optimizationSecurity analysis Token Operations Jetton creation toolsNFT support enhancementToken metadata handlingCollection managementBatch transfersToken standards DeFi Features DEX integrationLiquidity managementYield farming toolsPrice feed integrationSwap optimizationPortfolio tracking Developer Tools Enhanced debuggingCLI improvementsDocumentation generatorIntegration templatesPerformance monitoringTesting utilities Network Features Workchain supportSharding optimizationRPC managementNetwork monitoringArchive node integrationCustom endpoints  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#credits","content":" This plugin integrates with and builds upon several key technologies:  TON Blockchain: The Open Network blockchain platform@ton/ton: Core TON blockchain functionality@ton/crypto: Cryptographic operationsbignumber.js: Precise number handlingnode-cache: Caching functionality  Special thanks to:  The TON Foundation for developing and maintaining the TON blockchainThe TON Developer communityThe TON SDK maintainersThe Eliza community for their contributions and feedback  For more information about TON blockchain capabilities:  TON DocumentationTON Developer PortalTON WhitepaperTON API Reference  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-ton","url":"/packages/plugins/ton#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-trustdb","type":0,"sectionRef":"#","url":"/packages/plugins/trustdb","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#overview","content":" This plugin provides functionality to:  Track and manage recommender trust scoresMonitor token performance metricsRecord and analyze trading performanceMaintain historical metrics dataHandle transaction records and validations  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#installation","content":" npm install @elizaos/plugin-trustdb   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#configuration","content":" The plugin uses SQLite as its database backend and requires proper initialization:  import { TrustScoreDatabase } from '@elizaos/plugin-trustdb'; import Database from 'better-sqlite3'; const db = new Database('path/to/database.sqlite'); const trustDB = new TrustScoreDatabase(db);   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#usage","content":" Import and use the TrustDB functionality in your application:  import { TrustScoreDatabase } from '@elizaos/plugin-trustdb'; // Initialize database const trustDB = new TrustScoreDatabase(db); // Add a recommender const recommender = { id: 'uuid', address: 'wallet-address', telegramId: 'telegram-id', }; trustDB.addRecommender(recommender); // Track token performance const performance = { tokenAddress: 'token-address', priceChange24h: 10.5, volumeChange24h: 25.3, // ... other metrics }; trustDB.upsertTokenPerformance(performance);   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"TrustScoreDatabase‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#trustscoredatabase","content":" The main database manager providing comprehensive tracking and analysis:  // Get or create a recommender const recommender = await trustDB.getOrCreateRecommender({ address: 'wallet-address', telegramId: 'user-id', }); // Update recommender metrics trustDB.updateRecommenderMetrics({ recommenderId: 'uuid', trustScore: 85.5, totalRecommendations: 10, // ... other metrics });   ","version":"1.0.17","tagName":"h3"},{"title":"Performance Tracking‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#performance-tracking","content":" // Add trade performance trustDB.addTradePerformance( { token_address: 'address', recommender_id: 'uuid', buy_price: 1.0, // ... other trade details }, false ); // Get token performance const tokenMetrics = trustDB.getTokenPerformance('token-address');   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#testing","content":" npm run test   ","version":"1.0.17","tagName":"h3"},{"title":"Linting‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#linting","content":" npm run lint   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#dependencies","content":" better-sqlite3: SQLite database interfaceuuid: Unique identifier generationdompurify: HTML sanitizationOther standard dependencies listed in package.json  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Interfaces‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#core-interfaces","content":" interface Recommender { id: string; address: string; solanaPubkey?: string; telegramId?: string; discordId?: string; twitterId?: string; ip?: string; } interface RecommenderMetrics { recommenderId: string; trustScore: number; totalRecommendations: number; successfulRecs: number; avgTokenPerformance: number; riskScore: number; consistencyScore: number; virtualConfidence: number; lastActiveDate: Date; trustDecay: number; lastUpdated: Date; } interface TokenPerformance { tokenAddress: string; symbol: string; priceChange24h: number; volumeChange24h: number; // ... other performance metrics }   ","version":"1.0.17","tagName":"h3"},{"title":"Database Methods‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#database-methods","content":" addRecommender: Add new recommender to databasegetRecommenderMetrics: Retrieve recommender performance metricsupdateRecommenderMetrics: Update recommender metricsupsertTokenPerformance: Add or update token performancegetTokenPerformance: Retrieve token performance metricsMany more specialized methods for tracking and analysis  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues/Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#common-issuestroubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Issue: Database Connection Errors‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#issue-database-connection-errors","content":" Cause: Incorrect database path or permissionsSolution: Verify database path and file permissions  ","version":"1.0.17","tagName":"h3"},{"title":"Issue: Data Consistency‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#issue-data-consistency","content":" Cause: Concurrent database accessSolution: Use proper transaction handling  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#security-best-practices","content":" Implement proper database backup proceduresUse parameterized queries to prevent SQL injectionValidate all input data before storageMaintain regular database maintenanceKeep dependencies updated for security patches  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#credits","content":" This plugin integrates with and builds upon several key technologies:  better-sqlite3: High-performance SQLite3 driveruuid: UUID generationDOMPurify: HTML sanitization library  Special thanks to:  The better-sqlite3 team for their excellent database driverThe UUID.js maintainers for reliable identifier generationThe DOMPurify team for security-focused sanitization toolsThe Eliza community for their contributions and feedback  For more information about database management and security:  SQLite DocumentationDatabase Security Best PracticesData Sanitization Guide  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-trustdb","url":"/packages/plugins/trustdb#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-twilio","type":0,"sectionRef":"#","url":"/packages/plugins/twilio","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#features","content":" üì± SMS Messaging Send SMS messagesReceive and respond to SMS messagesNatural conversation handling üìû Voice Calls Make outgoing callsReceive incoming callsNatural voice conversations using ElevenLabsSpeech recognition and response  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#installation","content":" bun add @elizaos-plugins/plugin-twilio   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#configuration","content":" Add the plugin to your character file:  { &quot;name&quot;: &quot;your_character&quot;, &quot;plugins&quot;: [&quot;@elizaos-plugins/plugin-twilio&quot;], &quot;settings&quot;: { &quot;actions&quot;: { &quot;enabled&quot;: [&quot;sms&quot;, &quot;call&quot;] }, &quot;voice&quot;: { &quot;elevenlabs&quot;: { &quot;voiceId&quot;: &quot;your_voice_id&quot;, &quot;stability&quot;: 0.3, &quot;similarityBoost&quot;: 0.5, &quot;style&quot;: 0.5, &quot;useSpeakerBoost&quot;: false } } } }   Set up environment variables in your .env file:  # Twilio Configuration TWILIO_ACCOUNT_SID=your_account_sid TWILIO_AUTH_TOKEN=your_auth_token TWILIO_PHONE_NUMBER=your_twilio_phone_number TWILIO_CHARACTER=character.json # Webhook Configuration WEBHOOK_PORT=3004 WEBHOOK_BASE_URL=your_webhook_url # ElevenLabs (for voice synthesis) ELEVENLABS_XI_API_KEY=your_elevenlabs_api_key   ","version":"1.0.17","tagName":"h2"},{"title":"Webhook Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#webhook-configuration","content":" Set up your webhook base URL in .env:  WEBHOOK_BASE_URL=your_webhook_url # e.g., https://your-domain.com WEBHOOK_PORT=3004   Configure webhooks in Twilio Console: Go to Twilio ConsoleNavigate to Phone Numbers - Manage - Active numbersSelect your Twilio phone numberUnder &quot;Voice &amp; Fax&quot; configuration: Set &quot;A Call Comes In&quot; webhook to: [WEBHOOK_BASE_URL]/webhook/voiceMethod: HTTP POST Under &quot;Messaging&quot; configuration: Set &quot;A Message Comes In&quot; webhook to: [WEBHOOK_BASE_URL]/webhook/smsMethod: HTTP POST  Example webhook URLs:  Voice: https://your-domain.com/webhook/voice SMS: https://your-domain.com/webhook/sms   For local development:  Use ngrok to expose your local server:  ngrok http 3004   Update your WEBHOOK_BASE_URL with the ngrok URLUpdate webhook URLs in Twilio Console with the ngrok URL  ","version":"1.0.17","tagName":"h3"},{"title":"Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#security","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#environment-variables","content":" Never commit .env files to version controlUse secrets management in production (AWS Secrets Manager, Vault)Rotate credentials regularlyUse environment-specific configurations  ","version":"1.0.17","tagName":"h3"},{"title":"Webhook Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#webhook-security","content":" Enable Twilio's request validationUse HTTPS for webhook endpointsImplement rate limitingSet up IP allowlisting for Twilio IPsMonitor webhook access logs  ","version":"1.0.17","tagName":"h3"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Interacting with the Agent‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#interacting-with-the-agent","content":" You can interact with the agent in two ways:  Via SMS‚Äã  Save the Twilio phone number: TWILIO_PHONE_NUMBERSend a text message to start a conversationThe agent will respond based on its character configurationContinue the natural conversation via SMS  Via Voice Call‚Äã  Call the Twilio phone number: TWILIO_PHONE_NUMBERThe agent will answer and start a conversationSpeak naturally - the agent uses speech recognitionThe agent will respond with natural voice using ElevenLabs  ","version":"1.0.17","tagName":"h3"},{"title":"Sending Messages Through the Agent‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#sending-messages-through-the-agent","content":" Best Practices:  For direct messages, use &quot;saying&quot; or &quot;telling&quot;For AI-generated content, use &quot;about&quot;Always include the full phone number with &quot;+&quot; prefixKeep messages concise (160 char limit)  SMS Commands‚Äã  Send an SMS to +1234567890 saying Hello world! Send SMS to +1234567890 about the weather forecast   Voice Call Commands‚Äã  Call +1234567890 and tell them about the latest updates Call +1234567890 to say that we need to schedule a meeting   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#development","content":" # Install dependencies bun install # Build the plugin bun build   ","version":"1.0.17","tagName":"h2"},{"title":"Webhook Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#webhook-setup","content":" For local development, use ngrok or similar to expose your webhook:  ngrok http 3004   Then update your WEBHOOK_BASE_URL in .env with the ngrok URL.  ","version":"1.0.17","tagName":"h2"},{"title":"Notes‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#notes","content":" Voice calls require ElevenLabs API key for text-to-speechUses Twilio's built-in speech recognition capabilities for speech-to-textMessages are limited to 160 characters for SMSVoice responses are optimized for natural conversation flowAll phone numbers must be in international format (+1234567890)The agent's responses are based on its configured character personalityIncoming messages and calls are handled automatically through webhooks  ","version":"1.0.17","tagName":"h2"},{"title":"Important: A2P 10DLC Registration‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#important-a2p-10dlc-registration","content":" If you're using US phone numbers (+1) for SMS messaging, you must complete A2P 10DLC registration:  Brand Registration: Required one-time process through Twilio's Trust HubCampaign Registration: Required for AI chatbot/automated messaging use caseMessaging Service: Must link campaign to a Messaging Service with your phone numbers  Note: Voice-only functionality does not require A2P registration. Registration is mandatory for any SMS functionality to US numbers as of September 1, 2023.  See Twilio's A2P 10DLC Documentation for registration process.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-twilio","url":"/packages/plugins/twilio#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"udio","type":0,"sectionRef":"#","url":"/packages/plugins/udio","content":"udio @elizaos/plugin-udio A Udio AI music generation plugin for ElizaOS that enables AI-powered music creation and audio manipulation. OVERVIEW The Udio plugin integrates Udio AI's powerful music generation capabilities into ElizaOS, providing a seamless way to: Generate music from text prompts with fine-tuned parametersCreate custom music with advanced control over style and lyricsExtend existing audio tracks with AI-powered continuation INSTALLATION npm install @elizaos/plugin-udio QUICK START Register the plugin with ElizaOS: import { udioPlugin } from '@elizaos/plugin-udio'; import { Eliza } from '@elizaos/core'; const eliza = new Eliza(); eliza.registerPlugin(udioPlugin); Configure your Udio authentication token in your environment: UDIO_AUTH_TOKEN=your-udio-auth-token FEATURES Generate Music (udio.generate) Generate music using a text prompt with basic control parameters. This is ideal for quick music generation: Simple text-to-music generationOptional seed for reproducible resultsSupport for custom lyrics await eliza.execute('udio.generate', { prompt: 'An upbeat electronic dance track with energetic beats', seed: 12345, customLyrics: 'Your custom lyrics here', }); Extend Audio (udio.extend) Extend existing audio tracks to create longer compositions. Useful for: Lengthening existing music piecesCreating variations of existing tracksSeamless continuation of melodies await eliza.execute('udio.extend', { prompt: 'Continue with similar style', audioConditioningPath: 'path/to/audio.mp3', audioConditioningSongId: 'original-song-id', cropStartTime: 30, seed: 12345, customLyrics: 'Additional lyrics for the extension', }); Generation Parameters Explained: seed: Controls the randomness of generation Same seed will produce similar resultsDifferent seeds create variationsDefaults to -1 if not specified cropStartTime: Controls where the extension begins (for extend action) Specified in secondsOptional parameter for precise control over continuation point API REFERENCE Action Parameters: Generate Music (udio.generate) interface UdioGenerateOptions { prompt: string; // Required: Text description of desired music seed?: number; // Optional: Seed for reproducibility customLyrics?: string; // Optional: Custom lyrics } Extend Audio (udio.extend) interface UdioExtendOptions { prompt: string; // Required: Description for continuation audioConditioningPath: string; // Required: Path to original audio audioConditioningSongId: string; // Required: ID of original song cropStartTime?: number; // Optional: Start time in seconds seed?: number; // Optional: Seed for reproducibility customLyrics?: string; // Optional: Lyrics for extension } Response Types: interface UdioSong { id: string; // Generated song ID title: string; // Song title song_path: string; // Path to download the song finished: boolean; // Generation status } interface UdioResponse { songs: UdioSong[]; // Array of generated songs } ERROR HANDLING The plugin includes built-in error handling for common scenarios: try { await eliza.execute('udio.generate', params); } catch (error) { // Handle errors console.error(error.message); } EXAMPLES Creating a Pop Song: const result = await eliza.execute('udio.generate', { prompt: 'Create a pop song with vocals, drums, and guitar', seed: 12345, customLyrics: 'Verse 1: Your custom lyrics here...', }); Extending an Existing Track: const extended = await eliza.execute('udio.extend', { prompt: 'Continue with the same energy and mood', audioConditioningPath: '/path/to/original.mp3', audioConditioningSongId: 'original-123', cropStartTime: 60, // Start continuation from 1 minute mark customLyrics: 'Verse 2: Continuing the story...', }); LICENSE MIT SUPPORT For issues and feature requests, please open an issue on our GitHub repository. Built with ‚ù§Ô∏è for ElizaOS","keywords":"","version":"1.0.17"},{"title":"@elizaos/plugin-twitter","type":0,"sectionRef":"#","url":"/packages/plugins/twitter","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#overview","content":" This plugin provides comprehensive Twitter/X integration for Eliza agents:  üìù Post tweets and repliesüìñ Read home timeline and mentionsüîç Search tweets and users‚ù§Ô∏è Like and retweet postsü§ù Follow/unfollow usersüí¨ Natural conversation-aware responsesüîÑ Automatic posting capabilities  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#installation","content":" npm install @elizaos/plugin-twitter   ","version":"1.0.17","tagName":"h2"},{"title":"Quick Start‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#quick-start","content":" ","version":"1.0.17","tagName":"h2"},{"title":"1. Get Twitter API Credentials‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#1-get-twitter-api-credentials","content":" Go to Twitter Developer PortalCreate a new app or use an existing oneNavigate to &quot;Keys and tokens&quot; sectionYou need OAuth 1.0a credentials (NOT OAuth 2.0): API Key (Consumer Key)API Key Secret (Consumer Secret)Access TokenAccess Token Secret  ","version":"1.0.17","tagName":"h3"},{"title":"2. Configure Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#2-configure-environment-variables","content":" Add to your .env file:  # Required - Twitter API Credentials (OAuth 1.0a) TWITTER_API_KEY=your_api_key TWITTER_API_KEY_SECRET=your_api_key_secret TWITTER_ACCESS_TOKEN=your_access_token TWITTER_ACCESS_TOKEN_SECRET=your_access_token_secret # Optional - Feature Flags TWITTER_POLL_INTERVAL=120 # Seconds between timeline checks (default: 120) TWITTER_MAX_TWEETS_PER_POLL=10 # Max tweets to process per poll (default: 10) TWITTER_POST_INTERVAL_MIN=90 # Min minutes between posts (default: 90) TWITTER_POST_INTERVAL_MAX=180 # Max minutes between posts (default: 180) TWITTER_ENABLE_POST=false # Enable automatic posting (default: false) TWITTER_DRY_RUN=false # Test mode - logs but doesn't post (default: false)   ","version":"1.0.17","tagName":"h3"},{"title":"3. Register the Plugin‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#3-register-the-plugin","content":" import { twitterPlugin } from '@elizaos/plugin-twitter'; export default { plugins: [twitterPlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Automatic Posting‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#automatic-posting","content":" Enable automatic posting to maintain an active Twitter presence:  // Enable in .env TWITTER_ENABLE_POST = true; TWITTER_POST_INTERVAL_MIN = 90; // minimum minutes between posts TWITTER_POST_INTERVAL_MAX = 180; // maximum minutes between posts   The agent will automatically generate and post contextually relevant tweets based on its character and recent interactions.  ","version":"1.0.17","tagName":"h3"},{"title":"Interactive Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#interactive-actions","content":" The plugin provides several actions that can be triggered through conversation:  // Post a tweet 'Can you tweet about the importance of open source?'; // Reply to a tweet 'Reply to the latest tweet from @user'; // Search tweets 'Search for tweets about AI agents'; // Timeline reading 'What are people saying on Twitter?';   ","version":"1.0.17","tagName":"h3"},{"title":"Tweet Composition‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#tweet-composition","content":" The plugin uses sophisticated templates to generate character-aware tweets:  Considers recent conversation contextMaintains character personality and styleRespects Twitter's character limitsGenerates engaging, natural contentUses postExamples from character configuration as style references  The tweet generation process references your character's postExamples to maintain consistent voice and style. When composing tweets, the AI analyzes these examples to understand:  Your typical tweet structure and lengthCommon themes and topics you discussYour writing style and toneHow you engage with your audience  ","version":"1.0.17","tagName":"h3"},{"title":"API Rate Limit Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#api-rate-limit-management","content":" The plugin automatically handles Twitter API rate limits:  Configurable polling intervalsAutomatic retry with backoffRate limit status monitoring  ","version":"1.0.17","tagName":"h3"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Character Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#character-configuration","content":" Your character file can include Twitter-specific settings:  { &quot;name&quot;: &quot;MyAgent&quot;, &quot;bio&quot;: &quot;An AI agent interested in technology and innovation&quot;, &quot;topics&quot;: [&quot;AI&quot;, &quot;blockchain&quot;, &quot;open source&quot;], &quot;style&quot;: { &quot;all&quot;: [&quot;thoughtful&quot;, &quot;informative&quot;, &quot;engaging&quot;], &quot;chat&quot;: [&quot;friendly&quot;, &quot;helpful&quot;], &quot;post&quot;: [&quot;concise&quot;, &quot;insightful&quot;, &quot;relevant&quot;] }, &quot;postExamples&quot;: [ &quot;Just discovered an amazing open-source project that's revolutionizing how we think about AI collaboration. The future is being built in public! üöÄ&quot;, &quot;The beauty of blockchain isn't just decentralization - it's the trust it creates between strangers. We're moving from 'don't be evil' to 'can't be evil' systems.&quot;, &quot;Today's thought: AI agents aren't replacing human creativity, they're amplifying it. We're entering an era of human-AI collaboration that will unlock possibilities we can't even imagine yet.&quot;, &quot;Open source is more than code - it's a philosophy. When we share knowledge freely, we all rise together. What project inspired you recently? üåü&quot; ] }   The postExamples array provides sample tweets that demonstrate your agent's voice and style. These examples help the AI generate tweets that are consistent with your character's personality and typical content.  ","version":"1.0.17","tagName":"h3"},{"title":"Plugin Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#plugin-actions","content":" The plugin provides these core actions:  Action\tDescription\tTrigger ExamplePOST_TWEET\tPost a new tweet\t&quot;Tweet about X&quot; REPLY_TO_TWEET\tReply to a specific tweet\t&quot;Reply to tweet [URL]&quot; LIKE_TWEET\tLike a tweet\t&quot;Like the latest tweet from @user&quot; RETWEET\tRetweet a post\t&quot;Retweet [URL]&quot; FOLLOW_USER\tFollow a user\t&quot;Follow @username&quot; UNFOLLOW_USER\tUnfollow a user\t&quot;Unfollow @username&quot; SEARCH_TWEETS\tSearch for tweets\t&quot;Search tweets about AI&quot;  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#common-issues--troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"403 Forbidden Error‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#403-forbidden-error","content":" Problem: Getting 403 errors when trying to post tweets.  Solution:  Your app needs &quot;Read and write&quot; permissionsGo to Twitter Developer Portal ‚Üí Your app ‚Üí SettingsUnder &quot;App permissions&quot;, select &quot;Read and write&quot;Important: After changing permissions, regenerate your Access Token &amp; SecretUpdate your .env with the new tokens  ","version":"1.0.17","tagName":"h3"},{"title":"Authentication Confusion‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#authentication-confusion","content":" Problem: Unsure which credentials to use.  Solution: You need OAuth 1.0a credentials (4 values):  ‚úÖ Use these from &quot;Keys and tokens&quot;: - API Key &amp; Secret (Consumer Keys section) - Access Token &amp; Secret (Authentication Tokens section) ‚ùå Don't use OAuth 2.0: - Client ID - Client Secret - Bearer Token   ","version":"1.0.17","tagName":"h3"},{"title":"Callback URL Required‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#callback-url-required","content":" Problem: Twitter requires a callback URL.  Solution: Add http://localhost:3000/callback in your app settings (not actually used, but required).  ","version":"1.0.17","tagName":"h3"},{"title":"Testing Without Posting‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#testing-without-posting","content":" Use dry run mode to test without actually posting:  TWITTER_DRY_RUN=true   ","version":"1.0.17","tagName":"h3"},{"title":"Advanced Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#advanced-usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Custom Post Templates‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#custom-post-templates","content":" You can customize how tweets are generated by modifying the tweet composition templates:  const customTemplate = ` Generate a tweet about {{topic}} that: - Reflects {{agentName}}'s personality - Includes relevant hashtags - Engages the audience - Stays under 280 characters `;   ","version":"1.0.17","tagName":"h3"},{"title":"Webhook Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#webhook-integration","content":" For real-time interactions, you can set up Twitter webhooks (requires additional configuration).  ","version":"1.0.17","tagName":"h3"},{"title":"Multi-Account Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#multi-account-management","content":" To manage multiple Twitter accounts, run separate Eliza instances with different credentials.  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#security-best-practices","content":" Never commit credentials: Keep your .env file in .gitignoreUse environment variables: Don't hardcode API keysRotate tokens regularly: Regenerate access tokens periodicallyMonitor usage: Check your Twitter API dashboard for unusual activityImplement rate limiting: Respect Twitter's API limits  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Functions‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#core-functions","content":" // Initialize Twitter client const client = new TwitterClient({ apiKey: process.env.TWITTER_API_KEY, apiKeySecret: process.env.TWITTER_API_KEY_SECRET, accessToken: process.env.TWITTER_ACCESS_TOKEN, accessTokenSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET, }); // Post a tweet await client.postTweet({ text: 'Hello world!' }); // Get home timeline const timeline = await client.getHomeTimeline({ limit: 10 }); // Search tweets const results = await client.searchTweets({ query: 'AI agents', limit: 20, });   ","version":"1.0.17","tagName":"h3"},{"title":"Migration from Previous Versions‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#migration-from-previous-versions","content":" If you're upgrading from an older version that used GraphQL endpoints:  Update credentials: Ensure you're using OAuth 1.0a tokensUpdate environment variables: Some variable names have changedTest thoroughly: The new version uses official Twitter API v2  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-twitter","url":"/packages/plugins/twitter#license","content":" This plugin is part of the Eliza project and is licensed under the MIT License. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-viction","type":0,"sectionRef":"#","url":"/packages/plugins/viction","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#overview","content":" The Viction plugin serves as a foundational component of Eliza OS, bridging Viction blockchain capabilities with the Eliza ecosystem. It provides crucial services for token operations, trading, portfolio management, and DeFi integrations, enabling both automated and user-directed interactions with the Viction blockchain.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Operations‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#token-operations","content":" Token Information: Provide Viction informationToken Transfers: Send and receive tokens securely native and non-native  ","version":"1.0.17","tagName":"h3"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#installation","content":" npm install @elizaos/plugin-viction   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#configuration","content":" Configure the plugin by setting the following environment variables:  const victionEnvSchema = { VICTION_ADDRESS: string, VICTION_PRIVATE_KEY: string, VICTION_RPC_URL: string, };   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#basic-setup","content":" import { victionPlugin } from '@elizaos/plugin-viction'; // Initialize the plugin const runtime = await initializeRuntime({ plugins: [victionPlugin], });   ","version":"1.0.17","tagName":"h3"},{"title":"Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#actions","content":" ","version":"1.0.17","tagName":"h2"},{"title":"vic_infomations‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#vic_infomations","content":" Provide Viction's information  // Example usage const result = await runtime.executeAction('GIVE_VICTION_INFOMATION', {});   ","version":"1.0.17","tagName":"h3"},{"title":"transferVic‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#transfervic","content":" Transfers VIC between wallets.  // Example usage const result = await runtime.executeAction('SEND_VIC', { recipient: 'RecipientAddressHere', amount: '1000', });   ","version":"1.0.17","tagName":"h3"},{"title":"transferTokens‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#transfertokens","content":" Transfers tokens between wallets.  // Example usage const result = await runtime.executeAction(&quot;SEND_TOKEN&quot;, { recipient: &quot;RecipientAddressHere&quot;, tokenAddress: &quot;TokenAddressHere&quot; amount: &quot;1000&quot;, });   ","version":"1.0.17","tagName":"h3"},{"title":"Performance Optimization‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#performance-optimization","content":" Cache Management Implement token data cachingConfigure cache TTL settingsMonitor cache hit rates RPC Optimization Use connection poolingImplement request batchingMonitor RPC usage Transaction Management Optimize transaction bundlingImplement retry strategiesMonitor transaction success rates  ","version":"1.0.17","tagName":"h2"},{"title":"System Requirements‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#system-requirements","content":" Node.js 16.x or higherMinimum 4GB RAM recommendedStable internet connectionAccess to Viction RPC endpoint  ","version":"1.0.17","tagName":"h2"},{"title":"Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#troubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Common Issues‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#common-issues","content":" Wallet Connection Failures  Error: Failed to connect to wallet   Verify RPC endpoint is accessibleCheck wallet configuration settingsEnsure proper network selection  Transaction Errors  Error: Transaction failed   Check account balancesVerify transaction parametersEnsure proper fee configuration  ","version":"1.0.17","tagName":"h3"},{"title":"Safety & Security‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#safety--security","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#best-practices","content":" Environment Variables Store sensitive keys in environment variablesUse .env.example for non-sensitive defaultsNever commit real credentials to version control  ","version":"1.0.17","tagName":"h3"},{"title":"Performance Optimization‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#performance-optimization-1","content":" Cache Management Implement token data cachingConfigure cache TTL settingsMonitor cache hit rates RPC Optimization Use connection poolingImplement request batchingMonitor RPC usage Transaction Management Optimize transaction bundlingImplement retry strategiesMonitor transaction success rates  ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#support","content":" For issues and feature requests, please:  Check the troubleshooting guide aboveReview existing GitHub issuesSubmit a new issue with: System informationError logsSteps to reproduceTransaction IDs (if applicable)  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-viction","url":"/packages/plugins/viction#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-video Video Service","type":0,"sectionRef":"#","url":"/packages/plugins/video","content":"@elizaos/plugin-video Video Service The VideoService provides comprehensive video processing capabilities with a focus on efficient handling and transcription: Key Features: Video Download: Supports both YouTube videos and direct MP4 URLsFormat Handling: Automatic format detection and conversionMP4 to MP3 conversion for audio processingSupport for various video platforms (YouTube, Vimeo) Transcription Pipeline: Attempts to extract manual subtitles (SRT format)Falls back to automatic captions if availableUses audio transcription as final fallback Performance Optimizations: Queue-based processing for multiple videosBuilt-in caching system for processed resultsEfficient temporary file management Error Handling: Graceful fallbacks for different transcription methodsComprehensive error reportingAutomatic cleanup of temporary files Usage Example: const videoService = runtime.getService&lt;IVideoService&gt;(ServiceType.VIDEO); // Process a video URL const result = await videoService.processVideo(videoUrl, runtime); // Returns: Media object with id, url, title, source, description, and transcript ","keywords":"","version":"1.0.17"},{"title":"@elizaos/plugin-youtube-to-text","type":0,"sectionRef":"#","url":"/packages/plugins/youtube-to-text","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-youtube-to-text","url":"/packages/plugins/youtube-to-text#description","content":" The Youtube to text Plugin allows users to retrieve a text output of a Youtube video.  ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-youtube-to-text","url":"/packages/plugins/youtube-to-text#features","content":" Converts YouTube video links into text format using OpenAI‚Äôs Whisper modelLeverages Whisper‚Äôs advanced AI for precise and reliable transcriptionExtracts and saves the video's audio as a WAV and MP3 file under the agent/data folder  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-youtube-to-text","url":"/packages/plugins/youtube-to-text#installation","content":" bun install @elizaos/plugin-youtube-to-text   ","version":"1.0.17","tagName":"h2"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-youtube-to-text","url":"/packages/plugins/youtube-to-text#development","content":" Clone the repositoryInstall dependencies:  bun install   Build the plugin:  bun run build   Run tests:  bun test  ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-video-generation","type":0,"sectionRef":"#","url":"/packages/plugins/video-generation","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#overview","content":" This plugin provides functionality to:  Generate videos from text descriptionsHandle video generation requests through Luma AIManage API authentication and responsesCache and serve generated videosMonitor generation progress  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#installation","content":" npm install @elizaos/plugin-video-generation   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#configuration","content":" The plugin requires the following environment variables:  LUMA_API_KEY=your_luma_api_key # Required: API key for Luma AI   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#usage","content":" Import and register the plugin in your Eliza configuration:  import { videoGenerationPlugin } from '@elizaos/plugin-video-generation'; export default { plugins: [videoGenerationPlugin], // ... other configuration };   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Video Generation‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#video-generation","content":" The plugin uses Luma AI's API to generate videos from text prompts:  import { videoGeneration } from '@elizaos/plugin-video-generation'; // Generate video from prompt const result = await videoGeneration.handler( runtime, { content: { text: 'Generate a video of a sunset on the beach' }, }, state, {}, callback );   ","version":"1.0.17","tagName":"h3"},{"title":"Progress Monitoring‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#progress-monitoring","content":" // The plugin automatically handles progress monitoring const result = await generateVideo(prompt, runtime); if (result.success) { console.log('Video URL:', result.data); } else { console.error('Generation failed:', result.error); }   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#testing","content":" npm run test   ","version":"1.0.17","tagName":"h3"},{"title":"Development Mode‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#development-mode","content":" npm run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#dependencies","content":" @elizaos/core: Core Eliza functionalitytsup: Build toolOther standard dependencies listed in package.json  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Interfaces‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#core-interfaces","content":" interface Action { name: 'GENERATE_VIDEO'; similes: string[]; description: string; validate: (runtime: IAgentRuntime, message: Memory) =&gt; Promise&lt;boolean&gt;; handler: ( runtime: IAgentRuntime, message: Memory, state: State, options: any, callback: HandlerCallback ) =&gt; Promise&lt;void&gt;; examples: Array&lt;Array&lt;any&gt;&gt;; } interface GenerationResult { success: boolean; data?: string; error?: string; }   ","version":"1.0.17","tagName":"h3"},{"title":"Plugin Methods‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#plugin-methods","content":" generateVideo: Main method for video generationvideoGeneration.handler: Action handler for video requestsvideoGeneration.validate: Validates API key and requirements  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues/Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#common-issuestroubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Issue: API Authentication Failures‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#issue-api-authentication-failures","content":" Cause: Invalid or missing Luma API keySolution: Verify LUMA_API_KEY environment variable  ","version":"1.0.17","tagName":"h3"},{"title":"Issue: Generation Timeouts‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#issue-generation-timeouts","content":" Cause: Long generation times or network issuesSolution: Implement proper timeout handling and retry logic  ","version":"1.0.17","tagName":"h3"},{"title":"Issue: File Storage Errors‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#issue-file-storage-errors","content":" Cause: Insufficient permissions or disk spaceSolution: Verify file system permissions and available storage  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#security-best-practices","content":" Store API keys securely using environment variablesImplement proper error handlingKeep dependencies updatedMonitor API usage and rate limitsValidate input promptsSecure file storage handling  ","version":"1.0.17","tagName":"h2"},{"title":"Constants‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#constants","content":" The plugin uses predefined constants for API configuration:  export const LUMA_CONSTANTS = { API_URL: 'https://api.lumalabs.ai/dream-machine/v1/generations', API_KEY_SETTING: 'LUMA_API_KEY', };   ","version":"1.0.17","tagName":"h2"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#example-usage","content":" // Basic video generation const videoPrompt = 'Create a video of a futuristic city at night'; const result = await generateVideo(videoPrompt, runtime); // With callback handling videoGeneration.handler( runtime, { content: { text: videoPrompt }, }, state, {}, (response) =&gt; { console.log('Generation status:', response); } );   ","version":"1.0.17","tagName":"h2"},{"title":"Future Enhancements‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#future-enhancements","content":" Generation Features Advanced style controlMulti-scene compositionCustom duration settingsResolution optionsFrame rate controlAudio integration Video Editing Scene transitionsText overlay toolsEffect templatesColor correctionMotion trackingTimeline editing Asset Management Asset libraryTemplate systemStyle presetsResource optimizationVersion controlBatch processing Quality Improvements Enhanced resolutionFrame interpolationArtifact reductionStability featuresLighting optimizationDetail enhancement Performance Optimization Generation speedResource usageParallel processingCaching systemQueue managementLoad balancing Export Options Multiple formatsCompression settingsStreaming supportProgressive loadingThumbnail generationMetadata handling Developer Tools API expansionTesting frameworkDocumentation generatorDebug visualizationPerformance monitoringIntegration templates AI Features Style transferScene understandingContent awarenessMotion synthesisCharacter animationEnvironment generation  We welcome community feedback and contributions to help prioritize these enhancements.  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#credits","content":" This plugin integrates with and builds upon several key technologies:  Luma AI: Advanced AI-powered video generation platformLuma Dream Machine: Text-to-video generation APINode.js Fetch API: HTTP request handling  Special thanks to:  The Luma Labs team for providing the video generation APIThe Luma AI research team for their groundbreaking work in AI video generationThe Eliza community for their contributions and feedback  For more information about video generation capabilities and tools:  Luma AI DocumentationDream Machine API ReferenceVideo Generation Best Practices  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-video-generation","url":"/packages/plugins/video-generation#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-web-search","type":0,"sectionRef":"#","url":"/packages/plugins/web-search","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#overview","content":" This plugin provides functionality to:  Execute web search queries with customizable parametersProcess and format search resultsHandle search API authenticationManage token limits and response sizesOptimize query performance  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#installation","content":" bun install @elizaos/plugin-web-search   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#configuration","content":" The plugin requires the following environment variables:  TAVILY_API_KEY=your_api_key # Required: API key for search service   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#usage","content":" Import and register the plugin in your Eliza configuration.  import { webSearchPlugin } from '@elizaos/plugin-web-search'; export default { plugins: [webSearchPlugin], // ... other configuration };   Custom UsageIf you want custom usage, for example, twitter-client to search the web before posting a tweet, you can also import the webSearchService and use it directly. Here's how you can do it:  // packages/client-twitter/src/post.ts const webSearchService = new WebSearchService(); await webSearchService.initialize(runtime); const latestNews = await webSearchService.search( &quot;latest news on AI Agents&quot;, // searchOptions ); const state = await this.runtime.composeState( { } // memory, { // additional keys latestNews: latestNews, } ); // Then modify the tweet template to include the {{latestNews}} and however you need   ","version":"1.0.17","tagName":"h2"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Web Search‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#web-search","content":" The plugin provides comprehensive web search capabilities:  import { webSearch } from '@elizaos/plugin-web-search'; // Execute a search query const result = await webSearch.handler( runtime, { content: { text: 'What is the latest news about AI?' }, }, state, {}, callback );   ","version":"1.0.17","tagName":"h3"},{"title":"Token Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#token-management","content":" // The plugin automatically handles token limits const DEFAULT_MAX_WEB_SEARCH_TOKENS = 4000; // Example of token-limited response const response = MaxTokens(searchResult, DEFAULT_MAX_WEB_SEARCH_TOKENS);   ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#building","content":" bun run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#testing","content":" bun run test   ","version":"1.0.17","tagName":"h3"},{"title":"Development Mode‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#development-mode","content":" bun run dev   ","version":"1.0.17","tagName":"h3"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#dependencies","content":" @elizaos/core: Core Eliza functionalityjs-tiktoken: Token counting and managementtsup: Build toolOther standard dependencies listed in package.json  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Interfaces‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#core-interfaces","content":" interface Action { name: 'WEB_SEARCH'; similes: string[]; description: string; validate: (runtime: IAgentRuntime, message: Memory) =&gt; Promise&lt;boolean&gt;; handler: ( runtime: IAgentRuntime, message: Memory, state: State, options: any, callback: HandlerCallback ) =&gt; Promise&lt;void&gt;; examples: Array&lt;Array&lt;any&gt;&gt;; } interface SearchResult { title: string; url: string; answer?: string; results?: Array&lt;{ title: string; url: string; }&gt;; }   ","version":"1.0.17","tagName":"h3"},{"title":"Plugin Methods‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#plugin-methods","content":" webSearch.handler: Main method for executing searchesgenerateWebSearch: Core search generation functionMaxTokens: Token limit management functiongetTotalTokensFromString: Token counting utility  ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues/Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#common-issuestroubleshooting","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Issue: API Authentication Failures‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#issue-api-authentication-failures","content":" Cause: Invalid or missing Tavily API keySolution: Verify TAVILY_API_KEY environment variable  ","version":"1.0.17","tagName":"h3"},{"title":"Issue: Token Limit Exceeded‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#issue-token-limit-exceeded","content":" Cause: Search results exceeding maximum token limitSolution: Results are automatically truncated to fit within limits  ","version":"1.0.17","tagName":"h3"},{"title":"Issue: Search Rate Limiting‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#issue-search-rate-limiting","content":" Cause: Too many requests in short timeSolution: Implement proper request throttling  ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#security-best-practices","content":" Store API keys securely using environment variablesValidate all search inputsImplement proper error handlingKeep dependencies updatedMonitor API usage and rate limitsUse HTTPS for API communication  ","version":"1.0.17","tagName":"h2"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#example-usage","content":" // Basic search const searchQuery = 'Latest developments in quantum computing'; const results = await generateWebSearch(searchQuery, runtime); // With formatted response if (results &amp;&amp; results.results.length) { const formattedResponse = `${results.answer}\\n\\nFor more details, check out:\\n${results.results .map((result, index) =&gt; `${index + 1}. [${result.title}](${result.url})`) .join('\\n')}`; }   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration Options‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#configuration-options","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Token Management‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#token-management-1","content":" const DEFAULT_MODEL_ENCODING = 'gpt-3.5-turbo'; const DEFAULT_MAX_WEB_SEARCH_TOKENS = 4000;   ","version":"1.0.17","tagName":"h3"},{"title":"Search Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#search-actions","content":" The plugin includes multiple search action similes:  SEARCH_WEBINTERNET_SEARCHLOOKUPQUERY_WEBFIND_ONLINEAnd more...  ","version":"1.0.17","tagName":"h3"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#credits","content":" This plugin integrates with and builds upon several key technologies:  Tavily API: Advanced search and content analysis APIjs-tiktoken: Token counting for API responsesZod: TypeScript-first schema validation  Special thanks to:  The Eliza community for their contributions and feedback  For more information about the search capabilities and tools:  Tavily API DocumentationToken Management GuideSearch API Best Practices  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-web-search","url":"/packages/plugins/web-search#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-whatsapp","type":0,"sectionRef":"#","url":"/packages/plugins/whatsapp","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#overview","content":" This plugin provides functionality to:  Send text and template messages via WhatsAppHandle incoming webhook eventsManage message status updatesProcess message delivery notificationsHandle authentication and session management  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#installation","content":" npm install @elizaos/plugin-whatsapp   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#configuration","content":" The plugin requires the following environment variables:  WHATSAPP_ACCESS_TOKEN=your_access_token # Required: WhatsApp Cloud API access token WHATSAPP_PHONE_NUMBER_ID=your_phone_number_id # Required: WhatsApp business phone number ID WHATSAPP_WEBHOOK_TOKEN=your_webhook_token # Optional: Webhook verification token WHATSAPP_BUSINESS_ID=your_business_id # Optional: Business account ID   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#basic-setup","content":" import { WhatsAppPlugin } from '@elizaos/plugin-whatsapp'; const whatsappPlugin = new WhatsAppPlugin({ accessToken: 'your_access_token', phoneNumberId: 'your_phone_number_id', webhookVerifyToken: 'your_webhook_verify_token', businessAccountId: 'your_business_account_id', });   ","version":"1.0.17","tagName":"h3"},{"title":"Sending Messages‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#sending-messages","content":" // Send a text message await whatsappPlugin.sendMessage({ type: 'text', to: '1234567890', content: 'Hello from WhatsApp!', }); // Send a template message await whatsappPlugin.sendMessage({ type: 'template', to: '1234567890', content: { name: 'hello_world', language: { code: 'en', }, }, });   ","version":"1.0.17","tagName":"h3"},{"title":"Handling Webhooks‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#handling-webhooks","content":" // Verify webhook app.get('/webhook', (req, res) =&gt; { const verified = await whatsappPlugin.verifyWebhook(req.query['hub.verify_token']); if (verified) { res.send(req.query['hub.challenge']); } else { res.sendStatus(403); } }); // Handle webhook events app.post('/webhook', (req, res) =&gt; { await whatsappPlugin.handleWebhook(req.body); res.sendStatus(200); });   ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#features","content":" Send text messagesSend template messagesWebhook verificationWebhook event handlingMessage status updates  ","version":"1.0.17","tagName":"h2"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#error-handling","content":" The plugin throws errors in the following cases:  try { await whatsappPlugin.sendMessage({ type: 'text', to: '1234567890', content: 'Hello!', }); } catch (error) { console.error('Failed to send message:', error.message); }   Common error cases:  Invalid configurationFailed message sendingWebhook verification failureInvalid webhook payload  ","version":"1.0.17","tagName":"h2"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#best-practices","content":" Always validate phone numbers before sending messagesUse template messages for first-time messages to usersStore message IDs for tracking delivery statusImplement proper error handlingSet up webhook retry mechanismsKeep your access tokens secure  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Interfaces‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#core-interfaces","content":" interface WhatsAppConfig { accessToken: string; phoneNumberId: string; webhookVerifyToken?: string; businessAccountId?: string; } interface WhatsAppMessage { type: 'text' | 'template'; to: string; content: string | WhatsAppTemplate; } interface WhatsAppTemplate { name: string; language: { code: string; }; components?: Array&lt;{ type: string; parameters: Array&lt;{ type: string; text?: string; }&gt;; }&gt;; }   ","version":"1.0.17","tagName":"h3"},{"title":"Plugin Methods‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#plugin-methods","content":" sendMessage: Send WhatsApp messageshandleWebhook: Process incoming webhook eventsverifyWebhook: Verify webhook authenticityMessage and status handlers  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#testing","content":" npm run test   ","version":"1.0.17","tagName":"h3"},{"title":"Linting‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#linting","content":" npm run lint   ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#security-best-practices","content":" Store credentials securely using environment variablesValidate all phone numbers before sending messagesUse template messages for first-time contactsImplement proper error handlingKeep dependencies updatedMonitor API usage and rate limitsUse HTTPS for all API communication  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#credits","content":" This plugin integrates with and builds upon several key technologies:  WhatsApp Cloud API: Meta's official WhatsApp Business PlatformAxios: Promise-based HTTP client for API requestsMeta for Developers: Meta's developer platform and tools  Special thanks to:  The Eliza community for their contributions and feedback  For more information about WhatsApp Cloud API and its capabilities, visit:  WhatsApp Business Platform DocumentationMeta for Developers BlogWhatsApp Business API GitHub  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-whatsapp","url":"/packages/plugins/whatsapp#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-zerion","type":0,"sectionRef":"#","url":"/packages/plugins/zerion","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#features","content":" Real-time wallet portfolio dataDetailed token positions and balancesChain distribution analysisPortfolio value changes trackingSupport for all EVM-compatible chainsNatural language processing for wallet queries  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#installation","content":" npm install @elizaos/plugin-zerion   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#configuration","content":" Get your API key from Zerion Set up your environment variables:  ZERION_API_KEY=your_api_key   Register the plugin in your Eliza configuration:  import { zerionPlugin } from '@elizaos/plugin-zerion'; // In your Eliza configuration plugins: [ zerionPlugin, // ... other plugins ];   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#usage","content":" The plugin responds to natural language queries about wallet data. Here are some examples:  &quot;Show me the portfolio for 0x123...abc&quot; &quot;What are the token positions in 0x456...def?&quot; &quot;Get wallet holdings for 0x789...ghi&quot;   ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#available-actions","content":" getWallet_portfolio‚Äã  Fetches comprehensive portfolio data for a wallet address, including:  Total portfolio valueChain distributionPosition type distribution24h value changes  // Example response format { totalValue: number; chainDistribution: Record&lt;string, number&gt;; positionTypes: Record&lt;string, number&gt;; changes: { absolute_1d: number; percent_1d: number; } }   getWallet_positions‚Äã  Fetches detailed information about all token positions in a wallet:  Token name and symbolQuantity and current valuePrice and 24h changeChain informationVerification status  // Example response format { positions: Array&lt;{ name: string; symbol: string; quantity: number; value: number; price: number; chain: string; change24h: number | null; verified: boolean; }&gt;; totalValue: number; }   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#environment-variables","content":" Variable\tDescription\tRequiredZERION_API_KEY\tYour Zerion API key\tYes  ","version":"1.0.17","tagName":"h3"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#error-handling","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Support‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#support","content":" For support, please open an issue in the repository or reach out to the maintainers. telegram: @singhal_pranav  ","version":"1.0.17","tagName":"h2"},{"title":"Links‚Äã","type":1,"pageTitle":"@elizaos/plugin-zerion","url":"/packages/plugins/zerion#links","content":" Zerion API DocumentationGitHub Repository ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-zapper","type":0,"sectionRef":"#","url":"/packages/plugins/zapper","content":"","keywords":"","version":"1.0.17"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#features","content":" Get portfolio data from wallet addresses on networks supported by the Zapper API.Get portfolio data from addresses attached to Farcaster profiles.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#installation","content":" npm install @elizaos/plugin-zapper   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#configuration","content":" Get your API key from Zapper Set up your environment variables:  ZAPPER_API_KEY=your_api_key   Register the plugin in your Eliza configuration:  import { zapperPlugin } from '@elizaos/plugin-zapper'; // In your Eliza configuration plugins: [ zapperPlugin, // ... other plugins ];   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#usage","content":" The plugin responds to natural language queries about wallet data. Here are some examples:  &quot;Show me the holdings of @vitalik.eth&quot; &quot;Show me the portfolio of these wallets 0xd8d...045, 0xadd...077&quot; &quot;Get wallet holdings for HN7cA...WrH&quot;   ","version":"1.0.17","tagName":"h2"},{"title":"Available Actions‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#available-actions","content":" portfolio‚Äã  Fetch the current portfolio of provided addresses.  // Example response format portfolio: { tokenBalances: Array&lt;{ address: string; network: string; token: { balance: number; balanceUSD: number; baseToken: { name: string; symbol: string; }; }; }&gt;; nftBalances: Array&lt;{ network: string; balanceUSD: number; }&gt;; totals: { total: number; totalWithNFT: number; totalByNetwork: Array&lt;{ network: string; total: number; }&gt;; holdings: Array&lt;{ label: string; balanceUSD: number; pct: number; }&gt;; } }   farcasterPortfoio‚Äã  Fetch the portfolio of addresses attached to Farcaster profiles.  // Example response format farcasterProfile: { username: string; fid: number; metadata: { displayName: string; description: string; imageUrl: string; warpcast: string; }; connectedAddresses: string[]; custodyAddress: string; };   ","version":"1.0.17","tagName":"h3"},{"title":"Development Guide‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#development-guide","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Setting up the development environment‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#setting-up-the-development-environment","content":" Clone the repository.Install dependencies:  bun install   Build the plugin:  bun build   ","version":"1.0.17","tagName":"h3"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#environment-variables","content":" Variable\tDescription\tRequiredZAPPER_API_KEY\tYour Zapper API key\tYes  ","version":"1.0.17","tagName":"h3"},{"title":"Types‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#types","content":" export type ZapperPortfolioResponse = { data: { portfolio: { tokenBalances: Array&lt;{ address: string; network: string; token: { balance: number; balanceUSD: number; baseToken: { name: string; symbol: string; }; }; }&gt;; nftBalances: Array&lt;{ network: string; balanceUSD: number; }&gt;; totals: { total: number; totalWithNFT: number; totalByNetwork: Array&lt;{ network: string; total: number; }&gt;; holdings: Array&lt;{ label: string; balanceUSD: number; pct: number; }&gt;; }; }; }; }; export type ZapperFarcasterResponse = { data: { accounts: Array&lt;{ farcasterProfile: { username: string; fid: number; metadata: { displayName: string; description: string; imageUrl: string; warpcast: string; }; connectedAddresses: string[]; custodyAddress: string; }; }&gt;; }; };   ","version":"1.0.17","tagName":"h3"},{"title":"Links‚Äã","type":1,"pageTitle":"@elizaos/plugin-zapper","url":"/packages/plugins/zapper#links","content":" Zapper API Documentation ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-zilliqa","type":0,"sectionRef":"#","url":"/packages/plugins/zilliqa","content":"","keywords":"","version":"1.0.17"},{"title":"Description‚Äã","type":1,"pageTitle":"@elizaos/plugin-zilliqa","url":"/packages/plugins/zilliqa#description","content":" GOAT üêê (Great Onchain Agent Toolkit) is an open-source framework for adding blockchain tools such as wallets, being able to hold or trade tokens, or interacting with blockchain smart contracts, to your AI agent.  Chains supportedPlugins supported  This plugin integrates the GOAT Zilliqa plugin and wallet with Eliza.  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-zilliqa","url":"/packages/plugins/zilliqa#installation","content":" bun install @elizaos/plugin-zilliqa   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-zilliqa","url":"/packages/plugins/zilliqa#configuration","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Environment Variables‚Äã","type":1,"pageTitle":"@elizaos/plugin-zilliqa","url":"/packages/plugins/zilliqa#environment-variables","content":" EVM_PRIVATE_KEY=&lt;Your EVM wallet private key&gt; EVM_PROVIDER_URL=&lt;Your RPC provider URL (e.g., Infura, Alchemy)&gt; ENABLE_ZILLIQA=1   ","version":"1.0.17","tagName":"h3"},{"title":"Common Issues & Troubleshooting‚Äã","type":1,"pageTitle":"@elizaos/plugin-zilliqa","url":"/packages/plugins/zilliqa#common-issues--troubleshooting","content":" Agent not executing an action: If you are also using the EVM Plugin, sometimes the agent might confuse the action name with an EVM Plugin action name instead of the GOAT Plugin action. Removing the EVM Plugin should fix this issue. There is no need for you to use both plugins at the same time.If you are using Trump as a character it might be tricky to get them to perform any action since the character is full of prompts that aim to change the topic of the conversation. To fix this try using a different character or create your own with prompts that are more suitable to what the agent is supposed to do. Wallet Connection Issues Verify private key is correctly formattedCheck RPC endpoint availabilityEnsure sufficient network balance Transaction Issues Verify gas availabilityCheck network congestionConfirm transaction parameters  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-zilliqa","url":"/packages/plugins/zilliqa#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"},{"title":"@elizaos/plugin-zksync-era","type":0,"sectionRef":"#","url":"/packages/plugins/zksync-era","content":"","keywords":"","version":"1.0.17"},{"title":"Overview‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#overview","content":" This plugin provides functionality to:  Execute token transfers on ZKSync EraHandle smart account operationsManage transaction signing and submissionSupport multiple token standardsProcess transaction receipts and confirmations  ","version":"1.0.17","tagName":"h2"},{"title":"Installation‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#installation","content":" npm install @elizaos/plugin-zksync-era   ","version":"1.0.17","tagName":"h2"},{"title":"Configuration‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#configuration","content":" The plugin requires the following environment variables:  ZKSYNC_ADDRESS=your_address # Required: Your ZKSync wallet address ZKSYNC_PRIVATE_KEY=your_private_key # Required: Your wallet's private key   ","version":"1.0.17","tagName":"h2"},{"title":"Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#usage","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Basic Setup‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#basic-setup","content":" import { zksyncEraPlugin } from '@elizaos/plugin-zksync-era'; const plugin = zksyncEraPlugin;   ","version":"1.0.17","tagName":"h3"},{"title":"Token Transfers‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#token-transfers","content":" // Transfer tokens await transfer.handler( runtime, { content: { tokenAddress: '0x1d17CBcF0D6D143135aE902365D2E5e2A16538D4', // USDC recipient: '0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62', amount: '100', }, }, state );   ","version":"1.0.17","tagName":"h3"},{"title":"Features‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#features","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Supported Tokens‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#supported-tokens","content":" The plugin includes pre-configured addresses for common tokens:  const TOKENS = { ZK: '0x5A7d6b2F92C77FAD6CCaBd7EE0624E64907Eaf3E', ETH: '0x000000000000000000000000000000000000800A', USDC: '0x1d17CBcF0D6D143135aE902365D2E5e2A16538D4', };   ","version":"1.0.17","tagName":"h3"},{"title":"Smart Account Integration‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#smart-account-integration","content":" const web3 = new Web3(); web3.registerPlugin(new ZKsyncPlugin(Web3ZKsyncL2.initWithDefaultProvider(types.Network.Mainnet))); const smartAccount = new web3.ZKsync.SmartAccount({ address: PUBLIC_KEY, secret: PRIVATE_KEY, });   ","version":"1.0.17","tagName":"h3"},{"title":"Error Handling‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#error-handling","content":" The plugin includes comprehensive error handling:  try { const transferTx = await smartAccount.transfer({ to: recipient, token: tokenAddress, amount: amount, }); const receipt = await transferTx.wait(); } catch (error) { console.error('Transfer failed:', error.message); }   Common error cases:  Invalid configurationInsufficient balanceNetwork issuesInvalid addressesFailed transactions  ","version":"1.0.17","tagName":"h2"},{"title":"Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#best-practices","content":" Always validate addresses before transactionsKeep private keys secureMonitor transaction statusImplement proper error handlingUse appropriate gas settingsKeep track of transaction receipts  ","version":"1.0.17","tagName":"h2"},{"title":"API Reference‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#api-reference","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Core Interfaces‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#core-interfaces","content":" interface TransferContent { tokenAddress: string; recipient: string; amount: string | number; } interface ZKsyncConfig { ZKSYNC_ADDRESS: string; ZKSYNC_PRIVATE_KEY: string; }   ","version":"1.0.17","tagName":"h3"},{"title":"Plugin Methods‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#plugin-methods","content":" transfer: Execute token transfersvalidateZKsyncConfig: Validate configurationTransaction status monitoringReceipt handling  ","version":"1.0.17","tagName":"h3"},{"title":"Development‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#development","content":" ","version":"1.0.17","tagName":"h2"},{"title":"Building‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#building","content":" npm run build   ","version":"1.0.17","tagName":"h3"},{"title":"Testing‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#testing","content":" npm run test   ","version":"1.0.17","tagName":"h3"},{"title":"Security Best Practices‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#security-best-practices","content":" Store private keys securely using environment variablesValidate all addresses before transactionsImplement proper error handlingKeep dependencies updatedMonitor transaction statusUse secure RPC endpointsImplement proper gas management  ","version":"1.0.17","tagName":"h2"},{"title":"Example Usage‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#example-usage","content":" // Initialize plugin const zksync = zksyncEraPlugin; // Execute transfer try { await transfer.handler( runtime, { content: { tokenAddress: TOKENS.USDC, recipient: '0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62', amount: '100', }, }, state ); } catch (error) { console.error('Transfer failed:', error.message); }   ","version":"1.0.17","tagName":"h2"},{"title":"Validation‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#validation","content":" The plugin includes validation for:  Wallet addressesToken addressesTransaction amountsConfiguration parametersNetwork status  ","version":"1.0.17","tagName":"h2"},{"title":"Dependencies‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#dependencies","content":" @elizaos/core: Core Eliza functionalityweb3: Web3 library for blockchain interactionweb3-plugin-zksync: ZKSync Era integrationOther standard dependencies listed in package.json  ","version":"1.0.17","tagName":"h2"},{"title":"Contributing‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#contributing","content":" Contributions are welcome! Please see the CONTRIBUTING.md file for more information.  ","version":"1.0.17","tagName":"h2"},{"title":"Credits‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#credits","content":" This plugin integrates with and builds upon several key technologies:  ZKSync Era: Layer 2 scaling solution for EthereumWeb3.js: Ethereum JavaScript APIweb3-plugin-zksync: Official ZKSync plugin for Web3.js  Special thanks to:  The Eliza community for their contributions and feedback  For more information about ZKSync Era and its capabilities, visit:  ZKSync DocumentationMatter Labs BlogZKSync GitHub  ","version":"1.0.17","tagName":"h2"},{"title":"License‚Äã","type":1,"pageTitle":"@elizaos/plugin-zksync-era","url":"/packages/plugins/zksync-era#license","content":" This plugin is part of the Eliza project. See the main project repository for license information. ","version":"1.0.17","tagName":"h2"}],"options":{"id":"default"}}