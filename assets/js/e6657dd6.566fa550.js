"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[47658],{71184:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var s=r(14041);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},75231:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core/database","title":"\ud83d\udcbe Database Adapters","description":"Database adapters provide persistent storage capabilities for ElizaOS agents. They handle memory storage, relationship tracking, and knowledge management across different database backends.","source":"@site/versioned_docs/version-0.25.9/core/database.md","sourceDirName":"core","slug":"/core/database","permalink":"/docs/0.25.9/core/database","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/versioned_docs/version-0.25.9/core/database.md","tags":[],"version":"0.25.9","lastUpdatedBy":"Shaw","lastUpdatedAt":1748825127000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Evaluators","permalink":"/docs/0.25.9/core/evaluators"},"next":{"title":"Configuration","permalink":"/docs/0.25.9/guides/configuration"}}');var t=r(31085),a=r(71184);const i={sidebar_position:7},o="\ud83d\udcbe Database Adapters",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Core Functionality",id:"core-functionality",level:2},{value:"Implementation Notes",id:"implementation-notes",level:3},{value:"Adapter Implementations",id:"adapter-implementations",level:2},{value:"Quick Start",id:"quick-start",level:3},{value:"Adapter Comparison",id:"adapter-comparison",level:2},{value:"Implementation Details",id:"implementation-details",level:2},{value:"PostgreSQL Requirements",id:"postgresql-requirements",level:3},{value:"SQLite Schema",id:"sqlite-schema",level:3},{value:"Supabase Vector Tables",id:"supabase-vector-tables",level:3},{value:"Embedding Support",id:"embedding-support",level:2},{value:"Transaction &amp; Error Handling",id:"transaction--error-handling",level:2},{value:"FAQ",id:"faq",level:2},{value:"How do I choose the right adapter?",id:"how-do-i-choose-the-right-adapter",level:3},{value:"Can I switch adapters later?",id:"can-i-switch-adapters-later",level:3},{value:"How are vector embeddings handled?",id:"how-are-vector-embeddings-handled",level:3},{value:"What about data migration?",id:"what-about-data-migration",level:3},{value:"How do I handle schema updates?",id:"how-do-i-handle-schema-updates",level:3},{value:"How do I fix database connection issues?",id:"how-do-i-fix-database-connection-issues",level:3},{value:"How do I resolve embedding dimension mismatch errors?",id:"how-do-i-resolve-embedding-dimension-mismatch-errors",level:3},{value:"How do I clear/reset my database?",id:"how-do-i-clearreset-my-database",level:3},{value:"Which database should I use in production?",id:"which-database-should-i-use-in-production",level:3},{value:"How do I migrate between different database adapters?",id:"how-do-i-migrate-between-different-database-adapters",level:3},{value:"Further Reading",id:"further-reading",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"-database-adapters",children:"\ud83d\udcbe Database Adapters"})}),"\n",(0,t.jsx)(n.p,{children:"Database adapters provide persistent storage capabilities for ElizaOS agents. They handle memory storage, relationship tracking, and knowledge management across different database backends."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["Database adapters implement the ",(0,t.jsx)(n.a,{href:"/api/interfaces/IDatabaseAdapter",children:(0,t.jsx)(n.code,{children:"IDatabaseAdapter"})})," interface to provide consistent data access across different storage solutions. Each adapter optimizes for specific use cases:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Adapter"}),(0,t.jsx)(n.th,{children:"Best For"}),(0,t.jsx)(n.th,{children:"Key Features"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-mongodb",children:"MongoDB"})}),(0,t.jsx)(n.td,{children:"Production deployments"}),(0,t.jsx)(n.td,{children:"Sharding, vector search, real-time participant management"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-postgres",children:"PostgreSQL"})}),(0,t.jsx)(n.td,{children:"Enterprise & vector search"}),(0,t.jsx)(n.td,{children:"Dynamic vector dimensions, fuzzy matching, comprehensive logging"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-sqlite",children:"SQLite"})}),(0,t.jsx)(n.td,{children:"Development & embedded"}),(0,t.jsx)(n.td,{children:"Lightweight, file-based, vector BLOB support"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-supabase",children:"Supabase"})}),(0,t.jsx)(n.td,{children:"Cloud-hosted vector DB"}),(0,t.jsx)(n.td,{children:"Multiple embedding sizes, real-time subscriptions, row-level security"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-sqlite",children:"PGLite"})}),(0,t.jsx)(n.td,{children:"Browser environments"}),(0,t.jsx)(n.td,{children:"Lightweight PostgreSQL implementation, HNSW indexing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-qdrant",children:"Qdrant"})}),(0,t.jsx)(n.td,{children:"Vector-focused deployments"}),(0,t.jsx)(n.td,{children:"Optimized for RAG applications, sophisticated preprocessing"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-sqljs",children:"SQL.js"})}),(0,t.jsx)(n.td,{children:"Browser environments"}),(0,t.jsx)(n.td,{children:"Full SQLite functionality in browser, complex queries"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"core-functionality",children:"Core Functionality"}),"\n",(0,t.jsxs)(n.p,{children:["All adapters extend the ",(0,t.jsx)(n.a,{href:"/api/classes/DatabaseAdapter",children:(0,t.jsx)(n.code,{children:"DatabaseAdapter"})})," base class and implement the ",(0,t.jsx)(n.a,{href:"/api/interfaces/IDatabaseAdapter",children:(0,t.jsx)(n.code,{children:"IDatabaseAdapter"})})," interface. Here's a comprehensive overview of available methods:"]}),"\n",(0,t.jsxs)(n.p,{children:["| Category                 | Method                        | Description                         | Parameters                                                                                                                                                      |\n| ------------------------ | ----------------------------- | ----------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- | ----- |\n| ",(0,t.jsx)(n.strong,{children:"Database Lifecycle"}),"   |\n|                          | ",(0,t.jsx)(n.code,{children:"init()"}),"                      | Initialize database connection      | -                                                                                                                                                               |\n|                          | ",(0,t.jsx)(n.code,{children:"close()"}),"                     | Close database connection           | -                                                                                                                                                               |\n| ",(0,t.jsx)(n.strong,{children:"Memory Management"}),"    |\n|                          | ",(0,t.jsx)(n.code,{children:"createMemory()"}),"              | Store new memory                    | ",(0,t.jsx)(n.code,{children:"memory: Memory, tableName: string, unique?: boolean"}),"                                                                                                           |\n|                          | ",(0,t.jsx)(n.code,{children:"getMemoryById()"}),"             | Retrieve specific memory            | ",(0,t.jsx)(n.code,{children:"id: UUID"}),"                                                                                                                                                      |\n|                          | ",(0,t.jsx)(n.code,{children:"getMemories()"}),"               | Get memories matching criteria      | ",(0,t.jsx)(n.code,{children:"{ roomId: UUID, count?: number, unique?: boolean, tableName: string, agentId: UUID, start?: number, end?: number }"}),"                                            |\n|                          | ",(0,t.jsx)(n.code,{children:"getMemoriesByIds()"}),"          | Get multiple memories by IDs        | ",(0,t.jsx)(n.code,{children:"memoryIds: UUID[], tableName?: string"}),"                                                                                                                         |\n|                          | ",(0,t.jsx)(n.code,{children:"getMemoriesByRoomIds()"}),"      | Get memories from multiple rooms    | ",(0,t.jsx)(n.code,{children:"{ agentId: UUID, roomIds: UUID[], tableName: string, limit?: number }"}),"                                                                                         |\n|                          | ",(0,t.jsx)(n.code,{children:"searchMemories()"}),"            | Search with vector similarity       | ",(0,t.jsx)(n.code,{children:"{ tableName: string, agentId: UUID, roomId: UUID, embedding: number[], match_threshold: number, match_count: number, unique: boolean }"}),"                        |\n|                          | ",(0,t.jsx)(n.code,{children:"searchMemoriesByEmbedding()"})," | Search memories by embedding vector | ",(0,t.jsx)(n.code,{children:"embedding: number[], { match_threshold?: number, count?: number, roomId?: UUID, agentId?: UUID, unique?: boolean, tableName: string }"}),"                         |\n|                          | ",(0,t.jsx)(n.code,{children:"removeMemory()"}),"              | Remove specific memory              | ",(0,t.jsx)(n.code,{children:"memoryId: UUID, tableName: string"}),"                                                                                                                             |\n|                          | ",(0,t.jsx)(n.code,{children:"removeAllMemories()"}),"         | Remove all memories in room         | ",(0,t.jsx)(n.code,{children:"roomId: UUID, tableName: string"}),"                                                                                                                               |\n|                          | ",(0,t.jsx)(n.code,{children:"countMemories()"}),"             | Count memories in room              | ",(0,t.jsx)(n.code,{children:"roomId: UUID, unique?: boolean, tableName?: string"}),"                                                                                                            |\n| ",(0,t.jsx)(n.strong,{children:"Knowledge Management"})," |\n|                          | ",(0,t.jsx)(n.code,{children:"createKnowledge()"}),"           | Store new knowledge item            | ",(0,t.jsx)(n.code,{children:"knowledge: RAGKnowledgeItem"}),"                                                                                                                                   |\n|                          | ",(0,t.jsx)(n.code,{children:"getKnowledge()"}),"              | Retrieve knowledge                  | ",(0,t.jsx)(n.code,{children:"{ id?: UUID, agentId: UUID, limit?: number, query?: string, conversationContext?: string }"}),"                                                                    |\n|                          | ",(0,t.jsx)(n.code,{children:"searchKnowledge()"}),"           | Semantic knowledge search           | ",(0,t.jsx)(n.code,{children:"{ agentId: UUID, embedding: Float32Array, match_threshold: number, match_count: number, searchText?: string }"}),"                                                 |\n|                          | ",(0,t.jsx)(n.code,{children:"removeKnowledge()"}),"           | Remove knowledge item               | ",(0,t.jsx)(n.code,{children:"id: UUID"}),"                                                                                                                                                      |\n|                          | ",(0,t.jsx)(n.code,{children:"clearKnowledge()"}),"            | Remove all knowledge                | ",(0,t.jsx)(n.code,{children:"agentId: UUID, shared?: boolean"}),"                                                                                                                               |\n| ",(0,t.jsx)(n.strong,{children:"Room & Participants"}),"  |\n|                          | ",(0,t.jsx)(n.code,{children:"createRoom()"}),"                | Create new conversation room        | ",(0,t.jsx)(n.code,{children:"roomId?: UUID"}),"                                                                                                                                                 |\n|                          | ",(0,t.jsx)(n.code,{children:"getRoom()"}),"                   | Get room by ID                      | ",(0,t.jsx)(n.code,{children:"roomId: UUID"}),"                                                                                                                                                  |\n|                          | ",(0,t.jsx)(n.code,{children:"removeRoom()"}),"                | Remove room                         | ",(0,t.jsx)(n.code,{children:"roomId: UUID"}),"                                                                                                                                                  |\n|                          | ",(0,t.jsx)(n.code,{children:"addParticipant()"}),"            | Add user to room                    | ",(0,t.jsx)(n.code,{children:"userId: UUID, roomId: UUID"}),"                                                                                                                                    |\n|                          | ",(0,t.jsx)(n.code,{children:"removeParticipant()"}),"         | Remove user from room               | ",(0,t.jsx)(n.code,{children:"userId: UUID, roomId: UUID"}),"                                                                                                                                    |\n|                          | ",(0,t.jsx)(n.code,{children:"getParticipantsForRoom()"}),"    | List room participants              | ",(0,t.jsx)(n.code,{children:"roomId: UUID"}),"                                                                                                                                                  |\n|                          | ",(0,t.jsx)(n.code,{children:"getParticipantsForAccount()"})," | Get user's room participations      | ",(0,t.jsx)(n.code,{children:"userId: UUID"}),"                                                                                                                                                  |\n|                          | ",(0,t.jsx)(n.code,{children:"getRoomsForParticipant()"}),"    | Get rooms for user                  | ",(0,t.jsx)(n.code,{children:"userId: UUID"}),"                                                                                                                                                  |\n|                          | ",(0,t.jsx)(n.code,{children:"getRoomsForParticipants()"}),"   | Get shared rooms for users          | ",(0,t.jsx)(n.code,{children:"userIds: UUID[]"}),"                                                                                                                                               |\n|                          | ",(0,t.jsx)(n.code,{children:"getParticipantUserState()"}),"   | Get participant's state             | ",(0,t.jsx)(n.code,{children:"roomId: UUID, userId: UUID"}),"                                                                                                                                    |\n|                          | ",(0,t.jsx)(n.code,{children:"setParticipantUserState()"}),"   | Update participant state            | ",(0,t.jsx)(n.code,{children:'roomId: UUID, userId: UUID, state: "FOLLOWED"                                                                                                                  | "MUTED" | null'})," |\n| ",(0,t.jsx)(n.strong,{children:"Account Management"}),"   |\n|                          | ",(0,t.jsx)(n.code,{children:"createAccount()"}),"             | Create new user account             | ",(0,t.jsx)(n.code,{children:"account: Account"}),"                                                                                                                                              |\n|                          | ",(0,t.jsx)(n.code,{children:"getAccountById()"}),"            | Retrieve user account               | ",(0,t.jsx)(n.code,{children:"userId: UUID"}),"                                                                                                                                                  |\n|                          | ",(0,t.jsx)(n.code,{children:"getActorDetails()"}),"           | Get actor information               | ",(0,t.jsx)(n.code,{children:"{ roomId: UUID }"}),"                                                                                                                                              |\n| ",(0,t.jsx)(n.strong,{children:"Relationships"}),"        |\n|                          | ",(0,t.jsx)(n.code,{children:"createRelationship()"}),"        | Create user connection              | ",(0,t.jsx)(n.code,{children:"{ userA: UUID, userB: UUID }"}),"                                                                                                                                  |\n|                          | ",(0,t.jsx)(n.code,{children:"getRelationship()"}),"           | Get relationship details            | ",(0,t.jsx)(n.code,{children:"{ userA: UUID, userB: UUID }"}),"                                                                                                                                  |\n|                          | ",(0,t.jsx)(n.code,{children:"getRelationships()"}),"          | Get all relationships               | ",(0,t.jsx)(n.code,{children:"{ userId: UUID }"}),"                                                                                                                                              |\n| ",(0,t.jsx)(n.strong,{children:"Goals"}),"                |\n|                          | ",(0,t.jsx)(n.code,{children:"createGoal()"}),"                | Create new goal                     | ",(0,t.jsx)(n.code,{children:"goal: Goal"}),"                                                                                                                                                    |\n|                          | ",(0,t.jsx)(n.code,{children:"updateGoal()"}),"                | Update goal                         | ",(0,t.jsx)(n.code,{children:"goal: Goal"}),"                                                                                                                                                    |\n|                          | ",(0,t.jsx)(n.code,{children:"updateGoalStatus()"}),"          | Update goal status                  | ",(0,t.jsx)(n.code,{children:"{ goalId: UUID, status: GoalStatus }"}),"                                                                                                                          |\n|                          | ",(0,t.jsx)(n.code,{children:"getGoals()"}),"                  | Get goals matching criteria         | ",(0,t.jsx)(n.code,{children:"{ agentId: UUID, roomId: UUID, userId?: UUID, onlyInProgress?: boolean, count?: number }"}),"                                                                      |\n|                          | ",(0,t.jsx)(n.code,{children:"removeGoal()"}),"                | Remove specific goal                | ",(0,t.jsx)(n.code,{children:"goalId: UUID"}),"                                                                                                                                                  |\n|                          | ",(0,t.jsx)(n.code,{children:"removeAllGoals()"}),"            | Remove all goals in room            | ",(0,t.jsx)(n.code,{children:"roomId: UUID"}),"                                                                                                                                                  |\n| ",(0,t.jsx)(n.strong,{children:"Caching & Embedding"}),"  |\n|                          | ",(0,t.jsx)(n.code,{children:"getCachedEmbeddings()"}),"       | Retrieve cached embeddings          | ",(0,t.jsx)(n.code,{children:"{ query_table_name: string, query_threshold: number, query_input: string, query_field_name: string, query_field_sub_name: string, query_match_count: number }"})," |\n| ",(0,t.jsx)(n.strong,{children:"Logging"}),"              |\n|                          | ",(0,t.jsx)(n.code,{children:"log()"}),"                       | Log event or action                 | ",(0,t.jsx)(n.code,{children:"{ body: { [key: string]: unknown }, userId: UUID, roomId: UUID, type: string }"}),"                                                                                |"]}),"\n",(0,t.jsx)(n.h3,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,t.jsx)(n.p,{children:"Each adapter optimizes these methods for their specific database backend:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MongoDB"}),": Uses aggregation pipelines for vector operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PostgreSQL"}),": Leverages pgvector extension"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SQLite"}),": Implements BLOB storage for vectors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Qdrant"}),": Optimizes with HNSW indexing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Supabase"}),": Adds real-time capabilities"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: For detailed implementation examples, see each adapter's source repository (",(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins",children:"https://github.com/elizaos-plugins"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"All adapters provide:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface IDatabaseAdapter {\n  // Memory Management\n  createMemory(memory: Memory, tableName: string): Promise<void>;\n  getMemories(params: { roomId: UUID; count?: number }): Promise<Memory[]>;\n  searchMemories(params: SearchParams): Promise<Memory[]>;\n  removeMemory(memoryId: UUID): Promise<void>;\n\n  // Account & Room Management\n  createAccount(account: Account): Promise<boolean>;\n  getAccountById(userId: UUID): Promise<Account>;\n  createRoom(roomId?: UUID): Promise<UUID>;\n  getRoom(roomId: UUID): Promise<UUID>;\n\n  // Participant Management\n  addParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n  getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;\n\n  // Knowledge Management\n  createKnowledge(knowledge: RAGKnowledgeItem): Promise<void>;\n  searchKnowledge(params: SearchParams): Promise<RAGKnowledgeItem[]>;\n\n  // Goal Management\n  createGoal(goal: Goal): Promise<void>;\n  updateGoalStatus(params: { goalId: UUID; status: GoalStatus }): Promise<void>;\n}\n"})}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Relationship Management"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'interface IDatabaseAdapter {\n    // Room Management\n    createRoom(roomId?: UUID): Promise<UUID>;\n    getRoom(roomId: UUID): Promise<UUID | null>;\n    getRoomsForParticipant(userId: UUID): Promise<UUID[]>;\n    \n    // Participant Management\n    addParticipant(userId: UUID, roomId: UUID): Promise<boolean>;\n    getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;\n    getParticipantUserState(roomId: UUID, userId: UUID): Promise<"FOLLOWED" | "MUTED" | null>;\n    \n    // Relationship Tracking\n    createRelationship(params: { userA: UUID; userB: UUID }): Promise<boolean>;\n    getRelationship(params: { userA: UUID; userB: UUID }): Promise<Relationship | null>;\n}\n'})})]}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Cache & Goal Management"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface IDatabaseCacheAdapter {\n    getCache(params: {\n        agentId: UUID;\n        key: string;\n    }): Promise<string | undefined>;\n    \n    setCache(params: {\n        agentId: UUID;\n        key: string;\n        value: string;\n    }): Promise<boolean>;\n}\n\ninterface IDatabaseAdapter {\n// Goal Management\ncreateGoal(goal: Goal): Promise<void>;\nupdateGoal(goal: Goal): Promise<void>;\ngetGoals(params: {\nagentId: UUID;\nroomId: UUID;\nuserId?: UUID | null;\nonlyInProgress?: boolean;\ncount?: number;\n}): Promise<Goal[]>;\n}\n\n"})})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"adapter-implementations",children:"Adapter Implementations"}),"\n",(0,t.jsx)(n.h3,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// MongoDB\nimport { MongoDBAdapter } from '@elizaos/adapter-mongodb';\nconst mongoAdapter = new MongoDBAdapter({\n    uri: process.env.MONGODB_URI,\n    dbName: process.env.MONGODB_DB_NAME\n});\n\n// PostgreSQL\nimport { PostgresAdapter } from '@elizaos/adapter-postgres';\nconst pgAdapter = new PostgresAdapter({\n    connectionString: process.env.POSTGRES_URI\n});\n\n// SQLite\nimport { SqliteDatabaseAdapter } from '@elizaos/adapter-sqlite';\nconst sqliteAdapter = new SqliteDatabaseAdapter('path/to/database.db');\n\n// Supabase\nimport { SupabaseAdapter } from '@elizaos/adapter-supabase';\nconst supabaseAdapter = new SupabaseAdapter({\n    url: process.env.SUPABASE_URL,\n    apiKey: process.env.SUPABASE_API_KEY\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"adapter-comparison",children:"Adapter Comparison"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"MongoDB"}),(0,t.jsx)(n.th,{children:"PostgreSQL"}),(0,t.jsx)(n.th,{children:"SQLite"}),(0,t.jsx)(n.th,{children:"Supabase"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Best For"})}),(0,t.jsx)(n.td,{children:"Production deployments"}),(0,t.jsx)(n.td,{children:"Enterprise & vector search"}),(0,t.jsx)(n.td,{children:"Development & embedded"}),(0,t.jsx)(n.td,{children:"Cloud-hosted vector DB"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Vector Support"})}),(0,t.jsx)(n.td,{children:"Native sharding"}),(0,t.jsx)(n.td,{children:"Multiple dimensions (384d-1536d)"}),(0,t.jsx)(n.td,{children:"BLOB storage"}),(0,t.jsx)(n.td,{children:"Multi-dimension tables"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Key Features"})}),(0,t.jsx)(n.td,{children:"Auto-sharding, Real-time tracking, Auto-reconnection"}),(0,t.jsx)(n.td,{children:"Fuzzy matching, UUID keys, Comprehensive logging"}),(0,t.jsx)(n.td,{children:"JSON validation, FK constraints, Built-in caching"}),(0,t.jsx)(n.td,{children:"Real-time subs, Row-level security, Type-safe queries"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Setup Requirements"})}),(0,t.jsx)(n.td,{children:"None"}),(0,t.jsx)(n.td,{children:"pgvector extension"}),(0,t.jsx)(n.td,{children:"None"}),(0,t.jsx)(n.td,{children:"None"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Collections/Tables"})}),(0,t.jsx)(n.td,{children:"rooms, participants, accounts, memories, knowledge"}),(0,t.jsx)(n.td,{children:"Same as MongoDB + vector extensions"}),(0,t.jsx)(n.td,{children:"Same as MongoDB + metadata JSON"}),(0,t.jsx)(n.td,{children:"Same as PostgreSQL + dimension-specific tables"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-requirements",children:"PostgreSQL Requirements"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE EXTENSION IF NOT EXISTS vector;\nCREATE EXTENSION IF NOT EXISTS fuzzystrmatch;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sqlite-schema",children:"SQLite Schema"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE memories (\n    id TEXT PRIMARY KEY,\n    type TEXT,\n    content TEXT,\n    embedding BLOB,\n    userId TEXT FK,\n    roomId TEXT FK,\n    agentId TEXT FK\n);\n\nCREATE TABLE knowledge (\n    id TEXT PRIMARY KEY,\n    content TEXT NOT NULL,\n    embedding BLOB,\n    metadata JSON\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"supabase-vector-tables",children:"Supabase Vector Tables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE memories_1536 (id UUID PRIMARY KEY, embedding vector(1536));\nCREATE TABLE memories_1024 (id UUID PRIMARY KEY, embedding vector(1024));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"embedding-support",children:"Embedding Support"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Adapter"}),(0,t.jsx)(n.th,{children:"Supported Dimensions"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"MongoDB"}),(0,t.jsx)(n.td,{children:"All (as arrays)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PostgreSQL"}),(0,t.jsx)(n.td,{children:"OpenAI (1536d), Ollama (1024d), GAIANET (768d), BGE (384d)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SQLite"}),(0,t.jsx)(n.td,{children:"All (as BLOB)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Supabase"}),(0,t.jsx)(n.td,{children:"Configurable (384d-1536d)"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Source code: ",(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins",children:"elizaos-plugins"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"transaction--error-handling",children:"Transaction & Error Handling"}),"\n",(0,t.jsxs)(n.p,{children:["All adapters extend the ",(0,t.jsx)(n.a,{href:"/api/classes/DatabaseAdapter",children:(0,t.jsx)(n.code,{children:"DatabaseAdapter"})})," base class which provides built-in transaction support and error handling through the ",(0,t.jsx)(n.a,{href:"/api/classes/CircuitBreaker",children:(0,t.jsx)(n.code,{children:"CircuitBreaker"})})," pattern. See ",(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/core/blob/main/src/database.ts",children:"database.ts"})," for implementation details, as well as the ",(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-postgres/blob/main/src/index.ts",children:"PostgreSQL Adapter Implementation"})," or ",(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-sqlite/blob/main/src/index.ts",children:"SQLite Adapter Implementation"})," for detailed examples."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Transaction handling\nconst result = await adapter.withTransaction(async (client) => {\n    await client.query("BEGIN");\n    // Perform multiple operations\n    await client.query("COMMIT");\n    return result;\n});\n\n// Error handling with circuit breaker\nprotected async withCircuitBreaker<T>(\n    operation: () => Promise<T>,\n    context: string\n): Promise<T> {\n    try {\n        return await this.circuitBreaker.execute(operation);\n    } catch (error) {\n        // Circuit breaker prevents cascading failures\n        elizaLogger.error(`Circuit breaker error in ${context}:`, error);\n        throw error;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Implemented features include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Automatic rollback on errors"}),"\n",(0,t.jsxs)(n.li,{children:["Circuit breaker pattern to prevent cascading failures (",(0,t.jsx)(n.a,{href:"https://github.com/elizaOS/eliza/blob/main/packages/core/src/database/CircuitBreaker.ts",children:"source"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Connection pool management"}),"\n",(0,t.jsx)(n.li,{children:"Error type classification"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-choose-the-right-adapter",children:"How do I choose the right adapter?"}),"\n",(0,t.jsx)(n.p,{children:"Select based on your deployment needs. Use MongoDB/PostgreSQL for production, SQLite for development, SQL.js/PGLite for browser environments, and Qdrant/Supabase for vector-focused applications."}),"\n",(0,t.jsx)(n.h3,{id:"can-i-switch-adapters-later",children:"Can I switch adapters later?"}),"\n",(0,t.jsxs)(n.p,{children:["Yes, all adapters implement the ",(0,t.jsx)(n.a,{href:"/api/interfaces/IDatabaseAdapter",children:(0,t.jsx)(n.code,{children:"IDatabaseAdapter"})})," interface. Data migration between adapters is possible but requires additional steps."]}),"\n",(0,t.jsx)(n.h3,{id:"how-are-vector-embeddings-handled",children:"How are vector embeddings handled?"}),"\n",(0,t.jsx)(n.p,{children:"Each adapter implements vector storage based on its native capabilities - PostgreSQL/Supabase use native vector types, MongoDB uses array fields with indexes, SQLite uses BLOB storage, and Qdrant uses optimized vector stores."}),"\n",(0,t.jsx)(n.h3,{id:"what-about-data-migration",children:"What about data migration?"}),"\n",(0,t.jsxs)(n.p,{children:["Use the adapter's export/import methods defined in the ",(0,t.jsx)(n.a,{href:"/api/classes/DatabaseAdapter",children:(0,t.jsx)(n.code,{children:"DatabaseAdapter"})})," base class."]}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-handle-schema-updates",children:"How do I handle schema updates?"}),"\n",(0,t.jsxs)(n.p,{children:["Run migrations using the adapter-specific CLI tools. Each adapter provides its own migration system - check the adapter's README in the ",(0,t.jsx)(n.a,{href:"https://github.com/elizaos-plugins",children:"elizaos-plugins"})," repository."]}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-fix-database-connection-issues",children:"How do I fix database connection issues?"}),"\n",(0,t.jsx)(n.p,{children:"Check your connection string format, verify the database exists and is accessible, ensure proper adapter configuration, and consider using environment variables for credentials."}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-resolve-embedding-dimension-mismatch-errors",children:"How do I resolve embedding dimension mismatch errors?"}),"\n",(0,t.jsx)(n.p,{children:"Set USE_OPENAI_EMBEDDING=TRUE in your .env file. Different models use different vector dimensions (e.g., OpenAI uses 1536, some local models use 384). Clear your database when switching embedding models."}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-clearreset-my-database",children:"How do I clear/reset my database?"}),"\n",(0,t.jsx)(n.p,{children:"Delete the db.sqlite file in your data directory and restart the agent. For production databases, use proper database management tools for cleanup."}),"\n",(0,t.jsx)(n.h3,{id:"which-database-should-i-use-in-production",children:"Which database should I use in production?"}),"\n",(0,t.jsx)(n.p,{children:"PostgreSQL with vector extensions is recommended for production deployments. SQLite works well for development but may not scale as effectively for production loads."}),"\n",(0,t.jsx)(n.h3,{id:"how-do-i-migrate-between-different-database-adapters",children:"How do I migrate between different database adapters?"}),"\n",(0,t.jsx)(n.p,{children:"Use the export/import methods provided by the DatabaseAdapter base class. Each adapter implements these methods for data migration, though you may need to handle schema differences manually."}),"\n",(0,t.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/0.25.9/guides/memory-management",children:"Memory Management"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/0.25.9/core/agents",children:"State Management"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);