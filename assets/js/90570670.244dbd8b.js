"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[70659],{26175:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"plugins/opacity","title":"Unmaintained: this verifiable inference plugin needs to be ported","description":"This adapter integrates Opacity proofs into ElizaOS, enabling verifiable inference results from various AI model providers available through the CloudFlare AI Gateway. It implements the IVerifiableInferenceAdapter interface, making it compatible with other verifiable inference solutions.","source":"@site/packages/plugins/opacity.md","sourceDirName":"plugins","slug":"/plugins/opacity","permalink":"/packages/plugins/opacity","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"@elizaos/plugin-omniflix","permalink":"/packages/plugins/omniflix"},"next":{"title":"@elizaos/plugin-open-weather","permalink":"/packages/plugins/open-weather"}}');var r=i(31085),a=i(71184);const o={},s="Unmaintained: this verifiable inference plugin needs to be ported",l={},p=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Usage",id:"usage",level:2},{value:"Features",id:"features",level:2},{value:"Response Format",id:"response-format",level:2},{value:"How it Works",id:"how-it-works",level:2},{value:"Step By Step",id:"step-by-step",level:2},{value:"License",id:"license",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"unmaintained-this-verifiable-inference-plugin-needs-to-be-ported",children:"Unmaintained: this verifiable inference plugin needs to be ported"})}),"\n",(0,r.jsx)(n.h1,{id:"elizaosadapter-opacity",children:"@elizaos/adapter-opacity"}),"\n",(0,r.jsxs)(n.p,{children:["This adapter integrates Opacity proofs into ElizaOS, enabling verifiable inference results from various AI model providers available through the ",(0,r.jsx)(n.a,{href:"https://developers.cloudflare.com/ai-gateway",children:"CloudFlare AI Gateway"}),". It implements the ",(0,r.jsx)(n.code,{children:"IVerifiableInferenceAdapter"})," interface, making it compatible with other verifiable inference solutions."]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bun add @elizaos/adapter-opacity\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Add the following environment variables to your ",(0,r.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-env",children:"OPACITY_TEAM_ID=f309ac8ae8a9a14a7e62cd1a521b1c5f\nOPACITY_CLOUDFLARE_NAME=eigen-test\nOPACITY_PROVER_URL=https://opacity-ai-zktls-demo.vercel.app\n# Verifiable Inference Configuration\nVERIFIABLE_INFERENCE_ENABLED=true # Set to true to enable verifiable inference\nVERIFIABLE_INFERENCE_PROVIDER=opacity # Options: opacity\n"})}),"\n",(0,r.jsx)(n.p,{children:"(make sure to VERIFIABLE_INFERENCE_ENABLED to true!)"}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { OpacityAdapter } from '@elizaos/adapter-opacity';\nimport { VerifiableInferenceOptions } from '@elizaos/core';\n\n// Initialize the adapter\nconst opacityAdapter = new OpacityAdapter(runtime, {\n  teamId: process.env.OPACITY_TEAM_ID,\n  teamName: process.env.OPACITY_CLOUDFLARE_NAME,\n  baseUrl: process.env.OPACITY_PROVER_URL,\n});\n\n// Generate text with verifiable results\nconst options: VerifiableInferenceOptions = {\n  // Optional: Override the default endpoint\n  endpoint: 'https://custom-api.example.com',\n  // Optional: Add custom headers\n  headers: {\n    'X-Custom-Header': 'value',\n  },\n  // Optional: Provider-specific options\n  providerOptions: {\n    temperature: 0.7,\n  },\n};\n\nconst result = await opacityAdapter.generateText('What is Rust?', 'gpt-4', options);\n\nconsole.log('Response:', result.text);\nconsole.log('Proof:', result.proof);\n\n// Verify the proof\nconst isValid = await opacityAdapter.verifyProof(result);\nconsole.log('Proof is valid:', isValid);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Implements ",(0,r.jsx)(n.code,{children:"IVerifiableInferenceAdapter"})," interface for standardized verifiable inference"]}),"\n",(0,r.jsxs)(n.li,{children:["Support for multiple AI model provider, in the future may be expanded to accommodate for all gateways ",(0,r.jsx)(n.a,{href:"https://developers.cloudflare.com/ai-gateway/providers/",children:"supported by CloudFlare"})]}),"\n",(0,r.jsx)(n.li,{children:"Customizable options for each request"}),"\n",(0,r.jsx)(n.li,{children:"Built-in proof verification"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"response-format",children:"Response Format"}),"\n",(0,r.jsxs)(n.p,{children:["The adapter returns a ",(0,r.jsx)(n.code,{children:"VerifiableInferenceResult"})," object containing:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'{\n    text: string;           // The generated text response\n    proof: unknown;         // The proof data\n    provider: string;       // The provider name (e.g., "opacity")\n    timestamp: number;      // Generation timestamp\n    metadata?: {           // Optional metadata\n        modelProvider: string;\n        modelClass: string;\n        endpoint: string;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,r.jsx)(n.p,{children:"The Opacity adapter wraps AI model API calls to CloudFlare, then performs MPC-TLS on the logged responses."}),"\n",(0,r.jsx)(n.p,{children:"This allows you to:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Make verifiable API calls to AI model providers"}),"\n",(0,r.jsx)(n.li,{children:"Generate proofs of the responses"}),"\n",(0,r.jsx)(n.li,{children:"Verify the authenticity of the responses"}),"\n",(0,r.jsx)(n.li,{children:"Ensure the responses haven't been tampered with"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-by-step",children:"Step By Step"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    autonumber\n    participant Eliza\n    participant Cloudflare\n    participant OpenAI\n    Eliza ->> Cloudflare : Prompt Req\n    Cloudflare ->> OpenAI : Prompt Req\n    OpenAI ->> Cloudflare : Prompt Response\n    Cloudflare ->> Cloudflare : Log Prompt Response\n    Cloudflare ->> Eliza : Prompt Response\n    create participant Opacity\n    Eliza ->> Opacity : Generate Proof for Prompt Response\n    Opacity ->> Cloudflare : Fetch Prompt Response Log in MPC-TLS\n    Cloudflare ->> Opacity : Respond with Prompt Response Log\n    Opacity ->> Eliza : Return Proof of Prompt Response Log"}),"\n",(0,r.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,r.jsx)(n.p,{children:"MIT"})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var t=i(14041);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);