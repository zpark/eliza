"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[39672],{57340:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"namespaces/v2/interfaces/ChunkRow","title":"ChunkRow","description":"@elizaos/core v1.3.0 / v2 / ChunkRow","source":"@site/api/namespaces/v2/interfaces/ChunkRow.md","sourceDirName":"namespaces/v2/interfaces","slug":"/namespaces/v2/interfaces/ChunkRow","permalink":"/api/namespaces/v2/interfaces/ChunkRow","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Character","permalink":"/api/namespaces/v2/interfaces/Character"},"next":{"title":"Content","permalink":"/api/namespaces/v2/interfaces/Content"}}');var r=s(31085),i=s(71184);const a={},c="Interface: ChunkRow",o={},d=[{value:"Properties",id:"properties",level:2},{value:"id",id:"id",level:3},{value:"Defined in",id:"defined-in",level:4}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/api/",children:"@elizaos/core v1.3.0"})," / ",(0,r.jsx)(n.a,{href:"/api/namespaces/v2/",children:"v2"})," / ChunkRow"]}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"interface-chunkrow",children:"Interface: ChunkRow"})}),"\n",(0,r.jsxs)(n.p,{children:["Represents a row structure, typically from a database query related to text chunking or processing.\nThis interface is quite minimal and seems to be a placeholder or a base for more specific chunk-related types.\nThe ",(0,r.jsx)(n.code,{children:"id"})," would be the unique identifier for the chunk.\nIt might be used when splitting large documents into smaller, manageable pieces for embedding or analysis."]}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h3,{id:"id",children:"id"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"id"}),": ",(0,r.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The unique identifier for this chunk of text."}),"\n",(0,r.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/zpark/eliza/blob/main/packages/core/src/specs/v2/types.ts#L1369",children:"packages/core/src/specs/v2/types.ts:1369"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},71184:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(14041);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);