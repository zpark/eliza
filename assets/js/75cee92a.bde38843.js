"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[60662],{71184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(14041);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},97346:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"technical/architecture/core-concepts","title":"Core Concepts","description":"This document provides an in-depth exploration of ElizaOS\'s fundamental concepts and architectural decisions.","source":"@site/docs/technical/architecture/core-concepts.md","sourceDirName":"technical/architecture","slug":"/technical/architecture/core-concepts","permalink":"/docs/technical/architecture/core-concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/technical/architecture/core-concepts.md","tags":[],"version":"current","lastUpdatedBy":"SYMBaiEX","lastUpdatedAt":1751753321000,"frontMatter":{},"sidebar":"technicalSidebar","previous":{"title":"\ud83d\udcd0 System Overview","permalink":"/docs/technical/architecture/overview"},"next":{"title":"\ud83d\udcbe State Management","permalink":"/docs/technical/architecture/state-management"}}');var i=t(31085),s=t(71184);const a={},o="Core Concepts",l={},c=[{value:"\ud83e\udde0 Agent-Centric Architecture",id:"-agent-centric-architecture",level:2},{value:"The Agent Model",id:"the-agent-model",level:3},{value:"Character Definition",id:"character-definition",level:3},{value:"\ud83d\uddfa\ufe0f Room/World Abstraction",id:"\ufe0f-roomworld-abstraction",level:2},{value:"Understanding Rooms",id:"understanding-rooms",level:3},{value:"UUID Swizzling",id:"uuid-swizzling",level:3},{value:"\ud83d\udcbe Memory Architecture",id:"-memory-architecture",level:2},{value:"Memory Types",id:"memory-types",level:3},{value:"1. Short-term Memory (Working Memory)",id:"1-short-term-memory-working-memory",level:4},{value:"2. Long-term Memory (Persistent Storage)",id:"2-long-term-memory-persistent-storage",level:4},{value:"3. Episodic Memory (Event Storage)",id:"3-episodic-memory-event-storage",level:4},{value:"Memory Formation",id:"memory-formation",level:3},{value:"Memory Retrieval",id:"memory-retrieval",level:3},{value:"\ud83d\udd04 Message Processing Pipeline",id:"-message-processing-pipeline",level:2},{value:"Pipeline Stages",id:"pipeline-stages",level:3},{value:"Context Assembly",id:"context-assembly",level:3},{value:"\ud83c\udfaf Action System",id:"-action-system",level:2},{value:"Action Lifecycle",id:"action-lifecycle",level:3},{value:"Action Examples",id:"action-examples",level:3},{value:"\ud83d\udd0c Plugin System",id:"-plugin-system",level:2},{value:"Plugin Architecture",id:"plugin-architecture",level:3},{value:"Plugin Loading Order",id:"plugin-loading-order",level:3},{value:"\ud83c\udf0a State Management",id:"-state-management",level:2},{value:"State Hierarchy",id:"state-hierarchy",level:3},{value:"State Persistence",id:"state-persistence",level:3},{value:"\ud83d\udd10 Security Model",id:"-security-model",level:2},{value:"Permission System",id:"permission-system",level:3},{value:"Sandboxing",id:"sandboxing",level:3},{value:"\ud83d\udcca Event System",id:"-event-system",level:2},{value:"Event-Driven Architecture",id:"event-driven-architecture",level:3},{value:"Event Flow",id:"event-flow",level:3},{value:"\ud83c\udf93 Learning System",id:"-learning-system",level:2},{value:"Continuous Learning",id:"continuous-learning",level:3},{value:"Pattern Recognition",id:"pattern-recognition",level:3},{value:"\ud83d\ude80 Next Steps",id:"-next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"core-concepts",children:"Core Concepts"})}),"\n",(0,i.jsx)(n.p,{children:"This document provides an in-depth exploration of ElizaOS's fundamental concepts and architectural decisions."}),"\n",(0,i.jsx)(n.h2,{id:"-agent-centric-architecture",children:"\ud83e\udde0 Agent-Centric Architecture"}),"\n",(0,i.jsx)(n.h3,{id:"the-agent-model",children:"The Agent Model"}),"\n",(0,i.jsxs)(n.p,{children:["In ElizaOS, everything revolves around the concept of an ",(0,i.jsx)(n.strong,{children:"Agent"})," - an autonomous AI entity with:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Identity"}),": Unique personality and behavioral traits"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory"}),": Persistent knowledge and conversation history"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Goals"}),": Objectives and intentions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Capabilities"}),": Actions it can perform via plugins"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Agent {\n  id: UUID;\n  character: Character;\n  runtime: AgentRuntime;\n  memory: IMemoryManager;\n  state: State;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"character-definition",children:"Character Definition"}),"\n",(0,i.jsx)(n.p,{children:"Characters define an agent's personality and behavior:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Character {\n  // Identity\n  name: string;\n  bio: string[];\n  description: string;\n\n  // Personality\n  style: {\n    all: string[];\n    chat: string[];\n    post: string[];\n  };\n\n  // Behavior\n  topics: string[];\n  adjectives: string[];\n\n  // Examples\n  messageExamples: [string, string][];\n  postExamples: string[];\n\n  // Configuration\n  settings: {\n    model: string;\n    temperature?: number;\n    maxTokens?: number;\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-roomworld-abstraction",children:"\ud83d\uddfa\ufe0f Room/World Abstraction"}),"\n",(0,i.jsx)(n.h3,{id:"understanding-rooms",children:"Understanding Rooms"}),"\n",(0,i.jsx)(n.p,{children:'ElizaOS abstracts all communication channels into "Rooms":'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Discord Channel"})," \u2192 Room"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Twitter DM Thread"})," \u2192 Room"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Telegram Chat"})," \u2192 Room"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Direct Web Chat"})," \u2192 Room"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This abstraction enables platform-agnostic agent behavior."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Room {\n  id: UUID; // Internal ElizaOS ID\n  platformId: string; // Platform-specific ID\n  type: 'discord' | 'twitter' | 'telegram' | 'direct';\n  name?: string;\n  description?: string;\n  members: UUID[]; // User IDs in this room\n  metadata: Map<string, any>; // Platform-specific data\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"uuid-swizzling",children:"UUID Swizzling"}),"\n",(0,i.jsx)(n.p,{children:"ElizaOS uses deterministic UUID generation to maintain consistency:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Each agent sees the same room with a different UUID\nconst roomUUID = generateDeterministicUUID(agentId, platformRoomId);\n\n// This ensures:\n// 1. Agent memories are isolated\n// 2. Cross-agent communication is possible\n// 3. Platform IDs remain stable\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-memory-architecture",children:"\ud83d\udcbe Memory Architecture"}),"\n",(0,i.jsx)(n.h3,{id:"memory-types",children:"Memory Types"}),"\n",(0,i.jsx)(n.p,{children:"ElizaOS implements a sophisticated memory system inspired by human cognition:"}),"\n",(0,i.jsx)(n.h4,{id:"1-short-term-memory-working-memory",children:"1. Short-term Memory (Working Memory)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Recent messages (last 10-20)"}),"\n",(0,i.jsx)(n.li,{children:"Current conversation context"}),"\n",(0,i.jsx)(n.li,{children:"Temporary facts"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface ShortTermMemory {\n  messages: Message[];\n  context: string;\n  temporaryFacts: Map<string, any>;\n  ttl: number; // Time to live\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"2-long-term-memory-persistent-storage",children:"2. Long-term Memory (Persistent Storage)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Important facts and relationships"}),"\n",(0,i.jsx)(n.li,{children:"Learned patterns"}),"\n",(0,i.jsx)(n.li,{children:"User preferences"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface LongTermMemory {\n  facts: Fact[];\n  relationships: Relationship[];\n  preferences: UserPreference[];\n  embedding?: number[]; // For similarity search\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"3-episodic-memory-event-storage",children:"3. Episodic Memory (Event Storage)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Specific conversation events"}),"\n",(0,i.jsx)(n.li,{children:"Outcomes of actions"}),"\n",(0,i.jsx)(n.li,{children:"Temporal sequences"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface EpisodicMemory {\n  event: string;\n  participants: UUID[];\n  timestamp: Date;\n  outcome?: string;\n  emotionalValence?: number;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"memory-formation",children:"Memory Formation"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph LR\n    M[Message] --\x3e STM[Short-term Memory]\n    STM --\x3e E[Evaluation]\n    E --\x3e|Important| LTM[Long-term Memory]\n    E --\x3e|Event| EM[Episodic Memory]\n    E --\x3e|Discard| X[Forgotten]"}),"\n",(0,i.jsx)(n.h3,{id:"memory-retrieval",children:"Memory Retrieval"}),"\n",(0,i.jsx)(n.p,{children:"Memory retrieval uses multiple strategies:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Recency"}),": Recent messages have higher weight"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Relevance"}),": Embedding similarity search"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Importance"}),": Manually marked important memories"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frequency"}),": Often-accessed memories"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async function retrieveMemories(query: string, count: number): Promise<Memory[]> {\n  const embedding = await createEmbedding(query);\n\n  const memories = await Promise.all([\n    getRecentMemories(count / 3),\n    searchByEmbedding(embedding, count / 3),\n    getImportantMemories(count / 3),\n  ]);\n\n  return deduplicate(memories.flat())\n    .sort((a, b) => calculateRelevance(b, query) - calculateRelevance(a, query))\n    .slice(0, count);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-message-processing-pipeline",children:"\ud83d\udd04 Message Processing Pipeline"}),"\n",(0,i.jsx)(n.h3,{id:"pipeline-stages",children:"Pipeline Stages"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    subgraph "1. Receipt"\n        R1[Platform Message]\n        R2[Normalize]\n        R3[Validate]\n    end\n\n    subgraph "2. Context"\n        C1[Retrieve Memories]\n        C2[Get Room Context]\n        C3[Load User State]\n        C4[Gather Providers]\n    end\n\n    subgraph "3. Processing"\n        P1[Check Actions]\n        P2[Generate Response]\n        P3[Apply Filters]\n    end\n\n    subgraph "4. Evaluation"\n        E1[Run Evaluators]\n        E2[Update Memories]\n        E3[Learn Patterns]\n    end\n\n    subgraph "5. Response"\n        S1[Format for Platform]\n        S2[Send Message]\n        S3[Log Interaction]\n    end\n\n    R1 --\x3e R2 --\x3e R3\n    R3 --\x3e C1 --\x3e C2 --\x3e C3 --\x3e C4\n    C4 --\x3e P1 --\x3e P2 --\x3e P3\n    P3 --\x3e E1 --\x3e E2 --\x3e E3\n    E3 --\x3e S1 --\x3e S2 --\x3e S3'}),"\n",(0,i.jsx)(n.h3,{id:"context-assembly",children:"Context Assembly"}),"\n",(0,i.jsx)(n.p,{children:"Context is assembled from multiple sources:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Context {\n  // Message context\n  messages: Message[];\n  currentMessage: Message;\n\n  // Memory context\n  shortTermMemory: Memory[];\n  relevantMemories: Memory[];\n\n  // State context\n  user: User;\n  room: Room;\n  agent: Agent;\n\n  // Provider context\n  time: string;\n  platformInfo: any;\n  customProviders: Map<string, string>;\n\n  // Execution context\n  runtime: AgentRuntime;\n  services: Map<string, IService>;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-action-system",children:"\ud83c\udfaf Action System"}),"\n",(0,i.jsx)(n.h3,{id:"action-lifecycle",children:"Action Lifecycle"}),"\n",(0,i.jsx)(n.p,{children:"Actions are discrete behaviors agents can perform:"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant U as User\n    participant R as Runtime\n    participant A as Action\n    participant S as Service\n\n    U->>R: Message\n    R->>R: Detect Action Intent\n    R->>A: validate(context)\n    A->>R: true/false\n\n    alt Action Valid\n        R->>A: execute(context)\n        A->>S: Perform Operations\n        S->>A: Results\n        A->>R: Response\n        R->>U: Action Result\n    else Action Invalid\n        R->>R: Generate Text Response\n        R->>U: Text Response\n    end"}),"\n",(0,i.jsx)(n.h3,{id:"action-examples",children:"Action Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const followAction: Action = {\n  name: 'FOLLOW_USER',\n  description: 'Follow a user on the platform',\n  examples: [\n    ['user', 'Follow @alice'],\n    ['agent', \"I'll follow @alice for you!\"],\n    ['user', 'Can you follow bob?'],\n    ['agent', 'Following bob now!'],\n  ],\n\n  validate: async (context: Context) => {\n    // Check if platform supports following\n    const transport = context.runtime.getService<ITransportService>('transport');\n    return transport.supportsFeature('follow');\n  },\n\n  execute: async (context: Context) => {\n    const username = extractUsername(context.currentMessage.content);\n    const transport = context.runtime.getService<ITransportService>('transport');\n\n    await transport.follow(username);\n\n    return {\n      content: `Successfully followed ${username}!`,\n      action: 'FOLLOW_USER',\n      data: { username },\n    };\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-plugin-system",children:"\ud83d\udd0c Plugin System"}),"\n",(0,i.jsx)(n.h3,{id:"plugin-architecture",children:"Plugin Architecture"}),"\n",(0,i.jsx)(n.p,{children:"Plugins extend agent capabilities through a standardized interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Plugin {\n  name: string;\n  description: string;\n  version: string;\n\n  // Components\n  actions?: Action[];\n  providers?: Provider[];\n  evaluators?: Evaluator[];\n  tasks?: Task[];\n  services?: IService[];\n\n  // Lifecycle\n  initialize?: (runtime: AgentRuntime) => Promise<void>;\n  shutdown?: () => Promise<void>;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"plugin-loading-order",children:"Plugin Loading Order"}),"\n",(0,i.jsx)(n.p,{children:"Plugin loading follows a deterministic order:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Core Plugins"}),": Database, essential services"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AI Providers"}),": Text generation, embeddings"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Platform Adapters"}),": Discord, Twitter, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Feature Plugins"}),": Custom capabilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bootstrap"}),": Default handlers (loaded last)"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const pluginOrder = [\n  '@elizaos/plugin-sql', // Core database\n  '@elizaos/plugin-openai', // AI provider\n  '@elizaos/plugin-discord', // Platform\n  '@elizaos/custom-plugin', // Custom features\n  '@elizaos/plugin-bootstrap', // Defaults\n];\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-state-management",children:"\ud83c\udf0a State Management"}),"\n",(0,i.jsx)(n.h3,{id:"state-hierarchy",children:"State Hierarchy"}),"\n",(0,i.jsx)(n.p,{children:"State in ElizaOS follows a hierarchical model:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Global State\n  \u2514\u2500\u2500 Agent State\n      \u2514\u2500\u2500 Room State\n          \u2514\u2500\u2500 Conversation State\n              \u2514\u2500\u2500 Message State\n"})}),"\n",(0,i.jsx)(n.h3,{id:"state-persistence",children:"State Persistence"}),"\n",(0,i.jsx)(n.p,{children:"State is persisted at different levels:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"In-Memory"}),": Current conversation state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache"}),": Recent interactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database"}),": Long-term state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Disk"}),": Configuration and characters"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class StateManager {\n  // Layered state storage\n  private memoryState: Map<string, any>;\n  private cacheState: ICacheService;\n  private dbState: IDatabaseService;\n\n  async getState(key: string): Promise<any> {\n    // Check layers in order\n    return (\n      this.memoryState.get(key) || (await this.cacheState.get(key)) || (await this.dbState.get(key))\n    );\n  }\n\n  async setState(key: string, value: any, ttl?: number): Promise<void> {\n    // Write to appropriate layer\n    this.memoryState.set(key, value);\n\n    if (ttl) {\n      await this.cacheState.set(key, value, ttl);\n    } else {\n      await this.dbState.set(key, value);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-security-model",children:"\ud83d\udd10 Security Model"}),"\n",(0,i.jsx)(n.h3,{id:"permission-system",children:"Permission System"}),"\n",(0,i.jsx)(n.p,{children:"ElizaOS implements a capability-based security model:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Permission {\n  resource: string; // What resource\n  action: string; // What action\n  constraint?: any; // Additional constraints\n}\n\n// Example permissions\nconst permissions = [\n  { resource: 'memory', action: 'read', constraint: { own: true } },\n  { resource: 'twitter', action: 'post', constraint: { rateLimit: 10 } },\n  { resource: 'admin', action: '*' },\n];\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sandboxing",children:"Sandboxing"}),"\n",(0,i.jsx)(n.p,{children:"Plugins run in sandboxed environments:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Isolation"}),": Limited access to system resources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Restrictions"}),": Only approved APIs available"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Limits"}),": Bounded memory usage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time Limits"}),": Execution timeouts"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"-event-system",children:"\ud83d\udcca Event System"}),"\n",(0,i.jsx)(n.h3,{id:"event-driven-architecture",children:"Event-Driven Architecture"}),"\n",(0,i.jsx)(n.p,{children:"ElizaOS uses events for loose coupling:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Core events\nruntime.on('message:received', handler);\nruntime.on('message:sent', handler);\nruntime.on('memory:created', handler);\nruntime.on('goal:completed', handler);\nruntime.on('error:occurred', handler);\n\n// Plugin events\nruntime.on('plugin:loaded', handler);\nruntime.on('action:executed', handler);\nruntime.on('provider:called', handler);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-flow",children:"Event Flow"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph LR\n    E[Event Emitted] --\x3e Q[Event Queue]\n    Q --\x3e H1[Handler 1]\n    Q --\x3e H2[Handler 2]\n    Q --\x3e H3[Handler 3]\n\n    H1 --\x3e R1[Result 1]\n    H2 --\x3e R2[Result 2]\n    H3 --\x3e R3[Result 3]\n\n    R1 --\x3e A[Aggregated Result]\n    R2 --\x3e A\n    R3 --\x3e A"}),"\n",(0,i.jsx)(n.h2,{id:"-learning-system",children:"\ud83c\udf93 Learning System"}),"\n",(0,i.jsx)(n.h3,{id:"continuous-learning",children:"Continuous Learning"}),"\n",(0,i.jsx)(n.p,{children:"Agents learn through evaluators:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface LearningCycle {\n  // Observe\n  observation: Message | Action;\n\n  // Evaluate\n  evaluation: {\n    success: boolean;\n    feedback: string;\n    score: number;\n  };\n\n  // Update\n  updates: {\n    memories: Memory[];\n    weights: Map<string, number>;\n    patterns: Pattern[];\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pattern-recognition",children:"Pattern Recognition"}),"\n",(0,i.jsx)(n.p,{children:"Agents recognize and learn patterns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Pattern {\n  trigger: string; // What triggers this pattern\n  response: string; // How to respond\n  confidence: number; // How confident in this pattern\n  frequency: number; // How often it occurs\n  lastSeen: Date; // When last observed\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-next-steps",children:"\ud83d\ude80 Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you understand the core concepts:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/technical/architecture/state-management",children:"Explore State Management"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/technical/development/plugin-development",children:"Learn Plugin Development"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/technical/api-reference/core-api",children:"Understand the API"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/technical/advanced/best-practices",children:"Review Best Practices"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);