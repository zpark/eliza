"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[9820],{40815:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"tutorials/devschool/index","title":"AI Agent Dev School","description":"Welcome to the AI Agent Dev School series, a comprehensive guide to building intelligent agents using the Eliza framework. Over the course of three in-depth sessions, we cover everything from the basics of TypeScript and plugins to advanced topics like providers, evaluators, and dynamic agent behaviors.","source":"@site/versioned_docs/version-0.25.9/tutorials/devschool/index.md","sourceDirName":"tutorials/devschool","slug":"/tutorials/devschool/","permalink":"/docs/0.25.9/tutorials/devschool/","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/versioned_docs/version-0.25.9/tutorials/devschool/index.md","tags":[],"version":"0.25.9","lastUpdatedBy":"madjin","lastUpdatedAt":1742171474000,"frontMatter":{"title":"AI Agent Dev School"},"sidebar":"tutorialSidebar","previous":{"title":"\u2753 FAQ","permalink":"/docs/0.25.9/faq"},"next":{"title":"Part 1","permalink":"/docs/0.25.9/tutorials/devschool/part1"}}');var o=n(31085),a=n(71184);const s={title:"AI Agent Dev School"},r="AI Agent Dev School",l={},d=[{value:"Part 1: Introduction and Foundations",id:"part-1-introduction-and-foundations",level:2},{value:"Part 2: Deep Dive into Actions, Providers, and Evaluators",id:"part-2-deep-dive-into-actions-providers-and-evaluators",level:2},{value:"Part 3: Building a User Data Extraction Agent",id:"part-3-building-a-user-data-extraction-agent",level:2}];function c(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"ai-agent-dev-school",children:"AI Agent Dev School"})}),"\n",(0,o.jsx)(t.p,{children:"Welcome to the AI Agent Dev School series, a comprehensive guide to building intelligent agents using the Eliza framework. Over the course of three in-depth sessions, we cover everything from the basics of TypeScript and plugins to advanced topics like providers, evaluators, and dynamic agent behaviors."}),"\n",(0,o.jsx)(t.h2,{id:"part-1-introduction-and-foundations",children:(0,o.jsx)(t.a,{href:"/docs/0.25.9/tutorials/devschool/part1",children:"Part 1: Introduction and Foundations"})}),"\n",(0,o.jsx)(t.p,{children:"In the first session, we start from the very beginning, assuming no prior knowledge of TypeScript, Git, or AI agent development. We cover:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Historical context and the evolution of JavaScript and TypeScript"}),"\n",(0,o.jsx)(t.li,{children:"Setting up your development environment"}),"\n",(0,o.jsx)(t.li,{children:"Key concepts in Eliza: embedding models, characters, and chat clients"}),"\n",(0,o.jsx)(t.li,{children:"Basics of working with Git and GitHub"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"By the end of part 1, you'll have a solid foundation for diving into agent development with Eliza."}),"\n",(0,o.jsx)(t.h2,{id:"part-2-deep-dive-into-actions-providers-and-evaluators",children:(0,o.jsx)(t.a,{href:"/docs/0.25.9/tutorials/devschool/part2",children:"Part 2: Deep Dive into Actions, Providers, and Evaluators"})}),"\n",(0,o.jsx)(t.p,{children:"The second session focuses on the core building blocks of agent behavior in Eliza:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Actions: The tasks and responses that agents can perform"}),"\n",(0,o.jsx)(t.li,{children:"Providers: Modules that provide information and state to the agent's context"}),"\n",(0,o.jsx)(t.li,{children:"Evaluators: Modules that analyze situations and agent actions, triggering further actions or modifications"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"We explore each of these in detail, walking through code examples and common use cases. We also cover how to package actions, providers and evaluators into reusable plugins."}),"\n",(0,o.jsx)(t.h2,{id:"part-3-building-a-user-data-extraction-agent",children:(0,o.jsx)(t.a,{href:"/docs/0.25.9/tutorials/devschool/part3",children:"Part 3: Building a User Data Extraction Agent"})}),"\n",(0,o.jsx)(t.p,{children:"In the final session, we apply the concepts from parts 1 and 2 to build a practical agentic application - a user data extraction flow. We cover:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"The provider-evaluator loop for gathering information and triggering actions"}),"\n",(0,o.jsx)(t.li,{children:"Leveraging Eliza's cache manager for efficient storage"}),"\n",(0,o.jsx)(t.li,{children:"Using AI assistants to aid in code development"}),"\n",(0,o.jsx)(t.li,{children:"Testing and debugging agent flows"}),"\n",(0,o.jsx)(t.li,{children:"Adding dynamic behaviors based on completion state"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"By the end of part 3, you'll have the skills to build sophisticated, stateful agents that can interact naturally with users to accomplish complex tasks."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},71184:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var i=n(14041);const o={},a=i.createContext(o);function s(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);