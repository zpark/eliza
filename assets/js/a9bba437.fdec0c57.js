"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[61900],{71184:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(14041);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},97126:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"core/project","title":"Project System","description":"Understanding ElizaOS projects - the organizational structure for creating and deploying AI agents.","source":"@site/docs/core/project.md","sourceDirName":"core","slug":"/core/project","permalink":"/docs/core/project","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/core/project.md","tags":[],"version":"current","lastUpdatedBy":"Sayo","lastUpdatedAt":1750405667000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Project System","description":"Understanding ElizaOS projects - the organizational structure for creating and deploying AI agents.","keywords":["projects","organization","configuration","character","agents","deployment","structure"],"image":"/img/project.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"Plugins","permalink":"/docs/core/plugins"},"next":{"title":"Providers","permalink":"/docs/core/providers"}}');var r=t(31085),o=t(71184);const s={sidebar_position:2,title:"Project System",description:"Understanding ElizaOS projects - the organizational structure for creating and deploying AI agents.",keywords:["projects","organization","configuration","character","agents","deployment","structure"],image:"/img/project.jpg"},c="\ufffd\ufffd ElizaOS Projects",d={},l=[{value:"Full Project Layout",id:"full-project-layout",level:2},{value:"Key Directories and Files Explained",id:"key-directories-and-files-explained",level:2},{value:"Source Code (<code>src/</code>)",id:"source-code-src",level:3},{value:"Testing (<code>__tests__/</code>, <code>cypress/</code>)",id:"testing-__tests__-cypress",level:3},{value:"Knowledge (<code>knowledge/</code>)",id:"knowledge-knowledge",level:3},{value:"Build &amp; Dev Tools",id:"build--dev-tools",level:3},{value:"Project Configuration",id:"project-configuration",level:3},{value:"Configuring Your Project",id:"configuring-your-project",level:2},{value:"Running Your Project",id:"running-your-project",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-elizaos-projects",children:"\ufffd\ufffd ElizaOS Projects"})}),"\n",(0,r.jsxs)(n.p,{children:["When you create a new project using ",(0,r.jsx)(n.code,{children:"elizaos create"}),", it comes with a comprehensive structure designed for modern development, testing, and deployment. This guide provides a detailed breakdown of each part of the project."]}),"\n",(0,r.jsx)(n.h2,{id:"full-project-layout",children:"Full Project Layout"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"my-project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts          # Main entry point with character definitions\n\u2502   \u2514\u2500\u2500 plugin.ts         # Custom plugin implementation\n\u251c\u2500\u2500 __tests__/            # Comprehensive test suite\n\u2502   \u251c\u2500\u2500 actions.test.ts   # Action testing\n\u2502   \u251c\u2500\u2500 character.test.ts # Character validation\n\u2502   \u251c\u2500\u2500 integration.test.ts # Integration tests\n\u2502   \u2514\u2500\u2500 [additional test files]\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 test-all.sh       # Testing automation scripts\n\u251c\u2500\u2500 cypress/              # End-to-end testing configuration\n\u251c\u2500\u2500 knowledge/            # (Optional) Knowledge files for RAG (create manually)\n\u251c\u2500\u2500 .env.example          # Environment variable template\n\u251c\u2500\u2500 package.json          # Project configuration and dependencies\n\u251c\u2500\u2500 tsconfig.json         # TypeScript configuration\n\u251c\u2500\u2500 tsconfig.build.json   # Build-specific TypeScript config\n\u251c\u2500\u2500 README.md             # Project documentation\n\u251c\u2500\u2500 cypress.config.ts     # E2E testing configuration\n\u251c\u2500\u2500 index.html            # Web interface entry point\n\u251c\u2500\u2500 postcss.config.js     # CSS processing configuration\n\u251c\u2500\u2500 tailwind.config.js    # Tailwind CSS configuration\n\u251c\u2500\u2500 tsup.config.ts        # Build tool configuration\n\u251c\u2500\u2500 vite.config.ts        # Development server configuration\n\u2514\u2500\u2500 vitest.config.ts      # Unit testing configuration\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-directories-and-files-explained",children:"Key Directories and Files Explained"}),"\n",(0,r.jsxs)(n.h3,{id:"source-code-src",children:["Source Code (",(0,r.jsx)(n.code,{children:"src/"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/index.ts"})}),": This is the most important file for defining your agent. It's where you configure the agent's character, personality, default model, and the plugins it should use."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/plugin.ts"})}),": A starter file for creating your own custom plugin. This is where you can define new actions, providers, or services to extend your agent's capabilities."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"testing-__tests__-cypress",children:["Testing (",(0,r.jsx)(n.code,{children:"__tests__/"}),", ",(0,r.jsx)(n.code,{children:"cypress/"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"ElizaOS projects come with a robust, multi-layered testing setup."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"__tests__/"})}),": This directory contains unit and integration tests for your agent. It uses ",(0,r.jsx)(n.code,{children:"vitest"}),". You can test individual actions, character configurations, and more in isolation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"cypress/"})}),": For end-to-end (E2E) testing. Cypress tests interact with the running application's UI to simulate real user scenarios."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"cypress.config.ts"})}),", ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"vitest.config.ts"})}),": Configuration files for the respective test frameworks."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"knowledge-knowledge",children:["Knowledge (",(0,r.jsx)(n.code,{children:"knowledge/"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This directory is ",(0,r.jsx)(n.strong,{children:"not created by default"}),". You should create it manually if you want to use Retrieval Augmented Generation (RAG)."]}),"\n",(0,r.jsxs)(n.li,{children:["Place your documents (",(0,r.jsx)(n.code,{children:".pdf"}),", ",(0,r.jsx)(n.code,{children:".txt"}),", etc.) in this directory. The agent will automatically ingest them on startup to build its knowledge base, allowing it to answer questions based on their content."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For a complete guide on how to configure and use the knowledge system, see the ",(0,r.jsx)(n.a,{href:"/docs/core/knowledge",children:"Knowledge Management"})," documentation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# To use RAG, first create the directory\nmkdir knowledge\n\n# Add your documents\ncp ~/my-document.pdf knowledge/\n"})}),"\n",(0,r.jsx)(n.h3,{id:"build--dev-tools",children:"Build & Dev Tools"}),"\n",(0,r.jsx)(n.p,{children:"The project template uses a modern toolchain for a great developer experience."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"vite.config.ts"})}),": Configuration for Vite, the high-performance development server that provides features like Hot-Module-Replacement (HMR)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"tsup.config.ts"})}),": Configuration for ",(0,r.jsx)(n.code,{children:"tsup"}),", a fast and simple bundler for TypeScript libraries. Used to build your project for production."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"tailwind.config.js"})}),", ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"postcss.config.js"})}),": Configuration for Tailwind CSS, allowing you to build modern UIs quickly."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"tsconfig.json"})}),", ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"tsconfig.build.json"})}),": TypeScript configuration for development and for production builds."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"project-configuration",children:"Project Configuration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"package.json"})}),": Defines project metadata, dependencies, and scripts (like ",(0,r.jsx)(n.code,{children:"dev"}),", ",(0,r.jsx)(n.code,{children:"build"}),", ",(0,r.jsx)(n.code,{children:"test"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:".env.example"})}),": A template for your environment variables. Copy this to a ",(0,r.jsx)(n.code,{children:".env"})," file (",(0,r.jsx)(n.code,{children:"cp .env.example .env"}),") and add your secrets, like API keys. ",(0,r.jsxs)(n.strong,{children:["Never commit your ",(0,r.jsx)(n.code,{children:".env"})," file to git."]})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"README.md"})}),": A pre-populated README for your specific project."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:".gitignore"})}),": A standard list of files and directories to be ignored by git."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuring-your-project",children:"Configuring Your Project"}),"\n",(0,r.jsxs)(n.p,{children:["The main project file (",(0,r.jsx)(n.code,{children:"src/index.ts"}),") exports a default project object that brings together your agents and their characters."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import type { Character, IAgentRuntime, Project, ProjectAgent } from '@elizaos/core';\nimport customPlugin from './plugin';\n\n// Define the character\nexport const character: Character = {\n  name: 'Agent Name',\n  plugins: ['@elizaos/plugin-discord', '@elizaos/plugin-direct'],\n  // Other character properties...\n};\n\n// Create a ProjectAgent that includes the character and any project-specific plugins\nexport const projectAgent: ProjectAgent = {\n  character,\n  init: async (runtime: IAgentRuntime) => {\n    // Initialize agent-specific functionality\n    console.log('Initializing agent:', character.name);\n  },\n  plugins: [customPlugin],\n  tests: [], // Optional tests for your agent\n};\n\n// Export the full project containing all agents\nconst project: Project = {\n  agents: [projectAgent],\n};\n\nexport default project;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For a full breakdown of all the properties available in a Character, see the ",(0,r.jsx)(n.a,{href:"/docs/core/characters",children:"Character Files"})," documentation."]}),"\n",(0,r.jsx)(n.h2,{id:"running-your-project",children:"Running Your Project"}),"\n",(0,r.jsxs)(n.p,{children:["After configuring your project, you can run it using the ",(0,r.jsx)(n.code,{children:"start"})," command from your project's root directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"elizaos start\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will start your agents according to your project configuration."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);