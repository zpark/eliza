"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[81598],{45586:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"core/fact-evaluator","title":"Fact Evaluator: Memory Formation System","description":"The Fact Evaluator serves as the agent\'s \\"episodic memory formation\\" system - similar to how humans process conversations and form memories. Just as you might reflect after a conversation \\"Oh, I learned something new about Sarah today\\", the Fact Evaluator systematically processes conversations to build up the agent\'s understanding of the world and the people in it.","source":"@site/versioned_docs/version-0.25.9/core/fact-evaluator.md","sourceDirName":"core","slug":"/core/fact-evaluator","permalink":"/docs/0.25.9/core/fact-evaluator","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/versioned_docs/version-0.25.9/core/fact-evaluator.md","tags":[],"version":"0.25.9","lastUpdatedBy":"madjin","lastUpdatedAt":1742171474000,"frontMatter":{}}');var i=s(31085),r=s(71184);const a={},o="Fact Evaluator: Memory Formation System",l={},c=[{value:"How It Works",id:"how-it-works",level:2},{value:"1. Triggering (The &quot;When to Reflect&quot; System)",id:"1-triggering-the-when-to-reflect-system",level:3},{value:"2. Fact Extraction (The &quot;What Did I Learn?&quot; System)",id:"2-fact-extraction-the-what-did-i-learn-system",level:3},{value:"3. Memory Deduplication (The &quot;Is This New?&quot; System)",id:"3-memory-deduplication-the-is-this-new-system",level:3},{value:"4. Memory Storage (The &quot;Remember This&quot; System)",id:"4-memory-storage-the-remember-this-system",level:3},{value:"Example Processing",id:"example-processing",level:2},{value:"Key Design Considerations",id:"key-design-considerations",level:2},{value:"Integration with Other Systems",id:"integration-with-other-systems",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"fact-evaluator-memory-formation-system",children:"Fact Evaluator: Memory Formation System"})}),"\n",(0,i.jsx)(n.p,{children:'The Fact Evaluator serves as the agent\'s "episodic memory formation" system - similar to how humans process conversations and form memories. Just as you might reflect after a conversation "Oh, I learned something new about Sarah today", the Fact Evaluator systematically processes conversations to build up the agent\'s understanding of the world and the people in it.'}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsx)(n.h3,{id:"1-triggering-the-when-to-reflect-system",children:'1. Triggering (The "When to Reflect" System)'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n  const messageCount = await runtime.messageManager.countMemories(message.roomId);\n  const reflectionCount = Math.ceil(runtime.getConversationLength() / 2);\n  return messageCount % reflectionCount === 0;\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"Just like humans don't consciously analyze every single word in real-time, the Fact Evaluator runs periodically rather than after every message. It triggers a \"reflection\" phase every few messages to process what's been learned."}),"\n",(0,i.jsx)(n.h3,{id:"2-fact-extraction-the-what-did-i-learn-system",children:'2. Fact Extraction (The "What Did I Learn?" System)'}),"\n",(0,i.jsx)(n.p,{children:"The evaluator uses a template-based approach to extract three types of information:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Facts"}),": Unchanging truths about the world or people","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"Bob lives in New York"'}),"\n",(0,i.jsx)(n.li,{children:'"Sarah has a degree in Computer Science"'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Status"}),": Temporary or changeable states","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"Bob is currently working on a new project"'}),"\n",(0,i.jsx)(n.li,{children:'"Sarah is visiting Paris this week"'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Opinions"}),": Subjective views, feelings, or non-factual statements","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"Bob thinks the project will be successful"'}),"\n",(0,i.jsx)(n.li,{children:'"Sarah loves French cuisine"'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-memory-deduplication-the-is-this-new-system",children:'3. Memory Deduplication (The "Is This New?" System)'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const filteredFacts = facts.filter((fact) => {\n  return (\n    !fact.already_known &&\n    fact.type === 'fact' &&\n    !fact.in_bio &&\n    fact.claim &&\n    fact.claim.trim() !== ''\n  );\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Just as humans don't need to consciously re-learn things they already know, the Fact Evaluator:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Checks if information is already known"}),"\n",(0,i.jsx)(n.li,{children:"Verifies if it's in the agent's existing knowledge (bio)"}),"\n",(0,i.jsx)(n.li,{children:"Filters out duplicate or corrupted facts"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-memory-storage-the-remember-this-system",children:'4. Memory Storage (The "Remember This" System)'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const factMemory = await factsManager.addEmbeddingToMemory({\n  userId: agentId!,\n  agentId,\n  content: { text: fact },\n  roomId,\n  createdAt: Date.now(),\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Facts are stored with embeddings to enable:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Semantic search of related facts"}),"\n",(0,i.jsx)(n.li,{children:"Context-aware recall"}),"\n",(0,i.jsx)(n.li,{children:"Temporal tracking (when the fact was learned)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-processing",children:"Example Processing"}),"\n",(0,i.jsx)(n.p,{children:"Given this conversation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'User: "I just moved to Seattle last month!"\nAgent: "How are you finding the weather there?"\nUser: "It\'s rainy, but I love my new job at the tech startup"\n'})}),"\n",(0,i.jsx)(n.p,{children:"The Fact Evaluator might extract:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "claim": "User moved to Seattle last month",\n    "type": "fact",\n    "in_bio": false,\n    "already_known": false\n  },\n  {\n    "claim": "User works at a tech startup",\n    "type": "fact",\n    "in_bio": false,\n    "already_known": false\n  },\n  {\n    "claim": "User enjoys their new job",\n    "type": "opinion",\n    "in_bio": false,\n    "already_known": false\n  }\n]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"key-design-considerations",children:"Key Design Considerations"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Episodic vs Semantic Memory"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Facts build up the agent's semantic memory (general knowledge)"}),"\n",(0,i.jsx)(n.li,{children:"The raw conversation remains in episodic memory (specific experiences)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Temporal Awareness"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Facts are timestamped to track when they were learned"}),"\n",(0,i.jsx)(n.li,{children:"Status facts can be updated as they change"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Confidence and Verification"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Multiple mentions of a fact increase confidence"}),"\n",(0,i.jsx)(n.li,{children:"Contradictory facts can be flagged for verification"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Privacy and Relevance"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Only stores relevant, conversation-appropriate facts"}),"\n",(0,i.jsx)(n.li,{children:"Respects explicit and implicit privacy boundaries"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-other-systems",children:"Integration with Other Systems"}),"\n",(0,i.jsx)(n.p,{children:"The Fact Evaluator works alongside other evaluators and systems:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Goal Evaluator"}),": Facts may influence goal progress"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trust Evaluator"}),": Fact consistency affects trust scoring"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Manager"}),": Facts enhance context for future conversations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Providers"}),": Facts inform response generation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Progressive Learning"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// First conversation\n"I live in Seattle" -> Stores as fact\n\n// Later conversation\n"I live in the Ballard neighborhood" -> Updates/enhances existing fact\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Fact Chaining"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Original facts\n'Works at tech startup';\n'Startup is in Seattle';\n\n// Inference potential\n'Works in Seattle tech industry';\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Temporal Tracking"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Status tracking\nt0: 'Looking for a job'(status);\nt1: 'Got a new job'(fact);\nt2: 'Been at job for 3 months'(status);\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Validate Facts"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cross-reference with existing knowledge"}),"\n",(0,i.jsx)(n.li,{children:"Consider source reliability"}),"\n",(0,i.jsx)(n.li,{children:"Track fact confidence levels"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Manage Memory Growth"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Prioritize important facts"}),"\n",(0,i.jsx)(n.li,{children:"Consolidate related facts"}),"\n",(0,i.jsx)(n.li,{children:"Archive outdated status facts"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Handle Contradictions"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Flag conflicting facts"}),"\n",(0,i.jsx)(n.li,{children:"Maintain fact history"}),"\n",(0,i.jsx)(n.li,{children:"Update based on newest information"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Respect Privacy"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Filter sensitive information"}),"\n",(0,i.jsx)(n.li,{children:"Consider contextual appropriateness"}),"\n",(0,i.jsx)(n.li,{children:"Follow data retention policies"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},71184:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(14041);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);