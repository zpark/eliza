"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[38995],{42526:(n,e,i)=>{i.d(e,{A:()=>s});const s=i.p+"assets/images/plugins-49c22fcfc4cb4c32bc2e563db2bd18e7.png"},71184:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>a});var s=i(14041);const l={},t=s.createContext(l);function r(n){const e=s.useContext(t);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:r(n.components),s.createElement(t.Provider,{value:e},n.children)}},75562:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core/plugins","title":"Plugins","description":"Plugins (or packages) are modular extensions that enhance the capabilities of ElizaOS agents. They provide a flexible way to add new functionality, integrate external services, and customize agent behavior across different platforms.","source":"@site/versioned_docs/version-0.25.9/core/plugins.md","sourceDirName":"core","slug":"/core/plugins","permalink":"/docs/0.25.9/core/plugins","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/versioned_docs/version-0.25.9/core/plugins.md","tags":[],"version":"0.25.9","lastUpdatedBy":"madjin","lastUpdatedAt":1742171474000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Agent Runtime","permalink":"/docs/0.25.9/core/agents"},"next":{"title":"Providers","permalink":"/docs/0.25.9/core/providers"}}');var l=i(31085),t=i(71184);const r={},a="Plugins",o={},c=[{value:"Installation",id:"installation",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Environment Variables and Secrets",id:"environment-variables-and-secrets",level:3},{value:"Pull Request Requirements",id:"pull-request-requirements",level:3},{value:"Plugin Branding and Images",id:"plugin-branding-and-images",level:3},{value:"Using Your Custom Plugins",id:"using-your-custom-plugins",level:2},{value:"Installation",id:"installation-1",level:3},{value:"FAQ",id:"faq",level:2},{value:"What exactly is a plugin in ElizaOS?",id:"what-exactly-is-a-plugin-in-elizaos",level:3},{value:"When should I create a plugin versus using existing ones?",id:"when-should-i-create-a-plugin-versus-using-existing-ones",level:3},{value:"What are the main types of plugin components?",id:"what-are-the-main-types-of-plugin-components",level:3},{value:"How do I test a plugin during development?",id:"how-do-i-test-a-plugin-during-development",level:3},{value:"Why isn&#39;t my plugin being recognized?",id:"why-isnt-my-plugin-being-recognized",level:3},{value:"Can I monetize my plugin?",id:"can-i-monetize-my-plugin",level:3},{value:"How do I debug plugin issues?",id:"how-do-i-debug-plugin-issues",level:3},{value:"What&#39;s the difference between Actions and Services?",id:"whats-the-difference-between-actions-and-services",level:3},{value:"Additional Resources",id:"additional-resources",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"plugins",children:"Plugins"})}),"\n",(0,l.jsx)(e.p,{children:"Plugins (or packages) are modular extensions that enhance the capabilities of ElizaOS agents. They provide a flexible way to add new functionality, integrate external services, and customize agent behavior across different platforms."}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsxs)(e.strong,{children:["Browse the various plugins the eliza dev community made here: ",(0,l.jsx)(e.a,{href:"/showcase",children:"Package Showcase"})]})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.a,{href:"/showcase",children:(0,l.jsx)(e.img,{src:i(42526).A+"",width:"1662",height:"1205"})})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["elizaOS maintains an official package registry at ",(0,l.jsx)(e.a,{href:"https://github.com/elizaos-plugins/registry",children:"github.com/elizaos-plugins/registry"}),"."]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h3,{id:"installation",children:"Installation"}),"\n",(0,l.jsx)(e.p,{children:"Eliza now supports dynamic plugin loading directly from the package registry. Here's a couple ways you can add plugins on eliza:"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["Add the plugin to your project's dependencies (",(0,l.jsx)(e.code,{children:"package.json"}),"):"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-json",children:'{\n  "dependencies": {\n    "@elizaos/plugin-solana": "github:elizaos-plugins/plugin-solana",\n    "@elizaos/plugin-twitter": "github:elizaos-plugins/plugin-twitter"\n  }\n}\n'})}),"\n",(0,l.jsxs)(e.ol,{start:"2",children:["\n",(0,l.jsx)(e.li,{children:"Configure the plugin in your character file:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-typescript",children:'{\n  "name": "MyAgent",\n  "plugins": [\n    "@elizaos/plugin-twitter",\n    "@elizaos/plugin-example"\n  ],\n  "settings": {\n    "example-plugin": {\n      // Plugin-specific configuration\n    }\n  }\n}\n'})}),"\n",(0,l.jsxs)(e.ol,{start:"3",children:["\n",(0,l.jsx)(e.li,{children:"Use the new CLI tool:"}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:"You can list available plugins, install new ones, and remove them when needed."}),"\n",(0,l.jsxs)(e.p,{children:["Go into the eliza directory you cloned and type ",(0,l.jsx)(e.code,{children:"npx elizaos plugins"})," to use it."]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-bash",children:"Usage: elizaos plugins [options] [command]\n\nmanage elizaOS plugins\n\nOptions:\n  -h, --help              display help for command\n\nCommands:\n  list|l [options]        list available plugins\n  add|install <plugin>    add a plugin\n  remove|delete <plugin>  remove a plugin\n  help [command]          display help for command\n"})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"architecture",children:"Architecture"}),"\n",(0,l.jsx)(e.p,{children:"Eliza uses a unified plugin architecture where everything is a plugin - including clients, adapters, actions, evaluators, and services. This approach ensures consistent behavior and better extensibility. Here's how the architecture works:"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Plugin Types"}),": Each plugin can provide one or more of the following:"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Clients (e.g., Discord, Twitter, WhatsApp integrations)"}),"\n",(0,l.jsx)(e.li,{children:"Adapters (e.g., database adapters, caching systems)"}),"\n",(0,l.jsx)(e.li,{children:"Actions (custom behavior and responses functionality)"}),"\n",(0,l.jsx)(e.li,{children:"Evaluators (analysis, learning, decision-making components)"}),"\n",(0,l.jsx)(e.li,{children:"Services (background processes and integrations)"}),"\n",(0,l.jsx)(e.li,{children:"Providers (data or functionality providers)"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Plugin Interface"}),": All plugins implement the core Plugin interface:"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-typescript",children:"type Plugin = {\n  name: string;\n  description: string;\n  config?: { [key: string]: any };\n  actions?: Action[];\n  providers?: Provider[];\n  evaluators?: Evaluator[];\n  services?: Service[];\n  clients?: Client[];\n  adapters?: Adapter[];\n};\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Independent Repositories"}),": Each plugin lives in its own repository under the ",(0,l.jsx)(e.a,{href:"https://github.com/elizaos-plugins/",children:"elizaos-plugins"})," organization, allowing:"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Independent versioning and releases"}),"\n",(0,l.jsx)(e.li,{children:"Focused issue tracking and documentation"}),"\n",(0,l.jsx)(e.li,{children:"Easier maintenance and contribution"}),"\n",(0,l.jsx)(e.li,{children:"Separate CI/CD pipelines"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Plugin Structure"}),": Each plugin repository should follow this structure:"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"plugin-name/\n\u251c\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 logo.jpg        # Plugin branding logo\n\u2502   \u251c\u2500\u2500 banner.jpg      # Plugin banner image\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts        # Main plugin entry point\n\u2502   \u251c\u2500\u2500 actions/        # Plugin-specific actions\n\u2502   \u251c\u2500\u2500 clients/        # Client implementations\n\u2502   \u251c\u2500\u2500 adapters/       # Adapter implementations\n\u2502   \u2514\u2500\u2500 types.ts        # Type definitions\n\u2502   \u2514\u2500\u2500 environment.ts  # runtime.getSetting, zod validation\n\u251c\u2500\u2500 package.json        # Plugin dependencies\n\u2514\u2500\u2500 README.md          # Plugin documentation\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Package Configuration"}),": Your plugin's ",(0,l.jsx)(e.code,{children:"package.json"})," must include an ",(0,l.jsx)(e.code,{children:"agentConfig"})," section:"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-json",children:'{\n  "name": "@elizaos/plugin-example",\n  "version": "1.0.0",\n  "agentConfig": {\n    "pluginType": "elizaos:plugin:1.0.0",\n    "pluginParameters": {\n      "API_KEY": {\n        "type": "string",\n        "description": "API key for the service"\n      }\n    }\n  }\n}\n'})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Plugin Loading"}),": Plugins are dynamically loaded at runtime through the ",(0,l.jsx)(e.code,{children:"handlePluginImporting"})," function, which:"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Imports the plugin module"}),"\n",(0,l.jsx)(e.li,{children:"Reads the plugin configuration"}),"\n",(0,l.jsx)(e.li,{children:"Validates plugin parameters"}),"\n",(0,l.jsx)(e.li,{children:"Registers the plugin's components (clients, adapters, actions, etc.)"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Client and Adapter Implementation"}),": When implementing clients or adapters:"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-typescript",children:"// Client example\nconst discordPlugin: Plugin = {\n  name: 'discord',\n  description: 'Discord client plugin',\n  clients: [DiscordClientInterface],\n};\n\n// Adapter example\nconst postgresPlugin: Plugin = {\n  name: 'postgres',\n  description: 'PostgreSQL database adapter',\n  adapters: [PostgresDatabaseAdapter],\n};\n\n// Adapter example\nexport const browserPlugin = {\n  name: 'default',\n  description: 'Pdf',\n  services: [PdfService],\n  actions: [],\n};\n"})}),"\n",(0,l.jsx)(e.h3,{id:"environment-variables-and-secrets",children:"Environment Variables and Secrets"}),"\n",(0,l.jsx)(e.p,{children:"Plugins can access environment variables and secrets in two ways:"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Character Configuration"}),": Through ",(0,l.jsx)(e.code,{children:"agent.json.secret"})," or character settings:"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-json",children:'{\n  "name": "MyAgent",\n  "settings": {\n    "secrets": {\n      "PLUGIN_API_KEY": "your-api-key",\n      "PLUGIN_SECRET": "your-secret"\n    }\n  }\n}\n'})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Runtime Access"}),": Plugins can access their configuration through the runtime:"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-typescript",children:"class MyPlugin implements Plugin {\n  async initialize(runtime: AgentRuntime) {\n    const apiKey = runtime.getSetting('PLUGIN_API_KEY');\n    const secret = runtime.getSetting('PLUGIN_SECRET');\n  }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["The ",(0,l.jsx)(e.code,{children:"getSetting"})," method follows this precedence:"]}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"Character settings secrets"}),"\n",(0,l.jsx)(e.li,{children:"Character settings"}),"\n",(0,l.jsx)(e.li,{children:"Global settings"}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h3,{id:"pull-request-requirements",children:"Pull Request Requirements"}),"\n",(0,l.jsxs)(e.p,{children:["When submitting a plugin to the ",(0,l.jsx)(e.a,{href:"https://github.com/elizaos-plugins/registry",children:"elizaOS Registry"}),", your PR must include:"]}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Working Demo Evidence:"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Screenshots or video demonstrations of the plugin working with ElizaOS"}),"\n",(0,l.jsx)(e.li,{children:"Test results showing successful integration"}),"\n",(0,l.jsx)(e.li,{children:"Example agent configuration using your plugin"}),"\n",(0,l.jsx)(e.li,{children:"Documentation of any specific setup requirements"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Integration Testing:"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Proof of successful dynamic loading with ElizaOS"}),"\n",(0,l.jsx)(e.li,{children:"Test cases covering main functionality"}),"\n",(0,l.jsx)(e.li,{children:"Error handling demonstrations"}),"\n",(0,l.jsx)(e.li,{children:"Performance metrics (if applicable)"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Configuration Examples:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-json",children:'{\n  "name": "MyAgent",\n  "plugins": ["@elizaos/your-plugin"],\n  "settings": {\n    "your-plugin": {\n      // Your plugin\'s configuration\n    }\n  }\n}\n'})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Quality Checklist:"})}),"\n",(0,l.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,l.jsxs)(e.li,{className:"task-list-item",children:[(0,l.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Plugin follows the standard structure"]}),"\n",(0,l.jsxs)(e.li,{className:"task-list-item",children:[(0,l.jsx)(e.input,{type:"checkbox",disabled:!0})," ","All required branding assets are included"]}),"\n",(0,l.jsxs)(e.li,{className:"task-list-item",children:[(0,l.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Documentation is complete and clear"]}),"\n",(0,l.jsxs)(e.li,{className:"task-list-item",children:[(0,l.jsx)(e.input,{type:"checkbox",disabled:!0})," ","GitHub topics are properly set"]}),"\n",(0,l.jsxs)(e.li,{className:"task-list-item",children:[(0,l.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Tests are passing"]}),"\n",(0,l.jsxs)(e.li,{className:"task-list-item",children:[(0,l.jsx)(e.input,{type:"checkbox",disabled:!0})," ","Demo evidence is provided"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.p,{children:["Visit the [Elizaos Plugin Development Guide](",(0,l.jsx)(e.a,{href:"https://github.com/elizaOS/eliza/blob/main/docs/docs/packages/plugins.md",children:"https://github.com/elizaos-plugins/plugin-image"})," for detailed information on creating new plugins."]}),"\n",(0,l.jsx)(e.h3,{id:"plugin-branding-and-images",children:"Plugin Branding and Images"}),"\n",(0,l.jsx)(e.p,{children:"To maintain a consistent and professional appearance across the ElizaOS ecosystem, we recommend including the following assets in your plugin repository:"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Required Images:"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"logo.png"})," (400x400px) - Your plugin's square logo"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"banner.png"})," (1280x640px) - A banner image for your plugin"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"screenshot.png"})," - At least one screenshot demonstrating your plugin's functionality"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Image Location:"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"plugin-name/\n\u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 logo.png\n\u2502   \u251c\u2500\u2500 banner.png\n\u2502   \u2514\u2500\u2500 screenshots/\n\u2502       \u251c\u2500\u2500 screenshot1.png\n\u2502       \u2514\u2500\u2500 screenshot2.png\n"})}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Image Guidelines:"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Use clear, high-resolution images"}),"\n",(0,l.jsx)(e.li,{children:"Keep file sizes optimized (< 500KB for logos, < 1MB for banners)"}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"https://github.com/elizaos-plugins/client-twitter/blob/main/images/banner.jpg",children:"Image example"})}),"\n",(0,l.jsx)(e.li,{children:"Include alt text for accessibility"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"using-your-custom-plugins",children:"Using Your Custom Plugins"}),"\n",(0,l.jsx)(e.p,{children:"Plugins that are not in the official registry for ElizaOS can be used as well. Here's how:"}),"\n",(0,l.jsx)(e.h3,{id:"installation-1",children:"Installation"}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsx)(e.li,{children:"Upload the custom plugin to the packages folder:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{children:"packages/\n\u251c\u2500plugin-example/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts        # Main plugin entry\n\u2502   \u251c\u2500\u2500 actions/        # Custom actions\n\u2502   \u251c\u2500\u2500 providers/      # Data providers\n\u2502   \u251c\u2500\u2500 types.ts        # Type definitions\n\u2502   \u2514\u2500\u2500 environment.ts  # Configuration\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 LICENSE\n"})}),"\n",(0,l.jsxs)(e.ol,{start:"2",children:["\n",(0,l.jsx)(e.li,{children:"Add the custom plugin to your project's dependencies in the agent's package.json:"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-json",children:'{\n  "dependencies": {\n    "@elizaos/plugin-example": "workspace:*"\n  }\n}\n'})}),"\n",(0,l.jsxs)(e.ol,{start:"3",children:["\n",(0,l.jsx)(e.li,{children:"Import the custom plugin to your agent's character.json"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-json",children:'  "plugins": [\n    "@elizaos/plugin-example",\n  ],\n'})}),"\n",(0,l.jsx)(e.h2,{id:"faq",children:"FAQ"}),"\n",(0,l.jsx)(e.h3,{id:"what-exactly-is-a-plugin-in-elizaos",children:"What exactly is a plugin in ElizaOS?"}),"\n",(0,l.jsx)(e.p,{children:"A plugin is a modular extension that adds new capabilities to ElizaOS agents, such as API integrations, custom actions, or platform connections. Plugins allow you to expand agent functionality and share reusable components with other developers."}),"\n",(0,l.jsx)(e.h3,{id:"when-should-i-create-a-plugin-versus-using-existing-ones",children:"When should I create a plugin versus using existing ones?"}),"\n",(0,l.jsx)(e.p,{children:"Create a plugin when you need custom functionality not available in existing plugins, want to integrate with external services, or plan to share reusable agent capabilities with the community."}),"\n",(0,l.jsx)(e.h3,{id:"what-are-the-main-types-of-plugin-components",children:"What are the main types of plugin components?"}),"\n",(0,l.jsx)(e.p,{children:"Actions handle specific tasks, Providers supply data, Evaluators analyze responses, Services run background processes, Clients manage platform connections, and Adapters handle storage solutions."}),"\n",(0,l.jsx)(e.h3,{id:"how-do-i-test-a-plugin-during-development",children:"How do I test a plugin during development?"}),"\n",(0,l.jsxs)(e.p,{children:["Use the mock client with ",(0,l.jsx)(e.code,{children:"pnpm mock-eliza --characters=./characters/test.character.json"})," for rapid testing, then progress to platform-specific testing like web interface or Twitter integration."]}),"\n",(0,l.jsx)(e.h3,{id:"why-isnt-my-plugin-being-recognized",children:"Why isn't my plugin being recognized?"}),"\n",(0,l.jsxs)(e.p,{children:["Most commonly this occurs due to missing dependencies, incorrect registration in your character file, or build configuration issues. Ensure you've run ",(0,l.jsx)(e.code,{children:"pnpm build"})," and properly imported the plugin."]}),"\n",(0,l.jsx)(e.h3,{id:"can-i-monetize-my-plugin",children:"Can I monetize my plugin?"}),"\n",(0,l.jsx)(e.p,{children:"Yes, plugins can be monetized through the ElizaOS marketplace or by offering premium features/API access, making them an effective distribution mechanism for software products."}),"\n",(0,l.jsx)(e.h3,{id:"how-do-i-debug-plugin-issues",children:"How do I debug plugin issues?"}),"\n",(0,l.jsx)(e.p,{children:"Enable debug logging, use the mock client for isolated testing, and check the runtime logs for detailed error messages about plugin initialization and execution."}),"\n",(0,l.jsx)(e.h3,{id:"whats-the-difference-between-actions-and-services",children:"What's the difference between Actions and Services?"}),"\n",(0,l.jsx)(e.p,{children:"Actions handle specific agent responses or behaviors, while Services provide ongoing background functionality or external API integrations that multiple actions might use."}),"\n",(0,l.jsx)(e.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"https://github.com/elizaos-plugins/registry",children:"ElizaOS Registry"})}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:"https://github.com/elizaos-plugins",children:"Example Plugins"})}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(d,{...n})}):d(n)}}}]);