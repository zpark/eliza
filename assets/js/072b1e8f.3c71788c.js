"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[87620],{10235:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/actions-331ef9d1c4fae1bed25f4cdd3a877206.jpg"},12826:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/evaluators-6b4c04e037b56eb989f4f6ea9e9182a6.jpg"},14124:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/providers-c214141d82cd0d5042d2bb55ca899683.jpg"},25623:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/database-6b9bfa71c010044505f926afcaef41c6.jpg"},30138:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/plugins-0b2bb80121f35a9fb229f898d6472266.jpg"},37652:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/services-7ab0e7368b7d293661b104079ab90cf6.jpg"},38880:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"core/overview","title":"ElizaOS Documentation","description":"Comprehensive framework for building AI agents with persistent personalities across multiple platforms","source":"@site/docs/core/overview.md","sourceDirName":"core","slug":"/","permalink":"/docs/","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/core/overview.md","tags":[],"version":"current","lastUpdatedBy":"madjin","lastUpdatedAt":1743786825000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"ElizaOS Documentation","slug":"/","description":"Comprehensive framework for building AI agents with persistent personalities across multiple platforms","keywords":["architecture","components","system design","agents","services","database","actions","providers","evaluators","plugins"],"image":"/img/eliza_banner.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udc65 Contributing","permalink":"/docs/contributing"},"next":{"title":"Actions","permalink":"/docs/core/actions"}}');var r=n(31085),i=n(71184);const o={sidebar_position:1,title:"ElizaOS Documentation",slug:"/",description:"Comprehensive framework for building AI agents with persistent personalities across multiple platforms",keywords:["architecture","components","system design","agents","services","database","actions","providers","evaluators","plugins"],image:"/img/eliza_banner.jpg"},a="ElizaOS Documentation",c={},l=[{value:"System Architecture",id:"system-architecture",level:2},{value:"How ElizaOS Works",id:"how-elizaos-works",level:3},{value:"Core Components",id:"core-components",level:3},{value:"Intelligence &amp; Behavior",id:"intelligence--behavior",level:3},{value:"Structure &amp; Organization",id:"structure--organization",level:3},{value:"Development &amp; Integration",id:"development--integration",level:3},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Action-Provider-Evaluator Cycle",id:"action-provider-evaluator-cycle",level:3},{value:"Entity-Component Architecture",id:"entity-component-architecture",level:3},{value:"Memory System",id:"memory-system",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"FAQ",id:"faq",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const s={a:"a",blockquote:"blockquote",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"elizaos-documentation",children:"ElizaOS Documentation"})}),"\n",(0,r.jsx)(s.p,{children:"Welcome to ElizaOS - a comprehensive framework for building AI agents with persistent personalities across multiple platforms. ElizaOS provides the architecture, tools, and systems needed to create sophisticated agents that maintain consistent behavior, learn from interactions, and seamlessly integrate with a variety of services."}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"New to ElizaOS?"})," Check out ",(0,r.jsx)(s.a,{href:"https://eliza.how/blog/v1-v2",children:"What's new in ElizaOS V2"})," to understand how it compares to previous versions."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,r.jsx)(s.p,{children:"ElizaOS uses a modular architecture that separates concerns while providing a cohesive framework for AI agent development:"}),"\n",(0,r.jsx)(s.mermaid,{value:'graph TB\n    %% Main Components with vertical orientation\n    User((User)):::user\n\n    %% First Level - Services\n    PlatformServices[Services]:::services\n\n    %% Second Level - Runtime\n    AgentRuntime[Agent Runtime]:::core\n\n    %% Core Processing Components - Side by side\n    subgraph "Core Processing"\n        direction LR\n        Providers[Providers]:::int\n        Actions[Actions]:::int\n        Evaluators[Evaluators]:::int\n    end\n\n    %% Knowledge and DB - Side by side\n    subgraph "Knowledge & Storage"\n        direction LR\n        Knowledge[Knowledge]:::int\n        DB[(Database)]:::db\n    end\n\n    %% Organization Components - Vertical layout\n    subgraph "Organization"\n        direction TB\n        Worlds[Worlds]:::struct\n        Rooms[Rooms]:::struct\n        Entities[Entities]:::struct\n    end\n\n    %% Development Components - Side by side\n    subgraph "Development & Integration"\n        direction LR\n        Plugins[Plugins]:::dev\n        Projects[Projects]:::dev\n        Tasks[Tasks]:::dev\n    end\n\n    %% Main Flow - Vertical emphasis\n    User <--\x3e|Interaction| PlatformServices\n    PlatformServices --\x3e|Process| AgentRuntime\n\n    %% Runtime connections - Simplified\n    AgentRuntime ---|Context| Providers\n    AgentRuntime ---|Behavior| Actions\n    AgentRuntime ---|Analysis| Evaluators\n\n    %% Data connections\n    AgentRuntime <--\x3e|Storage| DB\n    Knowledge --\x3e|Informs| Providers\n\n    %% Structure connections - Clean vertical hierarchy\n    AgentRuntime --\x3e|Manages| Worlds\n    Worlds --\x3e|Contains| Rooms\n    Rooms --\x3e|Has| Entities\n\n    %% Development connections\n    Projects --\x3e|Configure| AgentRuntime\n    Plugins --\x3e|Extend| AgentRuntime\n    Tasks --\x3e|Scheduled by| AgentRuntime\n\n    %% Clickable nodes with links to docs\n    click AgentRuntime "/docs/core/agents" "Learn about Agent Runtime"\n    click PlatformServices "/docs/core/services" "Learn about Services"\n    click DB "/docs/core/database" "Learn about Database Systems"\n    click Actions "/docs/core/actions" "Learn about Actions"\n    click Providers "/docs/core/providers" "Learn about Providers"\n    click Evaluators "/docs/core/evaluators" "Learn about Evaluators"\n    click Knowledge "/docs/core/knowledge" "Learn about Knowledge System"\n    click Worlds "/docs/core/worlds" "Learn about Worlds"\n    click Rooms "/docs/core/rooms" "Learn about Rooms"\n    click Entities "/docs/core/entities" "Learn about Entities"\n    click Plugins "/docs/core/plugins" "Learn about Plugins"\n    click Projects "/docs/core/project" "Learn about Projects"\n    click Tasks "/docs/core/tasks" "Learn about Tasks"\n\n    %% Styling\n    classDef core fill:#3498db,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef services fill:#9b59b6,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef db fill:#27ae60,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef int fill:#e74c3c,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef struct fill:#f39c12,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef dev fill:#1abc9c,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\n    classDef user fill:#ecf0f1,stroke:#2c3e50,stroke-width:2px,color:#2c3e50,font-weight:bold,border-radius:50%'}),"\n",(0,r.jsx)(s.h3,{id:"how-elizaos-works",children:"How ElizaOS Works"}),"\n",(0,r.jsx)(s.p,{children:"When a user message is received:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Service Reception"}),": Platform service (Discord, Telegram, etc.) receives the message"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Runtime Processing"}),": Agent runtime coordinates the response generation"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Context Building"}),": Providers supply relevant context (time, recent messages, knowledge)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Action Selection"}),": The agent evaluates and selects appropriate actions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Response Generation"}),": The chosen action generates a response"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Learning & Reflection"}),": Evaluators analyze the conversation for insights and learning"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Memory Storage"}),": New information is stored in the database"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Response Delivery"}),": The response is sent back through the service"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This creates a continuous cycle of interaction, reflection, and improvement that allows agents to maintain consistent personalities while adapting to new information."}),"\n",(0,r.jsx)(s.h3,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/agents",children:(0,r.jsx)(s.img,{alt:"Agent Runtime",src:n(43573).A+"",width:"512",height:"256"})})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/services",children:(0,r.jsx)(s.img,{alt:"Services",src:n(37652).A+"",width:"512",height:"256"})})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/database",children:(0,r.jsx)(s.img,{alt:"Database",src:n(25623).A+"",width:"512",height:"256"})})})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/agents",children:"\ud83e\udd16 Agent Runtime"})})," \u2014 Orchestrates agent behavior, manages state, and coordinates components."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/services",children:"\ud83d\udcda Services"})})," \u2014 Enables agents to communicate across Discord, Twitter, Telegram, and other platforms."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/database",children:"\ud83d\udcbe Database"})})," \u2014 Stores memories, entity data, relationships, and configuration using vector search."]})]})})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"intelligence--behavior",children:"Intelligence & Behavior"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/actions",children:(0,r.jsx)(s.img,{alt:"Actions",src:n(10235).A+"",width:"512",height:"256"})})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/providers",children:(0,r.jsx)(s.img,{alt:"Providers",src:n(14124).A+"",width:"512",height:"256"})})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/evaluators",children:(0,r.jsx)(s.img,{alt:"Evaluators",src:n(12826).A+"",width:"512",height:"256"})})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/knowledge",children:(0,r.jsx)(s.img,{alt:"Knowledge",src:n(52666).A+"",width:"512",height:"256"})})})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/actions",children:"\u26a1 Actions"})})," \u2014 Executable capabilities for agents to respond and interact with systems."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/providers",children:"\ud83d\udd0c Providers"})})," \u2014 Supplies context to inform agent decisions in real time."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/evaluators",children:"\ud83d\udcca Evaluators"})})," \u2014 Analyzes conversations to extract insights and improve future responses."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/knowledge",children:"\ud83e\udde0 Knowledge"})})," \u2014 RAG system for document processing and semantic memory."]})]})})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"structure--organization",children:"Structure & Organization"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/worlds",children:(0,r.jsx)(s.img,{alt:"Worlds",src:n(62447).A+"",width:"512",height:"256"})})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/rooms",children:(0,r.jsx)(s.img,{alt:"Rooms",src:n(87610).A+"",width:"512",height:"256"})})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/entities",children:(0,r.jsx)(s.img,{alt:"Entities",src:n(77641).A+"",width:"512",height:"256"})})})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/worlds",children:"\ud83c\udf10 Worlds"})})," \u2014 Organizes environments like servers or projects."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/rooms",children:"\ud83d\udcac Rooms"})})," \u2014 Spaces for conversation, like channels or DMs."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/entities",children:"\ud83d\udc64 Entities"})})," \u2014 Represents users, bots, and other participants."]})]})})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"development--integration",children:"Development & Integration"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/plugins",children:(0,r.jsx)(s.img,{alt:"Plugins",src:n(30138).A+"",width:"512",height:"256"})})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/project",children:(0,r.jsx)(s.img,{alt:"Projects",src:n(72997).A+"",width:"512",height:"256"})})}),(0,r.jsx)(s.th,{children:(0,r.jsx)(s.a,{href:"/docs/core/tasks",children:(0,r.jsx)(s.img,{alt:"Tasks",src:n(66460).A+"",width:"512",height:"256"})})})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/plugins",children:"\ud83e\udde9 Plugins"})})," \u2014 Modular extensions that add new capabilities."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/project",children:"\ud83d\udcdd Projects"})})," \u2014 Defines and deploys agents with configurations."]}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.a,{href:"/docs/core/tasks",children:"\ud83d\udccb Tasks"})})," \u2014 Manages scheduled and deferred operations."]})]})})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsx)(s.h3,{id:"action-provider-evaluator-cycle",children:"Action-Provider-Evaluator Cycle"}),"\n",(0,r.jsx)(s.p,{children:"The core of the ElizaOS system operates as a continuous cycle:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Providers"})," gather context before response generation"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Actions"})," determine what the agent can do and are executed to generate responses"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Evaluators"})," analyze conversations after responses to extract insights"]}),"\n",(0,r.jsx)(s.li,{children:"These insights become part of the agent's memory"}),"\n",(0,r.jsxs)(s.li,{children:["Future ",(0,r.jsx)(s.strong,{children:"Providers"})," access this memory to inform new responses"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This creates a virtuous cycle where agents continuously learn and improve from interactions."}),"\n",(0,r.jsx)(s.h3,{id:"entity-component-architecture",children:"Entity-Component Architecture"}),"\n",(0,r.jsx)(s.p,{children:"ElizaOS uses an entity-component architecture for flexible data modeling:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Entities"})," are base objects with unique IDs (users, agents, etc.)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Components"})," are pieces of data attached to entities (profiles, settings, etc.)"]}),"\n",(0,r.jsx)(s.li,{children:"This approach allows for dynamic composition without complex inheritance hierarchies"}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"memory-system",children:"Memory System"}),"\n",(0,r.jsx)(s.p,{children:"The memory system in ElizaOS provides:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Vector-based semantic search"})," for finding relevant memories"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Multi-level memory types"})," (messages, facts, knowledge)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Temporal awareness"})," through timestamped memories"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Cross-platform continuity"})," while maintaining appropriate context boundaries"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(s.p,{children:"If you're new to ElizaOS, we recommend this learning path:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Start with this overview to understand the system architecture"}),"\n",(0,r.jsxs)(s.li,{children:["Explore the ",(0,r.jsx)(s.a,{href:"/docs/core/agents",children:"Agent Runtime"})," to understand the core system"]}),"\n",(0,r.jsxs)(s.li,{children:["Learn about ",(0,r.jsx)(s.a,{href:"/docs/core/project",children:"Projects"})," to set up your development environment"]}),"\n",(0,r.jsxs)(s.li,{children:["Understand how ",(0,r.jsx)(s.a,{href:"/docs/core/actions",children:"Actions"})," and ",(0,r.jsx)(s.a,{href:"/docs/core/providers",children:"Providers"})," work together"]}),"\n",(0,r.jsxs)(s.li,{children:["Explore ",(0,r.jsx)(s.a,{href:"/docs/core/services",children:"Services"})," to connect with external platforms"]}),"\n",(0,r.jsxs)(s.li,{children:["Dive into ",(0,r.jsx)(s.a,{href:"/docs/core/plugins",children:"Plugins"})," to extend functionality"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"faq",children:"FAQ"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"What's the difference between Actions, Evaluators, and Providers?"})}),"\n",(0,r.jsx)(s.p,{children:"Actions define what an agent can do and are executed during response generation. Evaluators analyze conversations after they happen to extract insights and improve future responses. Providers supply contextual information before the agent decides how to respond."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"How does ElizaOS handle cross-platform conversation context?"})}),"\n",(0,r.jsx)(s.p,{children:"ElizaOS maintains separate conversation contexts for different platforms by default, but shares entity relationships and learned facts across platforms. This ensures agents maintain a consistent understanding of users while respecting platform-specific conversation boundaries."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"How does the memory system work?"})}),"\n",(0,r.jsx)(s.p,{children:"Memory is organized into different types (messages, facts, knowledge) and stored with vector embeddings for semantic search. This allows agents to retrieve relevant memories based on context rather than just recency, creating more natural conversations."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"What's the relationship between Worlds, Rooms, and Entities?"})}),"\n",(0,r.jsx)(s.p,{children:"Worlds are container spaces (like a Discord server) that can have multiple Rooms (channels, DMs). Entities (users, agents) participate in Rooms within Worlds. This hierarchical structure mirrors real-world platforms while providing a consistent abstraction."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"How extensible is ElizaOS?"})}),"\n",(0,r.jsx)(s.p,{children:"ElizaOS is highly extensible through its plugin system. You can create custom actions, providers, evaluators, services, and more to extend functionality. The architecture is designed to be modular and composable at every level."}),"\n",(0,r.jsx)(s.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/api",children:"API Reference"})," - Detailed API documentation for developers"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"https://github.com/elizaos/eliza",children:"GitHub Repository"})," - Source code and contributions"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.a,{href:"/packages",children:"Package Showcase"})," - Explore available plugins and extensions"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},43573:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/agentruntime-264a245eba192f3e402079937ca81b2a.jpg"},52666:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/knowledge-28716fc031f03ab9a5f2245db7c37d5f.jpg"},62447:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/worlds-608b66150be087aae7600f6505ac424b.jpg"},66460:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/tasks-6e6c28edcaa8faa983eb5f351c5bad33.jpg"},71184:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var t=n(14041);const r={},i=t.createContext(r);function o(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:s},e.children)}},72997:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/project-37fb39ca305e5bf16461fbffa436d687.jpg"},77641:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/entities-7fc1317c08f4d1a6ee0ec34a140662e7.jpg"},87610:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/rooms-268d413ca1732866f7a7af2595b876eb.jpg"}}]);