"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[41063],{53058:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"adapters/postgres","title":"ElizaOS PostgreSQL Adapter","description":"A database adapter plugin for ElizaOS that provides PostgreSQL connectivity with vector embedding support for semantic search capabilities.","source":"@site/packages/adapters/postgres.md","sourceDirName":"adapters","slug":"/adapters/postgres","permalink":"/packages/adapters/postgres","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"PGLite Adapter for ElizaOS","permalink":"/packages/adapters/pglite"},"next":{"title":"Qdrant Adapter for ElizaOS","permalink":"/packages/adapters/qdrant"}}');var t=i(31085),r=i(71184);const a={},l="ElizaOS PostgreSQL Adapter",o={},c=[{value:"Features",id:"features",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Database Schema",id:"database-schema",level:2},{value:"Vector Search",id:"vector-search",level:2},{value:"Memory Management",id:"memory-management",level:2},{value:"Knowledge Management",id:"knowledge-management",level:2},{value:"Caching System",id:"caching-system",level:2},{value:"Connection Management",id:"connection-management",level:2},{value:"Development",id:"development",level:2},{value:"Testing",id:"testing",level:3},{value:"Building",id:"building",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"elizaos-postgresql-adapter",children:"ElizaOS PostgreSQL Adapter"})}),"\n",(0,t.jsx)(n.p,{children:"A database adapter plugin for ElizaOS that provides PostgreSQL connectivity with vector embedding support for semantic search capabilities."}),"\n",(0,t.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Seamless integration with ElizaOS memory and knowledge storage systems"}),"\n",(0,t.jsx)(n.li,{children:"Vector embedding storage and retrieval with pgvector extension"}),"\n",(0,t.jsx)(n.li,{children:"Support for multiple embedding models and dimensions (OpenAI, Ollama, GaiaNet)"}),"\n",(0,t.jsx)(n.li,{children:"Robust connection management with automatic retries and circuit breaking"}),"\n",(0,t.jsx)(n.li,{children:"Full transaction support for safe database operations"}),"\n",(0,t.jsx)(n.li,{children:"Comprehensive memory, relationship, and knowledge management"}),"\n",(0,t.jsx)(n.li,{children:"Built-in caching system"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"PostgreSQL 15+ with pgvector extension installed"}),"\n",(0,t.jsx)(n.li,{children:"Connection permissions to create tables and extensions"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"Install the adapter via npm:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @elizaos-plugins/adapter-postgres\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or using bun:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"bun add @elizaos-plugins/adapter-postgres\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Add the adapter to your ElizaOS configuration and provide the necessary connection details:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// agent.config.js\nexport default {\n  // Other ElizaOS configuration\n  adapters: ['postgres'],\n  // PostgreSQL connection environment variables\n  settings: {\n    POSTGRES_URL: 'postgresql://username:password@localhost:5432/elizaos',\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"POSTGRES_URL"})," - Required PostgreSQL connection string"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,t.jsx)(n.p,{children:"The adapter automatically initializes the required database schema when first connecting, including:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Setting up the pgvector extension"}),"\n",(0,t.jsx)(n.li,{children:"Creating all necessary tables (memories, accounts, rooms, etc.)"}),"\n",(0,t.jsx)(n.li,{children:"Configuring indexes for vector search"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The schema includes tables for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"accounts"})," - User and agent profiles"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rooms"})," - Conversation containers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"memories"})," - Messages and other memory objects with vector embeddings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"goals"})," - User and agent goals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"participants"})," - Room participation records"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"relationships"})," - Connections between accounts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"knowledge"})," - Agent knowledge base with vector embeddings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cache"})," - Key-value cache storage"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"vector-search",children:"Vector Search"}),"\n",(0,t.jsx)(n.p,{children:"The adapter uses pgvector to provide semantic search through vector embeddings, supporting:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Multiple embedding models (OpenAI, Ollama, GaiaNet, etc.)"}),"\n",(0,t.jsx)(n.li,{children:"Automatic dimension detection (1536 for OpenAI, 1024 for Ollama, etc.)"}),"\n",(0,t.jsx)(n.li,{children:"Cosine similarity search with configurable thresholds"}),"\n",(0,t.jsx)(n.li,{children:"Text-based keyword search with Levenshtein distance"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsx)(n.p,{children:"The adapter provides methods for:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Creating memories with vector embeddings\nawait adapter.createMemory(memory, tableName);\n\n// Searching memories by vector similarity\nawait adapter.searchMemoriesByEmbedding(embedding, options);\n\n// Retrieving memories by various criteria\nawait adapter.getMemories({ roomId, tableName, count, unique });\n"})}),"\n",(0,t.jsx)(n.h2,{id:"knowledge-management",children:"Knowledge Management"}),"\n",(0,t.jsx)(n.p,{children:"For agent knowledge base management:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Store knowledge items with vector embeddings\nawait adapter.createKnowledge(knowledgeItem);\n\n// Search knowledge by vector similarity and text\nawait adapter.searchKnowledge({\n  agentId,\n  embedding,\n  match_threshold: 0.8,\n  match_count: 10,\n  searchText: 'optional text',\n});\n\n// Remove knowledge\nawait adapter.removeKnowledge(knowledgeId);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"caching-system",children:"Caching System"}),"\n",(0,t.jsx)(n.p,{children:"The adapter includes a built-in caching system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Store cache values\nawait adapter.setCache({ key, agentId, value });\n\n// Retrieve cached values\nconst value = await adapter.getCache({ key, agentId });\n\n// Delete cache entries\nawait adapter.deleteCache({ key, agentId });\n"})}),"\n",(0,t.jsx)(n.h2,{id:"connection-management",children:"Connection Management"}),"\n",(0,t.jsx)(n.p,{children:"The adapter implements robust connection handling:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Circuit breaker pattern to prevent cascading failures"}),"\n",(0,t.jsx)(n.li,{children:"Automatic connection retry with exponential backoff"}),"\n",(0,t.jsx)(n.li,{children:"Connection pooling with configurable limits"}),"\n",(0,t.jsx)(n.li,{children:"Graceful connection cleanup on shutdown"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development",children:"Development"}),"\n",(0,t.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.p,{children:"The repository includes a comprehensive test suite:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run tests with Docker for pgvector support\ncd src/__tests__\n./run_tests.sh\n"})}),"\n",(0,t.jsx)(n.p,{children:"Tests require Docker to spin up a PostgreSQL instance with pgvector support."}),"\n",(0,t.jsx)(n.h3,{id:"building",children:"Building"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"bun build\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Connection errors"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify your PostgreSQL connection string"}),"\n",(0,t.jsx)(n.li,{children:"Ensure PostgreSQL is running and accessible"}),"\n",(0,t.jsx)(n.li,{children:"Check network connectivity and firewall settings"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Vector search issues"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify pgvector extension is installed in your PostgreSQL database"}),"\n",(0,t.jsx)(n.li,{children:"Ensure embedding dimensions match your model"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Permission errors"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The database user needs permission to create extensions and tables"}),"\n",(0,t.jsx)(n.li,{children:"For production, consider using a more restricted user after initialization"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(14041);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);