"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[60095],{71184:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(14041);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}},76469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"plugins/migration/claude-code/migration-guide","title":"ElizaOS Plugin Migration Guide - v1.x","description":"Important: This guide provides a general framework for migrating ElizaOS plugins to v1.x. Specific configurations will vary based on your plugin\'s functionality.","source":"@site/docs/plugins/migration/claude-code/migration-guide.md","sourceDirName":"plugins/migration/claude-code","slug":"/plugins/migration/claude-code/migration-guide","permalink":"/docs/plugins/migration/claude-code/migration-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/plugins/migration/claude-code/migration-guide.md","tags":[],"version":"current","lastUpdatedBy":"0xbbjoker","lastUpdatedAt":1751365902000,"frontMatter":{}}');var r=t(31085),s=t(71184);const o={},a="ElizaOS Plugin Migration Guide - v1.x",l={},d=[{value:"Step 1: Create Version Branch",id:"step-1-create-version-branch",level:2},{value:"Step 2: Remove Deprecated Files",id:"step-2-remove-deprecated-files",level:2},{value:"Files to Remove:",id:"files-to-remove",level:3},{value:"Quick Cleanup Commands:",id:"quick-cleanup-commands",level:3},{value:"Step 3: Update package.json",id:"step-3-update-packagejson",level:2},{value:"3.1 Version Update",id:"31-version-update",level:3},{value:"3.1.5 Package Name Update",id:"315-package-name-update",level:3},{value:"3.2 Dependencies",id:"32-dependencies",level:3},{value:"3.3 Dev Dependencies",id:"33-dev-dependencies",level:3},{value:"3.4 Scripts Section",id:"34-scripts-section",level:3},{value:"3.5 Publish Configuration",id:"35-publish-configuration",level:3},{value:"3.6 Agent Configuration",id:"36-agent-configuration",level:3},{value:"3.7 Dependencies",id:"37-dependencies",level:3},{value:"Step 4: TypeScript Configuration",id:"step-4-typescript-configuration",level:2},{value:"4.1 Update <code>tsup.config.ts</code>",id:"41-update-tsupconfigts",level:3},{value:"4.2 Update <code>tsconfig.json</code>",id:"42-update-tsconfigjson",level:3},{value:"4.3 Create <code>tsconfig.build.json</code>",id:"43-create-tsconfigbuildjson",level:3},{value:"Step 5: Verify Build Process",id:"step-5-verify-build-process",level:2},{value:"Expected Results:",id:"expected-results",level:3},{value:"Step 6: Migrate Actions &amp; Providers",id:"step-6-migrate-actions--providers",level:2},{value:"6.1 Import Changes",id:"61-import-changes",level:3},{value:"6.2 State Handling Migration",id:"62-state-handling-migration",level:3},{value:"6.3 Context/Prompt Generation",id:"63-contextprompt-generation",level:3},{value:"6.4 Template Migration - JSON to XML Format",id:"64-template-migration---json-to-xml-format",level:3},{value:"Update Template Content:",id:"update-template-content",level:4},{value:"6.5 Content Generation Migration",id:"65-content-generation-migration",level:3},{value:"6.6 Content Interface and Validation",id:"66-content-interface-and-validation",level:3},{value:"Define Content Interface:",id:"define-content-interface",level:4},{value:"Create Validation Function:",id:"create-validation-function",level:4},{value:"6.7 Handler Pattern Updates",id:"67-handler-pattern-updates",level:3},{value:"6.8 Action Examples Structure",id:"68-action-examples-structure",level:3},{value:"Important Migration Notes:",id:"important-migration-notes",level:3},{value:"Step 7: Migrate Providers",id:"step-7-migrate-providers",level:2},{value:"7.1 Provider Interface Changes",id:"71-provider-interface-changes",level:3},{value:"7.2 ProviderResult Interface",id:"72-providerresult-interface",level:3},{value:"7.3 Migration Steps",id:"73-migration-steps",level:3},{value:"Step 1: Add Required <code>name</code> Property",id:"step-1-add-required-name-property",level:4},{value:"Step 2: Update Return Type",id:"step-2-update-return-type",level:4},{value:"Step 3: Handle Non-Optional State",id:"step-3-handle-non-optional-state",level:4},{value:"7.4 Complete Migration Examples",id:"74-complete-migration-examples",level:3},{value:"Example 1: Simple Text Provider",id:"example-1-simple-text-provider",level:4},{value:"Example 2: Data Provider",id:"example-2-data-provider",level:4},{value:"Example 3: Complex Provider with All Options",id:"example-3-complex-provider-with-all-options",level:4},{value:"7.5 Provider Options Explained",id:"75-provider-options-explained",level:3},{value:"7.6 Best Practices",id:"76-best-practices",level:3},{value:"Important Provider Migration Notes:",id:"important-provider-migration-notes",level:3}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"elizaos-plugin-migration-guide---v1x",children:"ElizaOS Plugin Migration Guide - v1.x"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important"}),": This guide provides a general framework for migrating ElizaOS plugins to v1.x. Specific configurations will vary based on your plugin's functionality."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-1-create-version-branch",children:"Step 1: Create Version Branch"}),"\n",(0,r.jsx)(n.p,{children:"Create a new branch for the 1.x version while preserving the main branch for backwards compatibility:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git checkout -b 1.x\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": This branch will serve as your new 1.x version branch, keeping ",(0,r.jsx)(n.code,{children:"main"})," intact for legacy support."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-2-remove-deprecated-files",children:"Step 2: Remove Deprecated Files"}),"\n",(0,r.jsx)(n.p,{children:"Clean up deprecated tooling and configuration files:"}),"\n",(0,r.jsx)(n.h3,{id:"files-to-remove",children:"Files to Remove:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"biome.json"})})," - Deprecated linter configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"vitest.config.ts"})})," - Replaced by Bun test runner"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lock files"})," - Any ",(0,r.jsx)(n.code,{children:"lock.json"})," or ",(0,r.jsx)(n.code,{children:"yml.lock"})," files"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"quick-cleanup-commands",children:"Quick Cleanup Commands:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"rm -rf vitest.config.ts\nrm -rf biome.json\nrm -f *.lock.json *.yml.lock\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why?"})," The ElizaOS ecosystem has standardized on:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bun's built-in test runner"})," (replacing Vitest) - All plugins must now use ",(0,r.jsx)(n.code,{children:"bun test"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prettier"})," for code formatting (replacing Biome)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This ensures consistency across all ElizaOS plugins and simplifies the development toolchain."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-3-update-packagejson",children:"Step 3: Update package.json"}),"\n",(0,r.jsx)(n.h3,{id:"31-version-update",children:"3.1 Version Update"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"version": "1.0.0"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"315-package-name-update",children:"3.1.5 Package Name Update"}),"\n",(0,r.jsx)(n.p,{children:"Check if your package name contains the old namespace and update it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'// OLD (incorrect):\n"name": "@elizaos-plugins/plugin-bnb"\n\n// NEW (correct):\n"name": "@elizaos/plugin-bnb"\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important"}),": If your package name starts with ",(0,r.jsx)(n.code,{children:"@elizaos-plugins/"}),', remove the "s" from "plugins" to change it to ',(0,r.jsx)(n.code,{children:"@elizaos/"}),". This is the correct namespace for all ElizaOS plugins in v1.x."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"32-dependencies",children:"3.2 Dependencies"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Remove"}),": ",(0,r.jsx)(n.code,{children:"biome"}),", ",(0,r.jsx)(n.code,{children:"vitest"})," (if present)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add"}),": Core and plugin-specific dependencies"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"33-dev-dependencies",children:"3.3 Dev Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Add the following development dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"devDependencies": {\n  "tsup": "8.3.5",\n  "prettier": "^3.0.0",\n  "bun": "^1.2.15",          // REQUIRED: All plugins now use Bun test runner\n  "@types/bun": "latest",     // REQUIRED: TypeScript types for Bun\n  "typescript": "^5.0.0"\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important"}),": ",(0,r.jsx)(n.code,{children:"bun"})," and ",(0,r.jsx)(n.code,{children:"@types/bun"})," are ",(0,r.jsx)(n.strong,{children:"REQUIRED"})," dependencies for all plugins in v1.x. The ElizaOS ecosystem has standardized on Bun's built-in test runner, replacing Vitest. Without these dependencies, your tests will not run properly."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"34-scripts-section",children:"3.4 Scripts Section"}),"\n",(0,r.jsx)(n.p,{children:"Replace your existing scripts with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"scripts": {\n  "build": "tsup",\n  "dev": "tsup --watch",\n  "lint": "prettier --write ./src",\n  "clean": "rm -rf dist .turbo node_modules .turbo-tsconfig.json tsconfig.tsbuildinfo",\n  "format": "prettier --write ./src",\n  "format:check": "prettier --check ./src",\n  "test": "bun test",                    // Uses Bun\'s built-in test runner\n  "test:watch": "bun test --watch",      // Watch mode for development\n  "test:coverage": "bun test --coverage" // Coverage reports with Bun\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": All test scripts now use Bun's built-in test runner. Make sure you have ",(0,r.jsx)(n.code,{children:"bun"})," and ",(0,r.jsx)(n.code,{children:"@types/bun"})," installed as dev dependencies (see section 3.3)."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"35-publish-configuration",children:"3.5 Publish Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Add the following to enable public npm publishing:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"publishConfig": {\n  "access": "public"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"36-agent-configuration",children:"3.6 Agent Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Replace your ",(0,r.jsx)(n.code,{children:"agentConfig"})," with the new structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"agentConfig": {\n  "pluginType": "elizaos:plugin:1.0.0",\n  "pluginParameters": {\n    "YOUR_PARAMETER_NAME": {\n      "type": "string",\n      "description": "Description of what this parameter does",\n      "required": true,\n      "sensitive": true\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": Replace ",(0,r.jsx)(n.code,{children:"YOUR_PARAMETER_NAME"})," with your plugin's specific configuration parameters. Common types include API keys, endpoints, credentials, etc."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"37-dependencies",children:"3.7 Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Add your plugin-specific dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"dependencies": {\n  "@elizaos/core": "latest",\n  // Add your plugin-specific dependencies here\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-4-typescript-configuration",children:"Step 4: TypeScript Configuration"}),"\n",(0,r.jsxs)(n.h3,{id:"41-update-tsupconfigts",children:["4.1 Update ",(0,r.jsx)(n.code,{children:"tsup.config.ts"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { defineConfig } from 'tsup';\n\nexport default defineConfig({\n  entry: ['src/index.ts'],\n  outDir: 'dist',\n  tsconfig: './tsconfig.build.json', // Use build-specific tsconfig\n  sourcemap: true,\n  clean: true,\n  format: ['esm'], // ESM output format\n  dts: true,\n  external: ['dotenv', 'fs', 'path', 'https', 'http', '@elizaos/core', 'zod'],\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"42-update-tsconfigjson",children:["4.2 Update ",(0,r.jsx)(n.code,{children:"tsconfig.json"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "outDir": "dist",\n    "rootDir": "src",\n    "baseUrl": "./",\n    "lib": ["ESNext"],\n    "target": "ESNext",\n    "module": "Preserve",\n    "moduleResolution": "Bundler",\n    "strict": true,\n    "esModuleInterop": true,\n    "allowImportingTsExtensions": true,\n    "declaration": true,\n    "emitDeclarationOnly": true,\n    "resolveJsonModule": true,\n    "moduleDetection": "force",\n    "allowArbitraryExtensions": true,\n    "types": ["bun"]\n  },\n  "include": ["src/**/*.ts"]\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"43-create-tsconfigbuildjson",children:["4.3 Create ",(0,r.jsx)(n.code,{children:"tsconfig.build.json"})]}),"\n",(0,r.jsx)(n.p,{children:"Create a new file with build-specific TypeScript configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "extends": "./tsconfig.json",\n  "compilerOptions": {\n    "rootDir": "./src",\n    "outDir": "./dist",\n    "sourceMap": true,\n    "inlineSources": true,\n    "declaration": true,\n    "emitDeclarationOnly": true\n  },\n  "include": ["src/**/*.ts"],\n  "exclude": ["node_modules", "dist", "**/*.test.ts", "**/*.spec.ts"]\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-5-verify-build-process",children:"Step 5: Verify Build Process"}),"\n",(0,r.jsx)(n.p,{children:"Clean everything and test the new setup:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Clean all build artifacts and dependencies\nrm -rf dist node_modules .turbo\n\n# Install dependencies with Bun\nbun install\n\n# Build the project\nbun run build\n"})}),"\n",(0,r.jsx)(n.h3,{id:"expected-results",children:"Expected Results:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dependencies install without errors"}),"\n",(0,r.jsx)(n.li,{children:"Build completes successfully"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dist"})," folder contains compiled output"]}),"\n",(0,r.jsx)(n.li,{children:"TypeScript declarations are generated"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Next Steps"}),": After verifying the build, proceed to Step 6 to migrate your actions and providers to handle the breaking API changes."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-6-migrate-actions--providers",children:"Step 6: Migrate Actions & Providers"}),"\n",(0,r.jsx)(n.h3,{id:"61-import-changes",children:"6.1 Import Changes"}),"\n",(0,r.jsx)(n.p,{children:"Update your imports in action files:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Remove these imports:\nimport { generateObject, composeContext } from '@elizaos/core';\n\n// Add/update these imports:\nimport {\n  composePromptFromState,\n  parseKeyValueXml,\n  ModelType, // Note: ModelType replaces ModelClass\n} from '@elizaos/core';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"62-state-handling-migration",children:"6.2 State Handling Migration"}),"\n",(0,r.jsx)(n.p,{children:"Replace the state initialization and update pattern:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OLD Pattern:\nlet currentState = state;\nif (!currentState) {\n  currentState = (await runtime.composeState(message)) as State;\n} else {\n  currentState = await runtime.updateRecentMessageState(currentState);\n}\n\n// NEW Pattern:\nlet currentState = state;\nif (!currentState) {\n  currentState = await runtime.composeState(message);\n} else {\n  currentState = await runtime.composeState(message, ['RECENT_MESSAGES']);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"63-contextprompt-generation",children:"6.3 Context/Prompt Generation"}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"composeContext"})," with ",(0,r.jsx)(n.code,{children:"composePromptFromState"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OLD:\nconst context = composeContext({\n  state: currentState,\n  template: yourTemplate,\n});\n\n// NEW:\nconst prompt = composePromptFromState({\n  state: currentState,\n  template: yourTemplate,\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"64-template-migration---json-to-xml-format",children:"6.4 Template Migration - JSON to XML Format"}),"\n",(0,r.jsx)(n.h4,{id:"update-template-content",children:"Update Template Content:"}),"\n",(0,r.jsxs)(n.p,{children:["Templates should be updated from requesting JSON responses to XML format for use with ",(0,r.jsx)(n.code,{children:"parseKeyValueXml"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// OLD Template Pattern (JSON):\nconst template = `Respond with a JSON markdown block containing only the extracted values.\n\nExample response for a new token:\n\\`\\`\\`json\n{\n    "name": "Test Token",\n    "symbol": "TEST"\n}\n\\`\\`\\`\n\nGiven the recent messages, extract the following information:\n- Name\n- Symbol`;\n\n// NEW Template Pattern (XML):\nconst template = `Respond with an XML block containing only the extracted values. Use key-value pairs.\n\nExample response for a new token:\n<response>\n    <name>Test Token</name>\n    <symbol>TEST</symbol>\n</response>\n\n## Recent Messages\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token creation:\n- Name\n- Symbol\n\nRespond with an XML block containing only the extracted values.`;\n'})}),"\n",(0,r.jsx)(n.h3,{id:"65-content-generation-migration",children:"6.5 Content Generation Migration"}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"generateObject"})," with ",(0,r.jsx)(n.code,{children:"runtime.useModel"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OLD Pattern:\nconst content = await generateObject({\n  runtime,\n  context: context,\n  modelClass: ModelClass.SMALL,\n});\n\n// NEW Pattern:\nconst result = await runtime.useModel(ModelType.TEXT_SMALL, {\n  prompt,\n});\n\nconst content = parseKeyValueXml(result);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Important Changes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ModelClass.SMALL"})," \u2192 ",(0,r.jsx)(n.code,{children:"ModelType.TEXT_SMALL"})]}),"\n",(0,r.jsx)(n.li,{children:"First parameter is the model type enum value"}),"\n",(0,r.jsxs)(n.li,{children:["Second parameter is an object with ",(0,r.jsx)(n.code,{children:"prompt"})," and optional ",(0,r.jsx)(n.code,{children:"stopSequences"})]}),"\n",(0,r.jsxs)(n.li,{children:["Parse the result with ",(0,r.jsx)(n.code,{children:"parseKeyValueXml"})," which extracts key-value pairs from XML responses"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"66-content-interface-and-validation",children:"6.6 Content Interface and Validation"}),"\n",(0,r.jsx)(n.h4,{id:"define-content-interface",children:"Define Content Interface:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export interface YourActionContent extends Content {\n  // Define your required fields\n  name: string;\n  symbol: string;\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"create-validation-function",children:"Create Validation Function:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function isYourActionContent(_runtime: IAgentRuntime, content: any): content is YourActionContent {\n  elizaLogger.debug('Content for validation', content);\n  return typeof content.name === 'string' && typeof content.symbol === 'string';\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"67-handler-pattern-updates",children:"6.7 Handler Pattern Updates"}),"\n",(0,r.jsx)(n.p,{children:"Complete handler migration example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    _options: { [key: string]: unknown },\n    callback?: HandlerCallback\n) => {\n    elizaLogger.log("Starting YOUR_ACTION handler...");\n\n    // 1. Initialize or update state\n    let currentState = state;\n    if (!currentState) {\n        currentState = await runtime.composeState(message);\n    } else {\n        currentState = await runtime.composeState(message, [\n            "RECENT_MESSAGES",\n        ]);\n    }\n\n    // 2. Compose prompt from state\n    const prompt = composePromptFromState({\n        state: currentState,\n        template: yourTemplate,\n    });\n\n    // 3. Generate content using the model\n    const result = await runtime.useModel(ModelType.TEXT_SMALL, {\n        prompt,\n        stopSequences: [],\n    });\n\n    // 4. Parse the result\n    const content = parseKeyValueXml(result);\n\n    elizaLogger.debug("Parsed content:", content);\n\n    // 5. Validate content\n    if (!isYourActionContent(runtime, content)) {\n        elizaLogger.error("Invalid content for YOUR_ACTION action.");\n        callback?.({\n            text: "Unable to process request. Invalid content provided.",\n            content: { error: "Invalid content" },\n        });\n        return false;\n    }\n\n    // 6. Execute your action logic\n    try {\n        // Your action implementation here\n        const result = await yourActionLogic(runtime, content);\n\n        callback?.({\n            text: `Success message with ${content.name}`,\n            content: result,\n        });\n        return true;\n    } catch (error) {\n        elizaLogger.error("Action failed:", error);\n        callback?.({\n            text: "Action failed. Please try again.",\n            content: { error: error.message },\n        });\n        return false;\n    }\n},\n'})}),"\n",(0,r.jsx)(n.h3,{id:"68-action-examples-structure",children:"6.8 Action Examples Structure"}),"\n",(0,r.jsx)(n.p,{children:"The action examples structure remains largely the same, but ensure they follow this pattern:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'examples: [\n    [\n        {\n            user: "{{name1}}", // Note: "user" instead of "name" for user messages\n            content: {\n                text: "User input text here",\n            },\n        },\n        {\n            name: "{{name2}}", // Agent response uses "name"\n            content: {\n                action: "YOUR_ACTION_NAME",\n                // Include the expected parsed fields\n                name: "Expected Name",\n                symbol: "Expected Symbol",\n            },\n        },\n    ],\n] as ActionExample[][],\n'})}),"\n",(0,r.jsx)(n.h3,{id:"important-migration-notes",children:"Important Migration Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Update templates to request XML format instead of JSON"}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"parseKeyValueXml"})," function parses XML responses into key-value objects"]}),"\n",(0,r.jsx)(n.li,{children:"Always include error handling and validation"}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"elizaLogger"})," for debugging"]}),"\n",(0,r.jsx)(n.li,{children:"The callback pattern remains the same for success/error responses"}),"\n",(0,r.jsxs)(n.li,{children:["Model types have changed from ",(0,r.jsx)(n.code,{children:"ModelClass"})," to ",(0,r.jsx)(n.code,{children:"ModelType"})," enum"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-7-migrate-providers",children:"Step 7: Migrate Providers"}),"\n",(0,r.jsx)(n.h3,{id:"71-provider-interface-changes",children:"7.1 Provider Interface Changes"}),"\n",(0,r.jsx)(n.p,{children:"The Provider interface has been significantly enhanced with new required and optional properties:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OLD Provider Interface:\nexport interface Provider {\n  get: (runtime: IAgentRuntime, message: Memory, state?: State) => Promise<any>;\n}\n\n// NEW Provider Interface:\ninterface Provider {\n  name: string; // REQUIRED: Unique identifier for the provider\n  description?: string; // Optional: Description of what the provider does\n  dynamic?: boolean; // Optional: Whether the provider is dynamic\n  position?: number; // Optional: Position in provider list (+ or -)\n  private?: boolean; // Optional: Whether provider is private (not shown in list)\n  get: (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State // Note: state is no longer optional\n  ) => Promise<ProviderResult>; // Returns ProviderResult instead of any\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"72-providerresult-interface",children:"7.2 ProviderResult Interface"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"get"})," method must now return a ",(0,r.jsx)(n.code,{children:"ProviderResult"})," object instead of ",(0,r.jsx)(n.code,{children:"any"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ProviderResult {\n  values?: {\n    [key: string]: any;\n  };\n  data?: {\n    [key: string]: any;\n  };\n  text?: string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"73-migration-steps",children:"7.3 Migration Steps"}),"\n",(0,r.jsxs)(n.h4,{id:"step-1-add-required-name-property",children:["Step 1: Add Required ",(0,r.jsx)(n.code,{children:"name"})," Property"]}),"\n",(0,r.jsxs)(n.p,{children:["Every provider must have a unique ",(0,r.jsx)(n.code,{children:"name"})," property:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OLD:\nconst myProvider: Provider = {\n  get: async (runtime, message, state) => {\n    // ...\n  },\n};\n\n// NEW:\nconst myProvider: Provider = {\n  name: 'myProvider', // REQUIRED\n  get: async (runtime, message, state) => {\n    // ...\n  },\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"step-2-update-return-type",children:"Step 2: Update Return Type"}),"\n",(0,r.jsxs)(n.p,{children:["Change your return statements to return a ",(0,r.jsx)(n.code,{children:"ProviderResult"})," object:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OLD:\nreturn 'Some text response';\n// or\nreturn { someData: 'value' };\n\n// NEW:\nreturn {\n  text: 'Some text response',\n};\n// or\nreturn {\n  data: { someData: 'value' },\n};\n// or\nreturn {\n  text: 'Some text',\n  values: { key1: 'value1' },\n  data: { complex: { nested: 'data' } },\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"step-3-handle-non-optional-state",children:"Step 3: Handle Non-Optional State"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"state"})," parameter is no longer optional. Update your function signature:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OLD:\nget: async (runtime, message, state?) => {\n  if (!state) {\n    // handle missing state\n  }\n};\n\n// NEW:\nget: async (runtime, message, state) => {\n  // state is always provided\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"74-complete-migration-examples",children:"7.4 Complete Migration Examples"}),"\n",(0,r.jsx)(n.h4,{id:"example-1-simple-text-provider",children:"Example 1: Simple Text Provider"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OLD Implementation:\nconst simpleProvider: Provider = {\n  get: async (runtime, message, state?) => {\n    return 'Hello from provider';\n  },\n};\n\n// NEW Implementation:\nconst simpleProvider: Provider = {\n  name: 'simpleProvider',\n  description: 'A simple text provider',\n  get: async (runtime, message, state) => {\n    return {\n      text: 'Hello from provider',\n    };\n  },\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"example-2-data-provider",children:"Example 2: Data Provider"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OLD Implementation:\nconst dataProvider: Provider = {\n  get: async (runtime, message, state?) => {\n    const data = await fetchSomeData();\n    return data;\n  },\n};\n\n// NEW Implementation:\nconst dataProvider: Provider = {\n  name: 'dataProvider',\n  description: 'Fetches external data',\n  dynamic: true,\n  get: async (runtime, message, state) => {\n    const data = await fetchSomeData();\n    return {\n      data: data,\n      text: `Fetched ${Object.keys(data).length} items`,\n    };\n  },\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"example-3-complex-provider-with-all-options",children:"Example 3: Complex Provider with All Options"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// NEW Implementation with all options:\nconst complexProvider: Provider = {\n  name: 'complexProvider',\n  description: 'A complex provider with all options',\n  dynamic: true,\n  position: 10, // Higher priority in provider list\n  private: false, // Shown in provider list\n  get: async (runtime, message, state) => {\n    elizaLogger.debug('complexProvider::get');\n\n    const values = {\n      timestamp: Date.now(),\n      userId: message.userId,\n    };\n\n    const data = await fetchComplexData();\n\n    const text = formatDataAsText(data);\n\n    return {\n      text,\n      values,\n      data,\n    };\n  },\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"75-provider-options-explained",children:"7.5 Provider Options Explained"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"name"})})," (required): Unique identifier used to reference the provider"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"description"})}),": Human-readable description of what the provider does"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"dynamic"})}),": Set to ",(0,r.jsx)(n.code,{children:"true"})," if the provider returns different data based on context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"position"})}),": Controls ordering in provider lists (positive = higher priority)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"private"})}),": Set to ",(0,r.jsx)(n.code,{children:"true"})," to hide from public provider lists (must be called explicitly)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"76-best-practices",children:"7.6 Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Always include descriptive names"}),": Use clear, descriptive names that indicate what the provider does"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Return appropriate result types"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"text"})," for human-readable responses"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"data"})," for structured data that other components might process"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"values"})," for simple key-value pairs that might be used in templates"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add descriptions"}),": Help other developers understand your provider's purpose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use logging"}),": Include debug logs to help troubleshoot issues"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle errors gracefully"}),": Return meaningful error messages in the ",(0,r.jsx)(n.code,{children:"text"})," field"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"important-provider-migration-notes",children:"Important Provider Migration Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"name"})," property is now required for all providers"]}),"\n",(0,r.jsxs)(n.li,{children:["Return type must be ",(0,r.jsx)(n.code,{children:"ProviderResult"})," object, not raw values"]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"state"})," parameter is no longer optional"]}),"\n",(0,r.jsxs)(n.li,{children:["Consider adding optional properties (",(0,r.jsx)(n.code,{children:"description"}),", ",(0,r.jsx)(n.code,{children:"dynamic"}),", etc.) for better documentation and behavior"]}),"\n",(0,r.jsx)(n.li,{children:"Test thoroughly as the runtime may handle providers differently based on these new properties"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);