"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[28650],{63516:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"namespaces/v2/interfaces/State","title":"State","description":"@elizaos/core v1.0.12 / v2 / State","source":"@site/api/namespaces/v2/interfaces/State.md","sourceDirName":"namespaces/v2/interfaces","slug":"/namespaces/v2/interfaces/State","permalink":"/api/namespaces/v2/interfaces/State","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"ServiceTypeRegistry","permalink":"/api/namespaces/v2/interfaces/ServiceTypeRegistry"},"next":{"title":"StateObject","permalink":"/api/namespaces/v2/interfaces/StateObject"}}');var s=n(31085),r=n(71184);const i={},c="Interface: State",o={},l=[{value:"Indexable",id:"indexable",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/api/",children:"@elizaos/core v1.0.12"})," / ",(0,s.jsx)(t.a,{href:"/api/namespaces/v2/",children:"v2"})," / State"]}),"\n",(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"interface-state",children:"Interface: State"})}),"\n",(0,s.jsx)(t.p,{children:"Represents the current state or context of a conversation or agent interaction.\nThis interface is a flexible container for various pieces of information that define the agent's\nunderstanding at a point in time. It includes:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"values"}),": A key-value store for general state variables, often populated by providers."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"data"}),": Another key-value store, potentially for more structured or internal data."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"text"}),": A string representation of the current context, often a summary or concatenated history.\nThe ",(0,s.jsx)(t.code,{children:"[key: string]: any;"})," allows for dynamic properties, though ",(0,s.jsx)(t.code,{children:"EnhancedState"})," offers better typing.\nThis state object is passed to handlers for actions, evaluators, and providers."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"indexable",children:"Indexable"}),"\n",(0,s.jsxs)(t.p,{children:["[",(0,s.jsx)(t.code,{children:"key"}),": ",(0,s.jsx)(t.code,{children:"string"}),"]: ",(0,s.jsx)(t.code,{children:"any"})]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},71184:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var a=n(14041);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);