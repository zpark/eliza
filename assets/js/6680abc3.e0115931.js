"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[60896],{71184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(14041);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},77812:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"core/agents","title":"Agent Runtime","description":"Understanding the ElizaOS Agent Runtime - the core environment that powers AI agents","source":"@site/docs/core/agents.md","sourceDirName":"core","slug":"/core/agents","permalink":"/docs/core/agents","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/core/agents.md","tags":[],"version":"current","lastUpdatedBy":"Shaw","lastUpdatedAt":1748825127000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Agent Runtime","description":"Understanding the ElizaOS Agent Runtime - the core environment that powers AI agents","keywords":["agent runtime","orchestration","services","state","plugins","memory","models","processing"],"image":"/img/agentruntime.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"Actions","permalink":"/docs/core/actions"},"next":{"title":"Database Adapters","permalink":"/docs/core/database"}}');var i=t(31085),r=t(71184);const a={sidebar_position:1,title:"Agent Runtime",description:"Understanding the ElizaOS Agent Runtime - the core environment that powers AI agents",keywords:["agent runtime","orchestration","services","state","plugins","memory","models","processing"],image:"/img/agentruntime.jpg"},o="\ud83e\udd16 Agent Runtime",c={},l=[{value:"Overview",id:"overview",level:2},{value:"<strong>Key Methods</strong>",id:"key-methods",level:3},{value:"Service System",id:"service-system",level:2},{value:"State Management",id:"state-management",level:2},{value:"Plugin System",id:"plugin-system",level:2},{value:"Running Multiple Agents",id:"running-multiple-agents",level:2},{value:"FAQ",id:"faq",level:2},{value:"What&#39;s the difference between an agent and a character?",id:"whats-the-difference-between-an-agent-and-a-character",level:3},{value:"How do I choose the right database adapter?",id:"how-do-i-choose-the-right-database-adapter",level:3},{value:"How do I implement custom plugins?",id:"how-do-i-implement-custom-plugins",level:3},{value:"Do agents share memory across platforms?",id:"do-agents-share-memory-across-platforms",level:3},{value:"How do I handle multiple authentication methods?",id:"how-do-i-handle-multiple-authentication-methods",level:3},{value:"How do I manage environment variables?",id:"how-do-i-manage-environment-variables",level:3},{value:"Can agents communicate with each other?",id:"can-agents-communicate-with-each-other",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-agent-runtime",children:"\ud83e\udd16 Agent Runtime"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"AgentRuntime"})," is the core runtime environment for Eliza agents. It handles message processing, state management, plugin integration, and interaction with external services. You can think of it as the brains that provide the high-level orchestration layer for Eliza agents."]}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    actor User\n    participant Platform as Platform\n    participant Runtime as Runtime\n    participant State as State\n    participant P as Providers\n    participant A as Actions\n    participant M as Models\n    participant E as Evaluators\n    participant DB as Database\n\n    User->>Platform: Message\n    Platform->>Runtime: Forward\n\n    %% Context building (condensed)\n    Runtime->>State: Get context\n    State->>P: Gather data\n    Note over P: Character, Knowledge,<br>Messages, Time, etc.\n    P--\x3e>State: Context data\n    State--\x3e>Runtime: Assembled context\n\n    %% Action flow (condensed)\n    Runtime->>A: Execute action\n    A->>M: Generate content\n    M--\x3e>A: Generated text\n    A--\x3e>Runtime: Result\n\n    %% Evaluation (condensed)\n    Runtime->>E: Analyze\n    E->>DB: Store insights\n    E--\x3e>Runtime: Evaluation\n\n    %% Delivery\n    Runtime->>Platform: Response\n    Platform->>User: Deliver\n\n    %% Background (simplified)\n    par Background\n        Runtime->>Runtime: Tasks & Events\n    end"}),"\n",(0,i.jsx)(n.p,{children:"The runtime follows this general flow:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Initial Reception"}),": The user sends a message which is received by the Platform Services"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Context Building"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The Runtime Core requests context from the State Composition system"}),"\n",(0,i.jsx)(n.li,{children:"State gathers data from various Providers (Character, Knowledge, Recent Messages, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"The complete context is returned to the Runtime"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Action Processing"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The Runtime determines applicable actions and selects the optimal one"}),"\n",(0,i.jsx)(n.li,{children:"The selected action may request content generation from Models"}),"\n",(0,i.jsx)(n.li,{children:"The action result is returned to the Runtime"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Learning & Persistence"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The conversation is analyzed by Evaluators for insights and facts"}),"\n",(0,i.jsx)(n.li,{children:"Knowledge updates are sent to the Memory System"}),"\n",(0,i.jsx)(n.li,{children:"All relevant data is persisted to the Database"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Response Delivery"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The final response is sent back to the user through Platform Services"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"/api/classes/AgentRuntime",children:"AgentRuntime"})," class is the primary implementation of the ",(0,i.jsx)(n.a,{href:"/api/interfaces/IAgentRuntime",children:"IAgentRuntime"})," interface, which manages the agent's core functions, including:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"API Reference"}),(0,i.jsx)(n.th,{children:"Related Files"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Services"})}),(0,i.jsx)(n.td,{children:"Supports multiple communication platforms and specialized functionalities for seamless interaction."}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/api/interfaces/IAgentRuntime/#services",children:"Services API"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://github.com/elizaOS/eliza/tree/develop/packages/core/src/service.ts",children:(0,i.jsx)(n.code,{children:"service.ts"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/plugin-discord",children:(0,i.jsx)(n.code,{children:"Discord"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/plugin-telegram",children:(0,i.jsx)(n.code,{children:"Telegram"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/plugin-twitter",children:(0,i.jsx)(n.code,{children:"Twitter"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/plugin-farcaster",children:(0,i.jsx)(n.code,{children:"Farcaster"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/plugin-lens",children:(0,i.jsx)(n.code,{children:"Lens"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/plugin-slack",children:(0,i.jsx)(n.code,{children:"Slack"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/plugin-auto",children:(0,i.jsx)(n.code,{children:"Auto"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/plugin-github",children:(0,i.jsx)(n.code,{children:"GitHub"})})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"State"})}),(0,i.jsx)(n.td,{children:"Maintains context for coherent cross-platform interactions, updates dynamically. Also tracks goals, knowledge, and recent interactions"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/api/interfaces/State",children:"State API"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://github.com/elizaos/runtime/state.ts",children:(0,i.jsx)(n.code,{children:"state.ts"})})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Plugins"})}),(0,i.jsx)(n.td,{children:"Dynamic extensions of agent functionalities using custom actions, evaluators, providers, and adapters"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/api/type-aliases/Plugin/",children:"Plugins API"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://github.com/elizaos/runtime/plugins.ts",children:(0,i.jsx)(n.code,{children:"plugins.ts"})}),", ",(0,i.jsx)(n.a,{href:"../actions",children:"actions"}),", ",(0,i.jsx)(n.a,{href:"../evaluators",children:"evaluators"}),", ",(0,i.jsx)(n.a,{href:"../providers",children:"providers"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Services"})}),(0,i.jsxs)(n.td,{children:["Connects with external services for ",(0,i.jsx)(n.code,{children:"IMAGE_DESCRIPTION"}),", ",(0,i.jsx)(n.code,{children:"TRANSCRIPTION"}),", ",(0,i.jsx)(n.code,{children:"TEXT_GENERATION"}),", ",(0,i.jsx)(n.code,{children:"SPEECH_GENERATION"}),", ",(0,i.jsx)(n.code,{children:"VIDEO"}),", ",(0,i.jsx)(n.code,{children:"PDF"}),", ",(0,i.jsx)(n.code,{children:"BROWSER"}),", ",(0,i.jsx)(n.code,{children:"WEB_SEARCH"}),", ",(0,i.jsx)(n.code,{children:"EMAIL_AUTOMATION"}),", and more"]}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/api/interfaces/IAgentRuntime/#services",children:"Services API"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://github.com/elizaos/runtime/services.ts",children:(0,i.jsx)(n.code,{children:"services.ts"})})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Memory Systems"})}),(0,i.jsx)(n.td,{children:"Creates, retrieves, and embeds memories and manages conversation history."}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/api/interfaces/IMemoryManager",children:"Memory API"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://github.com/elizaos/runtime/memory.ts",children:(0,i.jsx)(n.code,{children:"memory.ts"})})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Database Adapters"})}),(0,i.jsx)(n.td,{children:"Persistent storage and retrieval for memories and knowledge"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"api/interfaces/IAgentRuntime/#databaseAdapter",children:"databaseAdapter"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-mongodb",children:(0,i.jsx)(n.code,{children:"MongoDB"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-postgres",children:(0,i.jsx)(n.code,{children:"PostgreSQL"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-sqlite",children:(0,i.jsx)(n.code,{children:"SQLite"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-supabase",children:(0,i.jsx)(n.code,{children:"Supabase"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-sqlite",children:(0,i.jsx)(n.code,{children:"PGLite"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-qdrant",children:(0,i.jsx)(n.code,{children:"Qdrant"})}),", ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/adapter-sqljs",children:(0,i.jsx)(n.code,{children:"SQL.js"})})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Cache Management"})}),(0,i.jsx)(n.td,{children:"Provides flexible storage and retrieval via various caching methods."}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/api/interfaces/ICacheManager",children:"Cache API"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://github.com/elizaos/runtime/cache.ts",children:(0,i.jsx)(n.code,{children:"cache.ts"})})})]})]})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Advanced: IAgentRuntime Interface"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface IAgentRuntime {\n    // Core identification\n    agentId: UUID;\n    \n    // Configuration\n    character: Character;                          // Personality and behavior settings\n    \n    // Components\n    plugins: Plugin[];                             // Additional capabilities\n    services: Map<ServiceTypeName, Service>;       // Platform connections and functionality\n    providers: Provider[];                         // Real-time data sources\n    actions: Action[];                             // Available behaviors\n    evaluators: Evaluator[];                       // Analysis & learning\n    routes: Route[];                               // API endpoints\n    \n    // Memory Management\n    getMemories(...): Promise<Memory[]>;           // Retrieve conversation history\n    createMemory(...): Promise<UUID>;              // Store new memories\n    searchMemories(...): Promise<Memory[]>;        // Semantic search\n    \n    // State Composition\n    composeState(...): Promise<State>;             // Gather data from providers\n    \n    // Plugin Management\n    registerPlugin(...): Promise<void>;            // Register plugins\n    \n    // Service Management\n    getService<T>(...): T | null;                  // Access services\n    registerService(...): Promise<void>;           // Register services\n    \n    // Model Integration\n    useModel<T, R>(...): Promise<R>;               // Use AI models\n    \n    // Additional Utilities\n    getSetting(...): any;                          // Access settings\n    setSetting(...): void;                         // Configure settings\n    getCache<T>(...): Promise<T | undefined>;      // Access cached data\n    setCache<T>(...): Promise<boolean>;            // Store cached data\n}\n"})}),(0,i.jsxs)(n.p,{children:["Source: ",(0,i.jsx)(n.a,{href:"/api/interfaces/IAgentRuntime/",children:"/api/interfaces/IAgentRuntime/"})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"key-methods",children:(0,i.jsx)(n.strong,{children:"Key Methods"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"initialize()"})}),": Sets up the agent's runtime environment, including services, plugins, and knowledge processing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"processActions()"})}),": Executes actions based on message content and state."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"evaluate()"})}),": Assesses messages and state using registered evaluators."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"composeState()"})}),": Constructs the agent's state object for response generation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"registerService()"})}),": Adds a service to the runtime."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"getService()"})}),": Retrieves a registered service by type."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"useModel()"})}),": Utilizes AI models with typesafe parameters and results."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"ensureRoomExists()"})," / ",(0,i.jsx)(n.code,{children:"ensureConnection()"})]}),": Ensures the existence of communication channels and connections."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"service-system",children:"Service System"}),"\n",(0,i.jsx)(n.p,{children:"Services provide specialized functionality with standardized interfaces that can be accessed cross-platform:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Speech Generation\nconst speechService = runtime.getService<ISpeechService>('speech_generation');\nconst audioStream = await speechService.process(text);\n\n// PDF Processing\nconst pdfService = runtime.getService<IPdfService>('pdf');\nconst textContent = await pdfService.convertPdfToText(pdfBuffer);\n\n// Discord Integration\nconst discordService = runtime.getService<IDiscordService>('discord');\nawait discordService.sendMessage(channelId, content);\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"state-management",children:"State Management"}),"\n",(0,i.jsx)(n.p,{children:"The runtime maintains comprehensive state through the State interface:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface State {\n  // Core state data\n  values: {\n    [key: string]: any;\n  };\n  data: {\n    [key: string]: any;\n  };\n  text: string;\n}\n\n// State composition example\nasync function manageState() {\n  // Initial state composition with all regular providers\n  const state = await runtime.composeState(message);\n\n  // State with specific providers only\n  const filteredState = await runtime.composeState(message, ['timeProvider', 'recentMessages']);\n\n  // Include private or dynamic providers\n  const enhancedState = await runtime.composeState(message, null, [\n    'weatherProvider',\n    'portfolioProvider',\n  ]);\n}\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"plugin-system",children:"Plugin System"}),"\n",(0,i.jsx)(n.p,{children:"Plugins extend agent functionality through a modular interface. The runtime supports various types of plugins including services, adapters, actions, and more:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Plugin {\n  name: string;\n  description: string;\n  init?: (config: Record<string, string>, runtime: IAgentRuntime) => Promise<void>;\n\n  // Components\n  services?: (typeof Service)[]; // Communication platforms and external integrations\n  actions?: Action[]; // Custom behaviors\n  providers?: Provider[]; // Data providers\n  evaluators?: Evaluator[]; // Response assessment\n  adapters?: Adapter[]; // Database/cache adapters\n  routes?: Route[]; // API endpoints\n  tests?: TestSuite[]; // Testing utilities\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Plugins can be configured through ",(0,i.jsx)(n.a,{href:"./characterfile",children:"characterfile"})," settings:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "name": "MyAgent",\n  "plugins": ["@elizaos/plugin-solana", "@elizaos/plugin-twitter"],\n  "settings": {\n    "twitter": {\n      "shouldRespondToMentions": true\n    },\n    "solana": {\n      "enableAutoTrading": false\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["For detailed information about plugin development and usage, see the ",(0,i.jsx)(n.a,{href:"https://github.com/elizaos-plugins/registry",children:"ElizaOS Registry"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"running-multiple-agents",children:"Running Multiple Agents"}),"\n",(0,i.jsx)(n.p,{children:"To run multiple agents:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'bun start --characters="characters/agent1.json,characters/agent2.json"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Or use environment variables:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"REMOTE_CHARACTER_URLS=https://example.com/characters.json\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,i.jsx)(n.h3,{id:"whats-the-difference-between-an-agent-and-a-character",children:"What's the difference between an agent and a character?"}),"\n",(0,i.jsx)(n.p,{children:"A character defines personality and knowledge, while an agent provides the runtime environment and capabilities to bring that character to life."}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-choose-the-right-database-adapter",children:"How do I choose the right database adapter?"}),"\n",(0,i.jsx)(n.p,{children:"Choose based on your needs:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"MongoDB: For scalable, document-based storage"}),"\n",(0,i.jsx)(n.li,{children:"PostgreSQL: For relational data with complex queries"}),"\n",(0,i.jsx)(n.li,{children:"SQLite: For simple, file-based storage"}),"\n",(0,i.jsx)(n.li,{children:"Qdrant: For vector search capabilities"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-implement-custom-plugins",children:"How do I implement custom plugins?"}),"\n",(0,i.jsx)(n.p,{children:"Create a plugin that follows the plugin interface and register it with the runtime. See the plugin documentation for detailed examples."}),"\n",(0,i.jsx)(n.h3,{id:"do-agents-share-memory-across-platforms",children:"Do agents share memory across platforms?"}),"\n",(0,i.jsx)(n.p,{children:"By default, agents maintain separate memory contexts for different platforms to avoid mixing conversations. Use the memory management system and database adapters to persist and retrieve state information."}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-handle-multiple-authentication-methods",children:"How do I handle multiple authentication methods?"}),"\n",(0,i.jsx)(n.p,{children:"Use the character configuration to specify different authentication methods for different services. The runtime will handle the appropriate authentication flow."}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-manage-environment-variables",children:"How do I manage environment variables?"}),"\n",(0,i.jsx)(n.p,{children:"Use a combination of:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".env"})," files for local development"]}),"\n",(0,i.jsx)(n.li,{children:"Character-specific settings for per-agent configuration"}),"\n",(0,i.jsx)(n.li,{children:"Environment variables for production deployment"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"can-agents-communicate-with-each-other",children:"Can agents communicate with each other?"}),"\n",(0,i.jsx)(n.p,{children:"Yes, through the message system and shared memory spaces when configured appropriately."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);