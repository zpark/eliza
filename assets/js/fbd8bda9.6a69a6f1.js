"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[20855],{71184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(14041);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},79247:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"migration/plugin-migration-detailed","title":"Eliza Plugin Migration Guide: 0.x to 1.x","description":"Table of Contents","source":"@site/docs/migration/plugin-migration-detailed.md","sourceDirName":"migration","slug":"/migration/plugin-migration-detailed","permalink":"/docs/migration/plugin-migration-detailed","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/migration/plugin-migration-detailed.md","tags":[],"version":"current","lastUpdatedBy":"Shaw","lastUpdatedAt":1748763483000,"frontMatter":{}}');var s=t(31085),r=t(71184);const a={},l="Eliza Plugin Migration Guide: 0.x to 1.x",o={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"1. Introduction and Architectural Philosophy Changes",id:"1-introduction-and-architectural-philosophy-changes",level:2},{value:"2. Entity System Revolution",id:"2-entity-system-revolution",level:2},{value:"Migrating User References",id:"migrating-user-references",level:3},{value:"Entity Components",id:"entity-components",level:3},{value:"3. Client-to-Service Migration",id:"3-client-to-service-migration",level:2},{value:"Complete Client Deprecation",id:"complete-client-deprecation",level:3},{value:"Real Service Migration Example",id:"real-service-migration-example",level:3},{value:"Service Registration",id:"service-registration",level:3},{value:"4. Plugin Empowerment",id:"4-plugin-empowerment",level:2},{value:"Self-Contained Utilities",id:"self-contained-utilities",level:3},{value:"Complete Plugin Example",id:"complete-plugin-example",level:3},{value:"5. The New Task System",id:"5-the-new-task-system",level:2},{value:"Task Structure",id:"task-structure",level:3},{value:"Creating a Task Worker",id:"creating-a-task-worker",level:3},{value:"Task Usage Examples",id:"task-usage-examples",level:3},{value:"6. Core Import and Type Changes",id:"6-core-import-and-type-changes",level:2},{value:"Type System Changes",id:"type-system-changes",level:3},{value:"Interface Changes",id:"interface-changes",level:3},{value:"7. Memory System Evolution",id:"7-memory-system-evolution",level:2},{value:"7.2 Embedding Generation",id:"72-embedding-generation",level:3},{value:"Memory Metadata System",id:"memory-metadata-system",level:3},{value:"Search Operations",id:"search-operations",level:3},{value:"8. Model System Transformation",id:"8-model-system-transformation",level:2},{value:"Model Registration",id:"model-registration",level:3},{value:"Model Provider Priority",id:"model-provider-priority",level:3},{value:"9. World and Room Hierarchy",id:"9-world-and-room-hierarchy",level:2},{value:"Creating Rooms with Worlds",id:"creating-rooms-with-worlds",level:3},{value:"Entity Connections",id:"entity-connections",level:3},{value:"10. Event System Architecture",id:"10-event-system-architecture",level:2},{value:"Event Registration in Plugins",id:"event-registration-in-plugins",level:3},{value:"Emitting Events",id:"emitting-events",level:3},{value:"11. Runtime Slimming",id:"11-runtime-slimming",level:2},{value:"What Runtime Still Provides",id:"what-runtime-still-provides",level:3},{value:"12. Action System Updates",id:"12-action-system-updates",level:2},{value:"Action Handler Updates",id:"action-handler-updates",level:3},{value:"13. Provider System Maturity",id:"13-provider-system-maturity",level:2},{value:"Provider Positioning",id:"provider-positioning",level:3},{value:"14. Knowledge System as Plugin",id:"14-knowledge-system-as-plugin",level:2},{value:"RAG System Usage",id:"rag-system-usage",level:3},{value:"15. Testing and Build System",id:"15-testing-and-build-system",level:2},{value:"Test Structure",id:"test-structure",level:3},{value:"16. Migration Strategy",id:"16-migration-strategy",level:2},{value:"Step-by-Step Process",id:"step-by-step-process",level:3},{value:"Migration Checklist",id:"migration-checklist",level:3},{value:"17. Common Pitfalls and Solutions",id:"17-common-pitfalls-and-solutions",level:2},{value:"Forgetting Table Names",id:"forgetting-table-names",level:3},{value:"17.2 Still Using Client Patterns",id:"172-still-using-client-patterns",level:3},{value:"Expecting Runtime Utilities",id:"expecting-runtime-utilities",level:3},{value:"Not Registering Models",id:"not-registering-models",level:3},{value:"Manual Embedding Management",id:"manual-embedding-management",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"eliza-plugin-migration-guide-0x-to-1x",children:"Eliza Plugin Migration Guide: 0.x to 1.x"})}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#introduction-and-architectural-philosophy-changes",children:"Introduction and Architectural Philosophy Changes"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#entity-system-revolution",children:"Entity System Revolution"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#client-to-service-migration",children:"Client-to-Service Migration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#plugin-empowerment",children:"Plugin Empowerment"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#the-new-task-system",children:"The New Task System"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#core-import-and-type-changes",children:"Core Import and Type Changes"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#memory-system-evolution",children:"Memory System Evolution"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#model-system-transformation",children:"Model System Transformation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#world-and-room-hierarchy",children:"World and Room Hierarchy"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#event-system-architecture",children:"Event System Architecture"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#runtime-slimming",children:"Runtime Slimming"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#action-system-updates",children:"Action System Updates"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#provider-system-maturity",children:"Provider System Maturity"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#knowledge-system-as-plugin",children:"Knowledge System as Plugin"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#testing-and-build-system",children:"Testing and Build System"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#migration-strategy",children:"Migration Strategy"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#common-pitfalls-and-solutions",children:"Common Pitfalls and Solutions"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"1-introduction-and-architectural-philosophy-changes",children:"1. Introduction and Architectural Philosophy Changes"}),"\n",(0,s.jsx)(n.p,{children:"Before diving into technical changes, understand these critical shifts:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Version 0.x Mindset:\n// - Runtime handles model calls\n// - Users and agents are different\n// - Clients connect to platforms\n// - Runtime provides utilities\n\n// Version 1.x Mindset:\n// - Plugins handle model calls\n// - Everything is an entity\n// - Services connect to platforms\n// - Plugins are self-contained\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"2-entity-system-revolution",children:"2. Entity System Revolution"}),"\n",(0,s.jsx)(n.p,{children:"In 0.x, we had a clear distinction between users and agents. In 1.x, this distinction is gone."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old System (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From types-old.txt\nexport interface Account {\n  id: UUID;\n  name: string;\n  username: string;\n  details?: { [key: string]: any };\n  email?: string;\n  avatarUrl?: string;\n}\n\n// Usage in memory\nexport interface Memory {\n  userId: UUID; // Could be human or agent\n  agentId: UUID; // The agent in conversation\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New System (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From types-new.txt\nexport interface Entity {\n  id?: UUID;\n  names: string[]; // Multiple names/aliases\n  metadata?: { [key: string]: any };\n  agentId: UUID; // Which agent manages this entity\n  components?: Component[];\n}\n\n// Usage in memory\nexport interface Memory {\n  entityId: UUID; // ANY participant (human, agent, bot)\n  agentId?: UUID; // Optional agent association\n  // ...\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"migrating-user-references",children:"Migrating User References"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example from OpenAI Plugin:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// OLD (openai-old.txt)\nasync handler(_runtime, message, _state) {\n    const response = await callOpenAiApi(\n        "https://api.openai.com/v1/completions",\n        requestData,\n        apiKey,\n    );\n\n    // Reference to userId\n    runtime.databaseAdapter.log({\n        userId: message.userId,\n        roomId: message.roomId,\n        type: "action",\n        body: { /* ... */ }\n    });\n}\n\n// NEW (openai-new.txt)\nasync handler(runtime: IAgentRuntime, message: Memory, state?: State) {\n    const response = await runtime.useModel(ModelType.TEXT_SMALL, {\n        prompt: prompt,\n    });\n\n    // Reference to entityId\n    runtime.adapter.log({\n        entityId: message.entityId,  // Changed from userId\n        roomId: message.roomId,\n        type: "action",\n        body: { /* ... */ }\n    });\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"entity-components",children:"Entity Components"}),"\n",(0,s.jsx)(n.p,{children:"The new component system allows flexible data modeling:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Creating an entity with components\nconst entity = await runtime.createEntity({\n  names: ['John Doe', 'JohnD'],\n  agentId: runtime.agentId,\n  metadata: {\n    discord: {\n      username: 'john_doe',\n      id: '123456789',\n    },\n  },\n});\n\n// Adding a component\nawait runtime.createComponent({\n  id: generateId(),\n  entityId: entity.id,\n  agentId: runtime.agentId,\n  roomId: roomId,\n  worldId: worldId,\n  sourceEntityId: runtime.agentId,\n  type: 'preferences',\n  data: {\n    language: 'en',\n    timezone: 'UTC',\n  },\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"3-client-to-service-migration",children:"3. Client-to-Service Migration"}),"\n",(0,s.jsx)(n.h3,{id:"complete-client-deprecation",children:"Complete Client Deprecation"}),"\n",(0,s.jsx)(n.p,{children:"Every client in 0.x is now a service in 1.x. This isn't just a naming change\u2014it's a complete architectural shift."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Client Pattern (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From types-old.txt\nexport type Client = {\n  name: string;\n  config?: { [key: string]: any };\n  start: (runtime: IAgentRuntime) => Promise<ClientInstance>;\n};\n\nexport type ClientInstance = {\n  stop: (runtime: IAgentRuntime) => Promise<unknown>;\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Service Pattern (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From types-new.txt\nexport abstract class Service {\n  protected runtime!: IAgentRuntime;\n\n  abstract stop(): Promise<void>;\n  static serviceType: string;\n  abstract capabilityDescription: string;\n\n  static async start(_runtime: IAgentRuntime): Promise<Service> {\n    throw new Error('Not implemented');\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"real-service-migration-example",children:"Real Service Migration Example"}),"\n",(0,s.jsx)(n.p,{children:"Let's look at how a Discord integration would migrate:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Discord Client (0.x style):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const discordClient: Client = {\n  name: 'discord',\n  config: {\n    token: process.env.DISCORD_TOKEN,\n    intents: [\n      /* ... */\n    ],\n  },\n  start: async (runtime) => {\n    const client = new DiscordClient();\n\n    await client.login(runtime.getSetting('DISCORD_TOKEN'));\n\n    client.on('messageCreate', async (message) => {\n      // Handle message\n    });\n\n    return {\n      stop: async () => {\n        await client.destroy();\n      },\n    };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Discord Service (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class DiscordService extends Service {\n    static serviceType = 'discord';\n    capabilityDescription = 'Discord integration service for message handling';\n\n    private client: DiscordClient;\n\n    constructor(runtime: IAgentRuntime) {\n        super();\n        this.runtime = runtime;\n    }\n\n    static async start(runtime: IAgentRuntime): Promise<DiscordService> {\n        const service = new DiscordService(runtime);\n\n        service.client = new DiscordClient();\n        await service.client.login(runtime.getSetting('DISCORD_TOKEN'));\n\n        service.client.on('messageCreate', async (message) => {\n            // Emit runtime event instead of direct handling\n            await runtime.emitEvent(EventType.MESSAGE_RECEIVED, {\n                runtime,\n                message: /* converted message */,\n                source: 'discord'\n            });\n        });\n\n        return service;\n    }\n\n    async stop(): Promise<void> {\n        await this.client.destroy();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"service-registration",children:"Service Registration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Plugin (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const discordPlugin: Plugin = {\n  name: 'discord',\n  clients: [discordClient], // Array of clients\n  // ...\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Plugin (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const discordPlugin: Plugin = {\n  name: 'discord',\n  services: [DiscordService], // Array of service classes\n  // ...\n};\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"4-plugin-empowerment",children:"4. Plugin Empowerment"}),"\n",(0,s.jsx)(n.p,{children:"The most dramatic change: the runtime no longer handles model calls directly."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Model Call (0.x - openai-old.txt):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Runtime provided model utilities\nimport { generateText } from '@elizaos/core';\n\nconst response = await generateText({\n  runtime,\n  context: prompt,\n  modelClass: ModelClass.LARGE,\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Model Call (1.x - openai-new.txt):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Plugin registers model handlers\nexport const openaiPlugin: Plugin = {\n  name: 'openai',\n  models: {\n    [ModelType.TEXT_SMALL]: async (runtime: IAgentRuntime, params) => {\n      const openai = createOpenAIClient(runtime);\n      const { text } = await generateText({\n        model: openai.languageModel(getSmallModel(runtime)),\n        prompt: params.prompt,\n        temperature: params.temperature || 0.7,\n        // ...\n      });\n      return text;\n    },\n    [ModelType.TEXT_EMBEDDING]: async (runtime: IAgentRuntime, params) => {\n      // Plugin handles embedding generation\n      const response = await fetch(`${embeddingBaseURL}/embeddings`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: embeddingModelName,\n          input: params.text,\n        }),\n      });\n      // ...\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"self-contained-utilities",children:"Self-Contained Utilities"}),"\n",(0,s.jsx)(n.p,{children:"Plugins must now include their own utility functions."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Approach (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Relied on runtime utilities\nimport { parseJSON, validatePrompt, formatResponse } from "@elizaos/core";\n\nasync handler(runtime, message) {\n    const parsed = parseJSON(message.content);\n    const validated = validatePrompt(parsed.prompt);\n    const formatted = formatResponse(response);\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Approach (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Plugin includes its own utilities\nimport { parseJSONObjectFromText } from \'./utils\';\n\n// From openai-new.txt\nfunction validatePrompt(prompt: string): void {\n    if (!prompt.trim()) {\n        throw new Error("Prompt cannot be empty");\n    }\n    if (prompt.length > 4000) {\n        throw new Error("Prompt exceeds maximum length");\n    }\n}\n\nasync handler(runtime, message) {\n    // Use plugin\'s own utilities\n    const parsed = parseJSONObjectFromText(message.content.text);\n    validatePrompt(parsed.prompt);\n    // Format response ourselves\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"complete-plugin-example",children:"Complete Plugin Example"}),"\n",(0,s.jsx)(n.p,{children:"Here's how the OpenAI plugin transformed to be self-sufficient:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Changes in openai-new.txt:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// 1. Plugin provides own OpenAI client creation\nfunction createOpenAIClient(runtime: IAgentRuntime) {\n    return createOpenAI({\n        apiKey: getApiKey(runtime),\n        baseURL: getBaseURL(runtime),\n    });\n}\n\n// 2. Plugin handles all model types\nmodels: {\n    [ModelType.TEXT_SMALL]: textHandler,\n    [ModelType.TEXT_LARGE]: textHandler,\n    [ModelType.TEXT_EMBEDDING]: embeddingHandler,\n    [ModelType.IMAGE]: imageHandler,\n    [ModelType.TRANSCRIPTION]: transcriptionHandler,\n    // ... many more\n}\n\n// 3. Plugin includes error handling and retries\nasync function callOpenAiApi<T>(url: string, data: any, apiKey: string): Promise<T> {\n    try {\n        const response = await fetch(url, {\n            headers: {\n                Authorization: `Bearer ${apiKey}`,\n                "Content-Type": "application/json",\n            },\n            body: JSON.stringify(data),\n        });\n\n        if (!response.ok) {\n            // Plugin handles its own errors\n            if (response.status === 429) {\n                throw new Error("Rate limit exceeded");\n            }\n            throw new Error(`OpenAI API error: ${response.status}`);\n        }\n\n        return await response.json();\n    } catch (error) {\n        // Plugin-specific error handling\n        logger.error("OpenAI API call failed:", error);\n        throw error;\n    }\n}\n\n// 4. Plugin manages its own configuration\nfunction getApiKey(runtime: IAgentRuntime): string | undefined {\n    return runtime.getSetting("OPENAI_API_KEY");\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"5-the-new-task-system",children:"5. The New Task System"}),"\n",(0,s.jsx)(n.p,{children:"Tasks are a completely new abstraction in 1.x for handling deferred and recurring work."}),"\n",(0,s.jsx)(n.h3,{id:"task-structure",children:"Task Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From types-new.txt\nexport interface Task {\n  id?: UUID;\n  name: string;\n  updatedAt?: number;\n  metadata?: {\n    updateInterval?: number; // For recurring tasks\n    options?: {\n      // For choice tasks\n      name: string;\n      description: string;\n    }[];\n    [key: string]: unknown;\n  };\n  description: string;\n  roomId?: UUID;\n  worldId?: UUID;\n  entityId?: UUID;\n  tags: string[];\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-task-worker",children:"Creating a Task Worker"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Example: Reminder task worker\nruntime.registerTaskWorker({\n  name: 'SEND_REMINDER',\n\n  validate: async (runtime, message, state) => {\n    // Check if this task should run\n    return state.remindersEnabled && message.content.text.includes('remind');\n  },\n\n  execute: async (runtime, options, task) => {\n    const { reminder, targetEntityId } = options;\n\n    // Create a memory (message) for the reminder\n    await runtime.createMemory(\n      {\n        entityId: runtime.agentId,\n        roomId: task.roomId,\n        content: {\n          text: `Reminder for <@${targetEntityId}>: ${reminder}`,\n        },\n      },\n      'messages'\n    );\n\n    // Delete one-time task after execution\n    if (!task.metadata?.updateInterval) {\n      await runtime.deleteTask(task.id);\n    }\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"task-usage-examples",children:"Task Usage Examples"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"One-time Task:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"await runtime.createTask({\n  name: 'SEND_REMINDER',\n  description: 'Send a reminder in 24 hours',\n  roomId: message.roomId,\n  tags: ['reminder', 'one-time'],\n  metadata: {\n    scheduledFor: Date.now() + 86400000, // 24 hours\n    reminder: 'Submit your report',\n    targetEntityId: message.entityId,\n  },\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Recurring Task:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"await runtime.createTask({\n  name: 'DAILY_STATS',\n  description: 'Post daily statistics',\n  roomId: channelId,\n  worldId: worldId,\n  tags: ['stats', 'recurring'],\n  metadata: {\n    updateInterval: 86400000, // 24 hours\n    updatedAt: Date.now(),\n  },\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Choice Task:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"await runtime.createTask({\n  name: 'CONFIRM_ACTION',\n  description: 'Awaiting user confirmation',\n  roomId: message.roomId,\n  tags: ['confirmation', 'AWAITING_CHOICE'],\n  metadata: {\n    options: [\n      { name: 'approve', description: 'Approve the action' },\n      { name: 'reject', description: 'Reject the action' },\n    ],\n    actionType: 'DELETE_DATA',\n    targetData: ['file1.txt', 'file2.txt'],\n  },\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"6-core-import-and-type-changes",children:"6. Core Import and Type Changes"}),"\n",(0,s.jsx)(n.p,{children:"Here's a comprehensive mapping of import changes:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common Import Changes:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// OLD (Version 0.x)\nimport {\n  generateText,\n  elizaLogger,\n  ModelClass,\n  IAgentRuntime,\n  Memory,\n  State,\n  Action,\n} from '@elizaos/core';\n\n// NEW (Version 1.x)\nimport {\n  // generateText is GONE - use runtime.useModel\n  logger, // renamed from elizaLogger\n  ModelType, // replaces ModelClass\n  IAgentRuntime,\n  Memory,\n  State,\n  Action,\n  EventType, // new\n  ServiceType, // new\n  UUID, // new typed UUID\n} from '@elizaos/core';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"type-system-changes",children:"Type System Changes"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"UUID Type:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// OLD - just strings\nconst userId: string = 'some-id';\n\n// NEW - typed UUIDs\nimport { UUID, asUUID } from '@elizaos/core';\n\nconst entityId: UUID = asUUID('123e4567-e89b-12d3-a456-426614174000');\n// asUUID validates the format\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Model Types:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// OLD (0.x)\nexport enum ModelClass {\n  SMALL = 'small',\n  MEDIUM = 'medium',\n  LARGE = 'large',\n  EMBEDDING = 'embedding',\n  IMAGE = 'image',\n}\n\n// NEW (1.x)\nexport const ModelType = {\n  TEXT_SMALL: 'TEXT_SMALL',\n  TEXT_LARGE: 'TEXT_LARGE',\n  TEXT_EMBEDDING: 'TEXT_EMBEDDING',\n  TEXT_REASONING_SMALL: 'REASONING_SMALL',\n  TEXT_REASONING_LARGE: 'REASONING_LARGE',\n  IMAGE: 'IMAGE',\n  IMAGE_DESCRIPTION: 'IMAGE_DESCRIPTION',\n  TRANSCRIPTION: 'TRANSCRIPTION',\n  TEXT_TO_SPEECH: 'TEXT_TO_SPEECH',\n  // Many more specific types\n} as const;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Service Types:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// OLD - string literals\nconst serviceType = 'image_description';\n\n// NEW - typed enum\nimport { ServiceType } from '@elizaos/core';\nconst serviceType = ServiceType.IMAGE_DESCRIPTION;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"interface-changes",children:"Interface Changes"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Memory Interface Evolution:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// OLD (0.x)\nexport interface Memory {\n  id?: UUID;\n  userId: UUID; // Human or agent\n  agentId: UUID; // The agent\n  createdAt?: number;\n  content: Content;\n  embedding?: number[];\n  roomId: UUID;\n  unique?: boolean;\n  similarity?: number;\n}\n\n// NEW (1.x)\nexport interface Memory {\n  id?: UUID;\n  entityId: UUID; // Any participant\n  agentId?: UUID; // Optional agent association\n  createdAt?: number;\n  content: Content;\n  embedding?: number[]; // Auto-generated by runtime\n  roomId: UUID;\n  worldId?: UUID; // New world association\n  unique?: boolean;\n  similarity?: number;\n  metadata?: MemoryMetadata; // New metadata system\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"7-memory-system-evolution",children:"7. Memory System Evolution"}),"\n",(0,s.jsx)(n.p,{children:"The biggest change: you must now specify table names explicitly."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Memory Creation (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From openai-old.txt actions\nawait runtime.messageManager.createMemory(memory);\nawait runtime.documentsManager.createMemory(document);\nawait runtime.knowledgeManager.createMemory(knowledge);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Memory Creation (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From openai-new.txt\nawait runtime.createMemory(memory, 'messages');\nawait runtime.createMemory(document, 'documents');\nawait runtime.createMemory(knowledge, 'facts');\n\n// Custom tables are supported\nawait runtime.createMemory(customData, 'my_custom_table');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"72-embedding-generation",children:"7.2 Embedding Generation"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Approach (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Manual embedding management\nimport { getEmbeddingZeroVector } from '@elizaos/core';\n\nconst memory = {\n  content: { text: 'Hello world' },\n  embedding: getEmbeddingZeroVector(), // Manual zero vector\n  // ...\n};\n\n// Or generate embedding manually\nconst embedding = await runtime.getEmbeddingResponse(text);\nmemory.embedding = embedding;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Approach (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Runtime handles embeddings automatically\nconst memory = {\n  content: { text: 'Hello world' },\n  // NO embedding field needed!\n  entityId: message.entityId,\n  roomId: message.roomId,\n};\n\n// Runtime generates embedding automatically\nawait runtime.createMemory(memory, 'messages');\n\n// Or use the helper\nconst memoryWithEmbedding = await runtime.addEmbeddingToMemory(memory);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"memory-metadata-system",children:"Memory Metadata System"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Metadata Structure:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From types-new.txt\nexport interface MessageMetadata extends BaseMetadata {\n  type: MemoryType.MESSAGE;\n}\n\nexport interface DocumentMetadata extends BaseMetadata {\n  type: MemoryType.DOCUMENT;\n}\n\n// Usage\nconst messageMemory = {\n  content: { text: 'Hello' },\n  entityId: entityId,\n  roomId: roomId,\n  metadata: {\n    type: MemoryType.MESSAGE,\n    source: 'discord',\n    timestamp: Date.now(),\n    tags: ['greeting', 'intro'],\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"search-operations",children:"Search Operations"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Search (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const memories = await runtime.messageManager.searchMemoriesByEmbedding(embedding, {\n  match_threshold: 0.8,\n  count: 10,\n  roomId: roomId,\n  unique: true,\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Search (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const memories = await runtime.searchMemories({\n  tableName: 'messages', // Required table name\n  embedding: embedding,\n  match_threshold: 0.8,\n  count: 10,\n  roomId: roomId,\n  worldId: worldId, // Optional world filter\n  entityId: entityId, // Optional entity filter\n  unique: true,\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"8-model-system-transformation",children:"8. Model System Transformation"}),"\n",(0,s.jsx)(n.p,{children:"The runtime no longer directly handles model calling directly. Instead, plugins register model handlers, and models are called with the runtime.useModel() handler."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Model Usage (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From openai-old.txt\nimport { generateText } from '@elizaos/core';\n\nconst response = await generateText({\n  runtime: runtime,\n  context: prompt,\n  modelClass: ModelClass.LARGE,\n  // These were hardcoded in runtime\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Model Usage (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Runtime delegates to plugin-registered handlers\nconst response = await runtime.useModel(ModelType.TEXT_LARGE, {\n  prompt: prompt,\n  temperature: 0.7,\n  maxTokens: 1000,\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"model-registration",children:"Model Registration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"How Plugins Register Models (from openai-new.txt):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const openaiPlugin: Plugin = {\n  name: 'openai',\n  models: {\n    [ModelType.TEXT_SMALL]: async (runtime: IAgentRuntime, params) => {\n      const openai = createOpenAIClient(runtime);\n      const modelName = getSmallModel(runtime);\n\n      const { text } = await generateText({\n        model: openai.languageModel(modelName),\n        prompt: params.prompt,\n        temperature: params.temperature || 0.7,\n        maxTokens: params.maxTokens || 8192,\n        // ... other params\n      });\n\n      return text;\n    },\n\n    [ModelType.TEXT_EMBEDDING]: async (runtime: IAgentRuntime, params) => {\n      if (params === null) {\n        // Special case for initialization\n        const embeddingDimension = 1536;\n        const testVector = Array(embeddingDimension).fill(0);\n        testVector[0] = 0.1;\n        return testVector;\n      }\n\n      // Normal embedding generation\n      const text = typeof params === 'string' ? params : params.text;\n      const response = await fetch(`${baseURL}/embeddings`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: embeddingModelName,\n          input: text,\n        }),\n      });\n\n      const data = await response.json();\n      return data.data[0].embedding;\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"model-provider-priority",children:"Model Provider Priority"}),"\n",(0,s.jsx)(n.p,{children:"Multiple plugins can register handlers for the same model type:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Plugin A registers with default priority\nruntime.registerModel(\n  ModelType.TEXT_LARGE,\n  handlerA,\n  'plugin-a'\n  // priority defaults to 0\n);\n\n// Plugin B registers with higher priority\nruntime.registerModel(\n  ModelType.TEXT_LARGE,\n  handlerB,\n  'plugin-b',\n  10 // Higher priority\n);\n\n// When called, Plugin B's handler will be used\nconst response = await runtime.useModel(ModelType.TEXT_LARGE, params);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"9-world-and-room-hierarchy",children:"9. World and Room Hierarchy"}),"\n",(0,s.jsx)(n.p,{children:"Worlds are a new abstraction layer above rooms:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// From types-new.txt\nexport type World = {\n  id: UUID;\n  name?: string;\n  agentId: UUID;\n  serverId: string;\n  metadata?: {\n    ownership?: {\n      ownerId: string;\n    };\n    roles?: {\n      [entityId: UUID]: Role;\n    };\n    [key: string]: unknown;\n  };\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-rooms-with-worlds",children:"Creating Rooms with Worlds"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Room Creation (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const roomId = await runtime.createRoom();\n// Rooms were standalone\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Room Creation (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// First ensure world exists\nawait runtime.ensureWorldExists({\n  id: worldId,\n  name: 'Main Server',\n  agentId: runtime.agentId,\n  serverId: 'discord-123456',\n});\n\n// Then create room in that world\nconst roomId = await runtime.createRoom({\n  id: roomId,\n  name: 'general-chat',\n  source: 'discord',\n  type: ChannelType.GROUP,\n  channelId: 'discord-channel-id',\n  serverId: 'discord-123456',\n  worldId: worldId, // Required!\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"entity-connections",children:"Entity Connections"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Connection (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"await runtime.ensureConnection(userId, roomId, userName, userScreenName, source);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Connection (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"await runtime.ensureConnection({\n  entityId: entityId,\n  roomId: roomId,\n  worldId: worldId, // Must specify world\n  userName: userName,\n  name: displayName,\n  source: 'discord',\n  type: ChannelType.GROUP,\n  channelId: channelId,\n  serverId: serverId,\n  userId: platformUserId, // Platform-specific ID\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"10-event-system-architecture",children:"10. Event System Architecture"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Event System (from types-new.txt):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export enum EventType {\n  // World events\n  WORLD_JOINED = 'WORLD_JOINED',\n  WORLD_CONNECTED = 'WORLD_CONNECTED',\n  WORLD_LEFT = 'WORLD_LEFT',\n\n  // Message events\n  MESSAGE_RECEIVED = 'MESSAGE_RECEIVED',\n  MESSAGE_SENT = 'MESSAGE_SENT',\n\n  // Voice events\n  VOICE_MESSAGE_RECEIVED = 'VOICE_MESSAGE_RECEIVED',\n\n  // Action events\n  ACTION_STARTED = 'ACTION_STARTED',\n  ACTION_COMPLETED = 'ACTION_COMPLETED',\n\n  // Model events\n  MODEL_USED = 'MODEL_USED',\n\n  // Many more...\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"event-registration-in-plugins",children:"Event Registration in Plugins"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Event Handling (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Direct handling in client\nclient.on('messageCreate', async (message) => {\n  // Process message directly\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Event System (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const myPlugin: Plugin = {\n  name: 'my-plugin',\n  events: {\n    [EventType.MESSAGE_RECEIVED]: [\n      async (payload: MessagePayload) => {\n        const { runtime, message } = payload;\n        // Process message\n      },\n    ],\n    [EventType.WORLD_JOINED]: [\n      async (payload: WorldPayload) => {\n        const { runtime, world, rooms, entities } = payload;\n        // Handle world join\n      },\n    ],\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"emitting-events",children:"Emitting Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// In a service\nawait runtime.emitEvent(EventType.MESSAGE_RECEIVED, {\n  runtime,\n  message: convertedMessage,\n  source: 'discord',\n  callback: async (response) => {\n    // Send response back to Discord\n  },\n});\n\n// Emit multiple events\nawait runtime.emitEvent([EventType.ACTION_STARTED, EventType.MODEL_USED], eventPayload);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"11-runtime-slimming",children:"11. Runtime Slimming"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Removed Utilities:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// OLD (0.x) - These no longer exist in runtime:\nimport {\n  generateText, // \u274c Removed\n  getEmbeddingZeroVector, // \u274c Removed\n  parseJSON, // \u274c Removed\n  validateJSON, // \u274c Removed\n  formatResponse, // \u274c Removed\n  trimTokens, // \u274c Removed\n  // ... many more\n} from '@elizaos/core';\n\n// NEW (1.x) - Implement in your plugin:\n// Import your own utilities or implement them\nimport { parseJSONObjectFromText } from './utils';\n"})}),"\n",(0,s.jsx)(n.h3,{id:"what-runtime-still-provides",children:"What Runtime Still Provides"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Core orchestration\nruntime.emitEvent();\nruntime.composeState();\n\n// Memory management\nruntime.createMemory();\nruntime.searchMemories();\n\n// Service management\nruntime.getService();\nruntime.registerService();\n\n// Model delegation (not execution)\nruntime.useModel();\nruntime.registerModel();\n\n// Entity management\nruntime.createEntity();\nruntime.getEntityById();\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"12-action-system-updates",children:"12. Action System Updates"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Single Action (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const responseContent = {\n  text: \"I'll help you with that\",\n  action: 'SEND_EMAIL', // Single action\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Multi-Action (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const responseContent = {\n  text: \"I'll help you with that\",\n  actions: ['REPLY', 'SEND_EMAIL', 'LOG_ACTIVITY'], // Multiple actions\n  thought: 'User needs help with email, I should send it and log this',\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"action-handler-updates",children:"Action Handler Updates"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example from Real Action Migration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// OLD Action (0.x style)\nexport const generateImageAction: Action = {\n  name: 'GENERATE_IMAGE',\n  similes: ['CREATE_IMAGE', 'MAKE_PICTURE'],\n  description: 'Generate an image',\n\n  handler: async (runtime, message, state) => {\n    const imageService = runtime.getService('image');\n    const imageUrl = await imageService.generate(message.content.text);\n\n    return {\n      text: `Here's your image: ${imageUrl}`,\n      action: 'GENERATE_IMAGE',\n    };\n  },\n};\n\n// NEW Action (1.x)\nexport const generateImageAction: Action = {\n  name: 'GENERATE_IMAGE',\n  similes: ['CREATE_IMAGE', 'MAKE_PICTURE'],\n  description: 'Generate an image from text description',\n  suppressInitialMessage: true, // New property\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state?: State,\n    options?: any,\n    callback?: HandlerCallback\n  ) => {\n    // Send initial response\n    if (callback) {\n      await callback({\n        text: \"I'm generating that image for you...\",\n        thought: 'User wants an image, using image generation service',\n        actions: ['GENERATE_IMAGE'],\n      });\n    }\n\n    // Generate image\n    const imageUrl = await runtime.useModel(ModelType.IMAGE, {\n      prompt: message.content.text,\n    });\n\n    // Create follow-up message with image\n    await runtime.createMemory(\n      {\n        entityId: runtime.agentId,\n        roomId: message.roomId,\n        content: {\n          text: \"Here's your generated image:\",\n          attachments: [\n            {\n              type: 'image',\n              url: imageUrl,\n            },\n          ],\n        },\n      },\n      'messages'\n    );\n\n    return true;\n  },\n};\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"13-provider-system-maturity",children:"13. Provider System Maturity"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Standard provider - always included\nconst timeProvider: Provider = {\n  name: 'time',\n  description: 'Provides current time',\n  get: async (runtime, message, state) => {\n    return {\n      text: `Current time: ${new Date().toISOString()}`,\n      values: { currentTime: Date.now() },\n    };\n  },\n};\n\n// Dynamic provider - only when requested\nconst weatherProvider: Provider = {\n  name: 'weather',\n  description: 'Provides weather data',\n  dynamic: true, // Not included by default\n  get: async (runtime, message, state) => {\n    // Expensive operation only when needed\n    const weather = await fetchWeatherData();\n    return { text: formatWeather(weather), values: { weather } };\n  },\n};\n\n// Private provider - must be explicitly included\nconst secretProvider: Provider = {\n  name: 'secrets',\n  description: 'Provides sensitive data',\n  private: true, // Never auto-included\n  get: async (runtime, message, state) => {\n    return { values: { apiKeys: runtime.getSetting('API_KEYS') } };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"provider-positioning",children:"Provider Positioning"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const earlyProvider: Provider = {\n  name: 'context',\n  position: -10, // Runs early\n  get: async () => {\n    /* ... */\n  },\n};\n\nconst lateProvider: Provider = {\n  name: 'summary',\n  position: 100, // Runs after others\n  get: async (runtime, message, state) => {\n    // Can use data from earlier providers\n    const contextData = state.values.context;\n    return { text: summarize(contextData) };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"14-knowledge-system-as-plugin",children:"14. Knowledge System as Plugin"}),"\n",(0,s.jsx)(n.p,{children:"Knowledge is no longer in core, but in a separate package (@elizaos/plugin-knowledge)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old Knowledge (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Was part of character definition\nconst character = {\n  name: 'Assistant',\n  knowledge: ['I am a helpful assistant', { path: 'knowledge/faq.md' }],\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New Knowledge (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Now requires the knowledge plugin\nimport { knowledgePlugin } from '@elizaos/plugin-knowledge';\n\n// In character\nconst character = {\n  name: 'Assistant',\n  // knowledge field still works but requires plugin\n  knowledge: ['facts', { path: 'docs/guide.md' }],\n  plugins: [knowledgePlugin], // Must include plugin!\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rag-system-usage",children:"RAG System Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Knowledge must be added through runtime\nawait runtime.addKnowledge({\n  id: createUniqueUuid(runtime, 'doc-1'),\n  content: { text: documentContent },\n  metadata: {\n    type: MemoryType.DOCUMENT,\n    source: 'manual-upload',\n  },\n});\n\n// Retrieval through memory search\nconst relevantKnowledge = await runtime.searchMemories({\n  tableName: 'knowledge',\n  embedding: queryEmbedding,\n  match_threshold: 0.8,\n  count: 5,\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"15-testing-and-build-system",children:"15. Testing and Build System"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Old package.json (0.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "test": "jest",\n    "lint": "biome check .",\n    "format": "biome format --write ."\n  },\n  "devDependencies": {\n    "@biomejs/biome": "^1.0.0",\n    "jest": "^29.0.0"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"New package.json (1.x):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "test": "vitest",\n    "test:plugins": "elizaos test",\n    "lint": "eslint .",\n    "format": "prettier --write .",\n    "typecheck": "tsc --noEmit",\n    "build": "tsc"\n  },\n  "devDependencies": {\n    "vitest": "latest",\n    "prettier": "latest",\n    "eslint": "latest",\n    "typescript": "latest",\n    "@elizaos/core": "^1.0.0"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"test-structure",children:"Test Structure"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Test Migration:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// OLD Jest test\ndescribe('OpenAI Plugin', () => {\n  it('should generate text', async () => {\n    const response = await generateText({\n      runtime: mockRuntime,\n      context: 'Hello',\n      modelClass: ModelClass.SMALL,\n    });\n    expect(response).toBeDefined();\n  });\n});\n\n// NEW Vitest test\nimport { describe, it, expect, vi } from 'vitest';\n\ndescribe('OpenAI Plugin', () => {\n  it('should handle text generation through model system', async () => {\n    const mockRuntime = {\n      getSetting: vi.fn((key) => {\n        if (key === 'OPENAI_API_KEY') return 'test-key';\n        return null;\n      }),\n      useModel: vi.fn(),\n    };\n\n    // Test the model handler directly\n    const handler = openaiPlugin.models[ModelType.TEXT_SMALL];\n    const response = await handler(mockRuntime, {\n      prompt: 'Hello',\n      temperature: 0.7,\n    });\n\n    expect(response).toBeDefined();\n    expect(typeof response).toBe('string');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"16-migration-strategy",children:"16. Migration Strategy"}),"\n",(0,s.jsx)(n.h3,{id:"step-by-step-process",children:"Step-by-Step Process"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Update Dependencies"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm uninstall @elizaos/core@0.x\nnpm install @elizaos/core@1.x\nnpm install -D vitest prettier eslint\nnpm uninstall @biomejs/biome jest\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Update Imports"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Search and replace all import paths"}),"\n",(0,s.jsx)(n.li,{children:"Remove imports for removed utilities"}),"\n",(0,s.jsx)(n.li,{children:"Add new required imports"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Convert Types"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Account \u2192 Entity"}),"\n",(0,s.jsx)(n.li,{children:"userId \u2192 entityId"}),"\n",(0,s.jsx)(n.li,{children:"ModelClass \u2192 ModelType"}),"\n",(0,s.jsx)(n.li,{children:"Add UUID types"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Migrate Clients to Services"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Extend Service class"}),"\n",(0,s.jsx)(n.li,{children:"Add lifecycle methods"}),"\n",(0,s.jsx)(n.li,{children:"Update registration"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Update Model Usage"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Replace generateText with runtime.useModel"}),"\n",(0,s.jsx)(n.li,{children:"Register model handlers"}),"\n",(0,s.jsx)(n.li,{children:"Remove runtime model utilities"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Fix Memory Operations"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add table names to all operations"}),"\n",(0,s.jsx)(n.li,{children:"Remove manual embedding handling"}),"\n",(0,s.jsx)(n.li,{children:"Update search parameters"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implement Self-Contained Utilities"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Copy needed utilities into plugin"}),"\n",(0,s.jsx)(n.li,{children:"Remove runtime utility dependencies"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Add Event Handlers"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Convert direct handling to events"}),"\n",(0,s.jsx)(n.li,{children:"Register event handlers in plugin"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Update Tests"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Convert to Vitest"}),"\n",(0,s.jsx)(n.li,{children:"Update mocks for new architecture"}),"\n",(0,s.jsx)(n.li,{children:"Add plugin integration tests"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Test Everything"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Run unit tests"}),"\n",(0,s.jsx)(n.li,{children:"Run plugin tests"}),"\n",(0,s.jsx)(n.li,{children:"Test in real runtime"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"migration-checklist",children:"Migration Checklist"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All imports updated"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","No references to removed utilities"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All userId \u2192 entityId"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All Account \u2192 Entity"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Clients converted to Services"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Service lifecycle implemented"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Model handlers registered"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Memory operations use table names"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","No manual embedding generation"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Events properly registered"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tests migrated to Vitest"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Plugin includes own utilities"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Build system updated"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All tests passing"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"17-common-pitfalls-and-solutions",children:"17. Common Pitfalls and Solutions"}),"\n",(0,s.jsx)(n.h3,{id:"forgetting-table-names",children:"Forgetting Table Names"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Problem:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// This will fail\nawait runtime.createMemory(memory);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Always specify table name\nawait runtime.createMemory(memory, 'messages');\n"})}),"\n",(0,s.jsx)(n.h3,{id:"172-still-using-client-patterns",children:"17.2 Still Using Client Patterns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Problem:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Old client pattern\nconst client = {\n  start: async (runtime) => {\n    /* ... */\n  },\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Use service pattern\nclass MyService extends Service {\n  static serviceType = 'my-service';\n  static async start(runtime) {\n    /* ... */\n  }\n  async stop() {\n    /* ... */\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"expecting-runtime-utilities",children:"Expecting Runtime Utilities"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Problem:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// These don't exist anymore\nimport { parseJSON, generateText } from '@elizaos/core';\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Include your own utilities\nimport { parseJSON } from './utils';\n// Use model system\nconst text = await runtime.useModel(ModelType.TEXT_LARGE, params);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"not-registering-models",children:"Not Registering Models"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Problem:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Plugin without model registration\nexport const myPlugin: Plugin = {\n  name: 'my-plugin',\n  // No models property\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const myPlugin: Plugin = {\n  name: 'my-plugin',\n  models: {\n    [ModelType.TEXT_LARGE]: myTextHandler,\n    [ModelType.TEXT_EMBEDDING]: myEmbeddingHandler,\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"manual-embedding-management",children:"Manual Embedding Management"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Problem:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Old pattern\nmemory.embedding = getEmbeddingZeroVector();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Let runtime handle it\n// Just don't include embedding field\nawait runtime.createMemory(memory, 'messages');\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"The migration from 0.x to 1.x represents a fundamental shift in how Eliza plugins work. The key principles to remember:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Everything is an entity"})," - no more user/agent distinction"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Plugins are self-sufficient"})," - include your own utilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Services replaced clients"})," - use proper lifecycle management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runtime does less"})," - plugins handle models and utilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explicit is better"})," - table names, world associations, etc."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Take your time with the migration. Test thoroughly at each step. The new architecture provides much more flexibility and power, but requires understanding these fundamental changes."}),"\n",(0,s.jsx)(n.p,{children:"For additional help, refer to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The example plugins in the Eliza repository"}),"\n",(0,s.jsx)(n.li,{children:"The plugin registry for real-world examples"}),"\n",(0,s.jsx)(n.li,{children:"The Eliza Discord community for support"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Good luck with your migration!"})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);