"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[9608],{68038:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"technical/api-reference/actions-api","title":"Actions API Reference","description":"Actions define what your ElizaOS agent can do - from posting tweets to responding to messages. This comprehensive guide covers the Actions API implementation, patterns, and best practices.","source":"@site/docs/technical/api-reference/actions-api.md","sourceDirName":"technical/api-reference","slug":"/technical/api-reference/actions-api","permalink":"/docs/technical/api-reference/actions-api","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/technical/api-reference/actions-api.md","tags":[],"version":"current","lastUpdatedBy":"Sayo","lastUpdatedAt":1751802400000,"frontMatter":{},"sidebar":"technicalSidebar","previous":{"title":"\ud83d\udd0c Plugin System","permalink":"/docs/technical/architecture/plugin-system"},"next":{"title":"\ud83c\udfaf Core API","permalink":"/docs/technical/api-reference/core-api"}}');var s=t(31085),a=t(71184);const c={},r="Actions API Reference",o={},l=[{value:"Core Action Interface",id:"core-action-interface",level:2},{value:"Action Properties",id:"action-properties",level:3},{value:"Action Lifecycle",id:"action-lifecycle",level:2},{value:"Creating Custom Actions",id:"creating-custom-actions",level:2},{value:"Basic Action Template",id:"basic-action-template",level:3},{value:"Advanced Action Patterns",id:"advanced-action-patterns",level:3},{value:"State-Aware Actions",id:"state-aware-actions",level:4},{value:"Context-Aware Actions",id:"context-aware-actions",level:4},{value:"Service Integration Actions",id:"service-integration-actions",level:4},{value:"Built-in Actions",id:"built-in-actions",level:2},{value:"Core Communication Actions",id:"core-communication-actions",level:3},{value:"CONTINUE Action",id:"continue-action",level:4},{value:"ELABORATE Action",id:"elaborate-action",level:4},{value:"ANSWER Action",id:"answer-action",level:4},{value:"ASK_FOLLOWUP Action",id:"ask_followup-action",level:4},{value:"Platform-Specific Actions",id:"platform-specific-actions",level:3},{value:"Twitter Actions",id:"twitter-actions",level:4},{value:"Discord Actions",id:"discord-actions",level:4},{value:"Telegram Actions",id:"telegram-actions",level:4},{value:"Utility Actions",id:"utility-actions",level:3},{value:"SEARCH Action",id:"search-action",level:4},{value:"SUMMARIZE Action",id:"summarize-action",level:4},{value:"TRANSLATE Action",id:"translate-action",level:4},{value:"Action Registration",id:"action-registration",level:2},{value:"In Plugins",id:"in-plugins",level:3},{value:"In Character Files",id:"in-character-files",level:3},{value:"Action Validation Patterns",id:"action-validation-patterns",level:2},{value:"Message Content Validation",id:"message-content-validation",level:3},{value:"Context-Based Validation",id:"context-based-validation",level:3},{value:"Time-Based Validation",id:"time-based-validation",level:3},{value:"Error Handling and Debugging",id:"error-handling-and-debugging",level:2},{value:"Error Handling Best Practices",id:"error-handling-best-practices",level:3},{value:"Debug Logging",id:"debug-logging",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Async Operations",id:"async-operations",level:3},{value:"Caching",id:"caching",level:3},{value:"Testing Actions",id:"testing-actions",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Action Chaining",id:"action-chaining",level:3},{value:"Conditional Actions",id:"conditional-actions",level:3},{value:"Action Middleware",id:"action-middleware",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Action Design",id:"action-design",level:3},{value:"Performance",id:"performance",level:3},{value:"Testing",id:"testing",level:3},{value:"Documentation",id:"documentation",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"actions-api-reference",children:"Actions API Reference"})}),"\n",(0,s.jsx)(n.p,{children:"Actions define what your ElizaOS agent can do - from posting tweets to responding to messages. This comprehensive guide covers the Actions API implementation, patterns, and best practices."}),"\n",(0,s.jsx)(n.h2,{id:"core-action-interface",children:"Core Action Interface"}),"\n",(0,s.jsxs)(n.p,{children:["Every action in ElizaOS implements the ",(0,s.jsx)(n.code,{children:"Action"})," interface:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Action {\n  name: string;\n  similes: string[];\n  description: string;\n  validate: (runtime: IAgentRuntime, message: Memory) => Promise<boolean>;\n  handler: (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    options: { [key: string]: unknown },\n    callback?: HandlerCallback\n  ) => Promise<boolean>;\n  examples: ActionExample[][];\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"action-properties",children:"Action Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"name"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"Unique identifier for the action"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"similes"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string[]"})}),(0,s.jsx)(n.td,{children:"Alternative names/triggers for the action"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"description"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"Human-readable description of what the action does"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"validate"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"function"})}),(0,s.jsx)(n.td,{children:"Determines if the action should be triggered"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"handler"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"function"})}),(0,s.jsx)(n.td,{children:"Executes the action's functionality"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"examples"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ActionExample[][]"})}),(0,s.jsx)(n.td,{children:"Training examples for AI decision-making"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"action-lifecycle",children:"Action Lifecycle"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TB\n    A[Message Received] --\x3e B[Action Validation]\n    B --\x3e C{Should Execute?}\n    C --\x3e|Yes| D[Execute Handler]\n    C --\x3e|No| E[Skip Action]\n    D --\x3e F{Success?}\n    F --\x3e|Yes| G[Action Complete]\n    F --\x3e|No| H[Error Handling]\n    H --\x3e I[Log Error]\n    I --\x3e J[Continue Processing]"}),"\n",(0,s.jsx)(n.h2,{id:"creating-custom-actions",children:"Creating Custom Actions"}),"\n",(0,s.jsx)(n.h3,{id:"basic-action-template",children:"Basic Action Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Action, IAgentRuntime, Memory, State, HandlerCallback } from '@elizaos/core';\n\nexport const myCustomAction: Action = {\n  name: 'MY_CUSTOM_ACTION',\n  similes: ['custom', 'my_action', 'do_something'],\n  description: 'Performs a custom operation when triggered',\n\n  validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n    // Validation logic - return true if action should execute\n    const messageText = message.content.text.toLowerCase();\n\n    // Check if message contains trigger words\n    const triggerWords = ['help', 'assist', 'custom'];\n    return triggerWords.some((word) => messageText.includes(word));\n  },\n\n  handler: async (\n    runtime: IAgentRuntime,\n    message: Memory,\n    state: State,\n    options: { [key: string]: unknown },\n    callback?: HandlerCallback\n  ): Promise<boolean> => {\n    try {\n      // Your action logic here\n      const response = await performCustomOperation(runtime, message, state);\n\n      // Send response if callback provided\n      if (callback) {\n        await callback({\n          text: response,\n          action: 'MY_CUSTOM_ACTION',\n        });\n      }\n\n      return true; // Action executed successfully\n    } catch (error) {\n      console.error('Custom action failed:', error);\n      return false; // Action failed\n    }\n  },\n\n  examples: [\n    [\n      {\n        user: '{{user1}}',\n        content: { text: 'Can you help me with something custom?' },\n      },\n      {\n        user: '{{user2}}',\n        content: { text: \"I'll help you with that custom request!\" },\n        action: 'MY_CUSTOM_ACTION',\n      },\n    ],\n  ],\n};\n\nasync function performCustomOperation(\n  runtime: IAgentRuntime,\n  message: Memory,\n  state: State\n): Promise<string> {\n  // Implement your custom logic\n  return 'Custom operation completed successfully!';\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-action-patterns",children:"Advanced Action Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"state-aware-actions",children:"State-Aware Actions"}),"\n",(0,s.jsx)(n.p,{children:"Actions can maintain and modify agent state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const statefulAction: Action = {\n  name: 'STATEFUL_ACTION',\n  // ... other properties\n\n  handler: async (runtime, message, state, options, callback) => {\n    // Read from state\n    const currentCount = state.data.actionCount || 0;\n\n    // Modify state\n    state.data.actionCount = currentCount + 1;\n    state.data.lastActionTime = Date.now();\n\n    // Use state in logic\n    const response = `This action has been called ${currentCount + 1} times`;\n\n    if (callback) {\n      await callback({ text: response });\n    }\n\n    return true;\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"context-aware-actions",children:"Context-Aware Actions"}),"\n",(0,s.jsx)(n.p,{children:"Actions can access conversation context and user history:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const contextAwareAction: Action = {\n  name: 'CONTEXT_AWARE_ACTION',\n  // ... other properties\n\n  handler: async (runtime, message, state, options, callback) => {\n    // Get conversation history\n    const recentMessages = await runtime.messageManager.getMemories({\n      roomId: message.roomId,\n      count: 10,\n      unique: false,\n    });\n\n    // Analyze context\n    const context = analyzeConversationContext(recentMessages);\n\n    // Get user profile\n    const userProfile = await runtime.databaseAdapter.getParticipantUserState(\n      message.roomId,\n      message.entityId\n    );\n\n    // Generate contextual response\n    const response = generateContextualResponse(context, userProfile, message);\n\n    if (callback) {\n      await callback({ text: response });\n    }\n\n    return true;\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"service-integration-actions",children:"Service Integration Actions"}),"\n",(0,s.jsx)(n.p,{children:"Actions can interact with external services:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const serviceAction: Action = {\n  name: 'SERVICE_ACTION',\n  // ... other properties\n\n  handler: async (runtime, message, state, options, callback) => {\n    // Get service instance\n    const twitterService = runtime.getService('twitter');\n    const webSearchService = runtime.getService('webSearch');\n\n    // Use services\n    if (twitterService) {\n      const tweets = await twitterService.getTimeline();\n      // Process tweets...\n    }\n\n    if (webSearchService) {\n      const searchResults = await webSearchService.search(message.content.text);\n      // Process search results...\n    }\n\n    return true;\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"built-in-actions",children:"Built-in Actions"}),"\n",(0,s.jsx)(n.h3,{id:"core-communication-actions",children:"Core Communication Actions"}),"\n",(0,s.jsx)(n.h4,{id:"continue-action",children:"CONTINUE Action"}),"\n",(0,s.jsx)(n.p,{children:"Continues conversations naturally when no other action is triggered."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Usage in character file\n{\n  "actions": ["CONTINUE"]\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"elaborate-action",children:"ELABORATE Action"}),"\n",(0,s.jsx)(n.p,{children:"Provides detailed explanations when users ask for more information."}),"\n",(0,s.jsx)(n.h4,{id:"answer-action",children:"ANSWER Action"}),"\n",(0,s.jsx)(n.p,{children:"Provides direct answers to questions."}),"\n",(0,s.jsx)(n.h4,{id:"ask_followup-action",children:"ASK_FOLLOWUP Action"}),"\n",(0,s.jsx)(n.p,{children:"Asks follow-up questions to keep conversations engaging."}),"\n",(0,s.jsx)(n.h3,{id:"platform-specific-actions",children:"Platform-Specific Actions"}),"\n",(0,s.jsx)(n.h4,{id:"twitter-actions",children:"Twitter Actions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TWEET"}),": Post new tweets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"REPLY"}),": Reply to mentions and conversations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"QUOTE_TWEET"}),": Quote tweet with commentary"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RETWEET"}),": Retweet content"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"discord-actions",children:"Discord Actions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SEND_MESSAGE"}),": Send messages to Discord channels"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"REACT"}),": Add reactions to messages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CREATE_THREAD"}),": Create discussion threads"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"telegram-actions",children:"Telegram Actions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SEND_TELEGRAM_MESSAGE"}),": Send messages via Telegram"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SEND_PHOTO"}),": Send images"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SEND_DOCUMENT"}),": Send files"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"utility-actions",children:"Utility Actions"}),"\n",(0,s.jsx)(n.h4,{id:"search-action",children:"SEARCH Action"}),"\n",(0,s.jsx)(n.p,{children:"Performs web searches and returns relevant information."}),"\n",(0,s.jsx)(n.h4,{id:"summarize-action",children:"SUMMARIZE Action"}),"\n",(0,s.jsx)(n.p,{children:"Creates summaries of long content or conversations."}),"\n",(0,s.jsx)(n.h4,{id:"translate-action",children:"TRANSLATE Action"}),"\n",(0,s.jsx)(n.p,{children:"Translates text between languages."}),"\n",(0,s.jsx)(n.h2,{id:"action-registration",children:"Action Registration"}),"\n",(0,s.jsx)(n.h3,{id:"in-plugins",children:"In Plugins"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Plugin } from '@elizaos/core';\nimport { myCustomAction } from './actions/myCustomAction';\n\nexport const myPlugin: Plugin = {\n  name: 'my-plugin',\n  description: 'Plugin with custom actions',\n  actions: [myCustomAction], // Register actions here\n  providers: [],\n  evaluators: [],\n  services: [],\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"in-character-files",children:"In Character Files"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "name": "MyAgent",\n  "actions": ["CONTINUE", "MY_CUSTOM_ACTION", "TWEET", "REPLY"]\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"action-validation-patterns",children:"Action Validation Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"message-content-validation",children:"Message Content Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"validate: async (runtime, message) => {\n  const text = message.content.text.toLowerCase();\n\n  // Check for specific keywords\n  if (text.includes('help') || text.includes('assist')) {\n    return true;\n  }\n\n  // Check message length\n  if (text.length > 100) {\n    return false; // Skip for long messages\n  }\n\n  // Check user permissions\n  const userRole = await getUserRole(runtime, message.entityId);\n  if (userRole !== 'admin') {\n    return false;\n  }\n\n  return true;\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"context-based-validation",children:"Context-Based Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"validate: async (runtime, message) => {\n  // Check conversation context\n  const recentMessages = await runtime.messageManager.getMemories({\n    roomId: message.roomId,\n    count: 5,\n  });\n\n  // Only trigger if no recent actions of this type\n  const recentActions = recentMessages.filter((m) => m.content.action === 'MY_CUSTOM_ACTION');\n\n  return recentActions.length === 0;\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"time-based-validation",children:"Time-Based Validation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"validate: async (runtime, message) => {\n  const lastActionTime = runtime.getSetting('lastCustomActionTime');\n  const now = Date.now();\n  const cooldownPeriod = 5 * 60 * 1000; // 5 minutes\n\n  // Only allow action if cooldown period has passed\n  return !lastActionTime || now - lastActionTime > cooldownPeriod;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling-and-debugging",children:"Error Handling and Debugging"}),"\n",(0,s.jsx)(n.h3,{id:"error-handling-best-practices",children:"Error Handling Best Practices"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"handler: async (runtime, message, state, options, callback) => {\n  try {\n    // Main action logic\n    const result = await performAction();\n\n    if (callback) {\n      await callback({ text: result });\n    }\n\n    return true;\n  } catch (error) {\n    // Log error with context\n    runtime.logger.error('Action failed', {\n      action: 'MY_CUSTOM_ACTION',\n      messageId: message.id,\n      entityId: message.entityId,\n      error: error.message,\n      stack: error.stack,\n    });\n\n    // Graceful failure - don't break the agent\n    if (callback) {\n      await callback({\n        text: 'I encountered an error while processing your request. Please try again later.',\n      });\n    }\n\n    return false;\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"debug-logging",children:"Debug Logging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"handler: async (runtime, message, state, options, callback) => {\n  // Debug logging\n  runtime.logger.debug('Action starting', {\n    action: 'MY_CUSTOM_ACTION',\n    messageText: message.content.text,\n    entityId: message.entityId,\n    roomId: message.roomId,\n  });\n\n  const startTime = Date.now();\n\n  try {\n    const result = await performAction();\n\n    runtime.logger.debug('Action completed', {\n      action: 'MY_CUSTOM_ACTION',\n      duration: Date.now() - startTime,\n      success: true,\n    });\n\n    return true;\n  } catch (error) {\n    runtime.logger.debug('Action failed', {\n      action: 'MY_CUSTOM_ACTION',\n      duration: Date.now() - startTime,\n      error: error.message,\n    });\n\n    return false;\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"async-operations",children:"Async Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"handler: async (runtime, message, state, options, callback) => {\n  // Perform multiple operations concurrently\n  const [userData, externalData, contextData] = await Promise.all([\n    getUserData(message.entityId),\n    fetchExternalData(message.content.text),\n    getContextData(message.roomId),\n  ]);\n\n  // Process combined data\n  const response = processData(userData, externalData, contextData);\n\n  if (callback) {\n    await callback({ text: response });\n  }\n\n  return true;\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"caching",children:"Caching"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Cache expensive operations\nconst cache = new Map();\n\nhandler: async (runtime, message, state, options, callback) => {\n  const cacheKey = `action_${message.content.text}`;\n\n  // Check cache first\n  let result = cache.get(cacheKey);\n\n  if (!result) {\n    // Perform expensive operation\n    result = await expensiveOperation(message.content.text);\n\n    // Cache result with TTL\n    cache.set(cacheKey, result);\n    setTimeout(() => cache.delete(cacheKey), 5 * 60 * 1000); // 5 minutes\n  }\n\n  if (callback) {\n    await callback({ text: result });\n  }\n\n  return true;\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-actions",children:"Testing Actions"}),"\n",(0,s.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect, beforeEach } from 'bun:test';\nimport { myCustomAction } from '../actions/myCustomAction';\nimport { createMockRuntime, createMockMessage } from '../test/mocks';\n\ndescribe('MyCustomAction', () => {\n  let runtime;\n  let message;\n\n  beforeEach(() => {\n    runtime = createMockRuntime();\n    message = createMockMessage({ text: 'help me please' });\n  });\n\n  it('should validate correctly for help messages', async () => {\n    const isValid = await myCustomAction.validate(runtime, message);\n    expect(isValid).toBe(true);\n  });\n\n  it('should not validate for irrelevant messages', async () => {\n    message.content.text = 'random text';\n    const isValid = await myCustomAction.validate(runtime, message);\n    expect(isValid).toBe(false);\n  });\n\n  it('should execute handler successfully', async () => {\n    const callback = jest.fn();\n    const result = await myCustomAction.handler(\n      runtime,\n      message,\n      { values: {}, data: {}, text: '' },\n      {},\n      callback\n    );\n\n    expect(result).toBe(true);\n    expect(callback).toHaveBeenCalledWith({\n      text: expect.stringContaining('Custom operation completed'),\n    });\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"describe('Action Integration', () => {\n  it('should work with real agent runtime', async () => {\n    const agent = await createTestAgent({\n      actions: [myCustomAction],\n    });\n\n    const response = await agent.processMessage({\n      text: 'help me with something custom',\n      entityId: 'test-user',\n      roomId: 'test-room',\n    });\n\n    expect(response).toBeDefined();\n    expect(response.text).toContain('Custom operation completed');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,s.jsx)(n.h3,{id:"action-chaining",children:"Action Chaining"}),"\n",(0,s.jsx)(n.p,{children:"Actions can trigger other actions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"handler: async (runtime, message, state, options, callback) => {\n  // Perform primary action\n  const primaryResult = await performPrimaryAction();\n\n  // Trigger secondary action based on result\n  if (primaryResult.shouldTriggerSecondary) {\n    const secondaryAction = runtime.getAction('SECONDARY_ACTION');\n    if (secondaryAction) {\n      await secondaryAction.handler(runtime, message, state, options);\n    }\n  }\n\n  return true;\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"conditional-actions",children:"Conditional Actions"}),"\n",(0,s.jsx)(n.p,{children:"Actions that behave differently based on context:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"handler: async (runtime, message, state, options, callback) => {\n  const context = await analyzeContext(runtime, message);\n\n  let response;\n  switch (context.type) {\n    case 'greeting':\n      response = await handleGreeting(context);\n      break;\n    case 'question':\n      response = await handleQuestion(context);\n      break;\n    case 'request':\n      response = await handleRequest(context);\n      break;\n    default:\n      response = await handleDefault(context);\n  }\n\n  if (callback) {\n    await callback({ text: response });\n  }\n\n  return true;\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"action-middleware",children:"Action Middleware"}),"\n",(0,s.jsx)(n.p,{children:"Implement middleware patterns for cross-cutting concerns:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const withLogging = (action: Action): Action => ({\n  ...action,\n  handler: async (runtime, message, state, options, callback) => {\n    console.log(`Executing action: ${action.name}`);\n    const result = await action.handler(runtime, message, state, options, callback);\n    console.log(`Action ${action.name} completed: ${result}`);\n    return result;\n  },\n});\n\nconst withRateLimiting = (action: Action, limit: number): Action => ({\n  ...action,\n  validate: async (runtime, message) => {\n    const isValid = await action.validate(runtime, message);\n    if (!isValid) return false;\n\n    // Check rate limit\n    const key = `ratelimit_${action.name}_${message.entityId}`;\n    const count = (await runtime.cache.get(key)) || 0;\n    if (count >= limit) return false;\n\n    await runtime.cache.set(key, count + 1, { ttl: 60000 }); // 1 minute TTL\n    return true;\n  },\n});\n\n// Usage\nexport const enhancedAction = withLogging(withRateLimiting(myCustomAction, 5));\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"action-design",children:"Action Design"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep actions focused on a single responsibility"}),"\n",(0,s.jsx)(n.li,{children:"Use clear, descriptive names"}),"\n",(0,s.jsx)(n.li,{children:"Provide comprehensive validation"}),"\n",(0,s.jsx)(n.li,{children:"Handle errors gracefully"}),"\n",(0,s.jsx)(n.li,{children:"Include detailed examples for AI training"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cache expensive computations"}),"\n",(0,s.jsx)(n.li,{children:"Use async/await for I/O operations"}),"\n",(0,s.jsx)(n.li,{children:"Implement timeouts for external calls"}),"\n",(0,s.jsx)(n.li,{children:"Consider rate limiting for resource-intensive actions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Test both validation and handler logic"}),"\n",(0,s.jsx)(n.li,{children:"Mock external dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Test error conditions"}),"\n",(0,s.jsx)(n.li,{children:"Verify state changes"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Document action purpose and behavior"}),"\n",(0,s.jsx)(n.li,{children:"Provide usage examples"}),"\n",(0,s.jsx)(n.li,{children:"Document configuration options"}),"\n",(0,s.jsx)(n.li,{children:"Include troubleshooting guides"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive guide covers all aspects of the Actions API in ElizaOS. Actions are the foundation of agent behavior, so understanding how to create, validate, and optimize them is crucial for building effective AI agents."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var i=t(14041);const s={},a=i.createContext(s);function c(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);