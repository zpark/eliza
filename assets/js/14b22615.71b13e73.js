"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[29490],{71184:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(14041);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}},80139:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"technical/api-reference/core-api","title":"Core API Reference","description":"Complete API reference for ElizaOS core components","source":"@site/docs/technical/api-reference/core-api.md","sourceDirName":"technical/api-reference","slug":"/technical/api-reference/core-api","permalink":"/docs/technical/api-reference/core-api","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/technical/api-reference/core-api.md","tags":[],"version":"current","lastUpdatedBy":"Sayo","lastUpdatedAt":1751802400000,"frontMatter":{"title":"Core API Reference","description":"Complete API reference for ElizaOS core components"},"sidebar":"technicalSidebar","previous":{"title":"\u26a1 Actions API","permalink":"/docs/technical/api-reference/actions-api"},"next":{"title":"\ud83d\ude80 Creating Plugins","permalink":"/docs/technical/development/creating-plugins"}}');var i=t(31085),a=t(71184);const s={title:"Core API Reference",description:"Complete API reference for ElizaOS core components"},o="Core API Reference",c={},l=[{value:"IAgentRuntime",id:"iagentruntime",level:2},{value:"Core Types",id:"core-types",level:2},{value:"Character",id:"character",level:3},{value:"Memory",id:"memory",level:3},{value:"State",id:"state",level:3},{value:"Actions",id:"actions",level:2},{value:"Action Interface",id:"action-interface",level:3},{value:"Built-in Actions",id:"built-in-actions",level:3},{value:"Providers",id:"providers",level:2},{value:"Provider Interface",id:"provider-interface",level:3},{value:"Built-in Providers",id:"built-in-providers",level:3},{value:"Evaluators",id:"evaluators",level:2},{value:"Evaluator Interface",id:"evaluator-interface",level:3},{value:"Built-in Evaluators",id:"built-in-evaluators",level:3},{value:"Services",id:"services",level:2},{value:"Service Interface",id:"service-interface",level:3},{value:"Built-in Services",id:"built-in-services",level:3},{value:"Memory Management",id:"memory-management",level:2},{value:"IMemoryManager Interface",id:"imemorymanager-interface",level:3},{value:"Database Adapter",id:"database-adapter",level:2},{value:"IDatabaseAdapter Interface",id:"idatabaseadapter-interface",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"Completion",id:"completion",level:3},{value:"Embedding",id:"embedding",level:3},{value:"Logging",id:"logging",level:3},{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:2},{value:"Plugin Lifecycle",id:"plugin-lifecycle",level:3},{value:"Message Processing Pipeline",id:"message-processing-pipeline",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Character Configuration",id:"character-configuration",level:3},{value:"Runtime Settings",id:"runtime-settings",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Error Types",id:"error-types",level:3},{value:"Error Handling Patterns",id:"error-handling-patterns",level:3},{value:"Type Utilities",id:"type-utilities",level:2},{value:"Helper Types",id:"helper-types",level:3},{value:"Type Guards",id:"type-guards",level:3},{value:"Constants",id:"constants",level:2},{value:"Further Reading",id:"further-reading",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"core-api-reference",children:"Core API Reference"})}),"\n",(0,i.jsx)(n.p,{children:"This document provides a comprehensive reference for the ElizaOS Core API, including all interfaces, types, and functions available for plugin and application development."}),"\n",(0,i.jsx)(n.h2,{id:"iagentruntime",children:"IAgentRuntime"}),"\n",(0,i.jsx)(n.p,{children:"The main runtime interface that provides access to all agent functionality."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface IAgentRuntime extends IDatabaseAdapter {\n  // Properties\n  agentId: UUID;\n  character: Character;\n  providers: Provider[];\n  actions: Action[];\n  evaluators: Evaluator[];\n  plugins: Plugin[];\n  services: Map<ServiceTypeName, Service>;\n  events: Map<string, ((params: any) => Promise<void>)[]>;\n  fetch?: typeof fetch | null;\n  routes: Route[];\n\n  // Plugin Management\n  registerPlugin(plugin: Plugin): Promise<void>;\n  initialize(): Promise<void>;\n\n  // Database\n  getConnection(): Promise<any>;\n\n  // Services\n  getService<T extends Service>(service: ServiceTypeName | string): T | null;\n  getAllServices(): Map<ServiceTypeName, Service>;\n  registerService(service: typeof Service): Promise<void>;\n\n  // Settings (additional methods from runtime)\n  getSetting(key: string): any;\n  setSetting(key: string, value: any): void;\n\n  // Model Operations\n  completion(params: CompletionParams): Promise<string>;\n  embed(text: string): Promise<number[]>;\n\n  // Memory Operations (implemented in runtime)\n  processActions(message: Memory, messages: Memory[], state?: State): Promise<Memory[]>;\n  evaluate(message: Memory, state?: State): Promise<string[]>;\n  ensureParticipantInRoom(entityId: UUID, roomId: UUID): Promise<void>;\n\n  // Task Worker Management\n  registerTaskWorker(taskHandler: TaskWorker): void;\n  getTaskWorker(name: string): TaskWorker | undefined;\n\n  // Agent Lifecycle\n  stop(): Promise<void>;\n\n  // Memory Management\n  addEmbeddingToMemory(memory: Memory): Promise<Memory>;\n  getAllMemories(): Promise<Memory[]>;\n  clearAllAgentMemories(): Promise<void>;\n\n  // Run Tracking\n  createRunId(): UUID;\n  startRun(): UUID;\n  endRun(): void;\n  getCurrentRunId(): UUID;\n\n  // Entity & Room Management (convenience wrappers)\n  getEntityById(entityId: UUID): Promise<Entity | null>;\n  getRoom(roomId: UUID): Promise<Room | null>;\n  createEntity(entity: Entity): Promise<boolean>;\n  createRoom(room: Room): Promise<UUID>;\n  addParticipant(entityId: UUID, roomId: UUID): Promise<boolean>;\n  getRooms(worldId: UUID): Promise<Room[]>;\n\n  // Messaging\n  registerSendHandler(source: string, handler: SendHandlerFunction): void;\n  sendMessageToTarget(target: TargetInfo, content: Content): Promise<void>;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"core-types",children:"Core Types"}),"\n",(0,i.jsx)(n.h3,{id:"character",children:"Character"}),"\n",(0,i.jsx)(n.p,{children:"Defines an agent's personality and behavior."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Character {\n  // Basic Information\n  name: string;\n  description?: string;\n  system?: string;\n\n  // Personality\n  bio: string | string[];\n  lore: string | string[];\n  topics: string | string[];\n  adjectives: string | string[];\n\n  // Behavior\n  style: {\n    all: string | string[];\n    chat: string | string[];\n    post: string | string[];\n  };\n\n  // Examples\n  messageExamples: MessageExample[][];\n  postExamples: string[];\n\n  // Configuration\n  settings?: {\n    voice?: {\n      model: string;\n      url?: string;\n    };\n    secrets?: Record<string, string>;\n    [key: string]: any;\n  };\n\n  // Plugins\n  plugins: string[];\n  clients: string[];\n\n  // Knowledge\n  knowledge?: string[];\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"memory",children:"Memory"}),"\n",(0,i.jsx)(n.p,{children:"The core data structure for messages and memories."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Memory {\n  id?: UUID;\n  entityId: UUID;\n  agentId?: UUID;\n  roomId: UUID;\n\n  content: Content;\n\n  createdAt?: number;\n  embedding?: number[];\n\n  worldId?: UUID;\n  unique?: boolean;\n  similarity?: number;\n  metadata?: MemoryMetadata;\n}\n\ninterface Content {\n  text: string;\n  action?: string;\n  source?: string;\n  url?: string;\n  inReplyTo?: string;\n\n  attachments?: Attachment[];\n\n  [key: string]: any; // Additional content\n}\n\ninterface Attachment {\n  type: 'image' | 'video' | 'audio' | 'file';\n  url: string;\n  mimeType?: string;\n  size?: number;\n  metadata?: Record<string, any>;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"state",children:"State"}),"\n",(0,i.jsx)(n.p,{children:"Conversation state management."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface State {\n  /** Additional dynamic properties */\n  [key: string]: any;\n\n  /** Key-value store for general state variables, often populated by providers */\n  values: {\n    [key: string]: any;\n  };\n\n  /** Key-value store for more structured or internal data */\n  data: {\n    [key: string]: any;\n  };\n\n  /** String representation of current context, often a summary or concatenated history */\n  text: string;\n}\n\n// Note: State is NOT a Map object. It's a plain object with specific properties.\n// To store data in state, use state.data or state.values:\n// state.data.myKey = myValue;  // \u2713 Correct\n// state.set('myKey', myValue); // \u2717 Incorrect - State is not a Map\n\ninterface Goal {\n  id: string;\n  name: string;\n  description?: string;\n  status: 'pending' | 'active' | 'completed' | 'failed';\n  objectives: Objective[];\n  createdAt: string;\n  updatedAt?: string;\n}\n\ninterface Objective {\n  id: string;\n  goal_id: string;\n  description: string;\n  completed: boolean;\n  metadata?: Record<string, any>;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"actions",children:"Actions"}),"\n",(0,i.jsx)(n.h3,{id:"action-interface",children:"Action Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Action {\n  name: string;\n  description: string;\n  similes?: string[];\n  examples?: ActionExample[][];\n  handler: Handler;\n  validate: Validator;\n}\n\ninterface ActionExample {\n  name: string;\n  content: Content;\n}\n\ntype Handler = (\n  runtime: IAgentRuntime,\n  message: Memory,\n  state?: State,\n  options?: { [key: string]: unknown },\n  callback?: HandlerCallback,\n  responses?: Memory[]\n) => Promise<unknown>;\n\ntype Validator = (runtime: IAgentRuntime, message: Memory, state?: State) => Promise<boolean>;\n\ntype HandlerCallback = (response: Content, files?: any) => Promise<Memory[]>;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"built-in-actions",children:"Built-in Actions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Continue action - maintains conversation flow\nconst CONTINUE_ACTION: Action = {\n  name: 'CONTINUE',\n  description: 'Continue the conversation',\n  validate: async (runtime, message) => true,\n  handler: async (runtime, message, state) => {\n    const response = await runtime.completion({\n      context: state?.recentMessages || '',\n      messages: state?.recentMessagesData || [],\n    });\n\n    return {\n      entityId: runtime.agentId,\n      roomId: message.roomId,\n      content: { text: response },\n    };\n  },\n};\n\n// Follow Room action - subscribes to a room/channel\nconst FOLLOW_ROOM_ACTION: Action = {\n  name: 'FOLLOW_ROOM',\n  description: 'Follow a room or channel',\n  validate: async (runtime, message) => {\n    return message.content.text.includes('follow') && message.content.text.includes('room');\n  },\n  handler: async (runtime, message) => {\n    const roomId = extractRoomId(message.content.text);\n    await runtime.databaseAdapter.setParticipantUserState(roomId, runtime.agentId, 'FOLLOWED');\n\n    return {\n      entityId: runtime.agentId,\n      roomId: message.roomId,\n      content: { text: `Now following room ${roomId}` },\n    };\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"providers",children:"Providers"}),"\n",(0,i.jsx)(n.h3,{id:"provider-interface",children:"Provider Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Provider {\n  name: string;\n  description?: string;\n  dynamic?: boolean;\n  position?: number;\n  private?: boolean;\n  get: (runtime: IAgentRuntime, message: Memory, state: State) => Promise<string>;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"built-in-providers",children:"Built-in Providers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Time provider\nconst timeProvider: Provider = {\n  get: async (runtime) => {\n    const now = new Date();\n    return `Current time: ${now.toISOString()}`;\n  },\n};\n\n// Facts provider\nconst factsProvider: Provider = {\n  get: async (runtime, message) => {\n    const facts = await runtime.documentsManager.searchMemoriesByEmbedding(\n      await runtime.embed(message.content.text),\n      { count: 5, roomId: message.roomId }\n    );\n\n    return facts.map((f) => f.content.text).join('\\n');\n  },\n};\n\n// Conversation provider\nconst conversationProvider: Provider = {\n  get: async (runtime, message) => {\n    const recentMessages = await runtime.messageManager.getMemories({\n      roomId: message.roomId,\n      count: 10,\n      unique: false,\n    });\n\n    return formatConversation(recentMessages);\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"evaluators",children:"Evaluators"}),"\n",(0,i.jsx)(n.h3,{id:"evaluator-interface",children:"Evaluator Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Evaluator {\n  name: string;\n  description: string;\n  similes?: string[];\n  examples: EvaluationExample[];\n  handler: Handler;\n  validate: Validator;\n  alwaysRun?: boolean;\n}\n\ninterface EvaluationExample {\n  context: string;\n  messages: Array<{\n    user: string;\n    content: Content;\n  }>;\n  outcome: string;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"built-in-evaluators",children:"Built-in Evaluators"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Goal evaluator\nconst goalEvaluator: Evaluator = {\n  name: 'GOAL_EVALUATOR',\n  description: 'Evaluates progress toward goals',\n\n  validate: async (runtime, message) => {\n    return runtime.character.settings?.goals?.enabled === true;\n  },\n\n  handler: async (runtime, message, state) => {\n    if (!state?.currentGoal) return;\n\n    // Check if message advances goal\n    const advances = await checkGoalProgress(message, state.currentGoal, runtime);\n\n    if (advances) {\n      // Update goal progress (goals are managed through tasks)\n      await runtime.databaseAdapter.updateTask(state.currentGoal.id, {\n        updatedAt: new Date().toISOString(),\n      });\n    }\n  },\n};\n\n// Fact evaluator\nconst factEvaluator: Evaluator = {\n  name: 'FACT_EVALUATOR',\n  description: 'Extracts and stores facts from messages',\n\n  validate: async (runtime, message) => {\n    return message.content.text.length > 20;\n  },\n\n  handler: async (runtime, message) => {\n    const facts = await extractFacts(message.content.text);\n\n    for (const fact of facts) {\n      await runtime.documentsManager.createMemory({\n        entityId: message.entityId,\n        agentId: runtime.agentId,\n        roomId: message.roomId,\n        content: {\n          text: fact,\n          source: message.id,\n        },\n      });\n    }\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,i.jsx)(n.h3,{id:"service-interface",children:"Service Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"abstract class Service {\n  protected runtime!: IAgentRuntime;\n  static serviceType: string;\n  abstract capabilityDescription: string;\n  config?: Metadata;\n\n  constructor(runtime?: IAgentRuntime) {\n    if (runtime) {\n      this.runtime = runtime;\n    }\n  }\n\n  abstract stop(): Promise<void>;\n  static async start(_runtime: IAgentRuntime): Promise<Service> {\n    throw new Error('Service must implement static start method');\n  }\n  static async stop(_runtime: IAgentRuntime): Promise<unknown> {\n    return Promise.resolve();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"built-in-services",children:"Built-in Services"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Cache Service\nclass CacheService extends Service {\n  static serviceType = 'cache';\n\n  private cache: Map<string, CacheEntry> = new Map();\n\n  async initialize(runtime: IAgentRuntime): Promise<void> {\n    // Initialize cache with settings\n    const settings = runtime.getSetting('cache');\n    this.maxSize = settings?.maxSize || 1000;\n    this.ttl = settings?.ttl || 3600000; // 1 hour\n  }\n\n  async get(key: string): Promise<any | null> {\n    const entry = this.cache.get(key);\n\n    if (!entry || Date.now() > entry.expiresAt) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return entry.value;\n  }\n\n  async set(key: string, value: any, ttl?: number): Promise<void> {\n    // Evict oldest if at capacity\n    if (this.cache.size >= this.maxSize) {\n      const oldest = this.findOldestEntry();\n      if (oldest) this.cache.delete(oldest);\n    }\n\n    this.cache.set(key, {\n      value,\n      expiresAt: Date.now() + (ttl || this.ttl),\n    });\n  }\n\n  async cleanup(): Promise<void> {\n    this.cache.clear();\n  }\n}\n\n// Database Service\nclass DatabaseService extends Service {\n  static serviceType = 'database';\n\n  private adapter: IDatabaseAdapter;\n\n  async initialize(runtime: IAgentRuntime): Promise<void> {\n    this.adapter = runtime.databaseAdapter;\n  }\n\n  async query(sql: string, params?: any[]): Promise<any[]> {\n    return this.adapter.query(sql, params);\n  }\n\n  async transaction<T>(callback: (tx: Transaction) => Promise<T>): Promise<T> {\n    return this.adapter.transaction(callback);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"memory-management",children:"Memory Management"}),"\n",(0,i.jsx)(n.h3,{id:"imemorymanager-interface",children:"IMemoryManager Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface IMemoryManager {\n  // Create\n  createMemory(memory: Memory): Promise<void>;\n\n  // Read\n  getMemories(params: {\n    roomId: string;\n    count?: number;\n    unique?: boolean;\n    start?: number;\n    end?: number;\n  }): Promise<Memory[]>;\n\n  getMemoriesByType(params: { roomId: string; type: string }): Promise<Memory[]>;\n\n  getMemoryById(id: string): Promise<Memory | null>;\n\n  // Search\n  searchMemories(params: { roomId: string; query: string; count?: number }): Promise<Memory[]>;\n\n  searchMemoriesByEmbedding(\n    embedding: number[],\n    params: {\n      roomId?: string;\n      threshold?: number;\n      count?: number;\n    }\n  ): Promise<Memory[]>;\n\n  // Update\n  updateMemory(memory: Memory): Promise<void>;\n\n  // Delete\n  removeMemory(id: string): Promise<void>;\n  removeAllMemories(roomId: string): Promise<void>;\n\n  // Count\n  countMemories(roomId: string): Promise<number>;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"database-adapter",children:"Database Adapter"}),"\n",(0,i.jsx)(n.h3,{id:"idatabaseadapter-interface",children:"IDatabaseAdapter Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface IDatabaseAdapter {\n  // Initialization\n  init(): Promise<void>;\n  close(): Promise<void>;\n\n  // Agent Management\n  getAgent(agentId: UUID): Promise<Agent | null>;\n  getAgents(): Promise<Partial<Agent>[]>;\n  createAgent(agent: Partial<Agent>): Promise<boolean>;\n  updateAgent(agentId: UUID, agent: Partial<Agent>): Promise<boolean>;\n  deleteAgent(agentId: UUID): Promise<boolean>;\n\n  // Room Management\n  getRoomsByIds(roomIds: UUID[]): Promise<Room[] | null>;\n  createRooms(rooms: Room[]): Promise<UUID[]>;\n  deleteRoom(roomId: UUID): Promise<void>;\n  deleteRoomsByWorldId(worldId: UUID): Promise<void>;\n  updateRoom(room: Room): Promise<void>;\n  getRoomsForParticipant(entityId: UUID): Promise<UUID[]>;\n  getRoomsForParticipants(userIds: UUID[]): Promise<UUID[]>;\n  getRoomsByWorld(worldId: UUID): Promise<Room[]>;\n\n  // Participant Management\n  addParticipantsRoom(entityIds: UUID[], roomId: UUID): Promise<boolean>;\n  removeParticipant(entityId: UUID, roomId: UUID): Promise<boolean>;\n  getParticipantsForEntity(entityId: UUID): Promise<Participant[]>;\n  getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;\n\n  // Participant State\n  getParticipantUserState(roomId: UUID, entityId: UUID): Promise<'FOLLOWED' | 'MUTED' | null>;\n\n  setParticipantUserState(\n    roomId: UUID,\n    entityId: UUID,\n    state: 'FOLLOWED' | 'MUTED' | null\n  ): Promise<void>;\n\n  // Memory Management\n  createMemory(memory: Memory, tableName?: string, unique?: boolean): Promise<void>;\n  getMemories(params: {\n    roomId: UUID;\n    count?: number;\n    unique?: boolean;\n    tableName?: string;\n    start?: number;\n    end?: number;\n    agentId?: UUID;\n  }): Promise<Memory[]>;\n\n  searchMemoriesByEmbedding(\n    embedding: number[],\n    params: {\n      match_threshold?: number;\n      count?: number;\n      roomId?: UUID;\n      unique?: boolean;\n      tableName?: string;\n    }\n  ): Promise<Memory[]>;\n\n  getCachedEmbeddings(\n    content: string\n  ): Promise<{ embedding: number[]; levenshtein_score: number }[]>;\n\n  updateGoalStatus(params: {\n    goalId: UUID;\n    status: 'COMPLETED' | 'FAILED' | 'IN_PROGRESS';\n  }): Promise<void>;\n\n  log(params: any): Promise<void>;\n\n  getMemoriesByIds(memoryIds: UUID[], tableName?: string): Promise<Memory[]>;\n\n  getMemoryById(memoryId: UUID, tableName?: string): Promise<Memory | null>;\n\n  removeMemory(memoryId: UUID, tableName?: string): Promise<void>;\n\n  removeAllMemories(roomId: UUID, tableName?: string): Promise<void>;\n\n  countMemories(roomId: UUID, unique?: boolean, tableName?: string): Promise<number>;\n\n  // Task Management (Note: Goals are managed through tasks)\n  createTask(task: Task): Promise<void>;\n  getTasks(entityId: UUID): Promise<Task[]>;\n  updateTask(task: Task): Promise<void>;\n  deleteTask(taskId: UUID): Promise<void>;\n\n  // Relationship Management\n  createRelationship(params: {\n    entityIdA: UUID;\n    entityIdB: UUID;\n    world?: World | null;\n  }): Promise<boolean>;\n\n  updateRelationship(relationship: Relationship): Promise<void>;\n\n  getRelationships(params: { entityId: UUID; world?: World }): Promise<Relationship[]>;\n\n  getRelationship(params: { entityIdA: UUID; entityIdB: UUID }): Promise<Relationship | null>;\n\n  // Raw Query\n  query(sql: string, params?: any[]): Promise<any[]>;\n\n  // Transaction Support\n  transaction<T>(callback: (tx: Transaction) => Promise<T>): Promise<T>;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,i.jsx)(n.h3,{id:"completion",children:"Completion"}),"\n",(0,i.jsx)(n.p,{children:"Generate text using the configured language model."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface CompletionParams {\n  context: string;\n  messages?: Memory[];\n  model?: string;\n  stop?: string[];\n  temperature?: number;\n  maxTokens?: number;\n  frequencyPenalty?: number;\n  presencePenalty?: number;\n}\n\n// Usage\nconst response = await runtime.completion({\n  context: 'You are a helpful assistant',\n  messages: recentMessages,\n  temperature: 0.8,\n  maxTokens: 150,\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"embedding",children:"Embedding"}),"\n",(0,i.jsx)(n.p,{children:"Generate embeddings for text."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Generate embedding\nconst embedding = await runtime.embed('Hello world');\n\n// Search by embedding\nconst similar = await runtime.messageManager.searchMemoriesByEmbedding(embedding, {\n  count: 10,\n  threshold: 0.8,\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface ILogger {\n  level: 'error' | 'warn' | 'info' | 'debug';\n\n  error(message: string, data?: any): void;\n  warn(message: string, data?: any): void;\n  info(message: string, data?: any): void;\n  debug(message: string, data?: any): void;\n}\n\n// Usage\nruntime.logger.info('Processing message', { messageId: message.id });\nruntime.logger.error('Failed to process', { error: error.message });\n"})}),"\n",(0,i.jsx)(n.h2,{id:"lifecycle-hooks",children:"Lifecycle Hooks"}),"\n",(0,i.jsx)(n.h3,{id:"plugin-lifecycle",children:"Plugin Lifecycle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Plugin {\n  // Called when plugin is loaded\n  onLoad?: (runtime: IAgentRuntime) => Promise<void>;\n\n  // Called when plugin is unloaded\n  onUnload?: (runtime: IAgentRuntime) => Promise<void>;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"message-processing-pipeline",children:"Message Processing Pipeline"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// 1. Message received\nconst message = await runtime.messageManager.createMemory(incomingMessage);\n\n// 2. Run evaluators\nconst evaluations = await runtime.evaluate(message, state);\n\n// 3. Process actions\nconst responses = await runtime.processActions(message, recentMessages, state);\n\n// 4. Send responses\nfor (const response of responses) {\n  await runtime.messageManager.createMemory(response);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"character-configuration",children:"Character Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Load character\nconst character: Character = {\n  name: 'Assistant',\n  bio: 'A helpful AI assistant',\n  style: {\n    all: ['helpful', 'friendly'],\n    chat: ['conversational'],\n  },\n  plugins: ['@elizaos/plugin-bootstrap'],\n  settings: {\n    model: 'gpt-4',\n    temperature: 0.7,\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"runtime-settings",children:"Runtime Settings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Get setting\nconst apiKey = runtime.getSetting('openai.apiKey');\n\n// Set setting\nruntime.setSetting('cache.ttl', 3600);\n\n// Check feature flag\nconst debugMode = runtime.getSetting('debug') === true;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.h3,{id:"error-types",children:"Error Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class ElizaError extends Error {\n  code: string;\n  details?: any;\n\n  constructor(message: string, code: string, details?: any) {\n    super(message);\n    this.code = code;\n    this.details = details;\n  }\n}\n\nclass ValidationError extends ElizaError {\n  constructor(message: string, details?: any) {\n    super(message, 'VALIDATION_ERROR', details);\n  }\n}\n\nclass PluginError extends ElizaError {\n  constructor(message: string, pluginName: string, details?: any) {\n    super(message, 'PLUGIN_ERROR', { plugin: pluginName, ...details });\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling-patterns",children:"Error Handling Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Action error handling\nconst safeAction: Action = {\n  handler: async (runtime, message) => {\n    try {\n      return await riskyOperation();\n    } catch (error) {\n      runtime.logger.error('Action failed', {\n        action: 'SAFE_ACTION',\n        error: error.message,\n        messageId: message.id,\n      });\n\n      // Return graceful fallback\n      return {\n        entityId: runtime.agentId,\n        roomId: message.roomId,\n        content: {\n          text: 'I encountered an error processing that request.',\n          error: true,\n        },\n      };\n    }\n  },\n};\n\n// Service error handling\nclass RobustService extends Service {\n  async performOperation() {\n    const maxRetries = 3;\n    let lastError;\n\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await this.attemptOperation();\n      } catch (error) {\n        lastError = error;\n        await this.delay(Math.pow(2, i) * 1000); // Exponential backoff\n      }\n    }\n\n    throw new Error(`Operation failed after ${maxRetries} attempts: ${lastError.message}`);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"type-utilities",children:"Type Utilities"}),"\n",(0,i.jsx)(n.h3,{id:"helper-types",children:"Helper Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Partial type for updates\ntype PartialMemory = Partial<Memory> & Pick<Memory, 'id'>;\n\n// Union types for content\ntype ContentType = 'text' | 'image' | 'video' | 'audio' | 'file';\n\n// Enum for states\nenum ParticipantState {\n  FOLLOWED = 'FOLLOWED',\n  MUTED = 'MUTED',\n  NONE = null,\n}\n\n// Generic result type\ninterface Result<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type-guards",children:"Type Guards"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Check if action result is valid\nfunction isValidActionResult(result: any): result is Memory {\n  return (\n    result &&\n    typeof result.entityId === 'string' &&\n    typeof result.roomId === 'string' &&\n    result.content &&\n    typeof result.content.text === 'string'\n  );\n}\n\n// Check if service exists\nfunction hasService<T extends Service>(\n  runtime: IAgentRuntime,\n  name: string\n): runtime is IAgentRuntime & { getService(): T } {\n  return runtime.services.has(name);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Models\nexport const Models = {\n  GPT_4: 'gpt-4',\n  GPT_4_TURBO: 'gpt-4-turbo-preview',\n  GPT_3_5_TURBO: 'gpt-3.5-turbo',\n  CLAUDE_3_OPUS: 'claude-3-opus-20240229',\n  CLAUDE_3_SONNET: 'claude-3-sonnet-20240229',\n} as const;\n\n// Embedding dimensions\nexport const EmbeddingDimensions = {\n  OPENAI: 1536,\n  COHERE: 768,\n  CUSTOM: 384,\n} as const;\n\n// Memory types\nexport const MemoryTypes = {\n  MESSAGE: 'message',\n  FACT: 'fact',\n  DOCUMENT: 'document',\n  REFLECTION: 'reflection',\n} as const;\n\n// Action names\nexport const Actions = {\n  CONTINUE: 'CONTINUE',\n  FOLLOW_ROOM: 'FOLLOW_ROOM',\n  UNFOLLOW_ROOM: 'UNFOLLOW_ROOM',\n  MUTE_ROOM: 'MUTE_ROOM',\n  NONE: 'NONE',\n} as const;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/technical/architecture/core-concepts",children:"Core Concepts"})," - Understand the fundamentals"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/technical/development/plugin-development",children:"Plugin Development"})," - Build custom plugins"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/docs/technical/advanced/best-practices",children:"Best Practices"})," - Development guidelines"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/elizaos/eliza/tree/main/examples",children:"API Examples"})," - Code examples"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);