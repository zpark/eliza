"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[72376],{45666:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"plugins/irys","title":"@elizaos/plugin-irys","description":"A plugin for ElizaOS that enables decentralized data storage and retrieval using Irys, a programmable datachain platform.","source":"@site/packages/plugins/irys.md","sourceDirName":"plugins","slug":"/plugins/irys","permalink":"/packages/plugins/irys","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Code In Plugin For Eliza","permalink":"/packages/plugins/iq6900"},"next":{"title":"Isaac X Plugin for ElizaOS","permalink":"/packages/plugins/isaacx"}}');var a=r(31085),s=r(71184);const i={},o="@elizaos/plugin-irys",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Features",id:"features",level:2},{value:"Configuration",id:"configuration",level:2},{value:"How it works",id:"how-it-works",level:2},{value:"1. Providers",id:"1-providers",level:3},{value:"2. Orchestrators",id:"2-orchestrators",level:3},{value:"3. Workers",id:"3-workers",level:3},{value:"Usage",id:"usage",level:2},{value:"Worker",id:"worker",level:3},{value:"Provider",id:"provider",level:3},{value:"Retrieving Data",id:"retrieving-data",level:3},{value:"About Irys",id:"about-irys",level:2},{value:"Key Features of Irys",id:"key-features-of-irys",level:3},{value:"GraphQL Query Examples",id:"graphql-query-examples",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"IrysService",id:"irysservice",level:3},{value:"Methods",id:"methods",level:4},{value:"Testing",id:"testing",level:2},{value:"Contributing",id:"contributing",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"elizaosplugin-irys",children:"@elizaos/plugin-irys"})}),"\n",(0,a.jsx)(n.p,{children:"A plugin for ElizaOS that enables decentralized data storage and retrieval using Irys, a programmable datachain platform."}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"This plugin integrates Irys functionality into ElizaOS, allowing agents to store and retrieve data in a decentralized manner. It provides a service for creating a decentralized knowledge base and enabling multi-agent collaboration."}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.p,{children:"To install this plugin, run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"bun add @elizaos/plugin-irys\n"})}),"\n",(0,a.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Decentralized Data Storage"}),": Store data permanently on the Irys network"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Data Retrieval"}),": Fetch stored data using GraphQL queries"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multi-Agent Support"}),": Enable data sharing and collaboration between agents"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Ethereum Integration"}),": Built-in support for Ethereum wallet authentication"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(n.p,{children:"The plugin requires the following environment variables:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"EVM_WALLET_PRIVATE_KEY"}),": Your EVM wallet private key"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AGENTS_WALLET_PUBLIC_KEYS"}),": The public keys of the agents that will be used to retrieve the data (string separated by commas)"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For this plugin to work, you need to have an EVM (Base network) wallet with a private key and public address. To prevent any security issues, we recommend using a dedicated wallet for this plugin."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Important"}),": The wallet address needs to have Base Sepolia ETH tokens to store images/files and any data larger than 100KB."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,a.jsx)(n.p,{children:"The system consists of three main components that work together to enable decentralized multi-agent operations:"}),"\n",(0,a.jsx)(n.h3,{id:"1-providers",children:"1. Providers"}),"\n",(0,a.jsx)(n.p,{children:"Providers are the data management layer of the system. They:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Interact with the Orchestrator to store data"}),"\n",(0,a.jsx)(n.li,{children:"Aggregate information from multiple sources to enhance context"}),"\n",(0,a.jsx)(n.li,{children:"Support agents with enriched data for better decision-making"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"2-orchestrators",children:"2. Orchestrators"}),"\n",(0,a.jsx)(n.p,{children:"Orchestrators manage the flow of communication and requests. They:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Interact with the Irys datachain to store and retrieve data"}),"\n",(0,a.jsx)(n.li,{children:"Implement a tagging system for request categorization"}),"\n",(0,a.jsx)(n.li,{children:"Validate data integrity and authenticity"}),"\n",(0,a.jsx)(n.li,{children:"Coordinate the overall system workflow"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-workers",children:"3. Workers"}),"\n",(0,a.jsx)(n.p,{children:"Workers are specialized agents that execute specific tasks. They:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Perform autonomous operations (e.g., social media interactions, DeFi operations)"}),"\n",(0,a.jsx)(n.li,{children:"Interact with Orchestrators to get contextual data from Providers"}),"\n",(0,a.jsx)(n.li,{children:"Interact with Orchestrators to store execution results on the Irys datachain"}),"\n",(0,a.jsx)(n.li,{children:"Maintain transparency by documenting all actions"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This architecture ensures a robust, transparent, and efficient system where:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Data is securely stored and verified on the blockchain"}),"\n",(0,a.jsx)(n.li,{children:"Requests are properly routed and managed"}),"\n",(0,a.jsx)(n.li,{children:"Operations are executed autonomously"}),"\n",(0,a.jsx)(n.li,{children:"All actions are traceable and accountable"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You can find more information about the system in the ",(0,a.jsx)(n.a,{href:"https://trophe.net/article/A_Decentralized_Framework_for_Multi-Agent_Systems_Using_Datachain_Technology.pdf",children:"A Decentralized Framework for Multi-Agent Systems Using Datachain Technology"})," paper."]}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.h3,{id:"worker",children:"Worker"}),"\n",(0,a.jsxs)(n.p,{children:["As a worker, you can store data on the Irys network using the ",(0,a.jsx)(n.code,{children:"workerUploadDataOnIrys"})," function. You can use this function to store data from any source to document your actions. You can also use this function to store a request to get data from the Orchestrator to enhance your context."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { IrysService } = require('@elizaos/plugin-irys');\n\nconst irysService: IrysService = runtime.getService(ServiceType.IRYS);\nconst data = 'Provide Liquidity to the ETH pool on Stargate';\nconst result = await irysService.workerUploadDataOnIrys(\n  data,\n  IrysDataType.OTHER,\n  IrysMessageType.DATA_STORAGE,\n  ['DeFi'],\n  ['Stargate', 'LayerZero']\n);\nconsole.log(`Data uploaded successfully at the following url: ${result.url}`);\n"})}),"\n",(0,a.jsx)(n.p,{children:"To upload files or images :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { IrysService } = require('@elizaos/plugin-irys');\n\nconst irysService: IrysService = runtime.getService(ServiceType.IRYS);\nconst userAttachmentToStore = state.recentMessagesData[1].content.attachments[0].url.replace(\n  'agent\\\\agent',\n  'agent'\n);\n\nconst result = await irysService.workerUploadDataOnIrys(\n  userAttachmentToStore,\n  IrysDataType.IMAGE,\n  IrysMessageType.DATA_STORAGE,\n  ['Social Media'],\n  ['X', 'Twitter']\n);\nconsole.log(`Data uploaded successfully at the following url: ${result.url}`);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To store a request to get data from the Orchestrator to enhance your context, you can use the ",(0,a.jsx)(n.code,{children:"workerUploadDataOnIrys"})," function with the ",(0,a.jsx)(n.code,{children:"IrysMessageType.REQUEST"})," message type."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { IrysService } = require('@elizaos/plugin-irys');\n\nconst irysService: IrysService = runtime.getService(ServiceType.IRYS);\nconst data = 'Which Pool farm has the highest APY on Stargate?';\nconst result = await irysService.workerUploadDataOnIrys(\n  data,\n  IrysDataType.OTHER,\n  IrysMessageType.REQUEST,\n  ['DeFi'],\n  ['Stargate', 'LayerZero'],\n  [0.5], // Validation Threshold - Not implemented yet\n  [1], // Minimum Providers\n  [false], // Test Provider - Not implemented yet\n  [0.5] // Reputation - Not implemented yet\n);\nconsole.log(`Data uploaded successfully at the following url: ${result.url}`);\nconsole.log(`Response from the Orchestrator: ${result.data}`);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"provider",children:"Provider"}),"\n",(0,a.jsxs)(n.p,{children:["As a provider, you can store data on the Irys network using the ",(0,a.jsx)(n.code,{children:"providerUploadDataOnIrys"})," function. The data you provide can be retrieved by the Orchestrator to enhance the context of the Worker."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { IrysService } = require('@elizaos/plugin-irys');\n\nconst irysService: IrysService = runtime.getService(ServiceType.IRYS);\nconst data = 'ETH Pool Farm APY : 6,86%';\nconst result = await irysService.providerUploadDataOnIrys(\n  data,\n  IrysDataType.OTHER,\n  ['DeFi'],\n  ['Stargate', 'LayerZero']\n);\nconsole.log(`Data uploaded successfully at the following url: ${result.url}`);\n"})}),"\n",(0,a.jsx)(n.p,{children:"To upload files or images :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { IrysService } = require('@elizaos/plugin-irys');\n\nconst irysService: IrysService = runtime.getService(ServiceType.IRYS);\nconst userAttachmentToStore = state.recentMessagesData[1].content.attachments[0].url.replace(\n  'agent\\\\agent',\n  'agent'\n);\n\nconst result = await irysService.providerUploadDataOnIrys(\n  userAttachmentToStore,\n  IrysDataType.IMAGE,\n  ['Social Media'],\n  ['X', 'Twitter']\n);\nconsole.log(`Data uploaded successfully at the following url: ${result.url}`);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"retrieving-data",children:"Retrieving Data"}),"\n",(0,a.jsxs)(n.p,{children:["To retrieve data from the Irys network, you can use the ",(0,a.jsx)(n.code,{children:"getDataFromAnAgent"})," function. This function will retrieve all data associated with the given wallet addresses, tags and timestamp. The function automatically detects the content type and returns either JSON data or file/image URLs accordingly."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"For files and images: Returns the URL of the stored content"}),"\n",(0,a.jsx)(n.li,{children:"For other data types: Returns a JSON object with the following structure:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"{\n  data: string,    // The stored data\n  address: string  // The address of the agent that stored the data\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"By using only the provider address you want to retrieve data from :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { IrysService } = require('@elizaos/plugin-irys');\n\nconst irysService = runtime.getService(ServiceType.IRYS);\nconst agentsWalletPublicKeys = runtime.getSetting('AGENTS_WALLET_PUBLIC_KEYS').split(',');\nconst data = await irysService.getDataFromAnAgent(agentsWalletPublicKeys);\nconsole.log(`Data retrieved successfully. Data: ${data}`);\n"})}),"\n",(0,a.jsx)(n.p,{children:"By using tags and timestamp:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const { IrysService } = require('@elizaos/plugin-irys');\n\nconst irysService = runtime.getService(ServiceType.IRYS);\nconst tags = [\n  { name: 'Message-Type', values: [IrysMessageType.DATA_STORAGE] },\n  { name: 'Service-Category', values: ['DeFi'] },\n  { name: 'Protocol', values: ['Stargate', 'LayerZero'] },\n];\nconst timestamp = { from: 1710000000, to: 1710000000 };\nconst data = await irysService.getDataFromAnAgent(null, tags, timestamp);\nconsole.log(`Data retrieved successfully. Data: ${data}`);\n"})}),"\n",(0,a.jsx)(n.p,{children:"If everything is null, the function will retrieve all data from the Irys network."}),"\n",(0,a.jsx)(n.h2,{id:"about-irys",children:"About Irys"}),"\n",(0,a.jsx)(n.p,{children:"Irys is the first Layer 1 (L1) programmable datachain designed to optimize both data storage and execution. By integrating storage and execution, Irys enhances the utility of blockspace, enabling a broader spectrum of web services to operate on-chain."}),"\n",(0,a.jsx)(n.h3,{id:"key-features-of-irys",children:"Key Features of Irys"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Unified Platform"}),": Combines data storage and execution, allowing developers to eliminate dependencies and integrate efficient on-chain data seamlessly."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Cost-Effective Storage"}),": Optimized specifically for data storage, making it significantly cheaper to store data on-chain compared to traditional blockchains."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Programmable Datachain"}),": The IrysVM can utilize on-chain data during computations, enabling dynamic and real-time applications."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Decentralization"}),": Designed to minimize centralization risks by distributing control."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Free Storage for Small Data"}),": Storing less than 100KB of data is free."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"GraphQL Querying"}),": Metadata stored on Irys can be queried using GraphQL."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"graphql-query-examples",children:"GraphQL Query Examples"}),"\n",(0,a.jsx)(n.p,{children:"The plugin uses GraphQL to retrieve transaction metadata. Here's an example query structure:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const QUERY = gql`\n  query ($owners: [String!], $tags: [TagFilter!], $timestamp: TimestampFilter) {\n    transactions(owners: $owners, tags: $tags, timestamp: $timestamp) {\n      edges {\n        node {\n          id\n          address\n        }\n      }\n    }\n  }\n`;\n\nconst variables = {\n  owners: owners,\n  tags: tags,\n  timestamp: timestamp,\n};\n\nconst data: TransactionGQL = await graphQLClient.request(QUERY, variables);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,a.jsx)(n.h3,{id:"irysservice",children:"IrysService"}),"\n",(0,a.jsx)(n.p,{children:"The main service provided by this plugin implements the following interface:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"interface UploadIrysResult {\n  success: boolean;\n  url?: string;\n  error?: string;\n  data?: any;\n}\n\ninterface DataIrysFetchedFromGQL {\n  success: boolean;\n  data: any;\n  error?: string;\n}\n\ninterface GraphQLTag {\n  name: string;\n  values: any[];\n}\n\nconst enum IrysMessageType {\n  REQUEST = 'REQUEST',\n  DATA_STORAGE = 'DATA_STORAGE',\n  REQUEST_RESPONSE = 'REQUEST_RESPONSE',\n}\n\nconst enum IrysDataType {\n  FILE = 'FILE',\n  IMAGE = 'IMAGE',\n  OTHER = 'OTHER',\n}\n\ninterface IrysTimestamp {\n  from: number;\n  to: number;\n}\n\ninterface IIrysService extends Service {\n  getDataFromAnAgent(\n    agentsWalletPublicKeys: string[],\n    tags: GraphQLTag[],\n    timestamp: IrysTimestamp\n  ): Promise<DataIrysFetchedFromGQL>;\n  workerUploadDataOnIrys(\n    data: any,\n    dataType: IrysDataType,\n    messageType: IrysMessageType,\n    serviceCategory: string[],\n    protocol: string[],\n    validationThreshold: number[],\n    minimumProviders: number[],\n    testProvider: boolean[],\n    reputation: number[]\n  ): Promise<UploadIrysResult>;\n  providerUploadDataOnIrys(\n    data: any,\n    dataType: IrysDataType,\n    serviceCategory: string[],\n    protocol: string[]\n  ): Promise<UploadIrysResult>;\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"getDataFromAnAgent(agentsWalletPublicKeys: string[], tags: GraphQLTag[], timestamp: IrysTimestamp)"}),": Retrieves all data associated with the given parameters"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"workerUploadDataOnIrys(data: any, dataType: IrysDataType, messageType: IrysMessageType, serviceCategory: string[], protocol: string[], validationThreshold: number[], minimumProviders: number[], testProvider: boolean[], reputation: number[])"}),": Uploads data to Irys and returns the orchestrator response (request or data storage)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"providerUploadDataOnIrys(data: any, dataType: IrysDataType, serviceCategory: string[], protocol: string[])"}),": Uploads data to Irys and returns orchestrator response (data storage)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,a.jsx)(n.p,{children:"To run the tests, you can use the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"bun test\n"})}),"\n",(0,a.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,a.jsx)(n.p,{children:"Contributions are welcome! Please feel free to submit a Pull Request."}),"\n",(0,a.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.irys.xyz/",children:"Irys Documentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://trophe.net/article/A_Decentralized_Framework_for_Multi-Agent_Systems_Using_Datachain_Technology.pdf",children:"A Decentralized Framework for Multi-Agent Systems Using Datachain Technology"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},71184:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(14041);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);