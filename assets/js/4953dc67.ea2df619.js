"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[5564],{71184:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var s=r(14041);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},77855:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"functions/parseKeyValueXml","title":"parseKeyValueXml","description":"@elizaos/core v1.0.12 / parseKeyValueXml","source":"@site/api/functions/parseKeyValueXml.md","sourceDirName":"functions","slug":"/functions/parseKeyValueXml","permalink":"/api/functions/parseKeyValueXml","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"parseJSONObjectFromText","permalink":"/api/functions/parseJSONObjectFromText"},"next":{"title":"saltSettingValue","permalink":"/api/functions/saltSettingValue"}}');var t=r(31085),i=r(71184);const a={},c="Function: parseKeyValueXml()",l={},o=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Defined in",id:"defined-in",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/api/",children:"@elizaos/core v1.0.12"})," / parseKeyValueXml"]}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"function-parsekeyvaluexml",children:"Function: parseKeyValueXml()"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"parseKeyValueXml"}),"(",(0,t.jsx)(n.code,{children:"text"}),"): ",(0,t.jsx)(n.code,{children:"Record"}),"<",(0,t.jsx)(n.code,{children:"string"}),", ",(0,t.jsx)(n.code,{children:"any"}),">"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Parses key-value pairs from a simple XML structure within a given text.\nIt looks for an XML block (e.g., ",(0,t.jsx)("response",{children:"..."}),") and extracts\ntext content from direct child elements (e.g., ",(0,t.jsx)("key",{children:"value"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"Note: This uses regex and is suitable for simple, predictable XML structures.\nFor complex XML, a proper parsing library is recommended."}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.p,{children:["\u2022 ",(0,t.jsx)(n.strong,{children:"text"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n",(0,t.jsx)(n.p,{children:"The input text containing the XML structure."}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Record"}),"<",(0,t.jsx)(n.code,{children:"string"}),", ",(0,t.jsx)(n.code,{children:"any"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"An object with key-value pairs extracted from the XML, or null if parsing fails."}),"\n",(0,t.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/zpark/eliza/blob/main/packages/core/src/utils.ts#L350",children:"packages/core/src/utils.ts:350"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);