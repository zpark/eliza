"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[74682],{8832:e=>{e.exports=JSON.parse('{"permalink":"/blog/plugin-ordering-guide","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/plugin-ordering-guide.mdx","source":"@site/blog/plugin-ordering-guide.mdx","title":"Understanding Plugin Ordering in ElizaOS","description":"Deep dive into how ElizaOS orders plugins for optimal AI model provider precedence and embedding fallback behavior","date":"2025-01-15T00:00:00.000Z","tags":[{"inline":true,"label":"plugins","permalink":"/blog/tags/plugins"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"models","permalink":"/blog/tags/models"},{"inline":true,"label":"providers","permalink":"/blog/tags/providers"},{"inline":false,"label":"Guide","permalink":"/blog/tags/guide","description":"How-to guides and tutorials"}],"readingTime":5.68,"hasTruncateMarker":true,"authors":[{"name":"ElizaOS Team","title":"Core Team","url":"https://github.com/elizaos","socials":{"twitter":"https://twitter.com/elizaOS","github":"https://github.com/elizaOS"},"imageURL":"https://github.com/elizaos.png","key":"team","page":null}],"frontMatter":{"title":"Understanding Plugin Ordering in ElizaOS","authors":"team","date":"2025-01-15T00:00:00.000Z","description":"Deep dive into how ElizaOS orders plugins for optimal AI model provider precedence and embedding fallback behavior","tags":["plugins","architecture","models","providers","guide"],"image":"/img/plugin-ordering.jpg"},"unlisted":false,"lastUpdatedBy":"Sayo","prevItem":{"title":"What Did You Get Done This Week? Recap","permalink":"/blog/wdygdtw-recap"}}')},53583:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var l=i(8832),r=i(31085),o=i(71184);const s={title:"Understanding Plugin Ordering in ElizaOS",authors:"team",date:new Date("2025-01-15T00:00:00.000Z"),description:"Deep dive into how ElizaOS orders plugins for optimal AI model provider precedence and embedding fallback behavior",tags:["plugins","architecture","models","providers","guide"],image:"/img/plugin-ordering.jpg"},t="Understanding Plugin Ordering in ElizaOS",a={authorsImageUrls:[void 0]},d=[{value:"Why Plugin Order Matters",id:"why-plugin-order-matters",level:2},{value:"The Core Problem",id:"the-core-problem",level:3},{value:"The ElizaOS Solution",id:"the-elizaos-solution",level:3},{value:"How It Works Under the Hood",id:"how-it-works-under-the-hood",level:2},{value:"The <code>useModel()</code> System",id:"the-usemodel-system",level:3},{value:"Automatic Plugin Ordering",id:"automatic-plugin-ordering",level:3},{value:"Plugin Categories &amp; Loading Order",id:"plugin-categories--loading-order",level:2},{value:"1. Core Infrastructure",id:"1-core-infrastructure",level:3},{value:"2. Text-Only AI Providers",id:"2-text-only-ai-providers",level:3},{value:"3. Platform Integrations",id:"3-platform-integrations",level:3},{value:"4. Bootstrap Plugin",id:"4-bootstrap-plugin",level:3},{value:"5. Embedding-Capable AI Providers (Always Last)",id:"5-embedding-capable-ai-providers-always-last",level:3},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"Scenario 1: Cost-Optimized Setup",id:"scenario-1-cost-optimized-setup",level:3},{value:"Scenario 2: Privacy-First Local Setup",id:"scenario-2-privacy-first-local-setup",level:3},{value:"Scenario 3: High-Availability Production",id:"scenario-3-high-availability-production",level:3},{value:"The Local-AI Safety Net",id:"the-local-ai-safety-net",level:2},{value:"Environment Variables That Matter",id:"environment-variables-that-matter",level:2},{value:"AI Provider Keys",id:"ai-provider-keys",level:3},{value:"Platform Integration",id:"platform-integration",level:3},{value:"Control Flags",id:"control-flags",level:3},{value:"Testing Your Configuration",id:"testing-your-configuration",level:2},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2},{value:"&quot;Wrong provider handling my requests&quot;",id:"wrong-provider-handling-my-requests",level:3},{value:"&quot;Embedding operations failing&quot;",id:"embedding-operations-failing",level:3},{value:"&quot;Local-AI loading unexpectedly&quot;",id:"local-ai-loading-unexpectedly",level:3},{value:"&quot;Plugin not loading&quot;",id:"plugin-not-loading",level:3},{value:"Customizing Plugin Order",id:"customizing-plugin-order",level:2},{value:"The Bigger Picture",id:"the-bigger-picture",level:2},{value:"Getting Started",id:"getting-started",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Plugin ordering in ElizaOS isn't just a technical detail\u2014it's a sophisticated system that ensures your AI agents work reliably with the right providers for different tasks. Whether you're using Anthropic for chat, OpenAI for embeddings, or running everything locally with Ollama, understanding how plugins are ordered can save you from headaches and help you build more robust agents."}),"\n","\n",(0,r.jsx)(n.h2,{id:"why-plugin-order-matters",children:"Why Plugin Order Matters"}),"\n",(0,r.jsx)(n.p,{children:"Here's the thing: different AI providers support different capabilities. Anthropic's Claude is excellent for conversation but doesn't provide embeddings. OpenRouter gives you access to dozens of models but no embedding endpoint. OpenAI handles both chat and embeddings beautifully."}),"\n",(0,r.jsx)(n.p,{children:"ElizaOS needs to know which provider should handle which type of request, and plugin ordering is how we solve this puzzle."}),"\n",(0,r.jsx)(n.h3,{id:"the-core-problem",children:"The Core Problem"}),"\n",(0,r.jsxs)(n.p,{children:["When you call ",(0,r.jsx)(n.code,{children:"runtime.useModel(ModelType.TEXT_LARGE, params)"})," in your agent, ElizaOS needs to decide which provider should handle that request. If you have both Anthropic and OpenAI configured, which one should it choose? What about embeddings\u2014if you're using Anthropic for chat, where do embeddings come from?"]}),"\n",(0,r.jsx)(n.h3,{id:"the-elizaos-solution",children:"The ElizaOS Solution"}),"\n",(0,r.jsxs)(n.p,{children:["Plugin array order determines priority. ",(0,r.jsx)(n.strong,{children:"First plugins get first pick"})," for handling model requests. But here's the clever part: ElizaOS automatically orders plugins to ensure:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Your preferred text provider handles conversations"}),"\n",(0,r.jsx)(n.li,{children:"Embedding-capable providers serve as fallbacks for embeddings"}),"\n",(0,r.jsx)(n.li,{children:"Local providers kick in when cloud services fail"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-it-works-under-the-hood",children:"How It Works Under the Hood"}),"\n",(0,r.jsxs)(n.h3,{id:"the-usemodel-system",children:["The ",(0,r.jsx)(n.code,{children:"useModel()"})," System"]}),"\n",(0,r.jsxs)(n.p,{children:["Every AI interaction in ElizaOS goes through the ",(0,r.jsx)(n.code,{children:"useModel()"})," system:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Plugin registers a model handler during initialization\nruntime.registerModel(\n  ModelType.TEXT_LARGE,\n  myModelHandler,\n  'my-plugin-name',\n  priority: 10  // Higher = more preferred\n);\n\n// Agent uses the model\nconst response = await runtime.useModel(ModelType.TEXT_LARGE, {\n  prompt: \"What's the weather like?\",\n  temperature: 0.7\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"ElizaOS sorts available handlers by priority, then by registration order. The highest-priority available handler wins."}),"\n",(0,r.jsx)(n.h3,{id:"automatic-plugin-ordering",children:"Automatic Plugin Ordering"}),"\n",(0,r.jsxs)(n.p,{children:["When you create a new project with ",(0,r.jsx)(n.code,{children:"elizaos create"}),", your ",(0,r.jsx)(n.code,{children:"src/character.ts"})," file automatically includes optimized plugin ordering:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const character: Character = {\n  name: 'MyAgent',\n  plugins: [\n    // Core plugins first\n    '@elizaos/plugin-sql',\n\n    // Text-only plugins (no embedding support) \n    ...(process.env.ANTHROPIC_API_KEY ? ['@elizaos/plugin-anthropic'] : []),\n    ...(process.env.OPENROUTER_API_KEY ? ['@elizaos/plugin-openrouter'] : []),\n\n    // Embedding-capable plugins last (fallback for embeddings)\n    ...(process.env.OPENAI_API_KEY ? ['@elizaos/plugin-openai'] : []),\n    ...(process.env.OLLAMA_API_ENDPOINT ? ['@elizaos/plugin-ollama'] : []),\n    ...(process.env.GOOGLE_GENERATIVE_AI_API_KEY ? ['@elizaos/plugin-google-genai'] : []),\n    \n    // Local-AI fallback (only when no embedding providers exist)\n    ...(!process.env.GOOGLE_GENERATIVE_AI_API_KEY &&\n        !process.env.OLLAMA_API_ENDPOINT &&\n        !process.env.OPENAI_API_KEY\n          ? ['@elizaos/plugin-local-ai']\n          : []),\n\n    // Platform and bootstrap plugins\n    ...(process.env.DISCORD_API_TOKEN ? ['@elizaos/plugin-discord'] : []),\n    ...(!process.env.IGNORE_BOOTSTRAP ? ['@elizaos/plugin-bootstrap'] : []),\n  ],\n  // ... rest of character config\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"plugin-categories--loading-order",children:"Plugin Categories & Loading Order"}),"\n",(0,r.jsx)(n.h3,{id:"1-core-infrastructure",children:"1. Core Infrastructure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-sql"})," - Always loads first, provides database functionality"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-text-only-ai-providers",children:"2. Text-Only AI Providers"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-anthropic"})," - Claude models (conversation only)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-openrouter"})," - Multiple AI models via OpenRouter"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-platform-integrations",children:"3. Platform Integrations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-discord"})," - Discord bot capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-twitter"})," - Twitter integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-telegram"})," - Telegram bot"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-bootstrap-plugin",children:"4. Bootstrap Plugin"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-bootstrap"})," - Default actions, providers, and evaluators"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"5-embedding-capable-ai-providers-always-last",children:"5. Embedding-Capable AI Providers (Always Last)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-openai"})," - GPT models + embeddings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-ollama"})," - Local models + embeddings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-google-genai"})," - Gemini models + embeddings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-local-ai"})," - Final fallback when no other AI providers exist"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,r.jsx)(n.h3,{id:"scenario-1-cost-optimized-setup",children:"Scenario 1: Cost-Optimized Setup"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Goal"}),": Use Claude for chat (better quality), OpenAI for embeddings (only option)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Environment"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ANTHROPIC_API_KEY=your_claude_key\nOPENAI_API_KEY=your_openai_key\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Result"}),": Anthropic handles text generation, OpenAI handles embeddings. No Local-AI needed."]}),"\n",(0,r.jsx)(n.h3,{id:"scenario-2-privacy-first-local-setup",children:"Scenario 2: Privacy-First Local Setup"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Goal"}),": Everything runs locally, no cloud API calls"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Environment"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"OLLAMA_API_ENDPOINT=http://localhost:11434\n# No other API keys\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Result"}),": Ollama handles both text generation and embeddings locally."]}),"\n",(0,r.jsx)(n.h3,{id:"scenario-3-high-availability-production",children:"Scenario 3: High-Availability Production"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Goal"}),": Multiple fallbacks for reliability"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Environment"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"OPENAI_API_KEY=primary_key\nANTHROPIC_API_KEY=backup_key  \nOLLAMA_API_ENDPOINT=http://localhost:11434\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Result"}),": OpenAI primary for everything, Anthropic backup for text, Ollama local fallback."]}),"\n",(0,r.jsx)(n.h2,{id:"the-local-ai-safety-net",children:"The Local-AI Safety Net"}),"\n",(0,r.jsx)(n.p,{children:"Here's a neat feature: Local-AI automatically loads as a fallback when you don't have any embedding-capable cloud providers. This ensures your agent always has access to embeddings (needed for memory and context) even with a text-only provider like Anthropic."}),"\n",(0,r.jsx)(n.p,{children:"The logic is simple:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Only load Local-AI if no embedding providers are configured\n...(!process.env.GOOGLE_GENERATIVE_AI_API_KEY &&\n    !process.env.OLLAMA_API_ENDPOINT &&\n    !process.env.OPENAI_API_KEY\n      ? ['@elizaos/plugin-local-ai']\n      : [])\n"})}),"\n",(0,r.jsx)(n.h2,{id:"environment-variables-that-matter",children:"Environment Variables That Matter"}),"\n",(0,r.jsx)(n.h3,{id:"ai-provider-keys",children:"AI Provider Keys"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ANTHROPIC_API_KEY"})," - Enables Claude (text-only)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OPENROUTER_API_KEY"})," - Enables OpenRouter (text-only)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OPENAI_API_KEY"})," - Enables OpenAI (text + embeddings)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OLLAMA_API_ENDPOINT"})," - Enables Ollama (text + embeddings)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GOOGLE_GENERATIVE_AI_API_KEY"})," - Enables Google GenAI (text + embeddings)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"platform-integration",children:"Platform Integration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DISCORD_API_TOKEN"})," - Discord bot"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TELEGRAM_BOT_TOKEN"})," - Telegram bot"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TWITTER_API_KEY"})," + ",(0,r.jsx)(n.code,{children:"TWITTER_API_SECRET_KEY"})," + ",(0,r.jsx)(n.code,{children:"TWITTER_ACCESS_TOKEN"})," + ",(0,r.jsx)(n.code,{children:"TWITTER_ACCESS_TOKEN_SECRET"})," - Twitter (requires all 4)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"control-flags",children:"Control Flags"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"IGNORE_BOOTSTRAP=true"})," - Disables bootstrap plugin"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing-your-configuration",children:"Testing Your Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Want to see how your plugins are ordered? Create a test project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create new project\nelizaos create test-agent\ncd test-agent\n\n# Set your environment variables\ncp .env.example .env\n# Edit .env with your API keys\n\n# Check plugin order (it's logged during startup)\nelizaos start --log-level debug\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can also run the plugin ordering tests:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd packages/project-starter\nbun test src/__tests__/character-plugin-ordering.test.ts\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,r.jsx)(n.h3,{id:"wrong-provider-handling-my-requests",children:'"Wrong provider handling my requests"'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Check"}),": Plugin order in your character file. Text-only providers should load before embedding providers."]}),"\n",(0,r.jsx)(n.h3,{id:"embedding-operations-failing",children:'"Embedding operations failing"'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verify"}),": At least one embedding-capable provider (OpenAI, Ollama, Google GenAI, or Local-AI) is configured and loading."]}),"\n",(0,r.jsx)(n.h3,{id:"local-ai-loading-unexpectedly",children:'"Local-AI loading unexpectedly"'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Check that your embedding-capable provider environment variables are set correctly."]}),"\n",(0,r.jsx)(n.h3,{id:"plugin-not-loading",children:'"Plugin not loading"'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Debug"}),": Verify environment variable names match expected patterns exactly."]}),"\n",(0,r.jsx)(n.h2,{id:"customizing-plugin-order",children:"Customizing Plugin Order"}),"\n",(0,r.jsx)(n.p,{children:"While the default ordering works great for most cases, you can customize it for specific needs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const character: Character = {\n  name: 'CustomAgent',\n  plugins: [\n    '@elizaos/plugin-sql',\n    \n    // Add your custom plugin early for high priority\n    '@my-org/my-custom-plugin',\n    \n    // Standard ordering for AI providers\n    ...(process.env.ANTHROPIC_API_KEY ? ['@elizaos/plugin-anthropic'] : []),\n    ...(process.env.OPENAI_API_KEY ? ['@elizaos/plugin-openai'] : []),\n    \n    // Rest of plugins...\n  ],\n  // ... rest of config\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can also set custom priorities in your plugin:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const myPlugin: Plugin = {\n  name: 'my-custom-plugin',\n  models: {\n    [ModelType.TEXT_LARGE]: myCustomHandler\n  },\n  priority: 15  // Higher than default plugins\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"the-bigger-picture",children:"The Bigger Picture"}),"\n",(0,r.jsxs)(n.p,{children:["Plugin ordering in ElizaOS reflects a key architectural principle: ",(0,r.jsx)(n.strong,{children:"intelligent defaults with full customization"}),". The system works automatically based on your environment variables, but gives you complete control when you need it."]}),"\n",(0,r.jsx)(n.p,{children:"This approach scales from simple single-provider setups to complex multi-provider, multi-platform deployments. Whether you're building a personal assistant or a production-grade autonomous agent, the plugin ordering system ensures reliable, predictable behavior."}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(n.p,{children:"Ready to build your own agent with optimal plugin ordering?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Create a new project (includes optimized plugin ordering)\nelizaos create my-agent\n\n# Navigate to your project  \ncd my-agent\n\n# Configure your environment\ncp .env.example .env\n# Edit .env with your API keys\n\n# Start your agent\nelizaos start\n"})}),"\n",(0,r.jsx)(n.p,{children:"The template handles the complexity for you, so you can focus on building your agent's unique capabilities. But now you understand what's happening under the hood\u2014and can customize it when needed."}),"\n",(0,r.jsx)(n.p,{children:"Plugin ordering might seem like a small detail, but it's this kind of thoughtful design that makes ElizaOS agents reliable and predictable in production. Happy building!"})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>t});var l=i(14041);const r={},o=l.createContext(r);function s(e){const n=l.useContext(o);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);