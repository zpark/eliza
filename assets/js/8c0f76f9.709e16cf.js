"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[38498],{71184:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var r=i(14041);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},82769:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"technical/architecture/overview","title":"ElizaOS Architecture Overview","description":"This document provides a comprehensive technical overview of the ElizaOS architecture, designed for developers who want to understand the system\'s internals and build upon it.","source":"@site/docs/technical/architecture/overview.md","sourceDirName":"technical/architecture","slug":"/technical/architecture/overview","permalink":"/docs/technical/architecture/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/technical/architecture/overview.md","tags":[],"version":"current","lastUpdatedBy":"SYMBaiEX","lastUpdatedAt":1751607435000,"frontMatter":{},"sidebar":"technicalSidebar","previous":{"title":"\ud83d\ude80 Technical Introduction","permalink":"/docs/technical/intro"},"next":{"title":"\ud83e\udde0 Core Concepts","permalink":"/docs/technical/architecture/core-concepts"}}');var t=i(31085),s=i(71184);const a={},c="ElizaOS Architecture Overview",l={},o=[{value:"\ud83c\udfd7\ufe0f System Architecture",id:"\ufe0f-system-architecture",level:2},{value:"\ud83e\udde9 Core Components",id:"-core-components",level:2},{value:"Runtime Engine (<code>packages/core/src/runtime.ts</code>)",id:"runtime-engine-packagescoresrcruntimets",level:3},{value:"Memory System (<code>packages/core/src/memory.ts</code>)",id:"memory-system-packagescoresrcmemoryts",level:3},{value:"Memory Types",id:"memory-types",level:4},{value:"State Management",id:"state-management",level:3},{value:"\ud83d\udd0c Plugin Architecture",id:"-plugin-architecture",level:2},{value:"Plugin Types",id:"plugin-types",level:3},{value:"Plugin Loading",id:"plugin-loading",level:3},{value:"\ud83c\udf10 Platform Abstraction",id:"-platform-abstraction",level:2},{value:"Room/Channel Abstraction",id:"roomchannel-abstraction",level:3},{value:"Message Normalization",id:"message-normalization",level:3},{value:"\ud83d\udd04 Request Flow",id:"-request-flow",level:2},{value:"Message Processing Pipeline",id:"message-processing-pipeline",level:3},{value:"\ud83d\udcbe Database Architecture",id:"-database-architecture",level:2},{value:"Schema Design",id:"schema-design",level:3},{value:"Database Adapters",id:"database-adapters",level:3},{value:"\ud83d\ude80 Performance Considerations",id:"-performance-considerations",level:2},{value:"Caching Strategy",id:"caching-strategy",level:3},{value:"Concurrency Model",id:"concurrency-model",level:3},{value:"\ud83d\udd10 Security Architecture",id:"-security-architecture",level:2},{value:"Authentication &amp; Authorization",id:"authentication--authorization",level:3},{value:"Plugin Sandboxing",id:"plugin-sandboxing",level:3},{value:"\ud83d\udcca Monitoring &amp; Observability",id:"-monitoring--observability",level:2},{value:"Metrics Collection",id:"metrics-collection",level:3},{value:"Logging Architecture",id:"logging-architecture",level:3},{value:"\ud83d\udd04 Deployment Architecture",id:"-deployment-architecture",level:2},{value:"Horizontal Scaling",id:"horizontal-scaling",level:3},{value:"High Availability",id:"high-availability",level:3},{value:"\ud83d\udee0\ufe0f Development Patterns",id:"\ufe0f-development-patterns",level:2},{value:"Service Pattern",id:"service-pattern",level:3},{value:"Event-Driven Architecture",id:"event-driven-architecture",level:3},{value:"\ud83d\udcda Further Reading",id:"-further-reading",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"elizaos-architecture-overview",children:"ElizaOS Architecture Overview"})}),"\n",(0,t.jsx)(n.p,{children:"This document provides a comprehensive technical overview of the ElizaOS architecture, designed for developers who want to understand the system's internals and build upon it."}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-system-architecture",children:"\ud83c\udfd7\ufe0f System Architecture"}),"\n",(0,t.jsx)(n.p,{children:"ElizaOS follows a modular, plugin-based architecture that enables flexible AI agent creation and deployment across multiple platforms."}),"\n",(0,t.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Core Runtime"\n        RT[Runtime Engine]\n        MM[Memory Manager]\n        SM[State Manager]\n        EV[Event System]\n    end\n\n    subgraph "Service Layer"\n        DB[Database Service]\n        AI[AI Service]\n        TR[Transport Service]\n        AU[Auth Service]\n    end\n\n    subgraph "Plugin System"\n        PL[Plugin Loader]\n        AC[Actions]\n        PR[Providers]\n        EL[Evaluators]\n        TS[Tasks]\n    end\n\n    subgraph "Platform Adapters"\n        DC[Discord]\n        TW[Twitter]\n        TG[Telegram]\n        WB[Web]\n    end\n\n    RT --\x3e MM\n    RT --\x3e SM\n    RT --\x3e EV\n    RT --\x3e PL\n\n    PL --\x3e AC\n    PL --\x3e PR\n    PL --\x3e EL\n    PL --\x3e TS\n\n    RT --\x3e DB\n    RT --\x3e AI\n    RT --\x3e TR\n    RT --\x3e AU\n\n    TR --\x3e DC\n    TR --\x3e TW\n    TR --\x3e TG\n    TR --\x3e WB'}),"\n",(0,t.jsx)(n.h2,{id:"-core-components",children:"\ud83e\udde9 Core Components"}),"\n",(0,t.jsxs)(n.h3,{id:"runtime-engine-packagescoresrcruntimets",children:["Runtime Engine (",(0,t.jsx)(n.code,{children:"packages/core/src/runtime.ts"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"The heart of ElizaOS, responsible for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Agent Lifecycle Management"}),": Starting, stopping, and managing agent instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Message Processing Pipeline"}),": Routing messages through the plugin system"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Context Assembly"}),": Building comprehensive context for AI interactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Response Generation"}),": Orchestrating AI providers to generate responses"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class AgentRuntime {\n  // Core properties\n  agentId: UUID;\n  character: Character;\n  memory: IMemoryManager;\n  state: IStateManager;\n\n  // Service registry\n  services: Map<string, IService>;\n\n  // Plugin components\n  actions: Map<string, Action>;\n  providers: Map<string, Provider>;\n  evaluators: Map<string, Evaluator>;\n\n  // Message processing\n  async processMessage(message: Message): Promise<Response>;\n  async evaluate(message: Message, response: Response): Promise<void>;\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"memory-system-packagescoresrcmemoryts",children:["Memory System (",(0,t.jsx)(n.code,{children:"packages/core/src/memory.ts"}),")"]}),"\n",(0,t.jsx)(n.p,{children:"Sophisticated memory management with multiple storage types:"}),"\n",(0,t.jsx)(n.h4,{id:"memory-types",children:"Memory Types"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Short-term Memory"}),": Recent conversation context (last 10-20 messages)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Long-term Memory"}),": Persistent facts and relationships"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Episodic Memory"}),": Specific conversation events and outcomes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Semantic Memory"}),": Embeddings for similarity search"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface IMemoryManager {\n  // Core operations\n  createMemory(memory: Memory): Promise<void>;\n  searchMemories(query: string, count: number): Promise<Memory[]>;\n  getRecentMemories(count: number): Promise<Memory[]>;\n\n  // Relationship management\n  createRelationship(userA: UUID, userB: UUID, type: string): Promise<void>;\n  getRelationships(userId: UUID): Promise<Relationship[]>;\n\n  // Embedding operations\n  createEmbedding(text: string): Promise<number[]>;\n  searchByEmbedding(embedding: number[], threshold: number): Promise<Memory[]>;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"state-management",children:"State Management"}),"\n",(0,t.jsx)(n.p,{children:"ElizaOS uses a hierarchical state system:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface State {\n  // Agent state\n  agentId: UUID;\n  roomId: UUID;\n\n  // Conversation state\n  recentMessages: Message[];\n  conversationContext: string;\n  goals: Goal[];\n\n  // User state\n  userId: UUID;\n  userContext: Map<string, any>;\n\n  // Plugin state\n  pluginStates: Map<string, any>;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-plugin-architecture",children:"\ud83d\udd0c Plugin Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"plugin-types",children:"Plugin Types"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Actions"}),": Discrete behaviors the agent can perform"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Action {\n  name: string;\n  description: string;\n  examples: string[][];\n  validate: (context: Context) => Promise<boolean>;\n  execute: (context: Context) => Promise<Response>;\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Providers"}),": Supply contextual information"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Provider {\n  name: string;\n  get: (context: Context) => Promise<string>;\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Evaluators"}),": Post-processing and learning"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Evaluator {\n  name: string;\n  evaluate: (context: Context) => Promise<EvaluationResult>;\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Tasks"}),": Scheduled or deferred operations"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Task {\n  name: string;\n  schedule: CronExpression | 'periodic' | 'once';\n  execute: (context: Context) => Promise<void>;\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"plugin-loading",children:"Plugin Loading"}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant R as Runtime\n    participant PL as PluginLoader\n    participant P as Plugin\n    participant S as ServiceRegistry\n\n    R->>PL: loadPlugin(name)\n    PL->>P: import plugin\n    P->>PL: return { actions, providers, evaluators, services }\n    PL->>S: registerServices(services)\n    PL->>R: registerComponents(actions, providers, evaluators)\n    R->>R: validatePlugin()\n    R->>P: initialize()"}),"\n",(0,t.jsx)(n.h2,{id:"-platform-abstraction",children:"\ud83c\udf10 Platform Abstraction"}),"\n",(0,t.jsx)(n.h3,{id:"roomchannel-abstraction",children:"Room/Channel Abstraction"}),"\n",(0,t.jsx)(n.p,{children:"ElizaOS abstracts platform-specific concepts into a unified model:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Room {\n  id: UUID; // Platform-agnostic ID\n  platformId: string; // Platform-specific ID\n  type: 'discord' | 'twitter' | 'telegram' | 'direct';\n  members: UUID[];\n  metadata: Map<string, any>;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"message-normalization",children:"Message Normalization"}),"\n",(0,t.jsx)(n.p,{children:"All platform messages are normalized:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Message {\n  id: UUID;\n  userId: UUID;\n  roomId: UUID;\n  content: string;\n  attachments: Attachment[];\n  platformData: any; // Original platform message\n  timestamp: Date;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-request-flow",children:"\ud83d\udd04 Request Flow"}),"\n",(0,t.jsx)(n.h3,{id:"message-processing-pipeline",children:"Message Processing Pipeline"}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant C as Client\n    participant T as Transport\n    participant R as Runtime\n    participant M as Memory\n    participant P as Providers\n    participant A as AI Service\n    participant E as Evaluators\n\n    C->>T: Send Message\n    T->>R: Normalized Message\n    R->>M: Store Message\n    R->>M: Retrieve Context\n    R->>P: Gather Provider Data\n    P->>R: Context Data\n    R->>A: Generate Response\n    A->>R: AI Response\n    R->>E: Evaluate Response\n    E->>M: Store Learnings\n    R->>T: Send Response\n    T->>C: Platform Response"}),"\n",(0,t.jsx)(n.h2,{id:"-database-architecture",children:"\ud83d\udcbe Database Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"schema-design",children:"Schema Design"}),"\n",(0,t.jsx)(n.p,{children:"ElizaOS uses a flexible schema that supports multiple database adapters:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Core tables\nCREATE TABLE memories (\n    id UUID PRIMARY KEY,\n    agent_id UUID NOT NULL,\n    user_id UUID,\n    room_id UUID,\n    content TEXT NOT NULL,\n    embedding VECTOR(1536),\n    type VARCHAR(50),\n    created_at TIMESTAMP\n);\n\nCREATE TABLE relationships (\n    id UUID PRIMARY KEY,\n    user_a UUID NOT NULL,\n    user_b UUID NOT NULL,\n    relationship_type VARCHAR(50),\n    strength FLOAT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE goals (\n    id UUID PRIMARY KEY,\n    agent_id UUID NOT NULL,\n    name VARCHAR(255),\n    status VARCHAR(50),\n    objectives JSONB,\n    created_at TIMESTAMP\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"database-adapters",children:"Database Adapters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PostgreSQL"}),": Full-featured with vector support"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SQLite/PGLite"}),": Lightweight for development"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"In-Memory"}),": Testing and ephemeral agents"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-performance-considerations",children:"\ud83d\ude80 Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class CacheManager {\n  // Multi-level cache\n  l1Cache: LRUCache<string, any>; // In-process cache\n  l2Cache: RedisCache; // Distributed cache\n\n  // Cache invalidation\n  invalidatePattern(pattern: string): Promise<void>;\n\n  // Smart caching\n  cacheWithTTL(key: string, value: any, ttl: number): Promise<void>;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"concurrency-model",children:"Concurrency Model"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Message Processing"}),": Concurrent per room, sequential per user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Operations"}),": Read-heavy optimization with write batching"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AI Calls"}),": Request pooling and rate limiting"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Plugin Execution"}),": Isolated execution contexts"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-security-architecture",children:"\ud83d\udd10 Security Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"authentication--authorization",children:"Authentication & Authorization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface SecurityContext {\n  // User authentication\n  userId: UUID;\n  permissions: Permission[];\n\n  // Platform verification\n  platformId: string;\n  platformVerified: boolean;\n\n  // Rate limiting\n  rateLimitBucket: string;\n  requestCount: number;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"plugin-sandboxing",children:"Plugin Sandboxing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Plugins run in isolated contexts"}),"\n",(0,t.jsx)(n.li,{children:"Resource usage limits enforced"}),"\n",(0,t.jsx)(n.li,{children:"API access controlled by permissions"}),"\n",(0,t.jsx)(n.li,{children:"No direct database access"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-monitoring--observability",children:"\ud83d\udcca Monitoring & Observability"}),"\n",(0,t.jsx)(n.h3,{id:"metrics-collection",children:"Metrics Collection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface Metrics {\n  // Performance metrics\n  messageProcessingTime: Histogram;\n  aiResponseTime: Histogram;\n  memoryOperationTime: Histogram;\n\n  // Business metrics\n  messagesProcessed: Counter;\n  activeUsers: Gauge;\n  pluginExecutions: Counter;\n\n  // Error tracking\n  errors: Counter;\n  aiFailures: Counter;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"logging-architecture",children:"Logging Architecture"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Structured logging with correlation IDs"}),"\n",(0,t.jsxs)(n.li,{children:["Log levels: ",(0,t.jsx)(n.code,{children:"trace"}),", ",(0,t.jsx)(n.code,{children:"debug"}),", ",(0,t.jsx)(n.code,{children:"info"}),", ",(0,t.jsx)(n.code,{children:"warn"}),", ",(0,t.jsx)(n.code,{children:"error"}),", ",(0,t.jsx)(n.code,{children:"fatal"})]}),"\n",(0,t.jsx)(n.li,{children:"Automatic PII redaction"}),"\n",(0,t.jsx)(n.li,{children:"Log aggregation support"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-deployment-architecture",children:"\ud83d\udd04 Deployment Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"horizontal-scaling",children:"Horizontal Scaling"}),"\n",(0,t.jsx)(n.mermaid,{value:'graph LR\n    LB[Load Balancer]\n\n    subgraph "Agent Cluster"\n        A1[Agent 1]\n        A2[Agent 2]\n        A3[Agent 3]\n    end\n\n    subgraph "Shared Services"\n        DB[(PostgreSQL)]\n        RD[(Redis)]\n        Q[Message Queue]\n    end\n\n    LB --\x3e A1\n    LB --\x3e A2\n    LB --\x3e A3\n\n    A1 --\x3e DB\n    A2 --\x3e DB\n    A3 --\x3e DB\n\n    A1 --\x3e RD\n    A2 --\x3e RD\n    A3 --\x3e RD\n\n    A1 --\x3e Q\n    A2 --\x3e Q\n    A3 --\x3e Q'}),"\n",(0,t.jsx)(n.h3,{id:"high-availability",children:"High Availability"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Stateless agent instances"}),"\n",(0,t.jsx)(n.li,{children:"Shared state in database/cache"}),"\n",(0,t.jsx)(n.li,{children:"Automatic failover"}),"\n",(0,t.jsx)(n.li,{children:"Health checks and self-healing"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-development-patterns",children:"\ud83d\udee0\ufe0f Development Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"service-pattern",children:"Service Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"abstract class BaseService implements IService {\n  protected runtime: AgentRuntime;\n\n  abstract initialize(): Promise<void>;\n  abstract shutdown(): Promise<void>;\n\n  // Service discovery\n  getService<T extends IService>(name: string): T {\n    return this.runtime.getService<T>(name);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"event-driven-architecture",children:"Event-Driven Architecture"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Event emitter pattern\nruntime.on('message:received', async (message) => {\n  await processMessage(message);\n});\n\nruntime.on('memory:created', async (memory) => {\n  await indexMemory(memory);\n});\n\nruntime.on('goal:completed', async (goal) => {\n  await evaluateGoal(goal);\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-further-reading",children:"\ud83d\udcda Further Reading"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/technical/architecture/core-concepts",children:"Core Concepts Deep Dive"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/technical/development/plugin-development",children:"Plugin Development Guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/technical/architecture/state-management",children:"State Management Details"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/technical/api-reference/core-api",children:"API Reference"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);