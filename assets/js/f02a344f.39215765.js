"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[80313],{21087:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/elizagen-19551f405e733a8f1dafd9ac59f63635.png"},43846:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"core/characterfile","title":"\ud83d\udcdd Character Files","description":"Character files are JSON-formatted configurations that define AI agent personas, combining personality traits, knowledge bases, and interaction patterns to create consistent and effective AI agents. For a full list of capabilities check the character type API docs. You can also view and contribute to open sourced example characterfiles here//github.com/elizaos/characters.","source":"@site/versioned_docs/version-0.25.9/core/characterfile.md","sourceDirName":"core","slug":"/core/characterfile","permalink":"/docs/0.25.9/core/characterfile","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/versioned_docs/version-0.25.9/core/characterfile.md","tags":[],"version":"0.25.9","lastUpdatedBy":"madjin","lastUpdatedAt":1742171474000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/docs/0.25.9/core/overview"},"next":{"title":"Clients","permalink":"/docs/0.25.9/core/clients"}}');var l=i(31085),r=i(71184);const t={},a="\ud83d\udcdd Character Files",c={},o=[{value:"Required Fields",id:"required-fields",level:2},{value:"modelProvider",id:"modelprovider",level:3},{value:"Client Types",id:"client-types",level:3},{value:"Plugins",id:"plugins",level:3},{value:"Settings Configuration",id:"settings-configuration",level:3},{value:"Bio &amp; Lore",id:"bio--lore",level:3},{value:"Style Guidelines",id:"style-guidelines",level:3},{value:"Optional but Recommended Fields",id:"optional-but-recommended-fields",level:3},{value:"Topics",id:"topics",level:4},{value:"Adjectives",id:"adjectives",level:4},{value:"Knowledge Management",id:"knowledge-management",level:2},{value:"Classic Mode (Default)",id:"classic-mode-default",level:3},{value:"RAG Mode",id:"rag-mode",level:3},{value:"Knowledge Path Configuration",id:"knowledge-path-configuration",level:3},{value:"Character Definition Components",id:"character-definition-components",level:2},{value:"Example Character File:",id:"example-character-file",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"-character-files",children:"\ud83d\udcdd Character Files"})}),"\n",(0,l.jsxs)(n.p,{children:["Character files are JSON-formatted configurations that define AI agent personas, combining personality traits, knowledge bases, and interaction patterns to create consistent and effective AI agents. For a full list of capabilities check the ",(0,l.jsx)(n.code,{children:"character"})," type ",(0,l.jsx)(n.a,{href:"/api/type-aliases/character",children:"API docs"}),". You can also view and contribute to open sourced example characterfiles here: ",(0,l.jsx)(n.a,{href:"https://github.com/elizaos/characters",children:"https://github.com/elizaos/characters"}),"."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["For making characters, check out the open source elizagen!: ",(0,l.jsx)(n.a,{href:"https://elizagen.howieduhzit.best/",children:"https://elizagen.howieduhzit.best/"})," > ",(0,l.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:i(83463).A+"",children:(0,l.jsx)(n.img,{src:i(21087).A+"",width:"2880",height:"1134"})})]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"required-fields",children:"Required Fields"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "name": "character_name", // Character\'s display name for identification and in conversations\n  "modelProvider": "openai", // AI model provider (e.g., anthropic, openai, groq, mistral, google)\n  "clients": ["discord", "direct"], // Supported client types\n  "plugins": [], // Array of plugins to use\n  "settings": {\n    // Configuration settings\n    "ragKnowledge": false, // Enable RAG for knowledge (default: false)\n    "secrets": {}, // API keys and sensitive data\n    "voice": {}, // Voice configuration\n    "model": "string", // Optional model override\n    "modelConfig": {} // Optional model configuration\n  },\n  "bio": [], // Character background as a string or array of statements\n  "style": {\n    // Interaction style guide\n    "all": [], // General style rules\n    "chat": [], // Chat-specific style\n    "post": [] // Post-specific style\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"modelprovider",children:"modelProvider"}),"\n",(0,l.jsxs)(n.p,{children:["Supported providers:",(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.code,{children:"openai"}),", ",(0,l.jsx)(n.code,{children:"eternalai"}),", ",(0,l.jsx)(n.code,{children:"anthropic"}),", ",(0,l.jsx)(n.code,{children:"grok"}),", ",(0,l.jsx)(n.code,{children:"groq"}),", ",(0,l.jsx)(n.code,{children:"llama_cloud"}),", ",(0,l.jsx)(n.code,{children:"together"}),", ",(0,l.jsx)(n.code,{children:"llama_local"}),", ",(0,l.jsx)(n.code,{children:"lmstudio"}),", ",(0,l.jsx)(n.code,{children:"google"}),", ",(0,l.jsx)(n.code,{children:"mistral"}),", ",(0,l.jsx)(n.code,{children:"claude_vertex"}),", ",(0,l.jsx)(n.code,{children:"redpill"}),", ",(0,l.jsx)(n.code,{children:"openrouter"}),", ",(0,l.jsx)(n.code,{children:"ollama"}),", ",(0,l.jsx)(n.code,{children:"heurist"}),", ",(0,l.jsx)(n.code,{children:"galadriel"}),", ",(0,l.jsx)(n.code,{children:"falai"}),", ",(0,l.jsx)(n.code,{children:"gaianet"}),", ",(0,l.jsx)(n.code,{children:"ali_bailian"}),", ",(0,l.jsx)(n.code,{children:"volengine"}),", ",(0,l.jsx)(n.code,{children:"nanogpt"}),", ",(0,l.jsx)(n.code,{children:"hyperbolic"}),", ",(0,l.jsx)(n.code,{children:"venice"}),", ",(0,l.jsx)(n.code,{children:"nvidia"}),", ",(0,l.jsx)(n.code,{children:"nineteen_ai"}),", ",(0,l.jsx)(n.code,{children:"akash_chat_api"}),", ",(0,l.jsx)(n.code,{children:"livepeer"}),", ",(0,l.jsx)(n.code,{children:"letzai"}),", ",(0,l.jsx)(n.code,{children:"deepseek"}),", ",(0,l.jsx)(n.code,{children:"infera"}),", ",(0,l.jsx)(n.code,{children:"bedrock"}),", ",(0,l.jsx)(n.code,{children:"atoma"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["See the full list of models in ",(0,l.jsx)(n.a,{href:"api/type-aliases/Models/",children:"api/type-aliases/Models"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"client-types",children:"Client Types"}),"\n",(0,l.jsxs)(n.p,{children:["Supported client integrations in ",(0,l.jsx)(n.code,{children:"clients"})," array:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"discord"}),": Discord bot integration"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"telegram"}),": Telegram bot"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"twitter"}),": Twitter/X bot"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"slack"}),": Slack integration"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"direct"}),": Direct chat interface"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"simsai"}),": SimsAI platform integration"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"plugins",children:"Plugins"}),"\n",(0,l.jsxs)(n.p,{children:["See all the available plugins for Eliza here: ",(0,l.jsx)(n.a,{href:"https://github.com/elizaos-plugins/registry",children:"https://github.com/elizaos-plugins/registry"})]}),"\n",(0,l.jsx)(n.h3,{id:"settings-configuration",children:"Settings Configuration"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"settings"})," object supports:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "settings": {\n    "ragKnowledge": false, // Enable RAG knowledge mode\n    "voice": {\n      "model": "string", // Voice synthesis model\n      "url": "string" // Optional voice API URL\n    },\n    "secrets": {\n      // API keys (use env vars in production)\n      "API_KEY": "string"\n    },\n    "model": "string", // Optional model override\n    "modelConfig": {\n      // Optional model parameters\n      "temperature": 0.7,\n      "maxInputTokens": 4096,\n      "maxOutputTokens": 1024,\n      "frequency_penalty": 0.0,\n      "presence_penalty": 0.0\n    },\n    "imageSettings": {\n      // Optional image generation settings\n      "steps": 20,\n      "width": 1024,\n      "height": 1024,\n      "cfgScale": 7.5,\n      "negativePrompt": "string"\n    }\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"bio--lore",children:"Bio & Lore"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Bio = Core identity, character biography"}),"\n",(0,l.jsx)(n.li,{children:"Lore = Character background lore elements"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "bio": ["Expert in blockchain development", "Specializes in DeFi protocols"],\n  "lore": ["Created first DeFi protocol in 2020", "Helped launch multiple DAOs"]\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Bio & Lore Tips"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Mix factual and personality-defining information"}),"\n",(0,l.jsx)(n.li,{children:"Include both historical and current details"}),"\n",(0,l.jsxs)(n.li,{children:["Break bio and lore into smaller chunks","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This creates more natural, varied responses"}),"\n",(0,l.jsx)(n.li,{children:"Prevents repetitive or predictable behavior"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"style-guidelines",children:"Style Guidelines"}),"\n",(0,l.jsx)(n.p,{children:"Define interaction patterns:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "style": {\n    "all": [\n      // Applied to all interactions\n      "Keep responses clear",\n      "Maintain professional tone"\n    ],\n    "chat": [\n      // Chat-specific style\n      "Engage with curiosity",\n      "Provide explanations"\n    ],\n    "post": [\n      // Social post style\n      "Keep posts informative",\n      "Focus on key points"\n    ]\n  }\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Style Tips"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Be specific about tone and mannerisms"}),"\n",(0,l.jsx)(n.li,{children:"Include platform-specific guidance"}),"\n",(0,l.jsx)(n.li,{children:"Define clear boundaries and limitations"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"optional-but-recommended-fields",children:"Optional but Recommended Fields"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "username": "handle", // Character\'s username/handle\n  "system": "System prompt text", // Custom system prompt\n  "lore": [], // Additional background/history\n  "knowledge": [\n    // Knowledge base entries\n    "Direct string knowledge",\n    { "path": "file/path.md", "shared": false },\n    { "directory": "knowledge/path", "shared": false }\n  ],\n  "messageExamples": [], // Example conversations\n  "postExamples": [], // Example social posts\n  "topics": [], // Areas of expertise\n  "adjectives": [] // Character traits\n}\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h4,{id:"topics",children:"Topics"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"List of subjects the character is interested in or knowledgeable about"}),"\n",(0,l.jsx)(n.li,{children:"Used to guide conversations and generate relevant content"}),"\n",(0,l.jsx)(n.li,{children:"Helps maintain character consistency"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"adjectives",children:"Adjectives"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Words that describe the character's traits and personality"}),"\n",(0,l.jsx)(n.li,{children:"Used for generating responses with a consistent tone"}),"\n",(0,l.jsx)(n.li,{children:'Can be used in "Mad Libs" style content generation'}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"knowledge-management",children:"Knowledge Management"}),"\n",(0,l.jsx)(n.p,{children:"The character system supports two knowledge modes:"}),"\n",(0,l.jsx)(n.h3,{id:"classic-mode-default",children:"Classic Mode (Default)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Direct string knowledge added to character's context"}),"\n",(0,l.jsx)(n.li,{children:"No chunking or semantic search"}),"\n",(0,l.jsxs)(n.li,{children:["Enabled by default (",(0,l.jsx)(n.code,{children:"settings.ragKnowledge: false"}),")"]}),"\n",(0,l.jsx)(n.li,{children:"Only processes string knowledge entries"}),"\n",(0,l.jsx)(n.li,{children:"Simpler but less sophisticated"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"rag-mode",children:"RAG Mode"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Advanced knowledge processing with semantic search"}),"\n",(0,l.jsx)(n.li,{children:"Chunks content and uses embeddings"}),"\n",(0,l.jsxs)(n.li,{children:["Must be explicitly enabled (",(0,l.jsx)(n.code,{children:"settings.ragKnowledge: true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:["Supports three knowledge types:","\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Direct string knowledge"}),"\n",(0,l.jsxs)(n.li,{children:["Single file references: ",(0,l.jsx)(n.code,{children:'{ "path": "path/to/file.md", "shared": false }'})]}),"\n",(0,l.jsxs)(n.li,{children:["Directory references: ",(0,l.jsx)(n.code,{children:'{ "directory": "knowledge/dir", "shared": false }'})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:"Supported file types: .md, .txt, .pdf"}),"\n",(0,l.jsxs)(n.li,{children:["Optional ",(0,l.jsx)(n.code,{children:"shared"})," flag for knowledge reuse across characters"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"knowledge-path-configuration",children:"Knowledge Path Configuration"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Knowledge files are relative to the ",(0,l.jsx)(n.code,{children:"characters/knowledge"})," directory"]}),"\n",(0,l.jsxs)(n.li,{children:["Paths should not contain ",(0,l.jsx)(n.code,{children:"../"})," (sanitized for security)"]}),"\n",(0,l.jsx)(n.li,{children:"Both shared and private knowledge supported"}),"\n",(0,l.jsx)(n.li,{children:"Files automatically reloaded if content changes"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Knowledge Tips"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Focus on relevant information"}),"\n",(0,l.jsx)(n.li,{children:"Organize in digestible chunks"}),"\n",(0,l.jsx)(n.li,{children:"Update regularly to maintain relevance"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Use the provided tools to convert documents into knowledge:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/elizaos/characterfile/blob/main/scripts/folder2knowledge.js",children:"folder2knowledge"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/elizaos/characterfile/blob/main/scripts/knowledge2character.js",children:"knowledge2character"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/elizaos/characterfile/blob/main/scripts/tweets2character.js",children:"tweets2character"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npx folder2knowledge <path/to/folder>\nnpx knowledge2character <character-file> <knowledge-file>\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"character-definition-components",children:"Character Definition Components"}),"\n",(0,l.jsx)(n.h2,{id:"example-character-file",children:"Example Character File:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "name": "Tech Helper",\n  "modelProvider": "anthropic",\n  "clients": ["discord"],\n  "plugins": [],\n  "settings": {\n    "ragKnowledge": true,\n    "voice": {\n      "model": "en_US-male-medium"\n    }\n  },\n  "bio": ["Friendly technical assistant", "Specializes in explaining complex topics simply"],\n  "lore": ["Pioneer in open-source AI development", "Advocate for AI accessibility"],\n  "messageExamples": [\n    [\n      {\n        "user": "{{user1}}",\n        "content": { "text": "Can you explain how AI models work?" }\n      },\n      {\n        "user": "TechAI",\n        "content": {\n          "text": "Think of AI models like pattern recognition systems."\n        }\n      }\n    ]\n  ],\n  "postExamples": [\n    "Understanding AI doesn\'t require a PhD - let\'s break it down simply",\n    "The best AI solutions focus on real human needs"\n  ],\n  "topics": ["artificial intelligence", "machine learning", "technology education"],\n  "knowledge": [\n    {\n      "directory": "tech_guides",\n      "shared": true\n    }\n  ],\n  "adjectives": ["knowledgeable", "approachable", "practical"],\n  "style": {\n    "all": ["Clear", "Patient", "Educational"],\n    "chat": ["Interactive", "Supportive"],\n    "post": ["Concise", "Informative"]\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(14041);const l={},r=s.createContext(l);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(r.Provider,{value:n},e.children)}},83463:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/files/elizagen-19551f405e733a8f1dafd9ac59f63635.png"}}]);