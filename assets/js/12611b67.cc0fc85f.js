"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[46229],{71184:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>t});var r=n(14041);const i={},a=r.createContext(i);function c(e){const s=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(a.Provider,{value:s},e.children)}},78522:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"namespaces/v2/interfaces/TaskWorker","title":"TaskWorker","description":"@elizaos/core v1.3.0 / v2 / TaskWorker","source":"@site/api/namespaces/v2/interfaces/TaskWorker.md","sourceDirName":"namespaces/v2/interfaces","slug":"/namespaces/v2/interfaces/TaskWorker","permalink":"/api/namespaces/v2/interfaces/TaskWorker","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Task","permalink":"/api/namespaces/v2/interfaces/Task"},"next":{"title":"TeeAgent","permalink":"/api/namespaces/v2/interfaces/TeeAgent"}}');var i=n(31085),a=n(71184);const c={},t="Interface: TaskWorker",d={},o=[{value:"Properties",id:"properties",level:2},{value:"name",id:"name",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"execute()",id:"execute",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"validate()?",id:"validate",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-2",level:4}];function l(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/api/",children:"@elizaos/core v1.3.0"})," / ",(0,i.jsx)(s.a,{href:"/api/namespaces/v2/",children:"v2"})," / TaskWorker"]}),"\n",(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"interface-taskworker",children:"Interface: TaskWorker"})}),"\n",(0,i.jsxs)(s.p,{children:["Defines the contract for a Task Worker, which is responsible for executing a specific type of task.\nTask workers are registered with the ",(0,i.jsx)(s.code,{children:"AgentRuntime"})," and are invoked when a ",(0,i.jsx)(s.code,{children:"Task"})," of their designated ",(0,i.jsx)(s.code,{children:"name"})," needs processing.\nThis pattern allows for modular and extensible background task processing."]}),"\n",(0,i.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(s.h3,{id:"name",children:"name"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"name"}),": ",(0,i.jsx)(s.code,{children:"string"})]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["The unique name of the task type this worker handles. This name links ",(0,i.jsx)(s.code,{children:"Task"})," instances to this worker."]}),"\n",(0,i.jsx)(s.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://github.com/zpark/eliza/blob/main/packages/core/src/specs/v2/types.ts#L1575",children:"packages/core/src/specs/v2/types.ts:1575"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"execute",children:"execute()"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"execute"}),": (",(0,i.jsx)(s.code,{children:"runtime"}),", ",(0,i.jsx)(s.code,{children:"options"}),", ",(0,i.jsx)(s.code,{children:"task"}),") => ",(0,i.jsx)(s.code,{children:"Promise"}),"<",(0,i.jsx)(s.code,{children:"void"}),">"]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["The core execution logic for the task. This function is called by the runtime when a task needs to be processed.\nIt receives the ",(0,i.jsx)(s.code,{children:"AgentRuntime"}),", task-specific ",(0,i.jsx)(s.code,{children:"options"}),", and the ",(0,i.jsx)(s.code,{children:"Task"})," object itself."]}),"\n",(0,i.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:["\u2022 ",(0,i.jsx)(s.strong,{children:"runtime"}),": ",(0,i.jsx)(s.a,{href:"/api/namespaces/v2/interfaces/IAgentRuntime",children:(0,i.jsx)(s.code,{children:"IAgentRuntime"})})]}),"\n",(0,i.jsxs)(s.p,{children:["\u2022 ",(0,i.jsx)(s.strong,{children:"options"})]}),"\n",(0,i.jsxs)(s.p,{children:["\u2022 ",(0,i.jsx)(s.strong,{children:"task"}),": ",(0,i.jsx)(s.a,{href:"/api/namespaces/v2/interfaces/Task",children:(0,i.jsx)(s.code,{children:"Task"})})]}),"\n",(0,i.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Promise"}),"<",(0,i.jsx)(s.code,{children:"void"}),">"]}),"\n",(0,i.jsx)(s.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://github.com/zpark/eliza/blob/main/packages/core/src/specs/v2/types.ts#L1580",children:"packages/core/src/specs/v2/types.ts:1580"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"validate",children:"validate()?"}),"\n",(0,i.jsxs)(s.blockquote,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"optional"})," ",(0,i.jsx)(s.strong,{children:"validate"}),": (",(0,i.jsx)(s.code,{children:"runtime"}),", ",(0,i.jsx)(s.code,{children:"message"}),", ",(0,i.jsx)(s.code,{children:"state"}),") => ",(0,i.jsx)(s.code,{children:"Promise"}),"<",(0,i.jsx)(s.code,{children:"boolean"}),">"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Optional validation function that can be used to determine if a task is valid or should be executed,\noften based on the current message and state. This might be used by an action or evaluator\nbefore creating or queueing a task."}),"\n",(0,i.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:["\u2022 ",(0,i.jsx)(s.strong,{children:"runtime"}),": ",(0,i.jsx)(s.a,{href:"/api/namespaces/v2/interfaces/IAgentRuntime",children:(0,i.jsx)(s.code,{children:"IAgentRuntime"})})]}),"\n",(0,i.jsxs)(s.p,{children:["\u2022 ",(0,i.jsx)(s.strong,{children:"message"}),": ",(0,i.jsx)(s.a,{href:"/api/namespaces/v2/interfaces/Memory",children:(0,i.jsx)(s.code,{children:"Memory"})})]}),"\n",(0,i.jsxs)(s.p,{children:["\u2022 ",(0,i.jsx)(s.strong,{children:"state"}),": ",(0,i.jsx)(s.a,{href:"/api/namespaces/v2/interfaces/State",children:(0,i.jsx)(s.code,{children:"State"})})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"Promise"}),"<",(0,i.jsx)(s.code,{children:"boolean"}),">"]}),"\n",(0,i.jsx)(s.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.a,{href:"https://github.com/zpark/eliza/blob/main/packages/core/src/specs/v2/types.ts#L1590",children:"packages/core/src/specs/v2/types.ts:1590"})})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);