"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[41333],{71184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(14041);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},92652:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"plugins/migration/claude-code/advanced-migration-guide","title":"ElizaOS Advanced Migration Guide - v1.x","description":"Important: This guide covers advanced breaking changes for evaluators, services, and runtime methods. Read the main migration-guide.md first for actions, providers, and basic migrations.","source":"@site/docs/plugins/migration/claude-code/advanced-migration-guide.md","sourceDirName":"plugins/migration/claude-code","slug":"/plugins/migration/claude-code/advanced-migration-guide","permalink":"/docs/plugins/migration/claude-code/advanced-migration-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/plugins/migration/claude-code/advanced-migration-guide.md","tags":[],"version":"current","lastUpdatedBy":"0xbbjoker","lastUpdatedAt":1751365903000,"frontMatter":{}}');var s=t(31085),r=t(71184);const a={},c="ElizaOS Advanced Migration Guide - v1.x",l={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Evaluators Migration",id:"evaluators-migration",level:2},{value:"Evaluator Interface Changes",id:"evaluator-interface-changes",level:3},{value:"Key Changes:",id:"key-changes",level:3},{value:"Services &amp; Clients Migration",id:"services--clients-migration",level:2},{value:"Service Registration Changes",id:"service-registration-changes",level:3},{value:"Migration Steps:",id:"migration-steps",level:3},{value:"Runtime Method Changes",id:"runtime-method-changes",level:2},{value:"1. State Management",id:"1-state-management",level:3},{value:"2. Memory Manager Access",id:"2-memory-manager-access",level:3},{value:"3. Model Usage",id:"3-model-usage",level:3},{value:"4. Settings Management",id:"4-settings-management",level:3},{value:"Global Settings Object Removed",id:"global-settings-object-removed",level:4},{value:"New Settings Methods",id:"new-settings-methods",level:4},{value:"Migration Example",id:"migration-example",level:4},{value:"Common Settings Migration Patterns",id:"common-settings-migration-patterns",level:4},{value:"Real-World Fix: Coinbase Plugin",id:"real-world-fix-coinbase-plugin",level:4},{value:"5. Event System",id:"5-event-system",level:3},{value:"Entity System Migration",id:"entity-system-migration",level:2},{value:"User \u2192 Entity",id:"user--entity",level:3},{value:"Participant \u2192 Room Membership",id:"participant--room-membership",level:3},{value:"New World Concept",id:"new-world-concept",level:3},{value:"Connection Management",id:"connection-management",level:3},{value:"Client Migration",id:"client-migration",level:2},{value:"Quick Reference",id:"quick-reference",level:2},{value:"Removed Methods",id:"removed-methods",level:3},{value:"Removed Exports",id:"removed-exports",level:3},{value:"Changed Methods",id:"changed-methods",level:3},{value:"New Methods",id:"new-methods",level:3},{value:"Migration Checklist",id:"migration-checklist",level:2},{value:"Need Help?",id:"need-help",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"elizaos-advanced-migration-guide---v1x",children:"ElizaOS Advanced Migration Guide - v1.x"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important"}),": This guide covers advanced breaking changes for evaluators, services, and runtime methods. Read the main ",(0,s.jsx)(n.a,{href:"/docs/plugins/migration/claude-code/migration-guide",children:"migration-guide.md"})," first for actions, providers, and basic migrations."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#evaluators-migration",children:"Evaluators Migration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#services--clients-migration",children:"Services & Clients Migration"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#runtime-method-changes",children:"Runtime Method Changes"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#entity-system-migration",children:"Entity System Migration"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"evaluators-migration",children:"Evaluators Migration"}),"\n",(0,s.jsx)(n.h3,{id:"evaluator-interface-changes",children:"Evaluator Interface Changes"}),"\n",(0,s.jsx)(n.p,{children:"Evaluators remain largely unchanged in their core structure, but their integration with the runtime has evolved:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0 Evaluator usage remains the same\nexport interface Evaluator {\n  alwaysRun?: boolean;\n  description: string;\n  similes: string[];\n  examples: EvaluationExample[];\n  handler: Handler;\n  name: string;\n  validate: Validator;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"key-changes",children:"Key Changes:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Evaluation Results"}),": The ",(0,s.jsx)(n.code,{children:"evaluate()"})," method now returns ",(0,s.jsx)(n.code,{children:"Evaluator[]"})," instead of ",(0,s.jsx)(n.code,{children:"string[]"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Returns string array of evaluator names\nconst evaluators: string[] = await runtime.evaluate(message, state);\n\n// v1: Returns Evaluator objects\nconst evaluators: Evaluator[] | null = await runtime.evaluate(message, state);\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Additional Parameters"}),": The evaluate method accepts new optional parameters:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v1: Extended evaluate signature\nawait runtime.evaluate(\n    message: Memory,\n    state?: State,\n    didRespond?: boolean,\n    callback?: HandlerCallback,\n    responses?: Memory[]  // NEW: Can pass responses for evaluation\n);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"services--clients-migration",children:"Services & Clients Migration"}),"\n",(0,s.jsx)(n.h3,{id:"service-registration-changes",children:"Service Registration Changes"}),"\n",(0,s.jsx)(n.p,{children:"Services have undergone significant architectural changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Service extends abstract Service class\nexport abstract class Service {\n  static get serviceType(): ServiceType {\n    throw new Error('Service must implement static serviceType getter');\n  }\n\n  public static getInstance<T extends Service>(): T {\n    // Singleton pattern\n  }\n\n  abstract initialize(runtime: IAgentRuntime): Promise<void>;\n}\n\n// v1: Service is now a class with static properties\nexport class Service {\n  static serviceType: ServiceTypeName;\n\n  async initialize(runtime: IAgentRuntime): Promise<void> {\n    // Implementation\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"migration-steps",children:"Migration Steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Remove Singleton Pattern"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Singleton getInstance\nclass MyService extends Service {\n  private static instance: MyService | null = null;\n\n  public static getInstance(): MyService {\n    if (!this.instance) {\n      this.instance = new MyService();\n    }\n    return this.instance;\n  }\n}\n\n// v1: Direct instantiation\nclass MyService extends Service {\n  static serviceType = ServiceTypeName.MY_SERVICE;\n  // No getInstance needed\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Update Service Registration"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Register instance\nawait runtime.registerService(MyService.getInstance());\n\n// v1: Register class\nawait runtime.registerService(MyService);\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service Type Enum Changes"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: ServiceType enum\nexport enum ServiceType {\n  IMAGE_DESCRIPTION = 'image_description',\n  TRANSCRIPTION = 'transcription',\n  // ...\n}\n\n// v1: ServiceTypeName (similar but may have new values)\nexport enum ServiceTypeName {\n  IMAGE_DESCRIPTION = 'image_description',\n  TRANSCRIPTION = 'transcription',\n  // Check for any renamed or new service types\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"runtime-method-changes",children:"Runtime Method Changes"}),"\n",(0,s.jsx)(n.h3,{id:"1-state-management",children:"1. State Management"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"updateRecentMessageState"})," method has been removed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Separate method for updating state\ncurrentState = await runtime.updateRecentMessageState(currentState);\n\n// v1: Use composeState with specific keys\ncurrentState = await runtime.composeState(message, ['RECENT_MESSAGES']);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-memory-manager-access",children:"2. Memory Manager Access"}),"\n",(0,s.jsx)(n.p,{children:"Memory managers are no longer directly accessible:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// v0: Direct access to memory managers\nruntime.messageManager.getMemories({...});\nruntime.registerMemoryManager(manager);\nconst manager = runtime.getMemoryManager("messages");\n\n// v1: Use database adapter methods\nawait runtime.getMemories({\n    roomId,\n    count,\n    unique: false,\n    tableName: "messages",\n    agentId: runtime.agentId\n});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-model-usage",children:"3. Model Usage"}),"\n",(0,s.jsx)(n.p,{children:"Complete overhaul of model interaction:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: generateText with ModelClass\nimport { generateText, ModelClass } from '@elizaos/core';\n\nconst result = await generateText({\n  runtime,\n  context: prompt,\n  modelClass: ModelClass.SMALL,\n});\n\n// v1: useModel with ModelTypeName\nconst result = await runtime.useModel(ModelTypeName.TEXT_SMALL, {\n  prompt,\n  stopSequences: [],\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-settings-management",children:"4. Settings Management"}),"\n",(0,s.jsx)(n.h4,{id:"global-settings-object-removed",children:"Global Settings Object Removed"}),"\n",(0,s.jsxs)(n.p,{children:["The global ",(0,s.jsx)(n.code,{children:"settings"})," object is no longer exported from ",(0,s.jsx)(n.code,{children:"@elizaos/core"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Import and use global settings\nimport { settings } from '@elizaos/core';\n\nconst charityAddress = settings[networkKey];\nconst apiKey = settings.OPENAI_API_KEY;\n\n// v1: Use runtime.getSetting()\n// Remove the settings import\nimport { elizaLogger, type IAgentRuntime } from '@elizaos/core';\n\nconst charityAddress = runtime.getSetting(networkKey);\nconst apiKey = runtime.getSetting('OPENAI_API_KEY');\n"})}),"\n",(0,s.jsx)(n.h4,{id:"new-settings-methods",children:"New Settings Methods"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Only getSetting through runtime\nconst value = runtime.getSetting(key);\n\n// v1: Both get and set\nconst value = runtime.getSetting(key);\nruntime.setSetting(key, value, isSecret);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"migration-example",children:"Migration Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: utils.ts using global settings\nimport { settings } from '@elizaos/core';\n\nexport function getCharityAddress(network: string): string | null {\n  const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`;\n  const charityAddress = settings[networkKey];\n  return charityAddress;\n}\n\n// v1: Pass runtime to access settings\nexport function getCharityAddress(runtime: IAgentRuntime, network: string): string | null {\n  const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`;\n  const charityAddress = runtime.getSetting(networkKey);\n  return charityAddress;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"common-settings-migration-patterns",children:"Common Settings Migration Patterns"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Environment Variables"}),": Both v0 and v1 read from environment variables, but access patterns differ"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Settings"}),": v1 allows runtime setting updates with ",(0,s.jsx)(n.code,{children:"setSetting()"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Secret Management"}),": v1 adds explicit secret handling with the ",(0,s.jsx)(n.code,{children:"isSecret"})," parameter"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"real-world-fix-coinbase-plugin",children:"Real-World Fix: Coinbase Plugin"}),"\n",(0,s.jsxs)(n.p,{children:["The Coinbase plugin's ",(0,s.jsx)(n.code,{children:"getCharityAddress"})," function needs updating:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Current broken code\nimport { settings } from '@elizaos/core'; // ERROR: 'settings' not exported\n\nexport function getCharityAddress(network: string, isCharitable = false): string | null {\n  const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`;\n  const charityAddress = settings[networkKey]; // ERROR: Cannot use settings\n  // ...\n}\n\n// v1: Fixed code - runtime parameter added\nexport function getCharityAddress(\n  runtime: IAgentRuntime, // Add runtime parameter\n  network: string,\n  isCharitable = false\n): string | null {\n  const networkKey = `CHARITY_ADDRESS_${network.toUpperCase()}`;\n  const charityAddress = runtime.getSetting(networkKey); // Use runtime.getSetting\n  // ...\n}\n\n// Update all callers to pass runtime\nconst charityAddress = getCharityAddress(runtime, network);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-event-system",children:"5. Event System"}),"\n",(0,s.jsx)(n.p,{children:"New event-driven architecture:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v1: Register and emit events\nruntime.registerEvent('custom-event', async (params) => {\n  // Handle event\n});\n\nawait runtime.emitEvent('custom-event', { data: 'value' });\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"entity-system-migration",children:"Entity System Migration"}),"\n",(0,s.jsx)(n.p,{children:"The most significant change is the shift from User/Participant to Entity/Room/World:"}),"\n",(0,s.jsx)(n.h3,{id:"user--entity",children:"User \u2192 Entity"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: User-based methods\nawait runtime.ensureUserExists(userId, userName, name, email, source);\nconst account = await runtime.getAccountById(userId);\n\n// v1: Entity-based methods\nawait runtime.ensureConnection({\n  entityId: userId,\n  roomId,\n  userName,\n  name,\n  worldId,\n  source,\n});\nconst entity = await runtime.getEntityById(entityId);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"participant--room-membership",children:"Participant \u2192 Room Membership"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Participant methods\nawait runtime.ensureParticipantExists(userId, roomId);\nawait runtime.ensureParticipantInRoom(userId, roomId);\n\n// v1: Simplified room membership\nawait runtime.ensureParticipantInRoom(entityId, roomId);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"new-world-concept",children:"New World Concept"}),"\n",(0,s.jsx)(n.p,{children:'v1 introduces the concept of "worlds" (servers/environments):'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v1: World management\nawait runtime.ensureWorldExists({\n  id: worldId,\n  name: serverName,\n  type: 'discord', // or other platform\n});\n\n// Get all rooms in a world\nconst rooms = await runtime.getRooms(worldId);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"connection-management",children:"Connection Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Multiple ensure methods\nawait runtime.ensureUserExists(...);\nawait runtime.ensureRoomExists(roomId);\nawait runtime.ensureParticipantInRoom(...);\n\n// v1: Single connection method\nawait runtime.ensureConnection({\n    entityId,\n    roomId,\n    worldId,\n    userName,\n    name,\n    source,\n    channelId,\n    serverId,\n    type: 'user',\n    metadata: {}\n});\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"client-migration",children:"Client Migration"}),"\n",(0,s.jsx)(n.p,{children:"Clients now have a simpler interface:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Client with config\nexport type Client = {\n  name: string;\n  config?: { [key: string]: any };\n  start: (runtime: IAgentRuntime) => Promise<ClientInstance>;\n};\n\n// v1: Client integrated with services\n// Clients are now typically implemented as services\nclass MyClient extends Service {\n  static serviceType = ServiceTypeName.MY_CLIENT;\n\n  async initialize(runtime: IAgentRuntime): Promise<void> {\n    // Start client operations\n  }\n\n  async stop(): Promise<void> {\n    // Stop client operations\n  }\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,s.jsx)(n.h3,{id:"removed-methods",children:"Removed Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"updateRecentMessageState()"})," \u2192 Use ",(0,s.jsx)(n.code,{children:"composeState(message, ['RECENT_MESSAGES'])"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"registerMemoryManager()"})," \u2192 Not needed, use database adapter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getMemoryManager()"})," \u2192 Use database adapter methods"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"registerContextProvider()"})," \u2192 Use ",(0,s.jsx)(n.code,{children:"registerProvider()"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"removed-exports",children:"Removed Exports"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"settings"})," object \u2192 Use ",(0,s.jsx)(n.code,{children:"runtime.getSetting(key)"})," instead"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"changed-methods",children:"Changed Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"evaluate()"})," \u2192 Now returns ",(0,s.jsx)(n.code,{children:"Evaluator[]"})," instead of ",(0,s.jsx)(n.code,{children:"string[]"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"getAccountById()"})," \u2192 ",(0,s.jsx)(n.code,{children:"getEntityById()"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ensureUserExists()"})," \u2192 ",(0,s.jsx)(n.code,{children:"ensureConnection()"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"generateText()"})," \u2192 ",(0,s.jsx)(n.code,{children:"runtime.useModel()"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"new-methods",children:"New Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"setSetting()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"registerEvent()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"emitEvent()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"useModel()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"registerModel()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ensureWorldExists()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"getRooms()"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"migration-checklist",children:"Migration Checklist"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update all evaluator result handling to expect ",(0,s.jsx)(n.code,{children:"Evaluator[]"})," objects"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Remove singleton patterns from services"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update service registration to pass classes instead of instances"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Replace ",(0,s.jsx)(n.code,{children:"updateRecentMessageState"})," with ",(0,s.jsx)(n.code,{children:"composeState"})]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Migrate from ",(0,s.jsx)(n.code,{children:"generateText"})," to ",(0,s.jsx)(n.code,{children:"runtime.useModel"})]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update user/participant methods to entity/room methods"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add world management for multi-server environments"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Convert clients to service-based architecture"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update any direct memory manager access to use database adapter"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Replace ",(0,s.jsx)(n.code,{children:"import { settings }"})," with ",(0,s.jsx)(n.code,{children:"runtime.getSetting()"})," calls"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update functions to accept ",(0,s.jsx)(n.code,{children:"runtime"})," parameter where settings are needed"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"need-help",children:"Need Help?"}),"\n",(0,s.jsx)(n.p,{children:"If you encounter issues not covered in this guide:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Check the main ",(0,s.jsx)(n.a,{href:"/docs/plugins/migration/claude-code/migration-guide",children:"migration-guide.md"})," for basic migrations"]}),"\n",(0,s.jsxs)(n.li,{children:["Review the ",(0,s.jsx)(n.a,{href:"../packages/core/examples",children:"v1.x examples"})," for reference implementations"]}),"\n",(0,s.jsx)(n.li,{children:"Join our Discord community for support"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);