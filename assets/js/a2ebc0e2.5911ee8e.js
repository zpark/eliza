"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[20475],{67519:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"namespaces/v2/type-aliases/ServiceConfig","title":"ServiceConfig","description":"@elizaos/core v1.3.0 / v2 / ServiceConfig","source":"@site/api/namespaces/v2/type-aliases/ServiceConfig.md","sourceDirName":"namespaces/v2/type-aliases","slug":"/namespaces/v2/type-aliases/ServiceConfig","permalink":"/api/namespaces/v2/type-aliases/ServiceConfig","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"SendHandlerFunction","permalink":"/api/namespaces/v2/type-aliases/SendHandlerFunction"},"next":{"title":"ServiceInstance","permalink":"/api/namespaces/v2/type-aliases/ServiceInstance"}}');var c=i(31085),r=i(71184);const t={},a="Type Alias: ServiceConfig",o={},l=[{value:"Defined in",id:"defined-in",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"/api/",children:"@elizaos/core v1.3.0"})," / ",(0,c.jsx)(n.a,{href:"/api/namespaces/v2/",children:"v2"})," / ServiceConfig"]}),"\n",(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"type-alias-serviceconfig",children:"Type Alias: ServiceConfig"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"ServiceConfig"}),": ",(0,c.jsx)(n.code,{children:"Record"}),"<",(0,c.jsx)(n.code,{children:"string"}),", ",(0,c.jsx)(n.code,{children:"unknown"}),">"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["A generic type for service configurations.\nServices (like ",(0,c.jsx)(n.code,{children:"IVideoService"}),", ",(0,c.jsx)(n.code,{children:"IBrowserService"}),") can have their own specific configuration\nstructures. This type allows for a flexible way to pass configuration objects,\ntypically used during service initialization within a plugin or the ",(0,c.jsx)(n.code,{children:"AgentRuntime"}),"."]}),"\n",(0,c.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://github.com/zpark/eliza/blob/main/packages/core/src/specs/v2/types.ts#L2375",children:"packages/core/src/specs/v2/types.ts:2375"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(14041);const c={},r=s.createContext(c);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);