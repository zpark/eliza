"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[71980],{67161:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"technical/advanced/best-practices","title":"Best Practices","description":"Best practices for developing with ElizaOS","source":"@site/docs/technical/advanced/best-practices.md","sourceDirName":"technical/advanced","slug":"/technical/advanced/best-practices","permalink":"/docs/technical/advanced/best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/technical/advanced/best-practices.md","tags":[],"version":"current","lastUpdatedBy":"Sayo","lastUpdatedAt":1751802400000,"frontMatter":{"title":"Best Practices","description":"Best practices for developing with ElizaOS"},"sidebar":"technicalSidebar","previous":{"title":"\ud83d\udc26 Twitter Technical Integration","permalink":"/docs/technical/integrations/twitter-technical"},"next":{"title":"\u26a1 Performance Optimization","permalink":"/docs/technical/advanced/performance"}}');var i=t(31085),a=t(71184);const r={title:"Best Practices",description:"Best practices for developing with ElizaOS"},o=void 0,c={},l=[{value:"Best Practices",id:"best-practices",level:2},{value:"Architecture Best Practices",id:"architecture-best-practices",level:2},{value:"1. Component Design",id:"1-component-design",level:3},{value:"\u2705 DO: Keep Components Small and Focused",id:"-do-keep-components-small-and-focused",level:4},{value:"\u274c DON&#39;T: Create Monolithic Components",id:"-dont-create-monolithic-components",level:4},{value:"2. State Management",id:"2-state-management",level:3},{value:"\u2705 DO: Use Immutable State Updates",id:"-do-use-immutable-state-updates",level:4},{value:"\u274c DON&#39;T: Mutate State Directly",id:"-dont-mutate-state-directly",level:4},{value:"3. Error Handling",id:"3-error-handling",level:3},{value:"\u2705 DO: Implement Comprehensive Error Handling",id:"-do-implement-comprehensive-error-handling",level:4},{value:"\u274c DON&#39;T: Let Errors Propagate Unhandled",id:"-dont-let-errors-propagate-unhandled",level:4},{value:"Plugin Development Best Practices",id:"plugin-development-best-practices",level:2},{value:"1. Plugin Structure",id:"1-plugin-structure",level:3},{value:"2. Resource Management",id:"2-resource-management",level:3},{value:"\u2705 DO: Clean Up Resources",id:"-do-clean-up-resources",level:4},{value:"3. Configuration Validation",id:"3-configuration-validation",level:3},{value:"\u2705 DO: Validate Configuration",id:"-do-validate-configuration",level:4},{value:"Performance Best Practices",id:"performance-best-practices",level:2},{value:"1. Memory Management",id:"1-memory-management",level:3},{value:"\u2705 DO: Implement Memory Limits",id:"-do-implement-memory-limits",level:4},{value:"2. Caching Strategies",id:"2-caching-strategies",level:3},{value:"\u2705 DO: Cache Expensive Operations**",id:"-do-cache-expensive-operations",level:4},{value:"3. Async Operations",id:"3-async-operations",level:3},{value:"\u2705 DO: Use Concurrent Processing",id:"-do-use-concurrent-processing",level:4},{value:"\u274c DON&#39;T: Process Sequentially When Unnecessary",id:"-dont-process-sequentially-when-unnecessary",level:4},{value:"Security Best Practices",id:"security-best-practices",level:2},{value:"1. API Key Management",id:"1-api-key-management",level:3},{value:"\u2705 DO: Use Environment Variables",id:"-do-use-environment-variables",level:4},{value:"\u274c DON&#39;T: Hardcode Secrets",id:"-dont-hardcode-secrets",level:4},{value:"2. Input Validation",id:"2-input-validation",level:3},{value:"\u2705 DO: Validate All External Input",id:"-do-validate-all-external-input",level:4},{value:"3. Rate Limiting",id:"3-rate-limiting",level:3},{value:"\u2705 DO: Implement Rate Limiting",id:"-do-implement-rate-limiting",level:4},{value:"Testing Best Practices",id:"testing-best-practices",level:2},{value:"1. Unit Testing",id:"1-unit-testing",level:3},{value:"2. Integration Testing",id:"2-integration-testing",level:3},{value:"Documentation Best Practices",id:"documentation-best-practices",level:2},{value:"1. Code Documentation",id:"1-code-documentation",level:3},{value:"2. API Documentation",id:"2-api-documentation",level:3},{value:"Deployment Best Practices",id:"deployment-best-practices",level:2},{value:"1. Environment Configuration",id:"1-environment-configuration",level:3},{value:"2. Health Checks",id:"2-health-checks",level:3},{value:"3. Monitoring and Metrics",id:"3-monitoring-and-metrics",level:3},{value:"Common Pitfalls to Avoid",id:"common-pitfalls-to-avoid",level:2},{value:"1. Memory Leaks",id:"1-memory-leaks",level:3},{value:"\u274c Avoid: Unbounded Collections**",id:"-avoid-unbounded-collections",level:4},{value:"\u2705 Fix: Implement Bounds",id:"-fix-implement-bounds",level:4},{value:"2. Blocking Operations",id:"2-blocking-operations",level:3},{value:"\u274c Avoid: Synchronous I/O",id:"-avoid-synchronous-io",level:4},{value:"\u2705 Fix: Use Async Operations",id:"-fix-use-async-operations",level:4},{value:"3. Poor Error Messages",id:"3-poor-error-messages",level:3},{value:"\u274c Avoid: Generic Errors",id:"-avoid-generic-errors",level:4},{value:"\u2705 Fix: Descriptive Errors",id:"-fix-descriptive-errors",level:4},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.p,{children:"This guide covers best practices for developing robust, scalable, and maintainable ElizaOS applications."}),"\n",(0,i.jsx)(n.h2,{id:"architecture-best-practices",children:"Architecture Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-component-design",children:"1. Component Design"}),"\n",(0,i.jsx)(n.h4,{id:"-do-keep-components-small-and-focused",children:"\u2705 DO: Keep Components Small and Focused"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Good: Single responsibility\nexport const greetingAction: Action = {\n  name: 'GREETING',\n  handler: async ({ runtime, message }) => {\n    const greeting = generateGreeting(message.content);\n    return { text: greeting };\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"-dont-create-monolithic-components",children:"\u274c DON'T: Create Monolithic Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Bad: Multiple responsibilities\nexport const everythingAction: Action = {\n  name: 'DO_EVERYTHING',\n  handler: async ({ runtime, message }) => {\n    // Handle greetings, commands, database, API calls...\n    // Too many responsibilities!\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-state-management",children:"2. State Management"}),"\n",(0,i.jsx)(n.h4,{id:"-do-use-immutable-state-updates",children:"\u2705 DO: Use Immutable State Updates"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Good: Immutable update\nconst updateState = (state: State, update: Partial<State>): State => {\n  return { ...state, ...update };\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"-dont-mutate-state-directly",children:"\u274c DON'T: Mutate State Directly"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Bad: Direct mutation\nconst updateState = (state: State, update: Partial<State>): State => {\n  Object.assign(state, update); // Mutates original!\n  return state;\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-error-handling",children:"3. Error Handling"}),"\n",(0,i.jsx)(n.h4,{id:"-do-implement-comprehensive-error-handling",children:"\u2705 DO: Implement Comprehensive Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export const robustAction: Action = {\n  handler: async ({ runtime, message }) => {\n    try {\n      const result = await riskyOperation();\n      return { success: true, data: result };\n    } catch (error) {\n      runtime.logger.error('Operation failed', { error, message });\n\n      // Graceful fallback\n      return {\n        success: false,\n        error: 'Operation temporarily unavailable',\n      };\n    }\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"-dont-let-errors-propagate-unhandled",children:"\u274c DON'T: Let Errors Propagate Unhandled"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Bad: No error handling\nexport const fragileAction: Action = {\n  handler: async ({ runtime, message }) => {\n    const result = await riskyOperation(); // Could crash!\n    return result;\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"plugin-development-best-practices",children:"Plugin Development Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-plugin-structure",children:"1. Plugin Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Good plugin structure\nexport const myPlugin: Plugin = {\n  name: 'my-plugin',\n  version: '1.0.0',\n\n  // Clear dependencies\n  dependencies: ['core', 'memory'],\n\n  // Lifecycle hooks\n  async onLoad(runtime: IAgentRuntime) {\n    // Initialize plugin resources\n  },\n\n  async onUnload(runtime: IAgentRuntime) {\n    // Clean up resources\n  },\n\n  // Modular components\n  actions: [action1, action2],\n  providers: [provider1],\n  evaluators: [evaluator1],\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-resource-management",children:"2. Resource Management"}),"\n",(0,i.jsx)(n.h4,{id:"-do-clean-up-resources",children:"\u2705 DO: Clean Up Resources"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export class ConnectionManager {\n  private connections: Map<string, Connection> = new Map();\n\n  async connect(id: string): Promise<Connection> {\n    const conn = await createConnection();\n    this.connections.set(id, conn);\n    return conn;\n  }\n\n  async cleanup(): Promise<void> {\n    // Clean up all connections\n    for (const [id, conn] of this.connections) {\n      await conn.close();\n    }\n    this.connections.clear();\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-configuration-validation",children:"3. Configuration Validation"}),"\n",(0,i.jsx)(n.h4,{id:"-do-validate-configuration",children:"\u2705 DO: Validate Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export function validateConfig(config: unknown): PluginConfig {\n  const schema = z.object({\n    apiKey: z.string().min(1),\n    endpoint: z.string().url(),\n    timeout: z.number().positive().default(5000),\n    retries: z.number().int().min(0).default(3),\n  });\n\n  return schema.parse(config);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-best-practices",children:"Performance Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-memory-management",children:"1. Memory Management"}),"\n",(0,i.jsx)(n.h4,{id:"-do-implement-memory-limits",children:"\u2705 DO: Implement Memory Limits"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export class MemoryManager {\n  private readonly MAX_MEMORIES = 1000;\n  private memories: Memory[] = [];\n\n  addMemory(memory: Memory): void {\n    this.memories.push(memory);\n\n    // Prune old memories if limit exceeded\n    if (this.memories.length > this.MAX_MEMORIES) {\n      this.memories = this.memories\n        .sort((a, b) => b.importance - a.importance)\n        .slice(0, this.MAX_MEMORIES);\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-caching-strategies",children:"2. Caching Strategies"}),"\n",(0,i.jsx)(n.h4,{id:"-do-cache-expensive-operations",children:"\u2705 DO: Cache Expensive Operations**"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export class CachedProvider implements Provider {\n  private cache = new Map<string, CacheEntry>();\n  private readonly TTL = 5 * 60 * 1000; // 5 minutes\n\n  async get(key: string): Promise<any> {\n    const cached = this.cache.get(key);\n\n    if (cached && Date.now() - cached.timestamp < this.TTL) {\n      return cached.value;\n    }\n\n    const value = await this.fetchData(key);\n    this.cache.set(key, { value, timestamp: Date.now() });\n    return value;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-async-operations",children:"3. Async Operations"}),"\n",(0,i.jsx)(n.h4,{id:"-do-use-concurrent-processing",children:"\u2705 DO: Use Concurrent Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Good: Parallel processing\nexport async function processMessages(messages: Message[]): Promise<Result[]> {\n  return Promise.all(messages.map((msg) => processMessage(msg)));\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"-dont-process-sequentially-when-unnecessary",children:"\u274c DON'T: Process Sequentially When Unnecessary"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Bad: Sequential processing\nexport async function processMessages(messages: Message[]): Promise<Result[]> {\n  const results = [];\n  for (const msg of messages) {\n    results.push(await processMessage(msg)); // Slow!\n  }\n  return results;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"security-best-practices",children:"Security Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-api-key-management",children:"1. API Key Management"}),"\n",(0,i.jsx)(n.h4,{id:"-do-use-environment-variables",children:"\u2705 DO: Use Environment Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export const config = {\n  apiKey: process.env.API_KEY,\n  secretKey: process.env.SECRET_KEY,\n};\n\n// Validate at startup\nif (!config.apiKey) {\n  throw new Error('API_KEY environment variable required');\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"-dont-hardcode-secrets",children:"\u274c DON'T: Hardcode Secrets"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Bad: Never do this!\nexport const config = {\n  apiKey: 'sk-1234567890abcdef',\n  secretKey: 'secret123',\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-input-validation",children:"2. Input Validation"}),"\n",(0,i.jsx)(n.h4,{id:"-do-validate-all-external-input",children:"\u2705 DO: Validate All External Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export const validateMessage: Evaluator = {\n  async evaluate({ message }): Promise<boolean> {\n    // Validate message structure\n    if (!message.content || typeof message.content !== 'string') {\n      return false;\n    }\n\n    // Validate content length\n    if (message.content.length > 10000) {\n      return false;\n    }\n\n    // Validate against injection attacks\n    if (containsSqlInjection(message.content)) {\n      return false;\n    }\n\n    return true;\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-rate-limiting",children:"3. Rate Limiting"}),"\n",(0,i.jsx)(n.h4,{id:"-do-implement-rate-limiting",children:"\u2705 DO: Implement Rate Limiting"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export class RateLimiter {\n  private requests = new Map<string, number[]>();\n  private readonly limit = 100;\n  private readonly window = 60 * 1000; // 1 minute\n\n  canMakeRequest(userId: string): boolean {\n    const now = Date.now();\n    const userRequests = this.requests.get(userId) || [];\n\n    // Remove old requests\n    const recentRequests = userRequests.filter((time) => now - time < this.window);\n\n    if (recentRequests.length >= this.limit) {\n      return false;\n    }\n\n    recentRequests.push(now);\n    this.requests.set(userId, recentRequests);\n    return true;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-best-practices",children:"Testing Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-unit-testing",children:"1. Unit Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Good: Comprehensive unit tests\ndescribe('GreetingAction', () => {\n  let runtime: MockRuntime;\n\n  beforeEach(() => {\n    runtime = createMockRuntime();\n  });\n\n  it('should generate appropriate greeting', async () => {\n    const message = createMessage('Hello');\n    const result = await greetingAction.handler({\n      runtime,\n      message,\n      state: {},\n    });\n\n    expect(result.text).toContain('Hello');\n  });\n\n  it('should handle empty messages', async () => {\n    const message = createMessage('');\n    const result = await greetingAction.handler({\n      runtime,\n      message,\n      state: {},\n    });\n\n    expect(result.text).toBeDefined();\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-integration-testing",children:"2. Integration Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Test full plugin integration\ndescribe('Plugin Integration', () => {\n  let runtime: IAgentRuntime;\n\n  beforeAll(async () => {\n    runtime = await createTestRuntime();\n    await runtime.loadPlugin(myPlugin);\n  });\n\n  afterAll(async () => {\n    await runtime.cleanup();\n  });\n\n  it('should process messages end-to-end', async () => {\n    const response = await runtime.processMessage({\n      content: 'Test message',\n      userId: 'test-user',\n    });\n\n    expect(response).toBeDefined();\n    expect(response.success).toBe(true);\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"documentation-best-practices",children:"Documentation Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-code-documentation",children:"1. Code Documentation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'/**\n * Processes incoming messages and generates appropriate responses.\n *\n * @param message - The incoming message to process\n * @param context - Additional context for message processing\n * @returns Promise resolving to the response message\n *\n * @example\n * ```typescript\n * const response = await processMessage(\n *   { content: "Hello", userId: "123" },\n *   { sessionId: "abc" }\n * );\n * ```\n *\n * @throws {ValidationError} If message format is invalid\n * @throws {ProcessingError} If message processing fails\n */\nexport async function processMessage(message: Message, context?: Context): Promise<Response> {\n  // Implementation\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-api-documentation",children:"2. API Documentation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Document public APIs clearly\nexport interface ActionHandler {\n  /**\n   * Executes the action with the given parameters.\n   *\n   * @param params - Action execution parameters\n   * @param params.runtime - The agent runtime instance\n   * @param params.message - The message triggering this action\n   * @param params.state - Current conversation state\n   *\n   * @returns Action result or null if action cannot handle the message\n   */\n  (params: ActionParams): Promise<ActionResult | null>;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"deployment-best-practices",children:"Deployment Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"1-environment-configuration",children:"1. Environment Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Production configuration\nNODE_ENV=production\nLOG_LEVEL=info\nDATABASE_URL=postgresql://...\nREDIS_URL=redis://...\n\n# Feature flags\nENABLE_CACHE=true\nENABLE_METRICS=true\nENABLE_PROFILING=false\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-health-checks",children:"2. Health Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export const healthCheck: Action = {\n  name: 'HEALTH_CHECK',\n  handler: async ({ runtime }) => {\n    const checks = {\n      database: await checkDatabase(runtime),\n      memory: checkMemoryUsage(),\n      services: await checkServices(runtime),\n      uptime: process.uptime(),\n    };\n\n    const healthy = Object.values(checks).every((check) => check !== false);\n\n    return {\n      status: healthy ? 'healthy' : 'unhealthy',\n      checks,\n    };\n  },\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-monitoring-and-metrics",children:"3. Monitoring and Metrics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export class MetricsCollector {\n  private metrics = {\n    messagesProcessed: 0,\n    errors: 0,\n    avgResponseTime: 0,\n  };\n\n  recordMessage(duration: number): void {\n    this.metrics.messagesProcessed++;\n    this.updateAvgResponseTime(duration);\n  }\n\n  recordError(): void {\n    this.metrics.errors++;\n  }\n\n  getMetrics(): Metrics {\n    return { ...this.metrics };\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls-to-avoid",children:"Common Pitfalls to Avoid"}),"\n",(0,i.jsx)(n.h3,{id:"1-memory-leaks",children:"1. Memory Leaks"}),"\n",(0,i.jsx)(n.h4,{id:"-avoid-unbounded-collections",children:"\u274c Avoid: Unbounded Collections**"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Bad: Grows forever\nclass MessageHistory {\n  private messages: Message[] = [];\n\n  addMessage(msg: Message): void {\n    this.messages.push(msg); // Never cleaned!\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"-fix-implement-bounds",children:"\u2705 Fix: Implement Bounds"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Good: Bounded collection\nclass MessageHistory {\n  private messages: Message[] = [];\n  private readonly maxSize = 1000;\n\n  addMessage(msg: Message): void {\n    this.messages.push(msg);\n    if (this.messages.length > this.maxSize) {\n      this.messages.shift(); // Remove oldest\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-blocking-operations",children:"2. Blocking Operations"}),"\n",(0,i.jsx)(n.h4,{id:"-avoid-synchronous-io",children:"\u274c Avoid: Synchronous I/O"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Bad: Blocks event loop\nimport { readFileSync } from 'fs';\n\nexport function loadConfig(): Config {\n  const data = readFileSync('config.json', 'utf8');\n  return JSON.parse(data);\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"-fix-use-async-operations",children:"\u2705 Fix: Use Async Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Good: Non-blocking\nimport { readFile } from 'fs/promises';\n\nexport async function loadConfig(): Promise<Config> {\n  const data = await readFile('config.json', 'utf8');\n  return JSON.parse(data);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-poor-error-messages",children:"3. Poor Error Messages"}),"\n",(0,i.jsx)(n.h4,{id:"-avoid-generic-errors",children:"\u274c Avoid: Generic Errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Bad: Not helpful\nthrow new Error('Operation failed');\n"})}),"\n",(0,i.jsx)(n.h4,{id:"-fix-descriptive-errors",children:"\u2705 Fix: Descriptive Errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Good: Informative\nthrow new Error(`Failed to connect to database at ${dbUrl}: ${error.message}`);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Following these best practices will help you build robust, scalable, and maintainable ElizaOS applications. Remember:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep it simple"}),": Don't over-engineer solutions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle errors gracefully"}),": Plan for failure scenarios"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document your code"}),": Future you will thank present you"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test thoroughly"}),": Automated tests save time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitor production"}),": You can't fix what you can't see"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For more specific guidance, see:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/technical/architecture/overview",children:"Architecture Overview"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/technical/architecture/core-concepts",children:"Core Concepts"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/technical/development/plugin-development",children:"Plugin Development Guide"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(14041);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);