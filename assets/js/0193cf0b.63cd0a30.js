"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[79651],{70957:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"technical/development/plugin-development","title":"Plugin Development Guide","description":"Comprehensive guide to developing plugins for ElizaOS","source":"@site/docs/technical/development/plugin-development.md","sourceDirName":"technical/development","slug":"/technical/development/plugin-development","permalink":"/docs/technical/development/plugin-development","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/technical/development/plugin-development.md","tags":[],"version":"current","lastUpdatedBy":"Sayo","lastUpdatedAt":1751802400000,"frontMatter":{"title":"Plugin Development Guide","description":"Comprehensive guide to developing plugins for ElizaOS"},"sidebar":"technicalSidebar","previous":{"title":"\ud83d\ude80 Creating Plugins","permalink":"/docs/technical/development/creating-plugins"},"next":{"title":"\ud83c\udfae Discord Technical Integration","permalink":"/docs/technical/integrations/discord-technical"}}');var s=i(31085),r=i(71184);const a={title:"Plugin Development Guide",description:"Comprehensive guide to developing plugins for ElizaOS"},c="Plugin Development Guide",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Plugin Structure",id:"plugin-structure",level:3},{value:"Basic Plugin Template",id:"basic-plugin-template",level:3},{value:"Creating Actions",id:"creating-actions",level:2},{value:"Action Structure",id:"action-structure",level:3},{value:"Advanced Action Features",id:"advanced-action-features",level:3},{value:"Creating Providers",id:"creating-providers",level:2},{value:"Basic Provider",id:"basic-provider",level:3},{value:"Advanced Provider with Caching",id:"advanced-provider-with-caching",level:3},{value:"Creating Evaluators",id:"creating-evaluators",level:2},{value:"Basic Evaluator",id:"basic-evaluator",level:3},{value:"Chained Evaluators",id:"chained-evaluators",level:3},{value:"Creating Services",id:"creating-services",level:2},{value:"Basic Service",id:"basic-service",level:3},{value:"Advanced Service with State Management",id:"advanced-service-with-state-management",level:3},{value:"Plugin Configuration",id:"plugin-configuration",level:2},{value:"Configuration Schema",id:"configuration-schema",level:3},{value:"Using Configuration",id:"using-configuration",level:3},{value:"Testing Plugins",id:"testing-plugins",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Publishing Plugins",id:"publishing-plugins",level:2},{value:"Package Configuration",id:"package-configuration",level:3},{value:"Publishing Steps",id:"publishing-steps",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Error Handling",id:"1-error-handling",level:3},{value:"2. Resource Management",id:"2-resource-management",level:3},{value:"3. Performance Optimization",id:"3-performance-optimization",level:3},{value:"4. Documentation",id:"4-documentation",level:3},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Plugin Composition",id:"plugin-composition",level:3},{value:"Dynamic Plugin Loading",id:"dynamic-plugin-loading",level:3},{value:"Plugin Communication",id:"plugin-communication",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Resources",id:"resources",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"plugin-development-guide",children:"Plugin Development Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide walks you through creating custom plugins for ElizaOS, from basic concepts to advanced patterns."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"ElizaOS plugins extend agent capabilities through a standardized interface. Plugins can add:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Actions"}),": New ways for agents to respond to user input"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Providers"}),": Context and data sources for agent decision-making"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Evaluators"}),": Message analysis and processing logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Services"}),": Shared functionality and integrations"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Node.js 23.3.0 or higher"}),"\n",(0,s.jsx)(n.li,{children:"TypeScript knowledge"}),"\n",(0,s.jsx)(n.li,{children:"Basic understanding of ElizaOS concepts"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"plugin-structure",children:"Plugin Structure"}),"\n",(0,s.jsx)(n.p,{children:"A basic plugin follows this structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"my-plugin/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts          # Main plugin export\n\u2502   \u251c\u2500\u2500 actions/          # Action handlers\n\u2502   \u251c\u2500\u2500 providers/        # Context providers\n\u2502   \u251c\u2500\u2500 evaluators/       # Message evaluators\n\u2502   \u2514\u2500\u2500 services/         # Background services\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,s.jsx)(n.h3,{id:"basic-plugin-template",children:"Basic Plugin Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/index.ts\nimport { Plugin, IAgentRuntime } from '@elizaos/core';\nimport { myAction } from './actions/myAction';\nimport { myProvider } from './providers/myProvider';\nimport { myEvaluator } from './evaluators/myEvaluator';\nimport { MyService } from './services/myService';\n\nconst myPlugin: Plugin = {\n  name: 'my-plugin',\n  description: 'My custom ElizaOS plugin',\n\n  // Core components\n  actions: [myAction],\n  providers: [myProvider],\n  evaluators: [myEvaluator],\n  services: [MyService], // Service classes, not instances\n\n  // Optional configuration\n  config: {\n    apiKey: 'your-api-key-here',\n  },\n\n  // Lifecycle hooks\n  async init(config: Record<string, string>, runtime: IAgentRuntime) {\n    console.log('My plugin initialized!');\n    // Initialize plugin resources\n  },\n};\n\nexport default myPlugin;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-actions",children:"Creating Actions"}),"\n",(0,s.jsx)(n.p,{children:"Actions define how your plugin responds to user messages."}),"\n",(0,s.jsx)(n.h3,{id:"action-structure",children:"Action Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/actions/myAction.ts\nimport { Action, IAgentRuntime, Memory, State } from '@elizaos/core';\n\nexport const myAction: Action = {\n  name: 'MY_ACTION',\n  description: 'Performs a custom action',\n\n  // Validation function - determines if this action should handle the message\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    // Return true if this action should handle the message\n    return message.content.text.toLowerCase().includes('do something');\n  },\n\n  // Handler function - executes the action\n  handler: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    // Perform your action logic\n    const result = await performCustomLogic(message);\n\n    // Return response\n    return {\n      text: `Action completed: ${result}`,\n      action: 'MY_ACTION',\n    };\n  },\n\n  // Examples for training/testing\n  examples: [\n    [\n      {\n        user: '{{user}}',\n        content: { text: 'Can you do something special?' },\n      },\n      {\n        user: '{{agent}}',\n        content: { text: \"I'll do something special for you!\", action: 'MY_ACTION' },\n      },\n    ],\n  ],\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-action-features",children:"Advanced Action Features"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const advancedAction: Action = {\n  name: 'ADVANCED_ACTION',\n  description: 'Demonstrates advanced action features',\n\n  // Similarity threshold for matching\n  similes: ['similar action', 'related command'],\n\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    // Access services\n    const customService = runtime.getService('custom-service');\n\n    // Check permissions\n    const hasPermission = await customService.checkPermission(message.entityId);\n\n    // Complex validation logic\n    return hasPermission && isValidCommand(message.content.text);\n  },\n\n  handler: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    // Access character configuration\n    const character = runtime.character;\n\n    // Use providers for context\n    const context = await runtime.getProvider('custom-context');\n\n    // Access conversation state\n    const previousMessages = await runtime.messageManager.getMemories({\n      roomId: message.roomId,\n      count: 10,\n    });\n\n    // Perform action with full context\n    const response = await processWithContext(message, context, previousMessages);\n\n    // Store action result in state\n    if (state) {\n      state.data.lastAction = {\n        type: 'ADVANCED_ACTION',\n        timestamp: Date.now(),\n        result: response,\n      };\n    }\n\n    return response;\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-providers",children:"Creating Providers"}),"\n",(0,s.jsx)(n.p,{children:"Providers supply dynamic context to agents."}),"\n",(0,s.jsx)(n.h3,{id:"basic-provider",children:"Basic Provider"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/providers/myProvider.ts\nimport { Provider, IAgentRuntime, Memory, State } from '@elizaos/core';\n\nexport const myProvider: Provider = {\n  get: async (runtime: IAgentRuntime, message?: Memory, state?: State) => {\n    // Gather contextual information\n    const data = await fetchRelevantData();\n\n    // Format for agent consumption\n    return `Current context: ${JSON.stringify(data)}`;\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-provider-with-caching",children:"Advanced Provider with Caching"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const cachedProvider: Provider = {\n  get: async (runtime: IAgentRuntime, message?: Memory) => {\n    const cacheKey = `provider-${message?.roomId || 'global'}`;\n    const cacheService = runtime.getService('cache');\n\n    // Check cache first\n    const cached = await cacheService.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < 60000) {\n      // 1 minute TTL\n      return cached.data;\n    }\n\n    // Fetch fresh data\n    const freshData = await complexDataFetch();\n\n    // Update cache\n    await cacheService.set(cacheKey, {\n      data: freshData,\n      timestamp: Date.now(),\n    });\n\n    return freshData;\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-evaluators",children:"Creating Evaluators"}),"\n",(0,s.jsx)(n.p,{children:"Evaluators analyze messages and determine processing paths."}),"\n",(0,s.jsx)(n.h3,{id:"basic-evaluator",children:"Basic Evaluator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/evaluators/myEvaluator.ts\nimport { Evaluator, IAgentRuntime, Memory, State } from '@elizaos/core';\n\nexport const myEvaluator: Evaluator = {\n  name: 'MY_EVALUATOR',\n\n  // Validation - should this evaluator process the message?\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    return message.content.text.length > 10;\n  },\n\n  // Evaluation logic\n  handler: async (runtime: IAgentRuntime, message: Memory) => {\n    // Analyze message\n    const sentiment = await analyzeSentiment(message.content.text);\n    const intent = await detectIntent(message.content.text);\n\n    // Store evaluation results\n    await runtime.messageManager.createMemory({\n      ...message,\n      content: {\n        ...message.content,\n        evaluations: {\n          sentiment,\n          intent,\n          evaluator: 'MY_EVALUATOR',\n        },\n      },\n    });\n\n    // Return evaluation context\n    return {\n      sentiment,\n      intent,\n      shouldRespond: sentiment.score < -0.5 || intent.type === 'question',\n    };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"chained-evaluators",children:"Chained Evaluators"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const chainedEvaluator: Evaluator = {\n  name: 'CHAINED_EVALUATOR',\n\n  handler: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    // Run multiple evaluations in sequence\n    const evaluations = [];\n\n    // Sentiment analysis\n    if (await shouldAnalyzeSentiment(message)) {\n      const sentiment = await analyzeSentiment(message.content.text);\n      evaluations.push({ type: 'sentiment', result: sentiment });\n    }\n\n    // Entity extraction\n    if (await shouldExtractEntities(message)) {\n      const entities = await extractEntities(message.content.text);\n      evaluations.push({ type: 'entities', result: entities });\n    }\n\n    // Topic classification\n    if (await shouldClassifyTopic(message)) {\n      const topics = await classifyTopics(message.content.text);\n      evaluations.push({ type: 'topics', result: topics });\n    }\n\n    // Aggregate results\n    return {\n      evaluations,\n      summary: summarizeEvaluations(evaluations),\n      recommendations: generateRecommendations(evaluations),\n    };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"creating-services",children:"Creating Services"}),"\n",(0,s.jsx)(n.p,{children:"Services provide shared functionality across your plugin."}),"\n",(0,s.jsx)(n.h3,{id:"basic-service",children:"Basic Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/services/myService.ts\nimport { Service, IAgentRuntime } from '@elizaos/core';\n\nexport class MyService extends Service {\n  static serviceType = 'my-service';\n  capabilityDescription = 'Provides custom service functionality';\n\n  constructor(runtime?: IAgentRuntime) {\n    super(runtime);\n  }\n\n  static async start(runtime: IAgentRuntime): Promise<MyService> {\n    const service = new MyService(runtime);\n    await service.initialize();\n    return service;\n  }\n\n  async stop(): Promise<void> {\n    // Cleanup resources\n    await this.closeConnections();\n  }\n\n  private async initialize(): Promise<void> {\n    // Initialize service resources\n    await this.setupConnections();\n  }\n\n  // Service methods\n  async performOperation(data: any): Promise<any> {\n    // Service logic\n    return this.processData(data);\n  }\n\n  private async setupConnections(): Promise<void> {\n    // Setup logic\n  }\n\n  private async closeConnections(): Promise<void> {\n    // Cleanup logic\n  }\n\n  private processData(data: any): any {\n    // Data processing logic\n    return data;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-service-with-state-management",children:"Advanced Service with State Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export class StatefulService extends Service {\n  private state: Map<string, any> = new Map();\n  private subscriptions: Map<string, Function[]> = new Map();\n\n  // State management\n  setState(key: string, value: any): void {\n    const oldValue = this.state.get(key);\n    this.state.set(key, value);\n\n    // Notify subscribers\n    this.notifySubscribers(key, value, oldValue);\n  }\n\n  getState(key: string): any {\n    return this.state.get(key);\n  }\n\n  // Subscription management\n  subscribe(key: string, callback: Function): () => void {\n    if (!this.subscriptions.has(key)) {\n      this.subscriptions.set(key, []);\n    }\n\n    this.subscriptions.get(key)!.push(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const callbacks = this.subscriptions.get(key) || [];\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    };\n  }\n\n  private notifySubscribers(key: string, newValue: any, oldValue: any): void {\n    const callbacks = this.subscriptions.get(key) || [];\n    callbacks.forEach((callback) => {\n      try {\n        callback(newValue, oldValue);\n      } catch (error) {\n        console.error('Subscriber error:', error);\n      }\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"plugin-configuration",children:"Plugin Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"configuration-schema",children:"Configuration Schema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/config.ts\nexport const configSchema = {\n  type: 'object',\n  properties: {\n    apiKey: {\n      type: 'string',\n      description: 'API key for external service',\n      required: true,\n    },\n    endpoint: {\n      type: 'string',\n      description: 'Service endpoint URL',\n      default: 'https://api.example.com',\n    },\n    timeout: {\n      type: 'number',\n      description: 'Request timeout in milliseconds',\n      default: 5000,\n    },\n    features: {\n      type: 'object',\n      properties: {\n        enableCache: {\n          type: 'boolean',\n          default: true,\n        },\n        cacheSize: {\n          type: 'number',\n          default: 100,\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-configuration",children:"Using Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const myPlugin: Plugin = {\n  name: 'my-plugin',\n\n  async onLoad(runtime: IAgentRuntime) {\n    // Get plugin configuration\n    const config = runtime.getSetting('myPlugin');\n\n    // Validate configuration\n    if (!config?.apiKey) {\n      throw new Error('API key is required for my-plugin');\n    }\n\n    // Initialize with config\n    const service = new MyService(config);\n    await service.initialize();\n\n    // Register service\n    runtime.registerService('my-service', service);\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-plugins",children:"Testing Plugins"}),"\n",(0,s.jsx)(n.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// tests/myAction.test.ts\nimport { describe, it, expect, beforeEach } from 'bun:test';\nimport { createMockRuntime } from '@elizaos/testing';\nimport { myAction } from '../src/actions/myAction';\n\ndescribe('myAction', () => {\n  let runtime: any;\n\n  beforeEach(() => {\n    runtime = createMockRuntime();\n  });\n\n  it('should validate correct messages', async () => {\n    const message = {\n      content: { text: 'Please do something special' },\n      userId: 'test-user',\n      roomId: 'test-room',\n    };\n\n    const isValid = await myAction.validate(runtime, message);\n    expect(isValid).toBe(true);\n  });\n\n  it('should handle action correctly', async () => {\n    const message = {\n      content: { text: 'Do something now' },\n      userId: 'test-user',\n      roomId: 'test-room',\n    };\n\n    const result = await myAction.handler(runtime, message);\n    expect(result.text).toContain('Action completed');\n    expect(result.action).toBe('MY_ACTION');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// tests/integration.test.ts\nimport { describe, it, expect } from 'bun:test';\nimport { createTestAgent } from '@elizaos/testing';\nimport myPlugin from '../src';\n\ndescribe('Plugin Integration', () => {\n  it('should load and function correctly', async () => {\n    // Create test agent with plugin\n    const agent = await createTestAgent({\n      plugins: [myPlugin],\n      character: {\n        name: 'TestAgent',\n        plugins: ['my-plugin'],\n      },\n    });\n\n    // Send test message\n    const response = await agent.processMessage({\n      content: { text: 'Do something special' },\n      userId: 'test-user',\n      roomId: 'test-room',\n    });\n\n    // Verify plugin handled the message\n    expect(response.action).toBe('MY_ACTION');\n    expect(response.text).toContain('Action completed');\n\n    // Cleanup\n    await agent.cleanup();\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"publishing-plugins",children:"Publishing Plugins"}),"\n",(0,s.jsx)(n.h3,{id:"package-configuration",children:"Package Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "name": "@your-org/elizaos-plugin-custom",\n  "version": "1.0.0",\n  "description": "Custom plugin for ElizaOS",\n  "main": "dist/index.js",\n  "types": "dist/index.d.ts",\n  "scripts": {\n    "build": "tsc",\n    "test": "bun test",\n    "prepare": "bun run build"\n  },\n  "keywords": ["elizaos", "plugin", "ai", "agent"],\n  "peerDependencies": {\n    "@elizaos/core": "^1.0.0"\n  },\n  "devDependencies": {\n    "@elizaos/core": "^1.0.0",\n    "@elizaos/testing": "^1.0.0",\n    "typescript": "^5.0.0"\n  },\n  "files": ["dist", "README.md", "LICENSE"],\n  "publishConfig": {\n    "access": "public"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"publishing-steps",children:"Publishing Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Build your plugin"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bun run build\nbun run test\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Publish to npm"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"bun publish\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Document usage"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:'# Installation\n\nbun add @your-org/elizaos-plugin-custom\n\n# Usage\n\nAdd to your character configuration:\n\n```json\n{\n  "plugins": ["@your-org/elizaos-plugin-custom"]\n}\n```\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-error-handling",children:"1. Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"Always handle errors gracefully:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const robustAction: Action = {\n  handler: async (runtime, message) => {\n    try {\n      const result = await riskyOperation();\n      return { text: `Success: ${result}` };\n    } catch (error) {\n      runtime.logger.error('Action failed', { error, message });\n\n      // Graceful fallback\n      return {\n        text: 'I encountered an issue processing that request. Please try again.',\n        error: true,\n      };\n    }\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-resource-management",children:"2. Resource Management"}),"\n",(0,s.jsx)(n.p,{children:"Clean up resources properly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const myPlugin: Plugin = {\n  onLoad: async (runtime) => {\n    // Initialize resources\n    const connection = await createConnection();\n    runtime.registerService('connection', connection);\n  },\n\n  onUnload: async (runtime) => {\n    // Cleanup resources\n    const connection = runtime.getService('connection');\n    await connection?.close();\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-performance-optimization",children:"3. Performance Optimization"}),"\n",(0,s.jsx)(n.p,{children:"Cache expensive operations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const cachedAction: Action = {\n  handler: async (runtime, message) => {\n    const cacheKey = `result-${message.content.text}`;\n\n    // Check cache\n    const cached = await runtime.cacheGet(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    // Compute result\n    const result = await expensiveOperation(message);\n\n    // Cache for 5 minutes\n    await runtime.cacheSet(cacheKey, result, 300);\n\n    return result;\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-documentation",children:"4. Documentation"}),"\n",(0,s.jsx)(n.p,{children:"Document your plugin thoroughly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'/**\n * Weather Plugin for ElizaOS\n *\n * Provides weather information and forecasts\n *\n * @example\n * ```json\n * {\n *   "plugins": ["@elizaos/plugin-weather"],\n *   "settings": {\n *     "weather": {\n *       "apiKey": "your-api-key"\n *     }\n *   }\n * }\n * ```\n */\nexport default weatherPlugin;\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,s.jsx)(n.h3,{id:"plugin-composition",children:"Plugin Composition"}),"\n",(0,s.jsx)(n.p,{children:"Combine multiple plugins:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { composePlugins } from '@elizaos/core';\nimport weatherPlugin from './weather';\nimport newsPlugin from './news';\n\nexport default composePlugins(weatherPlugin, newsPlugin);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dynamic-plugin-loading",children:"Dynamic Plugin Loading"}),"\n",(0,s.jsx)(n.p,{children:"Load plugins at runtime:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function loadDynamicPlugin(pluginPath: string): Promise<Plugin> {\n  const module = await import(pluginPath);\n  return module.default;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"plugin-communication",children:"Plugin Communication"}),"\n",(0,s.jsx)(n.p,{children:"Plugins can communicate via services:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Plugin A\nconst pluginA: Plugin = {\n  onLoad: async (runtime) => {\n    runtime.registerService('plugin-a-service', {\n      getData: () => 'data from plugin A',\n    });\n  },\n};\n\n// Plugin B\nconst pluginB: Plugin = {\n  actions: [\n    {\n      handler: async (runtime, message) => {\n        const serviceA = runtime.getService('plugin-a-service');\n        const data = serviceA?.getData();\n        return { text: `Got: ${data}` };\n      },\n    },\n  ],\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Plugin not loading"}),": Check that the plugin is properly exported and listed in character configuration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Actions not triggering"}),": Verify validation logic and action names"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Service errors"}),": Ensure services are initialized before use"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory leaks"}),": Clean up event listeners and timers in onUnload"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,s.jsx)(n.p,{children:"Enable debug logging:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const debugPlugin: Plugin = {\n  onLoad: async (runtime) => {\n    if (runtime.getSetting('debug')) {\n      runtime.logger.level = 'debug';\n      runtime.logger.debug('Plugin loaded in debug mode');\n    }\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/technical/architecture/plugin-system",children:"Plugin System Architecture"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/technical/api-reference/core-api",children:"Core API Reference"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/elizaos/eliza/tree/main/packages",children:"Example Plugins"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/elizaos/community-plugins",children:"Community Plugins"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Start with the basic template"}),"\n",(0,s.jsx)(n.li,{children:"Add actions for user interactions"}),"\n",(0,s.jsx)(n.li,{children:"Create providers for context"}),"\n",(0,s.jsx)(n.li,{children:"Build services for shared functionality"}),"\n",(0,s.jsx)(n.li,{children:"Test thoroughly"}),"\n",(0,s.jsx)(n.li,{children:"Publish and share with the community"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var t=i(14041);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);