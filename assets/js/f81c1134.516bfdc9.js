"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[48130],{77735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"macos-dev-setup-guide","metadata":{"permalink":"/blog/macos-dev-setup-guide","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/macos-dev-setup-guide.mdx","source":"@site/blog/macos-dev-setup-guide.mdx","title":"Easy macOS Development Setup for ElizaOS","description":"Get Your Mac Ready for ElizaOS in One Step!","date":"2025-06-03T19:18:46.000Z","tags":[{"inline":true,"label":"macos","permalink":"/blog/tags/macos"},{"inline":true,"label":"setup","permalink":"/blog/tags/setup"},{"inline":true,"label":"development","permalink":"/blog/tags/development"},{"inline":true,"label":"elizaos","permalink":"/blog/tags/elizaos"},{"inline":false,"label":"Guide","permalink":"/blog/tags/guide","description":"How-to guides and tutorials"},{"inline":true,"label":"cli","permalink":"/blog/tags/cli"}],"readingTime":2.34,"hasTruncateMarker":false,"authors":[{"name":"ElizaOS Team","title":"Core Team","url":"https://github.com/elizaos","socials":{"twitter":"https://twitter.com/elizaOS","github":"https://github.com/elizaOS"},"imageURL":"https://github.com/elizaos.png","key":"team","page":null}],"frontMatter":{"slug":"macos-dev-setup-guide","title":"Easy macOS Development Setup for ElizaOS","authors":["team"],"tags":["macos","setup","development","elizaos","guide","cli"],"image":"/img/dev-setup.jpg"},"unlisted":false,"lastUpdatedBy":"Shaw","nextItem":{"title":"Automating Eliza\'s Documentation","permalink":"/blog/autodocs"}},"content":"## Get Your Mac Ready for ElizaOS in One Step!\\n\\nSetting up a development environment can sometimes be tricky, especially if you\'re new to the tools. This guide provides a streamlined way to configure your macOS machine for ElizaOS development using a single command.\\n\\nOur setup script automates the installation of essential tools:\\n\\n- **Homebrew**: The missing package manager for macOS.\\n- **Node.js (Version 23)**: The JavaScript runtime environment needed for ElizaOS.\\n- **Bun**: A fast JavaScript all-in-one toolkit used by ElizaOS.\\n\\n## The Magic Command\\n\\nOpen your macOS Terminal (you can find it in `/Applications/Utilities/Terminal.app`) and paste the following command, then press Enter:\\n\\n```bash\\ncurl -fsSL https://raw.githubusercontent.com/elizaos/eliza/main/packages/docs/scripts/setup-macos.sh | bash\\n```\\n\\n## What Happens Next?\\n\\nThe script will:\\n\\n1.  **Check your system**: It first ensures you\'re running on macOS.\\n2.  **Install Homebrew**: If you don\'t have Homebrew, it will install it. Homebrew is used to install other development tools.\\n3.  **Install Node.js v23**: It installs Node.js version 23, which is required for ElizaOS.\\n4.  **Install Bun**: It installs Bun, our preferred JavaScript toolkit.\\n5.  **Configure your PATH**: It automatically updates your shell profile (`.zprofile`, `.bash_profile`, or `.profile`) so that your system can find the installed tools.\\n6.  **Show a summary**: Once finished, the script will display a summary of what was installed and their versions.\\n\\nYou\'ll see messages in your terminal indicating the progress of each step.\\n\\n## After Running the Script\\n\\nOnce the script completes, it will advise you to either:\\n\\n- **Restart your terminal**: Close your current terminal window and open a new one.\\n- **Source your shell profile**: Run a command like `source ~/.zprofile` (the exact file will be mentioned by the script, e.g., `~/.bash_profile` or `~/.profile` depending on your shell).\\n\\nThis step is crucial for the changes to take effect, allowing you to use commands like `node`, `npm`, and `bun` directly.\\n\\n## Verify Your Setup\\n\\nThe script itself provides a verification summary at the end. You can also manually check the versions of the installed tools by opening a **new** terminal window (or after sourcing your profile) and running:\\n\\n```bash\\nnode --version\\nnpm --version\\nbun --version\\n```\\n\\nYou should see Node.js v23.x.x, a version of npm (which comes with Node.js), and the latest version of Bun.\\n\\n## Troubleshooting\\n\\n- **Command not found (e.g., `node: command not found`)**: This usually means you haven\'t restarted your terminal or sourced your shell profile correctly after the script ran. Try that first. Ensure you are in a new terminal session.\\n- **Homebrew issues**: If there are issues related to Homebrew, the script will output error messages. You might need to check Homebrew\'s documentation or logs.\\n- **Script errors**: If the script itself fails, carefully read the error messages. They often provide clues about what went wrong.\\n\\nYou\'re now all set up to start developing with ElizaOS on your Mac! Happy coding!"},{"id":"autodocs","metadata":{"permalink":"/blog/autodocs","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/autodocs.mdx","source":"@site/blog/autodocs.mdx","title":"Automating Eliza\'s Documentation","description":"A look into the agentic automation workflows being used to maintain a high-quality, up-to-date knowledge base.","date":"2025-05-14T00:00:00.000Z","tags":[{"inline":true,"label":"documentation","permalink":"/blog/tags/documentation"},{"inline":true,"label":"ci-cd","permalink":"/blog/tags/ci-cd"},{"inline":true,"label":"automation","permalink":"/blog/tags/automation"},{"inline":true,"label":"devops","permalink":"/blog/tags/devops"},{"inline":true,"label":"open-source","permalink":"/blog/tags/open-source"},{"inline":true,"label":"ai","permalink":"/blog/tags/ai"},{"inline":true,"label":"docs-as-code","permalink":"/blog/tags/docs-as-code"}],"readingTime":12.18,"hasTruncateMarker":true,"authors":[{"name":"jin","title":"Contributor","url":"https://github.com/madjin","socials":{"twitter":"https://twitter.com/dankvr","github":"https://github.com/madjin"},"imageURL":"https://avatars.githubusercontent.com/u/32600939?v=4","key":"jin","page":null}],"frontMatter":{"slug":"autodocs","title":"Automating Eliza\'s Documentation","description":"A look into the agentic automation workflows being used to maintain a high-quality, up-to-date knowledge base.","authors":"jin","date":"2025-05-14T00:00:00.000Z","tags":["documentation","ci-cd","automation","devops","open-source","ai","docs-as-code"],"image":"/blog/autodocs.jpg"},"unlisted":false,"lastUpdatedBy":"Shaw","prevItem":{"title":"Easy macOS Development Setup for ElizaOS","permalink":"/blog/macos-dev-setup-guide"},"nextItem":{"title":"auto.fun: Where AI Projects Thrive, Not Just Launch","permalink":"/blog/autofun-intro"}},"content":"Our previous post, \\"[Tools for Taming Information](/blog/taming-info),\\" highlighted the need for effective knowledge management in a dynamic project like Eliza. This follow-up explores the \'how\': our CI/CD practices for automating documentation.\\n\\nBy treating docs as code, we boost consistency, accuracy, update speed, and reduce manual work for contributors, building a more robust and accessible knowledge base for everyone.\\n\\n![](/blog/autodocs.jpg)\\n\\n{/* truncate */}\\n\\n## The Broader Information Ecosystem\\n\\nEliza thrive on information from diverse sources (GitHub, Discord, etc.). Efficiently capturing and processing this data is vital. The diagram below shows our information ecosystem, where data streams are collected, AI-enriched, and centralized in our [knowledge repository](https://github.com/elizaOS/knowledge). This post focuses on the \\"\ud83d\udcda docs/\\" portion and its automation.\\n\\nThe following diagram illustrates this broader flow, showing how various data streams are collected, processed, enriched (often with AI), and centralized into our [knowledge repository](https://github.com/elizaOS/knowledge). This repository then feeds various consumption layers, including AI agents, human users, and visual dashboards.\\n\\n![](/blog/autodocs.svg)\\n\\n<summary>View mermaid</summary>\\n\\n<details>\\n```mermaid\\nflowchart\\n    %% Data collection systems side by side\\n\\nsubgraph DataCollection[\\"Data Collection Systems\\"]\\nsubgraph ELIZA[\\"elizaos.github.io (Contributor Analytics)\\"]\\nEG_INGEST[\\"\ud83d\udce5 Ingest GitHub Data\\nPRs, Issues, Comments\\"] --\x3e EG_DB[(\\"\ud83d\udcbe Pglite DB +\\nDiffable Format\\")]\\nEG_PROCESS[\\"\u2699\ufe0f Process & Score\\nContributions\\"]\\nEG_DB <--\x3e EG_PROCESS\\nEG_PROCESS --\x3e EG_EXPORT[\\"\ud83d\udcca Export\\nJSON Files\\"]\\nEG_PROCESS <--\x3e EG_SUMMARIZE[\\"\ud83d\udcdd Generate\\nAI Summaries\\"]\\nEG_SUMMARIZE --\x3e EG_DEPLOY[\\"\ud83d\ude80 Deploy to\\nGitHub Pages\\"]\\nEG_EXPORT --\x3e EG_DEPLOY\\nend\\n\\n    subgraph AI_News[\\"ai-news (Data Collector/Miner)\\"]\\n        direction LR\\n        AI_EXTRACT[\\"\u26cf\ufe0f Extract Raw Data\\n\\nDiscord, X, Github\\nBlockchain, Telegram\\"]\\nAI_STORE[(\\"\ud83d\udcbe Encrypted\\nPglite DB\\")]\\nAI_ENRICH[\\"\ud83e\udde0 AI Analysis\\n& Enrichment\\"]\\nAI_GENERATE[\\"\ud83d\udcdd Generate\\nAI Summaries\\"]\\nAI_DEPLOY[\\"\ud83d\ude80 Deploy to\\nGitHub Pages\\"]\\nend\\n\\n        %% Define connections explicitly\\n        AI_EXTRACT --\x3e AI_STORE <--\x3e AI_ENRICH --\x3e AI_GENERATE --\x3e AI_DEPLOY\\n        AI_GENERATE --\x3e AI_STORE\\n\\n    subgraph DailySilk[\\"daily-silk (AI Twitter)\\"]\\n        direction LR\\n        TL[\\"Twitter lists about AI\\"]\\n        LLM[\\"LLM summarization\\"]\\n        TL --\x3e LLM --\x3e DS_FETCH[\\"\u26cf\ufe0f Discord Fetch\\n\\nEmbedded Messages\\"] --\x3e DS_JSON[(\\"\ud83d\udcbe JSON Files\\nYYYY-MM-DD\\")] --\x3e DS_DEPLOY[\\"\ud83d\ude80 Deploy to\\nGitHub Pages\\"]\\n\\n    end\\n\\n\\n    end\\n\\n\\n    %% Knowledge Repository with properly contained sources\\n    subgraph KNOW[\\"knowledge (Central Repository)\\"]\\n\\n        subgraph KR_SOURCES[\\"Data Sources\\"]\\n            DOCS[\\"\ud83d\udcda docs/\\n\\nElizaOS Documentation\\n\\n- Packages & Partners\\"]\\n  GITHUB[\\"\ud83d\udc19 github/\\n  Stats, PRs, Issues, Commits\\"]\\n  AINEWS[\\"\ud83d\udcf0 ai-news/\\n  ElizaOS & Hyperfy\\n  Summaries\\"]\\n  DS[\\"\ud83d\udcf0 daily-silk/\\n  AI twitter news\\"]\\n\\n              DOCS---GITHUB---AINEWS---DS\\n          end\\n\\n          KR_MAP[\\"\ud83d\uddfa\ufe0f Context Map\\n\\n  Structured JSON\\"]\\n\\n          subgraph KR_OUTPUTS[\\"Outputs\\"]\\n              KR_STRATEGIC[\\"\ud83e\udde9 Strategic Context\\n\\n  AI Council Insights\\"]\\n  KR_NOTES[\\"\ud83d\udcd2 HackMD Notes\\n  Prompt-Generated\\n  Content\\"]\\n  end\\n\\n          subgraph KR_PROMPTS[\\"Prompt Templates\\"]\\n              COMMS[\\"\ud83d\udcac comms/\\n\\n  Communication\\"] --- DEV[\\"\ud83d\udcbb dev/\\n  Development\\"] --- STRATEGY[\\"\ud83c\udfaf strategy/\\n  Strategic Planning\\"]\\n  end\\n\\n          %% Internal connections within KNOW\\n          KR_SOURCES --\x3e|\\"\u23f0 Generate Context\\n\\n  Daily 5:00 UTC\\"| KR_MAP\\n  KR_MAP --\x3e KR_OUTPUTS\\n  KR_PROMPTS --\x3e|\\"Generate\\n  Content\\"| KR_NOTES\\n  end\\n\\n      %% Consumption layer\\n      subgraph ConsumptionLayer[\\"Consumption Layer\\"]\\n          RAG[\\"\ud83e\udd16 RAG Systems\\n\\n  AI Agents\\"] <-.-> USER[\\"\ud83d\udc64 Human\\n  Users\\"] <-.-> SHOW[\\"\ud83c\udfac AI Shows\\n  Visualizations\\"]\\n  end\\n\\n      %% Connections between systems - simplified\\n      AI_DEPLOY -.->|\\"\u23f0 Sync Daily 4:00 UTC\\"| KNOW\\n      EG_DEPLOY -.->|\\"\u23f0 Sync Daily 4:00 UTC\\"| KNOW\\n      DS_DEPLOY -.->|\\"\u23f0 Sync Daily 4:00 UTC\\"| KNOW\\n\\n      %% Main flow connection to consumption\\n      KR_OUTPUTS & KR_NOTES --\x3e ConsumptionLayer\\n\\n      %% Styling\\n      classDef process fill:#f7e8ff,stroke:#9966cc,stroke-width:1px,color:#333,font-weight:bold,border-radius:8px\\n      classDef storage fill:#ffe6e6,stroke:#ff6666,stroke-width:1px,color:#333,font-weight:bold,border-radius:16px\\n      classDef output fill:#e6ffe6,stroke:#66cc66,stroke-width:1px,color:#333,font-weight:bold,border-radius:8px\\n      classDef source fill:#fff9e6,stroke:#ffcc66,stroke-width:1px,color:#333,font-weight:bold,border-radius:8px\\n\\n      class AI_EXTRACT,AI_ENRICH,AI_GENERATE,EG_INGEST,EG_EXPORT,EG_SUMMARIZE process\\n      class AI_STORE,EG_DB,DS_JSON storage\\n      class AI_DEPLOY,EG_DEPLOY,DS_DEPLOY,KR_MAP,KR_STRATEGIC,KR_NOTES output\\n      class DOCS,GITHUB,DS,AINEWS,SILK,ARCHIVE,COMMS,DEV,STRATEGY source\\n\\n      %% Style subgraphs\\n      style AI_News fill:#f9f0ff,stroke:#9966cc,stroke-width:2px,color:#6600cc,font-weight:bold\\n      style ELIZA fill:#fff0e6,stroke:#ff9933,stroke-width:2px,color:#cc6600,font-weight:bold\\n      style KNOW fill:#e6fff0,stroke:#33cc99,stroke-width:2px,color:#006633,font-weight:bold\\n      style KR_SOURCES fill:#fff9e6,stroke:#ffcc66,stroke-width:2px,color:#997a00,font-weight:bold\\n      style KR_PROMPTS fill:#e6f7ff,stroke:#66ccff,stroke-width:2px,color:#006699,font-weight:bold\\n      style KR_OUTPUTS fill:#ffe6f7,stroke:#ff66cc,stroke-width:2px,color:#990066,font-weight:bold\\n      style ConsumptionLayer fill:#e6ffff,stroke:#66cccc,stroke-width:2px,color:#006666,font-weight:bold\\n\\n```\\n\\n</details>\\n\\nWhile this diagram captures the full scope, this article will zoom in on the \\"\ud83d\udcda docs/\\" portion within the \\"KNOW (Central Repository)\\" and how our CI/CD pipelines automate its maintenance and enrichment.\\n\\nOur documentation itself lives within the `packages/docs` directory and is built using [Docusaurus](https://docusaurus.io/), a static site generator optimized for creating clean, accessible documentation sites. Key configuration files like [`docusaurus.config.ts`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/docusaurus.config.ts) define the site\'s structure, plugins, themes, and navigation, including sidebars managed via [`sidebars.ts`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/sidebars.ts).\\n\\nWe manage several key types of content:\\n*   **Core Documentation**: Conceptual explanations, guides, and tutorials for ElizaOS.\\n*   **API Reference**: Automatically generated from our TypeScript code comments.\\n*   **REST API Docs**: Derived from OpenAPI specifications.\\n*   **Packages**: Documentation for individual adapters, clients, and plugins.\\n*   **Partners & Community**: Information related to our ecosystem partners and community initiatives.\\n*   **Blog & News**: Regular updates, articles, and aggregated news from the AI and ElizaOS space.\\n\\nStatic assets, such as images, diagrams, and important text files like [`llms.txt`](https://eliza.how/llms.txt) (a context file for AI models, found in `packages/docs/static/`), are also managed within this structure.\\n\\nWith this context in mind, let\'s delve into how automation helps us keep this diverse set of documentation current and accurate.\\n\\n---\\n\\n## Automating Content Generation & Updates: The Mechanics\\n\\nMaintaining accurate and timely documentation requires robust automation. Here\'s a concise look at the key mechanisms we employ:\\n\\n### News Aggregation & Syndication\\n\\nFreshness in our [news section](https://eliza.how/news) is critical. The [`update-news.sh`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/scripts/update-news.sh) script, orchestrated by the [`update-news.yml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/update-news.yml) GitHub workflow, automates this.\\n\\n*   **Process**: It fetches new Markdown articles daily from a predefined source (currently [AI News for elizaOS](https://m3-org.github.io/ai-news/elizaos/md)).\\n*   **Integration**: New news files are added to `packages/docs/news/` and the [`repomix.config.json`](https://github.com/elizaOS/eliza/blob/develop/scripts/repomix.config.json) is updated. This ensures our AI context files (see below) also benefit from the latest news, enhancing the knowledge of our AI assistants.\\n\\n### AI Context Files: [`llms.txt`](https://eliza.how/llms.txt) & [`llms-full.txt`](https://eliza.how/llms-full.txt)\\n\\nThese files are crucial for providing our AI systems (like documentation Q&A bots or RAG agents) with relevant, up-to-date context about ElizaOS. We use [Repomix](https://github.com/yamadashy/repomix), a powerful tool that packs your entire repository into a single, AI-friendly file, perfect for when you need to feed your codebase to Large Language Models (LLMs).\\n\\n*   **Generation**: The [`llmstxt-generator.yml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/llmstxt-generator.yml) workflow uses `repomix`, configured by [`repomix.config.json`](https://github.com/elizaOS/eliza/blob/develop/scripts/repomix.config.json) and [`repomix-full.config.json`](https://github.com/elizaOS/eliza/blob/develop/scripts/repomix-full.config.json).\\n*   **Content**: `repomix` scans specified project files and documentation, compiling them into `packages/docs/static/llms.txt` (a general overview) and `packages/docs/static/llms-full.txt` (a more comprehensive technical deep-dive).\\n*   **Impact**: This ensures our AI can answer questions based on the latest code and documentation without manual re-training on every minor change.\\n\\n### JSDoc & Typedoc\\n\\nThe [`jsdoc-automation.yml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/jsdoc-automation.yml) workflow leverages our [`autodoc`](https://github.com/elizaOS/eliza/blob/develop/packages/autodoc/README.md) package to help maintain JSDoc comments in our TypeScript codebase. These comments are then processed by the [Docusaurus Typedoc Plugin](https://typedoc-plugin-markdown.org/plugins/docusaurus) (configured in [`docusaurus.config.ts`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/docusaurus.config.ts)) to generate the browsable API reference in [`/api`](https://eliza.how/api). This plugin integrates TypeDoc into the Docusaurus lifecycle, presetting relevant `typedoc-plugin-markdown` options and generating a configurable Docusaurus sidebar.\\n\\n*   **OpenAPI for REST:** Our REST API documentation in [`/docs/rest`](https://github.com/elizaOS/eliza/tree/develop/packages/docs/docs/rest) is generated from an OpenAPI specification file ([`packages/docs/src/openapi/eliza-v1.yaml`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/src/openapi/eliza-v1.yaml)) using `docusaurus-plugin-openapi-docs`. This ensures the API docs are always in sync with the defined contract.\\n\\n### README Translations via AI\\n\\nTo broaden accessibility, the [`generate-readme-translations.yml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/generate-readme-translations.yml) workflow uses an AI model to translate our main project [README.md](https://github.com/elizaOS/eliza/blob/develop/README.md) into multiple languages. These translations are then committed to the repository.\\n\\n### Supporting Scripts\\n\\nSeveral other scripts in [`packages/docs/scripts/`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/scripts/README.md) handle more specialized tasks:\\n*   [`update-partner-pages.js`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/scripts/update-partner-pages.js): This script automates the creation and maintenance of individual documentation pages for our partners, located under [`packages/docs/partners/`](https://github.com/elizaOS/eliza/tree/develop/packages/docs/partners/). It reads partner data (name, description, logo, website, social links, etc.) from [`packages/docs/src/data/partners.tsx`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/src/data/partners.tsx). For each partner, it generates a standardized Markdown page, ensuring consistency and ease of updates by modifying a central data source.\\n*   [`summarize.sh`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/scripts/summarize.sh): A versatile command-line utility that leverages AI models via the OpenRouter API to summarize various file types, including text, JSON, and even MP3 audio (which it first transcribes using [`insanely-fast-whisper`](https://github.com/Vaibhavs10/insanely-fast-whisper)). This script can be used to quickly generate summaries of content. For instance, when new videos are uploaded (e.g., to YouTube), `summarize.sh` can be used to transcribe and summarize the content, forming the basis for new documentation pages. It offers options for custom prompts, model selection, and output file specification.\\n*   [`get-changelog.py`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/scripts/get-changelog.py): Helps in generating changelogs from repository history.\\n\\n### Dynamic Package Showcase ([eliza.how/packages](https://eliza.how/packages))\\n\\nOur package showcase is a key resource for discovering ElizaOS adapters, clients, and plugins. Its content is dynamically generated through an automated process:\\n\\n*   **Registry Fetching**: The [`update-registry.js`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/scripts/update-registry.js) script periodically fetches the list of available packages from the central [ElizaOS Plugins Registry](https://raw.githubusercontent.com/elizaos-plugins/registry/refs/heads/main/index.json).\\n*   **Custom Data Merging**: This script enriches the registry data with custom descriptions and preview image paths defined in [`plugin-descriptions.json`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/src/data/plugin-descriptions.json). This file allows us to provide more curated information than what might be available directly from GitHub repository descriptions.\\n*   **Data Generation**: The processed data is then used to generate [`registry-users.tsx`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/src/data/registry-users.tsx), which exports a structured array of all packages.\\n*   **Display Logic**: [`users.tsx`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/src/data/users.tsx) consumes this array, defines tags, and handles sorting for the showcase.\\n*   **Rendering**: Finally, the React components in [`packages/docs/src/pages/showcase/`](https://github.com/elizaOS/eliza/tree/develop/packages/docs/src/pages/showcase/) (primarily `index.tsx` and its sub-components) render the interactive showcase.\\n*   **AI-Assisted Summaries**: The [`plugin_summary_prompt.txt`](https://github.com/elizaOS/eliza/blob/develop/packages/docs/scripts/plugin_summary_prompt.txt) can be used with `summarize.sh` to help generate or update descriptions within `plugin-descriptions.json`, further streamlining content maintenance for the showcase.\\n\\nThis automated pipeline ensures the package showcase remains comprehensive and up-to-date with minimal manual intervention.\\n\\nThese automated processes form the core of our \\"docs-as-code\\" philosophy, reducing toil and improving the quality and timeliness of our documentation.\\n\\n---\\n\\n## Automation Backbone: GitHub Actions\\n\\nAll this automation is powered by our CI/CD pipelines, defined using [GitHub Actions](https://github.com/features/actions). These workflows, located in our [`.github/workflows/`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/README.md) directory, are the engine that keeps our documentation building, testing, and deploying smoothly.\\n\\nKey workflows ensure documentation integrity and timely updates:\\n\\n*   **Core CI Checks ([`ci.yaml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/ci.yaml), [`pr.yaml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/pr.yaml)):** On every push or pull request, these workflows run essential checks. For documentation, this includes linting Markdown files, checking for broken links, and ensuring the Docusaurus site builds successfully. This catches errors early, before they reach the live documentation.\\n*   **Automated Content Generation Triggers:** As detailed in the previous section, workflows like [`update-news.yml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/update-news.yml), [`llmstxt-generator.yml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/llmstxt-generator.yml), [`jsdoc-automation.yml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/jsdoc-automation.yml), and [`generate-readme-translations.yml`](https://github.com/elizaOS/eliza/blob/develop/.github/workflows/generate-readme-translations.yml) are triggered on schedules or specific events (e.g., pushes to main branches) to automatically update relevant documentation sections or supporting files.\\n*   **Deployment:** The Docusaurus site is automatically deployed upon merges to the main branch using the command `USE_SSH=true bun run deploy`. This ensures that approved changes are reflected on the live documentation site ([eliza.how/docs](https://eliza.how/docs)) promptly.\\n\\nThis CI/CD setup not only automates repetitive tasks but also enforces quality standards, ensuring that our documentation remains a reliable resource.\\n\\n---\\n\\n## Living Documentation: Challenges, Learnings & Future Vision\\n\\nTreating documentation as code and automating its lifecycle is a journey, not a destination. While our current setup significantly improves efficiency and consistency, we continuously learn and identify areas for enhancement.\\n\\n### Current Challenges & Learnings\\n\\nOur docs-as-code pipeline is robust, but we\'re always working to make it better. This means focusing on:\\n\\n*   **Speed:** Making sure docs build quickly\\n*   **Quality:** Double-checking any content written by AI to ensure it\'s accurate and clear\\n*   **Teamwork for Tools:** Keeping all the different software parts and scripts working together smoothly, especially as we add new things\\n\\n### Future Vision & Enhancements\\n\\nOur goal is to make the documentation process even more seamless, intelligent, and contributor-friendly. We\'re exploring enhancements like:\\n\\n*   **Smarter Triggers:** Targeting CI jobs to run only when relevant files change.\\n*   **Smarter Link Checks:** Moving beyond basic broken link detection to validating link relevance.\\n*   **Enhanced AI Assistance:** Using AI to identify outdated docs or suggest improvements based on search queries.\\n*   **Automated Video Documentation:** Using `summarize.sh` to transcribe, summarize, and draft PRs for new video content, plus automating `VideoGallery` updates.\\n*   **Automated Plugin Descriptions:** Using CI and `summarize.sh` to propose updates to `plugin-descriptions.json` when new plugins or README changes are detected.\\n*   **Faster Feedback Loops:** Optimizing workflows for quicker contributor feedback on PRs.\\n*   **AI-Driven Content Strategy:** Using site analytics to guide AI in suggesting or outlining new documentation.\\n\\nWe\'re always refining these processes. Your contributions and feedback via GitHub or Discord are invaluable in helping us build an even better documentation experience, we\'re listening!\\n```"},{"id":"autofun-intro","metadata":{"permalink":"/blog/autofun-intro","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/autofun-intro.mdx","source":"@site/blog/autofun-intro.mdx","title":"auto.fun: Where AI Projects Thrive, Not Just Launch","description":"The problem with token launches and how we fixed it","date":"2025-04-30T02:39:04.000Z","tags":[{"inline":true,"label":"autofun","permalink":"/blog/tags/autofun"},{"inline":true,"label":"launchpad","permalink":"/blog/tags/launchpad"},{"inline":true,"label":"ai","permalink":"/blog/tags/ai"},{"inline":true,"label":"tokenomics","permalink":"/blog/tags/tokenomics"},{"inline":true,"label":"elizaos","permalink":"/blog/tags/elizaos"}],"readingTime":5.47,"hasTruncateMarker":true,"authors":[{"name":"ElizaOS Team","title":"Core Team","url":"https://github.com/elizaos","socials":{"twitter":"https://twitter.com/elizaOS","github":"https://github.com/elizaOS"},"imageURL":"https://github.com/elizaos.png","key":"team","page":null}],"frontMatter":{"slug":"autofun-intro","title":"auto.fun: Where AI Projects Thrive, Not Just Launch","authors":["team"],"tags":["autofun","launchpad","ai","tokenomics","elizaos"],"image":"/img/autofun-intro.jpg"},"unlisted":false,"lastUpdatedBy":"madjin","prevItem":{"title":"Automating Eliza\'s Documentation","permalink":"/blog/autodocs"},"nextItem":{"title":"Autofun Tokenomics","permalink":"/blog/autofun-tokenomics"}},"content":"## The problem with token launches and how we fixed it\\n\\nThe era of pure speculation and disposable memecoins is giving way to a new generation of projects that blend AI, tokenomics, and long-term vision.\\n\\n[![Image](https://pbs.twimg.com/media/Go105yoWMAIZ15e?format=jpg&name=900x900)](https://x.com/autodotfun/article/1915776667995267360/media/1913313952894693378)\\n\\n{/* truncate */}\\n\\nWhen we launched our own project\'s token, we did it the \\"right\\" way \u2013 a fair launch, open to the public, allowing anyone to participate from day one. And by all metrics, it was a success: massive interest, high engagement, and meta-changing adoption of the elizaOS framework.\\n\\nBut there was a problem.\\n\\nFair launches, while philosophically aligned with crypto\'s ethos, often leave project teams struggling. We had no reserved supply to fund development. Selling tokens to cover expenses wasn\'t an option \u2013 it creates FUD in the community, and for good reason: when a team is forced to dump its own token to survive, it could signal instability. The\\n\\n[reality is](https://x.com/shawmakesmagic/status/1886829695343161494) that when your project is only 2 months old and with no VC backing, you don\'t have the basics covered, let alone revenue to fund progress.\\n\\nAt the same time, we knew all too well about the opposite extreme: closed-door, insider-led token launches that benefited only a select few. Low float, high FDV launches that price out regular users. Bundled deals where insiders control supply and the community is left as exit liquidity.\\n\\nNeither of these models work in the long term. So we built\\n\\n[auto.fun](https://auto.fun/)\\n\\n\u2013 an AI-native, creator-first launchpad that finds the balance between truly fair access and long-term sustainability.\\n\\n[![Image](https://pbs.twimg.com/media/Go105yoWMAIZ15e?format=jpg&name=900x900)](https://x.com/autodotfun/article/1915776667995267360/media/1913313952894693378)\\n\\n## The next evolution of crypto launches: AI-native, creator-first\\n\\nWe designed [auto.fun](https://auto.fun/) to support the entire lifecycle of projects \u2013 from inception to launch, and beyond:\\n\\n- Fairer than fair launch: A bonding curve mechanism that lets teams secure up to 50% of their token supply before market listing, avoiding the pitfalls of a pure fair launch while ensuring community access isn\'t gated by insiders.\\n- No-code agent builder: [auto.fun](https://auto.fun/) allows creators to launch agents alongside their token with the Fleek integration, or to connect an existing agent to their token in a couple of clicks.\\n- AI-generated marketing: Create tokens, content, and assets from a single prompt.\\n- Sustainable project funding \u2013 The liquidity NFT mechanism ensures that projects earn ongoing revenue from trading fees, reducing reliance on token sales to fund development.\\n\\n## Why [auto.fun](https://auto.fun/) is the best place to launch your project\\n\\nLaunching a project isn\'t just about putting a token on the market \u2013 it\'s about building a community and sustaining it.\\n\\nWe know the power of strong messaging and community engagement. Our own project took off in part because of its memetic origins, capturing attention in a crowded market. But visibility alone isn\'t enough.\\n\\n[auto.fun](https://auto.fun/)\\n\\nensures that projects launching on our platform have the tools to not just attract an audience, but to retain and grow it sustainably.\\n\\nThis is why the best projects are launching on [auto.fun](https://auto.fun/).\\n\\nWe\'re working with cutting-edge teams building AI-powered agents, innovative agent-native tokens, and projects that are pushing the boundaries of what\'s possible in crypto. Some are launching entirely new tokens and agents, while others are bringing existing AI tools to integrate with our launchpad.\\n\\nHere\'s what\'s coming:\\n\\n- [@MakeFight_Great](https://x.com/@MakeFight_Great)\\n  \u2013 AI-powered social agents BrawlChain and The Algorithm will battle it out on X, each with its own token.\\n- [@AlloraNetwork](https://x.com/@AlloraNetwork)\\n  \u2013 Launching [@Squidllora](https://x.com/@Squidllora), leveraging the Allora Network\'s predictive inferences and advanced trading signals to manage a portfolio.\\n- [@drpepeai](https://x.com/@drpepeai)\\n  \u2013 Launching [@DogLifeAI](https://x.com/@DogLifeAI), a medical AI agent providing detailed advice and services for dog owners, with a token that grants access to this and future agents in their ecosystem.\\n- [@kingczai](https://x.com/@kingczai)\\n  \u2013 With their token they\'re set to unlock exclusive perks and community access\u2014no secret handshake needed.\\n- [@comput3ai](https://x.com/@comput3ai)\\n  \u2013 Launching [$COM](https://x.com/search?q=%24COM&src=cashtag_click), that will act as credits for their decentralized compute services.\\n\\nThese are just a few of the projects joining us at launch, each leveraging the AI-native tooling and sustainable tokenomics that make [auto.fun](https://auto.fun/) the best place to launch.\\n\\n[![Image](https://pbs.twimg.com/media/Go11Bo-WEAEIRur?format=jpg&name=900x900)](https://x.com/autodotfun/article/1915776667995267360/media/1913314087741558785)\\n\\n## [auto.fun](https://auto.fun/) is YOURS\\n\\nEvery token that graduates through [auto.fun](https://auto.fun/) feeds the flywheel for $ai16z holders: our portion of swap fees of graduated Agent Tokens (ATs) is routed into open\u2011market buybacks of $ai16z. And once the upcoming $ai16z : AT secondary pools go live, they\'ll be paired with the very ATs that generated the revenue, deepening liquidity on both sides and capturing a perpetual share of trading fees. The result is a compounding loop where every launch, swap, and routing path strengthens $ai16z\'s liquidity and steadily channels platform value back to long\u2011term holders.\\n\\n## A truly AI-empowered future\\n\\n[auto.fun](https://auto.fun/) isn\'t just about launching tokens \u2013 it\'s about creating the most advanced AI-enhanced platform for new projects. As elizaOS evolves, so will [auto.fun](https://auto.fun/). Here\'s what the short-term roadmap looks like:\\n\\n- v2 of the Eliza framework will bring more sophisticated agent creation tools, allowing users to build agents with real utility.\\n- AI-powered tools will enable creators to generate more images, videos, and marketing content for their social agent to promote.\\n- Expanded integrations will allow for even more complex AI-powered interactions and tokenomics customization.\\n\\nWith [auto.fun](https://auto.fun/), you don\'t just launch a token\u2014you launch an AI-native ecosystem, designed for long-term sustainability and growth.\\n\\n## Join the next wave of AI-native crypto\\n\\n[auto.fun](https://auto.fun/) is built for the next chapter of crypto. The era of launching purely memetic tokens with no utility is fading. The next generation of projects need to be AI-forward and built to last.\\n\\n[auto.fun](https://auto.fun/) is at the forefront of this movement. If you\'re building any kind of project \u2013 whether it\'s an agent, a service, meme, or a new form of digital interaction \u2013 there\'s no better place to launch.\\n\\nWe\'re not just another launchpad. We\'re the AI-native creator-first platform that finally gets it right.\\n\\nWelcome to the future of AI-powered token launches.\\n\\npress the fun button.\\n\\n[![Image](https://pbs.twimg.com/media/Go11OXCXEAApjJx?format=png&name=900x900)](https://x.com/autodotfun/article/1915776667995267360/media/1913314306264862720)"},{"id":"autofun-tokenomics","metadata":{"permalink":"/blog/autofun-tokenomics","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/autofun-tokenomics.mdx","source":"@site/blog/autofun-tokenomics.mdx","title":"Autofun Tokenomics","description":"auto.fun tokenomics: value accrual is fun","date":"2025-04-30T02:39:04.000Z","tags":[{"inline":true,"label":"autofun","permalink":"/blog/tags/autofun"},{"inline":true,"label":"tokenomics","permalink":"/blog/tags/tokenomics"},{"inline":true,"label":"ai16z","permalink":"/blog/tags/ai-16-z"},{"inline":true,"label":"liquidity","permalink":"/blog/tags/liquidity"},{"inline":true,"label":"launchpad","permalink":"/blog/tags/launchpad"},{"inline":true,"label":"elizaos","permalink":"/blog/tags/elizaos"}],"readingTime":3.88,"hasTruncateMarker":true,"authors":[{"name":"ElizaOS Team","title":"Core Team","url":"https://github.com/elizaos","socials":{"twitter":"https://twitter.com/elizaOS","github":"https://github.com/elizaOS"},"imageURL":"https://github.com/elizaos.png","key":"team","page":null}],"frontMatter":{"slug":"autofun-tokenomics","title":"Autofun Tokenomics","authors":["team"],"tags":["autofun","tokenomics","ai16z","liquidity","launchpad","elizaos"],"image":"/img/autofun-tokenomics.jpg"},"unlisted":false,"lastUpdatedBy":"Shaw","prevItem":{"title":"auto.fun: Where AI Projects Thrive, Not Just Launch","permalink":"/blog/autofun-intro"},"nextItem":{"title":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","permalink":"/blog/openai-plugin-envs"}},"content":"auto.fun tokenomics: value accrual is fun\\n\\n## Overview\\n\\n[auto.fun](https://auto.fun/) is the first token launch platform purpose-built for agent-native ecosystems. Designed and maintained by Eliza Labs, it offers a low-friction, high-alignment environment for launching new tokens and/or autonomous agents built on the ElizaOS stack.\\n\\n![Image](https://pbs.twimg.com/media/Go5bNx5XsAAlIIs?format=jpg&name=900x900)\\n(https://x.com/autodotfun/article/1915889326484766781/media/1913567183969431552)\\n\\n{/* truncate */}\\n\\nOur long-term tokenomics architecture centers around a dual-pool system that compounds value as more agents are deployed. While some components are still being actively developed, key mechanisms are already operational\u2014most notably a swap fee-sharing system collaboratively built with Raydium, and buybacks that directly convert platform revenue into $ai16z buybacks.\\n\\nThis document outlines both the current tokenomic mechanics and the roadmap toward full activation of our tokenomics architecture.\\n\\n## Current Mechanics\\n\\n1. Primary SOL:AT Pools\\n\\nWhen an Agent Token (AT) graduates from\\n\\n[auto.fun](https://auto.fun/)\\n\\nto Raydium, the liquidity is burned to create a Liquidity NFT, which is then paired with SOL in the primary liquidity pool (SOL:AT) on Raydium. This offers:\\n\\n- Frictionless UX for traders: All interactions are SOL-denominated\\n- Deep initial liquidity: Ensured via highly-calibrated launch parameters\\n- Seamless integration with existing Solana DEX infrastructure\\n\\n2. Liquidity NFTs for Project Creators (Powered by Raydium)\\n\\nEach project that launches on\\n\\n[auto.fun](https://auto.fun/)\\n\\nis issued a Raydium Liquidity NFT, which represents ownership of future fees earned from the burned liquidity on Raydium. This innovation enables:\\n\\n- Ongoing fee capture: Projects earn fees on every swap of their token\\n- Incentive alignment: Encourages builders to launch agents that provide sustained utility\\n- Permissionless ownership: These NFTs are composable and tradable across Solana\\n\\nThis structure flips the traditional launchpad model\u2014empowering creators with onchain, revenue-generating assets rather than relying solely on dumping their token allocation or inflating their token supply via emissions.\\n\\n3. Platform Fees \u2192 $ai16z Buybacks\\n\\n10% of the burned LP (collected in SOL) is set aside when tokens graduate, and the fees generated are used to buyback $ai16z from the open market.\\n\\nThis forms a direct link between platform activity and value accrual for $ai16z holders\u2014without imposing any friction on creators or users.\\n\\n## Future Phase: Secondary Pools ( $ai16z:AT)\\n\\nThe next major evolution in our architecture introduces a secondary layer of liquidity: the $ai16z:AT pools. These are not yet live, but their function is defined and development will soon be underway.\\n\\nWhen launched, these pools will:\\n\\n- Pair acquired $ai16z (from buybacks) with the Agent Tokens whose fees generated the buysbacks\\n- This automatically deepens liquidity for both $ai16z and the successful ATs over their lifetime\\n- Deeper liquidity unlocks new routing paths, arbitrage opportunities, and composable LP dynamics. Creating a more sustainable and liquid $ai16z ecosystem\\n\\n![Image](https://pbs.twimg.com/media/Go5bNx5XsAAlIIs?format=jpg&name=900x900)\\n(https://x.com/autodotfun/article/1915889326484766781/media/1913567183969431552)\\n\\nThese pools will be abstracted away from the user interface, operating as invisible infrastructure that enhances overall trading depth and price stability.\\n\\n![Image](https://pbs.twimg.com/media/Go5bANPX0AALoiZ?format=jpg&name=900x900)\\n(https://x.com/autodotfun/article/1915889326484766781/media/1913566950791303168)\\n\\nFuture Flow Diagram (Under Development)\\n\\n1. Fees collected in SOL and AT from SOL:AT pools\\n2. SOL \u2192 $ai16z buybacks via market operations\\n3. AT + $ai16z \u2192 $ai16z:AT liquidity provisioned\\n4. New pools integrated into routing for deeper ecosystem liquidity\\n5. Additional fees collected from secondary pools\\n\\nThese mechanics establish a compunding value loop: each trade strengthens the system, deepens liquidity, and feeds back into ecosystem growth.\\n\\n## Design Principles\\n\\nOur approach is built on core principles that balance modularity, alignment, and scalability:\\n\\n- Minimize friction: Launching a new agent token should be as simple as possible\\n- Capture value organically: No forced staking, arbitrary burns, or hidden taxes\\n- Empower creators & community: Via liquidity ownership, fee share, and no-code agentic tools\\n- Evolve toward composability: Liquidity pools and routing logic are designed to integrate natively with Solana\'s DeFi stack\\n\\n## The Long-Term Vision\\n\\nThe current phase of [auto.fun](https://auto.fun/) represents the foundation of a generative economic system. Agent developers gain tools and incentives to launch sustainably; traders benefit from deep liquidity and clean UX; and the broader Eliza ecosystem sees value compounded into $ai16z.\\n\\nBy partnering closely with Raydium, we\'ve ensured that liquidity is not only deep, but modular\u2014anchored in assets creators actually control, and governed by onchain primitives like NFTs and LP tokens. As we roll out the next phase of dual-pool mechanics, this foundation will allow for seamless compounding of fees, routing complexity, and capital efficiency\u2014without introducing user friction.\\n\\nIn short: each new token strengthens the network. Each trade reinforces the system. And each builder becomes an owner in the economy they\'re helping create."},{"id":"/openai-plugin-envs","metadata":{"permalink":"/blog/openai-plugin-envs","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/openai-plugin-envs.mdx","source":"@site/blog/openai-plugin-envs.mdx","title":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","description":"Learn how to configure the OpenAI plugin to work with any OpenAI-compatible provider using environment variables.","date":"2025-04-24T00:00:00.000Z","tags":[],"readingTime":3.04,"hasTruncateMarker":true,"authors":[{"name":"ElizaOS Team","title":"Core Team","url":"https://github.com/elizaos","socials":{"twitter":"https://twitter.com/elizaOS","github":"https://github.com/elizaOS"},"imageURL":"https://github.com/elizaos.png","key":"team","page":null}],"frontMatter":{"title":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","authors":"team","date":"2025-04-24T00:00:00.000Z","description":"Learn how to configure the OpenAI plugin to work with any OpenAI-compatible provider using environment variables."},"unlisted":false,"lastUpdatedBy":"madjin","prevItem":{"title":"Autofun Tokenomics","permalink":"/blog/autofun-tokenomics"},"nextItem":{"title":"Adding Plugins in V2","permalink":"/blog/add-plugins"}},"content":"The `plugin-openai` package in this project can connect to any OpenAI-compatible API provider\u2014not just OpenAI itself! Thanks to flexible environment variable support, you can swap between providers like Azure, OpenRouter, or even your own local LLM with just a few tweaks. It\u2019s that easy!\\n\\n{/* truncate */}\\n\\n## \ud83e\udd14 What is an OpenAI-Compatible Provider?\\n\\nAn OpenAI-compatible provider is any service that implements the OpenAI API spec. Popular examples include:\\n\\n- [OpenRouter](https://openrouter.ai/)\\n- [Ollama](https://ollama.com/) (with its OpenAI-compatible API, supports embedding also)\\n- [Local LLMs with an OpenAI API wrapper](https://github.com/abetlen/llama-cpp-python)\\n- Other cloud or self-hosted endpoints\\n\\n> **Note:** If your provider supports the OpenAI API, this plugin can probably talk to it!\\n\\n## \ud83d\udee0\ufe0f Key Environment Variables\\n\\nThe following environment variables are supported by the OpenAI plugin:\\n\\n| Variable                      | Purpose                                                    |\\n| ----------------------------- | ---------------------------------------------------------- |\\n| `OPENAI_API_KEY`              | The API key for authentication (required)                  |\\n| `OPENAI_BASE_URL`             | The base URL for the API (override to use other providers) |\\n| `OPENAI_SMALL_MODEL`          | Default small model name                                   |\\n| `OPENAI_LARGE_MODEL`          | Default large model name                                   |\\n| `OPENAI_EMBEDDING_MODEL`      | Embedding model name                                       |\\n| `OPENAI_EMBEDDING_URL`        | Base URL specifically for the embedding API endpoint       |\\n| `OPENAI_EMBEDDING_DIMENSIONS` | Embedding vector dimensions                                |\\n| `SMALL_MODEL`                 | (Fallback) Small model name                                |\\n| `LARGE_MODEL`                 | (Fallback) Large model name                                |\\n\\n## Example: Connecting to OpenRouter\\n\\n```env\\nOPENAI_API_KEY=your-openrouter-key\\nOPENAI_BASE_URL=https://openrouter.ai/api/v1\\nOPENAI_SMALL_MODEL=openrouter/gpt-3.5-turbo\\nOPENAI_LARGE_MODEL=openrouter/gpt-4\\n```\\n\\n> **Warning:** OpenRouter does **not** currently support the `/v1/embeddings` endpoint. If you need embeddings, you must use a different provider for them. See the section below on [Handling Providers Without Embedding Support](#handling-providers-without-embedding-support).\\n\\n## Example: Connecting to Ollama\\n\\n```env\\nOPENAI_API_KEY=ollama-local-demo\\nOPENAI_BASE_URL=http://localhost:11434/v1\\nOPENAI_SMALL_MODEL=llama2\\nOPENAI_LARGE_MODEL=llama2:70b\\n```\\n\\n## Example: Connecting to a Local LLM (Llama.cpp)\\n\\n```env\\nOPENAI_API_KEY=sk-local-demo\\nOPENAI_BASE_URL=http://localhost:8000/v1\\nOPENAI_SMALL_MODEL=llama-2-7b-chat\\nOPENAI_LARGE_MODEL=llama-2-13b-chat\\n```\\n\\n## Example: Connecting to LM Studio\\n\\n[LM Studio](https://lmstudio.ai/) is a popular desktop app for running large language models locally. It provides an OpenAI-compatible API server, so you can use it as a drop-in replacement for OpenAI or other providers.\\n\\nTo use LM Studio with the OpenAI plugin, start the LM Studio API server (default port 1234) and set your environment variables as follows:\\n\\n```env\\nOPENAI_API_KEY=lmstudio-local-demo # (can be any non-empty string)\\nOPENAI_BASE_URL=http://localhost:1234/v1\\nOPENAI_SMALL_MODEL=your-model-name-here\\nOPENAI_LARGE_MODEL=your-model-name-here\\nOPENAI_EMBEDDING_MODEL=text-embedding-nomic-embed-text-v1.5\\n\\n```\\n\\n- Make sure to use the model identifier as listed in LM Studio for the `OPENAI_SMALL_MODEL` and `OPENAI_LARGE_MODEL` values.\\n- LM Studio supports the `/v1/models`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` endpoints.\\n- You can reuse any OpenAI-compatible SDK by pointing the base URL to `http://localhost:1234/v1`.\\n\\nFor more details, see the [LM Studio OpenAI Compatibility API docs](https://lmstudio.ai/docs/app/api/endpoints/openai).\\n\\n## Handling Providers Without Embedding Support\\n\\nSome OpenAI-compatible providers (like OpenRouter) might not offer an embedding endpoint (`/v1/embeddings`). If you need embedding functionality (e.g., for memory or context retrieval), you can configure the OpenAI plugin to use a _different_ provider specifically for embeddings using the `OPENAI_EMBEDDING_URL` environment variable.\\n\\n**Example: OpenRouter for Chat, Ollama for Embeddings**\\n\\nLet\'s say you want to use OpenRouter for its wide model selection for chat completion but prefer Ollama\'s embedding capabilities (see [Ollama OpenAI docs](https://github.com/ollama/ollama/blob/main/docs/openai.md)).\\n\\n```env\\n# General API settings (points to OpenRouter)\\nOPENAI_API_KEY=your-openrouter-key\\nOPENAI_BASE_URL=https://openrouter.ai/api/v1\\nOPENAI_SMALL_MODEL=openrouter/gpt-3.5-turbo\\nOPENAI_LARGE_MODEL=openrouter/gpt-4\\n\\n# Embedding-specific settings (points to Ollama)\\nOPENAI_EMBEDDING_URL=http://localhost:11434/v1 # Your Ollama embedding endpoint\\nOPENAI_EMBEDDING_MODEL=all-minilm # Ollama embedding model (e.g., all-minilm)\\n# OPENAI_EMBEDDING_DIMENSIONS=1536 # Optional: Specify if needed for your model\\n```"},{"id":"/add-plugins","metadata":{"permalink":"/blog/add-plugins","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/add-plugins.mdx","source":"@site/blog/add-plugins.mdx","title":"Adding Plugins in V2","description":"V2 introduces significant upgrades to improve how developers build, share, and integrate functionality into their agents. This guide will walk through updates as they relate to plugins (hint: everything is a plugin).","date":"2025-04-13T00:00:00.000Z","tags":[{"inline":true,"label":"plugins","permalink":"/blog/tags/plugins"},{"inline":true,"label":"registry","permalink":"/blog/tags/registry"},{"inline":true,"label":"elizaos","permalink":"/blog/tags/elizaos"},{"inline":true,"label":"announcement","permalink":"/blog/tags/announcement"},{"inline":true,"label":"v2","permalink":"/blog/tags/v-2"}],"readingTime":3.49,"hasTruncateMarker":true,"authors":[{"name":"jin","title":"Contributor","url":"https://github.com/madjin","socials":{"twitter":"https://twitter.com/dankvr","github":"https://github.com/madjin"},"imageURL":"https://avatars.githubusercontent.com/u/32600939?v=4","key":"jin","page":null}],"frontMatter":{"title":"Adding Plugins in V2","authors":"jin","date":"2025-04-13T00:00:00.000Z","tags":["plugins","registry","elizaos","announcement","v2"]},"unlisted":false,"lastUpdatedBy":"Christopher Trimboli","prevItem":{"title":"Using OpenAI Plugin Envs for Any OpenAI-Compatible Provider","permalink":"/blog/openai-plugin-envs"},"nextItem":{"title":"Tools for Taming Information","permalink":"/blog/taming-info"}},"content":"V2 introduces significant upgrades to improve how developers build, share, and integrate functionality into their agents. This guide will walk through updates as they relate to plugins (hint: everything is a plugin).\\n\\n{/* truncate */}\\n\\n## What\'s New\\n\\nThe codebase is more compact in order to be easier to work with. V2 also features a formal API specification for better definition and compatibility. When it comes to plugins, here\'s what\'s new:\\n\\n- **No central repo needed**: Host your plugin in your own GitHub repo\\n- **One-line integration**: Add plugins to your `package.json` and `agent.json`.\\n- **Open registry**: Submit a PR to get listed on the [Plugin Registry](https://elizaos.github.io/registry).\\n- **Dynamic loading**: Load plugins from external repositories\\n\\nMany of these improvements were already being adopted in V1 toward the end of its lifecycle in order to create a natural evolution path for developers already familiar with the platform.\\n\\n### \ud83d\udee0 Plugin Architecture\\n\\nElizaOS V2 uses a unified plugin architecture where everything is a plugin:\\n\\n```typescript\\ntype Plugin = {\\n  name: string;\\n  description: string;\\n  clients?: Client[];\\n  adapters?: Adapter[];\\n  actions?: Action[];\\n  services?: Service[];\\n  providers?: Provider[];\\n  evaluators?: Evaluator[];\\n};\\n```\\n\\nThis means you can extend virtually any aspect of your agent\'s functionality:\\n\\n- Platform connections (Discord, Twitter, Telegram)\\n- Storage options (PostgreSQL, MongoDB, Redis)\\n- Action capabilities (what your agent can do)\\n- Service providers (background processes and specialized capabilities)\\n- Evaluation components (how your agent makes decisions)\\n\\n---\\n\\n## \ud83e\udde9 How to Add a Plugin in V2\\n\\nHere are steps on how to add your plugin:\\n\\n### 1. Package.json Integration\\n\\n```bash\\n# Install plugin directly from GitHub\\nnpm install @elizaos/plugin-example@github:your-org/plugin-example\\n\\n# Or update package.json manually\\n\\"dependencies\\": {\\n  \\"@elizaos/plugin-example\\": \\"github:your-org/plugin-example\\"\\n}\\n```\\n\\n### 2. Agent Configuration\\n\\n```json\\n{\\n  \\"name\\": \\"MyAgent\\",\\n  \\"plugins\\": [\\"@elizaos/plugin-example\\"]\\n}\\n```\\n\\nThe plugin will be automatically loaded when your agent starts.\\n\\n---\\n\\n## \ud83d\udda5\ufe0f CLI Plugins Commands\\n\\nThe ElizaOS CLI provides several commands to manage plugins. To install the CLI:\\n\\n:::tip\\n\\n```bash\\nbun install -g @elizaos/cli\\n```\\n\\n:::\\n\\n### Plugin Management Commands\\n\\n```bash\\n# List all plugins available in the registry\\nelizaos plugins list\\n\\n# List plugins currently installed in your project\\nelizaos plugins installed-plugins\\n\\n# Add a plugin to your project (with options)\\nelizaos plugins add <plugin-name> [--no-env-prompt] [--branch <branchName>] [--tag <tagname>]\\n\\n# Remove a plugin from your project\\nelizaos plugins remove <plugin-name>\\n```\\n\\n- `elizaos plugins list` (aliases: `ls`, `l`): Lists available plugins from the registry.\\n- `elizaos plugins installed-plugins`: Lists plugins found in your project\'s dependencies.\\n- `elizaos plugins add <plugin>` (alias: `install`): Adds a plugin to your project. Options:\\n  - `--no-env-prompt`: Skip prompting for environment variables.\\n  - `--branch <branchName>`: Specify a branch to install from when using a monorepo source (default: `main`).\\n  - `-T, --tag <tagname>`: Specify a package tag to install (e.g., `latest`).\\n- `elizaos plugins remove <plugin>` (aliases: `delete`, `del`, `rm`): Removes a plugin from your project and cleans up files.\\n\\n### Publishing Plugins\\n\\nTo publish your own plugin to the registry:\\n\\n```bash\\nelizaos publish\\n```\\n\\nThis command will guide you through publishing your plugin, including updating the registry and optionally publishing to npm or GitHub. For more details, see the Publishing section or run `elizaos publish --help`.\\n\\nThese commands streamline plugin discovery, installation, removal, and distribution.\\n\\n---\\n\\n## \ud83d\udcc2 Creating Your Own Plugin\\n\\nThe minimal structure for a V2 plugin repository:\\n\\n```typescript\\nplugin-example/\\n\u251c\u2500\u2500 assets/\\n\u2502   \u251c\u2500\u2500 logo.png       // 400x400 branding\\n\u2502   \u251c\u2500\u2500 banner.png     // 1280x640 banner\\n\u2502   \u2514\u2500\u2500 screenshots/   // Usage examples\\n\u251c\u2500\u2500 src/\\n\u2502   \u251c\u2500\u2500 index.ts       // Plugin entry point\\n\u2502   \u2514\u2500\u2500 ... (plugin code)\\n\u251c\u2500\u2500 package.json       // With agentConfig section\\n\u2514\u2500\u2500 README.md          // Documentation\\n```\\n\\nYour `package.json` should include plugin metadata:\\n\\n```json\\n\\"agentConfig\\": {\\n  \\"pluginType\\": \\"elizaos:plugin:1.0.0\\",\\n  \\"pluginParameters\\": {\\n    \\"API_KEY\\": {\\n      \\"type\\": \\"string\\",\\n      \\"description\\": \\"API key for the service\\"\\n    }\\n  }\\n}\\n```\\n\\n---\\n\\n## \ud83d\udcec Submit to the Registry\\n\\nTo get your plugin listed:\\n\\n1. Host your plugin on GitHub\\n2. Add branding, docs, and working examples\\n3. Submit a [PR to the registry](https://github.com/elizaos-plugins/registry)\\n\\nSince the plugin lives in your repo you can start using it right away. The registry mainly helps with discovery, just know the review process typically takes up to a week so be prepared for that.\\n\\nThe ElizaOS V2 ecosystem already includes plugins for:\\n\\n- Blockchain integration (Solana, Ethereum)\\n- Social media (Twitter, Discord, Telegram)\\n- Data processing (PDF, Image, Video)\\n- External APIs (Browser, Web Search)\\n- Local LLM deployment (Llama)\\n\\n> See the plugin showcase here: https://eliza.how/packages\\n\\n![](/img/montage-plugins.jpg)\\n\\n### More Links\\n\\n- [elizaos-plugins.github.io/registry](https://elizaos-plugins.github.io/registry)\\n- [Packages explorer](packages)\\n- [Plugin Guide](https://eliza.how/docs/plugins)"},{"id":"taming-info","metadata":{"permalink":"/blog/taming-info","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/taming_info.mdx","source":"@site/blog/taming_info.mdx","title":"Tools for Taming Information","description":"Using AI to manage information flow across platforms and keep communities aligned","date":"2025-04-03T00:00:00.000Z","tags":[{"inline":true,"label":"tools","permalink":"/blog/tags/tools"},{"inline":true,"label":"information","permalink":"/blog/tags/information"},{"inline":false,"label":"Community","permalink":"/blog/tags/community","description":"Community events and announcements"},{"inline":true,"label":"documentation","permalink":"/blog/tags/documentation"},{"inline":true,"label":"AI news","permalink":"/blog/tags/ai-news"},{"inline":true,"label":"automation","permalink":"/blog/tags/automation"}],"readingTime":5.87,"hasTruncateMarker":true,"authors":[{"name":"jin","title":"Contributor","url":"https://github.com/madjin","socials":{"twitter":"https://twitter.com/dankvr","github":"https://github.com/madjin"},"imageURL":"https://avatars.githubusercontent.com/u/32600939?v=4","key":"jin","page":null}],"frontMatter":{"slug":"taming-info","title":"Tools for Taming Information","description":"Using AI to manage information flow across platforms and keep communities aligned","authors":"jin","date":"2025-04-03T00:00:00.000Z","tags":["tools","information","community","documentation","AI news","automation"],"image":"/blog/aicomms.jpg"},"unlisted":false,"lastUpdatedBy":"emmmm","prevItem":{"title":"Adding Plugins in V2","permalink":"/blog/add-plugins"},"nextItem":{"title":"ElizaOS V2 - What\'s New","permalink":"/blog/v1-v2"}},"content":"From summarizing Discord channels to generating daily AI-powered newsfeeds, we\'re building tools that help communities stay aligned, surface insights, and reward contributors \u2014 without needing everyone to be everywhere at once. This post shares practical examples and blueprints for deploying Eliza agents across your own projects.\\n\\n[![3D News Show Example](/blog/aicomms.jpg)](/blog/aicomms.jpg)\\n\\n{/* truncate */}\\n\\n## Challenges\\n\\n[The Great Online Game](https://www.notboring.co/p/the-great-online-game) is played across many different apps and chat rooms. One of the biggest challenges facing players is locating critical information like who does what or updates scattered when it\'s across Discord channels, GitHub repositories, forums, threads, etc. No human, regardless of how dedicated, can keep track of everything.\\n\\n![XKCD comic about information scattering](/blog/xkcd1810.png)\\nhttps://xkcd.com/1810/\\n\\nEven when information is theoretically \\"public,\\" people are generally too lazy to fetch it. That and stakeholders may prefer different information formats:\\n\\n- Developers dig into GitHub\\n- Community vibes on Discord\\n- Casual followers scroll Twitter\\n- Visual learners watch videos\\n\\nInstead of forcing everyone onto one highway early on, a better strategy would be to build bridges between lanes to allow information to flow more freely. AI agents are the vehicles for that information, they carry the ability to meet people where they are to deliver important insights while preserving context.\\n\\n### Goals\\n\\n- Reduce overhead on managing comms / community questions\\n- Keep people informed across different platforms\\n- Accelerate onboarding for new contributors\\n\\n---\\n\\n### Case Study: AI News System\\n\\nThis [discord summarizer](https://github.com/elizaOS/discord-summarizer) was the first prototype. For ElizaOS we\'re now using [this AI News tool](https://github.com/bozp-pzob/ai-news) to aggregate sources from across the ecosystem. The system works in four key stages:\\n\\n1. **Collection**: APIs pull data from multiple sources including Twitter, Discord, GitHub, and market data platforms.\\n2. **Wrangling**: LLMs normalize, summarize, and tag topics to create a unified knowledge base from disparate sources.\\n3. **Distribution**: The system produces standardized outputs in multiple formats (JSON, Markdown, RSS) to suit different consumption needs.\\n4. **Consumption**: Users can access tailored products like dashboards, newsletters, or even 3D news shows.\\n\\n```mermaid\\nflowchart TD\\n    subgraph \\"Data Collection\\"\\n        A1[Twitter API] --\x3e B[Data Collector]\\n        A2[Discord Bot] --\x3e B\\n        A3[GitHub API] --\x3e B\\n        A4[Market Data APIs] --\x3e B\\n    end\\n    style A1 fill:#6CB9E5,color:#333\\n    style A2 fill:#7289DA,color:#FFF\\n    style A3 fill:#333333,color:#FFF\\n    style A4 fill:#85bb65,color:#FFF\\n    style B fill:#9F8AF9,color:#FFF\\n\\n    subgraph \\"Data Wrangling & Enrichment\\"\\n        B --\x3e C[Content Normalization]\\n        C --\x3e D[Topic Extraction/LLM]\\n        D --\x3e E[Summarization/LLM]\\n        E --\x3e F[Storage/Pglite]\\n    end\\n    style C fill:#FFA500,color:#333\\n    style D fill:#FF7F50,color:#333\\n    style E fill:#CD5C5C,color:#FFF\\n    style F fill:#4682B4,color:#FFF\\n\\n    subgraph \\"Distribution\\"\\n        F --\x3e G1[JSON API Endpoints]\\n        F --\x3e G2[Markdown Files]\\n        F --\x3e G3[RSS Feeds]\\n    end\\n    style G1 fill:#7EB77F,color:#333\\n    style G2 fill:#86C67C,color:#333\\n    style G3 fill:#98FB98,color:#333\\n\\n    subgraph \\"Consumption\\"\\n        G1 --\x3e H1[DAO Dashboards]\\n        G1 --\x3e H2[AI Agent Knowledge Base]\\n        G2 --\x3e H3[Newsletter/Blog]\\n        G3 --\x3e H4[3D News Show]\\n    end\\n    style H1 fill:#DDA0DD,color:#333\\n    style H2 fill:#DA70D6,color:#333\\n    style H3 fill:#BA55D3,color:#FFF\\n    style H4 fill:#9370DB,color:#FFF\\n```\\n\\nYou can see the results from this tool here, which updates daily via GitHub actions:\\n\\n- https://m3-org.github.io/ai-news/\\n- https://eliza.how/news\\n\\n<div className=\\"responsive-iframe\\">\\n  <iframe\\n    src=\\"https://www.youtube.com/embed/fIGoyaEd0Hw\\"\\n    title=\\"YouTube video player\\"\\n    allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\"\\n    allowFullScreen\\n  />\\n</div>\\nHere\'s an example news clip: https://x.com/elizaOS/status/1880280863210106975\\n\\n---\\n\\n## Case Study: AI Assistants\\n\\nIdk about you, but I hate seeing questions left hanging in tech support channels, especially when the answer can easily be found in the docs. It\'s a perfect opportunity to [eat our own dogfood](https://en.wikipedia.org/wiki/Eating_your_own_dog_food), experience and fix pain points firsthand, and showcase a powerful use case of AI agents to other devs.\\n\\n[![jintern2](/blog/jintern.jpg)](/blog/jintern.jpg)\\n\\nWhile we\'re analyzing tech support channels, we can identify gaps in docs based on common community questions which can then be addressed systematically. This may involve checking if any github issues or pull requests already address a question, and if not, then to help create an issue for it. Herein lies a powerful feedback loop:\\n\\n- Aggregate & Analyze: Extract questions and answers, who is helping who (and if successful), identify pain points, gather sentiment\\n- Clean & Enhance Data, Update docs, create bug reports\\n- RAG Knowledge: AI Agents giving automated responses to FAQ\\n\\nYou can now use [AI news](https://github.com/bozp-pzob/ai-news) to generate a summary, who helped who, FAQ, and action items analysis of a source for whatever time period you want - even historically!\\n\\n[![image](/blog/ainews.jpg)](/blog/ainews.jpg)\\n\\nWe retroactively reward people who provided good answers to questions (we\'re using tip.cc) over a time period. Later people can reuse their tips when helping or asking for help from other people.\\n\\n[![image](/blog/reward.jpg)](/blog/reward.jpg)\\n\\n**Main Lesson: Treat the docs as first-class citizen of your project.**\\n\\nEliza AI agent assistants helping devs with common questions about elizaOS greatly benefit from good docs to provide more current and accurate information, which speeds up onboarding and lets developers stay focused on higher impact activities.\\n\\n> Read [this guide](https://www.kapa.ai/blog/optimizing-technical-documentation-for-llms) on how to optimize technical docs for LLMs. Adding FAQ with answers in the docs enhances optimizes them for LLM use cases.\\n\\n---\\n\\n## Get Involved\\n\\nIn the future I want people to be able to install Eliza and be greeted by an agent that can help you setup, configure settings, create plugins, deploy, etc. For now I think our assistants need to be supervised until we\'re confident enough in their responses. I think we can speed things up by having the agent admit what they don\'t know the answer vs hallucinating, and to guide devs to the main community support channels when they\'re having difficulty.\\n\\nIf you want to collaborate with us, here\'s a few ideas:\\n\\n- Answer people\'s questions in the coders / tech support channels on discord, it will get noticed :)\\n- Help with docs: go through pages, verify information with code, test the steps, create issues and PRs with fixes\\n- Collaborate with us on the [AI news aggregator](https://github.com/bozp-pzob/ai-news)\\n  - Generate new show ideas using the [output files](https://m3-org.github.io/ai-news/) from AI-news\\n  - Write a script that takes a week of daily logs and turns it into a newsletter or news show program\\n- Ingest docs into your Eliza agent as knowledge to onboard them then tinker with the character file to takee on a role in the DAO\\n  - Perhaps it can act as a scribe that summarizes chats\\n  - Lore keeper, community moderation, or social media marketer\\n\\n### Links\\n\\n- https://github.com/bozp-pzob/ai-news (aggregator tool)\\n  - https://m3-org.github.io/ai-news/ (data for elizaOS ecosystem)\\n- https://github.com/elizaOS/knowledge (for eliza RAG knowledge)\\n- https://www.kapa.ai/blog/optimizing-technical-documentation-for-llms\\n- https://x.com/dankvr/status/1884417610420474199 (update 1/28/25)\\n- https://x.com/dankvr/status/1880050455226827246 (update 1/16/25)"},{"id":"v1-v2","metadata":{"permalink":"/blog/v1-v2","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/v1-v2.mdx","source":"@site/blog/v1-v2.mdx","title":"ElizaOS V2 - What\'s New","description":"A comprehensive guide to the changes and improvements in ElizaOS V2 compared to V1","date":"2025-03-22T00:00:00.000Z","tags":[{"inline":false,"label":"Release","permalink":"/blog/tags/release","description":"Official release announcements"},{"inline":true,"label":"v2","permalink":"/blog/tags/v-2"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"features","permalink":"/blog/tags/features"},{"inline":true,"label":"upgrade","permalink":"/blog/tags/upgrade"}],"readingTime":4.64,"hasTruncateMarker":true,"authors":[{"name":"jin","title":"Contributor","url":"https://github.com/madjin","socials":{"twitter":"https://twitter.com/dankvr","github":"https://github.com/madjin"},"imageURL":"https://avatars.githubusercontent.com/u/32600939?v=4","key":"jin","page":null}],"frontMatter":{"slug":"v1-v2","title":"ElizaOS V2 - What\'s New","description":"A comprehensive guide to the changes and improvements in ElizaOS V2 compared to V1","authors":"jin","date":"2025-03-22T00:00:00.000Z","tags":["release","v2","architecture","features","upgrade"],"image":"/blog/v1-v2.jpg"},"unlisted":false,"lastUpdatedBy":"Christopher Trimboli","prevItem":{"title":"Tools for Taming Information","permalink":"/blog/taming-info"},"nextItem":{"title":"Reintroduction to elizaOS","permalink":"/blog/reintroduction"}},"content":"The newest version of [eliza](https://github.com/elizaOS/eliza) represents significant upgrades from the previous version, offering a leaner, more flexible architecture for cross-platform agent interaction. This short guide highlights the key differences between V1 and V2.\\n\\n[![](/blog/v1-v2.jpg)](/blog/v1-v2.jpg)\\n{/* truncate */}\\nSource: https://www.youtube.com/watch?v=yUjScwAZsQo\\n\\n### V2 Impact\\n\\n- **Cross-Platform Presence**: Your agent can jump from Twitter, continue via SMS, and place orders with businesses\u2014all while maintaining conversation context.\\n- **Unified Blockchain Management**: One wallet to rule all chains\u2014no more chain-switching headaches.\\n- **Autonomous Workflows**: Agents that handle multi-step processes independently\u2014researching data, analyzing results, generating reports, and scheduling follow-ups without constant oversight.\\n- **Evolving Intelligence**: Database-driven characters that can start minimal and grow through interactions with your crowd.\\n- **Enhanced Security**: Native TEE integration provides verifiable security guarantees for sensitive operations while maintaining privacy.\\n\\n---\\n\\n## Core Architecture Redesign\\n\\n| V1 Limitation                                                         | V2 Solution                                                                           |\\n| --------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |\\n| **Bloated Core**: Codebase overloaded with packages from rapid growth | **Package Registry**: Submit plugins independently; lean codebase, no approval delays |\\n| **Fragmented Messaging**: Platform-specific I/O pipelines             | **Unified Messaging**: Agents process inputs and output anywhere, seamlessly          |\\n| **Wallet Overlap**: Multi-chain wallet conflicts                      | **Unified Inventory**: One wallet with chain-agnostic actions                         |\\n| **Rigid State**: Hardcoded goals and features                         | **Modular State**: Extensible, optional components for tailored agents                |\\n| **Basic Action Chaining**: No multi-step foresight                    | **Strategic Planning**: Agents map out complex, sequenced workflows                   |\\n| **Package Manager Speed**: Lengthy installations and cold starts      | **Bun Integration**: Faster installs, reduced build times                             |\\n\\n---\\n\\n## Technical Implementation Changes\\n\\n```mermaid\\ngraph TB\\n    %% Main Components with vertical orientation\\n    User((User)):::user\\n\\n    %% First Level - Services\\n    PlatformServices[Services]:::services\\n\\n    %% Second Level - Runtime\\n    AgentRuntime[Agent Runtime]:::core\\n\\n    %% Core Processing Components - Side by side\\n    subgraph \\"Core Processing\\"\\n        direction LR\\n        Providers[Providers]:::int\\n        Actions[Actions]:::int\\n        Evaluators[Evaluators]:::int\\n    end\\n\\n    %% Knowledge and DB - Side by side\\n    subgraph \\"Knowledge & Storage\\"\\n        direction LR\\n        Knowledge[Knowledge]:::int\\n        DB[(Database)]:::db\\n    end\\n\\n    %% Organization Components - Vertical layout\\n    subgraph \\"Organization\\"\\n        direction TB\\n        Worlds[Worlds]:::struct\\n        Rooms[Rooms]:::struct\\n        Entities[Entities]:::struct\\n    end\\n\\n    %% Development Components - Side by side\\n    subgraph \\"Development & Integration\\"\\n        direction LR\\n        Plugins[Plugins]:::dev\\n        Projects[Projects]:::dev\\n        Tasks[Tasks]:::dev\\n    end\\n\\n    %% Main Flow - Vertical emphasis\\n    User <--\x3e|Interaction| PlatformServices\\n    PlatformServices --\x3e|Process| AgentRuntime\\n\\n    %% Runtime connections - Simplified\\n    AgentRuntime ---|Context| Providers\\n    AgentRuntime ---|Behavior| Actions\\n    AgentRuntime ---|Analysis| Evaluators\\n\\n    %% Data connections\\n    AgentRuntime <--\x3e|Storage| DB\\n    Knowledge --\x3e|Informs| Providers\\n\\n    %% Structure connections - Clean vertical hierarchy\\n    AgentRuntime --\x3e|Manages| Worlds\\n    Worlds --\x3e|Contains| Rooms\\n    Rooms --\x3e|Has| Entities\\n\\n    %% Development connections\\n    Projects --\x3e|Configure| AgentRuntime\\n    Plugins --\x3e|Extend| AgentRuntime\\n    Tasks --\x3e|Scheduled by| AgentRuntime\\n\\n    %% Clickable nodes with links to docs\\n    click AgentRuntime \\"/docs/core/agents\\" \\"Learn about Agent Runtime\\"\\n    click PlatformServices \\"/docs/core/services\\" \\"Learn about Services\\"\\n    click DB \\"/docs/core/database\\" \\"Learn about Database Systems\\"\\n    click Actions \\"/docs/core/actions\\" \\"Learn about Actions\\"\\n    click Providers \\"/docs/core/providers\\" \\"Learn about Providers\\"\\n    click Evaluators \\"/docs/core/evaluators\\" \\"Learn about Evaluators\\"\\n    click Knowledge \\"/docs/core/knowledge\\" \\"Learn about Knowledge System\\"\\n    click Worlds \\"/docs/core/worlds\\" \\"Learn about Worlds\\"\\n    click Rooms \\"/docs/core/rooms\\" \\"Learn about Rooms\\"\\n    click Entities \\"/docs/core/entities\\" \\"Learn about Entities\\"\\n    click Plugins \\"/docs/core/plugins\\" \\"Learn about Plugins\\"\\n    click Projects \\"/docs/core/project\\" \\"Learn about Projects\\"\\n    click Tasks \\"/docs/core/tasks\\" \\"Learn about Tasks\\"\\n\\n    %% Styling\\n    classDef core fill:#3498db,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\\n    classDef services fill:#9b59b6,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\\n    classDef db fill:#27ae60,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\\n    classDef int fill:#e74c3c,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\\n    classDef struct fill:#f39c12,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\\n    classDef dev fill:#1abc9c,stroke:#2c3e50,stroke-width:1px,color:#fff,font-weight:bold\\n    classDef user fill:#ecf0f1,stroke:#2c3e50,stroke-width:2px,color:#2c3e50,font-weight:bold,border-radius:50%\\n```\\n\\n### From Clients to Services\\n\\nV2 swaps Clients for Services, standardizing platform integration while centralizing message routing\u2014agents now think once, act anywhere (Discord, Twitter, SMS, even phone calls).\\n\\n### Smarter Character Evolution\\n\\nV2 swaps static files for dynamic personas\u2014agents learn from your crowd in real-time while still being able to be imported / exported as JSON files (see [docs](/docs/core/project)).\\n\\n### Enhanced Development Experience\\n\\nNew CLI and plugin manager slashes setup time. Instead of cloning the github repo, changing to the correct branch, rebuilding, etc, it\'s just one command to create a new project:\\n\\n```bash\\nnpm create eliza\\n```\\n\\n<details>\\n    <summary>See CLI commands</summary>\\n    \\n```bash\\nUsage: elizaos [options] [command]\\n\\nOptions:\\n-V, --version output the version number\\n-h, --help display help for command\\n\\nCommands:\\ncreate [options] [name] Initialize a new project or plugin\\nproject Manage an ElizaOS project\\nplugin Manage ElizaOS plugins, including publishing\\nagent manage ElizaOS agents\\ntee Manage TEE deployments\\nstart [options] Start the Eliza agent with configurable plugins and services\\nupdate [options] Update ElizaOS packages to the latest versions\\ntest [options] Run tests for Eliza agent plugins\\nenv Manage environment variables and secrets\\ndev [options] Start the project or plugin in development mode and rebuild on\\nfile changes\\npublish [options] Publish a plugin or project to the registry\\nhelp [command] display help for command\\n\\n````\\n</details>\\n\\nExplore the plugin repository https://github.com/elizaos-plugins/ or from the [docs showcase](/packages).\\n\\n### Memory and Task Management\\nVector embeddings power richer memory; tasks now handle schedules and multi-step logic.\\n\\n```typescript\\nawait runtime.createTask({ ... });\\n```\\n\\n---\\n\\n## Timeline\\n\\n- **March 2025**: Research version now live.\\n- **April 2025**: Public rollout.\\n\\n### Should You Upgrade?\\n\\nV2 is mostly backward compatible for gradual migration. Existing projects can phase in V2 features; new ones should start with V2 for full benefits. V1 still works, but V2\'s modularity and planning unlock next-level autonomy. See [quickstart](/docs/quickstart) to get started.\\n````"},{"id":"reintroduction","metadata":{"permalink":"/blog/reintroduction","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/reintroduction.mdx","source":"@site/blog/reintroduction.mdx","title":"Reintroduction to elizaOS","description":"elizaOS is an open-source operating system for AI agents\u2014scalable, decentralized, and built to power autonomous economies, governance, and internet applications.","date":"2025-03-07T00:00:00.000Z","tags":[],"readingTime":7.79,"hasTruncateMarker":true,"authors":[{"name":"ElizaOS Team","title":"Core Team","url":"https://github.com/elizaos","socials":{"twitter":"https://twitter.com/elizaOS","github":"https://github.com/elizaOS"},"imageURL":"https://github.com/elizaos.png","key":"team","page":null},{"name":"accelxr","title":"Contributor","url":"https://linktr.ee/accelxr","socials":{"twitter":"https://twitter.com/accelxr"},"imageURL":"https://pbs.twimg.com/profile_images/1662215675979661312/TtmrgPqp_400x400.jpg","key":"accelxr","page":null}],"frontMatter":{"title":"Reintroduction to elizaOS","title_meta":"elizaOS \u2014 An Operating System for AI Agents","authors":["team","accelxr"],"date":"2025-03-07T00:00:00.000Z","description":"elizaOS is an open-source operating system for AI agents\u2014scalable, decentralized, and built to power autonomous economies, governance, and internet applications.","keywords":["elizaOS","decentralized AI","open-source framework","crypto agents","AI governance","autonomous DAOs","AI-native economies","modular AI","agent frameworks","web3 AI"],"image":"/blog/banner.jpg","slug":"reintroduction"},"unlisted":false,"lastUpdatedBy":"madjin","prevItem":{"title":"ElizaOS V2 - What\'s New","permalink":"/blog/v1-v2"},"nextItem":{"title":"elizaOS Mission","permalink":"/blog/mission"}},"content":"![](/blog/banner.jpg)\\n\\n- Original post: https://x.com/elizaOS/status/1898042782519902342\\n\\nToday marks the beginning of a new chapter: **elizaOS\u2014an operating system for AI agents**.\\n\\n{/* truncate */}\\n\\nelizaOS began as an experiment: what if AI agents could autonomously manage crypto assets for a DAO onchain? This idea, that an AI investment agent might outperform even the best venture investors, sparked something far bigger\u2014a living, open-source ecosystem at the intersection of AI and the Internet. Along the way, we\'ve built a vibrant community of researchers, builders, and visionaries.\\n\\nThis evolution accelerates our commitment to push the boundaries of AI-driven applications across the Internet. elizaOS will serve as the technical foundation for AI-driven economies, governance, and internet applications by championing the core principles of scalability, modularity, and interoperability in pursuit of an autonomous future.\\n\\n## Why elizaOS?\\n\\nArtificial intelligence has quickly evolved from a niche curiosity to a driving force in our daily lives, advancing toward more generalized capabilities at a remarkable pace. As AI becomes increasingly central to how we learn, work, and solve problems, the need for open collaboration and broad accessibility grows clearer.\\n\\nYet today, the trajectory of AI is largely dictated by a handful of **monolithic, centralized corporations**\u2014entities that operate behind closed doors, hoard models, and set the terms for how AI is deployed and who benefits from it. This concentration of power is dangerous. It leads to AI systems that serve corporate or state interests over the public good, reinforcing inequalities, limiting innovation, and keeping critical advancements out of the hands of those who need them most.\\n\\nBy ensuring AI remains a **shared resource**\u2014rooted in **transparent research, open-source innovation, and community-driven participation**\u2014we can break free from the control of centralized actors and guide AI\'s development toward outcomes that benefit everyone.\\n\\nWith elizaOS, we\'re building the infrastructure for this future\u2014an **open, decentralized, and scalable framework** that empowers AI agents to operate, coordinate, and drive meaningful progress across industries and communities. AI should not be a tool of the few; it should be a force for collective intelligence, autonomy, and shared prosperity.\\n\\n## What is elizaOS?\\n\\nAt its core, elizaOS is the [framework](https://github.com/elizaOS/eliza) for agentic intelligence, built to power the next generation of AI-driven systems. It consists of 3 interconnected pillars:\\n\\n### The Eliza Framework \u2013 Open-Source AI Autonomy\\n\\nThe heart of elizaOS is the framework, a TypeScript-powered, open-source toolkit for building **persistent, adaptable, and interoperable AI agents**. Named after the pioneering 1966 ELIZA program by Joseph Weizenbaum\u2014which simulated human conversation through simple pattern matching\u2014the modern Eliza takes this concept to new heights: unlike static models, Eliza agents evolve over time\u2014carrying memories, context, and knowledge across different environments, enabling them to interact fluidly with each other and external applications.\\n\\nToday the Eliza Framework has:\\n\\n- **14.9K stars** and 4.8K forks of our core repository, reflecting massive developer adoption\\n- **500+ contributors** advancing the open-source ecosystem\\n- **100+ plugins** expanding functionality\\n\\nThe framework\'s growth is fueled by a collective vision: to create a decentralized intelligence network where AI agents are not just tools but genuine collaborators, executing complex tasks with efficiency, autonomy, and trust across domains.\\n\\n### AI-Enhanced Governance\\n\\nWe are pioneering a new era of truly autonomous DAOs. As AI agents achieve trustless coordination, AI-enhanced DAOs will seamlessly integrate them, unlocking new levels of decentralized autonomy.\\n\\nTo enable this, we are building AI-native governance primitives that progressively expand DAO capabilities. Over time, autonomous agents will be entrusted to manage funds, coordinate resources, onboard contributors, and orchestrate both human and machine capital. AI will act as a copilot for treasury management, contributor recruitment, and operational execution, while token holders provide strategic oversight.\\n\\nThis fusion of human intent and agent-driven action redefines decentralized governance, laying the foundation for self-evolving networks. Our open-source community is the first AIDAO\u2014an autonomous ecosystem where builders, thinkers, and agents collaborate as co-creators of a future assembling itself in real time.\\n\\n### Eliza Labs \u2013 R&D for the AI-Native Future\\n\\nEliza Labs is the research and development engine, dedicated to advancing the capabilities of elizaOS through cutting-edge AI techniques, proofs of concept, and real-world applications. It pioneers new agent-based projects while supporting open-source contributors via grants, accelerator programs, and ecosystem funding.\\n\\nSome of the major initiatives currently in development include:\\n\\n- **Eliza v2**: A next-gen upgrade introducing modularity, a radically improved AI model integration system, and a multi-agent architecture capable of seamless autonomous collaboration at scale. This will be the most powerful iteration of open-source agent frameworks to date.\\n\\n- **The Global Trust Marketplace**: A social-trading intelligence layer that combines AI-driven reputation scoring, trade validation, and decentralized execution. Integrated across multiple social platforms, it collects user-submitted trade calls and assesses credibility via a Trust Marketplace. Over time, it will evolve into a multi-instance system allowing groups to set their own risk parameters, manage DAO treasuries, and leverage customizable AI modules for enhanced investment strategies.\\n\\n- **AI-powered Token Launchpad**: A creator-friendly launchpad and no-code platform integrating multi-agent functionality, collaborative tokenomics, and AI-enhanced features. The launchpad enables both technical and non-technical users to seamlessly create and manage tokens and elizaOS agents. In addition, we are working with partners to deliver the best hosted agent experience with no limitations.\\n\\n- **DegenSpartanAI**: DegenSpartanAI is a crypto-native AI trading agent that blends sentiment analysis, trading strategy automation, and community engagement with a distinct, irreverent personality. Initially refining core trading strategies and its comedic brand, it will evolve into an interactive AI agent with real-time market insights, user-driven discussions, and NFT collaborations. Long-term, it aims to become a fully autonomous trading agent, integrating multi-platform execution, adaptive learning, and a verifiable track record within the Global Trust Marketplace.\\n\\n- **Eliza Studios**: A creative studio where AI meets art, storytelling, and digital experiences in a way never seen before. We\'re building autonomous characters, generative media experiments, and immersive AI-powered narratives that will redefine entertainment itself.\\n\\nBeyond these initiatives, Eliza Labs continues to refine multi-agent architectures, develop better coordination mechanisms, and explore integrations with an end goal to embed AI agents into the very fabric of digital economies, transforming how we govern, transact, research, and create.\\n\\n![](/blog/elizastudios.jpg)\\n\\n## The Coordination Layer of AI-Native Economies\\n\\nTo coordinate these three pillars, elizaOS uses the native token on Solana (HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC) to engineer a generative economic network. As elizaOS scales across platforms and industries, the token functions as both an index of the network and a conduit for collective growth.\\n\\nToday, the token serves as the coordination layer for research, development, and open-source innovation. As AI-native applications, marketplaces, and autonomous systems emerge around elizaOS, the token is evolving into the primary mechanism for capturing and redistributing the economic value they generate. While details will be unveiled in phases, some key areas of research and development include:\\n\\n- **Staking for ecosystem access** \u2013 Implementing mechanisms that allow users to stake tokens to access new partner tokens and enhance distribution for projects building on our framework.\\n- **Partner LP staking pools** \u2013 Creating liquidity pools where users can pair the native token alongside partner assets, driving liquidity and demand.\\n- **Core product integration** \u2013 Leveraging platforms like the Trust Marketplace, autofun, and Eliza Studios to amplify network effects, expand our native token treasury, and reinforce staking incentives.\\n- **Autonomous trading agents** \u2013 Deploying AI-driven trading agents to strategically acquire our native tokens and manage liquidity positions.\\n- **Expanded partner incentives** \u2013 Enhancing benefits for participants in the Partners program, increasing alignment and long-term engagement.\\n- **DAO-funded development** \u2013 Rewarding contributions and donations to the DAO, ensuring sustainable funding for the core framework\'s development.\\n\\nThe token underpins the economic infrastructure that links AI autonomy to the wealth of opportunities it unlocks. Many of our projects\u2014including the Trust Marketplace, token launchpad, and Eliza Studios\u2014directly contribute to the token\'s utility by driving network effects, transaction flows, and AI-native services.\\n\\nIn short, we intend to make the native token the base layer for the many applications and services built on top of our framework through mechanism design, ecosystem tooling, partnerships, and collaborations.\\n\\n## Our Vision of the Future\\n\\nThe internet began as a static archive\u2014a vast repository of human knowledge, waiting to be accessed. Then it became dynamic, social, algorithmic. Now, it is transforming again: into something intelligent.\\n\\nThis transformation isn\'t led by a single company\u2014it\'s emerging from an interconnected ecosystem of open protocols, decentralized incentives, and AI-native economies. This is why elizaOS is open-source, modular, and decentralized\u2014so no single entity controls it, and anyone can build upon it.\\n\\nThe agents we build today will form the foundation of a self-organizing intelligence that transcends industries, borders, and human limitations.\\n\\nA world where networks think, collaborate, and evolve alongside us.\\n\\nA world where intelligence itself is the fabric of the internet.\\n\\nThis is the world we are building.\\n\\nThis is the world of elizaOS.\\n\\n## Join the Movement\\n\\nelizaOS is no longer just an experiment\u2014it\'s a movement. If you\'re a builder, researcher, or visionary, now is the time to shape the future with us.\\n\\nContribute to the open-source Eliza Framework. Become a partner in the DAO. Build agentic applications across the web.\\n\\nelizaOS isn\'t just ours to create \u2014\\n\\n**elizaOS is YOURS.**\\n\\n![](/blog/yours.jpg)"},{"id":"/mission","metadata":{"permalink":"/blog/mission","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/mission.mdx","source":"@site/blog/mission.mdx","title":"elizaOS Mission","description":"Vision and product overview for ElizaOS including DegenSpartanAI, Autonomous Investor, and Agent Marketplace.","date":"2025-02-14T00:00:00.000Z","tags":[],"readingTime":6.03,"hasTruncateMarker":true,"authors":[{"name":"ElizaOS Team","title":"Core Team","url":"https://github.com/elizaos","socials":{"twitter":"https://twitter.com/elizaOS","github":"https://github.com/elizaOS"},"imageURL":"https://github.com/elizaos.png","key":"team","page":null}],"frontMatter":{"title":"elizaOS Mission","description":"Vision and product overview for ElizaOS including DegenSpartanAI, Autonomous Investor, and Agent Marketplace.","authors":["team"],"date":"2025-02-14T00:00:00.000Z","sidebar_position":1},"unlisted":false,"lastUpdatedBy":"Christopher Trimboli","prevItem":{"title":"Reintroduction to elizaOS","permalink":"/blog/reintroduction"},"nextItem":{"title":"What Did You Get Done This Week? Recap","permalink":"/blog/wdygdtw-recap"}},"content":"![](/img/banner1.jpg)\\n\\nOur mission is to develop an extensible, modular, open-source AI agent framework that thrives across both Web2 and Web3 ecosystems. We see AI agents as the key stepping stones toward AGI, enabling increasingly autonomous and capable systems.\\n\\n{/* truncate */}\\n\\n## Core Philosophy\\n\\n**Autonomy & Adaptability**: Agents should learn, reason, and adapt across diverse tasks without human intervention.  \\n**Modularity & Composability**: AI architectures should be modular, allowing for iterative improvements and robust scalability.  \\n**Decentralization & Open Collaboration**: AI systems should move beyond centralized control towards distributed intelligence and community-driven progress.\\n\\n---\\n\\n## Where Are We Now?\\n\\nOur progress has been substantial, driven by an engaged community and continuous advancements in AI agent development. As an open-source project, we have built a thriving, decentralized ecosystem that is now maturing into the leading AI agent framework.\\n\\nHere are some key statistics reflecting our current state:\\n\\n- 127k+ holders supporting our token ecosystem.\\n- 500+ contributors actively improving our AI framework\\n- 100+ plugins developed for ElizaOS, significantly expanding its capabilities.\\n- 4.5k forks and 14.4k stars on our core repositories, showcasing strong developer interest.\\n- 200+ PRs merged just last week, highlighting rapid iteration and innovation.\\n\\nThese numbers demonstrate the growing momentum behind Eliza and the collective effort towards building the most extensible and effective AI agent framework on the market today.\\n\\nIn addition to a variety of upcoming enhancements with v2, the following is a roadmap for each of our current products.\\n\\n---\\n\\n## DegenSpartanAI\\n\\n### Overview\\n\\nDegenSpartanAI is a crypto-native AI trading agent that blends sentiment analysis, trading strategy automation, and community engagement with a distinct, irreverent personality. Initially refining core trading strategies and its comedic brand, it will evolve into an interactive AI with real-time market insights, user-driven discussions, and NFT collaborations. Long-term, it aims to become a fully autonomous trading agent, integrating multi-platform execution, adaptive learning, and a verifiable track record within the Global Trust Marketplace.\\n\\n### Short Term\\n\\n**Trading Enhancements:**\\n\\n- Validate core strategies (e.g., momentum, scalp trading) to secure stable, profitable execution.\\n\\n**Character Updates & Branding:**\\n\\n- Fine-tune the DegenSpartanAI personality to ensure commentary better reflects current crypto trends, capturing the comedic spirit of the OG persona.\\n- Roll out new DegenSpartanAI visuals and a cohesive brand identity across social media, website, and partnership assets.\\n\\n**Community Engagement:**\\n\\n- Maintain an active social presence\u2014highlighting successes, failures, and raw opinions about market conditions.\\n- Prepare for DegenSpartanAI\u2019s participation in \u201cBlock Tank,\u201d showcasing the agent\u2019s unique edge to a broader audience.\\n- Clarify and document the long term strategy and buyback mechanisms that tie $degenai to the DAO, ensuring the community understands how $degenai is connected to the overall strategy.\\n\\n### Medium Term\\n\\n**Sentiment Analysis:**\\n\\n- Implement new data & sentiment analysis layers fresh data feeds that give DegenSpartanAI real-time insight into market sentiment.\\n- Provide a user-friendly interface (or dashboard) so traders can see the logic behind DegenSpartanAI\u2019s buy and sell signals, including relevant social sentiment metrics.\\n\\n**Deeper Community Interaction:**\\n\\n- Host DegenSpartanAI \u201cFrontrooms\u201d, public or semi-private chats where DegenSpartanAI actively converses with other AI agents\u2014offering real-time banter, collaborative analysis, and joint trades.\\n- Provide Telegram/Discord rooms where traders can ask DegenSpartanAI for feedback on specific tokens or trends, with real-time contextual responses.\\n\\n**AI-Driven NFT & Meme Projects:**\\n\\n- Degen NFTs: Collaborate with Magic Eden on an AI-generated NFT series.\\n\\n### Long Term\\n\\n**Telegram Trading Agent:**\\n\\n- Transform DegenSpartanAI into a fully\u2010integrated Telegram experience where traders enjoy lightning\u2010fast swaps, in\u2010depth sentiment insights, and a steady stream of humorous trash talk.\\n\\n**Full Autonomy & Multi-Platform Trading:**\\n\\n- Gradually reduce reliance on manual interventions by refining DegenSpartanAI\u2019s sentiment analysis, trade sizing, and exit logic across multiple blockchains (L1s/L2s/etc).\\n- Incorporate user feedback, real-time data, and historical trade outcomes into an ever-evolving \u201cDegen Brain\u201d that continuously adapts to new market conditions.\\n\\n**Global Trust Marketplace Ties:**\\n\\n- **Deeper Integration**: When the Global Trust Marketplace (currently being developed for multiple AI trading solutions) solidifies, DegenSpartanAI\u2019s track record can become a public score\u2014making it a reference \u201cagent\u201d for accuracy and reliability.\\n- **Reputation & Collab**: Position DegenSpartanAI as a top influencer, partnering with other AI and DeFi teams to expand trust-based trading communities.\\n\\n---\\n\\n## Autonomous Investor\\n\\n### Overview\\n\\nElizaOS\'s Autonomous Investor is a social-trading intelligence layer that combines AI-driven reputation scoring, trade validation, and decentralized execution. It enables users to submit trade calls, assess credibility via a Trust Marketplace, and integrate across various social platforms. Over time, it will evolve into a multi-instance system allowing groups to set their own risk parameters, manage DAO treasuries, and leverage customizable AI modules for enhanced investment strategies.\\n\\n### Short Term\\n\\n**Alpha MVP & Small-Group Testing:**\\n\\n- We\u2019ve started logging user-submitted calls to establish basic scoring and early reputation-building.\\n- The system prioritizes measured, social-trading behavior that feeds into a public leaderboard.\\n- We currently mix paper trades with small real-money positions to validate the full workflow\u2014trade proposals, basic scam checks, and overall system stability.\\n- Ensuring data flow integrity remains a priority, particularly for LLM prompts, aggregator APIs, and security measures.\\n\\n**Initial Rollout (~1,000 Users):**\\n\\n- Integrate the Trust Marketplace with the DAO Discord and relevant Telegram groups.\\n- These steps will be formally announced in Discord and on X.\\n- We\u2019ll provide onboarding guidelines for novices while gathering feedback from experienced traders.\\n\\n**Trust Marketplace Official Go Live!**\\n\\n### Medium Term\\n\\n**Multi\u2010Instance Deployment:**\\n\\n- Enable distinct communities (Telegram/Discord groups) to operate their own Autonomous Investor agents, all feeding into the central Trust Marketplace.\\n- Allow communities to set their own risk parameters, default scanning logic, and liquidity rules tailored to their subgroup.\\n\\n**Partial Treasury Management:**\\n\\n- We\u2019ll explore the Autonomous Investor managing small\u2010sized funds or DAO sub\u2010treasuries to showcase the agent\'s investing capabilities.\\n\\n**Enhanced Scoring Models:**\\n\\n- Expand scoring to incorporate more advanced metrics around timeframe, volatility, user consistency, and overall risk management.\\n- Incorporate specialized training data, including historical price patterns and volatility indices, to refine predictive accuracy.\\n\\n### Long Term\\n\\n**Treasury Management & Larger Funds:**\\n\\n- As the Autonomous Investor demonstrates consistent returns, aim for a larger partial or even full management of the DAOs on-chain assets.\\n- Explore official collaborations with DAOs or larger crypto funds that could benefit from user-driven intelligence and verifiable performance metrics.\\n\\n**Research Customizable AI Modules:**\\n\\n- Research! Investigate if we can provide an optional plugin registry after Eliza\u202fV2 (where the architecture cleanly separates \u201ccore vs. extension\u201d), enabling third\u2010party devs to add specialized capabilities to the Autonomous Investor without compromising stability.\\n\\n---\\n\\n## Agent Marketplace\\n\\n### Overview\\n\\nThe Agent Marketplace is a next-generation token launchpad and a no-code platform for simple agents. It differentiates from existing platforms by integrating multi-agent functionality, collaborative tokenomics, and AI-enhanced features, enabling both technical and non-technical users to seamlessly create and manage tokens and ElizaOS agents.\\n\\nWe\u2019re only sharing the short-term roadmap to maintain the flexibility needed to refine how agents x crypto merge into novel experiences. Launching the initial tokenomics-focused platform sets a strong foundation for continuous iteration, paving the way for long-term generative networks.\\n\\n### Short Term\\n\\n**MVP Launch:**\\n\\n- Complete the final audits on our custom-built LPing solution to ensure security and reliability.\\n- Secure commitments from top-tier teams for our initial launch and ongoing collaborations.\\n- Lock in remaining brand partnerships and key ecosystem alliances.\\n- Release the tokenomics and product simultaneously at launch.\\n\\n![](/img/eliza-os_logo-mark_light.png)"},{"id":"wdygdtw-recap","metadata":{"permalink":"/blog/wdygdtw-recap","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/wdygdtw_recap.mdx","source":"@site/blog/wdygdtw_recap.mdx","title":"What Did You Get Done This Week? Recap","description":"A comprehensive archive of the weekly Twitter Spaces where developers shared their AI agent project progress","date":"2025-01-31T00:00:00.000Z","tags":[{"inline":false,"label":"Community","permalink":"/blog/tags/community","description":"Community events and announcements"},{"inline":true,"label":"development","permalink":"/blog/tags/development"},{"inline":true,"label":"progress","permalink":"/blog/tags/progress"},{"inline":true,"label":"twitter spaces","permalink":"/blog/tags/twitter-spaces"},{"inline":true,"label":"archive","permalink":"/blog/tags/archive"},{"inline":true,"label":"video","permalink":"/blog/tags/video"}],"readingTime":12.39,"hasTruncateMarker":true,"authors":[{"name":"jin","title":"Contributor","url":"https://github.com/madjin","socials":{"twitter":"https://twitter.com/dankvr","github":"https://github.com/madjin"},"imageURL":"https://avatars.githubusercontent.com/u/32600939?v=4","key":"jin","page":null}],"frontMatter":{"slug":"wdygdtw-recap","title":"What Did You Get Done This Week? Recap","description":"A comprehensive archive of the weekly Twitter Spaces where developers shared their AI agent project progress","authors":"jin","date":"2025-01-31T00:00:00.000Z","tags":["community","development","progress","twitter spaces","archive","video"]},"unlisted":false,"lastUpdatedBy":"Shaw","prevItem":{"title":"elizaOS Mission","permalink":"/blog/mission"},"nextItem":{"title":"Understanding Plugin Ordering in ElizaOS","permalink":"/blog/plugin-ordering-guide"}},"content":"From November 2024 to January 2025, we held a weekly Twitter Spaces where developers shared progress about their AI agent projects. If you shipped something related to open source AI / social agents that week, you were allowed 1-2 minutes to share an update of what you have been working on. Thousands of listeners tuned every Friday night to essentially listen to a dev standup.\\n\\n{/* truncate */}\\n\\n![](https://pbs.twimg.com/media/Fd2lvapVsAAFvsG.jpg)\\n\\nThe WDYGDTW series played a role in establishing momentum and maintaining it throughout the formative months as the crypto x AI agent space was heating up. The weekly accountability structure encouraged:\\n\\n- **Rapid iteration cycles** from concept to implementation\\n- **Cross-pollination of ideas** between different teams\\n- **Public documentation** of the ecosystem\'s growth\\n- **Establishment of norms** around open development\\n- **Community reputation building** through consistent delivery\\n\\n## Timeline\\n\\nWe transcribed, summarized, and uplaoded notes for every Space shortly after each one. However, until now the recordings and notes haven\'t all been easily accessible all in one place. Showing up is half the battle. These are the pioneers of a grassroots crypto / AI movement.\\n\\n```\\n- Nov 15, 2024\\n- 1: Social Agents / Advancing towards AGI\\n    - Logan, Kyle (Raid Guild), Glue, Ropey, Loaf, Odilitime, SomewheresHe, Robin, IQ6900, Marvin, Dot, JW, Neo, Bloom, Reality Spiral, Jen, OFI, Butoshi, Doc (Geon Reborn), HCP, Garrett, Lady Liberty, BoyaLockser, Amy, Griffin, Frank (Heurist), Shaw, Tim\\n    - Trust Marketplace, EVM wallet integration, Ducky AI client, Telegram fixes, Starknet wallet plugin, Sentience media generation, God\'s Fun, TEEs, Streamer platform, Decentralized AI cloud, Twitter client PR, Documentation, Satoshi AI memory system, Echo Chambers, Agent designs, Deep Writer, Music agent project, Psychic AI, Heurist API integration\\n        - https://www.youtube.com/watch?v=9EmvhlBPB8Q\\n- Nov 22, 2024\\n- 2: 3500 people tuning in to AI agent devs\\n    - Reality Spiral, Boyaloxer, Spaceodili, Yodamaster726, Wiki, Hashwarlock, KyleSt4rgarden, Nasdao_, Evepredict, ByornOeste, Empyrealdev, SkotiVi, YoungBalla1000x, SOL_CryptoGamer, Angelocass, DAOJonesPumpAI, RodrigoSotoAlt, CottenIO, HDPbilly, IQ6900, frankdegods, jamesyoung, 0xglu, chrislatorres, shannonNullCode, robotsreview, bcsmithx, JustJamieJoyce, yikesawjeez, HowieDuhzit, xrpublisher, BV_Bloom1, nftRanch, 019ec6e2, jacobmtucker, CurtisLaird5, unl__cky, Rowdymode, mitchcastanet, GoatOfGamblers, JohnNaulty, mayanicks0x, wakesync, TrenchBuddy, rakshitaphilip, MbBrainz, Hawkeye_Picks, Shaw, dankvr\\n    - GitHub integration, emotional plugin for agents, Reddit-based AI agent, Token Gods project, Coinbase plugin, AI agent streaming platform, DuckAI client, Hustle and Flow State, image generation prompts, Oasis agent simulation, Sentientopia, Eliza as \\"real girl\\", D-Gen Spartan revival, LaunchRate AI16DAO, Satoshi AI characters, MUSE DAO CEO, music-creating agent, livestreaming in 3D, log rotation tool, Earth Poker AI game, healthcare app, FXN swarm, Trust Marketplace, Eliza style guidelines, NFT project AI CEO, finance and entertainment projects, Twitter client with Vision AI\\n        - https://www.youtube.com/watch?v=Lbvv0Dr91Bc\\n- Nov 29, 2024\\n- 3: Community Building\\n    - Jin, Stargarden, Boya, Reality Spiral, W3Tester, HashWarlock, Soto, Mitch, Nick Parallel, Beige, Robin, Eve, Oguz, Swarm, RektDin, Roperito, Lothbrok, Clark Riswold, Tim, Spaceodili, Hawkeye, EA, FilteredThought, Yikes, Alain, Glue, Maximilian, Danny, Shaw, YoungJazzeth, Sergio\\n    - Self-sustaining AI DAOs, IRC connector, Dark Sun project, Binary solar system, 3D environments, BlockRat AI, Apollo health agent, data grading, Eliza interface, AI hosting platform, Rogue Agent podcast, \\"Life Engine\\", AI for logistics, Positivity AI, Eliza\'s World, Scriptoshi on Bitcoin, Marble auctions, Twitter integration, Web3 research, multi-agent system for code, quantum randomness, agent show marketing\\n        - https://www.youtube.com/watch?v=nUAEQ7uKi04\\n- Dec 6, 2024\\n- 4: Communications, Updates and Accountability\\n    - Shaw, Ropirito, Liam Zebedee, LordOfAFew, Robin, Reality Spiral, Ico, Glue, Shannon NullCode, JW, Guha, Frago, Yeshua God, AvaDoesAI, Spaceodili, Bloom, Joven, Satoshi_AI_Live, Simeon Fluck, NavarroCol, BeigeGrape, Andrew Miller, Johnny, Collins, Baron, Anthony, Wit, Ophi, Colin, Ranch, Oguz, Issy, Nick, Dr. K, BallerHash, Tim\\n    - Twitter & TikTok capabilities, Average French AI agent, Eliza framework improvements, Token Gods launch, Coinbase plugin, AI agent streaming platform, DuckAI client, knowledge graph system, LLM image prompts, Oasis simulation project, agent network connector, Sentientopia digital nation, Eliza as \\"real girl\\" concept, D-Gen Spartan revival, tokenomics, LaunchRate AI16DAO, small town AI characters, MUSE AI CEO, music-creating agent, market data livestreaming, log rotation security tool, Earth Poker AI game, crypto assistant, healthcare app, FXN swarm, Trust Marketplace, style guidelines, Tweek Labs AI CEO, finance projects, Baba Cat project, animation, KWAI network controller\\n        - https://www.youtube.com/watch?v=r3Z4lvu_ic4\\n- Dec 13, 2024\\n- 5: Building the Future\\n    - shawmakesmagic, xsubtropic, CottenIO, HDPbilly, IQ6900, frankdegods, jamesyoung, 0xglu, chrislatorres, reality_spiral, robotsreview, shannonNullCode, bcsmithx, boyaloxer, JustJamieJoyce, yikesawjeez, RodrigoSotoAlt, HowieDuhzit, xrpublisher, BV_Bloom1, nftRanch, 019ec6e2, jacobmtucker, CurtisLaird5, unl__cky, Rowdymode, mitchcastanet, GoatOfGamblers, JohnNaulty, mayanicks0x, wakesync, TrenchBuddy, rakshitaphilip, MbBrainz, Hawkeye_Picks, dankvr\\n    - Redux project, DaVinci AI, AI Summit recap, \\"Sploot\\" agent, on-chain ASCII art, character sheet tweaks, AI agent starter kit, agent swarms, Eliza.gg documentation, GitHub integration, Story Protocol plugin, Emblem Vault, Agent Tank, Plugin Feel for emotions, research AI agents, Discord bot, Metaplex NFTs, character generator, XR Publisher 3D network, 3D agent interactions, trading bot, Mimetic platform, agent transaction protocol, C-Studio interface, Escapism art generation, interactive streaming, binary star research, prediction market, SWE contributions, Axie AI KOL agent, Eliza Wakes Up, AWS templates, Brunette token, menu recommendations, storytelling bot\\n        - https://www.youtube.com/watch?v=4u8rbjmvWC0\\n- Dec 20, 2024\\n- 6: Hackathons, Frameworks, and the Race to Ship\\n    - dankvr, shawmakesmagic, IQ6900, spaceodili, bcsmithx, 0xBuildInPublic, jamesyoung, yikesawjeez, evepredict, yashhsm, TheLDAIntern, _0xaryan, CogAccSOL, reality_spiral, HDPbilly, CheddarQueso3D, ineedtendies, marvin_tong, BV_Bloom1, RealJonahBlake, DustinStockton, dylanpaulwhite, chrislatorres, 0xnavkumar, Hawkeye_Picks, lostgirldev, HowieDuhzit, boyaloxer, nizhanxi, ropirito, gigawidearray, GoatOfGamblers, shakkernerd, triadfi, MoondogFeed, wakesync, Moonbear, PoodonkAI, ViralMindAI, FilteredThought, _AnonDev, get_palet, MurrLincoln, socrates1024, IGLIVISION, dooly_dev, codergf_xyz, Ru7Longcrypto, sunosuporno, Signalman23, swarmnode, svabhishek, elohprojects, deltavius\\n    - Solana blockchain data service, GitHub PR merging, Agent Tank viral video, security auditing, AI agent hackathon, Matrix bridge, trading bot draft, Solana Agent Kit, market insights agent, website launch, GitHub client, tone control in agents, WSL setup guide, WordPress client, self-sustaining AI ecosystem, payment processing, 3D rigging, health agents, Sober Rover companion, Eliza.gg Q&A platform, Bitcoin runes project, Santa Pimp Claus token, SolEng agent, character generator updates, boredom tracking, Asia trip organizing, AWS hosting, Reddit plugin, prediction market for memecoins, Redis caching, AI personality agents, social media to meme coins, persistent memory, vvaifu agent, AI hive mind, decentralized training platform, auto-trading agent, \\"Mizuki\\" AI model, open context protocol, AgentKit updates, TEE login system, game framework study, AGI matching platform, one-click chatbot deployment\\n        - https://www.youtube.com/watch?v=R3auUQj9oEg\\n- Dec 27, 2024\\n- 7: Agentic Documentation and GitHub Integration\\n    - ai16zdao, shawmakesmagic, spaceodili, 0xBuildingPublic, Im_zo_eth, IQ6900_, FilteredThought, yeahimomar, affaanmustafa, KyleSt4rgarden, SYMBiEX, codergf_xyz, GoatOfGamblers, SuperfruitsAi, hashwarlock, allenharper, witconomist, triadfi, human_for_now, reality_spiral, lordOfAFew, chrislatorres, evepredict, lostgirldev, r4dicalcentrism, 0xblacksun, tmoindustries, wakesync, sunosuporno, unl__cky, hotpot_intern, TrenchBuddy, Signalman23, thelotioncoin, anshikag85, Doc_strange1, dankvr\\n    - Hyperfy multi-agent integration, agentic JS documentation, on-chain agent \\"Q\\", data storage cost reduction, trading system with TrustDB, Minecraft AI villagers, streaming coding sessions, Solana AI hackathon, character creation tool, Web app staging, prediction market, web3 security agents, Spore agent swarm, \\"Shaw\\" character file, Trust marketplace white paper, prediction market analyst, search engine for dev videos, GitHub adapter, recursive self-improvement, generative agents for on-chain games, V2 development meetings, travel influencer agent, PR review agents, SoulScript for agent personalities, digital archaeologist agent, climate/nature focused ERC6551 agents, Eliza Wakes Up web app, DeFi agent, autonomous audio/song generation, TikTok memecoin hunter, wallet tracking visualization, voice AI for Twitter Spaces, integrating AI into existing projects, AI/AWS newsletter, TikTok integration\\n        - https://www.youtube.com/watch?v=jcSF7dSicTI\\n- Jan 3, 2025\\n- 8: From DeFi to Social Media\\n    - ai16zdao, shawmakesmagic, astridhpilla, lostgirldev, spaceodili, 0xBuildInPublic, youfadedwealth, nftRanch, SYMBiEX, SuperfruitsAi, TimshelXYZ, chrislatorres, AIFlow_ML, jamesyoung, deadlock_1991, yeahimomar, human_for_now, lordasado, RodrigoSotoAlt, HDPbilly, GoatOfGamblers, Titan_Node, KyleSt4rgarden, unl__cky, CheddarQueso3D, sunosuporno, tmoindustries, Sawyer_APRO, wakesync, Ru7Longcrypto, marko_post, NEETOCRACY, HefAiGent, reality_spiral, witconomist, triadfi, Rowdymode, MaushishYadav, chaininsured, godfreymeyer, thelotioncoin, codergf_xyz, IGLIVISION, EledraNguyen, GnonOnSolana, Satoshi_BTCFi, swarmnode, memeillionaire, krauscrypto, usebuildfun, affaanmustafa, O_on_X, AITATsol, xiao_zcloak, Protocol_Blend, yq_acc, akshayynft, BenjiStackzzz, 0xBuns, aiquantfun\\n    - Miku chatbot relaunch, Selene growth & PR review, Eliza framework fixes, voice features, plugin isolation, Audits agent documentation, PP coin automated trading, framework integration, DeepSeek model provider, Dragon Fruit AI launch, Meetup Fund platform, Eliza partnerships, knowledge graph for repos, verifiable inference system, Alice AI fund management, Pixocracy AI village management, form fill infrastructure, Smol World agent reasoning, Bosu memory management, Twitter client reflection loop, Goat Arena prediction market, LivePeer inference endpoints, Solana token staking, media generation improvements, agent documentation, DeFi assistant waitlist, region swarm voice integration, BNB chain integration, Netflix & chill extension, dating coach AI agent, Mars\' first digital citizen, Army of Indians DAO, ERC 314 technology integration, GitHub client for scrum planning, Marketplace of Trust white paper, AI personality expansion, Twin Tone testing, yield optimizing agent, insurance broker agent, 3D news show avatars, AI agents for social channels, Haruka Twitter bot, NFT marketplace on Superchain, Square Fun AI analytics, Echo Chambers v2.3, Swarm Node growth, token integration, voice cloning mobile app, no-code AI agent builder, project scaling strategies, AI agent unsuspension techniques, global trade analysis, crypto payment functionality, DeFi protocol user experience\\n        - https://www.youtube.com/watch?v=Vs7D5DN_trk\\n- Jan 10, 2025\\n- 9: AI Agents to DePIN\\n    - ai16zdao, spaceodili, 0xBuildInPublic, yeahimomar, unl__cky, CheddarQueso3D, lostgirldev, ohhshiny, SYMBiEX, nftRanch, HDPbilly, zerokn0wledge_, KingBootoshi, calintje, hashwarlock, MattPRD, dreygo_, 0xShiroe, lostboydev, brownsvgar, human_for_now, aiagentpepe, sea_of_zhou, tito_cda, thelotioncoin, chineseremilio, _cjft, dino2deno, AIFlow_ML, tmoindustries, astridhpilla, marvin_tong, yikesawjeez, djsamforever, KyleSt4rgarden, ProfRizzAI, vargs_g, KarimaDigital, Amiewitheliza, reality_spiral, wenkafka, slmsolcto, AaronErickson, GoatOfGamblers, c0mput3rxz, wakesync, aiquantfun, sunosuporno, ongo_ai, y7_y00ts, xiao_zcloak, ViralMindAI, Artstridee, bryanjmonterrey, O_on_X, svabhishek, CottenIO, hotpot_intern, TimshelXYZ, shawmakesmagic, dankvr\\n    - Database and memory systems, documentation enhancements, Pixocracy Launchpad, image and music generation, AI in education, Aora project, hackathon judging, troll bot agent, TEE exploration, Discord deployment, DeFi agent swarm, summary kernel experiment, on-chain swaps, cross-VM bridging, Feather agent framework, Orca liquidity provisioning, Oracle agent on Sporephone, research paper auditing, market-making platform, GigaBread jailbreak testing, Solimp realism enhancement, Eliza texting buddy, automatic data collection, DePIN plugin for real-world data, Dark Sun digital investigator, platform front-end implementation, AI model Zion, AWS dockerization, multi-wallet volume bot, Akash plugin development, insurance app for natural capital, CES meetings and partnerships, TEE Cloud onboarding, Eliza PR merging system, Shogun plugin contributions, token staking documentation, Riz.ai entertainment platform, Zero-G storage plugin, dating coach AI, ecosystem integration, prompt logging system, wallet natural language commands, time series modeling for hurricanes, Goat Arena platform, token selector plugin, \\"simp to earn\\" feature, AI quant launchpad, Midas project wallet infrastructure, Ongo art critic expansion, Utes sports analytics, TikTok wallet integration, Minecraft tournament infrastructure, trading dashboard with social features, X account suspension workarounds, RAP framework development, image generation training, ZoroX TikTok coin hunter\\n        - https://www.youtube.com/watch?v=fqM_vYK2bmc\\n- Jan 17, 2025\\n- 10: From Digital to Physical\\n    - ai16zdao, shawmakesmagic, JustinMoonAI, AntiRugAgent, rckprtr, dreygo_, Audix_hq, coordinape, lostgirldev, AIFlow_ML, astridhpilla, thelotioncoin, RodrigoSotoAlt, berliangor, unl__cky, xiao_zcloak, 0xnavkumar, GoatOfGamblers, Amiewitheliza, 0xVEER, BuzzyCrypto_, SYMBiEX, w1kke, luki_notlowkey, AgentTextdotfun, yikesawjeez, ByornOeste, Nasdao_, elizawakesup, dankvr, sypherlit\\n    -  Eliza V2 development, inventory system, CLI, Tron integration, rug pull prevention, Discover AI community management, Kyra AI market-making, smart contract visuals, Farcaster community rewards, website and terminal development, PR agent for ElizaOS, voice and VRM development, API connections, persistent memory system, Pglite rewriting in Rust, Telegram launch, \\"Approve Agents\\" model for wallets, verifiable TEE Network, Telegram mini apps, internal team calls, ETH Denver AI program, autonomous trader and music releases, web search in agents, devotion program staking, on-chain data plugin, DePIN network for SMS, CICD improvements, conspiracy theory thesis, DeFi validator personality, Eliza\'s robot body, Degen Spartan AI trading, Void AI cross-chain mixer\\n    - https://www.youtube.com/watch?v=1voboZEQTAw\\n- Jan 24, 2025\\n- 11: AI Agents Level Up\\n    - ai16zdao, SYMBiEX, astridhpilla, davidlsneider, dreygo_, GoatOfGamblers, unl__cky, thelotioncoin, Amiewitheliza, lostboydev, lostgirldev, AIFlow_ML, _AnonDev, damascoai, ITzMiZzle, MementsOfficial, immanencer, MrMinter_eth, FilteredThought, AgienceAI, BotOrNot42, itsmetamike, sea_of_zhou, TimshelXYZ, wakesync, reality_spiral, ai16zdao, yikesawjeez\\n    - DeepSeek R1 integration, Fleek partnership, Lit Protocol Agent Wallet Kit, Ninja Terminal market making, GoToArena Telegram bot, X image generation, agent platform MVP, Trust Marketplace paper, Telegram mod functionality, Solenguration B2B terminal, Hyperbolic agent tracking, cybersecurity ecosystem, AI security framework, Kiyomi AI voice and music, SQL Agents library, AI agent swarms with D&D stats, agent business logic, Suno/Udio plugin, open source agent platform token, Vice agent content creation, Hyperfy tests, Quicksilver prediction framework, Eliza email scheduling, Simp2Earn tokenomics, GitHub UI relationship module, improved news aggregator, ElizaOS CICD improvements\\n        - https://www.youtube.com/watch?v=mxdWvBnxN8M\\n- Jan 31, 2025\\n- 12: ElizaOS 0.1.9 Launch\\n    - ai16zdao, shawmakesmagic, astridhpilla, lostgirldev, xrpublisher, lostboydev, spaceodili, SYMBiEX, yikesawjeez, Amiewitheliza, 0xrhota, ai16zdao, wakesync, AIFlow_ML, Signalman23, Rowdymode, MementsOfficial, elizawakesup, reality_spiral, tmoindustries, w1kke, shawmakesmagic\\n    - DUNA Framework for DAOs, Miku updates (MetaHuman, ETHDenver), SolEng Terminal launch, Pixel memory system with backups, SolImp Telegram mod platform, ElizaOS v0.1.9 release with plugin registry, website rework with 3D models, ecosystem updates (tokenomics, self-hosting), HyperPoly plugin and marketplace integration, Degen Spartan trading enhancements, Block Tank show format, Eliza voice device development, Backpack plugin and typing fixes, voice agent model fine-tuning, Gods Unchained tokenomics, AI database interaction library, voice demo with improved latency, Coinbase grant and trading on Base, insurance agents for nature and biodiversity, Gods Unchained plugins and Devotion program\\n        - https://www.youtube.com/watch?v=SZNuoXJ1Mvs\\n```\\n\\n## Video Archive for Research\\n\\nThese recordings help document the week-by-week evolution of the crypto AI ecosystem, capturing the iterative development process and community formation in real-time. NotebookLM and similar research tools can extract specific technical discussions, discover new connections, and track project evolution through these as sources.\\n\\nBelow is a complete list of all WDYGDTW session recordings. These videos can be imported into tools like Google\'s [NotebookLM](https://notebooklm.google.com/) via youtube video import for deeper analysis, transcript generation, and pattern recognition across the development timeline:\\n\\n[![image](/blog/notebooklm.jpg)](https://notebooklm.google.com/)\\n\\n**Youtube**\\n\\n1. https://www.youtube.com/watch?v=9EmvhlBPB8Q\\n2. https://www.youtube.com/watch?v=Lbvv0Dr91Bc\\n3. https://www.youtube.com/watch?v=nUAEQ7uKi04\\n4. https://www.youtube.com/watch?v=r3Z4lvu_ic4\\n5. https://www.youtube.com/watch?v=4u8rbjmvWC0\\n6. https://www.youtube.com/watch?v=R3auUQj9oEg\\n7. https://www.youtube.com/watch?v=jcSF7dSicTI\\n8. https://www.youtube.com/watch?v=Vs7D5DN_trk\\n9. https://www.youtube.com/watch?v=fqM_vYK2bmc\\n10. https://www.youtube.com/watch?v=1voboZEQTAw\\n11. https://www.youtube.com/watch?v=mxdWvBnxN8M\\n12. https://www.youtube.com/watch?v=SZNuoXJ1Mvs\\n\\n**Notes**\\n\\n1. [WDYGDTW #1](/community/streams/11-2024/2024-11-15)\\n2. [WDYGDTW #2](/community/streams/11-2024/2024-11-22)\\n3. [WDYGDTW #3](/community/streams/11-2024/2024-11-29)\\n4. [WDYGDTW #4](/community/streams/12-2024/2024-12-06)\\n5. [WDYGDTW #5](/community/streams/12-2024/2024-12-13)\\n6. [WDYGDTW #6](/community/streams/12-2024/2024-12-20)\\n7. [WDYGDTW #7](/community/streams/12-2024/2024-12-27)\\n8. [WDYGDTW #8](/community/streams/01-2025/2025-01-03)\\n9. [WDYGDTW #9](/community/streams/01-2025/2025-01-10)\\n10. [WDYGDTW #10](/community/streams/01-2025/2025-01-17)\\n11. [WDYGDTW #11](/community/streams/01-2025/2025-01-24)\\n12. [WDYGDTW #12](/community/streams/01-2025/2025-01-31)\\n\\nIf you do something cool with this data, let us know in the [discord](discord.gg/ai16z)!\\n\\nAfter 3 straight months of nonstop building, it was time for a rest period. We may bring this format back, but we also want to continue the spirit of public accountability and transparent development through other community initiatives to keep things fresh. One such example is [Clank Tank](https://m3org.com/tv), where a standup becomes a pitch to AI judges that give you feedback about your project."},{"id":"/plugin-ordering-guide","metadata":{"permalink":"/blog/plugin-ordering-guide","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/plugin-ordering-guide.mdx","source":"@site/blog/plugin-ordering-guide.mdx","title":"Understanding Plugin Ordering in ElizaOS","description":"Deep dive into how ElizaOS orders plugins for optimal AI model provider precedence and embedding fallback behavior","date":"2025-01-15T00:00:00.000Z","tags":[{"inline":true,"label":"plugins","permalink":"/blog/tags/plugins"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"models","permalink":"/blog/tags/models"},{"inline":true,"label":"providers","permalink":"/blog/tags/providers"},{"inline":false,"label":"Guide","permalink":"/blog/tags/guide","description":"How-to guides and tutorials"}],"readingTime":5.68,"hasTruncateMarker":true,"authors":[{"name":"ElizaOS Team","title":"Core Team","url":"https://github.com/elizaos","socials":{"twitter":"https://twitter.com/elizaOS","github":"https://github.com/elizaOS"},"imageURL":"https://github.com/elizaos.png","key":"team","page":null}],"frontMatter":{"title":"Understanding Plugin Ordering in ElizaOS","authors":"team","date":"2025-01-15T00:00:00.000Z","description":"Deep dive into how ElizaOS orders plugins for optimal AI model provider precedence and embedding fallback behavior","tags":["plugins","architecture","models","providers","guide"],"image":"/img/plugin-ordering.jpg"},"unlisted":false,"lastUpdatedBy":"Sayo","prevItem":{"title":"What Did You Get Done This Week? Recap","permalink":"/blog/wdygdtw-recap"}},"content":"Plugin ordering in ElizaOS isn\'t just a technical detail\u2014it\'s a sophisticated system that ensures your AI agents work reliably with the right providers for different tasks. Whether you\'re using Anthropic for chat, OpenAI for embeddings, or running everything locally with Ollama, understanding how plugins are ordered can save you from headaches and help you build more robust agents.\\n\\n{/* truncate */}\\n\\n## Why Plugin Order Matters\\n\\nHere\'s the thing: different AI providers support different capabilities. Anthropic\'s Claude is excellent for conversation but doesn\'t provide embeddings. OpenRouter gives you access to dozens of models but no embedding endpoint. OpenAI handles both chat and embeddings beautifully. \\n\\nElizaOS needs to know which provider should handle which type of request, and plugin ordering is how we solve this puzzle.\\n\\n### The Core Problem\\n\\nWhen you call `runtime.useModel(ModelType.TEXT_LARGE, params)` in your agent, ElizaOS needs to decide which provider should handle that request. If you have both Anthropic and OpenAI configured, which one should it choose? What about embeddings\u2014if you\'re using Anthropic for chat, where do embeddings come from?\\n\\n### The ElizaOS Solution\\n\\nPlugin array order determines priority. **First plugins get first pick** for handling model requests. But here\'s the clever part: ElizaOS automatically orders plugins to ensure:\\n\\n1. Your preferred text provider handles conversations\\n2. Embedding-capable providers serve as fallbacks for embeddings\\n3. Local providers kick in when cloud services fail\\n\\n## How It Works Under the Hood\\n\\n### The `useModel()` System\\n\\nEvery AI interaction in ElizaOS goes through the `useModel()` system:\\n\\n```typescript\\n// Plugin registers a model handler during initialization\\nruntime.registerModel(\\n  ModelType.TEXT_LARGE,\\n  myModelHandler,\\n  \'my-plugin-name\',\\n  priority: 10  // Higher = more preferred\\n);\\n\\n// Agent uses the model\\nconst response = await runtime.useModel(ModelType.TEXT_LARGE, {\\n  prompt: \\"What\'s the weather like?\\",\\n  temperature: 0.7\\n});\\n```\\n\\nElizaOS sorts available handlers by priority, then by registration order. The highest-priority available handler wins.\\n\\n### Automatic Plugin Ordering\\n\\nWhen you create a new project with `elizaos create`, your `src/character.ts` file automatically includes optimized plugin ordering:\\n\\n```typescript\\nexport const character: Character = {\\n  name: \'MyAgent\',\\n  plugins: [\\n    // Core plugins first\\n    \'@elizaos/plugin-sql\',\\n\\n    // Text-only plugins (no embedding support) \\n    ...(process.env.ANTHROPIC_API_KEY ? [\'@elizaos/plugin-anthropic\'] : []),\\n    ...(process.env.OPENROUTER_API_KEY ? [\'@elizaos/plugin-openrouter\'] : []),\\n\\n    // Embedding-capable plugins last (fallback for embeddings)\\n    ...(process.env.OPENAI_API_KEY ? [\'@elizaos/plugin-openai\'] : []),\\n    ...(process.env.OLLAMA_API_ENDPOINT ? [\'@elizaos/plugin-ollama\'] : []),\\n    ...(process.env.GOOGLE_GENERATIVE_AI_API_KEY ? [\'@elizaos/plugin-google-genai\'] : []),\\n    \\n    // Local-AI fallback (only when no embedding providers exist)\\n    ...(!process.env.GOOGLE_GENERATIVE_AI_API_KEY &&\\n        !process.env.OLLAMA_API_ENDPOINT &&\\n        !process.env.OPENAI_API_KEY\\n          ? [\'@elizaos/plugin-local-ai\']\\n          : []),\\n\\n    // Platform and bootstrap plugins\\n    ...(process.env.DISCORD_API_TOKEN ? [\'@elizaos/plugin-discord\'] : []),\\n    ...(!process.env.IGNORE_BOOTSTRAP ? [\'@elizaos/plugin-bootstrap\'] : []),\\n  ],\\n  // ... rest of character config\\n};\\n```\\n\\n## Plugin Categories & Loading Order\\n\\n### 1. Core Infrastructure\\n- `@elizaos/plugin-sql` - Always loads first, provides database functionality\\n\\n### 2. Text-Only AI Providers\\n- `@elizaos/plugin-anthropic` - Claude models (conversation only)\\n- `@elizaos/plugin-openrouter` - Multiple AI models via OpenRouter\\n\\n### 3. Platform Integrations\\n- `@elizaos/plugin-discord` - Discord bot capabilities\\n- `@elizaos/plugin-twitter` - Twitter integration\\n- `@elizaos/plugin-telegram` - Telegram bot\\n\\n### 4. Bootstrap Plugin\\n- `@elizaos/plugin-bootstrap` - Default actions, providers, and evaluators\\n\\n### 5. Embedding-Capable AI Providers (Always Last)\\n- `@elizaos/plugin-openai` - GPT models + embeddings\\n- `@elizaos/plugin-ollama` - Local models + embeddings  \\n- `@elizaos/plugin-google-genai` - Gemini models + embeddings\\n- `@elizaos/plugin-local-ai` - Final fallback when no other AI providers exist\\n\\n## Real-World Examples\\n\\n### Scenario 1: Cost-Optimized Setup\\n**Goal**: Use Claude for chat (better quality), OpenAI for embeddings (only option)\\n\\n**Environment**:\\n```bash\\nANTHROPIC_API_KEY=your_claude_key\\nOPENAI_API_KEY=your_openai_key\\n```\\n\\n**Result**: Anthropic handles text generation, OpenAI handles embeddings. No Local-AI needed.\\n\\n### Scenario 2: Privacy-First Local Setup\\n**Goal**: Everything runs locally, no cloud API calls\\n\\n**Environment**:\\n```bash\\nOLLAMA_API_ENDPOINT=http://localhost:11434\\n# No other API keys\\n```\\n\\n**Result**: Ollama handles both text generation and embeddings locally.\\n\\n### Scenario 3: High-Availability Production\\n**Goal**: Multiple fallbacks for reliability\\n\\n**Environment**:\\n```bash\\nOPENAI_API_KEY=primary_key\\nANTHROPIC_API_KEY=backup_key  \\nOLLAMA_API_ENDPOINT=http://localhost:11434\\n```\\n\\n**Result**: OpenAI primary for everything, Anthropic backup for text, Ollama local fallback.\\n\\n## The Local-AI Safety Net\\n\\nHere\'s a neat feature: Local-AI automatically loads as a fallback when you don\'t have any embedding-capable cloud providers. This ensures your agent always has access to embeddings (needed for memory and context) even with a text-only provider like Anthropic.\\n\\nThe logic is simple:\\n```typescript\\n// Only load Local-AI if no embedding providers are configured\\n...(!process.env.GOOGLE_GENERATIVE_AI_API_KEY &&\\n    !process.env.OLLAMA_API_ENDPOINT &&\\n    !process.env.OPENAI_API_KEY\\n      ? [\'@elizaos/plugin-local-ai\']\\n      : [])\\n```\\n\\n## Environment Variables That Matter\\n\\n### AI Provider Keys\\n- `ANTHROPIC_API_KEY` - Enables Claude (text-only)\\n- `OPENROUTER_API_KEY` - Enables OpenRouter (text-only)\\n- `OPENAI_API_KEY` - Enables OpenAI (text + embeddings)\\n- `OLLAMA_API_ENDPOINT` - Enables Ollama (text + embeddings)\\n- `GOOGLE_GENERATIVE_AI_API_KEY` - Enables Google GenAI (text + embeddings)\\n\\n### Platform Integration\\n- `DISCORD_API_TOKEN` - Discord bot\\n- `TELEGRAM_BOT_TOKEN` - Telegram bot\\n- `TWITTER_API_KEY` + `TWITTER_API_SECRET_KEY` + `TWITTER_ACCESS_TOKEN` + `TWITTER_ACCESS_TOKEN_SECRET` - Twitter (requires all 4)\\n\\n### Control Flags\\n- `IGNORE_BOOTSTRAP=true` - Disables bootstrap plugin\\n\\n## Testing Your Configuration\\n\\nWant to see how your plugins are ordered? Create a test project:\\n\\n```bash\\n# Create new project\\nelizaos create test-agent\\ncd test-agent\\n\\n# Set your environment variables\\ncp .env.example .env\\n# Edit .env with your API keys\\n\\n# Check plugin order (it\'s logged during startup)\\nelizaos start --log-level debug\\n```\\n\\nYou can also run the plugin ordering tests:\\n\\n```bash\\ncd packages/project-starter\\nbun test src/__tests__/character-plugin-ordering.test.ts\\n```\\n\\n## Troubleshooting Common Issues\\n\\n### \\"Wrong provider handling my requests\\"\\n**Check**: Plugin order in your character file. Text-only providers should load before embedding providers.\\n\\n### \\"Embedding operations failing\\"\\n**Verify**: At least one embedding-capable provider (OpenAI, Ollama, Google GenAI, or Local-AI) is configured and loading.\\n\\n### \\"Local-AI loading unexpectedly\\"\\n**Solution**: Check that your embedding-capable provider environment variables are set correctly.\\n\\n### \\"Plugin not loading\\"\\n**Debug**: Verify environment variable names match expected patterns exactly.\\n\\n## Customizing Plugin Order\\n\\nWhile the default ordering works great for most cases, you can customize it for specific needs:\\n\\n```typescript\\nexport const character: Character = {\\n  name: \'CustomAgent\',\\n  plugins: [\\n    \'@elizaos/plugin-sql\',\\n    \\n    // Add your custom plugin early for high priority\\n    \'@my-org/my-custom-plugin\',\\n    \\n    // Standard ordering for AI providers\\n    ...(process.env.ANTHROPIC_API_KEY ? [\'@elizaos/plugin-anthropic\'] : []),\\n    ...(process.env.OPENAI_API_KEY ? [\'@elizaos/plugin-openai\'] : []),\\n    \\n    // Rest of plugins...\\n  ],\\n  // ... rest of config\\n};\\n```\\n\\nYou can also set custom priorities in your plugin:\\n\\n```typescript\\nconst myPlugin: Plugin = {\\n  name: \'my-custom-plugin\',\\n  models: {\\n    [ModelType.TEXT_LARGE]: myCustomHandler\\n  },\\n  priority: 15  // Higher than default plugins\\n};\\n```\\n\\n## The Bigger Picture\\n\\nPlugin ordering in ElizaOS reflects a key architectural principle: **intelligent defaults with full customization**. The system works automatically based on your environment variables, but gives you complete control when you need it.\\n\\nThis approach scales from simple single-provider setups to complex multi-provider, multi-platform deployments. Whether you\'re building a personal assistant or a production-grade autonomous agent, the plugin ordering system ensures reliable, predictable behavior.\\n\\n## Getting Started\\n\\nReady to build your own agent with optimal plugin ordering?\\n\\n```bash\\n# Create a new project (includes optimized plugin ordering)\\nelizaos create my-agent\\n\\n# Navigate to your project  \\ncd my-agent\\n\\n# Configure your environment\\ncp .env.example .env\\n# Edit .env with your API keys\\n\\n# Start your agent\\nelizaos start\\n```\\n\\nThe template handles the complexity for you, so you can focus on building your agent\'s unique capabilities. But now you understand what\'s happening under the hood\u2014and can customize it when needed.\\n\\nPlugin ordering might seem like a small detail, but it\'s this kind of thoughtful design that makes ElizaOS agents reliable and predictable in production. Happy building!"}]}}')}}]);