"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[10798],{5862:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"type-aliases/MemoryScope","title":"MemoryScope","description":"@elizaos/core v1.0.12 / MemoryScope","source":"@site/api/type-aliases/MemoryScope.md","sourceDirName":"type-aliases","slug":"/type-aliases/MemoryScope","permalink":"/api/type-aliases/MemoryScope","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Media","permalink":"/api/type-aliases/Media"},"next":{"title":"MemoryTypeAlias","permalink":"/api/type-aliases/MemoryTypeAlias"}}');var n=i(31085),r=i(71184);const t={},c="Type Alias: MemoryScope",a={},l=[{value:"Defined in",id:"defined-in",level:2}];function d(e){const s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"/api/",children:"@elizaos/core v1.0.12"})," / MemoryScope"]}),"\n",(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"type-alias-memoryscope",children:"Type Alias: MemoryScope"})}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"MemoryScope"}),": ",(0,n.jsx)(s.code,{children:'"shared"'})," | ",(0,n.jsx)(s.code,{children:'"private"'})," | ",(0,n.jsx)(s.code,{children:'"room"'})]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Defines the scope of a memory, indicating its visibility and accessibility."}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"shared"}),": The memory is accessible to multiple entities or across different contexts (e.g., a public fact)."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"private"}),": The memory is specific to a single entity or a private context (e.g., a user's personal preference)."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"room"}),": The memory is scoped to a specific room or channel.\nThis is used in ",(0,n.jsx)(s.code,{children:"MemoryMetadata"})," to control how memories are stored and retrieved based on context."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://github.com/zpark/eliza/blob/main/packages/core/src/types/memory.ts#L31",children:"packages/core/src/types/memory.ts:31"})})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},71184:(e,s,i)=>{i.d(s,{R:()=>t,x:()=>c});var o=i(14041);const n={},r=o.createContext(n);function t(e){const s=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),o.createElement(r.Provider,{value:s},e.children)}}}]);