"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[505],{27475:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"guides/remote-deployment","title":"Deploying ElizaOS to Production","description":"A guide to deploying and maintaining an ElizaOS agent in a production environment.","source":"@site/versioned_docs/version-0.25.9/guides/remote-deployment.md","sourceDirName":"guides","slug":"/guides/remote-deployment","permalink":"/docs/0.25.9/guides/remote-deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/versioned_docs/version-0.25.9/guides/remote-deployment.md","tags":[],"version":"0.25.9","lastUpdatedBy":"madjin","lastUpdatedAt":1742171474000,"sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/docs/0.25.9/guides/configuration"},"next":{"title":"Secrets Management","permalink":"/docs/0.25.9/guides/secrets-management"}}');var i=s(31085),l=s(71184);const t={sidebar_position:13},o="Deploying ElizaOS to Production",r={},c=[{value:"Assumptions",id:"assumptions",level:2},{value:"Basic System Setup",id:"basic-system-setup",level:2},{value:"Locale",id:"locale",level:3},{value:"Service user",id:"service-user",level:3},{value:"Install dependencies and configure the agent",id:"install-dependencies-and-configure-the-agent",level:2},{value:"Configure Environment",id:"configure-environment",level:3},{value:"Shell Environment Setup",id:"shell-environment-setup",level:3},{value:"<code>systemd</code> Service",id:"systemd-service",level:3},{value:"FAQ",id:"faq",level:2},{value:"How do I run multiple agents?",id:"how-do-i-run-multiple-agents",level:3},{value:"What are the resource requirements?",id:"what-are-the-resource-requirements",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"deploying-elizaos-to-production",children:"Deploying ElizaOS to Production"})}),"\n",(0,i.jsxs)(n.p,{children:["A guide to deploying and maintaining an ",(0,i.jsx)(n.a,{href:"https://github.com/elizaOS/eliza",children:"ElizaOS"})," agent in a production environment."]}),"\n",(0,i.jsx)(n.h2,{id:"assumptions",children:"Assumptions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Freshly installed Ubuntu 22.04 LTS"}),"\n",(0,i.jsx)(n.li,{children:"RAM >= 4GB"}),"\n",(0,i.jsx)(n.li,{children:"Disk space >= 20GB"}),"\n",(0,i.jsx)(n.li,{children:"You have a user, not root, with sudo access that can ssh into the server"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basic-system-setup",children:"Basic System Setup"}),"\n",(0,i.jsx)(n.p,{children:"A slightly opinionated list of tools that we need to install."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt -y upgrade\nsudo apt -y install \\\n    neovim \\\n    curl \\\n    git \\\n    unzip \\\n    zip \\\n    ntp \\\n    ufw \\\n    python3 \\\n    python3-pip\n"})}),"\n",(0,i.jsx)(n.p,{children:"Configure and enable firewall."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow 22/tcp\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you want to publicly expose the API, you can do so with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo ufw allow 3000/tcp\n"})}),"\n",(0,i.jsx)(n.p,{children:"Enable the firewall."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo ufw --force enable\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note: For a Discord bot, no additional ports need to be opened. The bot makes outbound connections to Discord's servers which are allowed by default."}),"\n",(0,i.jsx)(n.h3,{id:"locale",children:"Locale"}),"\n",(0,i.jsx)(n.p,{children:"The following ensures that your agent's date and time matches yours. Adjust to suit."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo timedatectl set-timezone Europe/London\nsudo locale-gen en_GB.UTF-8 > /dev/null\nsudo update-locale LANG=en_GB.UTF-8\n"})}),"\n",(0,i.jsx)(n.h3,{id:"service-user",children:"Service user"}),"\n",(0,i.jsxs)(n.p,{children:["Create a system user called ",(0,i.jsx)(n.code,{children:"eliza"})," with a home directory of ",(0,i.jsx)(n.code,{children:"/opt/elizaos"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo useradd -r -s /bin/bash -d /opt/elizaos -m eliza\nsudo chown -R eliza:eliza /opt/elizaos\nsudo chmod 750 /opt/elizaos\n"})}),"\n",(0,i.jsx)(n.h2,{id:"install-dependencies-and-configure-the-agent",children:"Install dependencies and configure the agent"}),"\n",(0,i.jsxs)(n.p,{children:["Switch to the ",(0,i.jsx)(n.code,{children:"eliza"})," user and clone the repository."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo su - eliza # this puts you in /opt/elizaos\n\ngit clone https://github.com/elizaOS/eliza.git\n"})}),"\n",(0,i.jsx)(n.p,{children:"Switch to the latest release branch."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd eliza\ngit checkout $(git describe --tags --abbrev=0)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can see which release you're on using ",(0,i.jsx)(n.code,{children:"git status"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"eliza@parzival:~$ git status\nHEAD detached at v0.25.6-alpha.1\n"})}),"\n",(0,i.jsx)(n.p,{children:"Install nvm."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\nexport NVM_DIR="$HOME/.nvm"\n. "$NVM_DIR/nvm.sh"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Install the correct version of Node.js using nvm."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"nvm install v23.3.0\nnvm use v23.3.0\n"})}),"\n",(0,i.jsx)(n.p,{children:"Install pnpm globally and verify the installation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install pnpm\nnpm install -g pnpm\npnpm setup\nsource ~/.bashrc\n\n# Verify pnpm installation and path\nwhich pnpm\n# Should output something like: /opt/elizaos/.local/share/pnpm/pnpm\n"})}),"\n",(0,i.jsx)(n.p,{children:"Install and build the workspace."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm install --no-frozen-lockfile\npnpm build\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configure-environment",children:"Configure Environment"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Copy example environment file\ncp -v .env.example .env\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Make changes to the ",(0,i.jsx)(n.code,{children:".env"})," file for your production environment as required."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, your ",(0,i.jsx)(n.code,{children:".env"})," might look like this for a simple Discord bot:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"USE_CHARACTER_STORAGE=true\n\n# Discord Configuration\nDISCORD_APPLICATION_ID=...\nDISCORD_API_TOKEN=...\n\n# AI Provider Keys\nOPENAI_API_KEY=sk-...\nANTHROPIC_API_KEY=sk-...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Setup a default character and storage for the character's state."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd characters\nln -svf snoop.character.json default.character.json\ncd ..\nmkdir -p data/memory/default\nchmod 750 data\n"})}),"\n",(0,i.jsx)(n.h3,{id:"shell-environment-setup",children:"Shell Environment Setup"}),"\n",(0,i.jsxs)(n.p,{children:["We need to properly configure the shell environment for the ",(0,i.jsx)(n.code,{children:"eliza"})," user so nvm/pnpm works:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'sudo tee /opt/elizaos/.profile << \'EOL\'\n# NVM setup\nexport NVM_DIR="$HOME/.nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"\n\n# pnpm setup\nexport PNPM_HOME="$HOME/.local/share/pnpm"\ncase ":$PATH:" in\n  *":$PNPM_HOME:"*) ;;\n  *) export PATH="$PNPM_HOME:$PATH" ;;\nesac\nEOL\n'})}),"\n",(0,i.jsx)(n.p,{children:"Set ownership of the profile file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo chown eliza:eliza /opt/elizaos/.profile\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"systemd-service",children:[(0,i.jsx)(n.code,{children:"systemd"})," Service"]}),"\n",(0,i.jsx)(n.p,{children:"To enable eliza to start automatically on boot, we need to create a systemd service."}),"\n",(0,i.jsxs)(n.p,{children:["Logout as ",(0,i.jsx)(n.code,{children:"eliza"})," using ",(0,i.jsx)(n.code,{children:"CTRL-D"}),", which should drop you\nback into your user with sudo access."]}),"\n",(0,i.jsx)(n.p,{children:"Create the systemd service file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo tee /etc/systemd/system/eliza.service << 'EOL'\n[Unit]\nDescription=Eliza AI Chat Agent\nAfter=network.target\n\n[Service]\nType=simple\nUser=eliza\nWorkingDirectory=/opt/elizaos/eliza\n\n# Environment setup\nEnvironment=NODE_ENV=production\nEnvironment=HOME=/opt/elizaos\nEnvironment=HTTP_PORT=3000\nEnvironment=PATH=/opt/elizaos/.local/share/pnpm:/usr/local/bin:/usr/bin:/bin\nEnvironment=NVM_DIR=/opt/elizaos/.nvm\n\n# Source NVM and start app\nExecStart=/bin/bash -c '. $NVM_DIR/nvm.sh && exec pnpm start --characters=\"characters/default.character.json\"'\n\n# Logging\nStandardOutput=append:/var/log/eliza/eliza.log\nStandardError=append:/var/log/eliza/eliza-error.log\n\n# Restart configuration\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOL\n"})}),"\n",(0,i.jsx)(n.p,{children:"Create the log directory."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo mkdir -p /var/log/eliza\nsudo chown -R eliza:eliza /var/log/eliza\n"})}),"\n",(0,i.jsx)(n.p,{children:"Enable and start the service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo systemctl daemon-reload\nsudo systemctl enable eliza\nsudo systemctl start eliza\n"})}),"\n",(0,i.jsx)(n.p,{children:"The API should now be running on port 3000. Note that external access to this port is blocked by default unless you explicitly allowed it in the firewall configuration during basic system setup."}),"\n",(0,i.jsx)(n.p,{children:"If you need to troubleshoot, you can:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check service status\nsudo systemctl status eliza\n\n# View service logs with journald\nsudo journalctl -u eliza -f\n"})}),"\n",(0,i.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-run-multiple-agents",children:"How do I run multiple agents?"}),"\n",(0,i.jsx)(n.p,{children:"Create separate characterfiles or Docker containers for each agent with unique configurations and credentials."}),"\n",(0,i.jsx)(n.h3,{id:"what-are-the-resource-requirements",children:"What are the resource requirements?"}),"\n",(0,i.jsx)(n.p,{children:"Minimum >=4GB recommended and 20G disk space is recommended. CUDA optional unless using local LLMs."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},71184:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var a=s(14041);const i={},l=a.createContext(i);function t(e){const n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);