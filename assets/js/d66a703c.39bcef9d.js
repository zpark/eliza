"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[75821],{19534:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"advanced/verified-inference","title":"\ud83e\udeaa Verified Inference","description":"Overview","source":"@site/versioned_docs/version-0.25.9/advanced/verified-inference.md","sourceDirName":"advanced","slug":"/advanced/verified-inference","permalink":"/docs/0.25.9/advanced/verified-inference","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/versioned_docs/version-0.25.9/advanced/verified-inference.md","tags":[],"version":"0.25.9","lastUpdatedBy":"Shaw","lastUpdatedAt":1742190530000,"sidebarPosition":18,"frontMatter":{"sidebar_position":18},"sidebar":"tutorialSidebar","previous":{"title":"Eliza in TEE","permalink":"/docs/0.25.9/advanced/eliza-in-tee"},"next":{"title":"Introduction","permalink":"/docs/0.25.9/rest/eliza-os-api"}}');var s=i(31085),t=i(71184);const o={sidebar_position:18},a="\ud83e\udeaa Verified Inference",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Background",id:"background",level:2},{value:"Tutorial",id:"tutorial",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-verified-inference",children:"\ud83e\udeaa Verified Inference"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"With verified inference, you can turn your Eliza agent fully verifiable on-chain on Solana with an OpenAI-compatible TEE API. This proves that your agent\u2019s thoughts and outputs are free from human control thus increasing the trust of the agent."}),"\n",(0,s.jsxs)(n.p,{children:["Compared to ",(0,s.jsx)(n.a,{href:"https://elizaos.github.io/eliza/docs/advanced/eliza-in-tee/",children:"fully deploying the agent in a TEE"}),", this is a more light-weight solution which only verifies the inference calls and only needs a single line of code change."]}),"\n",(0,s.jsx)(n.p,{children:"The API supports all OpenAI models out of the box, including your fine-tuned models. The following guide will walk you through how to use verified inference API with Eliza."}),"\n",(0,s.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,s.jsxs)(n.p,{children:["The API is built on top of ",(0,s.jsx)(n.a,{href:"https://github.com/galadriel-ai/Sentience",children:"Sentience Stack"}),", which cryptographically verifies the agent's LLM inferences inside TEEs, posts those proofs on-chain on Solana, and makes the verified inference logs available to read and display to users."]}),"\n",(0,s.jsxs)(n.p,{children:["Here\u2019s how it works:\n",(0,s.jsx)(n.img,{src:"https://i.imgur.com/SNwSHam.png",alt:""})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"The agent sends a request containing a message with the desired LLM model to the TEE."}),"\n",(0,s.jsx)(n.li,{children:"The TEE securely processes the request by calling the LLM API."}),"\n",(0,s.jsxs)(n.li,{children:["The TEE sends back the ",(0,s.jsx)(n.code,{children:"{Message, Proof}"})," to the agent."]}),"\n",(0,s.jsxs)(n.li,{children:["The TEE submits the attestation with ",(0,s.jsx)(n.code,{children:"{Message, Proof}"})," to Solana."]}),"\n",(0,s.jsxs)(n.li,{children:["The Proof of Sentience SDK is used to read the attestation from Solana and verify it with ",(0,s.jsx)(n.code,{children:"{Message, Proof}"}),". The proof log can be added to the agent's website/app."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To verify the code running inside the TEE, use instructions ",(0,s.jsx)(n.a,{href:"https://github.com/galadriel-ai/sentience/tree/main/verified-inference/verify",children:"from here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"tutorial",children:"Tutorial"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Create a free API key on ",(0,s.jsx)(n.a,{href:"https://dashboard.galadriel.com/login",children:"Galadriel dashboard"})]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Configure the environment variables"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"GALADRIEL_API_KEY=gal-*         # Get from https://dashboard.galadriel.com/\n# Use any model supported by OpenAI\nSMALL_GALADRIEL_MODEL=          # Default: gpt-4o-mini\nMEDIUM_GALADRIEL_MODEL=         # Default: gpt-4o\nLARGE_GALADRIEL_MODEL=          # Default: gpt-4o\n# If you wish to use a fine-tuned model you will need to provide your own OpenAI API key\nGALADRIEL_FINE_TUNE_API_KEY=    # starting with sk-\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Configure your character to use ",(0,s.jsx)(n.code,{children:"galadriel"})]})}),"\n",(0,s.jsxs)(n.p,{children:["In your character file set the ",(0,s.jsx)(n.code,{children:"modelProvider"})," as ",(0,s.jsx)(n.code,{children:"galadriel"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"modelProvider": "galadriel"\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Run your agent."})}),"\n",(0,s.jsxs)(n.p,{children:["Reminder of how to run an agent is ",(0,s.jsx)(n.a,{href:"https://elizaos.github.io/eliza/docs/quickstart/#create-your-first-agent",children:"here"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'pnpm start --character="characters/<your_character>.json"\npnpm start:client\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Get the history of all of your verified inference calls"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const url = 'https://api.galadriel.com/v1/verified/chat/completions?limit=100&filter=mine';\nconst headers = {\n'accept': 'application/json',\n'Authorization': 'Bearer <GALADRIEL_API_KEY>'// Replace with your Galadriel API key\n};\n\n    const response = await fetch(url, { method: 'GET', headers });\n    const data = await response.json();\n    console.log(data);\n    ```\n\n    Use this to build a verified logs terminal to your agent front end, for example:\n\n![](https://i.imgur.com/yejIlao.png)\n\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Check your inferences in the explorer."})}),"\n",(0,s.jsxs)(n.p,{children:["You can also see your inferences with proofs in the ",(0,s.jsx)(n.a,{href:"https://explorer.galadriel.com/",children:"Galadriel explorer"}),". For specific inference responses use ",(0,s.jsx)(n.code,{children:"https://explorer.galadriel.com/details/<hash>"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"hash"})," param is returned with every inference request.\n",(0,s.jsx)(n.img,{src:"https://i.imgur.com/QazDxbE.png",alt:""})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Check proofs posted on Solana."})}),"\n",(0,s.jsxs)(n.p,{children:["You can also see your inferences with proofs on Solana. For specific inference responses: ",(0,s.jsx)(n.code,{children:"https://explorer.solana.com/tx/<>tx_hash?cluster=devnet"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"tx_hash"})," param is returned with every inference request."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(14041);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);