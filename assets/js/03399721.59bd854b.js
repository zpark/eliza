"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[37775],{69591:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"plugins/para","title":"@elizaos/plugin-para","description":"A seamless integration between Para wallet infrastructure and Eliza OS, enabling autonomous agents to manage user wallets and transactions.","source":"@site/packages/plugins/para.md","sourceDirName":"plugins","slug":"/plugins/para","permalink":"/packages/plugins/para","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"@elizaos/plugin-openai","permalink":"/packages/plugins/openai"},"next":{"title":"@elizaos/plugin-pdf","permalink":"/packages/plugins/pdf"}}');var s=i(31085),a=i(71184);const l={},t="@elizaos/plugin-para",c={},d=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Usage",id:"usage",level:2},{value:"Creating Wallets",id:"creating-wallets",level:3},{value:"Pre-generating Wallets",id:"pre-generating-wallets",level:3},{value:"Signing Messages",id:"signing-messages",level:3},{value:"Signing Transactions",id:"signing-transactions",level:3},{value:"Claiming Pre-generated Wallets",id:"claiming-pre-generated-wallets",level:3},{value:"Checking Wallet Status",id:"checking-wallet-status",level:3},{value:"Actions",id:"actions",level:2},{value:"Providers",id:"providers",level:2},{value:"Services",id:"services",level:2},{value:"Viem Integration",id:"viem-integration",level:2},{value:"Session Management",id:"session-management",level:2},{value:"User Share Management",id:"user-share-management",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Multi-Chain Support",id:"multi-chain-support",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Contributing",id:"contributing",level:2},{value:"License",id:"license",level:2},{value:"Related",id:"related",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"elizaosplugin-para",children:"@elizaos/plugin-para"})}),"\n",(0,s.jsx)(n.p,{children:"A seamless integration between Para wallet infrastructure and Eliza OS, enabling autonomous agents to manage user wallets and transactions."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://npmjs.com/package/@elizaos/plugin-para",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/npm/v/@elizaos/plugin-para?color=blue",alt:"npm version"})}),"\n",(0,s.jsx)(n.a,{href:"https://npm.chart.dev/@elizaos/plugin-para",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/npm/dm/@elizaos/plugin-para?color=blue",alt:"npm downloads"})}),"\n",(0,s.jsx)(n.a,{href:"https://bundlephobia.com/package/@elizaos/plugin-para",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/bundlephobia/minzip/@elizaos/plugin-para?color=blue",alt:"bundle size"})})]}),"\n",(0,s.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\ud83d\udd10 Full Para wallet integration with Eliza agents"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udcb0 EVM-based transaction support using Viem"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udcdd Message signing capabilities"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udcbc Pre-generated wallet support"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udd04 Seamless wallet claiming process"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udee1\ufe0f Secure user share management"}),"\n",(0,s.jsx)(n.li,{children:"\ud83c\udf10 Multi-chain support (Ethereum, Polygon, Arbitrum, etc.)"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udccb Built-in wallet status monitoring"}),"\n",(0,s.jsx)(n.li,{children:"\ud83e\udd16 Auto-configuration with Eliza agents"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udcf1 Session management for persistent authentication"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(n.p,{children:"You can install the plugin using your preferred package manager:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# npm\nnpm install @elizaos/plugin-para\n\n# bun\nbun add @elizaos/plugin-para\n\n# yarn\nyarn add @elizaos/plugin-para\n\n# bun\nbun add @elizaos/plugin-para\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Add required environment variables to your ",(0,s.jsx)(n.code,{children:".env"})," file:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-env",children:"# Para Configuration\nPARA_API_KEY=your-para-api-key\nPARA_ENV=production\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Register the plugin in your Eliza character configuration:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { paraPlugin } from '@elizaos/plugin-para';\n\nexport const characterConfig = {\n  // ... other config\n  plugins: [paraPlugin],\n  settings: {\n    secrets: {\n      PARA_API_KEY: process.env.PARA_API_KEY,\n      PARA_ENV: process.env.PARA_ENV || 'production',\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"The plugin adds several capabilities to your Eliza agent:"}),"\n",(0,s.jsx)(n.h3,{id:"creating-wallets",children:"Creating Wallets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// The agent can create wallets in response to user requests\nawait runtime.triggerAction('CREATE_PARA_WALLET', {\n  type: 'EVM',\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pre-generating-wallets",children:"Pre-generating Wallets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Create a wallet for a user before they sign up\nawait runtime.triggerAction('CREATE_PREGEN_WALLET', {\n  pregenIdentifier: 'user@example.com',\n  pregenIdentifierType: 'EMAIL',\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"signing-messages",children:"Signing Messages"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Sign a message with a user's wallet\nawait runtime.triggerAction('SIGN_PARA_MESSAGE', {\n  walletId: 'wallet-id',\n  message: 'Hello, World!',\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"signing-transactions",children:"Signing Transactions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Sign and submit an EVM transaction\nawait runtime.triggerAction('SIGN_PARA_TRANSACTION', {\n  walletId: 'wallet-id',\n  transaction: {\n    to: '0x1234567890123456789012345678901234567890',\n    value: '0.01',\n  },\n  chainId: '1', // Ethereum mainnet\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"claiming-pre-generated-wallets",children:"Claiming Pre-generated Wallets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Users can claim their pre-generated wallets\nawait runtime.triggerAction('CLAIM_PARA_WALLET', {\n  pregenIdentifier: 'user@example.com',\n  pregenIdentifierType: 'EMAIL',\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"checking-wallet-status",children:"Checking Wallet Status"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Get current wallet status through the provider\nconst walletInfo = await runtime.getContextFromProvider('paraWalletProvider');\n"})}),"\n",(0,s.jsx)(n.h2,{id:"actions",children:"Actions"}),"\n",(0,s.jsx)(n.p,{children:"The plugin provides the following actions:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Action"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CREATE_PARA_WALLET"})}),(0,s.jsx)(n.td,{children:"Creates a new Para wallet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CREATE_PREGEN_WALLET"})}),(0,s.jsx)(n.td,{children:"Creates a pre-generated wallet associated with an identifier"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CLAIM_PARA_WALLET"})}),(0,s.jsx)(n.td,{children:"Claims a pre-generated wallet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"SIGN_PARA_MESSAGE"})}),(0,s.jsx)(n.td,{children:"Signs a message using a Para wallet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"SIGN_PARA_TRANSACTION"})}),(0,s.jsx)(n.td,{children:"Signs and submits a transaction using a Para wallet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"UPDATE_PREGEN_IDENTIFIER"})}),(0,s.jsx)(n.td,{children:"Updates the identifier for a pre-generated wallet"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"providers",children:"Providers"}),"\n",(0,s.jsx)(n.p,{children:"Available providers for context and status:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Provider"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"paraWalletProvider"})}),(0,s.jsx)(n.td,{children:"Provides current wallet information and status"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"services",children:"Services"}),"\n",(0,s.jsx)(n.p,{children:"The plugin registers the following services in the Eliza runtime:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Service"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ParaWalletService"})}),(0,s.jsx)(n.td,{children:"Core service handling Para SDK integration"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"viem-integration",children:"Viem Integration"}),"\n",(0,s.jsx)(n.p,{children:"The plugin uses Viem for Ethereum transactions, offering:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\ud83d\ude80 Modern and efficient transaction handling"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udd27 Type-safe API for Ethereum interactions"}),"\n",(0,s.jsx)(n.li,{children:"\u26a1 Multi-chain support out of the box"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udd04 Compatible with the Para Viem connector"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Example of transaction handling with Viem\nawait runtime.triggerAction('SIGN_PARA_TRANSACTION', {\n  walletId: 'wallet-id',\n  transaction: {\n    to: '0x1234567890123456789012345678901234567890',\n    value: '0.05',\n    data: '0x...', // Optional contract interaction data\n  },\n  chainId: '137', // Polygon\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"session-management",children:"Session Management"}),"\n",(0,s.jsx)(n.p,{children:"The plugin implements Para's session management for maintaining authenticated states:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const paraService = runtime.getService<ParaWalletService>(ExtendedServiceType.PARA_WALLET);\n\n// Check if session is active\nconst isActive = await paraService.isSessionActive();\n\n// Keep session alive\nif (isActive) {\n  await paraService.keepSessionAlive();\n} else {\n  await paraService.refreshSession();\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"user-share-management",children:"User Share Management"}),"\n",(0,s.jsx)(n.p,{children:"Secure handling of user shares for pre-generated wallets:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Get user share after wallet creation\nconst { wallet, userShare } = await paraService.createPregenWallet({\n  pregenIdentifier: 'user@example.com',\n  pregenIdentifierType: 'EMAIL',\n});\n\n// Store user share securely\nawait secureStorage.set(`user-share-${wallet.id}`, userShare);\n\n// Restore user share when needed\nawait paraService.setUserShare({\n  userShare: await secureStorage.get(`user-share-${walletId}`),\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"The plugin implements comprehensive error handling following Eliza's patterns:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"try {\n  await runtime.triggerAction('SIGN_PARA_TRANSACTION', params);\n} catch (error) {\n  if (error instanceof TransactionReviewDenied) {\n    // Handle user denial\n    console.log('User denied the transaction');\n  } else if (error instanceof TransactionReviewTimeout) {\n    // Handle timeout\n    console.log('Transaction review timed out', error.transactionReviewUrl);\n  } else {\n    // Handle other errors\n    console.error('Transaction error:', error);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"multi-chain-support",children:"Multi-Chain Support"}),"\n",(0,s.jsx)(n.p,{children:"The plugin supports a variety of EVM-compatible networks:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Chain ID"}),(0,s.jsx)(n.th,{children:"Network"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Ethereum Mainnet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"11155111"}),(0,s.jsx)(n.td,{children:"Sepolia Testnet"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"137"}),(0,s.jsx)(n.td,{children:"Polygon"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"42161"}),(0,s.jsx)(n.td,{children:"Arbitrum"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Additional networks can be added by extending the chain configuration."}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Security"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Store API keys securely in environment variables"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper user authentication before wallet operations"}),"\n",(0,s.jsx)(n.li,{children:"Use secure storage for user shares"}),"\n",(0,s.jsx)(n.li,{children:"Follow Para's recommendations for session management"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement proper error handling for all wallet operations"}),"\n",(0,s.jsx)(n.li,{children:"Handle transaction rejections and timeouts gracefully"}),"\n",(0,s.jsx)(n.li,{children:"Provide clear feedback to users when operations fail"}),"\n",(0,s.jsx)(n.li,{children:"Log errors appropriately for debugging"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep track of session status to avoid unnecessary refreshes"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper caching for wallet information"}),"\n",(0,s.jsx)(n.li,{children:"Use appropriate gas parameters for transactions"}),"\n",(0,s.jsx)(n.li,{children:"Handle network congestion scenarios with retry logic"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"User Experience"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Guide users through the wallet creation process"}),"\n",(0,s.jsx)(n.li,{children:"Provide clear status updates during operations"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper loading states during transaction signing"}),"\n",(0,s.jsx)(n.li,{children:"Give feedback on transaction progress and confirmations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,s.jsx)(n.p,{children:"We welcome contributions! Please see our Contributing Guide for details."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Fork the repository"}),"\n",(0,s.jsxs)(n.li,{children:["Create your feature branch (",(0,s.jsx)(n.code,{children:"git checkout -b feature/amazing-feature"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Commit your changes (",(0,s.jsx)(n.code,{children:"git commit -m 'Add amazing feature'"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Push to the branch (",(0,s.jsx)(n.code,{children:"git push origin feature/amazing-feature"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Open a Pull Request"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,s.jsxs)(n.p,{children:["MIT License - see the ",(0,s.jsx)(n.a,{href:"LICENSE",children:"LICENSE"})," file for details."]}),"\n",(0,s.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://elizaos.github.io/eliza/",children:"Eliza Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.getpara.com/",children:"Para Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/elizaos/eliza/tree/main/examples/plugins",children:"Plugin Examples"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://viem.sh/",children:"Viem Documentation"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var r=i(14041);const s={},a=r.createContext(s);function l(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);