"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[95630],{39312:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"technical/development/creating-plugins","title":"Creating Plugins","description":"Step-by-step guide to creating ElizaOS plugins using the CLI tool","source":"@site/docs/technical/development/creating-plugins.md","sourceDirName":"technical/development","slug":"/technical/development/creating-plugins","permalink":"/docs/technical/development/creating-plugins","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/technical/development/creating-plugins.md","tags":[],"version":"current","lastUpdatedBy":"Sayo","lastUpdatedAt":1751802400000,"frontMatter":{"title":"Creating Plugins","description":"Step-by-step guide to creating ElizaOS plugins using the CLI tool"},"sidebar":"technicalSidebar","previous":{"title":"\ud83c\udfaf Core API","permalink":"/docs/technical/api-reference/core-api"},"next":{"title":"\ud83d\udd27 Plugin Development","permalink":"/docs/technical/development/plugin-development"}}');var t=s(31085),r=s(71184);const o={title:"Creating Plugins",description:"Step-by-step guide to creating ElizaOS plugins using the CLI tool"},l=void 0,a={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Plugin Structure",id:"plugin-structure",level:2},{value:"Core Components",id:"core-components",level:2},{value:"Plugin Definition",id:"plugin-definition",level:3},{value:"Actions",id:"actions",level:3},{value:"Providers",id:"providers",level:3},{value:"Evaluators",id:"evaluators",level:3},{value:"Services",id:"services",level:3},{value:"Configuration",id:"configuration",level:2},{value:"package.json",id:"packagejson",level:3},{value:"TypeScript Configuration",id:"typescript-configuration",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"End-to-End Tests",id:"end-to-end-tests",level:3},{value:"Running Tests",id:"running-tests",level:3},{value:"Publishing",id:"publishing",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Publishing Steps",id:"publishing-steps",level:3},{value:"Post-Publishing",id:"post-publishing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Code Quality",id:"code-quality",level:3},{value:"Performance",id:"performance",level:3},{value:"Security",id:"security",level:3},{value:"Testing",id:"testing-1",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Using Configuration",id:"using-configuration",level:3},{value:"Sharing Data Between Components",id:"sharing-data-between-components",level:3},{value:"Event Handling",id:"event-handling",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This guide shows you how to use the ElizaOS CLI to quickly create, test, and publish plugins. Plugins are the primary way to extend ElizaOS functionality by adding new actions, providers, evaluators, services, and more to your agents."}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.p,{children:"The fastest way to create a new plugin is using the ElizaOS CLI:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create a new plugin (automatically adds "plugin-" prefix)\nelizaos create my-awesome-feature -t plugin\n\n# Navigate to your new plugin\ncd plugin-my-awesome-feature\n\n# Start development\nelizaos dev\n'})}),"\n",(0,t.jsx)(n.p,{children:"This creates a fully functional plugin with example implementations and tests."}),"\n",(0,t.jsx)(n.h2,{id:"plugin-structure",children:"Plugin Structure"}),"\n",(0,t.jsx)(n.p,{children:"A typical plugin follows this directory structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"plugin-name/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts          # Main plugin export\n\u2502   \u251c\u2500\u2500 actions/          # Action handlers\n\u2502   \u2502   \u2514\u2500\u2500 myAction.ts\n\u2502   \u251c\u2500\u2500 providers/        # Context providers\n\u2502   \u2502   \u2514\u2500\u2500 myProvider.ts\n\u2502   \u251c\u2500\u2500 evaluators/       # Message evaluators\n\u2502   \u2502   \u2514\u2500\u2500 myEvaluator.ts\n\u2502   \u251c\u2500\u2500 services/         # Background services\n\u2502   \u2502   \u2514\u2500\u2500 myService.ts\n\u2502   \u2514\u2500\u2500 __tests__/        # Tests\n\u2502       \u2514\u2500\u2500 actions.test.ts\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 images/               # Required for publishing\n    \u251c\u2500\u2500 logo.jpg         # 400x400px square (max 500KB)\n    \u2514\u2500\u2500 banner.jpg       # 1280x640px banner (max 1MB)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsx)(n.h3,{id:"plugin-definition",children:"Plugin Definition"}),"\n",(0,t.jsxs)(n.p,{children:["Every plugin must export a default object implementing the ",(0,t.jsx)(n.code,{children:"Plugin"})," interface:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/index.ts\nimport { Plugin } from '@elizaos/core';\nimport { myAction } from './actions/myAction';\nimport { myProvider } from './providers/myProvider';\nimport { myEvaluator } from './evaluators/myEvaluator';\nimport { MyService } from './services/myService';\n\nexport default {\n  name: 'my-plugin',\n  description: 'Adds awesome functionality to ElizaOS',\n\n  // Optional initialization\n  init: async (config, runtime) => {\n    console.log('Plugin initializing with config:', config);\n    // Perform any setup needed\n  },\n\n  // Register components\n  actions: [myAction],\n  providers: [myProvider],\n  evaluators: [myEvaluator],\n  services: [MyService], // Note: Services are class constructors\n\n  // Optional configuration schema\n  config: {\n    apiKey: {\n      type: 'string',\n      description: 'API key for external service',\n      required: true,\n    },\n  },\n} satisfies Plugin;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"actions",children:"Actions"}),"\n",(0,t.jsx)(n.p,{children:"Actions define how your plugin responds to user messages:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/actions/myAction.ts\nimport { Action, IAgentRuntime, State, Memory } from '@elizaos/core';\n\nexport const myAction: Action = {\n  name: 'MY_AWESOME_ACTION',\n  similes: ['AWESOME_ACTION', 'DO_AWESOME'], // Alternative names\n  description: 'Performs an awesome action',\n\n  // Validate if this action should handle the message\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    const text = message.content.text.toLowerCase();\n    return text.includes('do something awesome');\n  },\n\n  // Handle the action\n  handler: async (runtime, message, state, options, callback) => {\n    try {\n      // Perform your action logic\n      const result = await performAwesomeTask(message.content.text);\n\n      // Generate response\n      const response = {\n        text: `I did something awesome: ${result}`,\n        action: 'MY_AWESOME_ACTION',\n        data: { result },\n      };\n\n      // Call callback if provided\n      if (callback) {\n        await callback(response);\n      }\n\n      return response;\n    } catch (error) {\n      console.error('Action failed:', error);\n      return {\n        text: 'Sorry, I encountered an error.',\n        error: error.message,\n      };\n    }\n  },\n\n  // Provide examples for the AI\n  examples: [\n    [\n      {\n        user: '{{user1}}',\n        content: { text: 'Can you do something awesome?' },\n      },\n      {\n        user: '{{agent}}',\n        content: {\n          text: \"I'll do something awesome for you!\",\n          action: 'MY_AWESOME_ACTION',\n        },\n      },\n    ],\n  ],\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"providers",children:"Providers"}),"\n",(0,t.jsx)(n.p,{children:"Providers supply dynamic context to the agent:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/providers/myProvider.ts\nimport { Provider, IAgentRuntime, State, Memory } from '@elizaos/core';\n\nexport const myProvider: Provider = {\n  name: 'MY_DATA_PROVIDER',\n  description: 'Provides awesome contextual data',\n\n  get: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    try {\n      // Fetch or compute relevant data\n      const data = await fetchRelevantData(message.userId);\n\n      return {\n        text: `User data: ${JSON.stringify(data)}`,\n        values: {\n          userData: data,\n          timestamp: Date.now(),\n        },\n      };\n    } catch (error) {\n      console.error('Provider error:', error);\n      return { text: 'Unable to fetch data' };\n    }\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"evaluators",children:"Evaluators"}),"\n",(0,t.jsx)(n.p,{children:"Evaluators analyze messages and can influence agent behavior:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/evaluators/myEvaluator.ts\nimport { Evaluator, IAgentRuntime, Memory } from '@elizaos/core';\n\nexport const myEvaluator: Evaluator = {\n  name: 'SENTIMENT_EVALUATOR',\n  description: 'Analyzes message sentiment',\n\n  // Only evaluate messages that meet criteria\n  validate: async (runtime: IAgentRuntime, message: Memory) => {\n    return message.content.text.length > 10;\n  },\n\n  // Perform evaluation\n  handler: async (runtime, message) => {\n    const sentiment = analyzeSentiment(message.content.text);\n\n    // Store evaluation result\n    await runtime.createMemory({\n      ...message,\n      content: {\n        ...message.content,\n        evaluations: {\n          sentiment: sentiment,\n        },\n      },\n    });\n\n    return sentiment;\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"services",children:"Services"}),"\n",(0,t.jsx)(n.p,{children:"Services provide shared functionality and background tasks:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/services/myService.ts\nimport { Service, IAgentRuntime } from '@elizaos/core';\n\nexport class MyService extends Service {\n  static serviceType = 'my-awesome-service';\n  capabilityDescription = 'Provides awesome background functionality';\n\n  private interval: NodeJS.Timer | null = null;\n\n  // Factory method to create service\n  static async start(runtime: IAgentRuntime): Promise<MyService> {\n    const service = new MyService(runtime);\n    await service.initialize();\n    return service;\n  }\n\n  private async initialize(): Promise<void> {\n    // Set up background tasks\n    this.interval = setInterval(() => {\n      this.performBackgroundTask();\n    }, 60000); // Every minute\n  }\n\n  async stop(): Promise<void> {\n    // Clean up resources\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  private async performBackgroundTask(): Promise<void> {\n    // Do something in the background\n    console.log('Performing background task...');\n  }\n\n  // Public methods for other components to use\n  async getData(key: string): Promise<any> {\n    // Return data from service\n    return this.cache.get(key);\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"packagejson",children:"package.json"}),"\n",(0,t.jsxs)(n.p,{children:["Your plugin's ",(0,t.jsx)(n.code,{children:"package.json"})," must include specific metadata:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "@yourorg/plugin-awesome",\n  "version": "1.0.0",\n  "description": "Adds awesome functionality to ElizaOS",\n  "main": "dist/index.js",\n  "types": "dist/index.d.ts",\n  "packageType": "plugin",\n  "agentConfig": {\n    "pluginType": "elizaos:plugin:1.0.0",\n    "pluginParameters": {\n      "API_KEY": {\n        "type": "string",\n        "description": "API key for the awesome service",\n        "required": true\n      },\n      "WEBHOOK_URL": {\n        "type": "string",\n        "description": "Webhook URL for notifications",\n        "required": false\n      }\n    }\n  },\n  "scripts": {\n    "build": "tsup",\n    "dev": "tsup --watch",\n    "test": "vitest run"\n  },\n  "peerDependencies": {\n    "@elizaos/core": "^1.0.0"\n  },\n  "devDependencies": {\n    "@elizaos/core": "^1.0.0",\n    "tsup": "^8.0.0",\n    "typescript": "^5.0.0",\n    "vitest": "^1.0.0"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"typescript-configuration",children:"TypeScript Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Use a standard TypeScript configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "ES2020",\n    "module": "commonjs",\n    "lib": ["ES2020"],\n    "outDir": "./dist",\n    "rootDir": "./src",\n    "strict": true,\n    "esModuleInterop": true,\n    "skipLibCheck": true,\n    "forceConsistentCasingInFileNames": true,\n    "declaration": true,\n    "declarationMap": true,\n    "sourceMap": true\n  },\n  "include": ["src/**/*"],\n  "exclude": ["node_modules", "dist", "**/*.test.ts"]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.p,{children:"ElizaOS provides comprehensive testing capabilities:"}),"\n",(0,t.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,t.jsx)(n.p,{children:"Test individual components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/__tests__/actions.test.ts\nimport { describe, it, expect, vi } from 'vitest';\nimport { myAction } from '../actions/myAction';\nimport { createMockRuntime } from '@elizaos/core/test-utils';\n\ndescribe('myAction', () => {\n  it('should validate messages containing trigger phrase', async () => {\n    const runtime = createMockRuntime();\n    const message = {\n      content: { text: 'Please do something awesome' },\n      userId: 'test-user',\n      roomId: 'test-room',\n      agentId: 'test-agent',\n    };\n\n    const isValid = await myAction.validate(runtime, message);\n    expect(isValid).toBe(true);\n  });\n\n  it('should handle action successfully', async () => {\n    const runtime = createMockRuntime();\n    const message = {\n      content: { text: 'Do something awesome now!' },\n      userId: 'test-user',\n      roomId: 'test-room',\n      agentId: 'test-agent',\n    };\n\n    const callback = vi.fn();\n    const result = await myAction.handler(runtime, message, {}, {}, callback);\n\n    expect(result.text).toContain('awesome');\n    expect(callback).toHaveBeenCalled();\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"end-to-end-tests",children:"End-to-End Tests"}),"\n",(0,t.jsx)(n.p,{children:"Test the plugin in a real agent environment:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// src/__tests__/e2e.test.ts\nimport { TestSuite } from '@elizaos/core';\n\nexport const e2eTestSuite: TestSuite = {\n  name: 'plugin_e2e_tests',\n  description: 'End-to-end tests for the awesome plugin',\n  tests: [\n    {\n      name: 'complete_workflow_test',\n      description: 'Tests the complete plugin workflow',\n      fn: async (runtime) => {\n        // Send a message that triggers the action\n        const response = await runtime.processMessage({\n          content: { text: 'Do something awesome please' },\n          userId: 'e2e-test-user',\n          roomId: 'e2e-test-room',\n        });\n\n        // Verify the response\n        if (!response.includes('awesome')) {\n          throw new Error('Expected awesome response');\n        }\n\n        // Verify service is running\n        const service = runtime.getService('my-awesome-service');\n        if (!service) {\n          throw new Error('Service not initialized');\n        }\n      },\n    },\n  ],\n};\n\n// Add to plugin definition\nexport default {\n  // ... other plugin config\n  tests: [e2eTestSuite],\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"running-tests",children:"Running Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run unit tests\nnpm test\n\n# Run with elizaos test command (includes E2E)\nelizaos test\n\n# Run specific test type\nelizaos test -t component  # Unit tests only\nelizaos test -t e2e        # E2E tests only\n"})}),"\n",(0,t.jsx)(n.h2,{id:"publishing",children:"Publishing"}),"\n",(0,t.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"npm account"}),": Create at ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com",children:"npmjs.com"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub repository"}),": Create a public repo"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Required images"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"images/logo.jpg"})," - 400x400px square logo (max 500KB)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"images/banner.jpg"})," - 1280x640px banner image (max 1MB)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"publishing-steps",children:"Publishing Steps"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Authenticate with npm"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm login\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Add GitHub topic"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Go to your GitHub repository"}),"\n",(0,t.jsxs)(n.li,{children:["Add the topic ",(0,t.jsx)(n.code,{children:"elizaos-plugins"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Test your plugin"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run all tests\nnpm test\n\n# Test the publish process\nelizaos publish --test\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Publish"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# First time publishing\nelizaos publish\n\n# Updates (after initial publish)\nnpm version patch\nnpm publish\ngit push origin main --tags\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"post-publishing",children:"Post-Publishing"}),"\n",(0,t.jsx)(n.p,{children:"Your plugin will appear in:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["npm registry: ",(0,t.jsx)(n.code,{children:"https://www.npmjs.com/package/@yourorg/plugin-name"})]}),"\n",(0,t.jsx)(n.li,{children:"ElizaOS Plugin Directory: Automatically indexed from GitHub"}),"\n",(0,t.jsxs)(n.li,{children:["Agent configurations can reference it: ",(0,t.jsx)(n.code,{children:'"plugins": ["@yourorg/plugin-name"]'})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"code-quality",children:"Code Quality"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Complete implementations"}),": Never use stubs or incomplete code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Error handling"}),": Always handle errors gracefully"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resource cleanup"}),": Implement proper cleanup in services"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type safety"}),": Use TypeScript strictly"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Document all exports and parameters"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance",children:"Performance"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cache expensive operations"}),": Use runtime caching"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Async operations"}),": Don't block the event loop"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch operations"}),": Group related operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lazy loading"}),": Load resources only when needed"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate inputs"}),": Always validate user inputs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sanitize outputs"}),": Prevent injection attacks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Secure credentials"}),": Never hardcode secrets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rate limiting"}),": Implement rate limits for external APIs"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"testing-1",children:"Testing"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"High coverage"}),": Aim for >80% test coverage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Edge cases"}),": Test error conditions and edge cases"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Integration tests"}),": Test with real agent runtime"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance tests"}),": Monitor resource usage"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"using-configuration",children:"Using Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Access plugin configuration in your components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export const configuredAction: Action = {\n  name: 'CONFIGURED_ACTION',\n\n  handler: async (runtime, message, state, options) => {\n    // Access plugin config\n    const apiKey = runtime.getSetting('API_KEY');\n    if (!apiKey) {\n      throw new Error('API_KEY not configured');\n    }\n\n    // Use the configuration\n    const result = await callExternalAPI(apiKey, message.content.text);\n    return { text: result };\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sharing-data-between-components",children:"Sharing Data Between Components"}),"\n",(0,t.jsx)(n.p,{children:"Use services to share data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// In an action\nconst myService = runtime.getService('my-awesome-service') as MyService;\nconst cachedData = await myService.getData('user-preferences');\n\n// In a provider\nconst myService = runtime.getService('my-awesome-service') as MyService;\nreturn {\n  text: 'User preferences loaded',\n  values: await myService.getData('user-preferences'),\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"event-handling",children:"Event Handling"}),"\n",(0,t.jsx)(n.p,{children:"React to agent events:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export default {\n  name: 'event-plugin',\n\n  events: {\n    onMessageReceived: async (runtime, message) => {\n      console.log('Message received:', message);\n    },\n\n    onActionComplete: async (runtime, action, result) => {\n      console.log('Action completed:', action, result);\n    },\n  },\n} satisfies Plugin;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Plugin not loading"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Check ",(0,t.jsx)(n.code,{children:"package.json"})," has correct ",(0,t.jsx)(n.code,{children:'packageType: "plugin"'})]}),"\n",(0,t.jsx)(n.li,{children:"Verify main export is default"}),"\n",(0,t.jsx)(n.li,{children:"Check for circular dependencies"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Actions not triggering"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Verify ",(0,t.jsx)(n.code,{children:"validate"})," returns true for test messages"]}),"\n",(0,t.jsx)(n.li,{children:"Check action name is unique"}),"\n",(0,t.jsxs)(n.li,{children:["Enable debug logging: ",(0,t.jsx)(n.code,{children:"DEBUG=eliza:*"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Service errors"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Ensure ",(0,t.jsx)(n.code,{children:"static serviceType"})," is defined"]}),"\n",(0,t.jsxs)(n.li,{children:["Implement ",(0,t.jsx)(n.code,{children:"start()"})," factory method"]}),"\n",(0,t.jsxs)(n.li,{children:["Check service is in plugin's ",(0,t.jsx)(n.code,{children:"services"})," array"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Publishing fails"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify npm authentication"}),"\n",(0,t.jsx)(n.li,{children:"Check image sizes and formats"}),"\n",(0,t.jsx)(n.li,{children:"Ensure GitHub repo is public with correct topic"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Explore the ",(0,t.jsx)(n.a,{href:"/api/interfaces/Plugin",children:"Plugin API Reference"})]}),"\n",(0,t.jsxs)(n.li,{children:["Browse ",(0,t.jsx)(n.a,{href:"https://github.com/elizaos/eliza/tree/main/packages",children:"example plugins"})]}),"\n",(0,t.jsxs)(n.li,{children:["Join the ",(0,t.jsx)(n.a,{href:"https://discord.gg/elizaos",children:"ElizaOS Discord"})," for help"]}),"\n",(0,t.jsxs)(n.li,{children:["Contribute to the ",(0,t.jsx)(n.a,{href:"https://github.com/topics/elizaos-plugins",children:"plugin ecosystem"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},71184:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(14041);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);