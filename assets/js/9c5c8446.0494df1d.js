"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[80141],{20676:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"core/overview","title":"Overview","description":"Eliza is a framework for creating AI agents that can interact across multiple platforms.","source":"@site/versioned_docs/version-0.25.9/core/overview.md","sourceDirName":"core","slug":"/core/overview","permalink":"/docs/0.25.9/core/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/versioned_docs/version-0.25.9/core/overview.md","tags":[],"version":"0.25.9","lastUpdatedBy":"madjin","lastUpdatedAt":1742171474000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Build a Plugin in 35min","permalink":"/docs/0.25.9/tutorials/nader_tutorial_35min"},"next":{"title":"Character Files","permalink":"/docs/0.25.9/core/characterfile"}}');var r=s(31085),i=s(71184);const a={sidebar_position:1},o="Overview",l={},d=[{value:"Agent Runtime",id:"agent-runtime",level:2},{value:"Character Files",id:"character-files",level:2},{value:"Clients",id:"clients",level:2},{value:"Actions",id:"actions",level:2},{value:"Evaluators",id:"evaluators",level:2},{value:"Providers",id:"providers",level:2},{value:"Memory &amp; Knowledge Systems",id:"memory--knowledge-systems",level:2},{value:"Memory Manager",id:"memory-manager",level:3},{value:"Knowledge Systems",id:"knowledge-systems",level:3},{value:"Data Management",id:"data-management",level:2},{value:"Database System",id:"database-system",level:3},{value:"Cache System",id:"cache-system",level:2},{value:"System Flow",id:"system-flow",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Memory Usage (<code>src/memory.ts</code>)",id:"memory-usage-srcmemoryts",level:3},{value:"Action Implementation (<code>src/actions.ts</code>)",id:"action-implementation-srcactionsts",level:3},{value:"Provider Integration (<code>src/providers.ts</code>)",id:"provider-integration-srcprovidersts",level:3},{value:"FAQ",id:"faq",level:2},{value:"What&#39;s the difference between Actions, Evaluators, and Providers?",id:"whats-the-difference-between-actions-evaluators-and-providers",level:3},{value:"Can I use multiple AI models with one agent?",id:"can-i-use-multiple-ai-models-with-one-agent",level:3},{value:"How does memory persistence work?",id:"how-does-memory-persistence-work",level:3},{value:"What&#39;s the difference between Lore and Knowledge?",id:"whats-the-difference-between-lore-and-knowledge",level:3},{value:"How do I add custom functionality?",id:"how-do-i-add-custom-functionality",level:3},{value:"Do I need to implement all components?",id:"do-i-need-to-implement-all-components",level:3},{value:"How does RAG integration work?",id:"how-does-rag-integration-work",level:3},{value:"What&#39;s the recommended database for production?",id:"whats-the-recommended-database-for-production",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"overview",children:"Overview"})}),"\n",(0,r.jsx)(n.p,{children:"Eliza is a framework for creating AI agents that can interact across multiple platforms."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Features"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modular Design"}),": Plugins and services allow for flexible customization."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Knowledge"}),": Supports both RAG-based and direct knowledge processing."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stateful Interactions"}),": Maintains context across conversations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Agent Support"}),": Supports running multiple agents with distinct configurations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Platform Support"}),": Integrates with various clients (e.g., Discord, Telegram)."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Eliza consists of these core components:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Agents (Runtime)"}),": AI personalities that interact with users and platforms"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Actions"}),": Executable behaviors that agents can perform in response to messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clients"}),": Platform connectors for services like Discord, Twitter, and Telegram"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plugins"}),": Modular extensions that add new features and capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Providers"}),": Services that supply contextual information to agents"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Evaluators"}),": Modules that analyze conversations and track agent goals"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Character Files"}),": JSON configurations that define agent personalities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory System"}),": Database that stores and manages agent information using vector embeddings"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Here's an overview of how eliza works from user input to response generation:\n",(0,r.jsx)(n.img,{src:s(95233).A+"",width:"1200",height:"1969"}),"\nSource: ",(0,r.jsx)(n.a,{href:"https://x.com/gelatonetwork/status/1894408632915169618",children:"https://x.com/gelatonetwork/status/1894408632915169618"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"agent-runtime",children:(0,r.jsx)(n.a,{href:"/docs/0.25.9/core/agents",children:"Agent Runtime"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"The Brain"})}),"\n",(0,r.jsxs)(n.p,{children:["The Runtime (",(0,r.jsx)(n.code,{children:"src/runtime.ts"}),") acts as the control tower for your AI agents. Think of it as a conductor leading an orchestra - it ensures all parts work together harmoniously. It serves as the central coordination layer for message processing, memory management, state composition, action execution, and integration with AI models and external services."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Core Functions"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Coordinates message processing"}),"\n",(0,r.jsx)(n.li,{children:"Manages the agent's lifecycle"}),"\n",(0,r.jsx)(n.li,{children:"Handles integration with AI models"}),"\n",(0,r.jsx)(n.li,{children:"Orchestrates plugins and services"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"character-files",children:(0,r.jsx)(n.a,{href:"/docs/0.25.9/core/characterfile",children:"Character Files"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"The Personality"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/0.25.9/core/characterfile",children:"Character Files"})," (",(0,r.jsx)(n.code,{children:"src/types.ts"}),") define agent ",(0,r.jsx)(n.strong,{children:"personalities"})," and ",(0,r.jsx)(n.strong,{children:"capabilities"})," including biographical information, interaction styles, plugin configurations, and platform integrations."]}),"\n",(0,r.jsx)(n.p,{children:"The character file defines who your agent is - like a script for an actor. It includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Biographical information and backstory"}),"\n",(0,r.jsx)(n.li,{children:"Topics the agent can discuss"}),"\n",(0,r.jsx)(n.li,{children:"Writing style and tone"}),"\n",(0,r.jsx)(n.li,{children:"Which AI models to use"}),"\n",(0,r.jsx)(n.li,{children:"Which plugins to load"}),"\n",(0,r.jsx)(n.li,{children:"Which platforms to connect to"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"clients",children:(0,r.jsx)(n.a,{href:"/docs/0.25.9/core/clients",children:"Clients"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"The Interface"})}),"\n",(0,r.jsx)(n.p,{children:"Clients connect your agent to different platforms (Discord, Twitter, Slack, Farcaster, etc.) while maintaining consistent behavior across all interfaces. Each client can handle different types of interactions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Chat messages"}),"\n",(0,r.jsx)(n.li,{children:"Social media posts"}),"\n",(0,r.jsx)(n.li,{children:"Voice conversations"}),"\n",(0,r.jsx)(n.li,{children:"Platform-specific features"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"actions",children:(0,r.jsx)(n.a,{href:"/docs/0.25.9/core/actions",children:"Actions"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What Agents Can Do"})}),"\n",(0,r.jsxs)(n.p,{children:["Actions (",(0,r.jsx)(n.code,{children:"src/actions.ts"}),") are like tools in a toolbox. They define how agents respond and interact with messages, enabling custom behaviors, external system interactions, media processing, and platform-specific features."]}),"\n",(0,r.jsx)(n.h2,{id:"evaluators",children:(0,r.jsx)(n.a,{href:"/docs/0.25.9/core/evaluators",children:"Evaluators"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Quality Control"})}),"\n",(0,r.jsxs)(n.p,{children:["Evaluators (",(0,r.jsx)(n.code,{children:"src/evaluators.ts"}),") act like referees, making sure the agent follows rules and guidelines. They monitor conversations and help improve agent responses over time by assessing conversations and maintaining agent knowledge through fact extraction, goal tracking, memory building, and relationship management."]}),"\n",(0,r.jsx)(n.h2,{id:"providers",children:(0,r.jsx)(n.a,{href:"./providers.ts",children:"Providers"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Information Flow"})}),"\n",(0,r.jsxs)(n.p,{children:["Providers (",(0,r.jsx)(n.code,{children:"src/providers.ts"}),") are the agent's eyes and ears, like a newsroom keeping them informed about the world. They supply real-time information to agents by integrating external APIs, managing temporal awareness, and providing system status updates to help agents make better decisions."]}),"\n",(0,r.jsx)(n.h2,{id:"memory--knowledge-systems",children:"Memory & Knowledge Systems"}),"\n",(0,r.jsx)(n.p,{children:"The framework implements specialized memory systems through:"}),"\n",(0,r.jsx)(n.h3,{id:"memory-manager",children:"Memory Manager"}),"\n",(0,r.jsxs)(n.p,{children:["The Memory Manager (",(0,r.jsx)(n.code,{children:"src/memory.ts"}),") acts like a personal diary and helps agents remember:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Recent conversations"}),"\n",(0,r.jsx)(n.li,{children:"Important facts"}),"\n",(0,r.jsx)(n.li,{children:"User interactions"}),"\n",(0,r.jsx)(n.li,{children:"Immediate context for current discussions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"knowledge-systems",children:"Knowledge Systems"}),"\n",(0,r.jsxs)(n.p,{children:["Think of this as the agent's library (",(0,r.jsx)(n.code,{children:"src/knowledge.ts"}),", ",(0,r.jsx)(n.code,{children:"src/ragknowledge.ts"}),"), where information is:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Organized into searchable chunks"}),"\n",(0,r.jsx)(n.li,{children:"Converted into vector embeddings"}),"\n",(0,r.jsx)(n.li,{children:"Retrieved based on relevance"}),"\n",(0,r.jsx)(n.li,{children:"Used to enhance responses"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"data-management",children:"Data Management"}),"\n",(0,r.jsx)(n.p,{children:"The data layer provides robust storage and caching through:"}),"\n",(0,r.jsx)(n.h3,{id:"database-system",children:"Database System"}),"\n",(0,r.jsxs)(n.p,{children:["The database (",(0,r.jsx)(n.code,{children:"src/database.ts"}),") acts as a filing cabinet, storing:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Conversation histories"}),"\n",(0,r.jsx)(n.li,{children:"User interactions"}),"\n",(0,r.jsx)(n.li,{children:"Transaction management"}),"\n",(0,r.jsx)(n.li,{children:"Vector storage"}),"\n",(0,r.jsx)(n.li,{children:"Relationship tracking"}),"\n",(0,r.jsx)(n.li,{children:"Embedded knowledge"}),"\n",(0,r.jsx)(n.li,{children:"Agent state"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["See also: ",(0,r.jsx)(n.a,{href:"/docs/0.25.9/guides/memory-management",children:"Memory Management"})]}),"\n",(0,r.jsx)(n.h2,{id:"cache-system",children:"Cache System"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Performance Optimization"})}),"\n",(0,r.jsxs)(n.p,{children:["The Cache System (",(0,r.jsx)(n.code,{children:"src/cache.ts"}),") creates shortcuts for frequently accessed information, making agents respond faster and more efficiently."]}),"\n",(0,r.jsx)(n.h2,{id:"system-flow",children:"System Flow"}),"\n",(0,r.jsx)(n.p,{children:"When someone interacts with your agent, the Client receives the message and forwards it to the Runtime which processes it with the characterfile configuration. The Runtime loads relevant memories and knowledge, uses actions and evaluators to determine how to response, gets additional context through providers. Then the Runtime generates a response using the AI model, stores new memories, and sends the response back through the client."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,r.jsxs)(n.h3,{id:"memory-usage-srcmemoryts",children:["Memory Usage (",(0,r.jsx)(n.code,{children:"src/memory.ts"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Store conversation data\nawait messageManager.createMemory({\n  id: messageId,\n  content: { text: 'Message content' },\n  userId: userId,\n  roomId: roomId,\n});\n\n// Retrieve context\nconst recentMessages = await messageManager.getMemories({\n  roomId: roomId,\n  count: 10,\n});\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"action-implementation-srcactionsts",children:["Action Implementation (",(0,r.jsx)(n.code,{children:"src/actions.ts"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const customAction: Action = {\n  name: 'CUSTOM_ACTION',\n  similes: ['ALTERNATE_NAME'],\n  description: 'Action description',\n  validate: async (runtime, message) => {\n    // Validation logic\n    return true;\n  },\n  handler: async (runtime, message) => {\n    // Implementation logic\n    return true;\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"provider-integration-srcprovidersts",children:["Provider Integration (",(0,r.jsx)(n.code,{children:"src/providers.ts"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const dataProvider: Provider = {\n  get: async (runtime: IAgentRuntime, message: Memory) => {\n    // Fetch and format data\n    return 'Formatted context string';\n  },\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,r.jsx)(n.h3,{id:"whats-the-difference-between-actions-evaluators-and-providers",children:"What's the difference between Actions, Evaluators, and Providers?"}),"\n",(0,r.jsx)(n.p,{children:"Actions define what an agent can do, Evaluators analyze what happened, and Providers supply information to help make decisions."}),"\n",(0,r.jsx)(n.h3,{id:"can-i-use-multiple-ai-models-with-one-agent",children:"Can I use multiple AI models with one agent?"}),"\n",(0,r.jsx)(n.p,{children:"Yes, agents can be configured to use different models for different tasks (chat, image generation, embeddings) through the modelProvider settings."}),"\n",(0,r.jsx)(n.h3,{id:"how-does-memory-persistence-work",children:"How does memory persistence work?"}),"\n",(0,r.jsx)(n.p,{children:"Memory is stored through database adapters which can use SQLite, PostgreSQL, or other backends, with each type (messages, facts, knowledge) managed separately."}),"\n",(0,r.jsx)(n.h3,{id:"whats-the-difference-between-lore-and-knowledge",children:"What's the difference between Lore and Knowledge?"}),"\n",(0,r.jsx)(n.p,{children:"Lore defines the character's background and history, while Knowledge represents factual information the agent can reference and use."}),"\n",(0,r.jsx)(n.h3,{id:"how-do-i-add-custom-functionality",children:"How do I add custom functionality?"}),"\n",(0,r.jsx)(n.p,{children:"Create plugins that implement the Action, Provider, or Evaluator interfaces and register them with the runtime."}),"\n",(0,r.jsx)(n.h3,{id:"do-i-need-to-implement-all-components",children:"Do I need to implement all components?"}),"\n",(0,r.jsx)(n.p,{children:"No, each component is optional. Start with basic Actions and add Evaluators and Providers as needed."}),"\n",(0,r.jsx)(n.h3,{id:"how-does-rag-integration-work",children:"How does RAG integration work?"}),"\n",(0,r.jsx)(n.p,{children:"Documents are chunked, embedded, and stored in the knowledge base for semantic search during conversations via the RAGKnowledgeManager."}),"\n",(0,r.jsx)(n.h3,{id:"whats-the-recommended-database-for-production",children:"What's the recommended database for production?"}),"\n",(0,r.jsx)(n.p,{children:"PostgreSQL with vector extensions is recommended for production, though SQLite works well for development and testing."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},71184:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(14041);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},95233:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/overview-aba2293da0a427fe9ef88886520730d3.png"}}]);