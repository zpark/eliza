"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[19065],{71184:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(14041);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}},87988:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"technical/faq","title":"Frequently Asked Questions (Technical)","description":"Technical questions and in-depth answers for developers working with ElizaOS.","source":"@site/docs/technical/faq.md","sourceDirName":"technical","slug":"/technical/faq","permalink":"/docs/technical/faq","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/technical/faq.md","tags":[],"version":"current","lastUpdatedBy":"Sayo","lastUpdatedAt":1751802400000,"frontMatter":{},"sidebar":"technicalSidebar","previous":{"title":"\u26a1 Performance Optimization","permalink":"/docs/technical/advanced/performance"}}');var r=s(31085),t=s(71184);const o={},l="Frequently Asked Questions (Technical)",a={},d=[{value:"\ud83c\udfd7\ufe0f Architecture &amp; Design",id:"\ufe0f-architecture--design",level:2},{value:"Q: Why does ElizaOS use UUID swizzling for rooms?",id:"q-why-does-elizaos-use-uuid-swizzling-for-rooms",level:3},{value:"Q: How does the plugin loading order affect system behavior?",id:"q-how-does-the-plugin-loading-order-affect-system-behavior",level:3},{value:"Q: What&#39;s the difference between Actions, Providers, and Evaluators?",id:"q-whats-the-difference-between-actions-providers-and-evaluators",level:3},{value:"Q: How does memory consolidation work?",id:"q-how-does-memory-consolidation-work",level:3},{value:"\ud83d\udcbb Development",id:"-development",level:2},{value:"Q: Monorepo vs Standalone - when to use which?",id:"q-monorepo-vs-standalone---when-to-use-which",level:3},{value:"Q: How do I properly handle async operations in plugins?",id:"q-how-do-i-properly-handle-async-operations-in-plugins",level:3},{value:"Q: What&#39;s the proper way to extend the database schema?",id:"q-whats-the-proper-way-to-extend-the-database-schema",level:3},{value:"Q: How do I implement custom model providers?",id:"q-how-do-i-implement-custom-model-providers",level:3},{value:"\ud83d\udd27 Performance &amp; Optimization",id:"-performance--optimization",level:2},{value:"Q: How can I optimize memory searches?",id:"q-how-can-i-optimize-memory-searches",level:3},{value:"Q: What&#39;s the recommended way to handle rate limiting?",id:"q-whats-the-recommended-way-to-handle-rate-limiting",level:3},{value:"Q: How do I profile and optimize agent performance?",id:"q-how-do-i-profile-and-optimize-agent-performance",level:3},{value:"\ud83d\udd10 Security",id:"-security",level:2},{value:"Q: How do I safely store sensitive data?",id:"q-how-do-i-safely-store-sensitive-data",level:3},{value:"Q: What security considerations exist for plugin development?",id:"q-what-security-considerations-exist-for-plugin-development",level:3},{value:"\ud83d\udc1b Debugging &amp; Troubleshooting",id:"-debugging--troubleshooting",level:2},{value:"Q: How do I debug memory-related issues?",id:"q-how-do-i-debug-memory-related-issues",level:3},{value:"Q: Why are my plugins not loading?",id:"q-why-are-my-plugins-not-loading",level:3},{value:"Q: How do I handle plugin conflicts?",id:"q-how-do-i-handle-plugin-conflicts",level:3},{value:"\ud83d\ude80 Deployment &amp; Scaling",id:"-deployment--scaling",level:2},{value:"Q: How do I horizontally scale ElizaOS agents?",id:"q-how-do-i-horizontally-scale-elizaos-agents",level:3},{value:"Q: How do I monitor agents in production?",id:"q-how-do-i-monitor-agents-in-production",level:3},{value:"Q: What&#39;s the best way to handle agent updates?",id:"q-whats-the-best-way-to-handle-agent-updates",level:3},{value:"Q: What&#39;s the recommended production deployment?",id:"q-whats-the-recommended-production-deployment",level:3},{value:"\ud83d\udcda Advanced Topics",id:"-advanced-topics",level:2},{value:"Q: How do I implement custom memory consolidation strategies?",id:"q-how-do-i-implement-custom-memory-consolidation-strategies",level:3},{value:"Q: How do I implement multi-modal agents?",id:"q-how-do-i-implement-multi-modal-agents",level:3},{value:"Q: How do I implement custom conversation flows?",id:"q-how-do-i-implement-custom-conversation-flows",level:3},{value:"Q: Can I implement custom transport layers?",id:"q-can-i-implement-custom-transport-layers",level:3},{value:"\ud83c\udd98 Getting Help",id:"-getting-help",level:2},{value:"Technical Resources",id:"technical-resources",level:3},{value:"Debugging Tools",id:"debugging-tools",level:3},{value:"Development Workflow Tips",id:"development-workflow-tips",level:3},{value:"Performance Benchmarks",id:"performance-benchmarks",level:3},{value:"Common Error Codes",id:"common-error-codes",level:3},{value:"\ud83e\udd1d Contributing &amp; Community",id:"-contributing--community",level:2},{value:"Q: How do I contribute to ElizaOS core?",id:"q-how-do-i-contribute-to-elizaos-core",level:3},{value:"Q: What&#39;s the process for proposing new features?",id:"q-whats-the-process-for-proposing-new-features",level:3},{value:"Q: How do I create a plugin for the marketplace?",id:"q-how-do-i-create-a-plugin-for-the-marketplace",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"frequently-asked-questions-technical",children:"Frequently Asked Questions (Technical)"})}),"\n",(0,r.jsx)(n.p,{children:"Technical questions and in-depth answers for developers working with ElizaOS."}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-architecture--design",children:"\ud83c\udfd7\ufe0f Architecture & Design"}),"\n",(0,r.jsx)(n.h3,{id:"q-why-does-elizaos-use-uuid-swizzling-for-rooms",children:"Q: Why does ElizaOS use UUID swizzling for rooms?"}),"\n",(0,r.jsx)(n.p,{children:"ElizaOS implements deterministic UUID generation where each agent sees the same physical room with a different UUID. This design enables:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Isolation"}),": Each agent's memories are completely isolated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cross-Agent Communication"}),": Agents can still reference the same physical space"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent Identity"}),": Platform IDs remain stable while internal IDs are agent-specific"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Each agent generates its own view of the room\nconst roomId = generateDeterministicUUID(agentId, platformRoomId);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-how-does-the-plugin-loading-order-affect-system-behavior",children:"Q: How does the plugin loading order affect system behavior?"}),"\n",(0,r.jsx)(n.p,{children:"Plugin loading order is critical because:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service Registration"}),": Earlier plugins register services that later plugins depend on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handler Priority"}),": First-loaded plugins have higher priority for handling messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provider Precedence"}),": Earlier providers override later ones for the same data"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Loading order:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// 1. Core infrastructure (database)\n// 2. AI providers (text-only first, then embedding-capable)\n// 3. Platform adapters\n// 4. Feature plugins\n// 5. Bootstrap (default handlers - always last)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-whats-the-difference-between-actions-providers-and-evaluators",children:"Q: What's the difference between Actions, Providers, and Evaluators?"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Component"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Execution"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Actions"})}),(0,r.jsx)(n.td,{children:"Perform discrete behaviors"}),(0,r.jsx)(n.td,{children:"On-demand when detected"}),(0,r.jsx)(n.td,{children:"Send email, create post"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Providers"})}),(0,r.jsx)(n.td,{children:"Supply contextual information"}),(0,r.jsx)(n.td,{children:"Every message for context"}),(0,r.jsx)(n.td,{children:"Time, weather, user data"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Evaluators"})}),(0,r.jsx)(n.td,{children:"Post-process interactions"}),(0,r.jsx)(n.td,{children:"After response generation"}),(0,r.jsx)(n.td,{children:"Sentiment analysis, fact extraction"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"q-how-does-memory-consolidation-work",children:"Q: How does memory consolidation work?"}),"\n",(0,r.jsx)(n.p,{children:"Memory consolidation follows a multi-stage process:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// 1. Short-term buffer (last N messages)\n// 2. Importance evaluation\n// 3. Embedding generation for important memories\n// 4. Long-term storage with decay factor\n// 5. Periodic consolidation of similar memories\n"})}),"\n",(0,r.jsx)(n.p,{children:"Memories are scored based on:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Emotional salience"}),"\n",(0,r.jsx)(n.li,{children:"Information density"}),"\n",(0,r.jsx)(n.li,{children:"Repetition frequency"}),"\n",(0,r.jsx)(n.li,{children:"Explicit importance markers"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-development",children:"\ud83d\udcbb Development"}),"\n",(0,r.jsx)(n.h3,{id:"q-monorepo-vs-standalone---when-to-use-which",children:"Q: Monorepo vs Standalone - when to use which?"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Monorepo Development when:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Contributing to ElizaOS core"}),"\n",(0,r.jsx)(n.li,{children:"Developing plugins for distribution"}),"\n",(0,r.jsx)(n.li,{children:"Need to modify core functionality"}),"\n",(0,r.jsx)(n.li,{children:"Testing against latest changes"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Standalone Projects when:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Building production agents"}),"\n",(0,r.jsx)(n.li,{children:"Creating private/proprietary features"}),"\n",(0,r.jsx)(n.li,{children:"Want stable, versioned dependencies"}),"\n",(0,r.jsx)(n.li,{children:"Deploying to production"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-properly-handle-async-operations-in-plugins",children:"Q: How do I properly handle async operations in plugins?"}),"\n",(0,r.jsx)(n.p,{children:"Always use proper error handling and cleanup:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class MyPlugin implements Plugin {\n  private cleanup: (() => Promise<void>)[] = [];\n\n  async initialize(runtime: AgentRuntime): Promise<void> {\n    // Setup resources\n    const connection = await createConnection();\n    this.cleanup.push(() => connection.close());\n\n    // Register handlers with error boundaries\n    runtime.on('message', this.wrapHandler(this.handleMessage));\n  }\n\n  private wrapHandler(handler: Function) {\n    return async (...args: any[]) => {\n      try {\n        await handler.apply(this, args);\n      } catch (error) {\n        console.error('Handler error:', error);\n        // Don't let plugin errors crash the runtime\n      }\n    };\n  }\n\n  async shutdown(): Promise<void> {\n    // Clean up in reverse order\n    for (const cleanupFn of this.cleanup.reverse()) {\n      await cleanupFn();\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-whats-the-proper-way-to-extend-the-database-schema",children:"Q: What's the proper way to extend the database schema?"}),"\n",(0,r.jsx)(n.p,{children:"Use migrations with your plugin:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// plugins/my-plugin/src/migrations/001_initial.sql\nCREATE TABLE IF NOT EXISTS my_plugin_data (\n    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    agent_id UUID NOT NULL REFERENCES agents(id),\n    data JSONB NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE INDEX idx_my_plugin_agent ON my_plugin_data(agent_id);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then in your plugin:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"async initialize(runtime: AgentRuntime): Promise<void> {\n    const db = runtime.getService<IDatabaseService>('database');\n    await db.migrate(__dirname + '/migrations');\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-implement-custom-model-providers",children:"Q: How do I implement custom model providers?"}),"\n",(0,r.jsxs)(n.p,{children:["Implement the ",(0,r.jsx)(n.code,{children:"IModelProvider"})," interface:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class CustomModelProvider implements IModelProvider {\n  async generateText(prompt: string, options: ModelOptions): Promise<string> {\n    // Your implementation\n  }\n\n  async generateEmbedding(text: string): Promise<number[]> {\n    // Return embedding vector\n  }\n\n  async isAvailable(): Promise<boolean> {\n    // Check if provider is configured\n  }\n}\n\n// Register in plugin\nconst provider = new CustomModelProvider();\nruntime.registerModelProvider('custom', provider);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-performance--optimization",children:"\ud83d\udd27 Performance & Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"q-how-can-i-optimize-memory-searches",children:"Q: How can I optimize memory searches?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Embeddings Efficiently"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Cache embeddings for frequently searched queries\nconst embeddingCache = new LRUCache<string, number[]>(1000);\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implement Pagination"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Don't load all memories at once\nconst memories = await db.searchMemories(query, {\n  limit: 50,\n  offset: page * 50,\n});\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Indexes"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE INDEX idx_memories_embedding ON memories\nUSING ivfflat (embedding vector_cosine_ops);\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"q-whats-the-recommended-way-to-handle-rate-limiting",children:"Q: What's the recommended way to handle rate limiting?"}),"\n",(0,r.jsx)(n.p,{children:"Implement exponential backoff with jitter:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class RateLimiter {\n  private attempts = 0;\n\n  async execute<T>(fn: () => Promise<T>, maxAttempts = 3): Promise<T> {\n    try {\n      const result = await fn();\n      this.attempts = 0;\n      return result;\n    } catch (error) {\n      if (this.isRateLimitError(error) && this.attempts < maxAttempts) {\n        this.attempts++;\n        const delay = Math.min(1000 * Math.pow(2, this.attempts), 30000);\n        const jitter = Math.random() * delay * 0.1;\n        await sleep(delay + jitter);\n        return this.execute(fn, maxAttempts);\n      }\n      throw error;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-profile-and-optimize-agent-performance",children:"Q: How do I profile and optimize agent performance?"}),"\n",(0,r.jsx)(n.p,{children:"Use built-in performance monitoring:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Enable performance tracking\nruntime.enablePerfMonitoring({\n  sampleRate: 0.1, // Sample 10% of requests\n  slowThreshold: 1000, // Log requests over 1s\n});\n\n// Add custom metrics\nruntime.metrics.histogram('custom.operation.duration').record(duration);\nruntime.metrics.counter('custom.operation.count').increment();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-security",children:"\ud83d\udd10 Security"}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-safely-store-sensitive-data",children:"Q: How do I safely store sensitive data?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Never store sensitive data in character files"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Use environment variables for secrets"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encrypt data at rest"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class SecureStorage {\n  async store(key: string, value: any): Promise<void> {\n    const encrypted = await encrypt(JSON.stringify(value), this.key);\n    await this.db.set(key, encrypted);\n  }\n\n  async retrieve(key: string): Promise<any> {\n    const encrypted = await this.db.get(key);\n    const decrypted = await decrypt(encrypted, this.key);\n    return JSON.parse(decrypted);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-what-security-considerations-exist-for-plugin-development",children:"Q: What security considerations exist for plugin development?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Validation"}),": Always validate external input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQL Injection"}),": Use parameterized queries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Limits"}),": Implement timeouts and memory limits"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sandboxing"}),": Don't use ",(0,r.jsx)(n.code,{children:"eval()"})," or dynamic code execution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions"}),": Request minimum necessary permissions"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-debugging--troubleshooting",children:"\ud83d\udc1b Debugging & Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-debug-memory-related-issues",children:"Q: How do I debug memory-related issues?"}),"\n",(0,r.jsx)(n.p,{children:"Enable debug logging for memory operations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Set in environment\nLOG_LEVEL = debug;\nDEBUG_MEMORY = true;\n\n// Or programmatically\nruntime.setLogLevel('debug');\nruntime.memory.enableDebugMode();\n"})}),"\n",(0,r.jsx)(n.p,{children:"Use memory inspection tools:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Dump memory state\nconst memoryState = await runtime.memory.debugDump();\nconsole.log(JSON.stringify(memoryState, null, 2));\n\n// Analyze memory usage\nconst stats = await runtime.memory.getStatistics();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-why-are-my-plugins-not-loading",children:"Q: Why are my plugins not loading?"}),"\n",(0,r.jsx)(n.p,{children:"Common issues and solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Check Plugin Structure"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Plugin must export default\nexport default {\n    name: 'my-plugin',\n    actions: [...],\n    providers: [...],\n    // ...\n};\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verify Dependencies"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check for missing dependencies\nbun pm ls\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Enable Plugin Debug Logging"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"DEBUG_PLUGINS=true bun start\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-handle-plugin-conflicts",children:"Q: How do I handle plugin conflicts?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Namespace your actions"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"actions: [\n    { name: 'MY_PLUGIN_ACTION', ... }\n]\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use service discovery"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const service = runtime.hasService('myService')\n  ? runtime.getService('myService')\n  : this.createDefaultService();\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Implement feature detection"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"if (runtime.supports('feature-name')) {\n  // Use feature\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"-deployment--scaling",children:"\ud83d\ude80 Deployment & Scaling"}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-horizontally-scale-elizaos-agents",children:"Q: How do I horizontally scale ElizaOS agents?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stateless Agents"}),": Keep agents stateless with shared backend"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Distributed Cache"}),": Use Redis for shared state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Pooling"}),": Configure connection pooling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Load Balancing"}),": Use sticky sessions for websockets"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Example Redis configuration\nconst redis = new Redis.Cluster([\n  { host: 'redis-1', port: 6379 },\n  { host: 'redis-2', port: 6379 },\n  { host: 'redis-3', port: 6379 },\n]);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-monitor-agents-in-production",children:"Q: How do I monitor agents in production?"}),"\n",(0,r.jsx)(n.p,{children:"Implement comprehensive monitoring:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Health check endpoint\napp.get('/health', async (req, res) => {\n  const health = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    services: {\n      database: await db.ping(),\n      memory: runtime.memory.getHealth(),\n      plugins: runtime.getPluginHealth(),\n    },\n    metrics: {\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      responses: await metrics.getResponseStats(),\n    },\n  };\n  res.json(health);\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-whats-the-best-way-to-handle-agent-updates",children:"Q: What's the best way to handle agent updates?"}),"\n",(0,r.jsx)(n.p,{children:"Use blue-green deployment:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. Deploy new version to staging\ndocker-compose -f docker-compose.staging.yml up -d\n\n# 2. Test new version\nbun run test:e2e -- --env=staging\n\n# 3. Switch traffic gradually\n# Update load balancer to route 10%, 50%, then 100%\n\n# 4. Monitor for errors\nbun run monitor:errors\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-whats-the-recommended-production-deployment",children:"Q: What's the recommended production deployment?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# docker-compose.yml for production\nversion: '3.8'\nservices:\n  agent:\n    image: elizaos/agent:latest\n    deploy:\n      replicas: 3\n    environment:\n      - DATABASE_URL=postgresql://...\n      - REDIS_URL=redis://...\n    depends_on:\n      - postgres\n      - redis\n\n  postgres:\n    image: postgres:15-alpine\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-advanced-topics",children:"\ud83d\udcda Advanced Topics"}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-implement-custom-memory-consolidation-strategies",children:"Q: How do I implement custom memory consolidation strategies?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class CustomConsolidator implements IMemoryConsolidator {\n  async consolidate(memories: Memory[]): Promise<Memory[]> {\n    // Group similar memories\n    const groups = this.groupBySimilarity(memories);\n\n    // Create summary memories\n    const consolidated = groups.map((group) => ({\n      type: 'consolidated',\n      content: this.summarize(group),\n      sources: group.map((m) => m.id),\n      importance: Math.max(...group.map((m) => m.importance)),\n    }));\n\n    return consolidated;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-implement-multi-modal-agents",children:"Q: How do I implement multi-modal agents?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class MultiModalAgent extends BaseAgent {\n  async processMessage(message: Message): Promise<void> {\n    // Handle text\n    if (message.content.text) {\n      const textResponse = await this.generateTextResponse(message);\n      await this.send(textResponse);\n    }\n\n    // Handle images\n    if (message.content.attachments?.some((a) => a.type === 'image')) {\n      const imageAnalysis = await this.analyzeImages(message.content.attachments);\n      const response = await this.generateResponseFromImage(imageAnalysis);\n      await this.send(response);\n    }\n\n    // Handle audio\n    if (message.content.attachments?.some((a) => a.type === 'audio')) {\n      const transcript = await this.transcribeAudio(message.content.attachments);\n      const response = await this.generateAudioResponse(transcript);\n      await this.sendAudio(response);\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-implement-custom-conversation-flows",children:"Q: How do I implement custom conversation flows?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class ConversationFlow {\n  private state: Map<string, any> = new Map();\n  private steps: FlowStep[] = [];\n\n  async execute(userId: string, input: any): Promise<FlowResult> {\n    const currentStep = this.getCurrentStep(userId);\n    const validation = await currentStep.validate(input);\n\n    if (!validation.valid) {\n      return {\n        type: 'retry',\n        message: validation.error,\n        step: currentStep,\n      };\n    }\n\n    // Store step data\n    this.state.set(`${userId}.${currentStep.id}`, input);\n\n    // Check if flow is complete\n    if (currentStep.isLast) {\n      return {\n        type: 'complete',\n        data: this.getFlowData(userId),\n      };\n    }\n\n    // Advance to next step\n    const nextStep = currentStep.getNext(input);\n    return {\n      type: 'continue',\n      step: nextStep,\n      message: nextStep.prompt,\n    };\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"q-can-i-implement-custom-transport-layers",children:"Q: Can I implement custom transport layers?"}),"\n",(0,r.jsxs)(n.p,{children:["Yes, implement the ",(0,r.jsx)(n.code,{children:"ITransport"})," interface:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class CustomTransport implements ITransport {\n  async start(): Promise<void> {\n    /* ... */\n  }\n  async stop(): Promise<void> {\n    /* ... */\n  }\n  async send(message: Message): Promise<void> {\n    /* ... */\n  }\n\n  on(event: string, handler: Function): void {\n    // Handle platform events\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-getting-help",children:"\ud83c\udd98 Getting Help"}),"\n",(0,r.jsx)(n.h3,{id:"technical-resources",children:"Technical Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/technical/api-reference/core-api",children:"Core API Documentation"})})," - Core API reference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/technical/api-reference/actions-api",children:"Actions API Documentation"})})," - Actions API reference"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://github.com/elizaOS/eliza/discussions",children:"GitHub Discussions"})})," - Technical discussions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://discord.gg/elizaos",children:"Discord #dev Channel"})})," - Developer chat"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://github.com/elizaOS/eliza/tree/main/packages",children:"Example Plugins"})})," - Reference implementations"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"debugging-tools",children:"Debugging Tools"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Runtime Inspector"}),": ",(0,r.jsx)(n.code,{children:"bun run inspect"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Analyzer"}),": ",(0,r.jsx)(n.code,{children:"bun run analyze-memory"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Profiler"}),": ",(0,r.jsx)(n.code,{children:"bun run profile"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plugin Validator"}),": ",(0,r.jsx)(n.code,{children:"bun run validate-plugin"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Tracer"}),": ",(0,r.jsx)(n.code,{children:"bun run trace-messages"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Query Analyzer"}),": ",(0,r.jsx)(n.code,{children:"bun run analyze-queries"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"development-workflow-tips",children:"Development Workflow Tips"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use TypeScript strict mode"})," for better error catching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set up pre-commit hooks"})," to run tests and linting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use dependency injection"})," for better testability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement circuit breakers"})," for external services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use structured logging"})," with correlation IDs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Write integration tests"})," for complex workflows"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor memory usage"})," during development"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use feature flags"})," for gradual rollouts"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-benchmarks",children:"Performance Benchmarks"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Metric"}),(0,r.jsx)(n.th,{children:"Target"}),(0,r.jsx)(n.th,{children:"Good"}),(0,r.jsx)(n.th,{children:"Needs Improvement"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Response Time"}),(0,r.jsx)(n.td,{children:"Under 200ms"}),(0,r.jsx)(n.td,{children:"Under 500ms"}),(0,r.jsx)(n.td,{children:"Over 1000ms"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Memory Usage"}),(0,r.jsx)(n.td,{children:"Under 100MB"}),(0,r.jsx)(n.td,{children:"Under 500MB"}),(0,r.jsx)(n.td,{children:"Over 1GB"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Concurrent Users"}),(0,r.jsx)(n.td,{children:"1000+"}),(0,r.jsx)(n.td,{children:"100+"}),(0,r.jsx)(n.td,{children:"Under 50"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Message Throughput"}),(0,r.jsx)(n.td,{children:"100/s"}),(0,r.jsx)(n.td,{children:"50/s"}),(0,r.jsx)(n.td,{children:"Under 10/s"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Plugin Load Time"}),(0,r.jsx)(n.td,{children:"Under 1s"}),(0,r.jsx)(n.td,{children:"Under 3s"}),(0,r.jsx)(n.td,{children:"Over 5s"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"common-error-codes",children:"Common Error Codes"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Meaning"}),(0,r.jsx)(n.th,{children:"Solution"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"E001"}),(0,r.jsx)(n.td,{children:"Plugin load failure"}),(0,r.jsx)(n.td,{children:"Check plugin structure"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"E002"}),(0,r.jsx)(n.td,{children:"Memory corruption"}),(0,r.jsx)(n.td,{children:"Rebuild memory index"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"E003"}),(0,r.jsx)(n.td,{children:"Service unavailable"}),(0,r.jsx)(n.td,{children:"Check service health"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"E004"}),(0,r.jsx)(n.td,{children:"Rate limit exceeded"}),(0,r.jsx)(n.td,{children:"Implement backoff"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"E005"}),(0,r.jsx)(n.td,{children:"Invalid character"}),(0,r.jsx)(n.td,{children:"Validate character.json"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"-contributing--community",children:"\ud83e\udd1d Contributing & Community"}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-contribute-to-elizaos-core",children:"Q: How do I contribute to ElizaOS core?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fork the repository"})," and create a feature branch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read the contributing guide"})," at ",(0,r.jsx)(n.code,{children:"/CONTRIBUTING.md"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Follow the RFC process"})," for major changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Write comprehensive tests"})," for new features"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update documentation"})," for any API changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Submit a pull request"})," with detailed description"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"q-whats-the-process-for-proposing-new-features",children:"Q: What's the process for proposing new features?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Search existing RFCs"})," in GitHub Discussions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create a detailed proposal"})," with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Problem statement"}),"\n",(0,r.jsx)(n.li,{children:"Proposed solution"}),"\n",(0,r.jsx)(n.li,{children:"Alternative approaches"}),"\n",(0,r.jsx)(n.li,{children:"Implementation plan"}),"\n",(0,r.jsx)(n.li,{children:"Breaking changes (if any)"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Gather community feedback"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Implement based on consensus"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"q-how-do-i-create-a-plugin-for-the-marketplace",children:"Q: How do I create a plugin for the marketplace?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// 1. Use the plugin template\nbunx create-eliza-plugin my-awesome-plugin\n\n// 2. Implement your plugin following patterns\n// 3. Add comprehensive tests\n// 4. Create documentation\n// 5. Publish to npm\nbun publish\n\n// 6. Submit to marketplace\n// Create PR to add your plugin to the registry\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["\ud83c\udfa4 ",(0,r.jsx)(n.strong,{children:"Office Hours"}),": Join our weekly developer Q&A every Thursday at 2 PM PST\n\ud83d\udcac ",(0,r.jsx)(n.strong,{children:"Discord"}),": Get help in ",(0,r.jsx)(n.a,{href:"https://discord.gg/elizaos",children:"#dev-help"}),"\n\ud83d\udcdd ",(0,r.jsx)(n.strong,{children:"GitHub"}),": ",(0,r.jsx)(n.a,{href:"https://github.com/elizaOS/eliza/issues",children:"Open issues"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/elizaOS/eliza/discussions",children:"discussions"}),"\n\ud83d\udce7 ",(0,r.jsx)(n.strong,{children:"Email"}),": Technical questions to ",(0,r.jsx)(n.a,{href:"mailto:dev-support@elizaos.ai",children:"dev-support@elizaos.ai"})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);