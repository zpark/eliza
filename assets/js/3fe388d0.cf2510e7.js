"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[84884],{71184:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(14041);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},91850:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"guides/memory-management","title":"Memory Management","description":"Overview","source":"@site/versioned_docs/version-0.25.9/guides/memory-management.md","sourceDirName":"guides","slug":"/guides/memory-management","permalink":"/docs/0.25.9/guides/memory-management","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/versioned_docs/version-0.25.9/guides/memory-management.md","tags":[],"version":"0.25.9","lastUpdatedBy":"Shaw","lastUpdatedAt":1747957163000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Secrets Management","permalink":"/docs/0.25.9/guides/secrets-management"},"next":{"title":"WSL Setup","permalink":"/docs/0.25.9/guides/wsl"}}');var s=i(31085),o=i(71184);const t={},a="Memory Management",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Memory Types",id:"memory-types",level:2},{value:"Memory Systems",id:"memory-systems",level:2},{value:"Basic Configuration",id:"basic-configuration",level:2},{value:"Database Setup",id:"database-setup",level:3},{value:"Development (SQLite)",id:"development-sqlite",level:4},{value:"Production (PostgreSQL)",id:"production-postgresql",level:4},{value:"Memory Operations",id:"memory-operations",level:3},{value:"Creating Memories",id:"creating-memories",level:4},{value:"Retrieving Memories",id:"retrieving-memories",level:4},{value:"RAG Knowledge Integration",id:"rag-knowledge-integration",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Memory Indexing",id:"memory-indexing",level:3},{value:"Caching Strategy",id:"caching-strategy",level:3},{value:"Memory Cleanup",id:"memory-cleanup",level:3},{value:"Monitoring and Debugging",id:"monitoring-and-debugging",level:2},{value:"Logging Configuration",id:"logging-configuration",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Issues and Solutions",id:"common-issues-and-solutions",level:3},{value:"FAQ",id:"faq",level:2},{value:"How do I fix embedding/vector dimension mismatch errors?",id:"how-do-i-fix-embeddingvector-dimension-mismatch-errors",level:3},{value:"How do I reset my agent&#39;s memory?",id:"how-do-i-reset-my-agents-memory",level:3},{value:"What storage options exist for agent memory?",id:"what-storage-options-exist-for-agent-memory",level:3},{value:"Where should I store static knowledge vs dynamic memory?",id:"where-should-i-store-static-knowledge-vs-dynamic-memory",level:3},{value:"How do I enable RAG (Retrieval Augmented Generation)?",id:"how-do-i-enable-rag-retrieval-augmented-generation",level:3},{value:"Do I need different memory setup for production?",id:"do-i-need-different-memory-setup-for-production",level:3},{value:"How do I configure database adapters for memory?",id:"how-do-i-configure-database-adapters-for-memory",level:3},{value:"How do I handle large knowledge datasets?",id:"how-do-i-handle-large-knowledge-datasets",level:3},{value:"How can I manage memory for multiple agents running simultaneously?",id:"how-can-i-manage-memory-for-multiple-agents-running-simultaneously",level:3},{value:"How do I clear memory when changing models?",id:"how-do-i-clear-memory-when-changing-models",level:3},{value:"How do I customize the memory system?",id:"how-do-i-customize-the-memory-system",level:3},{value:"How do I troubleshoot memory-related issues?",id:"how-do-i-troubleshoot-memory-related-issues",level:3},{value:"Further Reading",id:"further-reading",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"memory-management",children:"Memory Management"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"ElizaOS implements a sophisticated memory management system powered by Retrieval-Augmented Generation (RAG). This system enables agents to maintain contextual awareness and knowledge persistence across interactions while optimizing for both performance and accuracy."}),"\n",(0,s.jsx)(n.p,{children:"The Eliza framework uses multiple types of memory to support an agent's long-term engagement, contextual understanding, and adaptive responses. Each type of memory serves a specific purpose:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Message History"}),": Stores recent conversations to provide continuity within a session. This helps the agent maintain conversational context and avoid repetitive responses within short-term exchanges."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Factual Memory"}),": Holds specific, context-based facts about the user or environment, such as user preferences, recent activities, or specific details mentioned in previous interactions. This type of memory enables the agent to recall user-specific information across sessions."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Knowledge Base"}),": Contains general knowledge the agent might need to respond to broader queries or provide informative answers. This memory is more static, helping the agent retrieve pre-defined data, common responses, or static character lore."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Relationship Tracking"}),": Manages the agent\u2019s understanding of its relationship with users, including details like user-agent interaction frequency, sentiment, and connection history. It is particularly useful for building rapport and providing a more personalized interaction experience over time."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"RAG Integration"}),": Uses a vector search to perform contextual recall based on similarity matching. This enables the agent to retrieve relevant memory snippets or knowledge based on the content and intent of the current conversation, making its responses more contextually relevant."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"memory-types",children:"Memory Types"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Memory Managers"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"messageManager"}),": Manages conversation history."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"descriptionManager"}),": Stores user descriptions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"loreManager"}),": Handles character lore and background."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"documentsManager"}),": Manages large documents."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"knowledgeManager"}),": Stores searchable document fragments."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ragKnowledgeManager"}),": Handles RAG-based knowledge retrieval."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Short-term Memory (Message Context)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Stores recent conversation history"}),"\n",(0,s.jsx)(n.li,{children:"Automatically managed with configurable retention"}),"\n",(0,s.jsx)(n.li,{children:"Used for maintaining immediate context"}),"\n",(0,s.jsxs)(n.li,{children:["Implemented via the ",(0,s.jsx)(n.code,{children:"messageManager"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Long-term Memory (Descriptions)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Persists learned information about users and contexts"}),"\n",(0,s.jsx)(n.li,{children:"Stores important facts and relationships"}),"\n",(0,s.jsxs)(n.li,{children:["Managed through the ",(0,s.jsx)(n.code,{children:"descriptionManager"})]}),"\n",(0,s.jsx)(n.li,{children:"Supports semantic search via vector embeddings"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Static Knowledge (Lore)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Contains character-specific information"}),"\n",(0,s.jsx)(n.li,{children:"Holds historical data and background context"}),"\n",(0,s.jsxs)(n.li,{children:["Managed via the ",(0,s.jsx)(n.code,{children:"loreManager"})]}),"\n",(0,s.jsx)(n.li,{children:"Used for maintaining character consistency"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Document Storage"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handles large document management"}),"\n",(0,s.jsx)(n.li,{children:"Supports multiple file formats"}),"\n",(0,s.jsxs)(n.li,{children:["Managed through the ",(0,s.jsx)(n.code,{children:"documentsManager"})]}),"\n",(0,s.jsx)(n.li,{children:"Enables reference material integration"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"RAG Knowledge Base"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Searchable document fragments"}),"\n",(0,s.jsx)(n.li,{children:"Optimized for semantic retrieval"}),"\n",(0,s.jsxs)(n.li,{children:["Managed by ",(0,s.jsx)(n.code,{children:"ragKnowledgeManager"})]}),"\n",(0,s.jsx)(n.li,{children:"Supports dynamic knowledge integration"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"memory-systems",children:"Memory Systems"}),"\n",(0,s.jsx)(n.p,{children:"The Eliza framework uses multiple specialized memory managers to support different aspects of agent functionality:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Example memory manager usage\nconst memoryManager = runtime.getMemoryManager('messages');\nawait memoryManager.createMemory({\n  id: messageId,\n  content: { text: 'Message content' },\n  userId: userId,\n  roomId: roomId,\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"Memory managers support operations like:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"messageManager"}),": Manages conversation history."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"descriptionManager"}),": Stores user descriptions."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"loreManager"}),": Handles character lore and background."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"documentsManager"}),": Manages large documents."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"knowledgeManager"}),": Stores searchable document fragments."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ragKnowledgeManager"}),": Handles RAG-based knowledge retrieval."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Embedding generation and storage"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Memory search and retrieval"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Memory creation and deletion"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Memory counting and filtering"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface MemoryConfig {\n  dimensions: number; // Vector dimensions (default: 1536 for OpenAI)\n  matchThreshold: number; // Similarity threshold (0.0-1.0)\n  maxMemories: number; // Maximum memories to retrieve\n  retentionPeriod: string; // e.g., '30d', '6h'\n}\n\nconst config: MemoryConfig = {\n  dimensions: 1536,\n  matchThreshold: 0.8,\n  maxMemories: 10,\n  retentionPeriod: '30d',\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"database-setup",children:"Database Setup"}),"\n",(0,s.jsx)(n.h4,{id:"development-sqlite",children:"Development (SQLite)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const devConfig = {\n  type: 'sqlite',\n  database: './dev.db',\n  vectorExtension: false, // SQLite doesn't support vector operations natively\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"production-postgresql",children:"Production (PostgreSQL)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const prodConfig = {\n  type: 'postgres',\n  url: process.env.DATABASE_URL,\n  vectorExtension: true, // Enable pgvector extension\n  poolConfig: {\n    max: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000,\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"memory-operations",children:"Memory Operations"}),"\n",(0,s.jsx)(n.h4,{id:"creating-memories",children:"Creating Memories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function storeMemory(runtime: AgentRuntime, content: string, type: string) {\n  const embedding = await runtime.embed(content);\n\n  await runtime.messageManager.createMemory({\n    content: { text: content },\n    embedding,\n    userId: runtime.agentId,\n    roomId: runtime.roomId,\n    type,\n    metadata: {\n      timestamp: new Date(),\n      source: 'user-interaction',\n    },\n  });\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"retrieving-memories",children:"Retrieving Memories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function retrieveRelevantMemories(runtime: AgentRuntime, query: string) {\n  const embedding = await runtime.embed(query);\n\n  return await runtime.messageManager.searchMemoriesByEmbedding(embedding, {\n    match_threshold: 0.8,\n    count: 10,\n    include_metadata: true,\n  });\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"rag-knowledge-integration",children:"RAG Knowledge Integration"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Document Processing Pipeline"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Convert and process documents\nnpx folder2knowledge ./docs/content\n\n# Integrate with character knowledge\nnpx knowledge2character ./characters/agent.json ./knowledge/processed\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Runtime Integration"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Load and index knowledge\nawait runtime.ragKnowledgeManager.loadKnowledge({\n  path: './knowledge',\n  types: ['markdown', 'text'],\n  chunkSize: 1000,\n});\n\n// Query knowledge base\nconst context = await runtime.ragKnowledgeManager.search(query, {\n  maxResults: 5,\n  minScore: 0.7,\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"memory-indexing",children:"Memory Indexing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- PostgreSQL vector indexing\nCREATE INDEX idx_memory_embedding ON memories\nUSING ivfflat (embedding vector_cosine_ops)\nWITH (lists = 100);\n\n-- Composite index for common queries\nCREATE INDEX idx_memory_metadata ON memories (user_id, room_id, created_at);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface CacheConfig {\n  maxAge: number; // Maximum age in milliseconds\n  maxSize: number; // Maximum number of entries\n  cleanupInterval: number; // Cleanup interval in milliseconds\n}\n\nconst cacheConfig: CacheConfig = {\n  maxAge: 3600000, // 1 hour\n  maxSize: 1000,\n  cleanupInterval: 300000, // 5 minutes\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"memory-cleanup",children:"Memory Cleanup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Implement regular cleanup\nasync function cleanupOldMemories(runtime: AgentRuntime) {\n  const result = await runtime.messageManager.cleanup({\n    olderThan: '30d',\n    excludeTypes: ['critical', 'permanent'],\n    batchSize: 1000,\n  });\n\n  console.log(`Cleaned up ${result.count} memories`);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"monitoring-and-debugging",children:"Monitoring and Debugging"}),"\n",(0,s.jsx)(n.h3,{id:"logging-configuration",children:"Logging Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const logging = {\n  level: 'debug',\n  components: ['memory', 'knowledge', 'embedding'],\n  format: 'json',\n  destination: './logs/memory.log',\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function checkMemoryHealth(runtime: AgentRuntime) {\n  const stats = await runtime.messageManager.getStats();\n  const health = {\n    totalMemories: stats.count,\n    oldestMemory: stats.oldestTimestamp,\n    averageEmbeddingTime: stats.avgEmbeddingMs,\n    cacheHitRate: stats.cacheHitRate,\n  };\n\n  return health;\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Memory Management"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement regular cleanup routines"}),"\n",(0,s.jsx)(n.li,{children:"Use appropriate retention policies"}),"\n",(0,s.jsx)(n.li,{children:"Monitor memory usage and performance"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Knowledge Base"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Structure documents for efficient retrieval"}),"\n",(0,s.jsx)(n.li,{children:"Regular updates and maintenance"}),"\n",(0,s.jsx)(n.li,{children:"Version control for knowledge base"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Security"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement proper access controls"}),"\n",(0,s.jsx)(n.li,{children:"Sanitize input data"}),"\n",(0,s.jsx)(n.li,{children:"Regular security audits"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Scalability"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use connection pooling"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper caching"}),"\n",(0,s.jsx)(n.li,{children:"Monitor and optimize performance"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-issues-and-solutions",children:"Common Issues and Solutions"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Embedding Dimension Mismatch"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Verify model configuration matches database schema"}),"\n",(0,s.jsx)(n.li,{children:"Check for mixed embedding models in existing data"}),"\n",(0,s.jsx)(n.li,{children:"Solution: Migration script for standardizing dimensions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Memory Leaks"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement proper cleanup routines"}),"\n",(0,s.jsx)(n.li,{children:"Monitor memory usage patterns"}),"\n",(0,s.jsx)(n.li,{children:"Use connection pooling effectively"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Search Performance"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Optimize index configuration"}),"\n",(0,s.jsx)(n.li,{children:"Tune match thresholds"}),"\n",(0,s.jsx)(n.li,{children:"Implement efficient caching"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Data Consistency"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use transactions for related operations"}),"\n",(0,s.jsx)(n.li,{children:"Implement retry logic for failures"}),"\n",(0,s.jsx)(n.li,{children:"Regular integrity checks"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,s.jsx)(n.h3,{id:"how-do-i-fix-embeddingvector-dimension-mismatch-errors",children:"How do I fix embedding/vector dimension mismatch errors?"}),"\n",(0,s.jsxs)(n.p,{children:["Set ",(0,s.jsx)(n.code,{children:"USE_OPENAI_EMBEDDING=TRUE"})," in .env file or ensure consistent embedding models across your setup."]}),"\n",(0,s.jsx)(n.h3,{id:"how-do-i-reset-my-agents-memory",children:"How do I reset my agent's memory?"}),"\n",(0,s.jsxs)(n.p,{children:["Delete db.sqlite in the agent/data directory and restart the agent. For a complete reset, run ",(0,s.jsx)(n.code,{children:"pnpm clean"})," followed by ",(0,s.jsx)(n.code,{children:"pnpm install"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"what-storage-options-exist-for-agent-memory",children:"What storage options exist for agent memory?"}),"\n",(0,s.jsx)(n.p,{children:"SQLite for simple deployments, PostgreSQL/Supabase for complex needs. MongoDB also supported."}),"\n",(0,s.jsx)(n.h3,{id:"where-should-i-store-static-knowledge-vs-dynamic-memory",children:"Where should I store static knowledge vs dynamic memory?"}),"\n",(0,s.jsx)(n.p,{children:"Static knowledge goes in character.json's knowledge section. Dynamic memory uses database storage through memory system."}),"\n",(0,s.jsx)(n.h3,{id:"how-do-i-enable-rag-retrieval-augmented-generation",children:"How do I enable RAG (Retrieval Augmented Generation)?"}),"\n",(0,s.jsxs)(n.p,{children:["Set ",(0,s.jsx)(n.code,{children:'"ragKnowledge": true'})," in character file. Use folder2knowledge to convert documents into knowledge, then knowledge2character to create character files."]}),"\n",(0,s.jsx)(n.h3,{id:"do-i-need-different-memory-setup-for-production",children:"Do I need different memory setup for production?"}),"\n",(0,s.jsx)(n.p,{children:"Yes - PostgreSQL is recommended over SQLite for production deployments."}),"\n",(0,s.jsx)(n.h3,{id:"how-do-i-configure-database-adapters-for-memory",children:"How do I configure database adapters for memory?"}),"\n",(0,s.jsx)(n.p,{children:"Set up database URL in .env file and run proper migration scripts with required schema/functions."}),"\n",(0,s.jsx)(n.h3,{id:"how-do-i-handle-large-knowledge-datasets",children:"How do I handle large knowledge datasets?"}),"\n",(0,s.jsx)(n.p,{children:"Use proper database storage rather than storing directly in character file. Consider implementing custom vector database for larger datasets."}),"\n",(0,s.jsx)(n.h3,{id:"how-can-i-manage-memory-for-multiple-agents-running-simultaneously",children:"How can I manage memory for multiple agents running simultaneously?"}),"\n",(0,s.jsx)(n.p,{children:"Each agent maintains its own memory system. Plan for ~2GB RAM per agent."}),"\n",(0,s.jsx)(n.h3,{id:"how-do-i-clear-memory-when-changing-models",children:"How do I clear memory when changing models?"}),"\n",(0,s.jsx)(n.p,{children:"When switching between embedding models, delete the database and cached data before restarting the agent."}),"\n",(0,s.jsx)(n.h3,{id:"how-do-i-customize-the-memory-system",children:"How do I customize the memory system?"}),"\n",(0,s.jsx)(n.p,{children:"Use different database adapters (PostgreSQL, Supabase, MongoDB) and configure vector stores for knowledge management."}),"\n",(0,s.jsx)(n.h3,{id:"how-do-i-troubleshoot-memory-related-issues",children:"How do I troubleshoot memory-related issues?"}),"\n",(0,s.jsx)(n.p,{children:"Check runtime logs, verify database connections, and consider clearing cache and database if behavior seems cached."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/0.25.9/guides/configuration",children:"Configuration Guide"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);