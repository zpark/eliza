"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[70578],{63278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core/evaluators","title":"Evaluators System","description":"Understanding ElizaOS evaluators - cognitive components that enable agents to learn and evolve","source":"@site/docs/core/evaluators.md","sourceDirName":"core","slug":"/core/evaluators","permalink":"/docs/core/evaluators","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/core/evaluators.md","tags":[],"version":"current","lastUpdatedBy":"madjin","lastUpdatedAt":1750279966000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Evaluators System","description":"Understanding ElizaOS evaluators - cognitive components that enable agents to learn and evolve","keywords":["evaluators","cognition","learning","memory","facts","reflection","analysis"],"image":"/img/evaluators.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"Entities","permalink":"/docs/core/entities"},"next":{"title":"Character Files","permalink":"/docs/core/characters"}}');var a=t(31085),r=t(71184);const i={sidebar_position:7,title:"Evaluators System",description:"Understanding ElizaOS evaluators - cognitive components that enable agents to learn and evolve",keywords:["evaluators","cognition","learning","memory","facts","reflection","analysis"],image:"/img/evaluators.jpg"},o="\ud83e\udde0 Evaluators",l={},c=[{value:"Understanding Evaluators",id:"understanding-evaluators",level:2},{value:"Core Structure",id:"core-structure",level:3},{value:"Evaluator Execution Flow",id:"evaluator-execution-flow",level:3},{value:"Fact Evaluator: Memory Formation System",id:"fact-evaluator-memory-formation-system",level:2},{value:"How It Works",id:"how-it-works",level:3},{value:"1. Triggering (The &quot;When to Reflect&quot; System)",id:"1-triggering-the-when-to-reflect-system",level:4},{value:"2. Fact Extraction (The &quot;What Did I Learn?&quot; System)",id:"2-fact-extraction-the-what-did-i-learn-system",level:4},{value:"3. Memory Deduplication (The &quot;Is This New?&quot; System)",id:"3-memory-deduplication-the-is-this-new-system",level:4},{value:"4. Memory Storage (The &quot;Remember This&quot; System)",id:"4-memory-storage-the-remember-this-system",level:4},{value:"Example Processing",id:"example-processing",level:3},{value:"Key Design Considerations",id:"key-design-considerations",level:3},{value:"Reflection Evaluator: Self-Awareness System",id:"reflection-evaluator-self-awareness-system",level:2},{value:"How Reflections Work",id:"how-reflections-work",level:3},{value:"Example Reflection Output",id:"example-reflection-output",level:3},{value:"Implementation Details",id:"implementation-details",level:3},{value:"Validation Logic",id:"validation-logic",level:3},{value:"Common Memory Formation Patterns",id:"common-memory-formation-patterns",level:2},{value:"Integration with Other Systems",id:"integration-with-other-systems",level:2},{value:"Creating Custom Evaluators",id:"creating-custom-evaluators",level:2},{value:"Registering Custom Evaluators",id:"registering-custom-evaluators",level:3},{value:"Best Practices for Memory Formation",id:"best-practices-for-memory-formation",level:2},{value:"FAQ",id:"faq",level:2},{value:"What&#39;s the difference between actions and evaluators?",id:"whats-the-difference-between-actions-and-evaluators",level:3},{value:"When should I use the Fact Evaluator vs. the Reflection Evaluator?",id:"when-should-i-use-the-fact-evaluator-vs-the-reflection-evaluator",level:3},{value:"How often do evaluators run?",id:"how-often-do-evaluators-run",level:3},{value:"Can evaluators affect future responses?",id:"can-evaluators-affect-future-responses",level:3},{value:"How do I debug evaluator issues?",id:"how-do-i-debug-evaluator-issues",level:3},{value:"Can evaluators work across different platforms?",id:"can-evaluators-work-across-different-platforms",level:3},{value:"Related Resources",id:"related-resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-evaluators",children:"\ud83e\udde0 Evaluators"})}),"\n",(0,a.jsx)(n.p,{children:"Evaluators are cognitive components in the ElizaOS framework that enable agents to process conversations, extract knowledge, and build understanding - similar to how humans form memories after interactions. They provide a structured way for agents to introspect, learn from interactions, and evolve over time."}),"\n",(0,a.jsx)(n.h2,{id:"understanding-evaluators",children:"Understanding Evaluators"}),"\n",(0,a.jsxs)(n.p,{children:["Evaluators are specialized functions that work with the ",(0,a.jsx)(n.a,{href:"/api/classes/AgentRuntime",children:(0,a.jsx)(n.code,{children:"AgentRuntime"})})," to analyze conversations after a response has been generated. Unlike actions that create responses, evaluators perform background cognitive tasks that enable numerous advanced capabilities:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Knowledge Building"}),": Automatically extract and store facts from conversations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Relationship Tracking"}),": Identify connections between entities"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Conversation Quality"}),": Perform self-reflection on interaction quality"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Goal Tracking"}),": Determine if conversation objectives are being met"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Tone Analysis"}),": Evaluate emotional content and adjust future responses"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"User Profiling"}),": Build understanding of user preferences and needs over time"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance Metrics"}),": Gather data on agent effectiveness and learn from interactions"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"core-structure",children:"Core Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Handler, Validator, EvaluationExample } from '@elizaos/core';\n\ninterface Evaluator {\n  name: string; // Unique identifier\n  similes?: string[]; // Alternative names/triggers\n  description: string; // Purpose explanation\n  examples: EvaluationExample[]; // Sample usage patterns\n  handler: Handler; // Implementation logic\n  validate: Validator; // Execution criteria check\n  alwaysRun?: boolean; // Run regardless of validation\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"evaluator-execution-flow",children:"Evaluator Execution Flow"}),"\n",(0,a.jsx)(n.p,{children:"The agent runtime executes evaluators as part of its cognitive cycle:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Agent processes a message and generates a response"}),"\n",(0,a.jsxs)(n.li,{children:["Runtime calls ",(0,a.jsx)(n.code,{children:"evaluate()"})," after response generation"]}),"\n",(0,a.jsxs)(n.li,{children:["Each evaluator's ",(0,a.jsx)(n.code,{children:"validate()"})," method determines if it should run"]}),"\n",(0,a.jsxs)(n.li,{children:["For each valid evaluator, the ",(0,a.jsx)(n.code,{children:"handler()"})," function is executed"]}),"\n",(0,a.jsx)(n.li,{children:"Results are stored in memory and inform future responses"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"fact-evaluator-memory-formation-system",children:"Fact Evaluator: Memory Formation System"}),"\n",(0,a.jsx)(n.p,{children:'The Fact Evaluator serves as the agent\'s "episodic memory formation" system - similar to how humans process conversations and form memories. Just as you might reflect after a conversation "Oh, I learned something new about Sarah today", the Fact Evaluator systematically processes conversations to build up the agent\'s understanding of the world and the people in it.'}),"\n",(0,a.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,a.jsx)(n.h4,{id:"1-triggering-the-when-to-reflect-system",children:'1. Triggering (The "When to Reflect" System)'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n  const messageCount = await runtime.messageManager.countMemories(message.roomId);\n  const reflectionCount = Math.ceil(runtime.getConversationLength() / 2);\n  return messageCount % reflectionCount === 0;\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"Just like humans don't consciously analyze every single word in real-time, the Fact Evaluator runs periodically rather than after every message. It triggers a \"reflection\" phase every few messages to process what's been learned."}),"\n",(0,a.jsx)(n.h4,{id:"2-fact-extraction-the-what-did-i-learn-system",children:'2. Fact Extraction (The "What Did I Learn?" System)'}),"\n",(0,a.jsx)(n.p,{children:"The evaluator uses a template-based approach to extract three types of information:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Facts"}),": Unchanging truths about the world or people","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'"Bob lives in New York"'}),"\n",(0,a.jsx)(n.li,{children:'"Sarah has a degree in Computer Science"'}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Temporary or changeable states","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'"Bob is currently working on a new project"'}),"\n",(0,a.jsx)(n.li,{children:'"Sarah is visiting Paris this week"'}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Opinions"}),": Subjective views, feelings, or non-factual statements","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'"Bob thinks the project will be successful"'}),"\n",(0,a.jsx)(n.li,{children:'"Sarah loves French cuisine"'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"3-memory-deduplication-the-is-this-new-system",children:'3. Memory Deduplication (The "Is This New?" System)'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const filteredFacts = facts.filter((fact) => {\n  return (\n    !fact.already_known &&\n    fact.type === 'fact' &&\n    !fact.in_bio &&\n    fact.claim &&\n    fact.claim.trim() !== ''\n  );\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"Just as humans don't need to consciously re-learn things they already know, the Fact Evaluator:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Checks if information is already known"}),"\n",(0,a.jsx)(n.li,{children:"Verifies if it's in the agent's existing knowledge (bio)"}),"\n",(0,a.jsx)(n.li,{children:"Filters out duplicate or corrupted facts"}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"4-memory-storage-the-remember-this-system",children:'4. Memory Storage (The "Remember This" System)'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const factMemory = await factsManager.addEmbeddingToMemory({\n  userId: agentId!,\n  agentId,\n  content: { text: fact },\n  roomId,\n  createdAt: Date.now(),\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"Facts are stored with embeddings to enable:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Semantic search of related facts"}),"\n",(0,a.jsx)(n.li,{children:"Context-aware recall"}),"\n",(0,a.jsx)(n.li,{children:"Temporal tracking (when the fact was learned)"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"example-processing",children:"Example Processing"}),"\n",(0,a.jsx)(n.p,{children:"Given this conversation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'User: "I just moved to Seattle last month!"\nAgent: "How are you finding the weather there?"\nUser: "It\'s rainy, but I love my new job at the tech startup"\n'})}),"\n",(0,a.jsx)(n.p,{children:"The Fact Evaluator might extract:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "claim": "User moved to Seattle last month",\n    "type": "fact",\n    "in_bio": false,\n    "already_known": false\n  },\n  {\n    "claim": "User works at a tech startup",\n    "type": "fact",\n    "in_bio": false,\n    "already_known": false\n  },\n  {\n    "claim": "User enjoys their new job",\n    "type": "opinion",\n    "in_bio": false,\n    "already_known": false\n  }\n]\n'})}),"\n",(0,a.jsx)(n.h3,{id:"key-design-considerations",children:"Key Design Considerations"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Episodic vs Semantic Memory"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Facts build up the agent's semantic memory (general knowledge)"}),"\n",(0,a.jsx)(n.li,{children:"The raw conversation remains in episodic memory (specific experiences)"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Temporal Awareness"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Facts are timestamped to track when they were learned"}),"\n",(0,a.jsx)(n.li,{children:"Status facts can be updated as they change"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Confidence and Verification"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Multiple mentions of a fact increase confidence"}),"\n",(0,a.jsx)(n.li,{children:"Contradictory facts can be flagged for verification"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Privacy and Relevance"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Only stores relevant, conversation-appropriate facts"}),"\n",(0,a.jsx)(n.li,{children:"Respects explicit and implicit privacy boundaries"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"reflection-evaluator-self-awareness-system",children:"Reflection Evaluator: Self-Awareness System"}),"\n",(0,a.jsx)(n.p,{children:'The reflection evaluator extends beyond fact extraction to enable agents to develop a form of "self-awareness" about their conversational performance. It allows agents to:'}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Generate self-reflective thoughts about the conversation quality"}),"\n",(0,a.jsx)(n.li,{children:"Extract factual information from conversations (similar to the Fact Evaluator)"}),"\n",(0,a.jsx)(n.li,{children:"Identify and track relationships between entities"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"how-reflections-work",children:"How Reflections Work"}),"\n",(0,a.jsx)(n.p,{children:"When triggered, the reflection evaluator:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Analyzes recent conversations and existing knowledge"}),"\n",(0,a.jsxs)(n.li,{children:["Generates structured reflection output with:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Self-reflective thoughts about conversation quality"}),"\n",(0,a.jsx)(n.li,{children:"New facts extracted from conversation"}),"\n",(0,a.jsx)(n.li,{children:"Identified relationships between entities"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Stores this information in the agent's memory for future reference"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"example-reflection-output",children:"Example Reflection Output"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "thought": "I\'m engaging appropriately with John, maintaining a welcoming and professional tone. My questions are helping learn more about him as a new community member.",\n  "facts": [\n    {\n      "claim": "John is new to the community",\n      "type": "fact",\n      "in_bio": false,\n      "already_known": false\n    },\n    {\n      "claim": "John found the community through a friend interested in AI",\n      "type": "fact",\n      "in_bio": false,\n      "already_known": false\n    }\n  ],\n  "relationships": [\n    {\n      "sourceEntityId": "sarah-agent",\n      "targetEntityId": "user-123",\n      "tags": ["group_interaction"]\n    },\n    {\n      "sourceEntityId": "user-123",\n      "targetEntityId": "sarah-agent",\n      "tags": ["group_interaction"]\n    }\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,a.jsx)(n.p,{children:"The reflection evaluator uses a defined schema to ensure consistent output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const reflectionSchema = z.object({\n  facts: z.array(\n    z.object({\n      claim: z.string(),\n      type: z.string(),\n      in_bio: z.boolean(),\n      already_known: z.boolean(),\n    })\n  ),\n  relationships: z.array(relationshipSchema),\n});\n\nconst relationshipSchema = z.object({\n  sourceEntityId: z.string(),\n  targetEntityId: z.string(),\n  tags: z.array(z.string()),\n  metadata: z\n    .object({\n      interactions: z.number(),\n    })\n    .optional(),\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"validation-logic",children:"Validation Logic"}),"\n",(0,a.jsx)(n.p,{children:"The reflection evaluator includes validation logic that determines when reflection should occur:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n  const lastMessageId = await runtime.getCache<string>(\n    `${message.roomId}-reflection-last-processed`\n  );\n  const messages = await runtime.getMemories({\n    tableName: 'messages',\n    roomId: message.roomId,\n    count: runtime.getConversationLength(),\n  });\n\n  if (lastMessageId) {\n    const lastMessageIndex = messages.findIndex((msg) => msg.id === lastMessageId);\n    if (lastMessageIndex !== -1) {\n      messages.splice(0, lastMessageIndex + 1);\n    }\n  }\n\n  const reflectionInterval = Math.ceil(runtime.getConversationLength() / 4);\n\n  return messages.length > reflectionInterval;\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"This ensures reflections occur at appropriate intervals, typically after a set number of messages have been exchanged."}),"\n",(0,a.jsx)(n.h2,{id:"common-memory-formation-patterns",children:"Common Memory Formation Patterns"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Progressive Learning"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// First conversation\n"I live in Seattle" -> Stores as fact\n\n// Later conversation\n"I live in the Ballard neighborhood" -> Updates/enhances existing fact\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Fact Chaining"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Original facts\n'Works at tech startup';\n'Startup is in Seattle';\n\n// Inference potential\n'Works in Seattle tech industry';\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Temporal Tracking"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Status tracking\nt0: 'Looking for a job'(status);\nt1: 'Got a new job'(fact);\nt2: 'Been at job for 3 months'(status);\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Relationship Building"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Initial relationship\n{\n  "sourceEntityId": "user-123",\n  "targetEntityId": "sarah-agent",\n  "tags": ["new_interaction"]\n}\n\n// Evolving relationship\n{\n  "sourceEntityId": "user-123",\n  "targetEntityId": "sarah-agent",\n  "tags": ["frequent_interaction", "positive_sentiment"],\n  "metadata": { "interactions": 15 }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"integration-with-other-systems",children:"Integration with Other Systems"}),"\n",(0,a.jsx)(n.p,{children:"Evaluators work alongside other components:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Goal Evaluator"}),": Facts and reflections may influence goal progress"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Trust Evaluator"}),": Fact consistency affects trust scoring"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Memory Manager"}),": Facts enhance context for future conversations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Providers"}),": Facts inform response generation"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"creating-custom-evaluators",children:"Creating Custom Evaluators"}),"\n",(0,a.jsxs)(n.p,{children:["You can create your own evaluators by implementing the ",(0,a.jsx)(n.code,{children:"Evaluator"})," interface:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Evaluator, IAgentRuntime, Memory, State } from '@elizaos/core';\n\nconst customEvaluator: Evaluator = {\n  name: 'CUSTOM_EVALUATOR',\n  similes: ['ANALYZE', 'ASSESS'],\n  description: 'Performs custom analysis on conversations',\n\n  validate: async (runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n    // Your validation logic here\n    return true;\n  },\n\n  handler: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    // Your evaluation logic here\n\n    // Example of storing evaluation results\n    await runtime.addEmbeddingToMemory({\n      entityId: runtime.agentId,\n      content: { text: 'Evaluation result' },\n      roomId: message.roomId,\n      createdAt: Date.now(),\n    });\n\n    return { result: 'evaluation complete' };\n  },\n\n  examples: [\n    {\n      prompt: `Example context`,\n      messages: [\n        { name: 'User', content: { text: 'Example message' } },\n        { name: 'Agent', content: { text: 'Example response' } },\n      ],\n      outcome: `{ \"result\": \"example outcome\" }`,\n    },\n  ],\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"registering-custom-evaluators",children:"Registering Custom Evaluators"}),"\n",(0,a.jsx)(n.p,{children:"Custom evaluators can be registered with the agent runtime:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// In your plugin's initialization\nexport default {\n  name: 'custom-evaluator-plugin',\n  description: 'Adds custom evaluation capabilities',\n\n  init: async (config: any, runtime: IAgentRuntime) => {\n    // Register your custom evaluator\n    runtime.registerEvaluator(customEvaluator);\n  },\n\n  // Include the evaluator in the plugin exports\n  evaluators: [customEvaluator],\n};\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices-for-memory-formation",children:"Best Practices for Memory Formation"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Validate Facts"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Cross-reference with existing knowledge"}),"\n",(0,a.jsx)(n.li,{children:"Consider source reliability"}),"\n",(0,a.jsx)(n.li,{children:"Track fact confidence levels"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Manage Memory Growth"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Prioritize important facts"}),"\n",(0,a.jsx)(n.li,{children:"Consolidate related facts"}),"\n",(0,a.jsx)(n.li,{children:"Archive outdated status facts"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Handle Contradictions"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Flag conflicting facts"}),"\n",(0,a.jsx)(n.li,{children:"Maintain fact history"}),"\n",(0,a.jsx)(n.li,{children:"Update based on newest information"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Respect Privacy"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Filter sensitive information"}),"\n",(0,a.jsx)(n.li,{children:"Consider contextual appropriateness"}),"\n",(0,a.jsx)(n.li,{children:"Follow data retention policies"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Balance Reflection Frequency"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Too frequent: Computational overhead"}),"\n",(0,a.jsx)(n.li,{children:"Too infrequent: Missing important information"}),"\n",(0,a.jsx)(n.li,{children:"Adapt based on conversation complexity and pace"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,a.jsx)(n.h3,{id:"whats-the-difference-between-actions-and-evaluators",children:"What's the difference between actions and evaluators?"}),"\n",(0,a.jsx)(n.p,{children:"Actions are triggered during response generation and create visible outputs, while evaluators run after responses and perform background cognitive tasks without direct user visibility."}),"\n",(0,a.jsx)(n.h3,{id:"when-should-i-use-the-fact-evaluator-vs-the-reflection-evaluator",children:"When should I use the Fact Evaluator vs. the Reflection Evaluator?"}),"\n",(0,a.jsx)(n.p,{children:"Use the Fact Evaluator when you only need to extract and store factual information. Use the Reflection Evaluator when you need both fact extraction and relationship tracking, along with self-reflective assessment."}),"\n",(0,a.jsx)(n.h3,{id:"how-often-do-evaluators-run",children:"How often do evaluators run?"}),"\n",(0,a.jsx)(n.p,{children:"By default, evaluators run at intervals based on conversation length, typically after every few messages, to avoid unnecessary processing while still capturing important information."}),"\n",(0,a.jsx)(n.h3,{id:"can-evaluators-affect-future-responses",children:"Can evaluators affect future responses?"}),"\n",(0,a.jsx)(n.p,{children:"Yes! Facts and relationships stored by evaluators become part of the agent's memory and context, influencing future responses through the retrieval-augmented generation system."}),"\n",(0,a.jsx)(n.h3,{id:"how-do-i-debug-evaluator-issues",children:"How do I debug evaluator issues?"}),"\n",(0,a.jsx)(n.p,{children:"Use the logger to inspect evaluator execution and output. The most common issues involve entity resolution failures or schema validation errors."}),"\n",(0,a.jsx)(n.h3,{id:"can-evaluators-work-across-different-platforms",children:"Can evaluators work across different platforms?"}),"\n",(0,a.jsx)(n.p,{children:"Yes, evaluators are platform-agnostic and work the same way regardless of whether your agent is deployed on Discord, Twitter, Telegram, or web interfaces."}),"\n",(0,a.jsx)(n.h2,{id:"related-resources",children:"Related Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/core/actions",children:"Actions Documentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/core/providers",children:"Providers Documentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/core/agents",children:"Agent Runtime"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(14041);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);