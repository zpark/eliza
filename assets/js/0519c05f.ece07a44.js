"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[80800],{71184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(14041);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},98677:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"plugins/migration/claude-code/state-and-providers-guide","title":"ElizaOS State Management & Providers Guide - v1.x","description":"Important: This guide provides comprehensive documentation for the composeState method and Providers in v1.x, including comparisons with v0.","source":"@site/docs/plugins/migration/claude-code/state-and-providers-guide.md","sourceDirName":"plugins/migration/claude-code","slug":"/plugins/migration/claude-code/state-and-providers-guide","permalink":"/docs/plugins/migration/claude-code/state-and-providers-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/plugins/migration/claude-code/state-and-providers-guide.md","tags":[],"version":"current","lastUpdatedBy":"0xbbjoker","lastUpdatedAt":1751365902000,"frontMatter":{}}');var s=t(31085),r=t(71184);const a={},o="ElizaOS State Management & Providers Guide - v1.x",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"State Management with composeState",id:"state-management-with-composestate",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"State Filtering",id:"state-filtering",level:3},{value:"Filtering Examples",id:"filtering-examples",level:4},{value:"Available State Keys",id:"available-state-keys",level:3},{value:"Core Agent Information",id:"core-agent-information",level:4},{value:"Conversation Context",id:"conversation-context",level:4},{value:"Interaction History",id:"interaction-history",level:4},{value:"Character Examples",id:"character-examples",level:4},{value:"Directions &amp; Style",id:"directions--style",level:4},{value:"Room &amp; Participants",id:"room--participants",level:4},{value:"Goals &amp; Actions",id:"goals--actions",level:4},{value:"Evaluators",id:"evaluators",level:4},{value:"Knowledge",id:"knowledge",level:4},{value:"Providers",id:"providers",level:4},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Providers in v1",id:"providers-in-v1",level:2},{value:"Provider Interface",id:"provider-interface",level:3},{value:"Creating Providers",id:"creating-providers",level:3},{value:"Simple Text Provider",id:"simple-text-provider",level:4},{value:"Complex Data Provider",id:"complex-data-provider",level:4},{value:"Conditional Provider",id:"conditional-provider",level:4},{value:"Provider Options",id:"provider-options",level:3},{value:"<code>dynamic</code> Property",id:"dynamic-property",level:4},{value:"<code>position</code> Property",id:"position-property",level:4},{value:"<code>private</code> Property",id:"private-property",level:4},{value:"Provider Best Practices",id:"provider-best-practices",level:3},{value:"v0 vs v1 Comparison",id:"v0-vs-v1-comparison",level:2},{value:"composeState Changes",id:"composestate-changes",level:3},{value:"Method Signature",id:"method-signature",level:4},{value:"Key Differences:",id:"key-differences",level:4},{value:"Migration Example:",id:"migration-example",level:4},{value:"Provider Changes",id:"provider-changes",level:3},{value:"Interface Changes",id:"interface-changes",level:4},{value:"Return Type Changes",id:"return-type-changes",level:4},{value:"Key Differences:",id:"key-differences-1",level:4},{value:"Migration Checklist",id:"migration-checklist",level:3},{value:"Examples &amp; Patterns",id:"examples--patterns",level:2},{value:"State Filtering Pattern",id:"state-filtering-pattern",level:3},{value:"Provider Chain Pattern",id:"provider-chain-pattern",level:3},{value:"Conditional State Building",id:"conditional-state-building",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"elizaos-state-management--providers-guide---v1x",children:"ElizaOS State Management & Providers Guide - v1.x"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important"}),": This guide provides comprehensive documentation for the ",(0,s.jsx)(n.code,{children:"composeState"})," method and Providers in v1.x, including comparisons with v0."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#state-management-with-composestate",children:"State Management with composeState"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#basic-usage",children:"Basic Usage"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#state-filtering",children:"State Filtering"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#available-state-keys",children:"Available State Keys"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#providers-in-v1",children:"Providers in v1"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#provider-interface",children:"Provider Interface"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#creating-providers",children:"Creating Providers"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#provider-options",children:"Provider Options"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#provider-best-practices",children:"Provider Best Practices"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#v0-vs-v1-comparison",children:"v0 vs v1 Comparison"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"state-management-with-composestate",children:"State Management with composeState"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"composeState"})," method is the central mechanism for building the context state that powers agent responses. In v1, it has been enhanced with powerful filtering capabilities."]}),"\n",(0,s.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v1: Basic state composition\nconst state = await runtime.composeState(message);\n"})}),"\n",(0,s.jsx)(n.p,{children:"This creates a complete state object containing all available context:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Agent information (bio, lore, personality)"}),"\n",(0,s.jsx)(n.li,{children:"Conversation history"}),"\n",(0,s.jsx)(n.li,{children:"Room and participant details"}),"\n",(0,s.jsx)(n.li,{children:"Available actions and evaluators"}),"\n",(0,s.jsx)(n.li,{children:"Knowledge and RAG data"}),"\n",(0,s.jsx)(n.li,{children:"Provider-generated context"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"state-filtering",children:"State Filtering"}),"\n",(0,s.jsxs)(n.p,{children:["The v1 ",(0,s.jsx)(n.code,{children:"composeState"})," method introduces filtering capabilities for performance optimization:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v1: Signature\ncomposeState(\n  message: Memory,\n  includeList?: string[],    // Keys to include\n  onlyInclude?: boolean,     // If true, ONLY include listed keys\n  skipCache?: boolean        // Skip caching mechanism\n): Promise<State>\n"})}),"\n",(0,s.jsx)(n.h4,{id:"filtering-examples",children:"Filtering Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Include only specific state keys\nconst minimalState = await runtime.composeState(\n  message,\n  ['agentName', 'bio', 'recentMessages'],\n  true // onlyInclude = true\n);\n\n// Update only specific parts of existing state\nconst updatedState = await runtime.composeState(\n  message,\n  ['RECENT_MESSAGES', 'GOALS'] // Update only these\n);\n\n// Skip cache for fresh data\nconst freshState = await runtime.composeState(\n  message,\n  undefined,\n  false,\n  true // skipCache = true\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"available-state-keys",children:"Available State Keys"}),"\n",(0,s.jsx)(n.p,{children:"Here are the primary state keys you can filter:"}),"\n",(0,s.jsx)(n.h4,{id:"core-agent-information",children:"Core Agent Information"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agentId"})," - Agent's UUID"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"agentName"})," - Agent's display name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bio"})," - Agent biography (string or selected from array)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lore"})," - Random selection of lore bits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"adjective"})," - Random adjective from character"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"topic"})," / ",(0,s.jsx)(n.code,{children:"topics"})," - Agent's interests"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"conversation-context",children:"Conversation Context"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recentMessages"})," - Formatted recent messages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recentMessagesData"})," - Raw message Memory objects"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recentPosts"})," - Formatted posts in thread"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"attachments"})," - Formatted attachment information"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"interaction-history",children:"Interaction History"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recentMessageInteractions"})," - Past interactions as messages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recentPostInteractions"})," - Past interactions as posts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"recentInteractionsData"})," - Raw interaction Memory[]"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"character-examples",children:"Character Examples"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"characterPostExamples"})," - Example posts from character"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"characterMessageExamples"})," - Example conversations"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"directions--style",children:"Directions & Style"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"messageDirections"})," - Message style guidelines"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"postDirections"})," - Post style guidelines"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"room--participants",children:"Room & Participants"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"roomId"})," - Current room UUID"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actors"})," - Formatted actor information"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actorsData"})," - Raw Actor[] array"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"senderName"})," - Name of message sender"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"goals--actions",children:"Goals & Actions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"goals"})," - Formatted goals string"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"goalsData"})," - Raw Goal[] array"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actionNames"})," - Available action names"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actions"})," - Formatted action descriptions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"actionExamples"})," - Action usage examples"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"evaluators",children:"Evaluators"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"evaluators"})," - Formatted evaluator information"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"evaluatorNames"})," - List of evaluator names"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"evaluatorExamples"})," - Evaluator examples"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"evaluatorsData"})," - Raw Evaluator[] array"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"knowledge",children:"Knowledge"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"knowledge"})," - Formatted knowledge text"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"knowledgeData"})," - Knowledge items"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ragKnowledgeData"})," - RAG knowledge items"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"providers",children:"Providers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"providers"})," - Additional context from providers"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.p,{children:"Use filtering to optimize performance by only computing needed state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Minimal state for simple responses\nconst quickResponse = await runtime.composeState(\n  message,\n  ['agentName', 'bio', 'recentMessages', 'messageDirections'],\n  true\n);\n\n// Full state for complex decision-making\nconst fullState = await runtime.composeState(message);\n\n// Update pattern for ongoing conversations\nlet state = await runtime.composeState(message);\n// ... later in conversation ...\nstate = await runtime.composeState(newMessage, ['RECENT_MESSAGES', 'GOALS', 'attachments']);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"providers-in-v1",children:"Providers in v1"}),"\n",(0,s.jsx)(n.p,{children:'Providers supply dynamic contextual information to the agent, acting as the agent\'s "senses" for perceiving external data.'}),"\n",(0,s.jsx)(n.h3,{id:"provider-interface",children:"Provider Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"interface Provider {\n  // REQUIRED: Unique identifier\n  name: string;\n\n  // Optional metadata\n  description?: string;\n  dynamic?: boolean;\n  position?: number;\n  private?: boolean;\n\n  // The data retrieval method\n  get: (runtime: IAgentRuntime, message: Memory, state: State) => Promise<ProviderResult>;\n}\n\ninterface ProviderResult {\n  values?: {\n    [key: string]: any;\n  };\n  data?: {\n    [key: string]: any;\n  };\n  text?: string;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-providers",children:"Creating Providers"}),"\n",(0,s.jsx)(n.h4,{id:"simple-text-provider",children:"Simple Text Provider"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const weatherProvider: Provider = {\n  name: 'weatherProvider',\n  description: 'Provides current weather information',\n  dynamic: true,\n\n  get: async (runtime, message, state) => {\n    const weather = await fetchWeatherData();\n\n    return {\n      text: `Current weather: ${weather.temp}\xb0F, ${weather.condition}`,\n      values: {\n        temperature: weather.temp,\n        condition: weather.condition,\n      },\n    };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"complex-data-provider",children:"Complex Data Provider"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const marketDataProvider: Provider = {\n  name: 'marketDataProvider',\n  description: 'Provides real-time market data',\n  dynamic: true,\n  position: 10, // Higher priority\n\n  get: async (runtime, message, state) => {\n    const symbols = extractSymbolsFromMessage(message.content.text);\n    const marketData = await fetchMarketData(symbols);\n\n    const summary = formatMarketSummary(marketData);\n\n    return {\n      text: summary,\n      data: marketData,\n      values: {\n        mentionedSymbols: symbols,\n        marketStatus: marketData.status,\n      },\n    };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"conditional-provider",children:"Conditional Provider"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const contextualProvider: Provider = {\n  name: 'contextualProvider',\n  description: 'Provides context based on conversation',\n\n  get: async (runtime, message, state) => {\n    // Access state to make decisions\n    const topic = state.topic;\n    const recentTopics = analyzeRecentTopics(state.recentMessagesData);\n\n    if (!topic || !recentTopics.includes(topic)) {\n      return { text: '' }; // No additional context needed\n    }\n\n    const relevantInfo = await fetchTopicInfo(topic);\n\n    return {\n      text: `Relevant ${topic} information: ${relevantInfo}`,\n      data: { topic, info: relevantInfo },\n    };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"provider-options",children:"Provider Options"}),"\n",(0,s.jsxs)(n.h4,{id:"dynamic-property",children:[(0,s.jsx)(n.code,{children:"dynamic"})," Property"]}),"\n",(0,s.jsxs)(n.p,{children:["Set to ",(0,s.jsx)(n.code,{children:"true"})," for providers that return different data based on context:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const timeProvider: Provider = {\n  name: 'timeProvider',\n  dynamic: true, // Time always changes\n  get: async () => ({\n    text: `Current time: ${new Date().toLocaleString()}`,\n    values: { timestamp: Date.now() },\n  }),\n};\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"position-property",children:[(0,s.jsx)(n.code,{children:"position"})," Property"]}),"\n",(0,s.jsx)(n.p,{children:"Controls provider priority (higher = higher priority):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const criticalProvider: Provider = {\n  name: 'criticalProvider',\n  position: 100, // Will be processed before lower position providers\n  get: async () => ({ text: 'Critical information...' }),\n};\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"private-property",children:[(0,s.jsx)(n.code,{children:"private"})," Property"]}),"\n",(0,s.jsx)(n.p,{children:"Hide from public provider lists:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const internalProvider: Provider = {\n  name: 'internalProvider',\n  private: true, // Won't appear in provider lists\n  get: async () => ({ text: 'Internal data...' }),\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"provider-best-practices",children:"Provider Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Always Return ProviderResult"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u274c Bad - returning raw value\nget: async () => 'Some text';\n\n// \u2705 Good - returning ProviderResult\nget: async () => ({ text: 'Some text' });\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Use Appropriate Return Fields"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"return {\n  // Human-readable summary\n  text: 'Market is up 2.5% today',\n\n  // Simple key-value pairs for templates\n  values: {\n    marketChange: 2.5,\n    marketStatus: 'bullish'\n  },\n\n  // Complex nested data for processing\n  data: {\n    stocks: [...],\n    analysis: {...}\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Handle Errors Gracefully"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"get: async (runtime, message, state) => {\n  try {\n    const data = await fetchExternalData();\n    return { text: formatData(data), data };\n  } catch (error) {\n    elizaLogger.error('Provider error:', error);\n    return {\n      text: 'Unable to fetch data at this time',\n      values: { error: true },\n    };\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Optimize Performance"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const cachedProvider: Provider = {\n  name: 'cachedProvider',\n  dynamic: false, // Indicates static data\n\n  get: async (runtime) => {\n    // Check cache first\n    const cached = await runtime.getSetting('providerCache');\n    if (cached && !isExpired(cached)) {\n      return { data: cached.data };\n    }\n\n    // Fetch fresh data\n    const fresh = await fetchData();\n    await runtime.setSetting('providerCache', {\n      data: fresh,\n      timestamp: Date.now(),\n    });\n\n    return { data: fresh };\n  },\n};\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"v0-vs-v1-comparison",children:"v0 vs v1 Comparison"}),"\n",(0,s.jsx)(n.h3,{id:"composestate-changes",children:"composeState Changes"}),"\n",(0,s.jsx)(n.h4,{id:"method-signature",children:"Method Signature"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Simple with additional keys\ncomposeState(\n  message: Memory,\n  additionalKeys?: { [key: string]: unknown }\n): Promise<State>\n\n// v1: Advanced with filtering\ncomposeState(\n  message: Memory,\n  includeList?: string[],\n  onlyInclude?: boolean,\n  skipCache?: boolean\n): Promise<State>\n"})}),"\n",(0,s.jsx)(n.h4,{id:"key-differences",children:"Key Differences:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filtering"}),": v1 allows selective state composition"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": Can request only needed state keys"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Explicit cache control with ",(0,s.jsx)(n.code,{children:"skipCache"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Update Pattern"}),": Use same method for updates with specific keys"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"migration-example",children:"Migration Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Update pattern\nstate = await runtime.updateRecentMessageState(state);\n\n// v1: Update pattern\nstate = await runtime.composeState(message, ['RECENT_MESSAGES']);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"provider-changes",children:"Provider Changes"}),"\n",(0,s.jsx)(n.h4,{id:"interface-changes",children:"Interface Changes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Minimal interface\ninterface Provider {\n  get: (runtime, message, state?) => Promise<any>;\n}\n\n// v1: Rich interface\ninterface Provider {\n  name: string; // REQUIRED\n  description?: string;\n  dynamic?: boolean;\n  position?: number;\n  private?: boolean;\n  get: (runtime, message, state) => Promise<ProviderResult>;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"return-type-changes",children:"Return Type Changes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// v0: Return anything\nreturn 'Some text';\nreturn { data: 'value' };\n\n// v1: Return ProviderResult\nreturn {\n  text: 'Human readable',\n  values: { key: 'value' },\n  data: { complex: 'object' },\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"key-differences-1",children:"Key Differences:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Required Name"}),": Every provider must have unique ",(0,s.jsx)(n.code,{children:"name"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Structured Returns"}),": Must return ",(0,s.jsx)(n.code,{children:"ProviderResult"})," object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rich Metadata"}),": Can specify behavior with options"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Parameter"}),": No longer optional in ",(0,s.jsx)(n.code,{children:"get"})," method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Organization"}),": Clear separation of text, values, and data"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"migration-checklist",children:"Migration Checklist"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add ",(0,s.jsx)(n.code,{children:"name"})," property to all providers"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Update return statements to use ",(0,s.jsx)(n.code,{children:"ProviderResult"})," format"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Remove optional ",(0,s.jsx)(n.code,{children:"?"})," from state parameter in get method"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Consider adding ",(0,s.jsx)(n.code,{children:"description"})," for documentation"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Use ",(0,s.jsx)(n.code,{children:"dynamic: true"})," for context-dependent providers"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Replace ",(0,s.jsx)(n.code,{children:"updateRecentMessageState"})," with filtered ",(0,s.jsx)(n.code,{children:"composeState"})]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Optimize performance by filtering state keys"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Add error handling with graceful fallbacks"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Consider caching strategies for expensive operations"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"examples--patterns",children:"Examples & Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"state-filtering-pattern",children:"State Filtering Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Initial load - get essential state\nconst initialState = await runtime.composeState(\n  message,\n  ['agentName', 'bio', 'recentMessages', 'actions', 'providers'],\n  true\n);\n\n// Process message...\n\n// Update only what changed\nconst updatedState = await runtime.composeState(message, [\n  'RECENT_MESSAGES',\n  'goals',\n  'attachments',\n]);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"provider-chain-pattern",children:"Provider Chain Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const providers = [\n  weatherProvider, // position: 10\n  newsProvider, // position: 5\n  marketProvider, // position: 15\n  fallbackProvider, // position: 1\n];\n\n// Will be processed in order: market, weather, news, fallback\nruntime.providers = providers.sort((a, b) => (b.position || 0) - (a.position || 0));\n"})}),"\n",(0,s.jsx)(n.h3,{id:"conditional-state-building",children:"Conditional State Building"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const buildState = async (message: Memory, isDetailedResponse: boolean) => {\n  const baseKeys = ['agentName', 'bio', 'recentMessages'];\n\n  const keys = isDetailedResponse\n    ? [...baseKeys, 'lore', 'topics', 'characterMessageExamples', 'knowledge']\n    : baseKeys;\n\n  return runtime.composeState(message, keys, true);\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);